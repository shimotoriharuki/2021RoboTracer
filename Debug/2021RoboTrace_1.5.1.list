
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ab0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08017c70  08017c70  00027c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801877c  0801877c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801877c  0801877c  0002877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018784  08018784  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018784  08018784  00028784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801878c  0801878c  0002878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018790  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bc40  200001e0  0801896c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003be20  0801896c  0003be20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037f80  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a94  00000000  00000000  0006818c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021f8  00000000  00000000  0006fc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  00071e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037764  00000000  00000000  00073d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025c73  00000000  00000000  000ab4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001109ff  00000000  00000000  000d1117  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a564  00000000  00000000  001e1b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017c58 	.word	0x08017c58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017c58 	.word	0x08017c58

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fd90 	bl	8008afc <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20039914 	.word	0x20039914

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fd78 	bl	8008afc <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20039914 	.word	0x20039914

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fc01 	bl	8008828 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 f968 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 f962 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 f95c 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 f956 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 f950 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 f94a 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 f944 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 f93e 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 f938 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 f932 	bl	80072fc <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 f926 	bl	80072fc <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 f920 	bl	80072fc <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fced 	bl	8014b08 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b fb40 	bl	800c82c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b fb3c 	bl	800c82c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039b68 	.word	0x20039b68
 80011d0:	2003984c 	.word	0x2003984c
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = total_distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	ee07 3a90 	vmov	s15, r3
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_ZN7Encoder8clearCntEv+0x3c>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_ZN7Encoder8clearCntEv+0x40>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40010000 	.word	0x40010000
 8001474:	40010400 	.word	0x40010400

08001478 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f977 	bl	80017a8 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80014ba:	f000 f98b 	bl	80017d4 <fopen_folder_and_file>

	return ret;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <user_fclose+0x1c>)
 80014d4:	f00f ff04 	bl	80112e0 <f_close>

	return ret;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20038758 	.word	0x20038758

080014e8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	4613      	mov	r3, r2
 80014f6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	81fb      	strh	r3, [r7, #14]
 8001500:	e030      	b.n	8001564 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f832 	bl	8000578 <__aeabi_f2d>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	e9cd 3400 	strd	r3, r4, [sp]
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <sd_write_float+0x94>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <sd_write_float+0x98>)
 8001522:	f012 fb61 	bl	8013be8 <sniprintf>

		if(state == ADD_WRITE){
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <sd_write_float+0x9c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4619      	mov	r1, r3
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <sd_write_float+0x9c>)
 8001534:	f00f ff48 	bl	80113c8 <f_lseek>
 8001538:	e003      	b.n	8001542 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800153a:	2100      	movs	r1, #0
 800153c:	4811      	ldr	r0, [pc, #68]	; (8001584 <sd_write_float+0x9c>)
 800153e:	f00f ff43 	bl	80113c8 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <sd_write_float+0x98>)
 8001544:	f7fe fe5c 	bl	8000200 <strlen>
 8001548:	4602      	mov	r2, r0
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <sd_write_float+0xa0>)
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <sd_write_float+0x98>)
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <sd_write_float+0x9c>)
 8001550:	f00f fcb1 	bl	8010eb6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001554:	f000 f958 	bl	8001808 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155c:	b29b      	uxth	r3, r3
 800155e:	3301      	adds	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbc8      	blt.n	8001502 <sd_write_float+0x1a>
	}
	return ret;
 8001570:	7b7b      	ldrb	r3, [r7, #13]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	08017c70 	.word	0x08017c70
 8001580:	200386c8 	.word	0x200386c8
 8001584:	20038758 	.word	0x20038758
 8001588:	20038748 	.word	0x20038748

0800158c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f900 	bl	80017a8 <create_path>

	if(state == OVER_WRITE){
 80015a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d108      	bne.n	80015c2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80015b0:	4822      	ldr	r0, [pc, #136]	; (800163c <sd_write_array_float+0xb0>)
 80015b2:	f00f febf 	bl	8011334 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80015b6:	4822      	ldr	r0, [pc, #136]	; (8001640 <sd_write_array_float+0xb4>)
 80015b8:	f010 f92a 	bl	8011810 <f_unlink>
		f_chdir("..");
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <sd_write_array_float+0xb8>)
 80015be:	f00f feb9 	bl	8011334 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015c2:	f000 f907 	bl	80017d4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	82fb      	strh	r3, [r7, #22]
 80015ca:	e028      	b.n	800161e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffcd 	bl	8000578 <__aeabi_f2d>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	e9cd 3400 	strd	r3, r4, [sp]
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <sd_write_array_float+0xbc>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4818      	ldr	r0, [pc, #96]	; (800164c <sd_write_array_float+0xc0>)
 80015ec:	f012 fafc 	bl	8013be8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <sd_write_array_float+0xc4>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4816      	ldr	r0, [pc, #88]	; (8001650 <sd_write_array_float+0xc4>)
 80015f8:	f00f fee6 	bl	80113c8 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <sd_write_array_float+0xc0>)
 80015fe:	f7fe fdff 	bl	8000200 <strlen>
 8001602:	4602      	mov	r2, r0
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <sd_write_array_float+0xc8>)
 8001606:	4911      	ldr	r1, [pc, #68]	; (800164c <sd_write_array_float+0xc0>)
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <sd_write_array_float+0xc4>)
 800160a:	f00f fc54 	bl	8010eb6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800160e:	f000 f8fb 	bl	8001808 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001612:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	82fb      	strh	r3, [r7, #22]
 800161e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbd0      	blt.n	80015cc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <sd_write_array_float+0xc4>)
 800162c:	f00f fe58 	bl	80112e0 <f_close>

	return ret;
 8001630:	7d7b      	ldrb	r3, [r7, #21]
}
 8001632:	4618      	mov	r0, r3
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	200385c8 	.word	0x200385c8
 8001640:	20037488 	.word	0x20037488
 8001644:	08017c8c 	.word	0x08017c8c
 8001648:	08017c70 	.word	0x08017c70
 800164c:	200386c8 	.word	0x200386c8
 8001650:	20038758 	.word	0x20038758
 8001654:	20038748 	.word	0x20038748

08001658 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f898 	bl	80017a8 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001678:	f000 f8ac 	bl	80017d4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800167c:	e019      	b.n	80016b2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800167e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4913      	ldr	r1, [pc, #76]	; (80016d8 <sd_read_array_float+0x80>)
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <sd_read_array_float+0x84>)
 800168e:	f012 faff 	bl	8013c90 <siscanf>
		i++;
 8001692:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3301      	adds	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800169e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	db03      	blt.n	80016b2 <sd_read_array_float+0x5a>
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <sd_read_array_float+0x88>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <sd_read_array_float+0x84>)
 80016b8:	f010 fa88 	bl	8011bcc <f_gets>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1dd      	bne.n	800167e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016c2:	f000 f8a1 	bl	8001808 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <sd_read_array_float+0x88>)
 80016c8:	f00f fe0a 	bl	80112e0 <f_close>

	return ret;
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08017c7c 	.word	0x08017c7c
 80016dc:	200386c8 	.word	0x200386c8
 80016e0:	20038758 	.word	0x20038758

080016e4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f852 	bl	80017a8 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001704:	f000 f866 	bl	80017d4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001708:	e019      	b.n	800173e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4913      	ldr	r1, [pc, #76]	; (8001764 <sd_read_array_double+0x80>)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <sd_read_array_double+0x84>)
 800171a:	f012 fab9 	bl	8013c90 <siscanf>
		i++;
 800171e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001722:	b29b      	uxth	r3, r3
 8001724:	3301      	adds	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800172a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800172e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001732:	429a      	cmp	r2, r3
 8001734:	db03      	blt.n	800173e <sd_read_array_double+0x5a>
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	3b01      	subs	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <sd_read_array_double+0x88>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <sd_read_array_double+0x84>)
 8001744:	f010 fa42 	bl	8011bcc <f_gets>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1dd      	bne.n	800170a <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800174e:	f000 f85b 	bl	8001808 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <sd_read_array_double+0x88>)
 8001754:	f00f fdc4 	bl	80112e0 <f_close>

	return ret;
 8001758:	7d7b      	ldrb	r3, [r7, #21]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	08017c88 	.word	0x08017c88
 8001768:	200386c8 	.word	0x200386c8
 800176c:	20038758 	.word	0x20038758

08001770 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800177a:	2201      	movs	r2, #1
 800177c:	4908      	ldr	r1, [pc, #32]	; (80017a0 <sd_mount+0x30>)
 800177e:	4809      	ldr	r0, [pc, #36]	; (80017a4 <sd_mount+0x34>)
 8001780:	f00f f826 	bl	80107d0 <f_mount>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <sd_mount+0x20>
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e001      	b.n	8001794 <sd_mount+0x24>
	else ret = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08017c98 	.word	0x08017c98
 80017a4:	20037588 	.word	0x20037588

080017a8 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <create_path+0x24>)
 80017b6:	f012 fada 	bl	8013d6e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <create_path+0x28>)
 80017be:	f012 fad6 	bl	8013d6e <strcpy>

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200385c8 	.word	0x200385c8
 80017d0:	20037488 	.word	0x20037488

080017d4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <fopen_folder_and_file+0x24>)
 80017da:	f010 f8db 	bl	8011994 <f_mkdir>

	f_chdir(dirpath);
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <fopen_folder_and_file+0x24>)
 80017e0:	f00f fda8 	bl	8011334 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017e4:	2213      	movs	r2, #19
 80017e6:	4905      	ldr	r1, [pc, #20]	; (80017fc <fopen_folder_and_file+0x28>)
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <fopen_folder_and_file+0x2c>)
 80017ea:	f00f f837 	bl	801085c <f_open>

	f_chdir("..");
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <fopen_folder_and_file+0x30>)
 80017f0:	f00f fda0 	bl	8011334 <f_chdir>


}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200385c8 	.word	0x200385c8
 80017fc:	20037488 	.word	0x20037488
 8001800:	20038758 	.word	0x20038758
 8001804:	08017c8c 	.word	0x08017c8c

08001808 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e007      	b.n	8001824 <bufclear+0x1c>
		buffer[i] = '\0';
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <bufclear+0x30>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	ddf4      	ble.n	8001814 <bufclear+0xc>
	}
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200386c8 	.word	0x200386c8

0800183c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800184c:	b2db      	uxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <read_byte+0x54>)
 8001858:	f006 ffe6 	bl	8008828 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800185c:	f107 010f 	add.w	r1, r7, #15
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	2201      	movs	r2, #1
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <read_byte+0x58>)
 8001866:	f00a f9a7 	bl	800bbb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800186a:	f107 010e 	add.w	r1, r7, #14
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	2201      	movs	r2, #1
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <read_byte+0x58>)
 8001874:	f00a fad4 	bl	800be20 <HAL_SPI_Receive>
	CS_SET;
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <read_byte+0x54>)
 8001880:	f006 ffd2 	bl	8008828 <HAL_GPIO_WritePin>

	return val;
 8001884:	7bbb      	ldrb	r3, [r7, #14]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020400 	.word	0x40020400
 8001894:	200397f4 	.word	0x200397f4

08001898 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <write_byte+0x54>)
 80018ba:	f006 ffb5 	bl	8008828 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018be:	f107 010f 	add.w	r1, r7, #15
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	2201      	movs	r2, #1
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <write_byte+0x58>)
 80018c8:	f00a f976 	bl	800bbb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018cc:	1db9      	adds	r1, r7, #6
 80018ce:	2364      	movs	r3, #100	; 0x64
 80018d0:	2201      	movs	r2, #1
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <write_byte+0x58>)
 80018d4:	f00a f970 	bl	800bbb8 <HAL_SPI_Transmit>
	CS_SET;
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <write_byte+0x54>)
 80018e0:	f006 ffa2 	bl	8008828 <HAL_GPIO_WritePin>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020400 	.word	0x40020400
 80018f0:	200397f4 	.word	0x200397f4

080018f4 <IMU_init>:

uint16_t IMU_init() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff ff9c 	bl	800183c <read_byte>
 8001904:	4603      	mov	r3, r0
 8001906:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001908:	797b      	ldrb	r3, [r7, #5]
 800190a:	2be0      	cmp	r3, #224	; 0xe0
 800190c:	d119      	bne.n	8001942 <IMU_init+0x4e>
		ret = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001912:	2101      	movs	r1, #1
 8001914:	2006      	movs	r0, #6
 8001916:	f7ff ffbf 	bl	8001898 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800191a:	2110      	movs	r1, #16
 800191c:	2003      	movs	r0, #3
 800191e:	f7ff ffbb 	bl	8001898 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001922:	2120      	movs	r1, #32
 8001924:	207f      	movs	r0, #127	; 0x7f
 8001926:	f7ff ffb7 	bl	8001898 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800192a:	2106      	movs	r1, #6
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff ffb3 	bl	8001898 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001932:	2106      	movs	r1, #6
 8001934:	2014      	movs	r0, #20
 8001936:	f7ff ffaf 	bl	8001898 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800193a:	2100      	movs	r1, #0
 800193c:	207f      	movs	r0, #127	; 0x7f
 800193e:	f7ff ffab 	bl	8001898 <write_byte>
	}
	return ret;
 8001942:	88fb      	ldrh	r3, [r7, #6]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <read_gyro_data>:

void read_gyro_data() {
 800194c:	b598      	push	{r3, r4, r7, lr}
 800194e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001950:	2033      	movs	r0, #51	; 0x33
 8001952:	f7ff ff73 	bl	800183c <read_byte>
 8001956:	4603      	mov	r3, r0
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21c      	sxth	r4, r3
 800195c:	2034      	movs	r0, #52	; 0x34
 800195e:	f7ff ff6d 	bl	800183c <read_byte>
 8001962:	4603      	mov	r3, r0
 8001964:	b21b      	sxth	r3, r3
 8001966:	4323      	orrs	r3, r4
 8001968:	b21a      	sxth	r2, r3
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <read_gyro_data+0x64>)
 800196c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800196e:	2035      	movs	r0, #53	; 0x35
 8001970:	f7ff ff64 	bl	800183c <read_byte>
 8001974:	4603      	mov	r3, r0
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21c      	sxth	r4, r3
 800197a:	2036      	movs	r0, #54	; 0x36
 800197c:	f7ff ff5e 	bl	800183c <read_byte>
 8001980:	4603      	mov	r3, r0
 8001982:	b21b      	sxth	r3, r3
 8001984:	4323      	orrs	r3, r4
 8001986:	b21a      	sxth	r2, r3
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <read_gyro_data+0x68>)
 800198a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800198c:	2037      	movs	r0, #55	; 0x37
 800198e:	f7ff ff55 	bl	800183c <read_byte>
 8001992:	4603      	mov	r3, r0
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21c      	sxth	r4, r3
 8001998:	2038      	movs	r0, #56	; 0x38
 800199a:	f7ff ff4f 	bl	800183c <read_byte>
 800199e:	4603      	mov	r3, r0
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4323      	orrs	r3, r4
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <read_gyro_data+0x6c>)
 80019a8:	801a      	strh	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	bd98      	pop	{r3, r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20039790 	.word	0x20039790
 80019b4:	2003978e 	.word	0x2003978e
 80019b8:	20039788 	.word	0x20039788

080019bc <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	805a      	strh	r2, [r3, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	809a      	strh	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	80da      	strh	r2, [r3, #6]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	811a      	strh	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	815a      	strh	r2, [r3, #10]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
{

}
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a08:	f7ff ff74 	bl	80018f4 <IMU_init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	4619      	mov	r1, r3
 8001a14:	480e      	ldr	r0, [pc, #56]	; (8001a50 <_ZN3IMU4initEv+0x50>)
 8001a16:	f012 f851 	bl	8013abc <iprintf>

	lcd_clear();
 8001a1a:	f7ff fb41 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fb4d 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <_ZN3IMU4initEv+0x54>)
 8001a28:	f7ff fb74 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fb46 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <_ZN3IMU4initEv+0x58>)
 8001a3a:	f7ff fb6b 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f005 fc5b 	bl	80072fc <HAL_Delay>

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08017c9c 	.word	0x08017c9c
 8001a54:	08017cac 	.word	0x08017cac
 8001a58:	08017cb8 	.word	0x08017cb8
 8001a5c:	00000000 	.word	0x00000000

08001a60 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a68:	f7ff ff70 	bl	800194c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd5f 	bl	8000554 <__aeabi_i2d>
 8001a96:	a316      	add	r3, pc, #88	; (adr r3, 8001af0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fdc4 	bl	8000628 <__aeabi_dmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4625      	mov	r5, r4
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <_ZN3IMU12updateValuesEv+0xac>)
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd50 	bl	8000554 <__aeabi_i2d>
 8001ab4:	a310      	add	r3, pc, #64	; (adr r3, 8001af8 <_ZN3IMU12updateValuesEv+0x98>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fdb5 	bl	8000628 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fbf9 	bl	80002bc <__adddf3>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f7ff f859 	bl	8000b88 <__aeabi_d2iz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <_ZN3IMU12updateValuesEv+0xac>)
 8001ae6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bdb0      	pop	{r4, r5, r7, pc}
 8001af0:	eb851eb8 	.word	0xeb851eb8
 8001af4:	3f9eb851 	.word	0x3f9eb851
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	20039790 	.word	0x20039790
 8001b04:	2003978e 	.word	0x2003978e
 8001b08:	20039788 	.word	0x20039788
 8001b0c:	20000210 	.word	0x20000210

08001b10 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b30:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7fe fd1f 	bl	8000578 <__aeabi_f2d>
 8001b3a:	a316      	add	r3, pc, #88	; (adr r3, 8001b94 <_ZN3IMU8getOmegaEv+0x84>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b4e:	a313      	add	r3, pc, #76	; (adr r3, 8001b9c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fd66 	bl	8000628 <__aeabi_dmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4618      	mov	r0, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <_ZN3IMU8getOmegaEv+0x80>)
 8001b6a:	f7fe fe87 	bl	800087c <__aeabi_ddiv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	4618      	mov	r0, r3
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7ff f84f 	bl	8000c18 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	40668000 	.word	0x40668000
 8001b94:	66666666 	.word	0x66666666
 8001b98:	40306666 	.word	0x40306666
 8001b9c:	54411744 	.word	0x54411744
 8001ba0:	400921fb 	.word	0x400921fb

08001ba4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bac:	466b      	mov	r3, sp
 8001bae:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb4:	f005 fba2 	bl	80072fc <HAL_Delay>
	lcd_clear();
 8001bb8:	f7ff fa72 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fa7e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001bc4:	4840      	ldr	r0, [pc, #256]	; (8001cc8 <_ZN3IMU11calibrationEv+0x124>)
 8001bc6:	f7ff faa5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fa77 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bd2:	483e      	ldr	r0, [pc, #248]	; (8001ccc <_ZN3IMU11calibrationEv+0x128>)
 8001bd4:	f7ff fa9e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bdc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001be2:	1e5d      	subs	r5, r3, #1
 8001be4:	61bd      	str	r5, [r7, #24]
 8001be6:	462b      	mov	r3, r5
 8001be8:	3301      	adds	r3, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	0154      	lsls	r4, r2, #5
 8001bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bfe:	014b      	lsls	r3, r1, #5
 8001c00:	462b      	mov	r3, r5
 8001c02:	3301      	adds	r3, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	f04f 0400 	mov.w	r4, #0
 8001c12:	0154      	lsls	r4, r2, #5
 8001c14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c18:	014b      	lsls	r3, r1, #5
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3303      	adds	r3, #3
 8001c22:	3307      	adds	r3, #7
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	ebad 0d03 	sub.w	sp, sp, r3
 8001c2c:	466b      	mov	r3, sp
 8001c2e:	3303      	adds	r3, #3
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	83fb      	strh	r3, [r7, #30]
 8001c3a:	8bfa      	ldrh	r2, [r7, #30]
 8001c3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	da13      	bge.n	8001c6c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c4a:	8bfb      	ldrh	r3, [r7, #30]
 8001c4c:	ee07 2a90 	vmov	s15, r2
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f005 fb4c 	bl	80072fc <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c64:	8bfb      	ldrh	r3, [r7, #30]
 8001c66:	3301      	adds	r3, #1
 8001c68:	83fb      	strh	r3, [r7, #30]
 8001c6a:	e7e6      	b.n	8001c3a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	462b      	mov	r3, r5
 8001c74:	3301      	adds	r3, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d00e      	beq.n	8001ca2 <_ZN3IMU11calibrationEv+0xfe>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e7ec      	b.n	8001c7c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001ca2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cae:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001cbc:	46b5      	mov	sp, r6
}
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08017cbc 	.word	0x08017cbc
 8001ccc:	08017cc8 	.word	0x08017cc8

08001cd0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	b299      	uxth	r1, r3
 8001ce4:	1dfa      	adds	r2, r7, #7
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <INA260_read+0x50>)
 8001cee:	f006 ff05 	bl	8008afc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	b299      	uxth	r1, r3
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <INA260_read+0x50>)
 8001d02:	f006 fff9 	bl	8008cf8 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200399a8 	.word	0x200399a8

08001d24 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	717b      	strb	r3, [r7, #5]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	733b      	strb	r3, [r7, #12]
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	737b      	strb	r3, [r7, #13]
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d4e:	793b      	ldrb	r3, [r7, #4]
 8001d50:	b299      	uxth	r1, r3
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <INA260_write+0x48>)
 8001d5e:	f006 fecd 	bl	8008afc <HAL_I2C_Master_Transmit>
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200399a8 	.word	0x200399a8

08001d70 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	79ba      	ldrb	r2, [r7, #6]
 8001d86:	79f9      	ldrb	r1, [r7, #7]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ffcb 	bl	8001d24 <INA260_write>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	461a      	mov	r2, r3
 8001da4:	21df      	movs	r1, #223	; 0xdf
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff ffe2 	bl	8001d70 <setConfig>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
{

}
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dde:	f006 fd0b 	bl	80087f8 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <_ZN8JoyStick8getValueEv+0x2e>
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4823      	ldr	r0, [pc, #140]	; (8001e8c <_ZN8JoyStick8getValueEv+0xc0>)
 8001dfe:	f006 fcfb 	bl	80087f8 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <_ZN8JoyStick8getValueEv+0x4e>
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	481a      	ldr	r0, [pc, #104]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e20:	f006 fcea 	bl	80087f8 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8JoyStick8getValueEv+0x70>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e40:	f006 fcda 	bl	80087f8 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN8JoyStick8getValueEv+0x90>
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e60:	f006 fcca 	bl	80087f8 <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <_ZN8JoyStick8getValueEv+0xb0>
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40020400 	.word	0x40020400

08001e94 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b52      	cmp	r3, #82	; 0x52
 8001ea4:	d112      	bne.n	8001ecc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	4856      	ldr	r0, [pc, #344]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f006 fcbb 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4853      	ldr	r0, [pc, #332]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 fcb5 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 fcaf 	bl	8008828 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eca:	e098      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b47      	cmp	r3, #71	; 0x47
 8001ed0:	d112      	bne.n	8001ef8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	484b      	ldr	r0, [pc, #300]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f006 fca5 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	4848      	ldr	r0, [pc, #288]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 fc9f 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	4845      	ldr	r0, [pc, #276]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 fc99 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001ef6:	e082      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b42      	cmp	r3, #66	; 0x42
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4840      	ldr	r0, [pc, #256]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fc8f 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	483d      	ldr	r0, [pc, #244]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fc89 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	483a      	ldr	r0, [pc, #232]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fc83 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001f22:	e06c      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b43      	cmp	r3, #67	; 0x43
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fc79 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4832      	ldr	r0, [pc, #200]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fc73 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	482f      	ldr	r0, [pc, #188]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fc6d 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001f4e:	e056      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b4d      	cmp	r3, #77	; 0x4d
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fc63 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4827      	ldr	r0, [pc, #156]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fc5d 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fc57 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001f7a:	e040      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b59      	cmp	r3, #89	; 0x59
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fc4d 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	481c      	ldr	r0, [pc, #112]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fc47 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	4819      	ldr	r0, [pc, #100]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fc41 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001fa6:	e02a      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b57      	cmp	r3, #87	; 0x57
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4814      	ldr	r0, [pc, #80]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 fc37 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fc31 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fc2b 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001fd2:	e014      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b7e      	cmp	r3, #126	; 0x7e
 8001fd8:	d111      	bne.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fc21 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4806      	ldr	r0, [pc, #24]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fc1b 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fc15 	bl	8008828 <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020000 	.word	0x40020000

0800200c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	4613      	mov	r3, r2
 800201a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800201c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	4813      	ldr	r0, [pc, #76]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800202c:	f006 fbfc 	bl	8008828 <HAL_GPIO_WritePin>
 8002030:	e009      	b.n	8002046 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002042:	f006 fbf1 	bl	8008828 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d106      	bne.n	800205c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4808      	ldr	r0, [pc, #32]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002056:	f006 fbe7 	bl	8008828 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800205a:	e009      	b.n	8002070 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800205c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800206c:	f006 fbdc 	bl	8008828 <HAL_GPIO_WritePin>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020000 	.word	0x40020000

0800207c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe92 	bl	8001db4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	331c      	adds	r3, #28
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d008      	beq.n	80020b8 <_ZN10LineSensorC1Ev+0x3c>
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	3302      	adds	r3, #2
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	e7f2      	b.n	800209e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d009      	beq.n	80020e6 <_ZN10LineSensorC1Ev+0x6a>
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	3304      	adds	r3, #4
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
 80020e4:	e7f1      	b.n	80020ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3338      	adds	r3, #56	; 0x38
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d009      	beq.n	8002114 <_ZN10LineSensorC1Ev+0x98>
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	617b      	str	r3, [r7, #20]
		m = 0;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	3304      	adds	r3, #4
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	e7f1      	b.n	80020f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3338      	adds	r3, #56	; 0x38
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d009      	beq.n	8002142 <_ZN10LineSensorC1Ev+0xc6>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002138:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	3304      	adds	r3, #4
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002140:	e7f1      	b.n	8002126 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3748      	adds	r7, #72	; 0x48
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	220e      	movs	r2, #14
 8002158:	4619      	mov	r1, r3
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800215c:	f005 f934 	bl	80073c8 <HAL_ADC_Start_DMA>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200398cc 	.word	0x200398cc

0800216c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b0d      	cmp	r3, #13
 800217c:	dc2f      	bgt.n	80021de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3392      	adds	r3, #146	; 0x92
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	33a0      	adds	r3, #160	; 0xa0
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	440b      	add	r3, r1
 80021ca:	3306      	adds	r3, #6
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e7cc      	b.n	8002178 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	d902      	bls.n	80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]


}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	2000021c 	.word	0x2000021c

08002208 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800221a:	2b0d      	cmp	r3, #13
 800221c:	f200 80b8 	bhi.w	8002390 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002226:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800222a:	2b09      	cmp	r3, #9
 800222c:	d81c      	bhi.n	8002268 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800222e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002232:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002236:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4423      	add	r3, r4
 8002246:	3306      	adds	r3, #6
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	3304      	adds	r3, #4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	008b      	lsls	r3, r1, #2
 8002252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002256:	440b      	add	r3, r1
 8002258:	3b30      	subs	r3, #48	; 0x30
 800225a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800225c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002260:	3301      	adds	r3, #1
 8002262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002266:	e7de      	b.n	8002226 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800226e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002272:	2b09      	cmp	r3, #9
 8002274:	d84d      	bhi.n	8002312 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227a:	3301      	adds	r3, #1
 800227c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002280:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002284:	2b09      	cmp	r3, #9
 8002286:	d83e      	bhi.n	8002306 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002288:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002292:	4413      	add	r3, r2
 8002294:	3b30      	subs	r3, #48	; 0x30
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a4:	4413      	add	r3, r2
 80022a6:	3b30      	subs	r3, #48	; 0x30
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d521      	bpl.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c0:	4413      	add	r3, r2
 80022c2:	3b30      	subs	r3, #48	; 0x30
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022d6:	440a      	add	r2, r1
 80022d8:	3a30      	subs	r2, #48	; 0x30
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e2:	440b      	add	r3, r1
 80022e4:	3b30      	subs	r3, #48	; 0x30
 80022e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022f2:	4413      	add	r3, r2
 80022f4:	3b30      	subs	r3, #48	; 0x30
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	e7bc      	b.n	8002280 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800230a:	3301      	adds	r3, #1
 800230c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002310:	e7ad      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f92f 	bl	8000578 <__aeabi_f2d>
 800231a:	a32a      	add	r3, pc, #168	; (adr r3, 80023c4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f982 	bl	8000628 <__aeabi_dmul>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4625      	mov	r5, r4
 800232a:	461c      	mov	r4, r3
 800232c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f91d 	bl	8000578 <__aeabi_f2d>
 800233e:	a31c      	add	r3, pc, #112	; (adr r3, 80023b0 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f970 	bl	8000628 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	461a      	mov	r2, r3
 800235a:	4623      	mov	r3, r4
 800235c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc58 	bl	8000c18 <__aeabi_d2f>
 8002368:	4601      	mov	r1, r0
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	3301      	adds	r3, #1
 800238a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800238e:	e742      	b.n	8002216 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002398:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3738      	adds	r7, #56	; 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	f3af 8000 	nop.w
 80023b0:	66666666 	.word	0x66666666
 80023b4:	3fee6666 	.word	0x3fee6666
 80023b8:	20000220 	.word	0x20000220
 80023bc:	20000214 	.word	0x20000214
 80023c0:	20000218 	.word	0x20000218
 80023c4:	9999999a 	.word	0x9999999a
 80023c8:	3fa99999 	.word	0x3fa99999

080023cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b0a9      	sub	sp, #164	; 0xa4
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	f004 ff91 	bl	80072fc <HAL_Delay>

	lcd_clear();
 80023da:	f7fe fe61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023de:	2100      	movs	r1, #0
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fe6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023e6:	48b1      	ldr	r0, [pc, #708]	; (80026ac <_ZN10LineSensor11calibrationEv+0x2e0>)
 80023e8:	f7fe fe94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fe66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023f4:	48ae      	ldr	r0, [pc, #696]	; (80026b0 <_ZN10LineSensor11calibrationEv+0x2e4>)
 80023f6:	f7fe fe8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002400:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002404:	2b0d      	cmp	r3, #13
 8002406:	d823      	bhi.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002408:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800240c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	32b0      	adds	r2, #176	; 0xb0
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	440a      	add	r2, r1
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002420:	440b      	add	r3, r1
 8002422:	3b60      	subs	r3, #96	; 0x60
 8002424:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002426:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800242a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800243e:	440b      	add	r3, r1
 8002440:	3b98      	subs	r3, #152	; 0x98
 8002442:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002444:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002448:	3301      	adds	r3, #1
 800244a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800244e:	e7d7      	b.n	8002400 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fcb8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800245c:	4603      	mov	r3, r0
 800245e:	2b02      	cmp	r3, #2
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d079      	beq.n	8002560 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800246c:	2300      	movs	r3, #0
 800246e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002472:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002476:	2b0d      	cmp	r3, #13
 8002478:	d850      	bhi.n	800251c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002484:	4413      	add	r3, r2
 8002486:	3b60      	subs	r3, #96	; 0x60
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	33b0      	adds	r3, #176	; 0xb0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d50f      	bpl.n	80024c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024a6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	32b0      	adds	r2, #176	; 0xb0
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	440a      	add	r2, r1
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024be:	440b      	add	r3, r1
 80024c0:	3b60      	subs	r3, #96	; 0x60
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e024      	b.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024d0:	4413      	add	r3, r2
 80024d2:	3b98      	subs	r3, #152	; 0x98
 80024d4:	ed93 7a00 	vldr	s14, [r3]
 80024d8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	33b0      	adds	r3, #176	; 0xb0
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd0e      	ble.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024f2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	32b0      	adds	r2, #176	; 0xb0
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	440a      	add	r2, r1
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800250a:	440b      	add	r3, r1
 800250c:	3b98      	subs	r3, #152	; 0x98
 800250e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002510:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002514:	3301      	adds	r3, #1
 8002516:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800251a:	e7aa      	b.n	8002472 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f996 	bl	8003854 <_ZN12RotarySwitch8getValueEv>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800253e:	2201      	movs	r2, #1
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd61 	bl	800200c <_ZN3LED2LREaa>
 800254a:	e781      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002552:	2200      	movs	r2, #0
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd57 	bl	800200c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800255e:	e777      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 8002560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002574:	3338      	adds	r3, #56	; 0x38
 8002576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800257a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800257e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002582:	429a      	cmp	r2, r3
 8002584:	d016      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x1e8>
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffef 	bl	8000578 <__aeabi_f2d>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	4844      	ldr	r0, [pc, #272]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025a4:	f011 fa8a 	bl	8013abc <iprintf>
	for(const auto &m : max_values){
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	3304      	adds	r3, #4
 80025ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b2:	e7e2      	b.n	800257a <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 80025b4:	200a      	movs	r0, #10
 80025b6:	f011 fa99 	bl	8013aec <putchar>
	for(const auto &m : min_values){
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d014      	beq.n	8002606 <_ZN10LineSensor11calibrationEv+0x23a>
 80025dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffc6 	bl	8000578 <__aeabi_f2d>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	482f      	ldr	r0, [pc, #188]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025f6:	f011 fa61 	bl	8013abc <iprintf>
	for(const auto &m : min_values){
 80025fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025fe:	3304      	adds	r3, #4
 8002600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002604:	e7e5      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 8002606:	200a      	movs	r0, #10
 8002608:	f011 fa70 	bl	8013aec <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800260c:	2300      	movs	r3, #0
 800260e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	2b0d      	cmp	r3, #13
 8002618:	d826      	bhi.n	8002668 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800261a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002624:	4413      	add	r3, r2
 8002626:	3b60      	subs	r3, #96	; 0x60
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002636:	4413      	add	r3, r2
 8002638:	3b98      	subs	r3, #152	; 0x98
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002646:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80026b8 <_ZN10LineSensor11calibrationEv+0x2ec>
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	3392      	adds	r3, #146	; 0x92
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800265c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002660:	3301      	adds	r3, #1
 8002662:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002666:	e7d4      	b.n	8002612 <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800266e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002672:	2b0d      	cmp	r3, #13
 8002674:	d815      	bhi.n	80026a2 <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 8002676:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800267a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002684:	440a      	add	r2, r1
 8002686:	3a98      	subs	r2, #152	; 0x98
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	33a0      	adds	r3, #160	; 0xa0
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002696:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800269a:	3301      	adds	r3, #1
 800269c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026a0:	e7e5      	b.n	800266e <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026a2:	bf00      	nop
 80026a4:	37a4      	adds	r7, #164	; 0xa4
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08017cd4 	.word	0x08017cd4
 80026b0:	08017ce0 	.word	0x08017ce0
 80026b4:	08017cec 	.word	0x08017cec
 80026b8:	447a0000 	.word	0x447a0000

080026bc <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3338      	adds	r3, #56	; 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d012      	beq.n	8002708 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002728 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	db02      	blt.n	8002700 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	3301      	adds	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3304      	adds	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e7e8      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	2b0d      	cmp	r3, #13
 800270c:	d902      	bls.n	8002714 <_ZN10LineSensor13emergencyStopEv+0x58>
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
 8002712:	e001      	b.n	8002718 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002718:	7dfb      	ldrb	r3, [r7, #23]

}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	44160000 	.word	0x44160000

0800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

float mon_diff, mon_diff_lpf;

uint16_t mon_store_cnt;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	675a      	str	r2, [r3, #116]	; 0x74
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
{
	motor_ = motor;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a3a      	ldr	r2, [r7, #32]
 80027b4:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	61da      	str	r2, [r3, #28]
}
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	0000      	movs	r0, r0
 80027cc:	0000      	movs	r0, r0
	...

080027d0 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80027e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80027f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800280c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002838:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002844:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002850:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800285c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002868:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800287c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002884:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe75 	bl	8000578 <__aeabi_f2d>
 800288e:	a318      	add	r3, pc, #96	; (adr r3, 80028f0 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd fec8 	bl	8000628 <__aeabi_dmul>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	4625      	mov	r5, r4
 800289e:	461c      	mov	r4, r3
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe67 	bl	8000578 <__aeabi_f2d>
 80028aa:	a313      	add	r3, pc, #76	; (adr r3, 80028f8 <_ZN9LineTrace9calcErrorEv+0x128>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd feba 	bl	8000628 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd fcfe 	bl	80002bc <__adddf3>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	4618      	mov	r0, r3
 80028c6:	4621      	mov	r1, r4
 80028c8:	f7fe f9a6 	bl	8000c18 <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <_ZN9LineTrace9calcErrorEv+0x138>)
 80028d4:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028da:	6013      	str	r3, [r2, #0]

	return diff;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	ee07 3a90 	vmov	s15, r3

}
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdb0      	pop	{r4, r5, r7, pc}
 80028ec:	f3af 8000 	nop.w
 80028f0:	47ae147b 	.word	0x47ae147b
 80028f4:	3fb47ae1 	.word	0x3fb47ae1
 80028f8:	d70a3d71 	.word	0xd70a3d71
 80028fc:	3fed70a3 	.word	0x3fed70a3
 8002900:	20000258 	.word	0x20000258
 8002904:	20000264 	.word	0x20000264
 8002908:	2000025c 	.word	0x2000025c
 800290c:	00000000 	.word	0x00000000

08002910 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff59 	bl	80027d0 <_ZN9LineTrace9calcErrorEv>
 800291e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 800292c:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002942:	ed97 7a05 	vldr	s14, [r7, #20]
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	edd7 6a05 	vldr	s13, [r7, #20]
 800295e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002966:	ee17 0a90 	vmov	r0, s15
 800296a:	f7fd fe05 	bl	8000578 <__aeabi_f2d>
 800296e:	a32a      	add	r3, pc, #168	; (adr r3, 8002a18 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd ff82 	bl	800087c <__aeabi_ddiv>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4618      	mov	r0, r3
 800297e:	4621      	mov	r1, r4
 8002980:	f7fe f94a 	bl	8000c18 <__aeabi_d2f>
 8002984:	4603      	mov	r3, r0
 8002986:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fdf3 	bl	8000578 <__aeabi_f2d>
 8002992:	4604      	mov	r4, r0
 8002994:	460d      	mov	r5, r1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800299c:	edd7 7a05 	vldr	s15, [r7, #20]
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	f7fd fde6 	bl	8000578 <__aeabi_f2d>
 80029ac:	a31a      	add	r3, pc, #104	; (adr r3, 8002a18 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe39 	bl	8000628 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4620      	mov	r0, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	f7fd fc7d 	bl	80002bc <__adddf3>
 80029c2:	4603      	mov	r3, r0
 80029c4:	460c      	mov	r4, r1
 80029c6:	4618      	mov	r0, r3
 80029c8:	4621      	mov	r1, r4
 80029ca:	f7fe f925 	bl	8000c18 <__aeabi_d2f>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029d2:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 80029d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80029f8:	edd7 0a02 	vldr	s1, [r7, #8]
 80029fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002a00:	4610      	mov	r0, r2
 8002a02:	f001 fa65 	bl	8003ed0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	6013      	str	r3, [r2, #0]

}
 8002a0c:	bf00      	nop
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bdb0      	pop	{r4, r5, r7, pc}
 8002a14:	f3af 8000 	nop.w
 8002a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a1c:	3f50624d 	.word	0x3f50624d
 8002a20:	2000026c 	.word	0x2000026c
 8002a24:	20000268 	.word	0x20000268

08002a28 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2201      	movs	r2, #1
 8002a36:	4912      	ldr	r1, [pc, #72]	; (8002a80 <_ZN9LineTrace4initEv+0x58>)
 8002a38:	4812      	ldr	r0, [pc, #72]	; (8002a84 <_ZN9LineTrace4initEv+0x5c>)
 8002a3a:	f7fe fe0d 	bl	8001658 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	2201      	movs	r2, #1
 8002a44:	4910      	ldr	r1, [pc, #64]	; (8002a88 <_ZN9LineTrace4initEv+0x60>)
 8002a46:	480f      	ldr	r0, [pc, #60]	; (8002a84 <_ZN9LineTrace4initEv+0x5c>)
 8002a48:	f7fe fe06 	bl	8001658 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002a4c:	f107 030c 	add.w	r3, r7, #12
 8002a50:	2201      	movs	r2, #1
 8002a52:	490e      	ldr	r1, [pc, #56]	; (8002a8c <_ZN9LineTrace4initEv+0x64>)
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <_ZN9LineTrace4initEv+0x5c>)
 8002a56:	f7fe fdff 	bl	8001658 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a62:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a66:	eeb0 1a66 	vmov.f32	s2, s13
 8002a6a:	eef0 0a47 	vmov.f32	s1, s14
 8002a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f80c 	bl	8002a90 <_ZN9LineTrace7setGainEfff>

}
 8002a78:	bf00      	nop
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	08017d2c 	.word	0x08017d2c
 8002a84:	08017d34 	.word	0x08017d34
 8002a88:	08017d3c 	.word	0x08017d3c
 8002a8c:	08017d44 	.word	0x08017d44

08002a90 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002aa0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
	return kp_;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	ee07 3a90 	vmov	s15, r3
}
 8002ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_ZN9LineTrace5getKiEv>:


float LineTrace::getKi()
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	return ki_;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	ee07 3a90 	vmov	s15, r3
}
 8002af0:	eeb0 0a67 	vmov.f32	s0, s15
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	return kd_;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	ee07 3a90 	vmov	s15, r3
}
 8002b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d024      	beq.n	8002bb4 <_ZN9LineTrace4flipEv+0x5c>
		pidTrace();
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fed0 	bl	8002910 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fda1 	bl	80026bc <_ZN10LineSensor13emergencyStopEv>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d011      	beq.n	8002ba4 <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002bc0 <_ZN9LineTrace4flipEv+0x68>
 8002b88:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002bc0 <_ZN9LineTrace4flipEv+0x68>
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fb27 	bl	80031e0 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	330c      	adds	r3, #12
 8002b96:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fa35 	bl	800200c <_ZN3LED2LREaa>
		else{
			led_.LR(0, -1);

		}
	}
}
 8002ba2:	e007      	b.n	8002bb4 <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fa2c 	bl	800200c <_ZN3LED2LREaa>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	f3af 8000 	nop.w
	...

08002bc8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f9cc 	bl	8003f82 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 ff1a 	bl	8003a28 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f9c9 	bl	8003fa8 <_ZN12VelocityCtrl4stopEv>

	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69d8      	ldr	r0, [r3, #28]
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <_ZN9LineTrace4stopEv+0x30>)
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <_ZN9LineTrace4stopEv+0x34>)
 8002c1e:	4905      	ldr	r1, [pc, #20]	; (8002c34 <_ZN9LineTrace4stopEv+0x38>)
 8002c20:	f000 fa2a 	bl	8003078 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	//logger_->resetLogs();
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	08017d4c 	.word	0x08017d4c
 8002c30:	08017d58 	.word	0x08017d58
 8002c34:	08017d68 	.word	0x08017d68

08002c38 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8002c44:	2300      	movs	r3, #0
 8002c46:	737b      	strb	r3, [r7, #13]
	start();
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ffbd 	bl	8002bc8 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8002c4e:	7b7b      	ldrb	r3, [r7, #13]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d13b      	bne.n	8002ccc <_ZN9LineTrace7runningEv+0x94>
		switch(stage){
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <_ZN9LineTrace7runningEv+0x28>
 8002c5a:	2b0a      	cmp	r3, #10
 8002c5c:	d013      	beq.n	8002c86 <_ZN9LineTrace7runningEv+0x4e>
 8002c5e:	e034      	b.n	8002cca <_ZN9LineTrace7runningEv+0x92>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fed3 	bl	8003a10 <_ZN10SideSensor16getWhiteLineCntREv>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d024      	beq.n	8002cc4 <_ZN9LineTrace7runningEv+0x8c>
				loggerStart();
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f882 	bl	8002d84 <_ZN9LineTrace11loggerStartEv>
				stage = 10;
 8002c80:	230a      	movs	r3, #10
 8002c82:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8002c84:	e01e      	b.n	8002cc4 <_ZN9LineTrace7runningEv+0x8c>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fec0 	bl	8003a10 <_ZN10SideSensor16getWhiteLineCntREv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <_ZN9LineTrace7runningEv+0x90>
				loggerStop();
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f885 	bl	8002db0 <_ZN9LineTrace10loggerStopEv>
				HAL_Delay(100); //Run through after the goal
 8002ca6:	2064      	movs	r0, #100	; 0x64
 8002ca8:	f004 fb28 	bl	80072fc <HAL_Delay>

				setTargetVelocity(0);
 8002cac:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002cdc <_ZN9LineTrace7runningEv+0xa4>
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff42 	bl	8002b3a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8002cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cba:	f004 fb1f 	bl	80072fc <HAL_Delay>

				goal_flag = true;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	737b      	strb	r3, [r7, #13]

			}

			break;
 8002cc2:	e001      	b.n	8002cc8 <_ZN9LineTrace7runningEv+0x90>
			break;
 8002cc4:	bf00      	nop
 8002cc6:	e7c2      	b.n	8002c4e <_ZN9LineTrace7runningEv+0x16>
			break;
 8002cc8:	bf00      	nop
	while(goal_flag == false){
 8002cca:	e7c0      	b.n	8002c4e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff95 	bl	8002bfc <_ZN9LineTrace4stopEv>

}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	ed2d 8b02 	vpush	{d8}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00f      	beq.n	8002d16 <_ZN9LineTrace9storeLogsEv+0x36>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fb7d 	bl	80013fa <_ZN7Encoder16getTotalDistanceEv>
 8002d00:	eeb0 7a40 	vmov.f32	s14, s0
 8002d04:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	db01      	blt.n	8002d16 <_ZN9LineTrace9storeLogsEv+0x36>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <_ZN9LineTrace9storeLogsEv+0x38>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02b      	beq.n	8002d74 <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69dc      	ldr	r4, [r3, #28]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fb68 	bl	80013fa <_ZN7Encoder16getTotalDistanceEv>
 8002d2a:	eeb0 8a40 	vmov.f32	s16, s0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fbcd 	bl	80034d2 <_ZN8Odometry8getThetaEv>
 8002d38:	ec53 2b10 	vmov	r2, r3, d0
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd ff6a 	bl	8000c18 <__aeabi_d2f>
 8002d44:	4603      	mov	r3, r0
 8002d46:	ee00 3a90 	vmov	s1, r3
 8002d4a:	eeb0 0a48 	vmov.f32	s0, s16
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 f925 	bl	8002f9e <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fb8d 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fbc6 	bl	80034f4 <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002d72:	801a      	strh	r2, [r3, #0]
	}
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	ecbd 8b02 	vpop	{d8}
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	20000260 	.word	0x20000260

08002d84 <_ZN9LineTrace11loggerStartEv>:

void LineTrace::loggerStart()
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fb71 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fbaa 	bl	80034f4 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f98d 	bl	80030dc <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002dea:	3302      	adds	r3, #2
 8002dec:	2200      	movs	r2, #0
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002df6:	3304      	adds	r3, #4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e02:	3306      	adds	r3, #6
 8002e04:	2200      	movs	r2, #0
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002e24:	f7fe fca4 	bl	8001770 <sd_mount>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d019      	beq.n	8002e6c <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002e38:	481b      	ldr	r0, [pc, #108]	; (8002ea8 <_ZN6Logger10sdCardInitEv+0x90>)
 8002e3a:	f010 fec7 	bl	8013bcc <puts>

	  lcd_clear();
 8002e3e:	f7fe f92f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002e42:	2100      	movs	r1, #0
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fe f93b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002e4a:	4818      	ldr	r0, [pc, #96]	; (8002eac <_ZN6Logger10sdCardInitEv+0x94>)
 8002e4c:	f7fe f962 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002e50:	2101      	movs	r1, #1
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fe f934 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002e58:	4815      	ldr	r0, [pc, #84]	; (8002eb0 <_ZN6Logger10sdCardInitEv+0x98>)
 8002e5a:	f7fe f95b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e62:	f004 fa4b 	bl	80072fc <HAL_Delay>

	  ret = true;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e018      	b.n	8002e9e <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002e6c:	4811      	ldr	r0, [pc, #68]	; (8002eb4 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002e6e:	f010 fead 	bl	8013bcc <puts>

	  lcd_clear();
 8002e72:	f7fe f915 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002e76:	2100      	movs	r1, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe f921 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002e7e:	480b      	ldr	r0, [pc, #44]	; (8002eac <_ZN6Logger10sdCardInitEv+0x94>)
 8002e80:	f7fe f948 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002e84:	2101      	movs	r1, #1
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fe f91a 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <_ZN6Logger10sdCardInitEv+0xa0>)
 8002e8e:	f7fe f941 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002e92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e96:	f004 fa31 	bl	80072fc <HAL_Delay>

	  ret = false;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	08017d74 	.word	0x08017d74
 8002eac:	08017d84 	.word	0x08017d84
 8002eb0:	08017d90 	.word	0x08017d90
 8002eb4:	08017d98 	.word	0x08017d98
 8002eb8:	08017da8 	.word	0x08017da8

08002ebc <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d024      	beq.n	8002f1e <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002eda:	3302      	adds	r3, #2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002eee:	3302      	adds	r3, #2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002efc:	3302      	adds	r3, #2
 8002efe:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f06:	3302      	adds	r3, #2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d905      	bls.n	8002f1e <_ZN6Logger8storeLogEf+0x62>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f18:	3302      	adds	r3, #2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
	}
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d027      	beq.n	8002f92 <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f48:	3304      	adds	r3, #4
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002f52:	3310      	adds	r3, #16
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f62:	3304      	adds	r3, #4
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f70:	3304      	adds	r3, #4
 8002f72:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d905      	bls.n	8002f92 <_ZN6Logger9storeLog2Ef+0x68>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	801a      	strh	r2, [r3, #0]
	}
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	ed87 0a02 	vstr	s0, [r7, #8]
 8002faa:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002fb4:	3306      	adds	r3, #6
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002fce:	3306      	adds	r3, #6
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8002fd8:	3310      	adds	r3, #16
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002fe8:	3306      	adds	r3, #6
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002ff6:	3306      	adds	r3, #6
 8002ff8:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003000:	3306      	adds	r3, #6
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	f241 726f 	movw	r2, #5999	; 0x176f
 8003008:	4293      	cmp	r3, r2
 800300a:	d905      	bls.n	8003018 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003012:	3306      	adds	r3, #6
 8003014:	2200      	movs	r2, #0
 8003016:	801a      	strh	r2, [r3, #0]
	//}
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	2300      	movs	r3, #0
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	f242 7210 	movw	r2, #10000	; 0x2710
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68b8      	ldr	r0, [r7, #8]
 8003040:	f7fe faa4 	bl	800158c <sd_write_array_float>
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800305e:	3340      	adds	r3, #64	; 0x40
 8003060:	2200      	movs	r2, #0
 8003062:	9200      	str	r2, [sp, #0]
 8003064:	f242 7210 	movw	r2, #10000	; 0x2710
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	68b8      	ldr	r0, [r7, #8]
 800306c:	f7fe fa8e 	bl	800158c <sd_write_array_float>
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800308c:	3380      	adds	r3, #128	; 0x80
 800308e:	2200      	movs	r2, #0
 8003090:	9200      	str	r2, [sp, #0]
 8003092:	f241 7270 	movw	r2, #6000	; 0x1770
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68b8      	ldr	r0, [r7, #8]
 800309a:	f7fe fa77 	bl	800158c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 80030a4:	3340      	adds	r3, #64	; 0x40
 80030a6:	2200      	movs	r2, #0
 80030a8:	9200      	str	r2, [sp, #0]
 80030aa:	f241 7270 	movw	r2, #6000	; 0x1770
 80030ae:	6839      	ldr	r1, [r7, #0]
 80030b0:	68b8      	ldr	r0, [r7, #8]
 80030b2:	f7fe fa6b 	bl	800158c <sd_write_array_float>
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	805a      	strh	r2, [r3, #2]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <_ZN5Motor4initEv>:

void Motor::init()
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003124:	2108      	movs	r1, #8
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <_ZN5Motor4initEv+0x20>)
 8003128:	f009 fab0 	bl	800c68c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800312c:	210c      	movs	r1, #12
 800312e:	4803      	ldr	r0, [pc, #12]	; (800313c <_ZN5Motor4initEv+0x20>)
 8003130:	f009 faac 	bl	800c68c <HAL_TIM_PWM_Start>

}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2003988c 	.word	0x2003988c

08003140 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da0d      	bge.n	800316e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003158:	481f      	ldr	r0, [pc, #124]	; (80031d8 <_ZN5Motor9motorCtrlEv+0x98>)
 800315a:	f005 fb65 	bl	8008828 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003164:	b29b      	uxth	r3, r3
 8003166:	425b      	negs	r3, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	81fb      	strh	r3, [r7, #14]
 800316c:	e00a      	b.n	8003184 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800316e:	2201      	movs	r2, #1
 8003170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003174:	4818      	ldr	r0, [pc, #96]	; (80031d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8003176:	f005 fb57 	bl	8008828 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003180:	b29b      	uxth	r3, r3
 8003182:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da0d      	bge.n	80031aa <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003194:	4810      	ldr	r0, [pc, #64]	; (80031d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8003196:	f005 fb47 	bl	8008828 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	425b      	negs	r3, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	81bb      	strh	r3, [r7, #12]
 80031a8:	e00a      	b.n	80031c0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80031aa:	2200      	movs	r2, #0
 80031ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <_ZN5Motor9motorCtrlEv+0x98>)
 80031b2:	f005 fb39 	bl	8008828 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80031c0:	89fa      	ldrh	r2, [r7, #14]
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80031c8:	89ba      	ldrh	r2, [r7, #12]
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40020c00 	.word	0x40020c00
 80031dc:	2003988c 	.word	0x2003988c

080031e0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6178      	str	r0, [r7, #20]
 80031e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80031ec:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <_ZN5Motor8setRatioEdd+0xd8>)
 80031f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031fa:	f7fd fca5 	bl	8000b48 <__aeabi_dcmpgt>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <_ZN5Motor8setRatioEdd+0x30>
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	4c2b      	ldr	r4, [pc, #172]	; (80032b8 <_ZN5Motor8setRatioEdd+0xd8>)
 800320a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800320e:	e00e      	b.n	800322e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <_ZN5Motor8setRatioEdd+0xdc>)
 8003216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800321a:	f7fd fc77 	bl	8000b0c <__aeabi_dcmplt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <_ZN5Motor8setRatioEdd+0x4e>
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	4c24      	ldr	r4, [pc, #144]	; (80032bc <_ZN5Motor8setRatioEdd+0xdc>)
 800322a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8003234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003238:	f7fd fc86 	bl	8000b48 <__aeabi_dcmpgt>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <_ZN5Motor8setRatioEdd+0x6e>
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	4c1c      	ldr	r4, [pc, #112]	; (80032b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8003248:	e9c7 3400 	strd	r3, r4, [r7]
 800324c:	e00e      	b.n	800326c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <_ZN5Motor8setRatioEdd+0xdc>)
 8003254:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003258:	f7fd fc58 	bl	8000b0c <__aeabi_dcmplt>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <_ZN5Motor8setRatioEdd+0x8c>
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	4c15      	ldr	r4, [pc, #84]	; (80032bc <_ZN5Motor8setRatioEdd+0xdc>)
 8003268:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8003272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003276:	f7fd f9d7 	bl	8000628 <__aeabi_dmul>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	4618      	mov	r0, r3
 8003280:	4621      	mov	r1, r4
 8003282:	f7fd fc81 	bl	8000b88 <__aeabi_d2iz>
 8003286:	4603      	mov	r3, r0
 8003288:	b21a      	sxth	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8003294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003298:	f7fd f9c6 	bl	8000628 <__aeabi_dmul>
 800329c:	4603      	mov	r3, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	4618      	mov	r0, r3
 80032a2:	4621      	mov	r1, r4
 80032a4:	f7fd fc70 	bl	8000b88 <__aeabi_d2iz>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	805a      	strh	r2, [r3, #2]

}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	3ff00000 	.word	0x3ff00000
 80032bc:	bff00000 	.word	0xbff00000
 80032c0:	409c2000 	.word	0x409c2000

080032c4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 80032c4:	b490      	push	{r4, r7}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	609a      	str	r2, [r3, #8]
}
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bc90      	pop	{r4, r7}
 8003318:	4770      	bx	lr
 800331a:	0000      	movs	r0, r0
 800331c:	0000      	movs	r0, r0
	...

08003320 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fbee 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 8003334:	ee10 3a10 	vmov	r3, s0
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f91d 	bl	8000578 <__aeabi_f2d>
 800333e:	4603      	mov	r3, r0
 8003340:	460c      	mov	r4, r1
 8003342:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe f846 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8003350:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8003354:	a357      	add	r3, pc, #348	; (adr r3, 80034b4 <_ZN8Odometry12calcPotitionEv+0x194>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800335e:	f7fd f963 	bl	8000628 <__aeabi_dmul>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7fd f900 	bl	8000578 <__aeabi_f2d>
 8003378:	4682      	mov	sl, r0
 800337a:	468b      	mov	fp, r1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003390:	f7fd fa74 	bl	800087c <__aeabi_ddiv>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4640      	mov	r0, r8
 800339a:	4649      	mov	r1, r9
 800339c:	f7fc ff8e 	bl	80002bc <__adddf3>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	ec43 2b17 	vmov	d7, r2, r3
 80033a8:	eeb0 0a47 	vmov.f32	s0, s14
 80033ac:	eef0 0a67 	vmov.f32	s1, s15
 80033b0:	f00e fcb2 	bl	8011d18 <cos>
 80033b4:	ec53 2b10 	vmov	r2, r3, d0
 80033b8:	4650      	mov	r0, sl
 80033ba:	4659      	mov	r1, fp
 80033bc:	f7fd f934 	bl	8000628 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fc ff78 	bl	80002bc <__adddf3>
 80033cc:	4603      	mov	r3, r0
 80033ce:	460c      	mov	r4, r1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7fd f8cb 	bl	8000578 <__aeabi_f2d>
 80033e2:	4682      	mov	sl, r0
 80033e4:	468b      	mov	fp, r1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033fa:	f7fd fa3f 	bl	800087c <__aeabi_ddiv>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4640      	mov	r0, r8
 8003404:	4649      	mov	r1, r9
 8003406:	f7fc ff59 	bl	80002bc <__adddf3>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	ec43 2b17 	vmov	d7, r2, r3
 8003412:	eeb0 0a47 	vmov.f32	s0, s14
 8003416:	eef0 0a67 	vmov.f32	s1, s15
 800341a:	f00e fcc1 	bl	8011da0 <sin>
 800341e:	ec53 2b10 	vmov	r2, r3, d0
 8003422:	4650      	mov	r0, sl
 8003424:	4659      	mov	r1, fp
 8003426:	f7fd f8ff 	bl	8000628 <__aeabi_dmul>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fc ff43 	bl	80002bc <__adddf3>
 8003436:	4603      	mov	r3, r0
 8003438:	460c      	mov	r4, r1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	f7fc ff34 	bl	80002bc <__adddf3>
 8003454:	4603      	mov	r3, r0
 8003456:	460c      	mov	r4, r1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003464:	4618      	mov	r0, r3
 8003466:	4621      	mov	r1, r4
 8003468:	f7fd fbd6 	bl	8000c18 <__aeabi_d2f>
 800346c:	4602      	mov	r2, r0
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003470:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003478:	4618      	mov	r0, r3
 800347a:	4621      	mov	r1, r4
 800347c:	f7fd fbcc 	bl	8000c18 <__aeabi_d2f>
 8003480:	4602      	mov	r2, r0
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <_ZN8Odometry12calcPotitionEv+0x18c>)
 8003484:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800348c:	4618      	mov	r0, r3
 800348e:	4621      	mov	r1, r4
 8003490:	f7fd fbc2 	bl	8000c18 <__aeabi_d2f>
 8003494:	4602      	mov	r2, r0
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <_ZN8Odometry12calcPotitionEv+0x190>)
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a4:	f3af 8000 	nop.w
 80034a8:	20000270 	.word	0x20000270
 80034ac:	20000274 	.word	0x20000274
 80034b0:	20000278 	.word	0x20000278
 80034b4:	d2f1a9fc 	.word	0xd2f1a9fc
 80034b8:	3f50624d 	.word	0x3f50624d

080034bc <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	calcPotition();
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff2b 	bl	8003320 <_ZN8Odometry12calcPotitionEv>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZN8Odometry8getThetaEv>:
{
	return y_;
}

double Odometry::getTheta()
{
 80034d2:	b490      	push	{r4, r7}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	return theta_;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80034e0:	ec44 3b17 	vmov	d7, r3, r4
}
 80034e4:	eeb0 0a47 	vmov.f32	s0, s14
 80034e8:	eef0 0a67 	vmov.f32	s1, s15
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc90      	pop	{r4, r7}
 80034f2:	4770      	bx	lr

080034f4 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80034f4:	b490      	push	{r4, r7}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	x_ = 0;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f04f 0400 	mov.w	r4, #0
 8003506:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f04f 0400 	mov.w	r4, #0
 8003514:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	f04f 0400 	mov.w	r4, #0
 8003522:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bc90      	pop	{r4, r7}
 800352e:	4770      	bx	lr

08003530 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003530:	b490      	push	{r4, r7}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	f04f 0400 	mov.w	r4, #0
 8003548:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	f04f 0400 	mov.w	r4, #0
 8003564:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800356e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003572:	2200      	movs	r2, #0
 8003574:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <_ZN13PathFollowingC1Ev+0xec>)
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	f04f 0400 	mov.w	r4, #0
 8003580:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <_ZN13PathFollowingC1Ev+0xec>)
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	f04f 0400 	mov.w	r4, #0
 800358e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <_ZN13PathFollowingC1Ev+0xec>)
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80035a0:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <_ZN13PathFollowingC1Ev+0xf0>)
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	f04f 0400 	mov.w	r4, #0
 80035aa:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <_ZN13PathFollowingC1Ev+0xf0>)
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f04f 0400 	mov.w	r4, #0
 80035b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <_ZN13PathFollowingC1Ev+0xf0>)
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <_ZN13PathFollowingC1Ev+0xf0>)
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80035d8:	4a11      	ldr	r2, [pc, #68]	; (8003620 <_ZN13PathFollowingC1Ev+0xf0>)
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <_ZN13PathFollowingC1Ev+0xf0>)
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f04f 0400 	mov.w	r4, #0
 80035f0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80035f4:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <_ZN13PathFollowingC1Ev+0xf4>)
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	f04f 0400 	mov.w	r4, #0
 80035fe:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <_ZN13PathFollowingC1Ev+0xf4>)
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bc90      	pop	{r4, r7}
 800361a:	4770      	bx	lr
 800361c:	20039d90 	.word	0x20039d90
 8003620:	20039d20 	.word	0x20039d20
 8003624:	20039d80 	.word	0x20039d80

08003628 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003630:	f001 fcb2 	bl	8004f98 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003634:	f107 0318 	add.w	r3, r7, #24
 8003638:	2201      	movs	r2, #1
 800363a:	4915      	ldr	r1, [pc, #84]	; (8003690 <_ZN13PathFollowing4initEv+0x68>)
 800363c:	4815      	ldr	r0, [pc, #84]	; (8003694 <_ZN13PathFollowing4initEv+0x6c>)
 800363e:	f7fe f851 	bl	80016e4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003642:	f107 0310 	add.w	r3, r7, #16
 8003646:	2201      	movs	r2, #1
 8003648:	4913      	ldr	r1, [pc, #76]	; (8003698 <_ZN13PathFollowing4initEv+0x70>)
 800364a:	4812      	ldr	r0, [pc, #72]	; (8003694 <_ZN13PathFollowing4initEv+0x6c>)
 800364c:	f7fe f84a 	bl	80016e4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003650:	f107 0308 	add.w	r3, r7, #8
 8003654:	2201      	movs	r2, #1
 8003656:	4911      	ldr	r1, [pc, #68]	; (800369c <_ZN13PathFollowing4initEv+0x74>)
 8003658:	480e      	ldr	r0, [pc, #56]	; (8003694 <_ZN13PathFollowing4initEv+0x6c>)
 800365a:	f7fe f843 	bl	80016e4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800365e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003662:	ed97 6b04 	vldr	d6, [r7, #16]
 8003666:	ed97 5b02 	vldr	d5, [r7, #8]
 800366a:	eeb0 2a45 	vmov.f32	s4, s10
 800366e:	eef0 2a65 	vmov.f32	s5, s11
 8003672:	eeb0 1a46 	vmov.f32	s2, s12
 8003676:	eef0 1a66 	vmov.f32	s3, s13
 800367a:	eeb0 0a47 	vmov.f32	s0, s14
 800367e:	eef0 0a67 	vmov.f32	s1, s15
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f80c 	bl	80036a0 <_ZN13PathFollowing7setGainEddd>
}
 8003688:	bf00      	nop
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	08017db0 	.word	0x08017db0
 8003694:	08017db8 	.word	0x08017db8
 8003698:	08017dc0 	.word	0x08017dc0
 800369c:	08017dc8 	.word	0x08017dc8

080036a0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80036a0:	b490      	push	{r4, r7}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	61f8      	str	r0, [r7, #28]
 80036a8:	ed87 0b04 	vstr	d0, [r7, #16]
 80036ac:	ed87 1b02 	vstr	d1, [r7, #8]
 80036b0:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80036b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80036ba:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80036c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036c4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80036c8:	4a04      	ldr	r2, [pc, #16]	; (80036dc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80036ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80036ce:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80036d2:	bf00      	nop
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc90      	pop	{r4, r7}
 80036da:	4770      	bx	lr
 80036dc:	20039d90 	.word	0x20039d90

080036e0 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 80036e0:	b490      	push	{r4, r7}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <_ZN13PathFollowing8getKxValEv+0x24>)
 80036ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80036f2:	eeb0 0a47 	vmov.f32	s0, s14
 80036f6:	eef0 0a67 	vmov.f32	s1, s15
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc90      	pop	{r4, r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20039d90 	.word	0x20039d90

08003708 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003708:	b490      	push	{r4, r7}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003712:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003716:	ec44 3b17 	vmov	d7, r3, r4
}
 800371a:	eeb0 0a47 	vmov.f32	s0, s14
 800371e:	eef0 0a67 	vmov.f32	s1, s15
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bc90      	pop	{r4, r7}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20039d90 	.word	0x20039d90

08003730 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003730:	b490      	push	{r4, r7}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <_ZN13PathFollowing8getKtValEv+0x24>)
 800373a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800373e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003742:	eeb0 0a47 	vmov.f32	s0, s14
 8003746:	eef0 0a67 	vmov.f32	s1, s15
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bc90      	pop	{r4, r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20039d90 	.word	0x20039d90

08003758 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003760:	2088      	movs	r0, #136	; 0x88
 8003762:	f7fe fb18 	bl	8001d96 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003766:	2080      	movs	r0, #128	; 0x80
 8003768:	f7fe fb15 	bl	8001d96 <INA260_init>
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	0000      	movs	r0, r0
	...

08003778 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003780:	2188      	movs	r1, #136	; 0x88
 8003782:	2002      	movs	r0, #2
 8003784:	f7fe faa4 	bl	8001cd0 <INA260_read>
 8003788:	4603      	mov	r3, r0
 800378a:	4618      	mov	r0, r3
 800378c:	f7fc fee2 	bl	8000554 <__aeabi_i2d>
 8003790:	a30c      	add	r3, pc, #48	; (adr r3, 80037c4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f7fc ff47 	bl	8000628 <__aeabi_dmul>
 800379a:	4603      	mov	r3, r0
 800379c:	460c      	mov	r4, r1
 800379e:	4618      	mov	r0, r3
 80037a0:	4621      	mov	r1, r4
 80037a2:	f7fd fa39 	bl	8000c18 <__aeabi_d2f>
 80037a6:	4602      	mov	r2, r0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd90      	pop	{r4, r7, pc}
 80037bc:	f3af 8000 	nop.w
 80037c0:	2000027c 	.word	0x2000027c
 80037c4:	47ae147b 	.word	0x47ae147b
 80037c8:	3f547ae1 	.word	0x3f547ae1

080037cc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	ee07 3a90 	vmov	s15, r3

}
 80037dc:	eeb0 0a67 	vmov.f32	s0, s15
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	0000      	movs	r0, r0
 80037ec:	0000      	movs	r0, r0
	...

080037f0 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc feb9 	bl	8000578 <__aeabi_f2d>
 8003806:	a311      	add	r3, pc, #68	; (adr r3, 800384c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fd f97e 	bl	8000b0c <__aeabi_dcmplt>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	e002      	b.n	800382a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003826:	2200      	movs	r2, #0
 8003828:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003838:	2201      	movs	r2, #1
 800383a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000280 	.word	0x20000280
 800384c:	9999999a 	.word	0x9999999a
 8003850:	401d9999 	.word	0x401d9999

08003854 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003860:	2102      	movs	r1, #2
 8003862:	4822      	ldr	r0, [pc, #136]	; (80038ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8003864:	f004 ffc8 	bl	80087f8 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003880:	2108      	movs	r1, #8
 8003882:	481a      	ldr	r0, [pc, #104]	; (80038ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8003884:	f004 ffb8 	bl	80087f8 <HAL_GPIO_ReadPin>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003898:	89fb      	ldrh	r3, [r7, #14]
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80038a0:	2110      	movs	r1, #16
 80038a2:	4812      	ldr	r0, [pc, #72]	; (80038ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80038a4:	f004 ffa8 	bl	80087f8 <HAL_GPIO_ReadPin>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	480a      	ldr	r0, [pc, #40]	; (80038ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80038c4:	f004 ff98 	bl	80087f8 <HAL_GPIO_ReadPin>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80038d8:	89fb      	ldrh	r3, [r7, #14]
 80038da:	f043 0308 	orr.w	r3, r3, #8
 80038de:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80038e0:	89fb      	ldrh	r3, [r7, #14]

}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40020c00 	.word	0x40020c00

080038f0 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0)
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	805a      	strh	r2, [r3, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	809a      	strh	r2, [r3, #4]
{

}
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	2b04      	cmp	r3, #4
 8003928:	d111      	bne.n	800394e <_ZN10SideSensor12updateStatusEt+0x36>
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <_ZN10SideSensor12updateStatusEt+0xe4>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f083 0301 	eor.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <_ZN10SideSensor12updateStatusEt+0xe4>)
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e01a      	b.n	8003984 <_ZN10SideSensor12updateStatusEt+0x6c>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d117      	bne.n	8003984 <_ZN10SideSensor12updateStatusEt+0x6c>
 8003954:	4b29      	ldr	r3, [pc, #164]	; (80039fc <_ZN10SideSensor12updateStatusEt+0xe4>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <_ZN10SideSensor12updateStatusEt+0x6c>
		status_ ^= 0x01;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	f083 0301 	eor.w	r3, r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <_ZN10SideSensor12updateStatusEt+0xe4>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]

		white_line_cnt_r_++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	889b      	ldrh	r3, [r3, #4]
 8003974:	3301      	adds	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	809a      	strh	r2, [r3, #4]
		mon_cnt_r = white_line_cnt_r_;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	889a      	ldrh	r2, [r3, #4]
 8003980:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <_ZN10SideSensor12updateStatusEt+0xe8>)
 8003982:	801a      	strh	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398a:	d111      	bne.n	80039b0 <_ZN10SideSensor12updateStatusEt+0x98>
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <_ZN10SideSensor12updateStatusEt+0xec>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f083 0301 	eor.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <_ZN10SideSensor12updateStatusEt+0x98>
		status_ |= 0x02;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <_ZN10SideSensor12updateStatusEt+0xec>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e01b      	b.n	80039e8 <_ZN10SideSensor12updateStatusEt+0xd0>
	}
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d117      	bne.n	80039e8 <_ZN10SideSensor12updateStatusEt+0xd0>
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <_ZN10SideSensor12updateStatusEt+0xec>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <_ZN10SideSensor12updateStatusEt+0xd0>
		status_ ^= 0x02;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	f083 0302 	eor.w	r3, r3, #2
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <_ZN10SideSensor12updateStatusEt+0xec>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]

		white_line_cnt_l_++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	885b      	ldrh	r3, [r3, #2]
 80039d8:	3301      	adds	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	805a      	strh	r2, [r3, #2]
		mon_cnt_l = white_line_cnt_l_;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	885a      	ldrh	r2, [r3, #2]
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <_ZN10SideSensor12updateStatusEt+0xf0>)
 80039e6:	801a      	strh	r2, [r3, #0]
	}

	mon_status = status_;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	881a      	ldrh	r2, [r3, #0]
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <_ZN10SideSensor12updateStatusEt+0xf4>)
 80039ee:	801a      	strh	r2, [r3, #0]

}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	20000288 	.word	0x20000288
 8003a00:	20000286 	.word	0x20000286
 8003a04:	20000289 	.word	0x20000289
 8003a08:	20000284 	.word	0x20000284
 8003a0c:	20000282 	.word	0x20000282

08003a10 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	889b      	ldrh	r3, [r3, #4]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	809a      	strh	r2, [r3, #4]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003a58:	3308      	adds	r3, #8
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00f f9d9 	bl	8012e18 <memcpy>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	08017dec 	.word	0x08017dec

08003a9c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d010      	beq.n	8003ad4 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	ed97 0a00 	vldr	s0, [r7]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f9fe 	bl	8002ebc <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7ff fa2b 	bl	8002f2a <_ZN6Logger9storeLog2Ef>
	}

}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fa99 	bl	8003024 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff faa6 	bl	800304c <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08017fe0 	.word	0x08017fe0
 8003b0c:	08017fec 	.word	0x08017fec
 8003b10:	08017ff8 	.word	0x08017ff8

08003b14 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d046      	beq.n	8003bb4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3204      	adds	r2, #4
 8003b38:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003b54:	3301      	adds	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003b66:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003b6e:	2bf9      	cmp	r3, #249	; 0xf9
 8003b70:	d903      	bls.n	8003b7a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	22fa      	movs	r2, #250	; 0xfa
 8003b76:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685c      	ldr	r4, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fcf7 	bl	8000578 <__aeabi_f2d>
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003b94:	eef1 7a67 	vneg.f32	s15, s15
 8003b98:	ee17 3a90 	vmov	r3, s15
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fceb 	bl	8000578 <__aeabi_f2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	ec43 2b11 	vmov	d1, r2, r3
 8003baa:	ec46 5b10 	vmov	d0, r5, r6
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff fb16 	bl	80031e0 <_ZN5Motor8setRatioEdd>

	}

}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bbc:	2000028c 	.word	0x2000028c

08003bc0 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fa66 	bl	80030be <_ZN6Logger5startEv>
	processing_flag_ = true;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	0000      	movs	r0, r0
 8003c04:	0000      	movs	r0, r0
	...

08003c08 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fa61 	bl	80030dc <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003c48 <_ZN20SystemIdentification4stopEv+0x40>
 8003c32:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003c48 <_ZN20SystemIdentification4stopEv+0x40>
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fad2 	bl	80031e0 <_ZN5Motor8setRatioEdd>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	f3af 8000 	nop.w
	...

08003c50 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	615a      	str	r2, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	619a      	str	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	621a      	str	r2, [r3, #32]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38

}
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	f107 020c 	add.w	r2, r7, #12
 8003cf8:	f107 0110 	add.w	r1, r7, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fd fb59 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003d02:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d16:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7fc fc2c 	bl	8000578 <__aeabi_f2d>
 8003d20:	a30b      	add	r3, pc, #44	; (adr r3, 8003d50 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f7fc fc7f 	bl	8000628 <__aeabi_dmul>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	4621      	mov	r1, r4
 8003d32:	f7fc ff71 	bl	8000c18 <__aeabi_d2f>
 8003d36:	4602      	mov	r2, r0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	ee07 3a90 	vmov	s15, r3
}
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	1ab1d998 	.word	0x1ab1d998
 8003d54:	3f7830b5 	.word	0x3f7830b5

08003d58 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	ed93 7a00 	vldr	s14, [r3]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d70:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8003d7e:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d94:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8003da0:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fbe7 	bl	8000578 <__aeabi_f2d>
 8003daa:	4604      	mov	r4, r0
 8003dac:	460d      	mov	r5, r1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	ed93 7a06 	vldr	s14, [r3, #24]
 8003db4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	ee17 0a90 	vmov	r0, s15
 8003dc0:	f7fc fbda 	bl	8000578 <__aeabi_f2d>
 8003dc4:	a334      	add	r3, pc, #208	; (adr r3, 8003e98 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fc2d 	bl	8000628 <__aeabi_dmul>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	f7fc fa71 	bl	80002bc <__adddf3>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	4618      	mov	r0, r3
 8003de0:	4621      	mov	r1, r4
 8003de2:	f7fc ff19 	bl	8000c18 <__aeabi_d2f>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003dea:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	ed93 7a05 	vldr	s14, [r3, #20]
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	edd7 6a05 	vldr	s13, [r7, #20]
 8003dfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e04:	ee17 0a90 	vmov	r0, s15
 8003e08:	f7fc fbb6 	bl	8000578 <__aeabi_f2d>
 8003e0c:	a322      	add	r3, pc, #136	; (adr r3, 8003e98 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc fd33 	bl	800087c <__aeabi_ddiv>
 8003e16:	4603      	mov	r3, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	f7fc fefb 	bl	8000c18 <__aeabi_d2f>
 8003e22:	4603      	mov	r3, r0
 8003e24:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8003e26:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb8f 	bl	8000578 <__aeabi_f2d>
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	460e      	mov	r6, r1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003e64:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e6c:	ee17 0a90 	vmov	r0, s15
 8003e70:	f7fc fb82 	bl	8000578 <__aeabi_f2d>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	ec43 2b11 	vmov	d1, r2, r3
 8003e7c:	ec46 5b10 	vmov	d0, r5, r6
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff f9ad 	bl	80031e0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e94:	f3af 8000 	nop.w
 8003e98:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e9c:	3f50624d 	.word	0x3f50624d
 8003ea0:	20000294 	.word	0x20000294
 8003ea4:	20000290 	.word	0x20000290

08003ea8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003eb4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003edc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f04:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f08:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f36:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f3a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff febf 	bl	8003ce8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff feef 	bl	8003d58 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003fd8 <_ZN12VelocityCtrl4stopEv+0x30>
 8003fc0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003fd8 <_ZN12VelocityCtrl4stopEv+0x30>
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff f90b 	bl	80031e0 <_ZN5Motor8setRatioEdd>

}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	f3af 8000 	nop.w
	...

08003fe0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003fe8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ffc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004000:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004008:	e000      	b.n	800400c <ITM_SendChar+0x2c>
    {
      __NOP();
 800400a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800400c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f9      	beq.n	800400a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004016:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004020:	687b      	ldr	r3, [r7, #4]
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e009      	b.n	8004054 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	60ba      	str	r2, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ffc9 	bl	8003fe0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3301      	adds	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	dbf1      	blt.n	8004040 <_write+0x12>
  }
  return len;
 800405c:	687b      	ldr	r3, [r7, #4]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	4618      	mov	r0, r3
 8004074:	f001 ff14 	bl	8005ea0 <cppExit>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8004092:	f001 fe95 	bl	8005dc0 <cppFlip1ms>

		tim6_timer++;
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	4a1b      	ldr	r2, [pc, #108]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800409e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d902      	bls.n	80040b0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10e      	bne.n	80040d8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 80040ba:	f001 fec9 	bl	8005e50 <cppFlip100ns>

		tim7_timer++;
 80040be:	4b16      	ldr	r3, [pc, #88]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80040c6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a10      	ldr	r2, [pc, #64]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d902      	bls.n	80040d8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80040d2:	4b11      	ldr	r3, [pc, #68]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80040e2:	f001 febf 	bl	8005e64 <cppFlip10ms>

		tim13_timer++;
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3301      	adds	r3, #1
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80040ee:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a06      	ldr	r2, [pc, #24]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d902      	bls.n	8004100 <HAL_TIM_PeriodElapsedCallback+0x80>
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
	}

}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40001000 	.word	0x40001000
 800410c:	200399fc 	.word	0x200399fc
 8004110:	0001869f 	.word	0x0001869f
 8004114:	40001400 	.word	0x40001400
 8004118:	20039a40 	.word	0x20039a40
 800411c:	40001c00 	.word	0x40001c00
 8004120:	20039a44 	.word	0x20039a44

08004124 <init>:

void init()
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004128:	2201      	movs	r2, #1
 800412a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800412e:	4808      	ldr	r0, [pc, #32]	; (8004150 <init+0x2c>)
 8004130:	f004 fb7a 	bl	8008828 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8004134:	4807      	ldr	r0, [pc, #28]	; (8004154 <init+0x30>)
 8004136:	f008 fa5a 	bl	800c5ee <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800413a:	4807      	ldr	r0, [pc, #28]	; (8004158 <init+0x34>)
 800413c:	f008 fa57 	bl	800c5ee <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004140:	4806      	ldr	r0, [pc, #24]	; (800415c <init+0x38>)
 8004142:	f008 fa54 	bl	800c5ee <HAL_TIM_Base_Start_IT>

	cppInit();
 8004146:	f001 fd91 	bl	8005c6c <cppInit>

	//path_following_initialize();

}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	20039b28 	.word	0x20039b28
 8004158:	20039ccc 	.word	0x20039ccc
 800415c:	20039a48 	.word	0x20039a48

08004160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004164:	f003 f858 	bl	8007218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004168:	f000 f82a 	bl	80041c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800416c:	f000 fdbc 	bl	8004ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004170:	f000 fd8a 	bl	8004c88 <MX_DMA_Init>
  MX_I2C2_Init();
 8004174:	f000 f9e8 	bl	8004548 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004178:	f000 fa14 	bl	80045a4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800417c:	f000 fa32 	bl	80045e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004180:	f000 fa66 	bl	8004650 <MX_TIM1_Init>
  MX_TIM4_Init();
 8004184:	f000 fb70 	bl	8004868 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004188:	f000 fc3c 	bl	8004a04 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800418c:	f000 fd52 	bl	8004c34 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004190:	f00a fa00 	bl	800e594 <MX_FATFS_Init>
  MX_TIM6_Init();
 8004194:	f000 fbcc 	bl	8004930 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004198:	f000 f9a8 	bl	80044ec <MX_I2C1_Init>
  MX_TIM3_Init();
 800419c:	f000 fb00 	bl	80047a0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80041a0:	f000 fc88 	bl	8004ab4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80041a4:	f000 fcd4 	bl	8004b50 <MX_TIM11_Init>
  MX_ADC2_Init();
 80041a8:	f000 f898 	bl	80042dc <MX_ADC2_Init>
  MX_TIM7_Init();
 80041ac:	f000 fbf6 	bl	800499c <MX_TIM7_Init>
  MX_TIM13_Init();
 80041b0:	f000 fd1c 	bl	8004bec <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80041b4:	f7ff ffb6 	bl	8004124 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80041b8:	f001 fe82 	bl	8005ec0 <cppLoop>
 80041bc:	e7fc      	b.n	80041b8 <main+0x58>
	...

080041c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b0a4      	sub	sp, #144	; 0x90
 80041c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041ca:	2234      	movs	r2, #52	; 0x34
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f00e fe2d 	bl	8012e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041e4:	f107 030c 	add.w	r3, r7, #12
 80041e8:	223c      	movs	r2, #60	; 0x3c
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00e fe1e 	bl	8012e2e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <SystemClock_Config+0x114>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a36      	ldr	r2, [pc, #216]	; (80042d4 <SystemClock_Config+0x114>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <SystemClock_Config+0x114>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <SystemClock_Config+0x118>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <SystemClock_Config+0x118>)
 8004218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <SystemClock_Config+0x118>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800422a:	2301      	movs	r3, #1
 800422c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800422e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004232:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004234:	2302      	movs	r3, #2
 8004236:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800423c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800423e:	2308      	movs	r3, #8
 8004240:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004242:	23b4      	movs	r3, #180	; 0xb4
 8004244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004248:	2302      	movs	r3, #2
 800424a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800424e:	2308      	movs	r3, #8
 8004250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004254:	2302      	movs	r3, #2
 8004256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800425a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800425e:	4618      	mov	r0, r3
 8004260:	f005 ff1c 	bl	800a09c <HAL_RCC_OscConfig>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800426a:	f000 fe91 	bl	8004f90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800426e:	f005 fa97 	bl	80097a0 <HAL_PWREx_EnableOverDrive>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004278:	f000 fe8a 	bl	8004f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800427c:	230f      	movs	r3, #15
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004280:	2302      	movs	r3, #2
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004284:	2300      	movs	r3, #0
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004288:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800428c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800428e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004292:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004294:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004298:	2105      	movs	r1, #5
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fad0 	bl	8009840 <HAL_RCC_ClockConfig>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80042a6:	f000 fe73 	bl	8004f90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80042aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80042ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80042b0:	2300      	movs	r3, #0
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80042b4:	2300      	movs	r3, #0
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	4618      	mov	r0, r3
 80042be:	f005 fcaf 	bl	8009c20 <HAL_RCCEx_PeriphCLKConfig>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80042c8:	f000 fe62 	bl	8004f90 <Error_Handler>
  }
}
 80042cc:	bf00      	nop
 80042ce:	3790      	adds	r7, #144	; 0x90
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000

080042dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042e2:	463b      	mov	r3, r7
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80042ee:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <MX_ADC2_Init+0x204>)
 80042f0:	4a7c      	ldr	r2, [pc, #496]	; (80044e4 <MX_ADC2_Init+0x208>)
 80042f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80042f4:	4b7a      	ldr	r3, [pc, #488]	; (80044e0 <MX_ADC2_Init+0x204>)
 80042f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80042fc:	4b78      	ldr	r3, [pc, #480]	; (80044e0 <MX_ADC2_Init+0x204>)
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004302:	4b77      	ldr	r3, [pc, #476]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004304:	2201      	movs	r2, #1
 8004306:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004308:	4b75      	ldr	r3, [pc, #468]	; (80044e0 <MX_ADC2_Init+0x204>)
 800430a:	2201      	movs	r2, #1
 800430c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800430e:	4b74      	ldr	r3, [pc, #464]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004316:	4b72      	ldr	r3, [pc, #456]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004318:	2200      	movs	r2, #0
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800431c:	4b70      	ldr	r3, [pc, #448]	; (80044e0 <MX_ADC2_Init+0x204>)
 800431e:	4a72      	ldr	r2, [pc, #456]	; (80044e8 <MX_ADC2_Init+0x20c>)
 8004320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004322:	4b6f      	ldr	r3, [pc, #444]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004324:	2200      	movs	r2, #0
 8004326:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004328:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <MX_ADC2_Init+0x204>)
 800432a:	220e      	movs	r2, #14
 800432c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800432e:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004336:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004338:	2201      	movs	r2, #1
 800433a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800433c:	4868      	ldr	r0, [pc, #416]	; (80044e0 <MX_ADC2_Init+0x204>)
 800433e:	f002 ffff 	bl	8007340 <HAL_ADC_Init>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004348:	f000 fe22 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800434c:	230a      	movs	r3, #10
 800434e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004350:	2301      	movs	r3, #1
 8004352:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004354:	2306      	movs	r3, #6
 8004356:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004358:	463b      	mov	r3, r7
 800435a:	4619      	mov	r1, r3
 800435c:	4860      	ldr	r0, [pc, #384]	; (80044e0 <MX_ADC2_Init+0x204>)
 800435e:	f003 f943 	bl	80075e8 <HAL_ADC_ConfigChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004368:	f000 fe12 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800436c:	230b      	movs	r3, #11
 800436e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004370:	2302      	movs	r3, #2
 8004372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004374:	463b      	mov	r3, r7
 8004376:	4619      	mov	r1, r3
 8004378:	4859      	ldr	r0, [pc, #356]	; (80044e0 <MX_ADC2_Init+0x204>)
 800437a:	f003 f935 	bl	80075e8 <HAL_ADC_ConfigChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004384:	f000 fe04 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004388:	230c      	movs	r3, #12
 800438a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800438c:	2303      	movs	r3, #3
 800438e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004390:	463b      	mov	r3, r7
 8004392:	4619      	mov	r1, r3
 8004394:	4852      	ldr	r0, [pc, #328]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004396:	f003 f927 	bl	80075e8 <HAL_ADC_ConfigChannel>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80043a0:	f000 fdf6 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80043a4:	230d      	movs	r3, #13
 80043a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80043a8:	2304      	movs	r3, #4
 80043aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043ac:	463b      	mov	r3, r7
 80043ae:	4619      	mov	r1, r3
 80043b0:	484b      	ldr	r0, [pc, #300]	; (80044e0 <MX_ADC2_Init+0x204>)
 80043b2:	f003 f919 	bl	80075e8 <HAL_ADC_ConfigChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80043bc:	f000 fde8 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80043c4:	2305      	movs	r3, #5
 80043c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043c8:	463b      	mov	r3, r7
 80043ca:	4619      	mov	r1, r3
 80043cc:	4844      	ldr	r0, [pc, #272]	; (80044e0 <MX_ADC2_Init+0x204>)
 80043ce:	f003 f90b 	bl	80075e8 <HAL_ADC_ConfigChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80043d8:	f000 fdda 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80043dc:	2301      	movs	r3, #1
 80043de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80043e0:	2306      	movs	r3, #6
 80043e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043e4:	463b      	mov	r3, r7
 80043e6:	4619      	mov	r1, r3
 80043e8:	483d      	ldr	r0, [pc, #244]	; (80044e0 <MX_ADC2_Init+0x204>)
 80043ea:	f003 f8fd 	bl	80075e8 <HAL_ADC_ConfigChannel>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80043f4:	f000 fdcc 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80043f8:	2302      	movs	r3, #2
 80043fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80043fc:	2307      	movs	r3, #7
 80043fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004400:	463b      	mov	r3, r7
 8004402:	4619      	mov	r1, r3
 8004404:	4836      	ldr	r0, [pc, #216]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004406:	f003 f8ef 	bl	80075e8 <HAL_ADC_ConfigChannel>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004410:	f000 fdbe 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004414:	2303      	movs	r3, #3
 8004416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004418:	2308      	movs	r3, #8
 800441a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800441c:	463b      	mov	r3, r7
 800441e:	4619      	mov	r1, r3
 8004420:	482f      	ldr	r0, [pc, #188]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004422:	f003 f8e1 	bl	80075e8 <HAL_ADC_ConfigChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800442c:	f000 fdb0 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004430:	2304      	movs	r3, #4
 8004432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004434:	2309      	movs	r3, #9
 8004436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004438:	463b      	mov	r3, r7
 800443a:	4619      	mov	r1, r3
 800443c:	4828      	ldr	r0, [pc, #160]	; (80044e0 <MX_ADC2_Init+0x204>)
 800443e:	f003 f8d3 	bl	80075e8 <HAL_ADC_ConfigChannel>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004448:	f000 fda2 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800444c:	2305      	movs	r3, #5
 800444e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004450:	230a      	movs	r3, #10
 8004452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004454:	463b      	mov	r3, r7
 8004456:	4619      	mov	r1, r3
 8004458:	4821      	ldr	r0, [pc, #132]	; (80044e0 <MX_ADC2_Init+0x204>)
 800445a:	f003 f8c5 	bl	80075e8 <HAL_ADC_ConfigChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004464:	f000 fd94 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004468:	2306      	movs	r3, #6
 800446a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800446c:	230b      	movs	r3, #11
 800446e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004470:	463b      	mov	r3, r7
 8004472:	4619      	mov	r1, r3
 8004474:	481a      	ldr	r0, [pc, #104]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004476:	f003 f8b7 	bl	80075e8 <HAL_ADC_ConfigChannel>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004480:	f000 fd86 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004484:	2307      	movs	r3, #7
 8004486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004488:	230c      	movs	r3, #12
 800448a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800448c:	463b      	mov	r3, r7
 800448e:	4619      	mov	r1, r3
 8004490:	4813      	ldr	r0, [pc, #76]	; (80044e0 <MX_ADC2_Init+0x204>)
 8004492:	f003 f8a9 	bl	80075e8 <HAL_ADC_ConfigChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800449c:	f000 fd78 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80044a0:	2308      	movs	r3, #8
 80044a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80044a4:	230d      	movs	r3, #13
 80044a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044a8:	463b      	mov	r3, r7
 80044aa:	4619      	mov	r1, r3
 80044ac:	480c      	ldr	r0, [pc, #48]	; (80044e0 <MX_ADC2_Init+0x204>)
 80044ae:	f003 f89b 	bl	80075e8 <HAL_ADC_ConfigChannel>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80044b8:	f000 fd6a 	bl	8004f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80044bc:	2309      	movs	r3, #9
 80044be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80044c0:	230e      	movs	r3, #14
 80044c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044c4:	463b      	mov	r3, r7
 80044c6:	4619      	mov	r1, r3
 80044c8:	4805      	ldr	r0, [pc, #20]	; (80044e0 <MX_ADC2_Init+0x204>)
 80044ca:	f003 f88d 	bl	80075e8 <HAL_ADC_ConfigChannel>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80044d4:	f000 fd5c 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200398cc 	.word	0x200398cc
 80044e4:	40012100 	.word	0x40012100
 80044e8:	0f000001 	.word	0x0f000001

080044ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <MX_I2C1_Init+0x50>)
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <MX_I2C1_Init+0x54>)
 80044f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <MX_I2C1_Init+0x50>)
 80044f8:	4a12      	ldr	r2, [pc, #72]	; (8004544 <MX_I2C1_Init+0x58>)
 80044fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <MX_I2C1_Init+0x50>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <MX_I2C1_Init+0x50>)
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <MX_I2C1_Init+0x50>)
 800450a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800450e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <MX_I2C1_Init+0x50>)
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <MX_I2C1_Init+0x50>)
 8004518:	2200      	movs	r2, #0
 800451a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <MX_I2C1_Init+0x50>)
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <MX_I2C1_Init+0x50>)
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004528:	4804      	ldr	r0, [pc, #16]	; (800453c <MX_I2C1_Init+0x50>)
 800452a:	f004 f9af 	bl	800888c <HAL_I2C_Init>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004534:	f000 fd2c 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20039914 	.word	0x20039914
 8004540:	40005400 	.word	0x40005400
 8004544:	000186a0 	.word	0x000186a0

08004548 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <MX_I2C2_Init+0x50>)
 800454e:	4a13      	ldr	r2, [pc, #76]	; (800459c <MX_I2C2_Init+0x54>)
 8004550:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <MX_I2C2_Init+0x50>)
 8004554:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <MX_I2C2_Init+0x58>)
 8004556:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <MX_I2C2_Init+0x50>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <MX_I2C2_Init+0x50>)
 8004560:	2200      	movs	r2, #0
 8004562:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MX_I2C2_Init+0x50>)
 8004566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800456a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <MX_I2C2_Init+0x50>)
 800456e:	2200      	movs	r2, #0
 8004570:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_I2C2_Init+0x50>)
 8004574:	2200      	movs	r2, #0
 8004576:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <MX_I2C2_Init+0x50>)
 800457a:	2200      	movs	r2, #0
 800457c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <MX_I2C2_Init+0x50>)
 8004580:	2280      	movs	r2, #128	; 0x80
 8004582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004584:	4804      	ldr	r0, [pc, #16]	; (8004598 <MX_I2C2_Init+0x50>)
 8004586:	f004 f981 	bl	800888c <HAL_I2C_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004590:	f000 fcfe 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004594:	bf00      	nop
 8004596:	bd80      	pop	{r7, pc}
 8004598:	200399a8 	.word	0x200399a8
 800459c:	40005800 	.word	0x40005800
 80045a0:	000186a0 	.word	0x000186a0

080045a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045aa:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <MX_SDIO_SD_Init+0x3c>)
 80045ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045bc:	2200      	movs	r2, #0
 80045be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <MX_SDIO_SD_Init+0x38>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	20039ba8 	.word	0x20039ba8
 80045e0:	40012c00 	.word	0x40012c00

080045e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <MX_SPI2_Init+0x64>)
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <MX_SPI2_Init+0x68>)
 80045ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <MX_SPI2_Init+0x64>)
 80045f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <MX_SPI2_Init+0x64>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <MX_SPI2_Init+0x64>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <MX_SPI2_Init+0x64>)
 8004604:	2202      	movs	r2, #2
 8004606:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <MX_SPI2_Init+0x64>)
 800460a:	2201      	movs	r2, #1
 800460c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <MX_SPI2_Init+0x64>)
 8004610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004614:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <MX_SPI2_Init+0x64>)
 8004618:	2228      	movs	r2, #40	; 0x28
 800461a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <MX_SPI2_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <MX_SPI2_Init+0x64>)
 8004624:	2200      	movs	r2, #0
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <MX_SPI2_Init+0x64>)
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <MX_SPI2_Init+0x64>)
 8004630:	220a      	movs	r2, #10
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004634:	4804      	ldr	r0, [pc, #16]	; (8004648 <MX_SPI2_Init+0x64>)
 8004636:	f007 fa5b 	bl	800baf0 <HAL_SPI_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004640:	f000 fca6 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004644:	bf00      	nop
 8004646:	bd80      	pop	{r7, pc}
 8004648:	200397f4 	.word	0x200397f4
 800464c:	40003800 	.word	0x40003800

08004650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b09a      	sub	sp, #104	; 0x68
 8004654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004656:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f00e fbe5 	bl	8012e2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004664:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800466e:	f107 0320 	add.w	r3, r7, #32
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	611a      	str	r2, [r3, #16]
 800467e:	615a      	str	r2, [r3, #20]
 8004680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004682:	463b      	mov	r3, r7
 8004684:	2220      	movs	r2, #32
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f00e fbd0 	bl	8012e2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800468e:	4b42      	ldr	r3, [pc, #264]	; (8004798 <MX_TIM1_Init+0x148>)
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <MX_TIM1_Init+0x14c>)
 8004692:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <MX_TIM1_Init+0x148>)
 8004696:	2200      	movs	r2, #0
 8004698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <MX_TIM1_Init+0x148>)
 800469c:	2200      	movs	r2, #0
 800469e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80046a0:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <MX_TIM1_Init+0x148>)
 80046a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <MX_TIM1_Init+0x148>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80046ae:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <MX_TIM1_Init+0x148>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046b4:	4b38      	ldr	r3, [pc, #224]	; (8004798 <MX_TIM1_Init+0x148>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80046ba:	4837      	ldr	r0, [pc, #220]	; (8004798 <MX_TIM1_Init+0x148>)
 80046bc:	f007 ffbb 	bl	800c636 <HAL_TIM_PWM_Init>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80046c6:	f000 fc63 	bl	8004f90 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80046ca:	2303      	movs	r3, #3
 80046cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80046ce:	2300      	movs	r3, #0
 80046d0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046d2:	2301      	movs	r3, #1
 80046d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046d6:	2300      	movs	r3, #0
 80046d8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80046de:	2300      	movs	r3, #0
 80046e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80046e2:	2301      	movs	r3, #1
 80046e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80046e6:	2300      	movs	r3, #0
 80046e8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80046ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046f2:	4619      	mov	r1, r3
 80046f4:	4828      	ldr	r0, [pc, #160]	; (8004798 <MX_TIM1_Init+0x148>)
 80046f6:	f008 f807 	bl	800c708 <HAL_TIM_Encoder_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004700:	f000 fc46 	bl	8004f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004704:	2300      	movs	r3, #0
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800470c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004710:	4619      	mov	r1, r3
 8004712:	4821      	ldr	r0, [pc, #132]	; (8004798 <MX_TIM1_Init+0x148>)
 8004714:	f008 fd2e 	bl	800d174 <HAL_TIMEx_MasterConfigSynchronization>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800471e:	f000 fc37 	bl	8004f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004722:	2360      	movs	r3, #96	; 0x60
 8004724:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800472a:	2300      	movs	r3, #0
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800472e:	2300      	movs	r3, #0
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800473e:	f107 0320 	add.w	r3, r7, #32
 8004742:	2208      	movs	r2, #8
 8004744:	4619      	mov	r1, r3
 8004746:	4814      	ldr	r0, [pc, #80]	; (8004798 <MX_TIM1_Init+0x148>)
 8004748:	f008 f9b0 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004752:	f000 fc1d 	bl	8004f90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004756:	2300      	movs	r3, #0
 8004758:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800476a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800476e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004774:	463b      	mov	r3, r7
 8004776:	4619      	mov	r1, r3
 8004778:	4807      	ldr	r0, [pc, #28]	; (8004798 <MX_TIM1_Init+0x148>)
 800477a:	f008 fd77 	bl	800d26c <HAL_TIMEx_ConfigBreakDeadTime>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004784:	f000 fc04 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004788:	4803      	ldr	r0, [pc, #12]	; (8004798 <MX_TIM1_Init+0x148>)
 800478a:	f000 fff1 	bl	8005770 <HAL_TIM_MspPostInit>

}
 800478e:	bf00      	nop
 8004790:	3768      	adds	r7, #104	; 0x68
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20039b68 	.word	0x20039b68
 800479c:	40010000 	.word	0x40010000

080047a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a6:	f107 0320 	add.w	r3, r7, #32
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047b0:	1d3b      	adds	r3, r7, #4
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	611a      	str	r2, [r3, #16]
 80047be:	615a      	str	r2, [r3, #20]
 80047c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047c4:	4a27      	ldr	r2, [pc, #156]	; (8004864 <MX_TIM3_Init+0xc4>)
 80047c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047de:	2200      	movs	r2, #0
 80047e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e2:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047e8:	481d      	ldr	r0, [pc, #116]	; (8004860 <MX_TIM3_Init+0xc0>)
 80047ea:	f007 ff24 	bl	800c636 <HAL_TIM_PWM_Init>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80047f4:	f000 fbcc 	bl	8004f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047f8:	2300      	movs	r3, #0
 80047fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004800:	f107 0320 	add.w	r3, r7, #32
 8004804:	4619      	mov	r1, r3
 8004806:	4816      	ldr	r0, [pc, #88]	; (8004860 <MX_TIM3_Init+0xc0>)
 8004808:	f008 fcb4 	bl	800d174 <HAL_TIMEx_MasterConfigSynchronization>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004812:	f000 fbbd 	bl	8004f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004816:	2360      	movs	r3, #96	; 0x60
 8004818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	2200      	movs	r2, #0
 800482a:	4619      	mov	r1, r3
 800482c:	480c      	ldr	r0, [pc, #48]	; (8004860 <MX_TIM3_Init+0xc0>)
 800482e:	f008 f93d 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004838:	f000 fbaa 	bl	8004f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	2204      	movs	r2, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4807      	ldr	r0, [pc, #28]	; (8004860 <MX_TIM3_Init+0xc0>)
 8004844:	f008 f932 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800484e:	f000 fb9f 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004852:	4803      	ldr	r0, [pc, #12]	; (8004860 <MX_TIM3_Init+0xc0>)
 8004854:	f000 ff8c 	bl	8005770 <HAL_TIM_MspPostInit>

}
 8004858:	bf00      	nop
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20039a00 	.word	0x20039a00
 8004864:	40000400 	.word	0x40000400

08004868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486e:	f107 0320 	add.w	r3, r7, #32
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	611a      	str	r2, [r3, #16]
 8004886:	615a      	str	r2, [r3, #20]
 8004888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800488a:	4b27      	ldr	r3, [pc, #156]	; (8004928 <MX_TIM4_Init+0xc0>)
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <MX_TIM4_Init+0xc4>)
 800488e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <MX_TIM4_Init+0xc0>)
 8004892:	2200      	movs	r2, #0
 8004894:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <MX_TIM4_Init+0xc0>)
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800489c:	4b22      	ldr	r3, [pc, #136]	; (8004928 <MX_TIM4_Init+0xc0>)
 800489e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80048a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a4:	4b20      	ldr	r3, [pc, #128]	; (8004928 <MX_TIM4_Init+0xc0>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048aa:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <MX_TIM4_Init+0xc0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80048b0:	481d      	ldr	r0, [pc, #116]	; (8004928 <MX_TIM4_Init+0xc0>)
 80048b2:	f007 fec0 	bl	800c636 <HAL_TIM_PWM_Init>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80048bc:	f000 fb68 	bl	8004f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048c8:	f107 0320 	add.w	r3, r7, #32
 80048cc:	4619      	mov	r1, r3
 80048ce:	4816      	ldr	r0, [pc, #88]	; (8004928 <MX_TIM4_Init+0xc0>)
 80048d0:	f008 fc50 	bl	800d174 <HAL_TIMEx_MasterConfigSynchronization>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80048da:	f000 fb59 	bl	8004f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048de:	2360      	movs	r3, #96	; 0x60
 80048e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	2208      	movs	r2, #8
 80048f2:	4619      	mov	r1, r3
 80048f4:	480c      	ldr	r0, [pc, #48]	; (8004928 <MX_TIM4_Init+0xc0>)
 80048f6:	f008 f8d9 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004900:	f000 fb46 	bl	8004f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004904:	1d3b      	adds	r3, r7, #4
 8004906:	220c      	movs	r2, #12
 8004908:	4619      	mov	r1, r3
 800490a:	4807      	ldr	r0, [pc, #28]	; (8004928 <MX_TIM4_Init+0xc0>)
 800490c:	f008 f8ce 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004916:	f000 fb3b 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <MX_TIM4_Init+0xc0>)
 800491c:	f000 ff28 	bl	8005770 <HAL_TIM_MspPostInit>

}
 8004920:	bf00      	nop
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	2003988c 	.word	0x2003988c
 800492c:	40000800 	.word	0x40000800

08004930 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004936:	463b      	mov	r3, r7
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <MX_TIM6_Init+0x64>)
 8004940:	4a15      	ldr	r2, [pc, #84]	; (8004998 <MX_TIM6_Init+0x68>)
 8004942:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <MX_TIM6_Init+0x64>)
 8004946:	2259      	movs	r2, #89	; 0x59
 8004948:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <MX_TIM6_Init+0x64>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <MX_TIM6_Init+0x64>)
 8004952:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004956:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <MX_TIM6_Init+0x64>)
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800495e:	480d      	ldr	r0, [pc, #52]	; (8004994 <MX_TIM6_Init+0x64>)
 8004960:	f007 fe1a 	bl	800c598 <HAL_TIM_Base_Init>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800496a:	f000 fb11 	bl	8004f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004976:	463b      	mov	r3, r7
 8004978:	4619      	mov	r1, r3
 800497a:	4806      	ldr	r0, [pc, #24]	; (8004994 <MX_TIM6_Init+0x64>)
 800497c:	f008 fbfa 	bl	800d174 <HAL_TIMEx_MasterConfigSynchronization>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004986:	f000 fb03 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20039b28 	.word	0x20039b28
 8004998:	40001000 	.word	0x40001000

0800499c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a2:	463b      	mov	r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <MX_TIM7_Init+0x60>)
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <MX_TIM7_Init+0x64>)
 80049ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <MX_TIM7_Init+0x60>)
 80049b2:	22b3      	movs	r2, #179	; 0xb3
 80049b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <MX_TIM7_Init+0x60>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <MX_TIM7_Init+0x60>)
 80049be:	2231      	movs	r2, #49	; 0x31
 80049c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <MX_TIM7_Init+0x60>)
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80049c8:	480c      	ldr	r0, [pc, #48]	; (80049fc <MX_TIM7_Init+0x60>)
 80049ca:	f007 fde5 	bl	800c598 <HAL_TIM_Base_Init>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80049d4:	f000 fadc 	bl	8004f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049d8:	2300      	movs	r3, #0
 80049da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049dc:	2300      	movs	r3, #0
 80049de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80049e0:	463b      	mov	r3, r7
 80049e2:	4619      	mov	r1, r3
 80049e4:	4805      	ldr	r0, [pc, #20]	; (80049fc <MX_TIM7_Init+0x60>)
 80049e6:	f008 fbc5 	bl	800d174 <HAL_TIMEx_MasterConfigSynchronization>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80049f0:	f000 face 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20039ccc 	.word	0x20039ccc
 8004a00:	40001400 	.word	0x40001400

08004a04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08c      	sub	sp, #48	; 0x30
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	2224      	movs	r2, #36	; 0x24
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f00e fa0b 	bl	8012e2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a18:	1d3b      	adds	r3, r7, #4
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004a20:	4b22      	ldr	r3, [pc, #136]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a22:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <MX_TIM8_Init+0xac>)
 8004a24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a2e:	2210      	movs	r2, #16
 8004a30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004a40:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a46:	4b19      	ldr	r3, [pc, #100]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a64:	2301      	movs	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	4619      	mov	r1, r3
 8004a76:	480d      	ldr	r0, [pc, #52]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a78:	f007 fe46 	bl	800c708 <HAL_TIM_Encoder_Init>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004a82:	f000 fa85 	bl	8004f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4806      	ldr	r0, [pc, #24]	; (8004aac <MX_TIM8_Init+0xa8>)
 8004a94:	f008 fb6e 	bl	800d174 <HAL_TIMEx_MasterConfigSynchronization>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004a9e:	f000 fa77 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004aa2:	bf00      	nop
 8004aa4:	3730      	adds	r7, #48	; 0x30
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2003984c 	.word	0x2003984c
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
 8004ac8:	615a      	str	r2, [r3, #20]
 8004aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <MX_TIM10_Init+0x98>)
 8004ad0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae6:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aec:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004af2:	4815      	ldr	r0, [pc, #84]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004af4:	f007 fd50 	bl	800c598 <HAL_TIM_Base_Init>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004afe:	f000 fa47 	bl	8004f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004b02:	4811      	ldr	r0, [pc, #68]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004b04:	f007 fd97 	bl	800c636 <HAL_TIM_PWM_Init>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004b0e:	f000 fa3f 	bl	8004f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b12:	2360      	movs	r3, #96	; 0x60
 8004b14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	2200      	movs	r2, #0
 8004b26:	4619      	mov	r1, r3
 8004b28:	4807      	ldr	r0, [pc, #28]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004b2a:	f007 ffbf 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004b34:	f000 fa2c 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004b38:	4803      	ldr	r0, [pc, #12]	; (8004b48 <MX_TIM10_Init+0x94>)
 8004b3a:	f000 fe19 	bl	8005770 <HAL_TIM_MspPostInit>

}
 8004b3e:	bf00      	nop
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20039968 	.word	0x20039968
 8004b4c:	40014400 	.word	0x40014400

08004b50 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
 8004b64:	615a      	str	r2, [r3, #20]
 8004b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <MX_TIM11_Init+0x98>)
 8004b6c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b80:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004b8e:	4815      	ldr	r0, [pc, #84]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004b90:	f007 fd02 	bl	800c598 <HAL_TIM_Base_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004b9a:	f000 f9f9 	bl	8004f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004b9e:	4811      	ldr	r0, [pc, #68]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004ba0:	f007 fd49 	bl	800c636 <HAL_TIM_PWM_Init>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004baa:	f000 f9f1 	bl	8004f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bae:	2360      	movs	r3, #96	; 0x60
 8004bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4807      	ldr	r0, [pc, #28]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004bc6:	f007 ff71 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004bd0:	f000 f9de 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004bd4:	4803      	ldr	r0, [pc, #12]	; (8004be4 <MX_TIM11_Init+0x94>)
 8004bd6:	f000 fdcb 	bl	8005770 <HAL_TIM_MspPostInit>

}
 8004bda:	bf00      	nop
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20039a88 	.word	0x20039a88
 8004be8:	40014800 	.word	0x40014800

08004bec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	; (8004c30 <MX_TIM13_Init+0x44>)
 8004bf4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004bf8:	2259      	movs	r2, #89	; 0x59
 8004bfa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004c04:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c08:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004c16:	4805      	ldr	r0, [pc, #20]	; (8004c2c <MX_TIM13_Init+0x40>)
 8004c18:	f007 fcbe 	bl	800c598 <HAL_TIM_Base_Init>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004c22:	f000 f9b5 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20039a48 	.word	0x20039a48
 8004c30:	40001c00 	.word	0x40001c00

08004c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <MX_USART2_UART_Init+0x50>)
 8004c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c5a:	220c      	movs	r2, #12
 8004c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c6a:	4805      	ldr	r0, [pc, #20]	; (8004c80 <MX_USART2_UART_Init+0x4c>)
 8004c6c:	f008 fb64 	bl	800d338 <HAL_UART_Init>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004c76:	f000 f98b 	bl	8004f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20039c2c 	.word	0x20039c2c
 8004c84:	40004400 	.word	0x40004400

08004c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <MX_DMA_Init+0x5c>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <MX_DMA_Init+0x5c>)
 8004c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <MX_DMA_Init+0x5c>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	203a      	movs	r0, #58	; 0x3a
 8004cb0:	f003 f825 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004cb4:	203a      	movs	r0, #58	; 0x3a
 8004cb6:	f003 f83e 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	203b      	movs	r0, #59	; 0x3b
 8004cc0:	f003 f81d 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004cc4:	203b      	movs	r0, #59	; 0x3b
 8004cc6:	f003 f836 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2100      	movs	r1, #0
 8004cce:	2045      	movs	r0, #69	; 0x45
 8004cd0:	f003 f815 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004cd4:	2045      	movs	r0, #69	; 0x45
 8004cd6:	f003 f82e 	bl	8007d36 <HAL_NVIC_EnableIRQ>

}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800

08004ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	4b9c      	ldr	r3, [pc, #624]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	4a9b      	ldr	r2, [pc, #620]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d08:	f043 0310 	orr.w	r3, r3, #16
 8004d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0e:	4b99      	ldr	r3, [pc, #612]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	4b95      	ldr	r3, [pc, #596]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	4a94      	ldr	r2, [pc, #592]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2a:	4b92      	ldr	r3, [pc, #584]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	4b8e      	ldr	r3, [pc, #568]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4a8d      	ldr	r2, [pc, #564]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	6313      	str	r3, [r2, #48]	; 0x30
 8004d46:	4b8b      	ldr	r3, [pc, #556]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	4b87      	ldr	r3, [pc, #540]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4a86      	ldr	r2, [pc, #536]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6313      	str	r3, [r2, #48]	; 0x30
 8004d62:	4b84      	ldr	r3, [pc, #528]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7e:	4b7d      	ldr	r3, [pc, #500]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	4b79      	ldr	r3, [pc, #484]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	4a78      	ldr	r2, [pc, #480]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d94:	f043 0308 	orr.w	r3, r3, #8
 8004d98:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9a:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <MX_GPIO_Init+0x28c>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004dac:	4872      	ldr	r0, [pc, #456]	; (8004f78 <MX_GPIO_Init+0x290>)
 8004dae:	f003 fd3b 	bl	8008828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004db2:	2200      	movs	r2, #0
 8004db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004db8:	4870      	ldr	r0, [pc, #448]	; (8004f7c <MX_GPIO_Init+0x294>)
 8004dba:	f003 fd35 	bl	8008828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dc4:	486e      	ldr	r0, [pc, #440]	; (8004f80 <MX_GPIO_Init+0x298>)
 8004dc6:	f003 fd2f 	bl	8008828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004dd0:	486c      	ldr	r0, [pc, #432]	; (8004f84 <MX_GPIO_Init+0x29c>)
 8004dd2:	f003 fd29 	bl	8008828 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004dda:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <MX_GPIO_Init+0x2a0>)
 8004ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004de2:	f107 031c 	add.w	r3, r7, #28
 8004de6:	4619      	mov	r1, r3
 8004de8:	4863      	ldr	r0, [pc, #396]	; (8004f78 <MX_GPIO_Init+0x290>)
 8004dea:	f003 fb5b 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004dee:	230f      	movs	r3, #15
 8004df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004df2:	2303      	movs	r3, #3
 8004df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dfa:	f107 031c 	add.w	r3, r7, #28
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4862      	ldr	r0, [pc, #392]	; (8004f8c <MX_GPIO_Init+0x2a4>)
 8004e02:	f003 fb4f 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e06:	23e1      	movs	r3, #225	; 0xe1
 8004e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e12:	f107 031c 	add.w	r3, r7, #28
 8004e16:	4619      	mov	r1, r3
 8004e18:	485a      	ldr	r0, [pc, #360]	; (8004f84 <MX_GPIO_Init+0x29c>)
 8004e1a:	f003 fb43 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e22:	2303      	movs	r3, #3
 8004e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e2a:	f107 031c 	add.w	r3, r7, #28
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4852      	ldr	r0, [pc, #328]	; (8004f7c <MX_GPIO_Init+0x294>)
 8004e32:	f003 fb37 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e36:	2304      	movs	r3, #4
 8004e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e42:	f107 031c 	add.w	r3, r7, #28
 8004e46:	4619      	mov	r1, r3
 8004e48:	484c      	ldr	r0, [pc, #304]	; (8004f7c <MX_GPIO_Init+0x294>)
 8004e4a:	f003 fb2b 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004e4e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e54:	2300      	movs	r3, #0
 8004e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e5c:	f107 031c 	add.w	r3, r7, #28
 8004e60:	4619      	mov	r1, r3
 8004e62:	4845      	ldr	r0, [pc, #276]	; (8004f78 <MX_GPIO_Init+0x290>)
 8004e64:	f003 fb1e 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e7a:	f107 031c 	add.w	r3, r7, #28
 8004e7e:	4619      	mov	r1, r3
 8004e80:	483d      	ldr	r0, [pc, #244]	; (8004f78 <MX_GPIO_Init+0x290>)
 8004e82:	f003 fb0f 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e98:	f107 031c 	add.w	r3, r7, #28
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4837      	ldr	r0, [pc, #220]	; (8004f7c <MX_GPIO_Init+0x294>)
 8004ea0:	f003 fb00 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <MX_GPIO_Init+0x2a0>)
 8004eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eb2:	f107 031c 	add.w	r3, r7, #28
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4831      	ldr	r0, [pc, #196]	; (8004f80 <MX_GPIO_Init+0x298>)
 8004eba:	f003 faf3 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ed0:	f107 031c 	add.w	r3, r7, #28
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	482a      	ldr	r0, [pc, #168]	; (8004f80 <MX_GPIO_Init+0x298>)
 8004ed8:	f003 fae4 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eea:	2300      	movs	r3, #0
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eee:	f107 031c 	add.w	r3, r7, #28
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4822      	ldr	r0, [pc, #136]	; (8004f80 <MX_GPIO_Init+0x298>)
 8004ef6:	f003 fad5 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004efa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004efe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f00:	2301      	movs	r3, #1
 8004f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0c:	f107 031c 	add.w	r3, r7, #28
 8004f10:	4619      	mov	r1, r3
 8004f12:	481c      	ldr	r0, [pc, #112]	; (8004f84 <MX_GPIO_Init+0x29c>)
 8004f14:	f003 fac6 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f26:	f107 031c 	add.w	r3, r7, #28
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4815      	ldr	r0, [pc, #84]	; (8004f84 <MX_GPIO_Init+0x29c>)
 8004f2e:	f003 fab9 	bl	80084a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004f32:	239b      	movs	r3, #155	; 0x9b
 8004f34:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f36:	2300      	movs	r3, #0
 8004f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f3e:	f107 031c 	add.w	r3, r7, #28
 8004f42:	4619      	mov	r1, r3
 8004f44:	480e      	ldr	r0, [pc, #56]	; (8004f80 <MX_GPIO_Init+0x298>)
 8004f46:	f003 faad 	bl	80084a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2008      	movs	r0, #8
 8004f50:	f002 fed5 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004f54:	2008      	movs	r0, #8
 8004f56:	f002 feee 	bl	8007d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2017      	movs	r0, #23
 8004f60:	f002 fecd 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004f64:	2017      	movs	r0, #23
 8004f66:	f002 fee6 	bl	8007d36 <HAL_NVIC_EnableIRQ>

}
 8004f6a:	bf00      	nop
 8004f6c:	3730      	adds	r7, #48	; 0x30
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40020400 	.word	0x40020400
 8004f80:	40020c00 	.word	0x40020c00
 8004f84:	40020000 	.word	0x40020000
 8004f88:	10310000 	.word	0x10310000
 8004f8c:	40020800 	.word	0x40020800

08004f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f96:	e7fe      	b.n	8004f96 <Error_Handler+0x6>

08004f98 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_MspInit+0x4c>)
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <HAL_MspInit+0x4c>)
 8004fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_MspInit+0x4c>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <HAL_MspInit+0x4c>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <HAL_MspInit+0x4c>)
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_MspInit+0x4c>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08c      	sub	sp, #48	; 0x30
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	f107 031c 	add.w	r3, r7, #28
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a4a      	ldr	r2, [pc, #296]	; (8005140 <HAL_ADC_MspInit+0x148>)
 8005016:	4293      	cmp	r3, r2
 8005018:	f040 808e 	bne.w	8005138 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	4b48      	ldr	r3, [pc, #288]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	4a47      	ldr	r2, [pc, #284]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 8005026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800502a:	6453      	str	r3, [r2, #68]	; 0x44
 800502c:	4b45      	ldr	r3, [pc, #276]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	4a40      	ldr	r2, [pc, #256]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	6313      	str	r3, [r2, #48]	; 0x30
 8005048:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	4b3a      	ldr	r3, [pc, #232]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	4a39      	ldr	r2, [pc, #228]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6313      	str	r3, [r2, #48]	; 0x30
 8005064:	4b37      	ldr	r3, [pc, #220]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	4a32      	ldr	r2, [pc, #200]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 800507a:	f043 0302 	orr.w	r3, r3, #2
 800507e:	6313      	str	r3, [r2, #48]	; 0x30
 8005080:	4b30      	ldr	r3, [pc, #192]	; (8005144 <HAL_ADC_MspInit+0x14c>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800508c:	230f      	movs	r3, #15
 800508e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005090:	2303      	movs	r3, #3
 8005092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005098:	f107 031c 	add.w	r3, r7, #28
 800509c:	4619      	mov	r1, r3
 800509e:	482a      	ldr	r0, [pc, #168]	; (8005148 <HAL_ADC_MspInit+0x150>)
 80050a0:	f003 fa00 	bl	80084a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80050a4:	23ff      	movs	r3, #255	; 0xff
 80050a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a8:	2303      	movs	r3, #3
 80050aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	4619      	mov	r1, r3
 80050b6:	4825      	ldr	r0, [pc, #148]	; (800514c <HAL_ADC_MspInit+0x154>)
 80050b8:	f003 f9f4 	bl	80084a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050bc:	2303      	movs	r3, #3
 80050be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050c0:	2303      	movs	r3, #3
 80050c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	4619      	mov	r1, r3
 80050ce:	4820      	ldr	r0, [pc, #128]	; (8005150 <HAL_ADC_MspInit+0x158>)
 80050d0:	f003 f9e8 	bl	80084a4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 80050d6:	4a20      	ldr	r2, [pc, #128]	; (8005158 <HAL_ADC_MspInit+0x160>)
 80050d8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80050da:	4b1e      	ldr	r3, [pc, #120]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 80050dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050e0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050e2:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 80050f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 80050f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050fc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 8005100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005104:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 8005108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800510c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 8005110:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005114:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 8005118:	2200      	movs	r2, #0
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800511c:	480d      	ldr	r0, [pc, #52]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 800511e:	f002 fe25 	bl	8007d6c <HAL_DMA_Init>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005128:	f7ff ff32 	bl	8004f90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a09      	ldr	r2, [pc, #36]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
 8005132:	4a08      	ldr	r2, [pc, #32]	; (8005154 <HAL_ADC_MspInit+0x15c>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005138:	bf00      	nop
 800513a:	3730      	adds	r7, #48	; 0x30
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40012100 	.word	0x40012100
 8005144:	40023800 	.word	0x40023800
 8005148:	40020800 	.word	0x40020800
 800514c:	40020000 	.word	0x40020000
 8005150:	40020400 	.word	0x40020400
 8005154:	20039c6c 	.word	0x20039c6c
 8005158:	40026440 	.word	0x40026440

0800515c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08c      	sub	sp, #48	; 0x30
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005164:	f107 031c 	add.w	r3, r7, #28
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a32      	ldr	r2, [pc, #200]	; (8005244 <HAL_I2C_MspInit+0xe8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d12c      	bne.n	80051d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_I2C_MspInit+0xec>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	4a30      	ldr	r2, [pc, #192]	; (8005248 <HAL_I2C_MspInit+0xec>)
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	6313      	str	r3, [r2, #48]	; 0x30
 800518e:	4b2e      	ldr	r3, [pc, #184]	; (8005248 <HAL_I2C_MspInit+0xec>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800519a:	23c0      	movs	r3, #192	; 0xc0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800519e:	2312      	movs	r3, #18
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051a2:	2301      	movs	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a6:	2303      	movs	r3, #3
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051aa:	2304      	movs	r3, #4
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ae:	f107 031c 	add.w	r3, r7, #28
 80051b2:	4619      	mov	r1, r3
 80051b4:	4825      	ldr	r0, [pc, #148]	; (800524c <HAL_I2C_MspInit+0xf0>)
 80051b6:	f003 f975 	bl	80084a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_I2C_MspInit+0xec>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a21      	ldr	r2, [pc, #132]	; (8005248 <HAL_I2C_MspInit+0xec>)
 80051c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ca:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <HAL_I2C_MspInit+0xec>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80051d6:	e031      	b.n	800523c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <HAL_I2C_MspInit+0xf4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d12c      	bne.n	800523c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <HAL_I2C_MspInit+0xec>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <HAL_I2C_MspInit+0xec>)
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	6313      	str	r3, [r2, #48]	; 0x30
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_I2C_MspInit+0xec>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80051fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005204:	2312      	movs	r3, #18
 8005206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005208:	2301      	movs	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800520c:	2303      	movs	r3, #3
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005210:	2304      	movs	r3, #4
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005214:	f107 031c 	add.w	r3, r7, #28
 8005218:	4619      	mov	r1, r3
 800521a:	480c      	ldr	r0, [pc, #48]	; (800524c <HAL_I2C_MspInit+0xf0>)
 800521c:	f003 f942 	bl	80084a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_I2C_MspInit+0xec>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	4a07      	ldr	r2, [pc, #28]	; (8005248 <HAL_I2C_MspInit+0xec>)
 800522a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800522e:	6413      	str	r3, [r2, #64]	; 0x40
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_I2C_MspInit+0xec>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	bf00      	nop
 800523e:	3730      	adds	r7, #48	; 0x30
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40005400 	.word	0x40005400
 8005248:	40023800 	.word	0x40023800
 800524c:	40020400 	.word	0x40020400
 8005250:	40005800 	.word	0x40005800

08005254 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a69      	ldr	r2, [pc, #420]	; (8005418 <HAL_SD_MspInit+0x1c4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	f040 80cb 	bne.w	800540e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	4b67      	ldr	r3, [pc, #412]	; (800541c <HAL_SD_MspInit+0x1c8>)
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	4a66      	ldr	r2, [pc, #408]	; (800541c <HAL_SD_MspInit+0x1c8>)
 8005282:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005286:	6453      	str	r3, [r2, #68]	; 0x44
 8005288:	4b64      	ldr	r3, [pc, #400]	; (800541c <HAL_SD_MspInit+0x1c8>)
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	4b60      	ldr	r3, [pc, #384]	; (800541c <HAL_SD_MspInit+0x1c8>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	4a5f      	ldr	r2, [pc, #380]	; (800541c <HAL_SD_MspInit+0x1c8>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6313      	str	r3, [r2, #48]	; 0x30
 80052a4:	4b5d      	ldr	r3, [pc, #372]	; (800541c <HAL_SD_MspInit+0x1c8>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_SD_MspInit+0x1c8>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a58      	ldr	r2, [pc, #352]	; (800541c <HAL_SD_MspInit+0x1c8>)
 80052ba:	f043 0308 	orr.w	r3, r3, #8
 80052be:	6313      	str	r3, [r2, #48]	; 0x30
 80052c0:	4b56      	ldr	r3, [pc, #344]	; (800541c <HAL_SD_MspInit+0x1c8>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80052cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80052d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052da:	2303      	movs	r3, #3
 80052dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052de:	230c      	movs	r3, #12
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	4619      	mov	r1, r3
 80052e8:	484d      	ldr	r0, [pc, #308]	; (8005420 <HAL_SD_MspInit+0x1cc>)
 80052ea:	f003 f8db 	bl	80084a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052ee:	2304      	movs	r3, #4
 80052f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f2:	2302      	movs	r3, #2
 80052f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fa:	2303      	movs	r3, #3
 80052fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052fe:	230c      	movs	r3, #12
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005302:	f107 0314 	add.w	r3, r7, #20
 8005306:	4619      	mov	r1, r3
 8005308:	4846      	ldr	r0, [pc, #280]	; (8005424 <HAL_SD_MspInit+0x1d0>)
 800530a:	f003 f8cb 	bl	80084a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800530e:	4b46      	ldr	r3, [pc, #280]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005310:	4a46      	ldr	r2, [pc, #280]	; (800542c <HAL_SD_MspInit+0x1d8>)
 8005312:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005314:	4b44      	ldr	r3, [pc, #272]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005316:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800531a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800531c:	4b42      	ldr	r3, [pc, #264]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005324:	2200      	movs	r2, #0
 8005326:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005328:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 800532a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800532e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005330:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005336:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 800533a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800533e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005340:	4b39      	ldr	r3, [pc, #228]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005342:	2220      	movs	r2, #32
 8005344:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005346:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005348:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800534c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005350:	2204      	movs	r2, #4
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005356:	2203      	movs	r2, #3
 8005358:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 800535c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005362:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005364:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800536a:	482f      	ldr	r0, [pc, #188]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 800536c:	f002 fcfe 	bl	8007d6c <HAL_DMA_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005376:	f7ff fe0b 	bl	8004f90 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
 8005380:	4a29      	ldr	r2, [pc, #164]	; (8005428 <HAL_SD_MspInit+0x1d4>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005386:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 8005388:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_SD_MspInit+0x1e0>)
 800538a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800538c:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 800538e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005392:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005394:	4b26      	ldr	r3, [pc, #152]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800539a:	4b25      	ldr	r3, [pc, #148]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 800539c:	2200      	movs	r2, #0
 800539e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053a8:	4b21      	ldr	r3, [pc, #132]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053b0:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053ba:	2220      	movs	r2, #32
 80053bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053c4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053c8:	2204      	movs	r2, #4
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80053cc:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053ce:	2203      	movs	r2, #3
 80053d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80053e2:	4813      	ldr	r0, [pc, #76]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053e4:	f002 fcc2 	bl	8007d6c <HAL_DMA_Init>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80053ee:	f7ff fdcf 	bl	8004f90 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80053f8:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <HAL_SD_MspInit+0x1dc>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80053fe:	2200      	movs	r2, #0
 8005400:	2100      	movs	r1, #0
 8005402:	2031      	movs	r0, #49	; 0x31
 8005404:	f002 fc7b 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005408:	2031      	movs	r0, #49	; 0x31
 800540a:	f002 fc94 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800540e:	bf00      	nop
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40023800 	.word	0x40023800
 8005420:	40020800 	.word	0x40020800
 8005424:	40020c00 	.word	0x40020c00
 8005428:	20039794 	.word	0x20039794
 800542c:	40026458 	.word	0x40026458
 8005430:	20039ac8 	.word	0x20039ac8
 8005434:	400264a0 	.word	0x400264a0

08005438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	f107 0314 	add.w	r3, r7, #20
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <HAL_SPI_MspInit+0x84>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d12c      	bne.n	80054b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_SPI_MspInit+0x88>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_SPI_MspInit+0x88>)
 8005464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005468:	6413      	str	r3, [r2, #64]	; 0x40
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <HAL_SPI_MspInit+0x88>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <HAL_SPI_MspInit+0x88>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <HAL_SPI_MspInit+0x88>)
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	6313      	str	r3, [r2, #48]	; 0x30
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_SPI_MspInit+0x88>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005492:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005498:	2302      	movs	r3, #2
 800549a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a0:	2303      	movs	r3, #3
 80054a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80054a4:	2305      	movs	r3, #5
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4619      	mov	r1, r3
 80054ae:	4805      	ldr	r0, [pc, #20]	; (80054c4 <HAL_SPI_MspInit+0x8c>)
 80054b0:	f002 fff8 	bl	80084a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80054b4:	bf00      	nop
 80054b6:	3728      	adds	r7, #40	; 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40003800 	.word	0x40003800
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40020400 	.word	0x40020400

080054c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	; 0x30
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d0:	f107 031c 	add.w	r3, r7, #28
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_TIM_PWM_MspInit+0xd4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d12d      	bne.n	8005546 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	4b2c      	ldr	r3, [pc, #176]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6453      	str	r3, [r2, #68]	; 0x44
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	4a24      	ldr	r2, [pc, #144]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 8005510:	f043 0310 	orr.w	r3, r3, #16
 8005514:	6313      	str	r3, [r2, #48]	; 0x30
 8005516:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005522:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005528:	2302      	movs	r3, #2
 800552a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005534:	2301      	movs	r3, #1
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	4619      	mov	r1, r3
 800553e:	4819      	ldr	r0, [pc, #100]	; (80055a4 <HAL_TIM_PWM_MspInit+0xdc>)
 8005540:	f002 ffb0 	bl	80084a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005544:	e026      	b.n	8005594 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <HAL_TIM_PWM_MspInit+0xe0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10e      	bne.n	800556e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	6413      	str	r3, [r2, #64]	; 0x40
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
}
 800556c:	e012      	b.n	8005594 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_TIM_PWM_MspInit+0xe4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10d      	bne.n	8005594 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	6413      	str	r3, [r2, #64]	; 0x40
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_TIM_PWM_MspInit+0xd8>)
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	3730      	adds	r7, #48	; 0x30
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40010000 	.word	0x40010000
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800

080055b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3e      	ldr	r2, [pc, #248]	; (80056b8 <HAL_TIM_Base_MspInit+0x108>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d116      	bne.n	80055f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	4b3d      	ldr	r3, [pc, #244]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	4a3c      	ldr	r2, [pc, #240]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 80055cc:	f043 0310 	orr.w	r3, r3, #16
 80055d0:	6413      	str	r3, [r2, #64]	; 0x40
 80055d2:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80055de:	2200      	movs	r2, #0
 80055e0:	2101      	movs	r1, #1
 80055e2:	2036      	movs	r0, #54	; 0x36
 80055e4:	f002 fb8b 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055e8:	2036      	movs	r0, #54	; 0x36
 80055ea:	f002 fba4 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80055ee:	e05e      	b.n	80056ae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a32      	ldr	r2, [pc, #200]	; (80056c0 <HAL_TIM_Base_MspInit+0x110>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d116      	bne.n	8005628 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	4a2e      	ldr	r2, [pc, #184]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005604:	f043 0320 	orr.w	r3, r3, #32
 8005608:	6413      	str	r3, [r2, #64]	; 0x40
 800560a:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005616:	2200      	movs	r2, #0
 8005618:	2100      	movs	r1, #0
 800561a:	2037      	movs	r0, #55	; 0x37
 800561c:	f002 fb6f 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005620:	2037      	movs	r0, #55	; 0x37
 8005622:	f002 fb88 	bl	8007d36 <HAL_NVIC_EnableIRQ>
}
 8005626:	e042      	b.n	80056ae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <HAL_TIM_Base_MspInit+0x114>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	4a20      	ldr	r2, [pc, #128]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 800563c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005640:	6453      	str	r3, [r2, #68]	; 0x44
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
}
 800564e:	e02e      	b.n	80056ae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <HAL_TIM_Base_MspInit+0x118>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005668:	6453      	str	r3, [r2, #68]	; 0x44
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	693b      	ldr	r3, [r7, #16]
}
 8005676:	e01a      	b.n	80056ae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a13      	ldr	r2, [pc, #76]	; (80056cc <HAL_TIM_Base_MspInit+0x11c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d115      	bne.n	80056ae <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 800568c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005690:	6413      	str	r3, [r2, #64]	; 0x40
 8005692:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <HAL_TIM_Base_MspInit+0x10c>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	202c      	movs	r0, #44	; 0x2c
 80056a4:	f002 fb2b 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80056a8:	202c      	movs	r0, #44	; 0x2c
 80056aa:	f002 fb44 	bl	8007d36 <HAL_NVIC_EnableIRQ>
}
 80056ae:	bf00      	nop
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40001000 	.word	0x40001000
 80056bc:	40023800 	.word	0x40023800
 80056c0:	40001400 	.word	0x40001400
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800
 80056cc:	40001c00 	.word	0x40001c00

080056d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <HAL_TIM_Encoder_MspInit+0x94>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d133      	bne.n	800575a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	4b1c      	ldr	r3, [pc, #112]	; (8005768 <HAL_TIM_Encoder_MspInit+0x98>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_TIM_Encoder_MspInit+0x98>)
 80056fc:	f043 0302 	orr.w	r3, r3, #2
 8005700:	6453      	str	r3, [r2, #68]	; 0x44
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_TIM_Encoder_MspInit+0x98>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <HAL_TIM_Encoder_MspInit+0x98>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <HAL_TIM_Encoder_MspInit+0x98>)
 8005718:	f043 0304 	orr.w	r3, r3, #4
 800571c:	6313      	str	r3, [r2, #48]	; 0x30
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_TIM_Encoder_MspInit+0x98>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800572a:	23c0      	movs	r3, #192	; 0xc0
 800572c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572e:	2302      	movs	r3, #2
 8005730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005736:	2300      	movs	r3, #0
 8005738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800573a:	2303      	movs	r3, #3
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800573e:	f107 0314 	add.w	r3, r7, #20
 8005742:	4619      	mov	r1, r3
 8005744:	4809      	ldr	r0, [pc, #36]	; (800576c <HAL_TIM_Encoder_MspInit+0x9c>)
 8005746:	f002 fead 	bl	80084a4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800574a:	2200      	movs	r2, #0
 800574c:	2100      	movs	r1, #0
 800574e:	202c      	movs	r0, #44	; 0x2c
 8005750:	f002 fad5 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005754:	202c      	movs	r0, #44	; 0x2c
 8005756:	f002 faee 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800575a:	bf00      	nop
 800575c:	3728      	adds	r7, #40	; 0x28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40010400 	.word	0x40010400
 8005768:	40023800 	.word	0x40023800
 800576c:	40020800 	.word	0x40020800

08005770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08c      	sub	sp, #48	; 0x30
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005778:	f107 031c 	add.w	r3, r7, #28
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a5c      	ldr	r2, [pc, #368]	; (8005900 <HAL_TIM_MspPostInit+0x190>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d11f      	bne.n	80057d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	4b5b      	ldr	r3, [pc, #364]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	4a5a      	ldr	r2, [pc, #360]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 800579c:	f043 0310 	orr.w	r3, r3, #16
 80057a0:	6313      	str	r3, [r2, #48]	; 0x30
 80057a2:	4b58      	ldr	r3, [pc, #352]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80057ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b4:	2302      	movs	r3, #2
 80057b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057bc:	2300      	movs	r3, #0
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80057c0:	2301      	movs	r3, #1
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057c4:	f107 031c 	add.w	r3, r7, #28
 80057c8:	4619      	mov	r1, r3
 80057ca:	484f      	ldr	r0, [pc, #316]	; (8005908 <HAL_TIM_MspPostInit+0x198>)
 80057cc:	f002 fe6a 	bl	80084a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80057d0:	e091      	b.n	80058f6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a4d      	ldr	r2, [pc, #308]	; (800590c <HAL_TIM_MspPostInit+0x19c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d11e      	bne.n	800581a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	4b48      	ldr	r3, [pc, #288]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	4a47      	ldr	r2, [pc, #284]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80057e6:	f043 0302 	orr.w	r3, r3, #2
 80057ea:	6313      	str	r3, [r2, #48]	; 0x30
 80057ec:	4b45      	ldr	r3, [pc, #276]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80057f8:	2330      	movs	r3, #48	; 0x30
 80057fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fc:	2302      	movs	r3, #2
 80057fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005804:	2300      	movs	r3, #0
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005808:	2302      	movs	r3, #2
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800580c:	f107 031c 	add.w	r3, r7, #28
 8005810:	4619      	mov	r1, r3
 8005812:	483f      	ldr	r0, [pc, #252]	; (8005910 <HAL_TIM_MspPostInit+0x1a0>)
 8005814:	f002 fe46 	bl	80084a4 <HAL_GPIO_Init>
}
 8005818:	e06d      	b.n	80058f6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <HAL_TIM_MspPostInit+0x1a4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d11f      	bne.n	8005864 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	4b36      	ldr	r3, [pc, #216]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 800582e:	f043 0308 	orr.w	r3, r3, #8
 8005832:	6313      	str	r3, [r2, #48]	; 0x30
 8005834:	4b33      	ldr	r3, [pc, #204]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005840:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005846:	2302      	movs	r3, #2
 8005848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584e:	2300      	movs	r3, #0
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005852:	2302      	movs	r3, #2
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005856:	f107 031c 	add.w	r3, r7, #28
 800585a:	4619      	mov	r1, r3
 800585c:	482e      	ldr	r0, [pc, #184]	; (8005918 <HAL_TIM_MspPostInit+0x1a8>)
 800585e:	f002 fe21 	bl	80084a4 <HAL_GPIO_Init>
}
 8005862:	e048      	b.n	80058f6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2c      	ldr	r2, [pc, #176]	; (800591c <HAL_TIM_MspPostInit+0x1ac>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d11f      	bne.n	80058ae <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a23      	ldr	r2, [pc, #140]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b21      	ldr	r3, [pc, #132]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800588a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005890:	2302      	movs	r3, #2
 8005892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	2300      	movs	r3, #0
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005898:	2300      	movs	r3, #0
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800589c:	2303      	movs	r3, #3
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058a0:	f107 031c 	add.w	r3, r7, #28
 80058a4:	4619      	mov	r1, r3
 80058a6:	481a      	ldr	r0, [pc, #104]	; (8005910 <HAL_TIM_MspPostInit+0x1a0>)
 80058a8:	f002 fdfc 	bl	80084a4 <HAL_GPIO_Init>
}
 80058ac:	e023      	b.n	80058f6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <HAL_TIM_MspPostInit+0x1b0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d11e      	bne.n	80058f6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	4b11      	ldr	r3, [pc, #68]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	4a10      	ldr	r2, [pc, #64]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80058c2:	f043 0302 	orr.w	r3, r3, #2
 80058c6:	6313      	str	r3, [r2, #48]	; 0x30
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <HAL_TIM_MspPostInit+0x194>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058da:	2302      	movs	r3, #2
 80058dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058e2:	2300      	movs	r3, #0
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80058e6:	2303      	movs	r3, #3
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058ea:	f107 031c 	add.w	r3, r7, #28
 80058ee:	4619      	mov	r1, r3
 80058f0:	4807      	ldr	r0, [pc, #28]	; (8005910 <HAL_TIM_MspPostInit+0x1a0>)
 80058f2:	f002 fdd7 	bl	80084a4 <HAL_GPIO_Init>
}
 80058f6:	bf00      	nop
 80058f8:	3730      	adds	r7, #48	; 0x30
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40010000 	.word	0x40010000
 8005904:	40023800 	.word	0x40023800
 8005908:	40021000 	.word	0x40021000
 800590c:	40000400 	.word	0x40000400
 8005910:	40020400 	.word	0x40020400
 8005914:	40000800 	.word	0x40000800
 8005918:	40020c00 	.word	0x40020c00
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800

08005924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <HAL_UART_MspInit+0x84>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d12b      	bne.n	800599e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	4b18      	ldr	r3, [pc, #96]	; (80059ac <HAL_UART_MspInit+0x88>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	4a17      	ldr	r2, [pc, #92]	; (80059ac <HAL_UART_MspInit+0x88>)
 8005950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005954:	6413      	str	r3, [r2, #64]	; 0x40
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <HAL_UART_MspInit+0x88>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_UART_MspInit+0x88>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4a10      	ldr	r2, [pc, #64]	; (80059ac <HAL_UART_MspInit+0x88>)
 800596c:	f043 0308 	orr.w	r3, r3, #8
 8005970:	6313      	str	r3, [r2, #48]	; 0x30
 8005972:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <HAL_UART_MspInit+0x88>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800597e:	2360      	movs	r3, #96	; 0x60
 8005980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005982:	2302      	movs	r3, #2
 8005984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800598a:	2303      	movs	r3, #3
 800598c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800598e:	2307      	movs	r3, #7
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	4619      	mov	r1, r3
 8005998:	4805      	ldr	r0, [pc, #20]	; (80059b0 <HAL_UART_MspInit+0x8c>)
 800599a:	f002 fd83 	bl	80084a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800599e:	bf00      	nop
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40004400 	.word	0x40004400
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40020c00 	.word	0x40020c00

080059b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059b8:	e7fe      	b.n	80059b8 <NMI_Handler+0x4>

080059ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059ba:	b480      	push	{r7}
 80059bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059be:	e7fe      	b.n	80059be <HardFault_Handler+0x4>

080059c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059c4:	e7fe      	b.n	80059c4 <MemManage_Handler+0x4>

080059c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059c6:	b480      	push	{r7}
 80059c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059ca:	e7fe      	b.n	80059ca <BusFault_Handler+0x4>

080059cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059d0:	e7fe      	b.n	80059d0 <UsageFault_Handler+0x4>

080059d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a00:	f001 fc5c 	bl	80072bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005a0c:	2004      	movs	r0, #4
 8005a0e:	f002 ff25 	bl	800885c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005a1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a1e:	f002 ff1d 	bl	800885c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005a2c:	4803      	ldr	r0, [pc, #12]	; (8005a3c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005a2e:	f006 ff34 	bl	800c89a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005a32:	4803      	ldr	r0, [pc, #12]	; (8005a40 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005a34:	f006 ff31 	bl	800c89a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005a38:	bf00      	nop
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2003984c 	.word	0x2003984c
 8005a40:	20039a48 	.word	0x20039a48

08005a44 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005a48:	4802      	ldr	r0, [pc, #8]	; (8005a54 <SDIO_IRQHandler+0x10>)
 8005a4a:	f004 ffcd 	bl	800a9e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20039ba8 	.word	0x20039ba8

08005a58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a5c:	4802      	ldr	r0, [pc, #8]	; (8005a68 <TIM6_DAC_IRQHandler+0x10>)
 8005a5e:	f006 ff1c 	bl	800c89a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20039b28 	.word	0x20039b28

08005a6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <TIM7_IRQHandler+0x10>)
 8005a72:	f006 ff12 	bl	800c89a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20039ccc 	.word	0x20039ccc

08005a80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <DMA2_Stream2_IRQHandler+0x10>)
 8005a86:	f002 fa99 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20039c6c 	.word	0x20039c6c

08005a94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <DMA2_Stream3_IRQHandler+0x10>)
 8005a9a:	f002 fa8f 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20039794 	.word	0x20039794

08005aa8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005aac:	4802      	ldr	r0, [pc, #8]	; (8005ab8 <DMA2_Stream6_IRQHandler+0x10>)
 8005aae:	f002 fa85 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20039ac8 	.word	0x20039ac8

08005abc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e00a      	b.n	8005ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005ace:	f3af 8000 	nop.w
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	60ba      	str	r2, [r7, #8]
 8005ada:	b2ca      	uxtb	r2, r1
 8005adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	dbf0      	blt.n	8005ace <_read+0x12>
	}

return len;
 8005aec:	687b      	ldr	r3, [r7, #4]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
	return -1;
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <_isatty>:

int _isatty(int file)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
	return 1;
 8005b36:	2301      	movs	r3, #1
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
	return 0;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b68:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <_sbrk+0x5c>)
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <_sbrk+0x60>)
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <_sbrk+0x64>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <_sbrk+0x64>)
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <_sbrk+0x68>)
 8005b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <_sbrk+0x64>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d207      	bcs.n	8005ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b90:	f00d f918 	bl	8012dc4 <__errno>
 8005b94:	4602      	mov	r2, r0
 8005b96:	230c      	movs	r3, #12
 8005b98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	e009      	b.n	8005bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ba0:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <_sbrk+0x64>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <_sbrk+0x64>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <_sbrk+0x64>)
 8005bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20050000 	.word	0x20050000
 8005bc0:	00000800 	.word	0x00000800
 8005bc4:	20000298 	.word	0x20000298
 8005bc8:	2003be20 	.word	0x2003be20

08005bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <SystemInit+0x28>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <SystemInit+0x28>)
 8005bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <SystemInit+0x28>)
 8005be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005be6:	609a      	str	r2, [r3, #8]
#endif
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	e000ed00 	.word	0xe000ed00

08005bf8 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
	lcd_clear();
 8005bfc:	f7fb fa50 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005c00:	2100      	movs	r1, #0
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fb fa5c 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005c08:	4814      	ldr	r0, [pc, #80]	; (8005c5c <batteryLowMode+0x64>)
 8005c0a:	f7fb fa83 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	2000      	movs	r0, #0
 8005c12:	f7fb fa55 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005c16:	4812      	ldr	r0, [pc, #72]	; (8005c60 <batteryLowMode+0x68>)
 8005c18:	f7fb fa7c 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005c1c:	2152      	movs	r1, #82	; 0x52
 8005c1e:	4811      	ldr	r0, [pc, #68]	; (8005c64 <batteryLowMode+0x6c>)
 8005c20:	f7fc f938 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005c24:	2064      	movs	r0, #100	; 0x64
 8005c26:	f001 fb69 	bl	80072fc <HAL_Delay>
		led.fullColor('Y');
 8005c2a:	2159      	movs	r1, #89	; 0x59
 8005c2c:	480d      	ldr	r0, [pc, #52]	; (8005c64 <batteryLowMode+0x6c>)
 8005c2e:	f7fc f931 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005c32:	2064      	movs	r0, #100	; 0x64
 8005c34:	f001 fb62 	bl	80072fc <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005c38:	480b      	ldr	r0, [pc, #44]	; (8005c68 <batteryLowMode+0x70>)
 8005c3a:	f7fc f8c7 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	bf0c      	ite	eq
 8005c44:	2301      	moveq	r3, #1
 8005c46:	2300      	movne	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0e6      	beq.n	8005c1c <batteryLowMode+0x24>
			HAL_Delay(500);
 8005c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c52:	f001 fb53 	bl	80072fc <HAL_Delay>
			break;
 8005c56:	bf00      	nop
		}
	}
}
 8005c58:	bf00      	nop
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	08018004 	.word	0x08018004
 8005c60:	0801800c 	.word	0x0801800c
 8005c64:	200005a8 	.word	0x200005a8
 8005c68:	2000059c 	.word	0x2000059c

08005c6c <cppInit>:

void cppInit(void)
{
 8005c6c:	b598      	push	{r3, r4, r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
	lcd_init();
 8005c70:	f7fb f9d2 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005c74:	483f      	ldr	r0, [pc, #252]	; (8005d74 <cppInit+0x108>)
 8005c76:	f7fd fd6f 	bl	8003758 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005c7a:	2064      	movs	r0, #100	; 0x64
 8005c7c:	f001 fb3e 	bl	80072fc <HAL_Delay>
	power_sensor.updateValues();
 8005c80:	483c      	ldr	r0, [pc, #240]	; (8005d74 <cppInit+0x108>)
 8005c82:	f7fd fd79 	bl	8003778 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8005c86:	f7fb fa0b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f7fb fa17 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005c92:	4839      	ldr	r0, [pc, #228]	; (8005d78 <cppInit+0x10c>)
 8005c94:	f7fb fa3e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005c98:	2101      	movs	r1, #1
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7fb fa10 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005ca0:	4834      	ldr	r0, [pc, #208]	; (8005d74 <cppInit+0x108>)
 8005ca2:	f7fd fd93 	bl	80037cc <_ZN11PowerSensor17getButteryVoltageEv>
 8005ca6:	ee10 3a10 	vmov	r3, s0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fa fc64 	bl	8000578 <__aeabi_f2d>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	4830      	ldr	r0, [pc, #192]	; (8005d7c <cppInit+0x110>)
 8005cba:	f7fb fa2b 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8005cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cc2:	f001 fb1b 	bl	80072fc <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005cc6:	482b      	ldr	r0, [pc, #172]	; (8005d74 <cppInit+0x108>)
 8005cc8:	f7fd fd92 	bl	80037f0 <_ZN11PowerSensor12butteryCheckEv>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <cppInit+0x6a>
 8005cd2:	f7ff ff91 	bl	8005bf8 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005cd6:	482a      	ldr	r0, [pc, #168]	; (8005d80 <cppInit+0x114>)
 8005cd8:	f7fd f89e 	bl	8002e18 <_ZN6Logger10sdCardInitEv>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <cppInit+0x86>
		led.fullColor('G');
 8005ce2:	2147      	movs	r1, #71	; 0x47
 8005ce4:	4827      	ldr	r0, [pc, #156]	; (8005d84 <cppInit+0x118>)
 8005ce6:	f7fc f8d5 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005cea:	2064      	movs	r0, #100	; 0x64
 8005cec:	f001 fb06 	bl	80072fc <HAL_Delay>
 8005cf0:	e006      	b.n	8005d00 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005cf2:	2152      	movs	r1, #82	; 0x52
 8005cf4:	4823      	ldr	r0, [pc, #140]	; (8005d84 <cppInit+0x118>)
 8005cf6:	f7fc f8cd 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005cfa:	2064      	movs	r0, #100	; 0x64
 8005cfc:	f001 fafe 	bl	80072fc <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005d00:	4821      	ldr	r0, [pc, #132]	; (8005d88 <cppInit+0x11c>)
 8005d02:	f7fc fa23 	bl	800214c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005d06:	4821      	ldr	r0, [pc, #132]	; (8005d8c <cppInit+0x120>)
 8005d08:	f7fd fa08 	bl	800311c <_ZN5Motor4initEv>
	encoder.init();
 8005d0c:	4820      	ldr	r0, [pc, #128]	; (8005d90 <cppInit+0x124>)
 8005d0e:	f7fb fa45 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 8005d12:	4820      	ldr	r0, [pc, #128]	; (8005d94 <cppInit+0x128>)
 8005d14:	f7fb fe74 	bl	8001a00 <_ZN3IMU4initEv>
	line_trace.init();
 8005d18:	481f      	ldr	r0, [pc, #124]	; (8005d98 <cppInit+0x12c>)
 8005d1a:	f7fc fe85 	bl	8002a28 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8005d1e:	481a      	ldr	r0, [pc, #104]	; (8005d88 <cppInit+0x11c>)
 8005d20:	f7fc fb54 	bl	80023cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d28:	f001 fae8 	bl	80072fc <HAL_Delay>

	led.fullColor('M');
 8005d2c:	214d      	movs	r1, #77	; 0x4d
 8005d2e:	4815      	ldr	r0, [pc, #84]	; (8005d84 <cppInit+0x118>)
 8005d30:	f7fc f8b0 	bl	8001e94 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005d34:	4817      	ldr	r0, [pc, #92]	; (8005d94 <cppInit+0x128>)
 8005d36:	f7fb ff35 	bl	8001ba4 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8005d3a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005d9c <cppInit+0x130>
 8005d3e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005da0 <cppInit+0x134>
 8005d42:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005da4 <cppInit+0x138>
 8005d46:	4818      	ldr	r0, [pc, #96]	; (8005da8 <cppInit+0x13c>)
 8005d48:	f7fe f8d6 	bl	8003ef8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8005d4c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8005dac <cppInit+0x140>
 8005d50:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005db0 <cppInit+0x144>
 8005d54:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8005db4 <cppInit+0x148>
 8005d58:	4813      	ldr	r0, [pc, #76]	; (8005da8 <cppInit+0x13c>)
 8005d5a:	f7fe f8e6 	bl	8003f2a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005d5e:	480c      	ldr	r0, [pc, #48]	; (8005d90 <cppInit+0x124>)
 8005d60:	f7fb fb5a 	bl	8001418 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005d64:	4814      	ldr	r0, [pc, #80]	; (8005db8 <cppInit+0x14c>)
 8005d66:	f7fd fbc5 	bl	80034f4 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005d6a:	4814      	ldr	r0, [pc, #80]	; (8005dbc <cppInit+0x150>)
 8005d6c:	f7fd fc5c 	bl	8003628 <_ZN13PathFollowing4initEv>

}
 8005d70:	bf00      	nop
 8005d72:	bd98      	pop	{r3, r4, r7, pc}
 8005d74:	200005ac 	.word	0x200005ac
 8005d78:	08018010 	.word	0x08018010
 8005d7c:	08018018 	.word	0x08018018
 8005d80:	200005cc 	.word	0x200005cc
 8005d84:	200005a8 	.word	0x200005a8
 8005d88:	2000029c 	.word	0x2000029c
 8005d8c:	200005a4 	.word	0x200005a4
 8005d90:	2001f9d4 	.word	0x2001f9d4
 8005d94:	200005b8 	.word	0x200005b8
 8005d98:	2001fa58 	.word	0x2001fa58
 8005d9c:	3cceca68 	.word	0x3cceca68
 8005da0:	4180f06f 	.word	0x4180f06f
 8005da4:	3fea2d0e 	.word	0x3fea2d0e
 8005da8:	2001f9ec 	.word	0x2001f9ec
 8005dac:	3ab7dacd 	.word	0x3ab7dacd
 8005db0:	3f5e3fbc 	.word	0x3f5e3fbc
 8005db4:	3d8eefa2 	.word	0x3d8eefa2
 8005db8:	2001fa28 	.word	0x2001fa28
 8005dbc:	2001fce0 	.word	0x2001fce0

08005dc0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005dc4:	4819      	ldr	r0, [pc, #100]	; (8005e2c <cppFlip1ms+0x6c>)
 8005dc6:	f7fc fa1f 	bl	8002208 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005dca:	4819      	ldr	r0, [pc, #100]	; (8005e30 <cppFlip1ms+0x70>)
 8005dcc:	f7fb fe48 	bl	8001a60 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005dd0:	4818      	ldr	r0, [pc, #96]	; (8005e34 <cppFlip1ms+0x74>)
 8005dd2:	f7fb fa05 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005dd6:	4818      	ldr	r0, [pc, #96]	; (8005e38 <cppFlip1ms+0x78>)
 8005dd8:	f7fc febe 	bl	8002b58 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005ddc:	4817      	ldr	r0, [pc, #92]	; (8005e3c <cppFlip1ms+0x7c>)
 8005dde:	f7fe f8bd 	bl	8003f5c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005de2:	4817      	ldr	r0, [pc, #92]	; (8005e40 <cppFlip1ms+0x80>)
 8005de4:	f7fd fb6a 	bl	80034bc <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005de8:	4816      	ldr	r0, [pc, #88]	; (8005e44 <cppFlip1ms+0x84>)
 8005dea:	f7fd f9a9 	bl	8003140 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8005dee:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <cppFlip1ms+0x88>)
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <cppFlip1ms+0x88>)
 8005df8:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <cppFlip1ms+0x88>)
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d90c      	bls.n	8005e1c <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 8005e02:	480b      	ldr	r0, [pc, #44]	; (8005e30 <cppFlip1ms+0x70>)
 8005e04:	f7fb fe84 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 8005e08:	eef0 7a40 	vmov.f32	s15, s0
 8005e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e10:	480e      	ldr	r0, [pc, #56]	; (8005e4c <cppFlip1ms+0x8c>)
 8005e12:	f7fd fe43 	bl	8003a9c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <cppFlip1ms+0x88>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 8005e1c:	4806      	ldr	r0, [pc, #24]	; (8005e38 <cppFlip1ms+0x78>)
 8005e1e:	f7fc ff5f 	bl	8002ce0 <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 8005e22:	4804      	ldr	r0, [pc, #16]	; (8005e34 <cppFlip1ms+0x74>)
 8005e24:	f7fb fb06 	bl	8001434 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	2000029c 	.word	0x2000029c
 8005e30:	200005b8 	.word	0x200005b8
 8005e34:	2001f9d4 	.word	0x2001f9d4
 8005e38:	2001fa58 	.word	0x2001fa58
 8005e3c:	2001f9ec 	.word	0x2001f9ec
 8005e40:	2001fa28 	.word	0x2001fa28
 8005e44:	200005a4 	.word	0x200005a4
 8005e48:	2003740a 	.word	0x2003740a
 8005e4c:	2001fad4 	.word	0x2001fad4

08005e50 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005e54:	4802      	ldr	r0, [pc, #8]	; (8005e60 <cppFlip100ns+0x10>)
 8005e56:	f7fc f989 	bl	800216c <_ZN10LineSensor17storeSensorValuesEv>
}
 8005e5a:	bf00      	nop
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2000029c 	.word	0x2000029c

08005e64 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <cppFlip10ms+0x30>)
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <cppFlip10ms+0x30>)
 8005e72:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8005e74:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <cppFlip10ms+0x30>)
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	2b06      	cmp	r3, #6
 8005e7a:	d905      	bls.n	8005e88 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005e7c:	4806      	ldr	r0, [pc, #24]	; (8005e98 <cppFlip10ms+0x34>)
 8005e7e:	f7fd fe49 	bl	8003b14 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8005e82:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <cppFlip10ms+0x30>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <cppFlip10ms+0x30>)
 8005e8a:	881a      	ldrh	r2, [r3, #0]
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <cppFlip10ms+0x38>)
 8005e8e:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005e90:	bf00      	nop
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	2003740c 	.word	0x2003740c
 8005e98:	2001fad4 	.word	0x2001fad4
 8005e9c:	20037408 	.word	0x20037408

08005ea0 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	4619      	mov	r1, r3
 8005eae:	4803      	ldr	r0, [pc, #12]	; (8005ebc <cppExit+0x1c>)
 8005eb0:	f7fd fd32 	bl	8003918 <_ZN10SideSensor12updateStatusEt>
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000594 	.word	0x20000594

08005ec0 <cppLoop>:

void cppLoop(void)
{
 8005ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	b08b      	sub	sp, #44	; 0x2c
 8005ec6:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005ec8:	48bf      	ldr	r0, [pc, #764]	; (80061c8 <cppLoop+0x308>)
 8005eca:	f7fd fcc3 	bl	8003854 <_ZN12RotarySwitch8getValueEv>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	f201 80bb 	bhi.w	800704c <cppLoop+0x118c>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <cppLoop+0x1c>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f1d 	.word	0x08005f1d
 8005ee0:	080063f7 	.word	0x080063f7
 8005ee4:	0800646b 	.word	0x0800646b
 8005ee8:	08006555 	.word	0x08006555
 8005eec:	08006605 	.word	0x08006605
 8005ef0:	08006693 	.word	0x08006693
 8005ef4:	08006759 	.word	0x08006759
 8005ef8:	0800686d 	.word	0x0800686d
 8005efc:	0800690d 	.word	0x0800690d
 8005f00:	08006e45 	.word	0x08006e45
 8005f04:	08006ee1 	.word	0x08006ee1
 8005f08:	08006f7b 	.word	0x08006f7b
 8005f0c:	08006fa5 	.word	0x08006fa5
 8005f10:	08006fcf 	.word	0x08006fcf
 8005f14:	08006ff9 	.word	0x08006ff9
 8005f18:	08007023 	.word	0x08007023
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8005f1c:	2152      	movs	r1, #82	; 0x52
 8005f1e:	48ab      	ldr	r0, [pc, #684]	; (80061cc <cppLoop+0x30c>)
 8005f20:	f7fb ffb8 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f24:	f7fb f8bc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f28:	2100      	movs	r1, #0
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f7fb f8c8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8005f30:	48a7      	ldr	r0, [pc, #668]	; (80061d0 <cppLoop+0x310>)
 8005f32:	f7fc fdc6 	bl	8002ac2 <_ZN9LineTrace5getKpEv>
 8005f36:	eeb0 7a40 	vmov.f32	s14, s0
 8005f3a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80061d4 <cppLoop+0x314>
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	ee17 0a90 	vmov	r0, s15
 8005f46:	f7fa fb17 	bl	8000578 <__aeabi_f2d>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4623      	mov	r3, r4
 8005f52:	48a1      	ldr	r0, [pc, #644]	; (80061d8 <cppLoop+0x318>)
 8005f54:	f7fb f8de 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f58:	2101      	movs	r1, #1
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f7fb f8b0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8005f60:	489b      	ldr	r0, [pc, #620]	; (80061d0 <cppLoop+0x310>)
 8005f62:	f7fc fdbd 	bl	8002ae0 <_ZN9LineTrace5getKiEv>
 8005f66:	eeb0 7a40 	vmov.f32	s14, s0
 8005f6a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80061dc <cppLoop+0x31c>
 8005f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f72:	ee17 0a90 	vmov	r0, s15
 8005f76:	f7fa faff 	bl	8000578 <__aeabi_f2d>
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	4894      	ldr	r0, [pc, #592]	; (80061d0 <cppLoop+0x310>)
 8005f80:	f7fc fdbd 	bl	8002afe <_ZN9LineTrace5getKdEv>
 8005f84:	eeb0 7a40 	vmov.f32	s14, s0
 8005f88:	eddf 7a95 	vldr	s15, [pc, #596]	; 80061e0 <cppLoop+0x320>
 8005f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f90:	ee17 0a90 	vmov	r0, s15
 8005f94:	f7fa faf0 	bl	8000578 <__aeabi_f2d>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	e9cd 3400 	strd	r3, r4, [sp]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4633      	mov	r3, r6
 8005fa4:	488f      	ldr	r0, [pc, #572]	; (80061e4 <cppLoop+0x324>)
 8005fa6:	f7fb f8b5 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8005faa:	4b8f      	ldr	r3, [pc, #572]	; (80061e8 <cppLoop+0x328>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f3bf 8f5b 	dmb	ish
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d015      	beq.n	8005ff2 <cppLoop+0x132>
 8005fc6:	4888      	ldr	r0, [pc, #544]	; (80061e8 <cppLoop+0x328>)
 8005fc8:	f00b fe95 	bl	8011cf6 <__cxa_guard_acquire>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <cppLoop+0x132>
 8005fdc:	487c      	ldr	r0, [pc, #496]	; (80061d0 <cppLoop+0x310>)
 8005fde:	f7fc fd70 	bl	8002ac2 <_ZN9LineTrace5getKpEv>
 8005fe2:	eef0 7a40 	vmov.f32	s15, s0
 8005fe6:	4b81      	ldr	r3, [pc, #516]	; (80061ec <cppLoop+0x32c>)
 8005fe8:	edc3 7a00 	vstr	s15, [r3]
 8005fec:	487e      	ldr	r0, [pc, #504]	; (80061e8 <cppLoop+0x328>)
 8005fee:	f00b fe8e 	bl	8011d0e <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8005ff2:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <cppLoop+0x330>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f3bf 8f5b 	dmb	ish
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d015      	beq.n	800603a <cppLoop+0x17a>
 800600e:	4878      	ldr	r0, [pc, #480]	; (80061f0 <cppLoop+0x330>)
 8006010:	f00b fe71 	bl	8011cf6 <__cxa_guard_acquire>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf14      	ite	ne
 800601a:	2301      	movne	r3, #1
 800601c:	2300      	moveq	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <cppLoop+0x17a>
 8006024:	486a      	ldr	r0, [pc, #424]	; (80061d0 <cppLoop+0x310>)
 8006026:	f7fc fd5b 	bl	8002ae0 <_ZN9LineTrace5getKiEv>
 800602a:	eef0 7a40 	vmov.f32	s15, s0
 800602e:	4b71      	ldr	r3, [pc, #452]	; (80061f4 <cppLoop+0x334>)
 8006030:	edc3 7a00 	vstr	s15, [r3]
 8006034:	486e      	ldr	r0, [pc, #440]	; (80061f0 <cppLoop+0x330>)
 8006036:	f00b fe6a 	bl	8011d0e <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 800603a:	4b6f      	ldr	r3, [pc, #444]	; (80061f8 <cppLoop+0x338>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f3bf 8f5b 	dmb	ish
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d015      	beq.n	8006082 <cppLoop+0x1c2>
 8006056:	4868      	ldr	r0, [pc, #416]	; (80061f8 <cppLoop+0x338>)
 8006058:	f00b fe4d 	bl	8011cf6 <__cxa_guard_acquire>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <cppLoop+0x1c2>
 800606c:	4858      	ldr	r0, [pc, #352]	; (80061d0 <cppLoop+0x310>)
 800606e:	f7fc fd46 	bl	8002afe <_ZN9LineTrace5getKdEv>
 8006072:	eef0 7a40 	vmov.f32	s15, s0
 8006076:	4b61      	ldr	r3, [pc, #388]	; (80061fc <cppLoop+0x33c>)
 8006078:	edc3 7a00 	vstr	s15, [r3]
 800607c:	485e      	ldr	r0, [pc, #376]	; (80061f8 <cppLoop+0x338>)
 800607e:	f00b fe46 	bl	8011d0e <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006082:	485f      	ldr	r0, [pc, #380]	; (8006200 <cppLoop+0x340>)
 8006084:	f7fb fea2 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006088:	4603      	mov	r3, r0
 800608a:	2b08      	cmp	r3, #8
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d022      	beq.n	80060de <cppLoop+0x21e>
			led.LR(-1, 1);
 8006098:	2201      	movs	r2, #1
 800609a:	f04f 31ff 	mov.w	r1, #4294967295
 800609e:	484b      	ldr	r0, [pc, #300]	; (80061cc <cppLoop+0x30c>)
 80060a0:	f7fb ffb4 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80060a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80060a8:	f001 f928 	bl	80072fc <HAL_Delay>

			selector++;
 80060ac:	4b55      	ldr	r3, [pc, #340]	; (8006204 <cppLoop+0x344>)
 80060ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3301      	adds	r3, #1
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	b21a      	sxth	r2, r3
 80060ba:	4b52      	ldr	r3, [pc, #328]	; (8006204 <cppLoop+0x344>)
 80060bc:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80060be:	4b51      	ldr	r3, [pc, #324]	; (8006204 <cppLoop+0x344>)
 80060c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	dd02      	ble.n	80060ce <cppLoop+0x20e>
 80060c8:	4b4e      	ldr	r3, [pc, #312]	; (8006204 <cppLoop+0x344>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80060ce:	2200      	movs	r2, #0
 80060d0:	f04f 31ff 	mov.w	r1, #4294967295
 80060d4:	483d      	ldr	r0, [pc, #244]	; (80061cc <cppLoop+0x30c>)
 80060d6:	f7fb ff99 	bl	800200c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80060da:	f000 bfb9 	b.w	8007050 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 80060de:	4848      	ldr	r0, [pc, #288]	; (8006200 <cppLoop+0x340>)
 80060e0:	f7fb fe74 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	bf0c      	ite	eq
 80060ea:	2301      	moveq	r3, #1
 80060ec:	2300      	movne	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8089 	beq.w	8006208 <cppLoop+0x348>
			led.LR(-1, 1);
 80060f6:	2201      	movs	r2, #1
 80060f8:	f04f 31ff 	mov.w	r1, #4294967295
 80060fc:	4833      	ldr	r0, [pc, #204]	; (80061cc <cppLoop+0x30c>)
 80060fe:	f7fb ff85 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006102:	2064      	movs	r0, #100	; 0x64
 8006104:	f001 f8fa 	bl	80072fc <HAL_Delay>
			if(selector == 0){
 8006108:	4b3e      	ldr	r3, [pc, #248]	; (8006204 <cppLoop+0x344>)
 800610a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d113      	bne.n	800613a <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 8006112:	4b36      	ldr	r3, [pc, #216]	; (80061ec <cppLoop+0x32c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa fa2e 	bl	8000578 <__aeabi_f2d>
 800611c:	a324      	add	r3, pc, #144	; (adr r3, 80061b0 <cppLoop+0x2f0>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa f8cb 	bl	80002bc <__adddf3>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	4618      	mov	r0, r3
 800612c:	4621      	mov	r1, r4
 800612e:	f7fa fd73 	bl	8000c18 <__aeabi_d2f>
 8006132:	4602      	mov	r2, r0
 8006134:	4b2d      	ldr	r3, [pc, #180]	; (80061ec <cppLoop+0x32c>)
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	e02b      	b.n	8006192 <cppLoop+0x2d2>
			else if(selector == 1){
 800613a:	4b32      	ldr	r3, [pc, #200]	; (8006204 <cppLoop+0x344>)
 800613c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d113      	bne.n	800616c <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 8006144:	4b2b      	ldr	r3, [pc, #172]	; (80061f4 <cppLoop+0x334>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa fa15 	bl	8000578 <__aeabi_f2d>
 800614e:	a31a      	add	r3, pc, #104	; (adr r3, 80061b8 <cppLoop+0x2f8>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa f8b2 	bl	80002bc <__adddf3>
 8006158:	4603      	mov	r3, r0
 800615a:	460c      	mov	r4, r1
 800615c:	4618      	mov	r0, r3
 800615e:	4621      	mov	r1, r4
 8006160:	f7fa fd5a 	bl	8000c18 <__aeabi_d2f>
 8006164:	4602      	mov	r2, r0
 8006166:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <cppLoop+0x334>)
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e012      	b.n	8006192 <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 800616c:	4b23      	ldr	r3, [pc, #140]	; (80061fc <cppLoop+0x33c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fa fa01 	bl	8000578 <__aeabi_f2d>
 8006176:	a312      	add	r3, pc, #72	; (adr r3, 80061c0 <cppLoop+0x300>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa f89e 	bl	80002bc <__adddf3>
 8006180:	4603      	mov	r3, r0
 8006182:	460c      	mov	r4, r1
 8006184:	4618      	mov	r0, r3
 8006186:	4621      	mov	r1, r4
 8006188:	f7fa fd46 	bl	8000c18 <__aeabi_d2f>
 800618c:	4602      	mov	r2, r0
 800618e:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <cppLoop+0x33c>)
 8006190:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006192:	2152      	movs	r1, #82	; 0x52
 8006194:	480d      	ldr	r0, [pc, #52]	; (80061cc <cppLoop+0x30c>)
 8006196:	f7fb fe7d 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800619a:	2200      	movs	r2, #0
 800619c:	f04f 31ff 	mov.w	r1, #4294967295
 80061a0:	480a      	ldr	r0, [pc, #40]	; (80061cc <cppLoop+0x30c>)
 80061a2:	f7fb ff33 	bl	800200c <_ZN3LED2LREaa>
		break;
 80061a6:	f000 bf53 	b.w	8007050 <cppLoop+0x1190>
 80061aa:	bf00      	nop
 80061ac:	f3af 8000 	nop.w
 80061b0:	88e368f1 	.word	0x88e368f1
 80061b4:	3ee4f8b5 	.word	0x3ee4f8b5
 80061b8:	eb1c432d 	.word	0xeb1c432d
 80061bc:	3f1a36e2 	.word	0x3f1a36e2
 80061c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80061c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80061c8:	200005a0 	.word	0x200005a0
 80061cc:	200005a8 	.word	0x200005a8
 80061d0:	2001fa58 	.word	0x2001fa58
 80061d4:	447a0000 	.word	0x447a0000
 80061d8:	0801801c 	.word	0x0801801c
 80061dc:	42c80000 	.word	0x42c80000
 80061e0:	461c4000 	.word	0x461c4000
 80061e4:	08018028 	.word	0x08018028
 80061e8:	20037414 	.word	0x20037414
 80061ec:	20037410 	.word	0x20037410
 80061f0:	2003741c 	.word	0x2003741c
 80061f4:	20037418 	.word	0x20037418
 80061f8:	20037424 	.word	0x20037424
 80061fc:	20037420 	.word	0x20037420
 8006200:	2000059c 	.word	0x2000059c
 8006204:	2003740e 	.word	0x2003740e
		else if(joy_stick.getValue() == JOY_L){
 8006208:	48c1      	ldr	r0, [pc, #772]	; (8006510 <cppLoop+0x650>)
 800620a:	f7fb fddf 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d059      	beq.n	80062d2 <cppLoop+0x412>
			led.LR(-1, 1);
 800621e:	2201      	movs	r2, #1
 8006220:	f04f 31ff 	mov.w	r1, #4294967295
 8006224:	48bb      	ldr	r0, [pc, #748]	; (8006514 <cppLoop+0x654>)
 8006226:	f7fb fef1 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800622a:	2064      	movs	r0, #100	; 0x64
 800622c:	f001 f866 	bl	80072fc <HAL_Delay>
			if(selector == 0){
 8006230:	4bb9      	ldr	r3, [pc, #740]	; (8006518 <cppLoop+0x658>)
 8006232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d113      	bne.n	8006262 <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 800623a:	4bb8      	ldr	r3, [pc, #736]	; (800651c <cppLoop+0x65c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f99a 	bl	8000578 <__aeabi_f2d>
 8006244:	a3ac      	add	r3, pc, #688	; (adr r3, 80064f8 <cppLoop+0x638>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f835 	bl	80002b8 <__aeabi_dsub>
 800624e:	4603      	mov	r3, r0
 8006250:	460c      	mov	r4, r1
 8006252:	4618      	mov	r0, r3
 8006254:	4621      	mov	r1, r4
 8006256:	f7fa fcdf 	bl	8000c18 <__aeabi_d2f>
 800625a:	4602      	mov	r2, r0
 800625c:	4baf      	ldr	r3, [pc, #700]	; (800651c <cppLoop+0x65c>)
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e02b      	b.n	80062ba <cppLoop+0x3fa>
			else if(selector == 1){
 8006262:	4bad      	ldr	r3, [pc, #692]	; (8006518 <cppLoop+0x658>)
 8006264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d113      	bne.n	8006294 <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 800626c:	4bac      	ldr	r3, [pc, #688]	; (8006520 <cppLoop+0x660>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa f981 	bl	8000578 <__aeabi_f2d>
 8006276:	a3a2      	add	r3, pc, #648	; (adr r3, 8006500 <cppLoop+0x640>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f81c 	bl	80002b8 <__aeabi_dsub>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	4618      	mov	r0, r3
 8006286:	4621      	mov	r1, r4
 8006288:	f7fa fcc6 	bl	8000c18 <__aeabi_d2f>
 800628c:	4602      	mov	r2, r0
 800628e:	4ba4      	ldr	r3, [pc, #656]	; (8006520 <cppLoop+0x660>)
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e012      	b.n	80062ba <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 8006294:	4ba3      	ldr	r3, [pc, #652]	; (8006524 <cppLoop+0x664>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa f96d 	bl	8000578 <__aeabi_f2d>
 800629e:	a39a      	add	r3, pc, #616	; (adr r3, 8006508 <cppLoop+0x648>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa f808 	bl	80002b8 <__aeabi_dsub>
 80062a8:	4603      	mov	r3, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	4618      	mov	r0, r3
 80062ae:	4621      	mov	r1, r4
 80062b0:	f7fa fcb2 	bl	8000c18 <__aeabi_d2f>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b9b      	ldr	r3, [pc, #620]	; (8006524 <cppLoop+0x664>)
 80062b8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80062ba:	2152      	movs	r1, #82	; 0x52
 80062bc:	4895      	ldr	r0, [pc, #596]	; (8006514 <cppLoop+0x654>)
 80062be:	f7fb fde9 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80062c2:	2200      	movs	r2, #0
 80062c4:	f04f 31ff 	mov.w	r1, #4294967295
 80062c8:	4892      	ldr	r0, [pc, #584]	; (8006514 <cppLoop+0x654>)
 80062ca:	f7fb fe9f 	bl	800200c <_ZN3LED2LREaa>
		break;
 80062ce:	f000 bebf 	b.w	8007050 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 80062d2:	488f      	ldr	r0, [pc, #572]	; (8006510 <cppLoop+0x650>)
 80062d4:	f7fb fd7a 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b04      	cmp	r3, #4
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d03e      	beq.n	8006366 <cppLoop+0x4a6>
			led.LR(-1, 1);
 80062e8:	2201      	movs	r2, #1
 80062ea:	f04f 31ff 	mov.w	r1, #4294967295
 80062ee:	4889      	ldr	r0, [pc, #548]	; (8006514 <cppLoop+0x654>)
 80062f0:	f7fb fe8c 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80062f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80062f8:	f001 f800 	bl	80072fc <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80062fc:	f107 031c 	add.w	r3, r7, #28
 8006300:	2201      	movs	r2, #1
 8006302:	4989      	ldr	r1, [pc, #548]	; (8006528 <cppLoop+0x668>)
 8006304:	4889      	ldr	r0, [pc, #548]	; (800652c <cppLoop+0x66c>)
 8006306:	f7fb f9a7 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800630a:	f107 0318 	add.w	r3, r7, #24
 800630e:	2201      	movs	r2, #1
 8006310:	4987      	ldr	r1, [pc, #540]	; (8006530 <cppLoop+0x670>)
 8006312:	4886      	ldr	r0, [pc, #536]	; (800652c <cppLoop+0x66c>)
 8006314:	f7fb f9a0 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	2201      	movs	r2, #1
 800631e:	4985      	ldr	r1, [pc, #532]	; (8006534 <cppLoop+0x674>)
 8006320:	4882      	ldr	r0, [pc, #520]	; (800652c <cppLoop+0x66c>)
 8006322:	f7fb f999 	bl	8001658 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8006326:	edd7 7a07 	vldr	s15, [r7, #28]
 800632a:	ed97 7a06 	vldr	s14, [r7, #24]
 800632e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006332:	eeb0 1a66 	vmov.f32	s2, s13
 8006336:	eef0 0a47 	vmov.f32	s1, s14
 800633a:	eeb0 0a67 	vmov.f32	s0, s15
 800633e:	487e      	ldr	r0, [pc, #504]	; (8006538 <cppLoop+0x678>)
 8006340:	f7fc fba6 	bl	8002a90 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4a75      	ldr	r2, [pc, #468]	; (800651c <cppLoop+0x65c>)
 8006348:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4a74      	ldr	r2, [pc, #464]	; (8006520 <cppLoop+0x660>)
 800634e:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4a74      	ldr	r2, [pc, #464]	; (8006524 <cppLoop+0x664>)
 8006354:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006356:	2200      	movs	r2, #0
 8006358:	f04f 31ff 	mov.w	r1, #4294967295
 800635c:	486d      	ldr	r0, [pc, #436]	; (8006514 <cppLoop+0x654>)
 800635e:	f7fb fe55 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006362:	f000 be75 	b.w	8007050 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 8006366:	486a      	ldr	r0, [pc, #424]	; (8006510 <cppLoop+0x650>)
 8006368:	f7fb fd30 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800636c:	4603      	mov	r3, r0
 800636e:	2b02      	cmp	r3, #2
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8669 	beq.w	8007050 <cppLoop+0x1190>
			led.LR(-1, 1);
 800637e:	2201      	movs	r2, #1
 8006380:	f04f 31ff 	mov.w	r1, #4294967295
 8006384:	4863      	ldr	r0, [pc, #396]	; (8006514 <cppLoop+0x654>)
 8006386:	f7fb fe41 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800638a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800638e:	f000 ffb5 	bl	80072fc <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006392:	2300      	movs	r3, #0
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4b61      	ldr	r3, [pc, #388]	; (800651c <cppLoop+0x65c>)
 8006398:	2201      	movs	r2, #1
 800639a:	4963      	ldr	r1, [pc, #396]	; (8006528 <cppLoop+0x668>)
 800639c:	4863      	ldr	r0, [pc, #396]	; (800652c <cppLoop+0x66c>)
 800639e:	f7fb f8f5 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80063a2:	2300      	movs	r3, #0
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4b5e      	ldr	r3, [pc, #376]	; (8006520 <cppLoop+0x660>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	4961      	ldr	r1, [pc, #388]	; (8006530 <cppLoop+0x670>)
 80063ac:	485f      	ldr	r0, [pc, #380]	; (800652c <cppLoop+0x66c>)
 80063ae:	f7fb f8ed 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	4b5b      	ldr	r3, [pc, #364]	; (8006524 <cppLoop+0x664>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	495e      	ldr	r1, [pc, #376]	; (8006534 <cppLoop+0x674>)
 80063bc:	485b      	ldr	r0, [pc, #364]	; (800652c <cppLoop+0x66c>)
 80063be:	f7fb f8e5 	bl	800158c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80063c2:	4b56      	ldr	r3, [pc, #344]	; (800651c <cppLoop+0x65c>)
 80063c4:	edd3 7a00 	vldr	s15, [r3]
 80063c8:	4b55      	ldr	r3, [pc, #340]	; (8006520 <cppLoop+0x660>)
 80063ca:	ed93 7a00 	vldr	s14, [r3]
 80063ce:	4b55      	ldr	r3, [pc, #340]	; (8006524 <cppLoop+0x664>)
 80063d0:	edd3 6a00 	vldr	s13, [r3]
 80063d4:	eeb0 1a66 	vmov.f32	s2, s13
 80063d8:	eef0 0a47 	vmov.f32	s1, s14
 80063dc:	eeb0 0a67 	vmov.f32	s0, s15
 80063e0:	4855      	ldr	r0, [pc, #340]	; (8006538 <cppLoop+0x678>)
 80063e2:	f7fc fb55 	bl	8002a90 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80063e6:	2200      	movs	r2, #0
 80063e8:	f04f 31ff 	mov.w	r1, #4294967295
 80063ec:	4849      	ldr	r0, [pc, #292]	; (8006514 <cppLoop+0x654>)
 80063ee:	f7fb fe0d 	bl	800200c <_ZN3LED2LREaa>
		break;
 80063f2:	f000 be2d 	b.w	8007050 <cppLoop+0x1190>

	case 1:
		led.fullColor('G');
 80063f6:	2147      	movs	r1, #71	; 0x47
 80063f8:	4846      	ldr	r0, [pc, #280]	; (8006514 <cppLoop+0x654>)
 80063fa:	f7fb fd4b 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80063fe:	f7fa fe4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006402:	2100      	movs	r1, #0
 8006404:	2000      	movs	r0, #0
 8006406:	f7fa fe5b 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800640a:	484c      	ldr	r0, [pc, #304]	; (800653c <cppLoop+0x67c>)
 800640c:	f7fa fe82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006410:	2101      	movs	r1, #1
 8006412:	2000      	movs	r0, #0
 8006414:	f7fa fe54 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006418:	4849      	ldr	r0, [pc, #292]	; (8006540 <cppLoop+0x680>)
 800641a:	f7fa fe7b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800641e:	483c      	ldr	r0, [pc, #240]	; (8006510 <cppLoop+0x650>)
 8006420:	f7fb fcd4 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006424:	4603      	mov	r3, r0
 8006426:	2b02      	cmp	r3, #2
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 860f 	beq.w	8007054 <cppLoop+0x1194>
			HAL_Delay(500);
 8006436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800643a:	f000 ff5f 	bl	80072fc <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 800643e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006442:	483d      	ldr	r0, [pc, #244]	; (8006538 <cppLoop+0x678>)
 8006444:	f7fc fb79 	bl	8002b3a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006448:	f04f 32ff 	mov.w	r2, #4294967295
 800644c:	2101      	movs	r1, #1
 800644e:	4831      	ldr	r0, [pc, #196]	; (8006514 <cppLoop+0x654>)
 8006450:	f7fb fddc 	bl	800200c <_ZN3LED2LREaa>

			line_trace.running();
 8006454:	4838      	ldr	r0, [pc, #224]	; (8006538 <cppLoop+0x678>)
 8006456:	f7fc fbef 	bl	8002c38 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	2100      	movs	r1, #0
 8006460:	482c      	ldr	r0, [pc, #176]	; (8006514 <cppLoop+0x654>)
 8006462:	f7fb fdd3 	bl	800200c <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006466:	f000 bdf5 	b.w	8007054 <cppLoop+0x1194>

	case 2:
		led.fullColor('B');
 800646a:	2142      	movs	r1, #66	; 0x42
 800646c:	4829      	ldr	r0, [pc, #164]	; (8006514 <cppLoop+0x654>)
 800646e:	f7fb fd11 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006472:	f7fa fe15 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006476:	2100      	movs	r1, #0
 8006478:	2000      	movs	r0, #0
 800647a:	f7fa fe21 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800647e:	4831      	ldr	r0, [pc, #196]	; (8006544 <cppLoop+0x684>)
 8006480:	f7fa fe48 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006484:	2101      	movs	r1, #1
 8006486:	2000      	movs	r0, #0
 8006488:	f7fa fe1a 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800648c:	482e      	ldr	r0, [pc, #184]	; (8006548 <cppLoop+0x688>)
 800648e:	f7fa fe41 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006492:	481f      	ldr	r0, [pc, #124]	; (8006510 <cppLoop+0x650>)
 8006494:	f7fb fc9a 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006498:	4603      	mov	r3, r0
 800649a:	2b02      	cmp	r3, #2
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 85d7 	beq.w	8007058 <cppLoop+0x1198>
			led.LR(-1, 1);
 80064aa:	2201      	movs	r2, #1
 80064ac:	f04f 31ff 	mov.w	r1, #4294967295
 80064b0:	4818      	ldr	r0, [pc, #96]	; (8006514 <cppLoop+0x654>)
 80064b2:	f7fb fdab 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80064b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80064ba:	f000 ff1f 	bl	80072fc <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80064be:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800654c <cppLoop+0x68c>
 80064c2:	4823      	ldr	r0, [pc, #140]	; (8006550 <cppLoop+0x690>)
 80064c4:	f7fd fb7c 	bl	8003bc0 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80064c8:	4821      	ldr	r0, [pc, #132]	; (8006550 <cppLoop+0x690>)
 80064ca:	f7fd fb89 	bl	8003be0 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80064ce:	f244 405c 	movw	r0, #17500	; 0x445c
 80064d2:	f000 ff13 	bl	80072fc <HAL_Delay>
			sys_ident.stop();
 80064d6:	481e      	ldr	r0, [pc, #120]	; (8006550 <cppLoop+0x690>)
 80064d8:	f7fd fb96 	bl	8003c08 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80064dc:	481c      	ldr	r0, [pc, #112]	; (8006550 <cppLoop+0x690>)
 80064de:	f7fd fafd 	bl	8003adc <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80064e2:	2200      	movs	r2, #0
 80064e4:	f04f 31ff 	mov.w	r1, #4294967295
 80064e8:	480a      	ldr	r0, [pc, #40]	; (8006514 <cppLoop+0x654>)
 80064ea:	f7fb fd8f 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 80064ee:	f000 bdb3 	b.w	8007058 <cppLoop+0x1198>
 80064f2:	bf00      	nop
 80064f4:	f3af 8000 	nop.w
 80064f8:	88e368f1 	.word	0x88e368f1
 80064fc:	3ee4f8b5 	.word	0x3ee4f8b5
 8006500:	eb1c432d 	.word	0xeb1c432d
 8006504:	3f1a36e2 	.word	0x3f1a36e2
 8006508:	a0b5ed8d 	.word	0xa0b5ed8d
 800650c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006510:	2000059c 	.word	0x2000059c
 8006514:	200005a8 	.word	0x200005a8
 8006518:	2003740e 	.word	0x2003740e
 800651c:	20037410 	.word	0x20037410
 8006520:	20037418 	.word	0x20037418
 8006524:	20037420 	.word	0x20037420
 8006528:	08018038 	.word	0x08018038
 800652c:	08018040 	.word	0x08018040
 8006530:	08018048 	.word	0x08018048
 8006534:	08018050 	.word	0x08018050
 8006538:	2001fa58 	.word	0x2001fa58
 800653c:	08018058 	.word	0x08018058
 8006540:	08018064 	.word	0x08018064
 8006544:	0801806c 	.word	0x0801806c
 8006548:	08018074 	.word	0x08018074
 800654c:	3e99999a 	.word	0x3e99999a
 8006550:	2001fad4 	.word	0x2001fad4

	case 3:
		led.fullColor('M');
 8006554:	214d      	movs	r1, #77	; 0x4d
 8006556:	48af      	ldr	r0, [pc, #700]	; (8006814 <cppLoop+0x954>)
 8006558:	f7fb fc9c 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800655c:	f7fa fda0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006560:	2100      	movs	r1, #0
 8006562:	2000      	movs	r0, #0
 8006564:	f7fa fdac 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006568:	48ab      	ldr	r0, [pc, #684]	; (8006818 <cppLoop+0x958>)
 800656a:	f7fa fdd3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800656e:	2101      	movs	r1, #1
 8006570:	2000      	movs	r0, #0
 8006572:	f7fa fda5 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006576:	48a9      	ldr	r0, [pc, #676]	; (800681c <cppLoop+0x95c>)
 8006578:	f7fa fdcc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800657c:	48a8      	ldr	r0, [pc, #672]	; (8006820 <cppLoop+0x960>)
 800657e:	f7fb fc25 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006582:	4603      	mov	r3, r0
 8006584:	2b02      	cmp	r3, #2
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 8564 	beq.w	800705c <cppLoop+0x119c>
			led.LR(-1, 1);
 8006594:	2201      	movs	r2, #1
 8006596:	f04f 31ff 	mov.w	r1, #4294967295
 800659a:	489e      	ldr	r0, [pc, #632]	; (8006814 <cppLoop+0x954>)
 800659c:	f7fb fd36 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80065a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065a4:	f000 feaa 	bl	80072fc <HAL_Delay>

			logger.start();
 80065a8:	489e      	ldr	r0, [pc, #632]	; (8006824 <cppLoop+0x964>)
 80065aa:	f7fc fd88 	bl	80030be <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 80065ae:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006828 <cppLoop+0x968>
 80065b2:	489e      	ldr	r0, [pc, #632]	; (800682c <cppLoop+0x96c>)
 80065b4:	f7fc fab2 	bl	8002b1c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80065b8:	489c      	ldr	r0, [pc, #624]	; (800682c <cppLoop+0x96c>)
 80065ba:	f7fc fb05 	bl	8002bc8 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 80065be:	f241 3088 	movw	r0, #5000	; 0x1388
 80065c2:	f000 fe9b 	bl	80072fc <HAL_Delay>

			logger.stop();
 80065c6:	4897      	ldr	r0, [pc, #604]	; (8006824 <cppLoop+0x964>)
 80065c8:	f7fc fd88 	bl	80030dc <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 80065cc:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006828 <cppLoop+0x968>
 80065d0:	4896      	ldr	r0, [pc, #600]	; (800682c <cppLoop+0x96c>)
 80065d2:	f7fc faa3 	bl	8002b1c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80065d6:	4895      	ldr	r0, [pc, #596]	; (800682c <cppLoop+0x96c>)
 80065d8:	f7fc fb10 	bl	8002bfc <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	2101      	movs	r1, #1
 80065e2:	488c      	ldr	r0, [pc, #560]	; (8006814 <cppLoop+0x954>)
 80065e4:	f7fb fd12 	bl	800200c <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 80065e8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ec:	2100      	movs	r1, #0
 80065ee:	4889      	ldr	r0, [pc, #548]	; (8006814 <cppLoop+0x954>)
 80065f0:	f7fb fd0c 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
 80065f4:	2200      	movs	r2, #0
 80065f6:	f04f 31ff 	mov.w	r1, #4294967295
 80065fa:	4886      	ldr	r0, [pc, #536]	; (8006814 <cppLoop+0x954>)
 80065fc:	f7fb fd06 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006600:	f000 bd2c 	b.w	800705c <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 8006604:	2159      	movs	r1, #89	; 0x59
 8006606:	4883      	ldr	r0, [pc, #524]	; (8006814 <cppLoop+0x954>)
 8006608:	f7fb fc44 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800660c:	f7fa fd48 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006610:	2100      	movs	r1, #0
 8006612:	2000      	movs	r0, #0
 8006614:	f7fa fd54 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006618:	4885      	ldr	r0, [pc, #532]	; (8006830 <cppLoop+0x970>)
 800661a:	f7fa fd7b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800661e:	2101      	movs	r1, #1
 8006620:	2000      	movs	r0, #0
 8006622:	f7fa fd4d 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006626:	487d      	ldr	r0, [pc, #500]	; (800681c <cppLoop+0x95c>)
 8006628:	f7fa fd74 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800662c:	487c      	ldr	r0, [pc, #496]	; (8006820 <cppLoop+0x960>)
 800662e:	f7fb fbcd 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006632:	4603      	mov	r3, r0
 8006634:	2b02      	cmp	r3, #2
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 850e 	beq.w	8007060 <cppLoop+0x11a0>
			led.LR(-1, 1);
 8006644:	2201      	movs	r2, #1
 8006646:	f04f 31ff 	mov.w	r1, #4294967295
 800664a:	4872      	ldr	r0, [pc, #456]	; (8006814 <cppLoop+0x954>)
 800664c:	f7fb fcde 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006654:	f000 fe52 	bl	80072fc <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006658:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006828 <cppLoop+0x968>
 800665c:	4873      	ldr	r0, [pc, #460]	; (800682c <cppLoop+0x96c>)
 800665e:	f7fc fa6c 	bl	8002b3a <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006662:	4874      	ldr	r0, [pc, #464]	; (8006834 <cppLoop+0x974>)
 8006664:	f7fd fc8d 	bl	8003f82 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006668:	4870      	ldr	r0, [pc, #448]	; (800682c <cppLoop+0x96c>)
 800666a:	f7fc faad 	bl	8002bc8 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 800666e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006672:	f000 fe43 	bl	80072fc <HAL_Delay>

			line_trace.stop();
 8006676:	486d      	ldr	r0, [pc, #436]	; (800682c <cppLoop+0x96c>)
 8006678:	f7fc fac0 	bl	8002bfc <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 800667c:	486d      	ldr	r0, [pc, #436]	; (8006834 <cppLoop+0x974>)
 800667e:	f7fd fc93 	bl	8003fa8 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006682:	2200      	movs	r2, #0
 8006684:	f04f 31ff 	mov.w	r1, #4294967295
 8006688:	4862      	ldr	r0, [pc, #392]	; (8006814 <cppLoop+0x954>)
 800668a:	f7fb fcbf 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 800668e:	f000 bce7 	b.w	8007060 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 8006692:	2143      	movs	r1, #67	; 0x43
 8006694:	485f      	ldr	r0, [pc, #380]	; (8006814 <cppLoop+0x954>)
 8006696:	f7fb fbfd 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800669a:	f7fa fd01 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800669e:	2100      	movs	r1, #0
 80066a0:	2000      	movs	r0, #0
 80066a2:	f7fa fd0d 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80066a6:	4864      	ldr	r0, [pc, #400]	; (8006838 <cppLoop+0x978>)
 80066a8:	f7fa fd34 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80066ac:	2101      	movs	r1, #1
 80066ae:	2000      	movs	r0, #0
 80066b0:	f7fa fd06 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80066b4:	4861      	ldr	r0, [pc, #388]	; (800683c <cppLoop+0x97c>)
 80066b6:	f7fa fd2d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80066ba:	4859      	ldr	r0, [pc, #356]	; (8006820 <cppLoop+0x960>)
 80066bc:	f7fb fb86 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 84c9 	beq.w	8007064 <cppLoop+0x11a4>
			led.LR(-1, 1);
 80066d2:	2201      	movs	r2, #1
 80066d4:	f04f 31ff 	mov.w	r1, #4294967295
 80066d8:	484e      	ldr	r0, [pc, #312]	; (8006814 <cppLoop+0x954>)
 80066da:	f7fb fc97 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80066de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066e2:	f000 fe0b 	bl	80072fc <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80066e6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006840 <cppLoop+0x980>
 80066ea:	4850      	ldr	r0, [pc, #320]	; (800682c <cppLoop+0x96c>)
 80066ec:	f7fc fa16 	bl	8002b1c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80066f0:	484e      	ldr	r0, [pc, #312]	; (800682c <cppLoop+0x96c>)
 80066f2:	f7fc fa69 	bl	8002bc8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80066f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066fa:	f000 fdff 	bl	80072fc <HAL_Delay>

			led.fullColor('R');
 80066fe:	2152      	movs	r1, #82	; 0x52
 8006700:	4844      	ldr	r0, [pc, #272]	; (8006814 <cppLoop+0x954>)
 8006702:	f7fb fbc7 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006706:	484f      	ldr	r0, [pc, #316]	; (8006844 <cppLoop+0x984>)
 8006708:	f7fa feb6 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800670c:	484d      	ldr	r0, [pc, #308]	; (8006844 <cppLoop+0x984>)
 800670e:	f7fa fe83 	bl	8001418 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006712:	f242 7010 	movw	r0, #10000	; 0x2710
 8006716:	f000 fdf1 	bl	80072fc <HAL_Delay>

			line_trace.stop();
 800671a:	4844      	ldr	r0, [pc, #272]	; (800682c <cppLoop+0x96c>)
 800671c:	f7fc fa6e 	bl	8002bfc <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006720:	4949      	ldr	r1, [pc, #292]	; (8006848 <cppLoop+0x988>)
 8006722:	484a      	ldr	r0, [pc, #296]	; (800684c <cppLoop+0x98c>)
 8006724:	f7fa febe 	bl	80014a4 <user_fopen>
			float d = encoder.getDistance();
 8006728:	4846      	ldr	r0, [pc, #280]	; (8006844 <cppLoop+0x984>)
 800672a:	f7fa fe57 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 800672e:	eef0 7a40 	vmov.f32	s15, s0
 8006732:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006736:	f107 0310 	add.w	r3, r7, #16
 800673a:	2201      	movs	r2, #1
 800673c:	4619      	mov	r1, r3
 800673e:	2001      	movs	r0, #1
 8006740:	f7fa fed2 	bl	80014e8 <sd_write_float>
			user_fclose();
 8006744:	f7fa fec0 	bl	80014c8 <user_fclose>

			led.LR(-1, 0);
 8006748:	2200      	movs	r2, #0
 800674a:	f04f 31ff 	mov.w	r1, #4294967295
 800674e:	4831      	ldr	r0, [pc, #196]	; (8006814 <cppLoop+0x954>)
 8006750:	f7fb fc5c 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006754:	f000 bc86 	b.w	8007064 <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 8006758:	2152      	movs	r1, #82	; 0x52
 800675a:	482e      	ldr	r0, [pc, #184]	; (8006814 <cppLoop+0x954>)
 800675c:	f7fb fb9a 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006760:	f7fa fc9e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006764:	2100      	movs	r1, #0
 8006766:	2000      	movs	r0, #0
 8006768:	f7fa fcaa 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 800676c:	4838      	ldr	r0, [pc, #224]	; (8006850 <cppLoop+0x990>)
 800676e:	f7fa fcd1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006772:	2101      	movs	r1, #1
 8006774:	2000      	movs	r0, #0
 8006776:	f7fa fca3 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800677a:	4836      	ldr	r0, [pc, #216]	; (8006854 <cppLoop+0x994>)
 800677c:	f7fa fcca 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006780:	4827      	ldr	r0, [pc, #156]	; (8006820 <cppLoop+0x960>)
 8006782:	f7fb fb23 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006786:	4603      	mov	r3, r0
 8006788:	2b02      	cmp	r3, #2
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8468 	beq.w	8007068 <cppLoop+0x11a8>
			HAL_Delay(500);
 8006798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800679c:	f000 fdae 	bl	80072fc <HAL_Delay>
			led.LR(-1, 1);
 80067a0:	2201      	movs	r2, #1
 80067a2:	f04f 31ff 	mov.w	r1, #4294967295
 80067a6:	481b      	ldr	r0, [pc, #108]	; (8006814 <cppLoop+0x954>)
 80067a8:	f7fb fc30 	bl	800200c <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 80067ac:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006858 <cppLoop+0x998>
 80067b0:	481e      	ldr	r0, [pc, #120]	; (800682c <cppLoop+0x96c>)
 80067b2:	f7fc f9b3 	bl	8002b1c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80067b6:	481d      	ldr	r0, [pc, #116]	; (800682c <cppLoop+0x96c>)
 80067b8:	f7fc fa06 	bl	8002bc8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80067bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067c0:	f000 fd9c 	bl	80072fc <HAL_Delay>

			led.fullColor('R');
 80067c4:	2152      	movs	r1, #82	; 0x52
 80067c6:	4813      	ldr	r0, [pc, #76]	; (8006814 <cppLoop+0x954>)
 80067c8:	f7fb fb64 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80067cc:	481d      	ldr	r0, [pc, #116]	; (8006844 <cppLoop+0x984>)
 80067ce:	f7fa fe53 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80067d2:	481c      	ldr	r0, [pc, #112]	; (8006844 <cppLoop+0x984>)
 80067d4:	f7fa fe20 	bl	8001418 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80067d8:	4820      	ldr	r0, [pc, #128]	; (800685c <cppLoop+0x99c>)
 80067da:	f7fc fe8b 	bl	80034f4 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80067de:	4811      	ldr	r0, [pc, #68]	; (8006824 <cppLoop+0x964>)
 80067e0:	f7fc fc6d 	bl	80030be <_ZN6Logger5startEv>

			HAL_Delay(3000);
 80067e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80067e8:	f000 fd88 	bl	80072fc <HAL_Delay>

			line_trace.stop();
 80067ec:	480f      	ldr	r0, [pc, #60]	; (800682c <cppLoop+0x96c>)
 80067ee:	f7fc fa05 	bl	8002bfc <_ZN9LineTrace4stopEv>
			logger.stop();
 80067f2:	480c      	ldr	r0, [pc, #48]	; (8006824 <cppLoop+0x964>)
 80067f4:	f7fc fc72 	bl	80030dc <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 80067f8:	4b19      	ldr	r3, [pc, #100]	; (8006860 <cppLoop+0x9a0>)
 80067fa:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <cppLoop+0x9a4>)
 80067fc:	491a      	ldr	r1, [pc, #104]	; (8006868 <cppLoop+0x9a8>)
 80067fe:	4809      	ldr	r0, [pc, #36]	; (8006824 <cppLoop+0x964>)
 8006800:	f7fc fc3a 	bl	8003078 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006804:	2200      	movs	r2, #0
 8006806:	f04f 31ff 	mov.w	r1, #4294967295
 800680a:	4802      	ldr	r0, [pc, #8]	; (8006814 <cppLoop+0x954>)
 800680c:	f7fb fbfe 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006810:	f000 bc2a 	b.w	8007068 <cppLoop+0x11a8>
 8006814:	200005a8 	.word	0x200005a8
 8006818:	0801807c 	.word	0x0801807c
 800681c:	08018084 	.word	0x08018084
 8006820:	2000059c 	.word	0x2000059c
 8006824:	200005cc 	.word	0x200005cc
 8006828:	3dcccccd 	.word	0x3dcccccd
 800682c:	2001fa58 	.word	0x2001fa58
 8006830:	0801808c 	.word	0x0801808c
 8006834:	2001f9ec 	.word	0x2001f9ec
 8006838:	08018098 	.word	0x08018098
 800683c:	080180a0 	.word	0x080180a0
 8006840:	00000000 	.word	0x00000000
 8006844:	2001f9d4 	.word	0x2001f9d4
 8006848:	080180ac 	.word	0x080180ac
 800684c:	080180b4 	.word	0x080180b4
 8006850:	080180c0 	.word	0x080180c0
 8006854:	08018074 	.word	0x08018074
 8006858:	3d8f5c29 	.word	0x3d8f5c29
 800685c:	2001fa28 	.word	0x2001fa28
 8006860:	080180cc 	.word	0x080180cc
 8006864:	080180d8 	.word	0x080180d8
 8006868:	080180e4 	.word	0x080180e4

	case 7:
		led.fullColor('G');
 800686c:	2147      	movs	r1, #71	; 0x47
 800686e:	48b4      	ldr	r0, [pc, #720]	; (8006b40 <cppLoop+0xc80>)
 8006870:	f7fb fb10 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006874:	f7fa fc14 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006878:	2100      	movs	r1, #0
 800687a:	2000      	movs	r0, #0
 800687c:	f7fa fc20 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006880:	48b0      	ldr	r0, [pc, #704]	; (8006b44 <cppLoop+0xc84>)
 8006882:	f7fa fc47 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006886:	2101      	movs	r1, #1
 8006888:	2000      	movs	r0, #0
 800688a:	f7fa fc19 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 800688e:	48ae      	ldr	r0, [pc, #696]	; (8006b48 <cppLoop+0xc88>)
 8006890:	f7fa fc40 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006894:	48ad      	ldr	r0, [pc, #692]	; (8006b4c <cppLoop+0xc8c>)
 8006896:	f7fb fa99 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800689a:	4603      	mov	r3, r0
 800689c:	2b02      	cmp	r3, #2
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 83e0 	beq.w	800706c <cppLoop+0x11ac>
			led.LR(-1, 1);
 80068ac:	2201      	movs	r2, #1
 80068ae:	f04f 31ff 	mov.w	r1, #4294967295
 80068b2:	48a3      	ldr	r0, [pc, #652]	; (8006b40 <cppLoop+0xc80>)
 80068b4:	f7fb fbaa 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80068b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068bc:	f000 fd1e 	bl	80072fc <HAL_Delay>

			led.fullColor('R');
 80068c0:	2152      	movs	r1, #82	; 0x52
 80068c2:	489f      	ldr	r0, [pc, #636]	; (8006b40 <cppLoop+0xc80>)
 80068c4:	f7fb fae6 	bl	8001e94 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 80068c8:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8006b50 <cppLoop+0xc90>
 80068cc:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8006b54 <cppLoop+0xc94>
 80068d0:	48a1      	ldr	r0, [pc, #644]	; (8006b58 <cppLoop+0xc98>)
 80068d2:	f7fd fae9 	bl	8003ea8 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 80068d6:	48a0      	ldr	r0, [pc, #640]	; (8006b58 <cppLoop+0xc98>)
 80068d8:	f7fd fb53 	bl	8003f82 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 80068dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068e0:	f000 fd0c 	bl	80072fc <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 80068e4:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8006b54 <cppLoop+0xc94>
 80068e8:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8006b54 <cppLoop+0xc94>
 80068ec:	489a      	ldr	r0, [pc, #616]	; (8006b58 <cppLoop+0xc98>)
 80068ee:	f7fd fadb 	bl	8003ea8 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 80068f2:	2064      	movs	r0, #100	; 0x64
 80068f4:	f000 fd02 	bl	80072fc <HAL_Delay>
			velocity_ctrl.stop();
 80068f8:	4897      	ldr	r0, [pc, #604]	; (8006b58 <cppLoop+0xc98>)
 80068fa:	f7fd fb55 	bl	8003fa8 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 80068fe:	2200      	movs	r2, #0
 8006900:	f04f 31ff 	mov.w	r1, #4294967295
 8006904:	488e      	ldr	r0, [pc, #568]	; (8006b40 <cppLoop+0xc80>)
 8006906:	f7fb fb81 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 800690a:	e3af      	b.n	800706c <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 800690c:	2142      	movs	r1, #66	; 0x42
 800690e:	488c      	ldr	r0, [pc, #560]	; (8006b40 <cppLoop+0xc80>)
 8006910:	f7fb fac0 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006914:	f7fa fbc4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006918:	2100      	movs	r1, #0
 800691a:	2000      	movs	r0, #0
 800691c:	f7fa fbd0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006920:	488e      	ldr	r0, [pc, #568]	; (8006b5c <cppLoop+0xc9c>)
 8006922:	f7fc fedd 	bl	80036e0 <_ZN13PathFollowing8getKxValEv>
 8006926:	ec51 0b10 	vmov	r0, r1, d0
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	4b8c      	ldr	r3, [pc, #560]	; (8006b60 <cppLoop+0xca0>)
 8006930:	f7f9 fe7a 	bl	8000628 <__aeabi_dmul>
 8006934:	4603      	mov	r3, r0
 8006936:	460c      	mov	r4, r1
 8006938:	461a      	mov	r2, r3
 800693a:	4623      	mov	r3, r4
 800693c:	4889      	ldr	r0, [pc, #548]	; (8006b64 <cppLoop+0xca4>)
 800693e:	f7fa fbe9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006942:	2101      	movs	r1, #1
 8006944:	2000      	movs	r0, #0
 8006946:	f7fa fbbb 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 800694a:	4884      	ldr	r0, [pc, #528]	; (8006b5c <cppLoop+0xc9c>)
 800694c:	f7fc fedc 	bl	8003708 <_ZN13PathFollowing8getKyValEv>
 8006950:	ec51 0b10 	vmov	r0, r1, d0
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	4b81      	ldr	r3, [pc, #516]	; (8006b60 <cppLoop+0xca0>)
 800695a:	f7f9 fe65 	bl	8000628 <__aeabi_dmul>
 800695e:	4603      	mov	r3, r0
 8006960:	460c      	mov	r4, r1
 8006962:	461d      	mov	r5, r3
 8006964:	4626      	mov	r6, r4
 8006966:	487d      	ldr	r0, [pc, #500]	; (8006b5c <cppLoop+0xc9c>)
 8006968:	f7fc fee2 	bl	8003730 <_ZN13PathFollowing8getKtValEv>
 800696c:	ec51 0b10 	vmov	r0, r1, d0
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	4b7a      	ldr	r3, [pc, #488]	; (8006b60 <cppLoop+0xca0>)
 8006976:	f7f9 fe57 	bl	8000628 <__aeabi_dmul>
 800697a:	4603      	mov	r3, r0
 800697c:	460c      	mov	r4, r1
 800697e:	e9cd 3400 	strd	r3, r4, [sp]
 8006982:	462a      	mov	r2, r5
 8006984:	4633      	mov	r3, r6
 8006986:	4878      	ldr	r0, [pc, #480]	; (8006b68 <cppLoop+0xca8>)
 8006988:	f7fa fbc4 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 800698c:	4b77      	ldr	r3, [pc, #476]	; (8006b6c <cppLoop+0xcac>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f3bf 8f5b 	dmb	ish
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d019      	beq.n	80069dc <cppLoop+0xb1c>
 80069a8:	4870      	ldr	r0, [pc, #448]	; (8006b6c <cppLoop+0xcac>)
 80069aa:	f00b f9a4 	bl	8011cf6 <__cxa_guard_acquire>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00e      	beq.n	80069dc <cppLoop+0xb1c>
 80069be:	4867      	ldr	r0, [pc, #412]	; (8006b5c <cppLoop+0xc9c>)
 80069c0:	f7fc fe8e 	bl	80036e0 <_ZN13PathFollowing8getKxValEv>
 80069c4:	ec54 3b10 	vmov	r3, r4, d0
 80069c8:	4618      	mov	r0, r3
 80069ca:	4621      	mov	r1, r4
 80069cc:	f7fa f924 	bl	8000c18 <__aeabi_d2f>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4b67      	ldr	r3, [pc, #412]	; (8006b70 <cppLoop+0xcb0>)
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	4865      	ldr	r0, [pc, #404]	; (8006b6c <cppLoop+0xcac>)
 80069d8:	f00b f999 	bl	8011d0e <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 80069dc:	4b65      	ldr	r3, [pc, #404]	; (8006b74 <cppLoop+0xcb4>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f3bf 8f5b 	dmb	ish
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d019      	beq.n	8006a2c <cppLoop+0xb6c>
 80069f8:	485e      	ldr	r0, [pc, #376]	; (8006b74 <cppLoop+0xcb4>)
 80069fa:	f00b f97c 	bl	8011cf6 <__cxa_guard_acquire>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00e      	beq.n	8006a2c <cppLoop+0xb6c>
 8006a0e:	4853      	ldr	r0, [pc, #332]	; (8006b5c <cppLoop+0xc9c>)
 8006a10:	f7fc fe7a 	bl	8003708 <_ZN13PathFollowing8getKyValEv>
 8006a14:	ec54 3b10 	vmov	r3, r4, d0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	f7fa f8fc 	bl	8000c18 <__aeabi_d2f>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b55      	ldr	r3, [pc, #340]	; (8006b78 <cppLoop+0xcb8>)
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	4853      	ldr	r0, [pc, #332]	; (8006b74 <cppLoop+0xcb4>)
 8006a28:	f00b f971 	bl	8011d0e <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006a2c:	4b53      	ldr	r3, [pc, #332]	; (8006b7c <cppLoop+0xcbc>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f3bf 8f5b 	dmb	ish
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d019      	beq.n	8006a7c <cppLoop+0xbbc>
 8006a48:	484c      	ldr	r0, [pc, #304]	; (8006b7c <cppLoop+0xcbc>)
 8006a4a:	f00b f954 	bl	8011cf6 <__cxa_guard_acquire>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2301      	movne	r3, #1
 8006a56:	2300      	moveq	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <cppLoop+0xbbc>
 8006a5e:	483f      	ldr	r0, [pc, #252]	; (8006b5c <cppLoop+0xc9c>)
 8006a60:	f7fc fe66 	bl	8003730 <_ZN13PathFollowing8getKtValEv>
 8006a64:	ec54 3b10 	vmov	r3, r4, d0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	f7fa f8d4 	bl	8000c18 <__aeabi_d2f>
 8006a70:	4602      	mov	r2, r0
 8006a72:	4b43      	ldr	r3, [pc, #268]	; (8006b80 <cppLoop+0xcc0>)
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	4841      	ldr	r0, [pc, #260]	; (8006b7c <cppLoop+0xcbc>)
 8006a78:	f00b f949 	bl	8011d0e <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006a7c:	4833      	ldr	r0, [pc, #204]	; (8006b4c <cppLoop+0xc8c>)
 8006a7e:	f7fb f9a5 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d021      	beq.n	8006ad6 <cppLoop+0xc16>
			led.LR(-1, 1);
 8006a92:	2201      	movs	r2, #1
 8006a94:	f04f 31ff 	mov.w	r1, #4294967295
 8006a98:	4829      	ldr	r0, [pc, #164]	; (8006b40 <cppLoop+0xc80>)
 8006a9a:	f7fb fab7 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006aa2:	f000 fc2b 	bl	80072fc <HAL_Delay>

			selector++;
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <cppLoop+0xcc4>)
 8006aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	b21a      	sxth	r2, r3
 8006ab4:	4b33      	ldr	r3, [pc, #204]	; (8006b84 <cppLoop+0xcc4>)
 8006ab6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006ab8:	4b32      	ldr	r3, [pc, #200]	; (8006b84 <cppLoop+0xcc4>)
 8006aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	dd02      	ble.n	8006ac8 <cppLoop+0xc08>
 8006ac2:	4b30      	ldr	r3, [pc, #192]	; (8006b84 <cppLoop+0xcc4>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f04f 31ff 	mov.w	r1, #4294967295
 8006ace:	481c      	ldr	r0, [pc, #112]	; (8006b40 <cppLoop+0xc80>)
 8006ad0:	f7fb fa9c 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006ad4:	e2cc      	b.n	8007070 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 8006ad6:	481d      	ldr	r0, [pc, #116]	; (8006b4c <cppLoop+0xc8c>)
 8006ad8:	f7fb f978 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	bf0c      	ite	eq
 8006ae2:	2301      	moveq	r3, #1
 8006ae4:	2300      	movne	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8084 	beq.w	8006bf6 <cppLoop+0xd36>
			led.LR(-1, 1);
 8006aee:	2201      	movs	r2, #1
 8006af0:	f04f 31ff 	mov.w	r1, #4294967295
 8006af4:	4812      	ldr	r0, [pc, #72]	; (8006b40 <cppLoop+0xc80>)
 8006af6:	f7fb fa89 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006afa:	2064      	movs	r0, #100	; 0x64
 8006afc:	f000 fbfe 	bl	80072fc <HAL_Delay>
			if(selector == 0){
 8006b00:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <cppLoop+0xcc4>)
 8006b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d13e      	bne.n	8006b88 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 8006b0a:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <cppLoop+0xcb0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7f9 fd32 	bl	8000578 <__aeabi_f2d>
 8006b14:	a308      	add	r3, pc, #32	; (adr r3, 8006b38 <cppLoop+0xc78>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fbcf 	bl	80002bc <__adddf3>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	460c      	mov	r4, r1
 8006b22:	4618      	mov	r0, r3
 8006b24:	4621      	mov	r1, r4
 8006b26:	f7fa f877 	bl	8000c18 <__aeabi_d2f>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <cppLoop+0xcb0>)
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e056      	b.n	8006be0 <cppLoop+0xd20>
 8006b32:	bf00      	nop
 8006b34:	f3af 8000 	nop.w
 8006b38:	88e368f1 	.word	0x88e368f1
 8006b3c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006b40:	200005a8 	.word	0x200005a8
 8006b44:	080180e8 	.word	0x080180e8
 8006b48:	080180f4 	.word	0x080180f4
 8006b4c:	2000059c 	.word	0x2000059c
 8006b50:	3fc8f5c3 	.word	0x3fc8f5c3
 8006b54:	00000000 	.word	0x00000000
 8006b58:	2001f9ec 	.word	0x2001f9ec
 8006b5c:	2001fce0 	.word	0x2001fce0
 8006b60:	408f4000 	.word	0x408f4000
 8006b64:	0801801c 	.word	0x0801801c
 8006b68:	08018028 	.word	0x08018028
 8006b6c:	2003742c 	.word	0x2003742c
 8006b70:	20037428 	.word	0x20037428
 8006b74:	20037434 	.word	0x20037434
 8006b78:	20037430 	.word	0x20037430
 8006b7c:	2003743c 	.word	0x2003743c
 8006b80:	20037438 	.word	0x20037438
 8006b84:	2003740e 	.word	0x2003740e
			else if(selector == 1){
 8006b88:	4ba3      	ldr	r3, [pc, #652]	; (8006e18 <cppLoop+0xf58>)
 8006b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d113      	bne.n	8006bba <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 8006b92:	4ba2      	ldr	r3, [pc, #648]	; (8006e1c <cppLoop+0xf5c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7f9 fcee 	bl	8000578 <__aeabi_f2d>
 8006b9c:	a39c      	add	r3, pc, #624	; (adr r3, 8006e10 <cppLoop+0xf50>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb8b 	bl	80002bc <__adddf3>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	4618      	mov	r0, r3
 8006bac:	4621      	mov	r1, r4
 8006bae:	f7fa f833 	bl	8000c18 <__aeabi_d2f>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b99      	ldr	r3, [pc, #612]	; (8006e1c <cppLoop+0xf5c>)
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e012      	b.n	8006be0 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 8006bba:	4b99      	ldr	r3, [pc, #612]	; (8006e20 <cppLoop+0xf60>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7f9 fcda 	bl	8000578 <__aeabi_f2d>
 8006bc4:	a392      	add	r3, pc, #584	; (adr r3, 8006e10 <cppLoop+0xf50>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7f9 fb77 	bl	80002bc <__adddf3>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	f7fa f81f 	bl	8000c18 <__aeabi_d2f>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b90      	ldr	r3, [pc, #576]	; (8006e20 <cppLoop+0xf60>)
 8006bde:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006be0:	2152      	movs	r1, #82	; 0x52
 8006be2:	4890      	ldr	r0, [pc, #576]	; (8006e24 <cppLoop+0xf64>)
 8006be4:	f7fb f956 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006be8:	2200      	movs	r2, #0
 8006bea:	f04f 31ff 	mov.w	r1, #4294967295
 8006bee:	488d      	ldr	r0, [pc, #564]	; (8006e24 <cppLoop+0xf64>)
 8006bf0:	f7fb fa0c 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006bf4:	e23c      	b.n	8007070 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 8006bf6:	488c      	ldr	r0, [pc, #560]	; (8006e28 <cppLoop+0xf68>)
 8006bf8:	f7fb f8e8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d058      	beq.n	8006cbe <cppLoop+0xdfe>
			led.LR(-1, 1);
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8006c12:	4884      	ldr	r0, [pc, #528]	; (8006e24 <cppLoop+0xf64>)
 8006c14:	f7fb f9fa 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006c18:	2064      	movs	r0, #100	; 0x64
 8006c1a:	f000 fb6f 	bl	80072fc <HAL_Delay>
			if(selector == 0){
 8006c1e:	4b7e      	ldr	r3, [pc, #504]	; (8006e18 <cppLoop+0xf58>)
 8006c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d113      	bne.n	8006c50 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 8006c28:	4b80      	ldr	r3, [pc, #512]	; (8006e2c <cppLoop+0xf6c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7f9 fca3 	bl	8000578 <__aeabi_f2d>
 8006c32:	a377      	add	r3, pc, #476	; (adr r3, 8006e10 <cppLoop+0xf50>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fb3e 	bl	80002b8 <__aeabi_dsub>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	4618      	mov	r0, r3
 8006c42:	4621      	mov	r1, r4
 8006c44:	f7f9 ffe8 	bl	8000c18 <__aeabi_d2f>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	4b78      	ldr	r3, [pc, #480]	; (8006e2c <cppLoop+0xf6c>)
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e02b      	b.n	8006ca8 <cppLoop+0xde8>
			else if(selector == 1){
 8006c50:	4b71      	ldr	r3, [pc, #452]	; (8006e18 <cppLoop+0xf58>)
 8006c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d113      	bne.n	8006c82 <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 8006c5a:	4b70      	ldr	r3, [pc, #448]	; (8006e1c <cppLoop+0xf5c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7f9 fc8a 	bl	8000578 <__aeabi_f2d>
 8006c64:	a36a      	add	r3, pc, #424	; (adr r3, 8006e10 <cppLoop+0xf50>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fb25 	bl	80002b8 <__aeabi_dsub>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	4618      	mov	r0, r3
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7f9 ffcf 	bl	8000c18 <__aeabi_d2f>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	4b67      	ldr	r3, [pc, #412]	; (8006e1c <cppLoop+0xf5c>)
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	e012      	b.n	8006ca8 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 8006c82:	4b67      	ldr	r3, [pc, #412]	; (8006e20 <cppLoop+0xf60>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7f9 fc76 	bl	8000578 <__aeabi_f2d>
 8006c8c:	a360      	add	r3, pc, #384	; (adr r3, 8006e10 <cppLoop+0xf50>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f7f9 fb11 	bl	80002b8 <__aeabi_dsub>
 8006c96:	4603      	mov	r3, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f7f9 ffbb 	bl	8000c18 <__aeabi_d2f>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b5e      	ldr	r3, [pc, #376]	; (8006e20 <cppLoop+0xf60>)
 8006ca6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006ca8:	2152      	movs	r1, #82	; 0x52
 8006caa:	485e      	ldr	r0, [pc, #376]	; (8006e24 <cppLoop+0xf64>)
 8006cac:	f7fb f8f2 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb6:	485b      	ldr	r0, [pc, #364]	; (8006e24 <cppLoop+0xf64>)
 8006cb8:	f7fb f9a8 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006cbc:	e1d8      	b.n	8007070 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 8006cbe:	485a      	ldr	r0, [pc, #360]	; (8006e28 <cppLoop+0xf68>)
 8006cc0:	f7fb f884 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	bf0c      	ite	eq
 8006cca:	2301      	moveq	r3, #1
 8006ccc:	2300      	movne	r3, #0
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d048      	beq.n	8006d66 <cppLoop+0xea6>
			led.LR(-1, 1);
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cda:	4852      	ldr	r0, [pc, #328]	; (8006e24 <cppLoop+0xf64>)
 8006cdc:	f7fb f996 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006ce0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006ce4:	f000 fb0a 	bl	80072fc <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	2201      	movs	r2, #1
 8006cee:	4950      	ldr	r1, [pc, #320]	; (8006e30 <cppLoop+0xf70>)
 8006cf0:	4850      	ldr	r0, [pc, #320]	; (8006e34 <cppLoop+0xf74>)
 8006cf2:	f7fa fcb1 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	494e      	ldr	r1, [pc, #312]	; (8006e38 <cppLoop+0xf78>)
 8006cfe:	484d      	ldr	r0, [pc, #308]	; (8006e34 <cppLoop+0xf74>)
 8006d00:	f7fa fcaa 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8006d04:	1d3b      	adds	r3, r7, #4
 8006d06:	2201      	movs	r2, #1
 8006d08:	494c      	ldr	r1, [pc, #304]	; (8006e3c <cppLoop+0xf7c>)
 8006d0a:	484a      	ldr	r0, [pc, #296]	; (8006e34 <cppLoop+0xf74>)
 8006d0c:	f7fa fca4 	bl	8001658 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7f9 fc30 	bl	8000578 <__aeabi_f2d>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7f9 fc2a 	bl	8000578 <__aeabi_f2d>
 8006d24:	4680      	mov	r8, r0
 8006d26:	4689      	mov	r9, r1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fc24 	bl	8000578 <__aeabi_f2d>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	ec43 2b12 	vmov	d2, r2, r3
 8006d38:	ec49 8b11 	vmov	d1, r8, r9
 8006d3c:	ec45 4b10 	vmov	d0, r4, r5
 8006d40:	483f      	ldr	r0, [pc, #252]	; (8006e40 <cppLoop+0xf80>)
 8006d42:	f7fc fcad 	bl	80036a0 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a38      	ldr	r2, [pc, #224]	; (8006e2c <cppLoop+0xf6c>)
 8006d4a:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4a33      	ldr	r2, [pc, #204]	; (8006e1c <cppLoop+0xf5c>)
 8006d50:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a32      	ldr	r2, [pc, #200]	; (8006e20 <cppLoop+0xf60>)
 8006d56:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d5e:	4831      	ldr	r0, [pc, #196]	; (8006e24 <cppLoop+0xf64>)
 8006d60:	f7fb f954 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006d64:	e184      	b.n	8007070 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 8006d66:	4830      	ldr	r0, [pc, #192]	; (8006e28 <cppLoop+0xf68>)
 8006d68:	f7fb f830 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	bf0c      	ite	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	2300      	movne	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8179 	beq.w	8007070 <cppLoop+0x11b0>
			led.LR(-1, 1);
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f04f 31ff 	mov.w	r1, #4294967295
 8006d84:	4827      	ldr	r0, [pc, #156]	; (8006e24 <cppLoop+0xf64>)
 8006d86:	f7fb f941 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006d8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d8e:	f000 fab5 	bl	80072fc <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8006d92:	2300      	movs	r3, #0
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <cppLoop+0xf6c>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	4925      	ldr	r1, [pc, #148]	; (8006e30 <cppLoop+0xf70>)
 8006d9c:	4825      	ldr	r0, [pc, #148]	; (8006e34 <cppLoop+0xf74>)
 8006d9e:	f7fa fbf5 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8006da2:	2300      	movs	r3, #0
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <cppLoop+0xf5c>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	4923      	ldr	r1, [pc, #140]	; (8006e38 <cppLoop+0xf78>)
 8006dac:	4821      	ldr	r0, [pc, #132]	; (8006e34 <cppLoop+0xf74>)
 8006dae:	f7fa fbed 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8006db2:	2300      	movs	r3, #0
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <cppLoop+0xf60>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	4920      	ldr	r1, [pc, #128]	; (8006e3c <cppLoop+0xf7c>)
 8006dbc:	481d      	ldr	r0, [pc, #116]	; (8006e34 <cppLoop+0xf74>)
 8006dbe:	f7fa fbe5 	bl	800158c <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <cppLoop+0xf6c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7f9 fbd6 	bl	8000578 <__aeabi_f2d>
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <cppLoop+0xf5c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7f9 fbcf 	bl	8000578 <__aeabi_f2d>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4689      	mov	r9, r1
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <cppLoop+0xf60>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7f9 fbc8 	bl	8000578 <__aeabi_f2d>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	ec43 2b12 	vmov	d2, r2, r3
 8006df0:	ec49 8b11 	vmov	d1, r8, r9
 8006df4:	ec45 4b10 	vmov	d0, r4, r5
 8006df8:	4811      	ldr	r0, [pc, #68]	; (8006e40 <cppLoop+0xf80>)
 8006dfa:	f7fc fc51 	bl	80036a0 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f04f 31ff 	mov.w	r1, #4294967295
 8006e04:	4807      	ldr	r0, [pc, #28]	; (8006e24 <cppLoop+0xf64>)
 8006e06:	f7fb f901 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006e0a:	e131      	b.n	8007070 <cppLoop+0x11b0>
 8006e0c:	f3af 8000 	nop.w
 8006e10:	88e368f1 	.word	0x88e368f1
 8006e14:	3ee4f8b5 	.word	0x3ee4f8b5
 8006e18:	2003740e 	.word	0x2003740e
 8006e1c:	20037430 	.word	0x20037430
 8006e20:	20037438 	.word	0x20037438
 8006e24:	200005a8 	.word	0x200005a8
 8006e28:	2000059c 	.word	0x2000059c
 8006e2c:	20037428 	.word	0x20037428
 8006e30:	080180fc 	.word	0x080180fc
 8006e34:	08018040 	.word	0x08018040
 8006e38:	08018104 	.word	0x08018104
 8006e3c:	0801810c 	.word	0x0801810c
 8006e40:	2001fce0 	.word	0x2001fce0

	case 9:
		led.fullColor('M');
 8006e44:	214d      	movs	r1, #77	; 0x4d
 8006e46:	4898      	ldr	r0, [pc, #608]	; (80070a8 <cppLoop+0x11e8>)
 8006e48:	f7fb f824 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e4c:	f7fa f928 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e50:	2100      	movs	r1, #0
 8006e52:	2000      	movs	r0, #0
 8006e54:	f7fa f934 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006e58:	4894      	ldr	r0, [pc, #592]	; (80070ac <cppLoop+0x11ec>)
 8006e5a:	f7fa f95b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e5e:	2101      	movs	r1, #1
 8006e60:	2000      	movs	r0, #0
 8006e62:	f7fa f92d 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006e66:	4892      	ldr	r0, [pc, #584]	; (80070b0 <cppLoop+0x11f0>)
 8006e68:	f7fa f954 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006e6c:	4891      	ldr	r0, [pc, #580]	; (80070b4 <cppLoop+0x11f4>)
 8006e6e:	f7fa ffad 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80f8 	beq.w	8007074 <cppLoop+0x11b4>
			HAL_Delay(1500);
 8006e84:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006e88:	f000 fa38 	bl	80072fc <HAL_Delay>
			led.LR(-1, 1);
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e92:	4885      	ldr	r0, [pc, #532]	; (80070a8 <cppLoop+0x11e8>)
 8006e94:	f7fb f8ba 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 8006e98:	4887      	ldr	r0, [pc, #540]	; (80070b8 <cppLoop+0x11f8>)
 8006e9a:	f7fc f910 	bl	80030be <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006e9e:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8007090 <cppLoop+0x11d0>
 8006ea2:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8007098 <cppLoop+0x11d8>
 8006ea6:	4885      	ldr	r0, [pc, #532]	; (80070bc <cppLoop+0x11fc>)
 8006ea8:	f7fc f99a 	bl	80031e0 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006eb0:	f000 fa24 	bl	80072fc <HAL_Delay>

			logger.stop();
 8006eb4:	4880      	ldr	r0, [pc, #512]	; (80070b8 <cppLoop+0x11f8>)
 8006eb6:	f7fc f911 	bl	80030dc <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8006eba:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80070a0 <cppLoop+0x11e0>
 8006ebe:	ed9f 0b78 	vldr	d0, [pc, #480]	; 80070a0 <cppLoop+0x11e0>
 8006ec2:	487e      	ldr	r0, [pc, #504]	; (80070bc <cppLoop+0x11fc>)
 8006ec4:	f7fc f98c 	bl	80031e0 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8006ec8:	4a7d      	ldr	r2, [pc, #500]	; (80070c0 <cppLoop+0x1200>)
 8006eca:	497e      	ldr	r1, [pc, #504]	; (80070c4 <cppLoop+0x1204>)
 8006ecc:	487a      	ldr	r0, [pc, #488]	; (80070b8 <cppLoop+0x11f8>)
 8006ece:	f7fc f8a9 	bl	8003024 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed8:	4873      	ldr	r0, [pc, #460]	; (80070a8 <cppLoop+0x11e8>)
 8006eda:	f7fb f897 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006ede:	e0c9      	b.n	8007074 <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8006ee0:	2159      	movs	r1, #89	; 0x59
 8006ee2:	4871      	ldr	r0, [pc, #452]	; (80070a8 <cppLoop+0x11e8>)
 8006ee4:	f7fa ffd6 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ee8:	f7fa f8da 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006eec:	2100      	movs	r1, #0
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7fa f8e6 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006ef4:	4874      	ldr	r0, [pc, #464]	; (80070c8 <cppLoop+0x1208>)
 8006ef6:	f7fa f90d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006efa:	2101      	movs	r1, #1
 8006efc:	2000      	movs	r0, #0
 8006efe:	f7fa f8df 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006f02:	4872      	ldr	r0, [pc, #456]	; (80070cc <cppLoop+0x120c>)
 8006f04:	f7fa f906 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006f08:	486a      	ldr	r0, [pc, #424]	; (80070b4 <cppLoop+0x11f4>)
 8006f0a:	f7fa ff5f 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	bf0c      	ite	eq
 8006f14:	2301      	moveq	r3, #1
 8006f16:	2300      	movne	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80ac 	beq.w	8007078 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8006f20:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006f24:	f000 f9ea 	bl	80072fc <HAL_Delay>
			led.LR(-1, 1);
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f2e:	485e      	ldr	r0, [pc, #376]	; (80070a8 <cppLoop+0x11e8>)
 8006f30:	f7fb f86c 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 8006f34:	4860      	ldr	r0, [pc, #384]	; (80070b8 <cppLoop+0x11f8>)
 8006f36:	f7fc f8c2 	bl	80030be <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006f3a:	4865      	ldr	r0, [pc, #404]	; (80070d0 <cppLoop+0x1210>)
 8006f3c:	f7fd f821 	bl	8003f82 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8006f40:	eddf 0a64 	vldr	s1, [pc, #400]	; 80070d4 <cppLoop+0x1214>
 8006f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f48:	4861      	ldr	r0, [pc, #388]	; (80070d0 <cppLoop+0x1210>)
 8006f4a:	f7fc ffad 	bl	8003ea8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f52:	f000 f9d3 	bl	80072fc <HAL_Delay>

			logger.stop();
 8006f56:	4858      	ldr	r0, [pc, #352]	; (80070b8 <cppLoop+0x11f8>)
 8006f58:	f7fc f8c0 	bl	80030dc <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006f5c:	485c      	ldr	r0, [pc, #368]	; (80070d0 <cppLoop+0x1210>)
 8006f5e:	f7fd f823 	bl	8003fa8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006f62:	4a5d      	ldr	r2, [pc, #372]	; (80070d8 <cppLoop+0x1218>)
 8006f64:	4957      	ldr	r1, [pc, #348]	; (80070c4 <cppLoop+0x1204>)
 8006f66:	4854      	ldr	r0, [pc, #336]	; (80070b8 <cppLoop+0x11f8>)
 8006f68:	f7fc f85c 	bl	8003024 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f72:	484d      	ldr	r0, [pc, #308]	; (80070a8 <cppLoop+0x11e8>)
 8006f74:	f7fb f84a 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006f78:	e07e      	b.n	8007078 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 8006f7a:	2143      	movs	r1, #67	; 0x43
 8006f7c:	484a      	ldr	r0, [pc, #296]	; (80070a8 <cppLoop+0x11e8>)
 8006f7e:	f7fa ff89 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006f82:	f7fa f88d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006f86:	2100      	movs	r1, #0
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f7fa f899 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 8006f8e:	4853      	ldr	r0, [pc, #332]	; (80070dc <cppLoop+0x121c>)
 8006f90:	f7fa f8c0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006f94:	2101      	movs	r1, #1
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7fa f892 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006f9c:	4850      	ldr	r0, [pc, #320]	; (80070e0 <cppLoop+0x1220>)
 8006f9e:	f7fa f8b9 	bl	8001114 <lcd_printf>

		break;
 8006fa2:	e06a      	b.n	800707a <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 8006fa4:	2152      	movs	r1, #82	; 0x52
 8006fa6:	4840      	ldr	r0, [pc, #256]	; (80070a8 <cppLoop+0x11e8>)
 8006fa8:	f7fa ff74 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006fac:	f7fa f878 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f7fa f884 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8006fb8:	484a      	ldr	r0, [pc, #296]	; (80070e4 <cppLoop+0x1224>)
 8006fba:	f7fa f8ab 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f7fa f87d 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006fc6:	4846      	ldr	r0, [pc, #280]	; (80070e0 <cppLoop+0x1220>)
 8006fc8:	f7fa f8a4 	bl	8001114 <lcd_printf>

		break;
 8006fcc:	e055      	b.n	800707a <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 8006fce:	2147      	movs	r1, #71	; 0x47
 8006fd0:	4835      	ldr	r0, [pc, #212]	; (80070a8 <cppLoop+0x11e8>)
 8006fd2:	f7fa ff5f 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006fd6:	f7fa f863 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7fa f86f 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8006fe2:	4841      	ldr	r0, [pc, #260]	; (80070e8 <cppLoop+0x1228>)
 8006fe4:	f7fa f896 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006fe8:	2101      	movs	r1, #1
 8006fea:	2000      	movs	r0, #0
 8006fec:	f7fa f868 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006ff0:	483b      	ldr	r0, [pc, #236]	; (80070e0 <cppLoop+0x1220>)
 8006ff2:	f7fa f88f 	bl	8001114 <lcd_printf>

		break;
 8006ff6:	e040      	b.n	800707a <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8006ff8:	2142      	movs	r1, #66	; 0x42
 8006ffa:	482b      	ldr	r0, [pc, #172]	; (80070a8 <cppLoop+0x11e8>)
 8006ffc:	f7fa ff4a 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007000:	f7fa f84e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007004:	2100      	movs	r1, #0
 8007006:	2000      	movs	r0, #0
 8007008:	f7fa f85a 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 800700c:	4837      	ldr	r0, [pc, #220]	; (80070ec <cppLoop+0x122c>)
 800700e:	f7fa f881 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007012:	2101      	movs	r1, #1
 8007014:	2000      	movs	r0, #0
 8007016:	f7fa f853 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800701a:	4831      	ldr	r0, [pc, #196]	; (80070e0 <cppLoop+0x1220>)
 800701c:	f7fa f87a 	bl	8001114 <lcd_printf>

		break;
 8007020:	e02b      	b.n	800707a <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 8007022:	214d      	movs	r1, #77	; 0x4d
 8007024:	4820      	ldr	r0, [pc, #128]	; (80070a8 <cppLoop+0x11e8>)
 8007026:	f7fa ff35 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800702a:	f7fa f839 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800702e:	2100      	movs	r1, #0
 8007030:	2000      	movs	r0, #0
 8007032:	f7fa f845 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8007036:	482e      	ldr	r0, [pc, #184]	; (80070f0 <cppLoop+0x1230>)
 8007038:	f7fa f86c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800703c:	2101      	movs	r1, #1
 800703e:	2000      	movs	r0, #0
 8007040:	f7fa f83e 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007044:	4826      	ldr	r0, [pc, #152]	; (80070e0 <cppLoop+0x1220>)
 8007046:	f7fa f865 	bl	8001114 <lcd_printf>

		break;
 800704a:	e016      	b.n	800707a <cppLoop+0x11ba>

	default:
		break;
 800704c:	bf00      	nop
 800704e:	e014      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007050:	bf00      	nop
 8007052:	e012      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007054:	bf00      	nop
 8007056:	e010      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007058:	bf00      	nop
 800705a:	e00e      	b.n	800707a <cppLoop+0x11ba>
		break;
 800705c:	bf00      	nop
 800705e:	e00c      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007060:	bf00      	nop
 8007062:	e00a      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007064:	bf00      	nop
 8007066:	e008      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007068:	bf00      	nop
 800706a:	e006      	b.n	800707a <cppLoop+0x11ba>
		break;
 800706c:	bf00      	nop
 800706e:	e004      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007070:	bf00      	nop
 8007072:	e002      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007074:	bf00      	nop
 8007076:	e000      	b.n	800707a <cppLoop+0x11ba>
		break;
 8007078:	bf00      	nop

	}

	HAL_Delay(30);
 800707a:	201e      	movs	r0, #30
 800707c:	f000 f93e 	bl	80072fc <HAL_Delay>

}
 8007080:	bf00      	nop
 8007082:	3724      	adds	r7, #36	; 0x24
 8007084:	46bd      	mov	sp, r7
 8007086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800708a:	bf00      	nop
 800708c:	f3af 8000 	nop.w
 8007090:	33333333 	.word	0x33333333
 8007094:	bfd33333 	.word	0xbfd33333
 8007098:	33333333 	.word	0x33333333
 800709c:	3fd33333 	.word	0x3fd33333
	...
 80070a8:	200005a8 	.word	0x200005a8
 80070ac:	08018114 	.word	0x08018114
 80070b0:	08018074 	.word	0x08018074
 80070b4:	2000059c 	.word	0x2000059c
 80070b8:	200005cc 	.word	0x200005cc
 80070bc:	200005a4 	.word	0x200005a4
 80070c0:	0801811c 	.word	0x0801811c
 80070c4:	08018128 	.word	0x08018128
 80070c8:	08018134 	.word	0x08018134
 80070cc:	08018138 	.word	0x08018138
 80070d0:	2001f9ec 	.word	0x2001f9ec
 80070d4:	00000000 	.word	0x00000000
 80070d8:	08018144 	.word	0x08018144
 80070dc:	08018150 	.word	0x08018150
 80070e0:	0801815c 	.word	0x0801815c
 80070e4:	08018168 	.word	0x08018168
 80070e8:	08018174 	.word	0x08018174
 80070ec:	08018180 	.word	0x08018180
 80070f0:	0801818c 	.word	0x0801818c

080070f4 <_Z41__static_initialization_and_destruction_0ii>:
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af04      	add	r7, sp, #16
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d13b      	bne.n	800717c <_Z41__static_initialization_and_destruction_0ii+0x88>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800710a:	4293      	cmp	r3, r2
 800710c:	d136      	bne.n	800717c <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 800710e:	481d      	ldr	r0, [pc, #116]	; (8007184 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007110:	f7fa ffb4 	bl	800207c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8007114:	481c      	ldr	r0, [pc, #112]	; (8007188 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007116:	f7fc fbeb 	bl	80038f0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800711a:	481c      	ldr	r0, [pc, #112]	; (800718c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800711c:	f7fa fe4a 	bl	8001db4 <_ZN8JoyStickC1Ev>
Motor motor;
 8007120:	481b      	ldr	r0, [pc, #108]	; (8007190 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007122:	f7fb ffea 	bl	80030fa <_ZN5MotorC1Ev>
IMU imu;
 8007126:	481b      	ldr	r0, [pc, #108]	; (8007194 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007128:	f7fa fc48 	bl	80019bc <_ZN3IMUC1Ev>
Logger logger;
 800712c:	481a      	ldr	r0, [pc, #104]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800712e:	f7fb fe50 	bl	8002dd2 <_ZN6LoggerC1Ev>
Encoder encoder;
 8007132:	481a      	ldr	r0, [pc, #104]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007134:	f7fa f80e 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007138:	4b16      	ldr	r3, [pc, #88]	; (8007194 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800713c:	4914      	ldr	r1, [pc, #80]	; (8007190 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800713e:	4818      	ldr	r0, [pc, #96]	; (80071a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007140:	f7fc fd86 	bl	8003c50 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8007144:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007146:	4a13      	ldr	r2, [pc, #76]	; (8007194 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007148:	4914      	ldr	r1, [pc, #80]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800714a:	4816      	ldr	r0, [pc, #88]	; (80071a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800714c:	f7fc f8ba 	bl	80032c4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 8007150:	4b11      	ldr	r3, [pc, #68]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007156:	9302      	str	r3, [sp, #8]
 8007158:	4b10      	ldr	r3, [pc, #64]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007162:	4a08      	ldr	r2, [pc, #32]	; (8007184 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007164:	490a      	ldr	r1, [pc, #40]	; (8007190 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007166:	4810      	ldr	r0, [pc, #64]	; (80071a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007168:	f7fb fae0 	bl	800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 800716c:	4a08      	ldr	r2, [pc, #32]	; (8007190 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800716e:	490a      	ldr	r1, [pc, #40]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007170:	480e      	ldr	r0, [pc, #56]	; (80071ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007172:	f7fc fc69 	bl	8003a48 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8007176:	480e      	ldr	r0, [pc, #56]	; (80071b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007178:	f7fc f9da 	bl	8003530 <_ZN13PathFollowingC1Ev>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	2000029c 	.word	0x2000029c
 8007188:	20000594 	.word	0x20000594
 800718c:	2000059c 	.word	0x2000059c
 8007190:	200005a4 	.word	0x200005a4
 8007194:	200005b8 	.word	0x200005b8
 8007198:	200005cc 	.word	0x200005cc
 800719c:	2001f9d4 	.word	0x2001f9d4
 80071a0:	2001f9ec 	.word	0x2001f9ec
 80071a4:	2001fa28 	.word	0x2001fa28
 80071a8:	2001fa58 	.word	0x2001fa58
 80071ac:	2001fad4 	.word	0x2001fad4
 80071b0:	2001fce0 	.word	0x2001fce0

080071b4 <_GLOBAL__sub_I_line_sensor>:
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80071bc:	2001      	movs	r0, #1
 80071be:	f7ff ff99 	bl	80070f4 <_Z41__static_initialization_and_destruction_0ii>
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80071c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80071c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80071ca:	e003      	b.n	80071d4 <LoopCopyDataInit>

080071cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80071ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80071d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80071d2:	3104      	adds	r1, #4

080071d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80071d4:	480b      	ldr	r0, [pc, #44]	; (8007204 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80071d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80071da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80071dc:	d3f6      	bcc.n	80071cc <CopyDataInit>
  ldr  r2, =_sbss
 80071de:	4a0b      	ldr	r2, [pc, #44]	; (800720c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80071e0:	e002      	b.n	80071e8 <LoopFillZerobss>

080071e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80071e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80071e4:	f842 3b04 	str.w	r3, [r2], #4

080071e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80071ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071ec:	d3f9      	bcc.n	80071e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80071ee:	f7fe fced 	bl	8005bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071f2:	f00b fded 	bl	8012dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071f6:	f7fc ffb3 	bl	8004160 <main>
  bx  lr    
 80071fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80071fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007200:	08018790 	.word	0x08018790
  ldr  r0, =_sdata
 8007204:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007208:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800720c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007210:	2003be20 	.word	0x2003be20

08007214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007214:	e7fe      	b.n	8007214 <ADC_IRQHandler>
	...

08007218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <HAL_Init+0x40>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <HAL_Init+0x40>)
 8007222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <HAL_Init+0x40>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <HAL_Init+0x40>)
 800722e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007234:	4b08      	ldr	r3, [pc, #32]	; (8007258 <HAL_Init+0x40>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a07      	ldr	r2, [pc, #28]	; (8007258 <HAL_Init+0x40>)
 800723a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007240:	2003      	movs	r0, #3
 8007242:	f000 fd51 	bl	8007ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007246:	2000      	movs	r0, #0
 8007248:	f000 f808 	bl	800725c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800724c:	f7fd feac 	bl	8004fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40023c00 	.word	0x40023c00

0800725c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007264:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_InitTick+0x54>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <HAL_InitTick+0x58>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	4619      	mov	r1, r3
 800726e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007272:	fbb3 f3f1 	udiv	r3, r3, r1
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fd69 	bl	8007d52 <HAL_SYSTICK_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e00e      	b.n	80072a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b0f      	cmp	r3, #15
 800728e:	d80a      	bhi.n	80072a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007290:	2200      	movs	r2, #0
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	f000 fd31 	bl	8007cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800729c:	4a06      	ldr	r2, [pc, #24]	; (80072b8 <HAL_InitTick+0x5c>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e000      	b.n	80072a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000000 	.word	0x20000000
 80072b4:	20000008 	.word	0x20000008
 80072b8:	20000004 	.word	0x20000004

080072bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <HAL_IncTick+0x20>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <HAL_IncTick+0x24>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4413      	add	r3, r2
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <HAL_IncTick+0x24>)
 80072ce:	6013      	str	r3, [r2, #0]
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000008 	.word	0x20000008
 80072e0:	20039da8 	.word	0x20039da8

080072e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  return uwTick;
 80072e8:	4b03      	ldr	r3, [pc, #12]	; (80072f8 <HAL_GetTick+0x14>)
 80072ea:	681b      	ldr	r3, [r3, #0]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20039da8 	.word	0x20039da8

080072fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007304:	f7ff ffee 	bl	80072e4 <HAL_GetTick>
 8007308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d005      	beq.n	8007322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <HAL_Delay+0x40>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007322:	bf00      	nop
 8007324:	f7ff ffde 	bl	80072e4 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	429a      	cmp	r2, r3
 8007332:	d8f7      	bhi.n	8007324 <HAL_Delay+0x28>
  {
  }
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20000008 	.word	0x20000008

08007340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e033      	b.n	80073be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fd fe4a 	bl	8004ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b00      	cmp	r3, #0
 800737c:	d118      	bne.n	80073b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007386:	f023 0302 	bic.w	r3, r3, #2
 800738a:	f043 0202 	orr.w	r2, r3, #2
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa5a 	bl	800784c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	f043 0201 	orr.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
 80073ae:	e001      	b.n	80073b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_ADC_Start_DMA+0x1e>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0cc      	b.n	8007580 <HAL_ADC_Start_DMA+0x1b8>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d018      	beq.n	800742e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800740c:	4b5e      	ldr	r3, [pc, #376]	; (8007588 <HAL_ADC_Start_DMA+0x1c0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a5e      	ldr	r2, [pc, #376]	; (800758c <HAL_ADC_Start_DMA+0x1c4>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	0c9a      	lsrs	r2, r3, #18
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007420:	e002      	b.n	8007428 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3b01      	subs	r3, #1
 8007426:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f9      	bne.n	8007422 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	f040 80a0 	bne.w	800757e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007446:	f023 0301 	bic.w	r3, r3, #1
 800744a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007468:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747c:	d106      	bne.n	800748c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	f023 0206 	bic.w	r2, r3, #6
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	645a      	str	r2, [r3, #68]	; 0x44
 800748a:	e002      	b.n	8007492 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800749a:	4b3d      	ldr	r3, [pc, #244]	; (8007590 <HAL_ADC_Start_DMA+0x1c8>)
 800749c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	4a3c      	ldr	r2, [pc, #240]	; (8007594 <HAL_ADC_Start_DMA+0x1cc>)
 80074a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	4a3b      	ldr	r2, [pc, #236]	; (8007598 <HAL_ADC_Start_DMA+0x1d0>)
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	4a3a      	ldr	r2, [pc, #232]	; (800759c <HAL_ADC_Start_DMA+0x1d4>)
 80074b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80074be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80074ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	334c      	adds	r3, #76	; 0x4c
 80074ea:	4619      	mov	r1, r3
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f000 fcea 	bl	8007ec8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f003 031f 	and.w	r3, r3, #31
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d12a      	bne.n	8007556 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a26      	ldr	r2, [pc, #152]	; (80075a0 <HAL_ADC_Start_DMA+0x1d8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d015      	beq.n	8007536 <HAL_ADC_Start_DMA+0x16e>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a25      	ldr	r2, [pc, #148]	; (80075a4 <HAL_ADC_Start_DMA+0x1dc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d105      	bne.n	8007520 <HAL_ADC_Start_DMA+0x158>
 8007514:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <HAL_ADC_Start_DMA+0x1c8>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a20      	ldr	r2, [pc, #128]	; (80075a8 <HAL_ADC_Start_DMA+0x1e0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d129      	bne.n	800757e <HAL_ADC_Start_DMA+0x1b6>
 800752a:	4b19      	ldr	r3, [pc, #100]	; (8007590 <HAL_ADC_Start_DMA+0x1c8>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d823      	bhi.n	800757e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11c      	bne.n	800757e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	e013      	b.n	800757e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a11      	ldr	r2, [pc, #68]	; (80075a0 <HAL_ADC_Start_DMA+0x1d8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d10e      	bne.n	800757e <HAL_ADC_Start_DMA+0x1b6>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d107      	bne.n	800757e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800757c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20000000 	.word	0x20000000
 800758c:	431bde83 	.word	0x431bde83
 8007590:	40012300 	.word	0x40012300
 8007594:	08007a45 	.word	0x08007a45
 8007598:	08007aff 	.word	0x08007aff
 800759c:	08007b1b 	.word	0x08007b1b
 80075a0:	40012000 	.word	0x40012000
 80075a4:	40012100 	.word	0x40012100
 80075a8:	40012200 	.word	0x40012200

080075ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x1c>
 8007600:	2302      	movs	r3, #2
 8007602:	e113      	b.n	800782c <HAL_ADC_ConfigChannel+0x244>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b09      	cmp	r3, #9
 8007612:	d925      	bls.n	8007660 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68d9      	ldr	r1, [r3, #12]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	3b1e      	subs	r3, #30
 800762a:	2207      	movs	r2, #7
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	43da      	mvns	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	400a      	ands	r2, r1
 8007638:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68d9      	ldr	r1, [r3, #12]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	4618      	mov	r0, r3
 800764c:	4603      	mov	r3, r0
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	4403      	add	r3, r0
 8007652:	3b1e      	subs	r3, #30
 8007654:	409a      	lsls	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	60da      	str	r2, [r3, #12]
 800765e:	e022      	b.n	80076a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6919      	ldr	r1, [r3, #16]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	2207      	movs	r2, #7
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	43da      	mvns	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	400a      	ands	r2, r1
 8007682:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6919      	ldr	r1, [r3, #16]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	4618      	mov	r0, r3
 8007696:	4603      	mov	r3, r0
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	4403      	add	r3, r0
 800769c:	409a      	lsls	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d824      	bhi.n	80076f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	3b05      	subs	r3, #5
 80076c0:	221f      	movs	r2, #31
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	43da      	mvns	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	400a      	ands	r2, r1
 80076ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	4618      	mov	r0, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	3b05      	subs	r3, #5
 80076ea:	fa00 f203 	lsl.w	r2, r0, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	635a      	str	r2, [r3, #52]	; 0x34
 80076f6:	e04c      	b.n	8007792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	d824      	bhi.n	800774a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	3b23      	subs	r3, #35	; 0x23
 8007712:	221f      	movs	r2, #31
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	43da      	mvns	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	400a      	ands	r2, r1
 8007720:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	4618      	mov	r0, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	3b23      	subs	r3, #35	; 0x23
 800773c:	fa00 f203 	lsl.w	r2, r0, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
 8007748:	e023      	b.n	8007792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	3b41      	subs	r3, #65	; 0x41
 800775c:	221f      	movs	r2, #31
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	43da      	mvns	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	400a      	ands	r2, r1
 800776a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	4618      	mov	r0, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	3b41      	subs	r3, #65	; 0x41
 8007786:	fa00 f203 	lsl.w	r2, r0, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007792:	4b29      	ldr	r3, [pc, #164]	; (8007838 <HAL_ADC_ConfigChannel+0x250>)
 8007794:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a28      	ldr	r2, [pc, #160]	; (800783c <HAL_ADC_ConfigChannel+0x254>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10f      	bne.n	80077c0 <HAL_ADC_ConfigChannel+0x1d8>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b12      	cmp	r3, #18
 80077a6:	d10b      	bne.n	80077c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1d      	ldr	r2, [pc, #116]	; (800783c <HAL_ADC_ConfigChannel+0x254>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d12b      	bne.n	8007822 <HAL_ADC_ConfigChannel+0x23a>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <HAL_ADC_ConfigChannel+0x258>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <HAL_ADC_ConfigChannel+0x1f4>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b11      	cmp	r3, #17
 80077da:	d122      	bne.n	8007822 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a11      	ldr	r2, [pc, #68]	; (8007840 <HAL_ADC_ConfigChannel+0x258>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d111      	bne.n	8007822 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80077fe:	4b11      	ldr	r3, [pc, #68]	; (8007844 <HAL_ADC_ConfigChannel+0x25c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a11      	ldr	r2, [pc, #68]	; (8007848 <HAL_ADC_ConfigChannel+0x260>)
 8007804:	fba2 2303 	umull	r2, r3, r2, r3
 8007808:	0c9a      	lsrs	r2, r3, #18
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007814:	e002      	b.n	800781c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3b01      	subs	r3, #1
 800781a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f9      	bne.n	8007816 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40012300 	.word	0x40012300
 800783c:	40012000 	.word	0x40012000
 8007840:	10000012 	.word	0x10000012
 8007844:	20000000 	.word	0x20000000
 8007848:	431bde83 	.word	0x431bde83

0800784c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007854:	4b79      	ldr	r3, [pc, #484]	; (8007a3c <ADC_Init+0x1f0>)
 8007856:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	431a      	orrs	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6859      	ldr	r1, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	021a      	lsls	r2, r3, #8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80078a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6859      	ldr	r1, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6899      	ldr	r1, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	4a58      	ldr	r2, [pc, #352]	; (8007a40 <ADC_Init+0x1f4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d022      	beq.n	800792a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6899      	ldr	r1, [r3, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6899      	ldr	r1, [r3, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	e00f      	b.n	800794a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007948:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0202 	bic.w	r2, r2, #2
 8007958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6899      	ldr	r1, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7e1b      	ldrb	r3, [r3, #24]
 8007964:	005a      	lsls	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01b      	beq.n	80079b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007986:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007996:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6859      	ldr	r1, [r3, #4]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	3b01      	subs	r3, #1
 80079a4:	035a      	lsls	r2, r3, #13
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
 80079ae:	e007      	b.n	80079c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	3b01      	subs	r3, #1
 80079dc:	051a      	lsls	r2, r3, #20
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80079f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6899      	ldr	r1, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a02:	025a      	lsls	r2, r3, #9
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6899      	ldr	r1, [r3, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	029a      	lsls	r2, r3, #10
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	609a      	str	r2, [r3, #8]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40012300 	.word	0x40012300
 8007a40:	0f000001 	.word	0x0f000001

08007a44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d13c      	bne.n	8007ad8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d12b      	bne.n	8007ad0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d127      	bne.n	8007ad0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d119      	bne.n	8007ad0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0220 	bic.w	r2, r2, #32
 8007aaa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7ff fd6b 	bl	80075ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007ad6:	e00e      	b.n	8007af6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fd75 	bl	80075d4 <HAL_ADC_ErrorCallback>
}
 8007aea:	e004      	b.n	8007af6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff fd57 	bl	80075c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2240      	movs	r2, #64	; 0x40
 8007b2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b32:	f043 0204 	orr.w	r2, r3, #4
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff fd4a 	bl	80075d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <__NVIC_SetPriorityGrouping>:
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <__NVIC_SetPriorityGrouping+0x44>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b64:	4013      	ands	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b7a:	4a04      	ldr	r2, [pc, #16]	; (8007b8c <__NVIC_SetPriorityGrouping+0x44>)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	60d3      	str	r3, [r2, #12]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	e000ed00 	.word	0xe000ed00

08007b90 <__NVIC_GetPriorityGrouping>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	0a1b      	lsrs	r3, r3, #8
 8007b9a:	f003 0307 	and.w	r3, r3, #7
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <__NVIC_EnableIRQ>:
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	db0b      	blt.n	8007bd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	f003 021f 	and.w	r2, r3, #31
 8007bc4:	4907      	ldr	r1, [pc, #28]	; (8007be4 <__NVIC_EnableIRQ+0x38>)
 8007bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	2001      	movs	r0, #1
 8007bce:	fa00 f202 	lsl.w	r2, r0, r2
 8007bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	e000e100 	.word	0xe000e100

08007be8 <__NVIC_SetPriority>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db0a      	blt.n	8007c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	490c      	ldr	r1, [pc, #48]	; (8007c34 <__NVIC_SetPriority+0x4c>)
 8007c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c06:	0112      	lsls	r2, r2, #4
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c10:	e00a      	b.n	8007c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	4908      	ldr	r1, [pc, #32]	; (8007c38 <__NVIC_SetPriority+0x50>)
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	3b04      	subs	r3, #4
 8007c20:	0112      	lsls	r2, r2, #4
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	440b      	add	r3, r1
 8007c26:	761a      	strb	r2, [r3, #24]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	e000e100 	.word	0xe000e100
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <NVIC_EncodePriority>:
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b089      	sub	sp, #36	; 0x24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f1c3 0307 	rsb	r3, r3, #7
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	bf28      	it	cs
 8007c5a:	2304      	movcs	r3, #4
 8007c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	3304      	adds	r3, #4
 8007c62:	2b06      	cmp	r3, #6
 8007c64:	d902      	bls.n	8007c6c <NVIC_EncodePriority+0x30>
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	3b03      	subs	r3, #3
 8007c6a:	e000      	b.n	8007c6e <NVIC_EncodePriority+0x32>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43da      	mvns	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	401a      	ands	r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c84:	f04f 31ff 	mov.w	r1, #4294967295
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8e:	43d9      	mvns	r1, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c94:	4313      	orrs	r3, r2
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3724      	adds	r7, #36	; 0x24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <SysTick_Config>:
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cb4:	d301      	bcc.n	8007cba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e00f      	b.n	8007cda <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cba:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <SysTick_Config+0x40>)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cc2:	210f      	movs	r1, #15
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	f7ff ff8e 	bl	8007be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <SysTick_Config+0x40>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cd2:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <SysTick_Config+0x40>)
 8007cd4:	2207      	movs	r2, #7
 8007cd6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	e000e010 	.word	0xe000e010

08007ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff ff29 	bl	8007b48 <__NVIC_SetPriorityGrouping>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4603      	mov	r3, r0
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d10:	f7ff ff3e 	bl	8007b90 <__NVIC_GetPriorityGrouping>
 8007d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	6978      	ldr	r0, [r7, #20]
 8007d1c:	f7ff ff8e 	bl	8007c3c <NVIC_EncodePriority>
 8007d20:	4602      	mov	r2, r0
 8007d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff ff5d 	bl	8007be8 <__NVIC_SetPriority>
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff ff31 	bl	8007bac <__NVIC_EnableIRQ>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff ffa2 	bl	8007ca4 <SysTick_Config>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d78:	f7ff fab4 	bl	80072e4 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e099      	b.n	8007ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da8:	e00f      	b.n	8007dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007daa:	f7ff fa9b 	bl	80072e4 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	d908      	bls.n	8007dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e078      	b.n	8007ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e8      	bne.n	8007daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4b38      	ldr	r3, [pc, #224]	; (8007ec4 <HAL_DMA_Init+0x158>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d107      	bne.n	8007e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d117      	bne.n	8007e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00e      	beq.n	8007e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fa9d 	bl	80083b0 <DMA_CheckFifoParam>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2240      	movs	r2, #64	; 0x40
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e016      	b.n	8007ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa54 	bl	8008344 <DMA_CalcBaseAndBitshift>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea4:	223f      	movs	r2, #63	; 0x3f
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	f010803f 	.word	0xf010803f

08007ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_DMA_Start_IT+0x26>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e040      	b.n	8007f70 <HAL_DMA_Start_IT+0xa8>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d12f      	bne.n	8007f62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f9e6 	bl	80082e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f20:	223f      	movs	r2, #63	; 0x3f
 8007f22:	409a      	lsls	r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0216 	orr.w	r2, r2, #22
 8007f36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0208 	orr.w	r2, r2, #8
 8007f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e005      	b.n	8007f6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d004      	beq.n	8007f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e00c      	b.n	8007fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fc8:	4b92      	ldr	r3, [pc, #584]	; (8008214 <HAL_DMA_IRQHandler+0x258>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a92      	ldr	r2, [pc, #584]	; (8008218 <HAL_DMA_IRQHandler+0x25c>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	0a9b      	lsrs	r3, r3, #10
 8007fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	409a      	lsls	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01a      	beq.n	8008028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0204 	bic.w	r2, r2, #4
 800800e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008014:	2208      	movs	r2, #8
 8008016:	409a      	lsls	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	f043 0201 	orr.w	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	2201      	movs	r2, #1
 800802e:	409a      	lsls	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d012      	beq.n	800805e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	2201      	movs	r2, #1
 800804c:	409a      	lsls	r2, r3
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008056:	f043 0202 	orr.w	r2, r3, #2
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	2204      	movs	r2, #4
 8008064:	409a      	lsls	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4013      	ands	r3, r2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d012      	beq.n	8008094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	2204      	movs	r2, #4
 8008082:	409a      	lsls	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	f043 0204 	orr.w	r2, r3, #4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008098:	2210      	movs	r2, #16
 800809a:	409a      	lsls	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d043      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d03c      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b6:	2210      	movs	r2, #16
 80080b8:	409a      	lsls	r2, r3
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d018      	beq.n	80080fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d108      	bne.n	80080ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d024      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
 80080ea:	e01f      	b.n	800812c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01b      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
 80080fc:	e016      	b.n	800812c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0208 	bic.w	r2, r2, #8
 800811a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008130:	2220      	movs	r2, #32
 8008132:	409a      	lsls	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4013      	ands	r3, r2
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 808e 	beq.w	800825a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8086 	beq.w	800825a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008152:	2220      	movs	r2, #32
 8008154:	409a      	lsls	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b05      	cmp	r3, #5
 8008164:	d136      	bne.n	80081d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0216 	bic.w	r2, r2, #22
 8008174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695a      	ldr	r2, [r3, #20]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <HAL_DMA_IRQHandler+0x1da>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0208 	bic.w	r2, r2, #8
 80081a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081aa:	223f      	movs	r2, #63	; 0x3f
 80081ac:	409a      	lsls	r2, r3
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d07d      	beq.n	80082c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
        }
        return;
 80081d2:	e078      	b.n	80082c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01c      	beq.n	800821c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d108      	bne.n	8008202 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d030      	beq.n	800825a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
 8008200:	e02b      	b.n	800825a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d027      	beq.n	800825a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
 8008212:	e022      	b.n	800825a <HAL_DMA_IRQHandler+0x29e>
 8008214:	20000000 	.word	0x20000000
 8008218:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10f      	bne.n	800824a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0210 	bic.w	r2, r2, #16
 8008238:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	2b00      	cmp	r3, #0
 8008260:	d032      	beq.n	80082c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d022      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2205      	movs	r2, #5
 8008272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0201 	bic.w	r2, r2, #1
 8008284:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3301      	adds	r3, #1
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	429a      	cmp	r2, r3
 8008290:	d307      	bcc.n	80082a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f2      	bne.n	8008286 <HAL_DMA_IRQHandler+0x2ca>
 80082a0:	e000      	b.n	80082a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80082a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
 80082c4:	e000      	b.n	80082c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80082c6:	bf00      	nop
    }
  }
}
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop

080082d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d108      	bne.n	8008328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008326:	e007      	b.n	8008338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	3b10      	subs	r3, #16
 8008354:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <DMA_CalcBaseAndBitshift+0x64>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	091b      	lsrs	r3, r3, #4
 800835c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800835e:	4a13      	ldr	r2, [pc, #76]	; (80083ac <DMA_CalcBaseAndBitshift+0x68>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d909      	bls.n	8008386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	659a      	str	r2, [r3, #88]	; 0x58
 8008384:	e007      	b.n	8008396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	aaaaaaab 	.word	0xaaaaaaab
 80083ac:	080181cc 	.word	0x080181cc

080083b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11f      	bne.n	800840a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d855      	bhi.n	800847c <DMA_CheckFifoParam+0xcc>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <DMA_CheckFifoParam+0x28>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	080083e9 	.word	0x080083e9
 80083e4:	0800847d 	.word	0x0800847d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d045      	beq.n	8008480 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f8:	e042      	b.n	8008480 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008402:	d13f      	bne.n	8008484 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008408:	e03c      	b.n	8008484 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008412:	d121      	bne.n	8008458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d836      	bhi.n	8008488 <DMA_CheckFifoParam+0xd8>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <DMA_CheckFifoParam+0x70>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008431 	.word	0x08008431
 8008424:	08008437 	.word	0x08008437
 8008428:	08008431 	.word	0x08008431
 800842c:	08008449 	.word	0x08008449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	e02f      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d024      	beq.n	800848c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008446:	e021      	b.n	800848c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008450:	d11e      	bne.n	8008490 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008456:	e01b      	b.n	8008490 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d902      	bls.n	8008464 <DMA_CheckFifoParam+0xb4>
 800845e:	2b03      	cmp	r3, #3
 8008460:	d003      	beq.n	800846a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008462:	e018      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
      break;
 8008468:	e015      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]
      break;
 800847a:	e00b      	b.n	8008494 <DMA_CheckFifoParam+0xe4>
      break;
 800847c:	bf00      	nop
 800847e:	e00a      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 8008480:	bf00      	nop
 8008482:	e008      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 8008484:	bf00      	nop
 8008486:	e006      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 8008488:	bf00      	nop
 800848a:	e004      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 800848c:	bf00      	nop
 800848e:	e002      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;   
 8008490:	bf00      	nop
 8008492:	e000      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 8008494:	bf00      	nop
    }
  } 
  
  return status; 
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b089      	sub	sp, #36	; 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
 80084be:	e177      	b.n	80087b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084c0:	2201      	movs	r2, #1
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4013      	ands	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	429a      	cmp	r2, r3
 80084da:	f040 8166 	bne.w	80087aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d00b      	beq.n	80084fe <HAL_GPIO_Init+0x5a>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d007      	beq.n	80084fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084f2:	2b11      	cmp	r3, #17
 80084f4:	d003      	beq.n	80084fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b12      	cmp	r3, #18
 80084fc:	d130      	bne.n	8008560 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	2203      	movs	r2, #3
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4013      	ands	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	4313      	orrs	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008534:	2201      	movs	r2, #1
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	43db      	mvns	r3, r3
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4013      	ands	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	091b      	lsrs	r3, r3, #4
 800854a:	f003 0201 	and.w	r2, r3, #1
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	4313      	orrs	r3, r2
 8008558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	2203      	movs	r2, #3
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	4013      	ands	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4313      	orrs	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d003      	beq.n	80085a0 <HAL_GPIO_Init+0xfc>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	2b12      	cmp	r3, #18
 800859e:	d123      	bne.n	80085e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	08da      	lsrs	r2, r3, #3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3208      	adds	r2, #8
 80085a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	220f      	movs	r2, #15
 80085b8:	fa02 f303 	lsl.w	r3, r2, r3
 80085bc:	43db      	mvns	r3, r3
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	4013      	ands	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	08da      	lsrs	r2, r3, #3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3208      	adds	r2, #8
 80085e2:	69b9      	ldr	r1, [r7, #24]
 80085e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	2203      	movs	r2, #3
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	43db      	mvns	r3, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f003 0203 	and.w	r2, r3, #3
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	4313      	orrs	r3, r2
 8008614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80c0 	beq.w	80087aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	4b65      	ldr	r3, [pc, #404]	; (80087c4 <HAL_GPIO_Init+0x320>)
 8008630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008632:	4a64      	ldr	r2, [pc, #400]	; (80087c4 <HAL_GPIO_Init+0x320>)
 8008634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008638:	6453      	str	r3, [r2, #68]	; 0x44
 800863a:	4b62      	ldr	r3, [pc, #392]	; (80087c4 <HAL_GPIO_Init+0x320>)
 800863c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008646:	4a60      	ldr	r2, [pc, #384]	; (80087c8 <HAL_GPIO_Init+0x324>)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	3302      	adds	r3, #2
 800864e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	220f      	movs	r2, #15
 800865e:	fa02 f303 	lsl.w	r3, r2, r3
 8008662:	43db      	mvns	r3, r3
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	4013      	ands	r3, r2
 8008668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a57      	ldr	r2, [pc, #348]	; (80087cc <HAL_GPIO_Init+0x328>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d037      	beq.n	80086e2 <HAL_GPIO_Init+0x23e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a56      	ldr	r2, [pc, #344]	; (80087d0 <HAL_GPIO_Init+0x32c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d031      	beq.n	80086de <HAL_GPIO_Init+0x23a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a55      	ldr	r2, [pc, #340]	; (80087d4 <HAL_GPIO_Init+0x330>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d02b      	beq.n	80086da <HAL_GPIO_Init+0x236>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a54      	ldr	r2, [pc, #336]	; (80087d8 <HAL_GPIO_Init+0x334>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d025      	beq.n	80086d6 <HAL_GPIO_Init+0x232>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a53      	ldr	r2, [pc, #332]	; (80087dc <HAL_GPIO_Init+0x338>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01f      	beq.n	80086d2 <HAL_GPIO_Init+0x22e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a52      	ldr	r2, [pc, #328]	; (80087e0 <HAL_GPIO_Init+0x33c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d019      	beq.n	80086ce <HAL_GPIO_Init+0x22a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a51      	ldr	r2, [pc, #324]	; (80087e4 <HAL_GPIO_Init+0x340>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d013      	beq.n	80086ca <HAL_GPIO_Init+0x226>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a50      	ldr	r2, [pc, #320]	; (80087e8 <HAL_GPIO_Init+0x344>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00d      	beq.n	80086c6 <HAL_GPIO_Init+0x222>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a4f      	ldr	r2, [pc, #316]	; (80087ec <HAL_GPIO_Init+0x348>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <HAL_GPIO_Init+0x21e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a4e      	ldr	r2, [pc, #312]	; (80087f0 <HAL_GPIO_Init+0x34c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d101      	bne.n	80086be <HAL_GPIO_Init+0x21a>
 80086ba:	2309      	movs	r3, #9
 80086bc:	e012      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086be:	230a      	movs	r3, #10
 80086c0:	e010      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086c2:	2308      	movs	r3, #8
 80086c4:	e00e      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086c6:	2307      	movs	r3, #7
 80086c8:	e00c      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086ca:	2306      	movs	r3, #6
 80086cc:	e00a      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086ce:	2305      	movs	r3, #5
 80086d0:	e008      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086d2:	2304      	movs	r3, #4
 80086d4:	e006      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086d6:	2303      	movs	r3, #3
 80086d8:	e004      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086da:	2302      	movs	r3, #2
 80086dc:	e002      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <HAL_GPIO_Init+0x240>
 80086e2:	2300      	movs	r3, #0
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	f002 0203 	and.w	r2, r2, #3
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	4093      	lsls	r3, r2
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086f4:	4934      	ldr	r1, [pc, #208]	; (80087c8 <HAL_GPIO_Init+0x324>)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	089b      	lsrs	r3, r3, #2
 80086fa:	3302      	adds	r3, #2
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008702:	4b3c      	ldr	r3, [pc, #240]	; (80087f4 <HAL_GPIO_Init+0x350>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	43db      	mvns	r3, r3
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	4013      	ands	r3, r2
 8008710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008726:	4a33      	ldr	r2, [pc, #204]	; (80087f4 <HAL_GPIO_Init+0x350>)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800872c:	4b31      	ldr	r3, [pc, #196]	; (80087f4 <HAL_GPIO_Init+0x350>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	43db      	mvns	r3, r3
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	4013      	ands	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008750:	4a28      	ldr	r2, [pc, #160]	; (80087f4 <HAL_GPIO_Init+0x350>)
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008756:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <HAL_GPIO_Init+0x350>)
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	43db      	mvns	r3, r3
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	4013      	ands	r3, r2
 8008764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <HAL_GPIO_Init+0x350>)
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008780:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <HAL_GPIO_Init+0x350>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	43db      	mvns	r3, r3
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	4013      	ands	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80087a4:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <HAL_GPIO_Init+0x350>)
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	3301      	adds	r3, #1
 80087ae:	61fb      	str	r3, [r7, #28]
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2b0f      	cmp	r3, #15
 80087b4:	f67f ae84 	bls.w	80084c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087b8:	bf00      	nop
 80087ba:	3724      	adds	r7, #36	; 0x24
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	40023800 	.word	0x40023800
 80087c8:	40013800 	.word	0x40013800
 80087cc:	40020000 	.word	0x40020000
 80087d0:	40020400 	.word	0x40020400
 80087d4:	40020800 	.word	0x40020800
 80087d8:	40020c00 	.word	0x40020c00
 80087dc:	40021000 	.word	0x40021000
 80087e0:	40021400 	.word	0x40021400
 80087e4:	40021800 	.word	0x40021800
 80087e8:	40021c00 	.word	0x40021c00
 80087ec:	40022000 	.word	0x40022000
 80087f0:	40022400 	.word	0x40022400
 80087f4:	40013c00 	.word	0x40013c00

080087f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	887b      	ldrh	r3, [r7, #2]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	e001      	b.n	800881a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	807b      	strh	r3, [r7, #2]
 8008834:	4613      	mov	r3, r2
 8008836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008838:	787b      	ldrb	r3, [r7, #1]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800883e:	887a      	ldrh	r2, [r7, #2]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008844:	e003      	b.n	800884e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008846:	887b      	ldrh	r3, [r7, #2]
 8008848:	041a      	lsls	r2, r3, #16
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	619a      	str	r2, [r3, #24]
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008868:	695a      	ldr	r2, [r3, #20]
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	4013      	ands	r3, r2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d006      	beq.n	8008880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008872:	4a05      	ldr	r2, [pc, #20]	; (8008888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008874:	88fb      	ldrh	r3, [r7, #6]
 8008876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	4618      	mov	r0, r3
 800887c:	f7fb fbf3 	bl	8004066 <HAL_GPIO_EXTI_Callback>
  }
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	40013c00 	.word	0x40013c00

0800888c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e11f      	b.n	8008ade <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fc fc52 	bl	800515c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088f0:	f001 f96e 	bl	8009bd0 <HAL_RCC_GetPCLK1Freq>
 80088f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	4a7b      	ldr	r2, [pc, #492]	; (8008ae8 <HAL_I2C_Init+0x25c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d807      	bhi.n	8008910 <HAL_I2C_Init+0x84>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4a7a      	ldr	r2, [pc, #488]	; (8008aec <HAL_I2C_Init+0x260>)
 8008904:	4293      	cmp	r3, r2
 8008906:	bf94      	ite	ls
 8008908:	2301      	movls	r3, #1
 800890a:	2300      	movhi	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e006      	b.n	800891e <HAL_I2C_Init+0x92>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a77      	ldr	r2, [pc, #476]	; (8008af0 <HAL_I2C_Init+0x264>)
 8008914:	4293      	cmp	r3, r2
 8008916:	bf94      	ite	ls
 8008918:	2301      	movls	r3, #1
 800891a:	2300      	movhi	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e0db      	b.n	8008ade <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4a72      	ldr	r2, [pc, #456]	; (8008af4 <HAL_I2C_Init+0x268>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	0c9b      	lsrs	r3, r3, #18
 8008930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	4a64      	ldr	r2, [pc, #400]	; (8008ae8 <HAL_I2C_Init+0x25c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d802      	bhi.n	8008960 <HAL_I2C_Init+0xd4>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	3301      	adds	r3, #1
 800895e:	e009      	b.n	8008974 <HAL_I2C_Init+0xe8>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008966:	fb02 f303 	mul.w	r3, r2, r3
 800896a:	4a63      	ldr	r2, [pc, #396]	; (8008af8 <HAL_I2C_Init+0x26c>)
 800896c:	fba2 2303 	umull	r2, r3, r2, r3
 8008970:	099b      	lsrs	r3, r3, #6
 8008972:	3301      	adds	r3, #1
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	430b      	orrs	r3, r1
 800897a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	4956      	ldr	r1, [pc, #344]	; (8008ae8 <HAL_I2C_Init+0x25c>)
 8008990:	428b      	cmp	r3, r1
 8008992:	d80d      	bhi.n	80089b0 <HAL_I2C_Init+0x124>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	1e59      	subs	r1, r3, #1
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	fbb1 f3f3 	udiv	r3, r1, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	bf38      	it	cc
 80089ac:	2304      	movcc	r3, #4
 80089ae:	e04f      	b.n	8008a50 <HAL_I2C_Init+0x1c4>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d111      	bne.n	80089dc <HAL_I2C_Init+0x150>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	1e58      	subs	r0, r3, #1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6859      	ldr	r1, [r3, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	440b      	add	r3, r1
 80089c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ca:	3301      	adds	r3, #1
 80089cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bf0c      	ite	eq
 80089d4:	2301      	moveq	r3, #1
 80089d6:	2300      	movne	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	e012      	b.n	8008a02 <HAL_I2C_Init+0x176>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1e58      	subs	r0, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6859      	ldr	r1, [r3, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	0099      	lsls	r1, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80089f2:	3301      	adds	r3, #1
 80089f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bf0c      	ite	eq
 80089fc:	2301      	moveq	r3, #1
 80089fe:	2300      	movne	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_I2C_Init+0x17e>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e022      	b.n	8008a50 <HAL_I2C_Init+0x1c4>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10e      	bne.n	8008a30 <HAL_I2C_Init+0x1a4>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1e58      	subs	r0, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6859      	ldr	r1, [r3, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	440b      	add	r3, r1
 8008a20:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a24:	3301      	adds	r3, #1
 8008a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2e:	e00f      	b.n	8008a50 <HAL_I2C_Init+0x1c4>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	1e58      	subs	r0, r3, #1
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6859      	ldr	r1, [r3, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	440b      	add	r3, r1
 8008a3e:	0099      	lsls	r1, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a46:	3301      	adds	r3, #1
 8008a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	6809      	ldr	r1, [r1, #0]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69da      	ldr	r2, [r3, #28]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	6911      	ldr	r1, [r2, #16]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	68d2      	ldr	r2, [r2, #12]
 8008a8a:	4311      	orrs	r1, r2
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695a      	ldr	r2, [r3, #20]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	000186a0 	.word	0x000186a0
 8008aec:	001e847f 	.word	0x001e847f
 8008af0:	003d08ff 	.word	0x003d08ff
 8008af4:	431bde83 	.word	0x431bde83
 8008af8:	10624dd3 	.word	0x10624dd3

08008afc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	461a      	mov	r2, r3
 8008b08:	460b      	mov	r3, r1
 8008b0a:	817b      	strh	r3, [r7, #10]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b10:	f7fe fbe8 	bl	80072e4 <HAL_GetTick>
 8008b14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	f040 80e0 	bne.w	8008ce4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2319      	movs	r3, #25
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4970      	ldr	r1, [pc, #448]	; (8008cf0 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fc58 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e0d3      	b.n	8008ce6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <HAL_I2C_Master_Transmit+0x50>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e0cc      	b.n	8008ce6 <HAL_I2C_Master_Transmit+0x1ea>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d007      	beq.n	8008b72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f042 0201 	orr.w	r2, r2, #1
 8008b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2221      	movs	r2, #33	; 0x21
 8008b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	893a      	ldrh	r2, [r7, #8]
 8008ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a50      	ldr	r2, [pc, #320]	; (8008cf4 <HAL_I2C_Master_Transmit+0x1f8>)
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bb4:	8979      	ldrh	r1, [r7, #10]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	6a3a      	ldr	r2, [r7, #32]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fac2 	bl	8009144 <I2C_MasterRequestWrite>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e08d      	b.n	8008ce6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008be0:	e066      	b.n	8008cb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	6a39      	ldr	r1, [r7, #32]
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fcd2 	bl	8009590 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d107      	bne.n	8008c0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e06b      	b.n	8008ce6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d11b      	bne.n	8008c84 <HAL_I2C_Master_Transmit+0x188>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d017      	beq.n	8008c84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	6a39      	ldr	r1, [r7, #32]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fcc2 	bl	8009612 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00d      	beq.n	8008cb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d107      	bne.n	8008cac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008caa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e01a      	b.n	8008ce6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d194      	bne.n	8008be2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2220      	movs	r2, #32
 8008ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	e000      	b.n	8008ce6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008ce4:	2302      	movs	r3, #2
  }
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	00100002 	.word	0x00100002
 8008cf4:	ffff0000 	.word	0xffff0000

08008cf8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08c      	sub	sp, #48	; 0x30
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	607a      	str	r2, [r7, #4]
 8008d02:	461a      	mov	r2, r3
 8008d04:	460b      	mov	r3, r1
 8008d06:	817b      	strh	r3, [r7, #10]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d0c:	f7fe faea 	bl	80072e4 <HAL_GetTick>
 8008d10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	f040 820b 	bne.w	8009136 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2319      	movs	r3, #25
 8008d26:	2201      	movs	r2, #1
 8008d28:	497c      	ldr	r1, [pc, #496]	; (8008f1c <HAL_I2C_Master_Receive+0x224>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fb5a 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d36:	2302      	movs	r3, #2
 8008d38:	e1fe      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_I2C_Master_Receive+0x50>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e1f7      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d007      	beq.n	8008d6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0201 	orr.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2222      	movs	r2, #34	; 0x22
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	893a      	ldrh	r2, [r7, #8]
 8008d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4a5c      	ldr	r2, [pc, #368]	; (8008f20 <HAL_I2C_Master_Receive+0x228>)
 8008dae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008db0:	8979      	ldrh	r1, [r7, #10]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fa46 	bl	8009248 <I2C_MasterRequestRead>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e1b8      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d113      	bne.n	8008df6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	623b      	str	r3, [r7, #32]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	623b      	str	r3, [r7, #32]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	623b      	str	r3, [r7, #32]
 8008de2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e18c      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d11b      	bne.n	8008e36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	61fb      	str	r3, [r7, #28]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e16c      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d11b      	bne.n	8008e76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	e14c      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e9c:	e138      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	f200 80f1 	bhi.w	800908a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d123      	bne.n	8008ef8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fbed 	bl	8009694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e139      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	691a      	ldr	r2, [r3, #16]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ef6:	e10b      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d14e      	bne.n	8008f9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	2200      	movs	r2, #0
 8008f08:	4906      	ldr	r1, [pc, #24]	; (8008f24 <HAL_I2C_Master_Receive+0x22c>)
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fa6a 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e10e      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
 8008f1a:	bf00      	nop
 8008f1c:	00100002 	.word	0x00100002
 8008f20:	ffff0000 	.word	0xffff0000
 8008f24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	b2d2      	uxtb	r2, r2
 8008f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f86:	3b01      	subs	r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f9c:	e0b8      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4966      	ldr	r1, [pc, #408]	; (8009140 <HAL_I2C_Master_Receive+0x448>)
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fa1b 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0bf      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2200      	movs	r2, #0
 8009002:	494f      	ldr	r1, [pc, #316]	; (8009140 <HAL_I2C_Master_Receive+0x448>)
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 f9ed 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e091      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	691a      	ldr	r2, [r3, #16]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009040:	3b01      	subs	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904c:	b29b      	uxth	r3, r3
 800904e:	3b01      	subs	r3, #1
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009088:	e042      	b.n	8009110 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800908a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fb00 	bl	8009694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e04c      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	b2d2      	uxtb	r2, r2
 80090aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d118      	bne.n	8009110 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f aec2 	bne.w	8008e9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	e000      	b.n	8009138 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009136:	2302      	movs	r3, #2
  }
}
 8009138:	4618      	mov	r0, r3
 800913a:	3728      	adds	r7, #40	; 0x28
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	00010004 	.word	0x00010004

08009144 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af02      	add	r7, sp, #8
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	460b      	mov	r3, r1
 8009152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b08      	cmp	r3, #8
 800915e:	d006      	beq.n	800916e <I2C_MasterRequestWrite+0x2a>
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d003      	beq.n	800916e <I2C_MasterRequestWrite+0x2a>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800916c:	d108      	bne.n	8009180 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e00b      	b.n	8009198 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	2b12      	cmp	r3, #18
 8009186:	d107      	bne.n	8009198 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009196:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f91d 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00d      	beq.n	80091cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091be:	d103      	bne.n	80091c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e035      	b.n	8009238 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091d4:	d108      	bne.n	80091e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091d6:	897b      	ldrh	r3, [r7, #10]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80091e4:	611a      	str	r2, [r3, #16]
 80091e6:	e01b      	b.n	8009220 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091e8:	897b      	ldrh	r3, [r7, #10]
 80091ea:	11db      	asrs	r3, r3, #7
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0306 	and.w	r3, r3, #6
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f063 030f 	orn	r3, r3, #15
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	490e      	ldr	r1, [pc, #56]	; (8009240 <I2C_MasterRequestWrite+0xfc>)
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f943 	bl	8009492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e010      	b.n	8009238 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009216:	897b      	ldrh	r3, [r7, #10]
 8009218:	b2da      	uxtb	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	4907      	ldr	r1, [pc, #28]	; (8009244 <I2C_MasterRequestWrite+0x100>)
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f933 	bl	8009492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	00010008 	.word	0x00010008
 8009244:	00010002 	.word	0x00010002

08009248 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	607a      	str	r2, [r7, #4]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	460b      	mov	r3, r1
 8009256:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800926c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b08      	cmp	r3, #8
 8009272:	d006      	beq.n	8009282 <I2C_MasterRequestRead+0x3a>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d003      	beq.n	8009282 <I2C_MasterRequestRead+0x3a>
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009280:	d108      	bne.n	8009294 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e00b      	b.n	80092ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	2b11      	cmp	r3, #17
 800929a:	d107      	bne.n	80092ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f893 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00d      	beq.n	80092e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d2:	d103      	bne.n	80092dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e079      	b.n	80093d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e8:	d108      	bne.n	80092fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092ea:	897b      	ldrh	r3, [r7, #10]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f043 0301 	orr.w	r3, r3, #1
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	611a      	str	r2, [r3, #16]
 80092fa:	e05f      	b.n	80093bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80092fc:	897b      	ldrh	r3, [r7, #10]
 80092fe:	11db      	asrs	r3, r3, #7
 8009300:	b2db      	uxtb	r3, r3
 8009302:	f003 0306 	and.w	r3, r3, #6
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f063 030f 	orn	r3, r3, #15
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4930      	ldr	r1, [pc, #192]	; (80093dc <I2C_MasterRequestRead+0x194>)
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 f8b9 	bl	8009492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e054      	b.n	80093d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800932a:	897b      	ldrh	r3, [r7, #10]
 800932c:	b2da      	uxtb	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	4929      	ldr	r1, [pc, #164]	; (80093e0 <I2C_MasterRequestRead+0x198>)
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f8a9 	bl	8009492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e044      	b.n	80093d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800934a:	2300      	movs	r3, #0
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800936e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f831 	bl	80093e4 <I2C_WaitOnFlagUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00d      	beq.n	80093a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009396:	d103      	bne.n	80093a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800939e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e017      	b.n	80093d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80093a4:	897b      	ldrh	r3, [r7, #10]
 80093a6:	11db      	asrs	r3, r3, #7
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 0306 	and.w	r3, r3, #6
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f063 030e 	orn	r3, r3, #14
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4907      	ldr	r1, [pc, #28]	; (80093e0 <I2C_MasterRequestRead+0x198>)
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f865 	bl	8009492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	00010008 	.word	0x00010008
 80093e0:	00010002 	.word	0x00010002

080093e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	4613      	mov	r3, r2
 80093f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093f4:	e025      	b.n	8009442 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fc:	d021      	beq.n	8009442 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fe:	f7fd ff71 	bl	80072e4 <HAL_GetTick>
 8009402:	4602      	mov	r2, r0
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d302      	bcc.n	8009414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d116      	bne.n	8009442 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2220      	movs	r2, #32
 800941e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	f043 0220 	orr.w	r2, r3, #32
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e023      	b.n	800948a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	0c1b      	lsrs	r3, r3, #16
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b01      	cmp	r3, #1
 800944a:	d10d      	bne.n	8009468 <I2C_WaitOnFlagUntilTimeout+0x84>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	43da      	mvns	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4013      	ands	r3, r2
 8009458:	b29b      	uxth	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	bf0c      	ite	eq
 800945e:	2301      	moveq	r3, #1
 8009460:	2300      	movne	r3, #0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	e00c      	b.n	8009482 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	43da      	mvns	r2, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4013      	ands	r3, r2
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	bf0c      	ite	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	2300      	movne	r3, #0
 800947e:	b2db      	uxtb	r3, r3
 8009480:	461a      	mov	r2, r3
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	429a      	cmp	r2, r3
 8009486:	d0b6      	beq.n	80093f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	607a      	str	r2, [r7, #4]
 800949e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094a0:	e051      	b.n	8009546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b0:	d123      	bne.n	80094fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e6:	f043 0204 	orr.w	r2, r3, #4
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e046      	b.n	8009588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d021      	beq.n	8009546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009502:	f7fd feef 	bl	80072e4 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d302      	bcc.n	8009518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d116      	bne.n	8009546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2220      	movs	r2, #32
 8009522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f043 0220 	orr.w	r2, r3, #32
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e020      	b.n	8009588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	0c1b      	lsrs	r3, r3, #16
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10c      	bne.n	800956a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	43da      	mvns	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4013      	ands	r3, r2
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	bf14      	ite	ne
 8009562:	2301      	movne	r3, #1
 8009564:	2300      	moveq	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	e00b      	b.n	8009582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	43da      	mvns	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	4013      	ands	r3, r2
 8009576:	b29b      	uxth	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d18d      	bne.n	80094a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800959c:	e02d      	b.n	80095fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 f8ce 	bl	8009740 <I2C_IsAcknowledgeFailed>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e02d      	b.n	800960a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d021      	beq.n	80095fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095b6:	f7fd fe95 	bl	80072e4 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d302      	bcc.n	80095cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d116      	bne.n	80095fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	f043 0220 	orr.w	r2, r3, #32
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e007      	b.n	800960a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d1ca      	bne.n	800959e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800961e:	e02d      	b.n	800967c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 f88d 	bl	8009740 <I2C_IsAcknowledgeFailed>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e02d      	b.n	800968c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d021      	beq.n	800967c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009638:	f7fd fe54 	bl	80072e4 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	429a      	cmp	r2, r3
 8009646:	d302      	bcc.n	800964e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d116      	bne.n	800967c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2220      	movs	r2, #32
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009668:	f043 0220 	orr.w	r2, r3, #32
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e007      	b.n	800968c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f003 0304 	and.w	r3, r3, #4
 8009686:	2b04      	cmp	r3, #4
 8009688:	d1ca      	bne.n	8009620 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096a0:	e042      	b.n	8009728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d119      	bne.n	80096e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0210 	mvn.w	r2, #16
 80096b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2220      	movs	r2, #32
 80096c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e029      	b.n	8009738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e4:	f7fd fdfe 	bl	80072e4 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d302      	bcc.n	80096fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d116      	bne.n	8009728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2220      	movs	r2, #32
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	f043 0220 	orr.w	r2, r3, #32
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e007      	b.n	8009738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d1b5      	bne.n	80096a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009756:	d11b      	bne.n	8009790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	f043 0204 	orr.w	r2, r3, #4
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e000      	b.n	8009792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
	...

080097a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80097aa:	2300      	movs	r3, #0
 80097ac:	603b      	str	r3, [r7, #0]
 80097ae:	4b20      	ldr	r3, [pc, #128]	; (8009830 <HAL_PWREx_EnableOverDrive+0x90>)
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	4a1f      	ldr	r2, [pc, #124]	; (8009830 <HAL_PWREx_EnableOverDrive+0x90>)
 80097b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b8:	6413      	str	r3, [r2, #64]	; 0x40
 80097ba:	4b1d      	ldr	r3, [pc, #116]	; (8009830 <HAL_PWREx_EnableOverDrive+0x90>)
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80097c6:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <HAL_PWREx_EnableOverDrive+0x94>)
 80097c8:	2201      	movs	r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097cc:	f7fd fd8a 	bl	80072e4 <HAL_GetTick>
 80097d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097d2:	e009      	b.n	80097e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097d4:	f7fd fd86 	bl	80072e4 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097e2:	d901      	bls.n	80097e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e01f      	b.n	8009828 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097e8:	4b13      	ldr	r3, [pc, #76]	; (8009838 <HAL_PWREx_EnableOverDrive+0x98>)
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f4:	d1ee      	bne.n	80097d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097f6:	4b11      	ldr	r3, [pc, #68]	; (800983c <HAL_PWREx_EnableOverDrive+0x9c>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097fc:	f7fd fd72 	bl	80072e4 <HAL_GetTick>
 8009800:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009802:	e009      	b.n	8009818 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009804:	f7fd fd6e 	bl	80072e4 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009812:	d901      	bls.n	8009818 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e007      	b.n	8009828 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009818:	4b07      	ldr	r3, [pc, #28]	; (8009838 <HAL_PWREx_EnableOverDrive+0x98>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009824:	d1ee      	bne.n	8009804 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	40023800 	.word	0x40023800
 8009834:	420e0040 	.word	0x420e0040
 8009838:	40007000 	.word	0x40007000
 800983c:	420e0044 	.word	0x420e0044

08009840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0cc      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009854:	4b68      	ldr	r3, [pc, #416]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d90c      	bls.n	800987c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009862:	4b65      	ldr	r3, [pc, #404]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800986a:	4b63      	ldr	r3, [pc, #396]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d001      	beq.n	800987c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e0b8      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d020      	beq.n	80098ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009894:	4b59      	ldr	r3, [pc, #356]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	4a58      	ldr	r2, [pc, #352]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 800989a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800989e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80098ac:	4b53      	ldr	r3, [pc, #332]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	4a52      	ldr	r2, [pc, #328]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80098b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098b8:	4b50      	ldr	r3, [pc, #320]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	494d      	ldr	r1, [pc, #308]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d044      	beq.n	8009960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d107      	bne.n	80098ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098de:	4b47      	ldr	r3, [pc, #284]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d119      	bne.n	800991e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e07f      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d003      	beq.n	80098fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d107      	bne.n	800990e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098fe:	4b3f      	ldr	r3, [pc, #252]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d109      	bne.n	800991e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e06f      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800990e:	4b3b      	ldr	r3, [pc, #236]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e067      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800991e:	4b37      	ldr	r3, [pc, #220]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f023 0203 	bic.w	r2, r3, #3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	4934      	ldr	r1, [pc, #208]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 800992c:	4313      	orrs	r3, r2
 800992e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009930:	f7fd fcd8 	bl	80072e4 <HAL_GetTick>
 8009934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009936:	e00a      	b.n	800994e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009938:	f7fd fcd4 	bl	80072e4 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	f241 3288 	movw	r2, #5000	; 0x1388
 8009946:	4293      	cmp	r3, r2
 8009948:	d901      	bls.n	800994e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e04f      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800994e:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 020c 	and.w	r2, r3, #12
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	429a      	cmp	r2, r3
 800995e:	d1eb      	bne.n	8009938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009960:	4b25      	ldr	r3, [pc, #148]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 030f 	and.w	r3, r3, #15
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	429a      	cmp	r2, r3
 800996c:	d20c      	bcs.n	8009988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800996e:	4b22      	ldr	r3, [pc, #136]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	b2d2      	uxtb	r2, r2
 8009974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009976:	4b20      	ldr	r3, [pc, #128]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d001      	beq.n	8009988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e032      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009994:	4b19      	ldr	r3, [pc, #100]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	4916      	ldr	r1, [pc, #88]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	490e      	ldr	r1, [pc, #56]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099c6:	f000 f821 	bl	8009a0c <HAL_RCC_GetSysClockFreq>
 80099ca:	4601      	mov	r1, r0
 80099cc:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	091b      	lsrs	r3, r3, #4
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	4a0a      	ldr	r2, [pc, #40]	; (8009a00 <HAL_RCC_ClockConfig+0x1c0>)
 80099d8:	5cd3      	ldrb	r3, [r2, r3]
 80099da:	fa21 f303 	lsr.w	r3, r1, r3
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <HAL_RCC_ClockConfig+0x1c4>)
 80099e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <HAL_RCC_ClockConfig+0x1c8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fd fc38 	bl	800725c <HAL_InitTick>

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40023c00 	.word	0x40023c00
 80099fc:	40023800 	.word	0x40023800
 8009a00:	080181b4 	.word	0x080181b4
 8009a04:	20000000 	.word	0x20000000
 8009a08:	20000004 	.word	0x20000004

08009a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	607b      	str	r3, [r7, #4]
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a22:	4b63      	ldr	r3, [pc, #396]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 030c 	and.w	r3, r3, #12
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d007      	beq.n	8009a3e <HAL_RCC_GetSysClockFreq+0x32>
 8009a2e:	2b08      	cmp	r3, #8
 8009a30:	d008      	beq.n	8009a44 <HAL_RCC_GetSysClockFreq+0x38>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f040 80b4 	bne.w	8009ba0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a38:	4b5e      	ldr	r3, [pc, #376]	; (8009bb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009a3a:	60bb      	str	r3, [r7, #8]
       break;
 8009a3c:	e0b3      	b.n	8009ba6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a3e:	4b5d      	ldr	r3, [pc, #372]	; (8009bb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009a40:	60bb      	str	r3, [r7, #8]
      break;
 8009a42:	e0b0      	b.n	8009ba6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a44:	4b5a      	ldr	r3, [pc, #360]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a4e:	4b58      	ldr	r3, [pc, #352]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d04a      	beq.n	8009af0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a5a:	4b55      	ldr	r3, [pc, #340]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	099b      	lsrs	r3, r3, #6
 8009a60:	f04f 0400 	mov.w	r4, #0
 8009a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	ea03 0501 	and.w	r5, r3, r1
 8009a70:	ea04 0602 	and.w	r6, r4, r2
 8009a74:	4629      	mov	r1, r5
 8009a76:	4632      	mov	r2, r6
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	f04f 0400 	mov.w	r4, #0
 8009a80:	0154      	lsls	r4, r2, #5
 8009a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009a86:	014b      	lsls	r3, r1, #5
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	1b49      	subs	r1, r1, r5
 8009a8e:	eb62 0206 	sbc.w	r2, r2, r6
 8009a92:	f04f 0300 	mov.w	r3, #0
 8009a96:	f04f 0400 	mov.w	r4, #0
 8009a9a:	0194      	lsls	r4, r2, #6
 8009a9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009aa0:	018b      	lsls	r3, r1, #6
 8009aa2:	1a5b      	subs	r3, r3, r1
 8009aa4:	eb64 0402 	sbc.w	r4, r4, r2
 8009aa8:	f04f 0100 	mov.w	r1, #0
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	00e2      	lsls	r2, r4, #3
 8009ab2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ab6:	00d9      	lsls	r1, r3, #3
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4614      	mov	r4, r2
 8009abc:	195b      	adds	r3, r3, r5
 8009abe:	eb44 0406 	adc.w	r4, r4, r6
 8009ac2:	f04f 0100 	mov.w	r1, #0
 8009ac6:	f04f 0200 	mov.w	r2, #0
 8009aca:	02a2      	lsls	r2, r4, #10
 8009acc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009ad0:	0299      	lsls	r1, r3, #10
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	4621      	mov	r1, r4
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f04f 0400 	mov.w	r4, #0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4623      	mov	r3, r4
 8009ae4:	f7f7 f8e8 	bl	8000cb8 <__aeabi_uldivmod>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e049      	b.n	8009b84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009af0:	4b2f      	ldr	r3, [pc, #188]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	099b      	lsrs	r3, r3, #6
 8009af6:	f04f 0400 	mov.w	r4, #0
 8009afa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	ea03 0501 	and.w	r5, r3, r1
 8009b06:	ea04 0602 	and.w	r6, r4, r2
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	f04f 0400 	mov.w	r4, #0
 8009b16:	0154      	lsls	r4, r2, #5
 8009b18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009b1c:	014b      	lsls	r3, r1, #5
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4622      	mov	r2, r4
 8009b22:	1b49      	subs	r1, r1, r5
 8009b24:	eb62 0206 	sbc.w	r2, r2, r6
 8009b28:	f04f 0300 	mov.w	r3, #0
 8009b2c:	f04f 0400 	mov.w	r4, #0
 8009b30:	0194      	lsls	r4, r2, #6
 8009b32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009b36:	018b      	lsls	r3, r1, #6
 8009b38:	1a5b      	subs	r3, r3, r1
 8009b3a:	eb64 0402 	sbc.w	r4, r4, r2
 8009b3e:	f04f 0100 	mov.w	r1, #0
 8009b42:	f04f 0200 	mov.w	r2, #0
 8009b46:	00e2      	lsls	r2, r4, #3
 8009b48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b4c:	00d9      	lsls	r1, r3, #3
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4614      	mov	r4, r2
 8009b52:	195b      	adds	r3, r3, r5
 8009b54:	eb44 0406 	adc.w	r4, r4, r6
 8009b58:	f04f 0100 	mov.w	r1, #0
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	02a2      	lsls	r2, r4, #10
 8009b62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009b66:	0299      	lsls	r1, r3, #10
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	4621      	mov	r1, r4
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f04f 0400 	mov.w	r4, #0
 8009b76:	461a      	mov	r2, r3
 8009b78:	4623      	mov	r3, r4
 8009b7a:	f7f7 f89d 	bl	8000cb8 <__aeabi_uldivmod>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	3301      	adds	r3, #1
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9c:	60bb      	str	r3, [r7, #8]
      break;
 8009b9e:	e002      	b.n	8009ba6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009ba2:	60bb      	str	r3, [r7, #8]
      break;
 8009ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb0:	40023800 	.word	0x40023800
 8009bb4:	00f42400 	.word	0x00f42400

08009bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bbc:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	20000000 	.word	0x20000000

08009bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009bd4:	f7ff fff0 	bl	8009bb8 <HAL_RCC_GetHCLKFreq>
 8009bd8:	4601      	mov	r1, r0
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	0a9b      	lsrs	r3, r3, #10
 8009be0:	f003 0307 	and.w	r3, r3, #7
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009be6:	5cd3      	ldrb	r3, [r2, r3]
 8009be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	40023800 	.word	0x40023800
 8009bf4:	080181c4 	.word	0x080181c4

08009bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009bfc:	f7ff ffdc 	bl	8009bb8 <HAL_RCC_GetHCLKFreq>
 8009c00:	4601      	mov	r1, r0
 8009c02:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	0b5b      	lsrs	r3, r3, #13
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	4a03      	ldr	r2, [pc, #12]	; (8009c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c0e:	5cd3      	ldrb	r3, [r2, r3]
 8009c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40023800 	.word	0x40023800
 8009c1c:	080181c4 	.word	0x080181c4

08009c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00a      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009c48:	4b66      	ldr	r3, [pc, #408]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c56:	4963      	ldr	r1, [pc, #396]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009c6a:	4b5e      	ldr	r3, [pc, #376]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	495a      	ldr	r1, [pc, #360]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d105      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d075      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ca4:	4b50      	ldr	r3, [pc, #320]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009caa:	f7fd fb1b 	bl	80072e4 <HAL_GetTick>
 8009cae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cb0:	e008      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009cb2:	f7fd fb17 	bl	80072e4 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d901      	bls.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e1dc      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cc4:	4b47      	ldr	r3, [pc, #284]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f0      	bne.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d009      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	019a      	lsls	r2, r3, #6
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	071b      	lsls	r3, r3, #28
 8009ce8:	493e      	ldr	r1, [pc, #248]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01f      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009cfc:	4b39      	ldr	r3, [pc, #228]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d02:	0f1b      	lsrs	r3, r3, #28
 8009d04:	f003 0307 	and.w	r3, r3, #7
 8009d08:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	019a      	lsls	r2, r3, #6
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	061b      	lsls	r3, r3, #24
 8009d16:	431a      	orrs	r2, r3
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	071b      	lsls	r3, r3, #28
 8009d1c:	4931      	ldr	r1, [pc, #196]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009d24:	4b2f      	ldr	r3, [pc, #188]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d2a:	f023 021f 	bic.w	r2, r3, #31
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	492b      	ldr	r1, [pc, #172]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00d      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	019a      	lsls	r2, r3, #6
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	061b      	lsls	r3, r3, #24
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	071b      	lsls	r3, r3, #28
 8009d5c:	4921      	ldr	r1, [pc, #132]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009d64:	4b20      	ldr	r3, [pc, #128]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d6a:	f7fd fabb 	bl	80072e4 <HAL_GetTick>
 8009d6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d70:	e008      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009d72:	f7fd fab7 	bl	80072e4 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d901      	bls.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e17c      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d84:	4b17      	ldr	r3, [pc, #92]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0f0      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d112      	bne.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10c      	bne.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80ce 	beq.w	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dbe:	f040 80c8 	bne.w	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009dc8:	f7fd fa8c 	bl	80072e4 <HAL_GetTick>
 8009dcc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009dce:	e00f      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009dd0:	f7fd fa88 	bl	80072e4 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d908      	bls.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e14d      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009de2:	bf00      	nop
 8009de4:	40023800 	.word	0x40023800
 8009de8:	42470068 	.word	0x42470068
 8009dec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009df0:	4ba5      	ldr	r3, [pc, #660]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dfc:	d0e8      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0304 	and.w	r3, r3, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d02e      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009e0a:	4b9f      	ldr	r3, [pc, #636]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e10:	0c1b      	lsrs	r3, r3, #16
 8009e12:	f003 0303 	and.w	r3, r3, #3
 8009e16:	3301      	adds	r3, #1
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009e1c:	4b9a      	ldr	r3, [pc, #616]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e22:	0f1b      	lsrs	r3, r3, #28
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	019a      	lsls	r2, r3, #6
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	085b      	lsrs	r3, r3, #1
 8009e34:	3b01      	subs	r3, #1
 8009e36:	041b      	lsls	r3, r3, #16
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	061b      	lsls	r3, r3, #24
 8009e40:	431a      	orrs	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	071b      	lsls	r3, r3, #28
 8009e46:	4990      	ldr	r1, [pc, #576]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009e4e:	4b8e      	ldr	r3, [pc, #568]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	4989      	ldr	r1, [pc, #548]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d02c      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009e74:	4b84      	ldr	r3, [pc, #528]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	f003 0303 	and.w	r3, r3, #3
 8009e80:	3301      	adds	r3, #1
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009e86:	4b80      	ldr	r3, [pc, #512]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	0e1b      	lsrs	r3, r3, #24
 8009e8e:	f003 030f 	and.w	r3, r3, #15
 8009e92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	019a      	lsls	r2, r3, #6
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	085b      	lsrs	r3, r3, #1
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	041b      	lsls	r3, r3, #16
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	061b      	lsls	r3, r3, #24
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	071b      	lsls	r3, r3, #28
 8009eb0:	4975      	ldr	r1, [pc, #468]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009eb8:	4b73      	ldr	r3, [pc, #460]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ebe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec6:	4970      	ldr	r1, [pc, #448]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d024      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ee2:	d11f      	bne.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ee4:	4b68      	ldr	r3, [pc, #416]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	0e1b      	lsrs	r3, r3, #24
 8009eec:	f003 030f 	and.w	r3, r3, #15
 8009ef0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ef2:	4b65      	ldr	r3, [pc, #404]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef8:	0f1b      	lsrs	r3, r3, #28
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	019a      	lsls	r2, r3, #6
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	085b      	lsrs	r3, r3, #1
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	041b      	lsls	r3, r3, #16
 8009f10:	431a      	orrs	r2, r3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	061b      	lsls	r3, r3, #24
 8009f16:	431a      	orrs	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	071b      	lsls	r3, r3, #28
 8009f1c:	495a      	ldr	r1, [pc, #360]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009f24:	4b59      	ldr	r3, [pc, #356]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f2a:	f7fd f9db 	bl	80072e4 <HAL_GetTick>
 8009f2e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f30:	e008      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009f32:	f7fd f9d7 	bl	80072e4 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d901      	bls.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e09c      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f44:	4b50      	ldr	r3, [pc, #320]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f50:	d1ef      	bne.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 8083 	beq.w	800a066 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f60:	2300      	movs	r3, #0
 8009f62:	60bb      	str	r3, [r7, #8]
 8009f64:	4b48      	ldr	r3, [pc, #288]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f68:	4a47      	ldr	r2, [pc, #284]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8009f70:	4b45      	ldr	r3, [pc, #276]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f78:	60bb      	str	r3, [r7, #8]
 8009f7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f7c:	4b44      	ldr	r3, [pc, #272]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a43      	ldr	r2, [pc, #268]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f88:	f7fd f9ac 	bl	80072e4 <HAL_GetTick>
 8009f8c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f90:	f7fd f9a8 	bl	80072e4 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e06d      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fa2:	4b3b      	ldr	r3, [pc, #236]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0f0      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009fae:	4b36      	ldr	r3, [pc, #216]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d02f      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d028      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fcc:	4b2e      	ldr	r3, [pc, #184]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fd4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fd6:	4b2f      	ldr	r3, [pc, #188]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fdc:	4b2d      	ldr	r3, [pc, #180]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fe2:	4a29      	ldr	r2, [pc, #164]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fe8:	4b27      	ldr	r3, [pc, #156]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d114      	bne.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ff4:	f7fd f976 	bl	80072e4 <HAL_GetTick>
 8009ff8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ffa:	e00a      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ffc:	f7fd f972 	bl	80072e4 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	f241 3288 	movw	r2, #5000	; 0x1388
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d901      	bls.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e035      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a012:	4b1d      	ldr	r3, [pc, #116]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0ee      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a02a:	d10d      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a03c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a040:	4911      	ldr	r1, [pc, #68]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a042:	4313      	orrs	r3, r2
 800a044:	608b      	str	r3, [r1, #8]
 800a046:	e005      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a048:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	4a0e      	ldr	r2, [pc, #56]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a04e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a052:	6093      	str	r3, [r2, #8]
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a060:	4909      	ldr	r1, [pc, #36]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a062:	4313      	orrs	r3, r2
 800a064:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0310 	and.w	r3, r3, #16
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a078:	4b07      	ldr	r3, [pc, #28]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a07a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3720      	adds	r7, #32
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	40023800 	.word	0x40023800
 800a08c:	42470070 	.word	0x42470070
 800a090:	40007000 	.word	0x40007000
 800a094:	42470e40 	.word	0x42470e40
 800a098:	424711e0 	.word	0x424711e0

0800a09c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d075      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a0b4:	4ba2      	ldr	r3, [pc, #648]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 030c 	and.w	r3, r3, #12
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d00c      	beq.n	800a0da <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0c0:	4b9f      	ldr	r3, [pc, #636]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d112      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0cc:	4b9c      	ldr	r3, [pc, #624]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0da:	4b99      	ldr	r3, [pc, #612]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d05b      	beq.n	800a19e <HAL_RCC_OscConfig+0x102>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d157      	bne.n	800a19e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e20b      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fa:	d106      	bne.n	800a10a <HAL_RCC_OscConfig+0x6e>
 800a0fc:	4b90      	ldr	r3, [pc, #576]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a8f      	ldr	r2, [pc, #572]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	e01d      	b.n	800a146 <HAL_RCC_OscConfig+0xaa>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a112:	d10c      	bne.n	800a12e <HAL_RCC_OscConfig+0x92>
 800a114:	4b8a      	ldr	r3, [pc, #552]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a89      	ldr	r2, [pc, #548]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a11a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	4b87      	ldr	r3, [pc, #540]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a86      	ldr	r2, [pc, #536]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	e00b      	b.n	800a146 <HAL_RCC_OscConfig+0xaa>
 800a12e:	4b84      	ldr	r3, [pc, #528]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a83      	ldr	r2, [pc, #524]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	4b81      	ldr	r3, [pc, #516]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a80      	ldr	r2, [pc, #512]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a144:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d013      	beq.n	800a176 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14e:	f7fd f8c9 	bl	80072e4 <HAL_GetTick>
 800a152:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a154:	e008      	b.n	800a168 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a156:	f7fd f8c5 	bl	80072e4 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b64      	cmp	r3, #100	; 0x64
 800a162:	d901      	bls.n	800a168 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e1d0      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a168:	4b75      	ldr	r3, [pc, #468]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0f0      	beq.n	800a156 <HAL_RCC_OscConfig+0xba>
 800a174:	e014      	b.n	800a1a0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a176:	f7fd f8b5 	bl	80072e4 <HAL_GetTick>
 800a17a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a17c:	e008      	b.n	800a190 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a17e:	f7fd f8b1 	bl	80072e4 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b64      	cmp	r3, #100	; 0x64
 800a18a:	d901      	bls.n	800a190 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e1bc      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a190:	4b6b      	ldr	r3, [pc, #428]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1f0      	bne.n	800a17e <HAL_RCC_OscConfig+0xe2>
 800a19c:	e000      	b.n	800a1a0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a19e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d063      	beq.n	800a274 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a1ac:	4b64      	ldr	r3, [pc, #400]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f003 030c 	and.w	r3, r3, #12
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1b8:	4b61      	ldr	r3, [pc, #388]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d11c      	bne.n	800a1fe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1c4:	4b5e      	ldr	r3, [pc, #376]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d116      	bne.n	800a1fe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1d0:	4b5b      	ldr	r3, [pc, #364]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x14c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d001      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e190      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1e8:	4b55      	ldr	r3, [pc, #340]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	4952      	ldr	r1, [pc, #328]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1fc:	e03a      	b.n	800a274 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d020      	beq.n	800a248 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a206:	4b4f      	ldr	r3, [pc, #316]	; (800a344 <HAL_RCC_OscConfig+0x2a8>)
 800a208:	2201      	movs	r2, #1
 800a20a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a20c:	f7fd f86a 	bl	80072e4 <HAL_GetTick>
 800a210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a212:	e008      	b.n	800a226 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a214:	f7fd f866 	bl	80072e4 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d901      	bls.n	800a226 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e171      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a226:	4b46      	ldr	r3, [pc, #280]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0f0      	beq.n	800a214 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a232:	4b43      	ldr	r3, [pc, #268]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	493f      	ldr	r1, [pc, #252]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a242:	4313      	orrs	r3, r2
 800a244:	600b      	str	r3, [r1, #0]
 800a246:	e015      	b.n	800a274 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a248:	4b3e      	ldr	r3, [pc, #248]	; (800a344 <HAL_RCC_OscConfig+0x2a8>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24e:	f7fd f849 	bl	80072e4 <HAL_GetTick>
 800a252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a254:	e008      	b.n	800a268 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a256:	f7fd f845 	bl	80072e4 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	d901      	bls.n	800a268 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e150      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a268:	4b35      	ldr	r3, [pc, #212]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1f0      	bne.n	800a256 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d030      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d016      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a288:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <HAL_RCC_OscConfig+0x2ac>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a28e:	f7fd f829 	bl	80072e4 <HAL_GetTick>
 800a292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a294:	e008      	b.n	800a2a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a296:	f7fd f825 	bl	80072e4 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e130      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2a8:	4b25      	ldr	r3, [pc, #148]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0f0      	beq.n	800a296 <HAL_RCC_OscConfig+0x1fa>
 800a2b4:	e015      	b.n	800a2e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2b6:	4b24      	ldr	r3, [pc, #144]	; (800a348 <HAL_RCC_OscConfig+0x2ac>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2bc:	f7fd f812 	bl	80072e4 <HAL_GetTick>
 800a2c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a2c4:	f7fd f80e 	bl	80072e4 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e119      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2d6:	4b1a      	ldr	r3, [pc, #104]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1f0      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0304 	and.w	r3, r3, #4
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 809f 	beq.w	800a42e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2f4:	4b12      	ldr	r3, [pc, #72]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10f      	bne.n	800a320 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a308:	4a0d      	ldr	r2, [pc, #52]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a30a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a30e:	6413      	str	r3, [r2, #64]	; 0x40
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <HAL_RCC_OscConfig+0x2a4>)
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a31c:	2301      	movs	r3, #1
 800a31e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <HAL_RCC_OscConfig+0x2b0>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d120      	bne.n	800a36e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <HAL_RCC_OscConfig+0x2b0>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a06      	ldr	r2, [pc, #24]	; (800a34c <HAL_RCC_OscConfig+0x2b0>)
 800a332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a338:	f7fc ffd4 	bl	80072e4 <HAL_GetTick>
 800a33c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a33e:	e010      	b.n	800a362 <HAL_RCC_OscConfig+0x2c6>
 800a340:	40023800 	.word	0x40023800
 800a344:	42470000 	.word	0x42470000
 800a348:	42470e80 	.word	0x42470e80
 800a34c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a350:	f7fc ffc8 	bl	80072e4 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e0d3      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a362:	4b6c      	ldr	r3, [pc, #432]	; (800a514 <HAL_RCC_OscConfig+0x478>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f0      	beq.n	800a350 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d106      	bne.n	800a384 <HAL_RCC_OscConfig+0x2e8>
 800a376:	4b68      	ldr	r3, [pc, #416]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	4a67      	ldr	r2, [pc, #412]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	6713      	str	r3, [r2, #112]	; 0x70
 800a382:	e01c      	b.n	800a3be <HAL_RCC_OscConfig+0x322>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2b05      	cmp	r3, #5
 800a38a:	d10c      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x30a>
 800a38c:	4b62      	ldr	r3, [pc, #392]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a390:	4a61      	ldr	r2, [pc, #388]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a392:	f043 0304 	orr.w	r3, r3, #4
 800a396:	6713      	str	r3, [r2, #112]	; 0x70
 800a398:	4b5f      	ldr	r3, [pc, #380]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a39a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39c:	4a5e      	ldr	r2, [pc, #376]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a4:	e00b      	b.n	800a3be <HAL_RCC_OscConfig+0x322>
 800a3a6:	4b5c      	ldr	r3, [pc, #368]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	4a5b      	ldr	r2, [pc, #364]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3b2:	4b59      	ldr	r3, [pc, #356]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	4a58      	ldr	r2, [pc, #352]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a3b8:	f023 0304 	bic.w	r3, r3, #4
 800a3bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d015      	beq.n	800a3f2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3c6:	f7fc ff8d 	bl	80072e4 <HAL_GetTick>
 800a3ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3cc:	e00a      	b.n	800a3e4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3ce:	f7fc ff89 	bl	80072e4 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d901      	bls.n	800a3e4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e092      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3e4:	4b4c      	ldr	r3, [pc, #304]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0ee      	beq.n	800a3ce <HAL_RCC_OscConfig+0x332>
 800a3f0:	e014      	b.n	800a41c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3f2:	f7fc ff77 	bl	80072e4 <HAL_GetTick>
 800a3f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3f8:	e00a      	b.n	800a410 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3fa:	f7fc ff73 	bl	80072e4 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	f241 3288 	movw	r2, #5000	; 0x1388
 800a408:	4293      	cmp	r3, r2
 800a40a:	d901      	bls.n	800a410 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e07c      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a410:	4b41      	ldr	r3, [pc, #260]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1ee      	bne.n	800a3fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d105      	bne.n	800a42e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a422:	4b3d      	ldr	r3, [pc, #244]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a426:	4a3c      	ldr	r2, [pc, #240]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a42c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d068      	beq.n	800a508 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a436:	4b38      	ldr	r3, [pc, #224]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f003 030c 	and.w	r3, r3, #12
 800a43e:	2b08      	cmp	r3, #8
 800a440:	d060      	beq.n	800a504 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d145      	bne.n	800a4d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a44a:	4b34      	ldr	r3, [pc, #208]	; (800a51c <HAL_RCC_OscConfig+0x480>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a450:	f7fc ff48 	bl	80072e4 <HAL_GetTick>
 800a454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a458:	f7fc ff44 	bl	80072e4 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b02      	cmp	r3, #2
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e04f      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a46a:	4b2b      	ldr	r3, [pc, #172]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f0      	bne.n	800a458 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	69da      	ldr	r2, [r3, #28]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	431a      	orrs	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	019b      	lsls	r3, r3, #6
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48c:	085b      	lsrs	r3, r3, #1
 800a48e:	3b01      	subs	r3, #1
 800a490:	041b      	lsls	r3, r3, #16
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	061b      	lsls	r3, r3, #24
 800a49a:	431a      	orrs	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a0:	071b      	lsls	r3, r3, #28
 800a4a2:	491d      	ldr	r1, [pc, #116]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4a8:	4b1c      	ldr	r3, [pc, #112]	; (800a51c <HAL_RCC_OscConfig+0x480>)
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ae:	f7fc ff19 	bl	80072e4 <HAL_GetTick>
 800a4b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4b6:	f7fc ff15 	bl	80072e4 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e020      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4c8:	4b13      	ldr	r3, [pc, #76]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0f0      	beq.n	800a4b6 <HAL_RCC_OscConfig+0x41a>
 800a4d4:	e018      	b.n	800a508 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4d6:	4b11      	ldr	r3, [pc, #68]	; (800a51c <HAL_RCC_OscConfig+0x480>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4dc:	f7fc ff02 	bl	80072e4 <HAL_GetTick>
 800a4e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4e4:	f7fc fefe 	bl	80072e4 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e009      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4f6:	4b08      	ldr	r3, [pc, #32]	; (800a518 <HAL_RCC_OscConfig+0x47c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1f0      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x448>
 800a502:	e001      	b.n	800a508 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e000      	b.n	800a50a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	40007000 	.word	0x40007000
 800a518:	40023800 	.word	0x40023800
 800a51c:	42470060 	.word	0x42470060

0800a520 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e022      	b.n	800a578 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d105      	bne.n	800a54a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7fa fe85 	bl	8005254 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2203      	movs	r2, #3
 800a54e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f814 	bl	800a580 <HAL_SD_InitCard>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e00a      	b.n	800a578 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a580:	b5b0      	push	{r4, r5, r7, lr}
 800a582:	b08e      	sub	sp, #56	; 0x38
 800a584:	af04      	add	r7, sp, #16
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a588:	2300      	movs	r3, #0
 800a58a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a590:	2300      	movs	r3, #0
 800a592:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a594:	2300      	movs	r3, #0
 800a596:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a598:	2300      	movs	r3, #0
 800a59a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a59c:	2376      	movs	r3, #118	; 0x76
 800a59e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681d      	ldr	r5, [r3, #0]
 800a5a4:	466c      	mov	r4, sp
 800a5a6:	f107 0314 	add.w	r3, r7, #20
 800a5aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5b2:	f107 0308 	add.w	r3, r7, #8
 800a5b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f003 fa87 	bl	800dacc <SDIO_Init>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e031      	b.n	800a634 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <HAL_SD_InitCard+0xbc>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f003 fabf 	bl	800db5e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a5e0:	4b16      	ldr	r3, [pc, #88]	; (800a63c <HAL_SD_InitCard+0xbc>)
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 ffc6 	bl	800b578 <SD_PowerON>
 800a5ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00b      	beq.n	800a60c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e013      	b.n	800a634 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fee5 	bl	800b3dc <SD_InitCard>
 800a612:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00b      	beq.n	800a632 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	431a      	orrs	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3728      	adds	r7, #40	; 0x28
 800a638:	46bd      	mov	sp, r7
 800a63a:	bdb0      	pop	{r4, r5, r7, pc}
 800a63c:	422580a0 	.word	0x422580a0

0800a640 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08c      	sub	sp, #48	; 0x30
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d107      	bne.n	800a668 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e0c7      	b.n	800a7f8 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b01      	cmp	r3, #1
 800a672:	f040 80c0 	bne.w	800a7f6 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	441a      	add	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a686:	429a      	cmp	r2, r3
 800a688:	d907      	bls.n	800a69a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e0ae      	b.n	800a7f8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2203      	movs	r2, #3
 800a69e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a6b8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	4a50      	ldr	r2, [pc, #320]	; (800a800 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a6c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	4a4f      	ldr	r2, [pc, #316]	; (800a804 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a6c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3380      	adds	r3, #128	; 0x80
 800a6dc:	4619      	mov	r1, r3
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	025b      	lsls	r3, r3, #9
 800a6e4:	089b      	lsrs	r3, r3, #2
 800a6e6:	f7fd fbef 	bl	8007ec8 <HAL_DMA_Start_IT>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d017      	beq.n	800a720 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a6fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a40      	ldr	r2, [pc, #256]	; (800a808 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e06b      	b.n	800a7f8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a720:	4b3a      	ldr	r3, [pc, #232]	; (800a80c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a722:	2201      	movs	r2, #1
 800a724:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d002      	beq.n	800a734 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	025b      	lsls	r3, r3, #9
 800a732:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a73c:	4618      	mov	r0, r3
 800a73e:	f003 faa1 	bl	800dc84 <SDMMC_CmdBlockLength>
 800a742:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00f      	beq.n	800a76a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2e      	ldr	r2, [pc, #184]	; (800a808 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a750:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a758:	431a      	orrs	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e046      	b.n	800a7f8 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295
 800a76e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	025b      	lsls	r3, r3, #9
 800a774:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a776:	2390      	movs	r3, #144	; 0x90
 800a778:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a77a:	2302      	movs	r3, #2
 800a77c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a77e:	2300      	movs	r3, #0
 800a780:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a782:	2301      	movs	r3, #1
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f107 0210 	add.w	r2, r7, #16
 800a78e:	4611      	mov	r1, r2
 800a790:	4618      	mov	r0, r3
 800a792:	f003 fa4b 	bl	800dc2c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d90a      	bls.n	800a7b2 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2282      	movs	r2, #130	; 0x82
 800a7a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f003 faaf 	bl	800dd0c <SDMMC_CmdReadMultiBlock>
 800a7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a7b0:	e009      	b.n	800a7c6 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2281      	movs	r2, #129	; 0x81
 800a7b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f003 fa82 	bl	800dcc8 <SDMMC_CmdReadSingleBlock>
 800a7c4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d012      	beq.n	800a7f2 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a0d      	ldr	r2, [pc, #52]	; (800a808 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e002      	b.n	800a7f8 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e000      	b.n	800a7f8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a7f6:	2302      	movs	r3, #2
  }
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3730      	adds	r7, #48	; 0x30
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	0800b1eb 	.word	0x0800b1eb
 800a804:	0800b25d 	.word	0x0800b25d
 800a808:	004005ff 	.word	0x004005ff
 800a80c:	4225858c 	.word	0x4225858c

0800a810 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08c      	sub	sp, #48	; 0x30
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d107      	bne.n	800a838 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e0ca      	b.n	800a9ce <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b01      	cmp	r3, #1
 800a842:	f040 80c3 	bne.w	800a9cc <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	441a      	add	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a856:	429a      	cmp	r2, r3
 800a858:	d907      	bls.n	800a86a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e0b1      	b.n	800a9ce <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2203      	movs	r2, #3
 800a86e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2200      	movs	r2, #0
 800a878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 021a 	orr.w	r2, r2, #26
 800a888:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88e:	4a52      	ldr	r2, [pc, #328]	; (800a9d8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a896:	4a51      	ldr	r2, [pc, #324]	; (800a9dc <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a898:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	2200      	movs	r2, #0
 800a8a0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d002      	beq.n	800a8b0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	025b      	lsls	r3, r3, #9
 800a8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f003 f9e3 	bl	800dc84 <SDMMC_CmdBlockLength>
 800a8be:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00f      	beq.n	800a8e6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a45      	ldr	r2, [pc, #276]	; (800a9e0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e073      	b.n	800a9ce <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d90a      	bls.n	800a902 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	22a0      	movs	r2, #160	; 0xa0
 800a8f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f003 fa4b 	bl	800dd94 <SDMMC_CmdWriteMultiBlock>
 800a8fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a900:	e009      	b.n	800a916 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2290      	movs	r2, #144	; 0x90
 800a906:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a90e:	4618      	mov	r0, r3
 800a910:	f003 fa1e 	bl	800dd50 <SDMMC_CmdWriteSingleBlock>
 800a914:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d012      	beq.n	800a942 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a2f      	ldr	r2, [pc, #188]	; (800a9e0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a922:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	431a      	orrs	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e045      	b.n	800a9ce <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a942:	4b28      	ldr	r3, [pc, #160]	; (800a9e4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a944:	2201      	movs	r2, #1
 800a946:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3380      	adds	r3, #128	; 0x80
 800a954:	461a      	mov	r2, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	025b      	lsls	r3, r3, #9
 800a95a:	089b      	lsrs	r3, r3, #2
 800a95c:	f7fd fab4 	bl	8007ec8 <HAL_DMA_Start_IT>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01a      	beq.n	800a99c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 021a 	bic.w	r2, r2, #26
 800a974:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a19      	ldr	r2, [pc, #100]	; (800a9e0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e018      	b.n	800a9ce <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a99c:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	025b      	lsls	r3, r3, #9
 800a9a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a9a8:	2390      	movs	r3, #144	; 0x90
 800a9aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f107 0210 	add.w	r2, r7, #16
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f003 f932 	bl	800dc2c <SDIO_ConfigData>

      return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e000      	b.n	800a9ce <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a9cc:	2302      	movs	r3, #2
  }
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3730      	adds	r7, #48	; 0x30
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800b1c1 	.word	0x0800b1c1
 800a9dc:	0800b25d 	.word	0x0800b25d
 800a9e0:	004005ff 	.word	0x004005ff
 800a9e4:	4225858c 	.word	0x4225858c

0800a9e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d008      	beq.n	800aa16 <HAL_SD_IRQHandler+0x2e>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f003 0308 	and.w	r3, r3, #8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 ffc8 	bl	800b9a4 <SD_Read_IT>
 800aa14:	e155      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 808f 	beq.w	800ab44 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6812      	ldr	r2, [r2, #0]
 800aa3a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800aa3e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800aa42:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 0201 	bic.w	r2, r2, #1
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f003 0308 	and.w	r3, r3, #8
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d039      	beq.n	800aad2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <HAL_SD_IRQHandler+0x8a>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d011      	beq.n	800aa96 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f003 f9ae 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800aa7c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d008      	beq.n	800aa96 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f91f 	bl	800acd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa9e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d104      	bne.n	800aac2 <HAL_SD_IRQHandler+0xda>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f003 0302 	and.w	r3, r3, #2
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f003 fe04 	bl	800e6d0 <HAL_SD_RxCpltCallback>
 800aac8:	e0fb      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f003 fdf6 	bl	800e6bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aad0:	e0f7      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80f2 	beq.w	800acc2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f003 0320 	and.w	r3, r3, #32
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d011      	beq.n	800ab0c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f003 f973 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800aaf2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f8e4 	bl	800acd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f040 80d5 	bne.w	800acc2 <HAL_SD_IRQHandler+0x2da>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f040 80cf 	bne.w	800acc2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 0208 	bic.w	r2, r2, #8
 800ab32:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f003 fdbd 	bl	800e6bc <HAL_SD_TxCpltCallback>
}
 800ab42:	e0be      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d008      	beq.n	800ab64 <HAL_SD_IRQHandler+0x17c>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f003 0308 	and.w	r3, r3, #8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 ff72 	bl	800ba46 <SD_Write_IT>
 800ab62:	e0ae      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 80a7 	beq.w	800acc2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	f043 0202 	orr.w	r2, r3, #2
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba0:	f043 0208 	orr.w	r2, r3, #8
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abba:	f043 0220 	orr.w	r2, r3, #32
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	f043 0210 	orr.w	r2, r3, #16
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f240 523a 	movw	r2, #1338	; 0x53a
 800abe4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800abf4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f003 f8ec 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800ac00:	4602      	mov	r2, r0
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	431a      	orrs	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f003 0308 	and.w	r3, r3, #8
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00a      	beq.n	800ac2c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f855 	bl	800acd4 <HAL_SD_ErrorCallback>
}
 800ac2a:	e04a      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d045      	beq.n	800acc2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f003 0310 	and.w	r3, r3, #16
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <HAL_SD_IRQHandler+0x262>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f003 0320 	and.w	r3, r3, #32
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d011      	beq.n	800ac6e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4e:	4a1f      	ldr	r2, [pc, #124]	; (800accc <HAL_SD_IRQHandler+0x2e4>)
 800ac50:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fd f98e 	bl	8007f78 <HAL_DMA_Abort_IT>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d02f      	beq.n	800acc2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 fb4a 	bl	800b300 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ac6c:	e029      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d104      	bne.n	800ac82 <HAL_SD_IRQHandler+0x29a>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d011      	beq.n	800aca6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	4a12      	ldr	r2, [pc, #72]	; (800acd0 <HAL_SD_IRQHandler+0x2e8>)
 800ac88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fd f972 	bl	8007f78 <HAL_DMA_Abort_IT>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d013      	beq.n	800acc2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fb65 	bl	800b36e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aca4:	e00d      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f003 fcf4 	bl	800e6a8 <HAL_SD_AbortCallback>
}
 800acc0:	e7ff      	b.n	800acc2 <HAL_SD_IRQHandler+0x2da>
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	0800b301 	.word	0x0800b301
 800acd0:	0800b36f 	.word	0x0800b36f

0800acd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acf6:	0f9b      	lsrs	r3, r3, #30
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad02:	0e9b      	lsrs	r3, r3, #26
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad14:	0e1b      	lsrs	r3, r3, #24
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad32:	0a1b      	lsrs	r3, r3, #8
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad48:	0d1b      	lsrs	r3, r3, #20
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad54:	0c1b      	lsrs	r3, r3, #16
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	f003 030f 	and.w	r3, r3, #15
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad66:	0bdb      	lsrs	r3, r3, #15
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad78:	0b9b      	lsrs	r3, r3, #14
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad8a:	0b5b      	lsrs	r3, r3, #13
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad9c:	0b1b      	lsrs	r3, r3, #12
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	2200      	movs	r2, #0
 800adae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d163      	bne.n	800ae80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adbc:	009a      	lsls	r2, r3, #2
 800adbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800adc2:	4013      	ands	r3, r2
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800adc8:	0f92      	lsrs	r2, r2, #30
 800adca:	431a      	orrs	r2, r3
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add4:	0edb      	lsrs	r3, r3, #27
 800add6:	b2db      	uxtb	r3, r3
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	b2da      	uxtb	r2, r3
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade6:	0e1b      	lsrs	r3, r3, #24
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f003 0307 	and.w	r3, r3, #7
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf8:	0d5b      	lsrs	r3, r3, #21
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae0a:	0c9b      	lsrs	r3, r3, #18
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1c:	0bdb      	lsrs	r3, r3, #15
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	7e1b      	ldrb	r3, [r3, #24]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	3302      	adds	r3, #2
 800ae40:	2201      	movs	r2, #1
 800ae42:	fa02 f303 	lsl.w	r3, r2, r3
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ae4a:	fb02 f203 	mul.w	r2, r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	7a1b      	ldrb	r3, [r3, #8]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	409a      	lsls	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ae6c:	0a52      	lsrs	r2, r2, #9
 800ae6e:	fb02 f203 	mul.w	r2, r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7c:	661a      	str	r2, [r3, #96]	; 0x60
 800ae7e:	e031      	b.n	800aee4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d11d      	bne.n	800aec4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae8c:	041b      	lsls	r3, r3, #16
 800ae8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae96:	0c1b      	lsrs	r3, r3, #16
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	3301      	adds	r3, #1
 800aea4:	029a      	lsls	r2, r3, #10
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	661a      	str	r2, [r3, #96]	; 0x60
 800aec2:	e00f      	b.n	800aee4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a58      	ldr	r2, [pc, #352]	; (800b02c <HAL_SD_GetCardCSD+0x344>)
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e09d      	b.n	800b020 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee8:	0b9b      	lsrs	r3, r3, #14
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefa:	09db      	lsrs	r3, r3, #7
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af02:	b2da      	uxtb	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	b2da      	uxtb	r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1c:	0fdb      	lsrs	r3, r3, #31
 800af1e:	b2da      	uxtb	r2, r3
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af28:	0f5b      	lsrs	r3, r3, #29
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	b2da      	uxtb	r2, r3
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3a:	0e9b      	lsrs	r3, r3, #26
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	f003 0307 	and.w	r3, r3, #7
 800af42:	b2da      	uxtb	r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4c:	0d9b      	lsrs	r3, r3, #22
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 030f 	and.w	r3, r3, #15
 800af54:	b2da      	uxtb	r2, r3
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5e:	0d5b      	lsrs	r3, r3, #21
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	b2da      	uxtb	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7a:	0c1b      	lsrs	r3, r3, #16
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8e:	0bdb      	lsrs	r3, r3, #15
 800af90:	b2db      	uxtb	r3, r3
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	b2da      	uxtb	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa2:	0b9b      	lsrs	r3, r3, #14
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb6:	0b5b      	lsrs	r3, r3, #13
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	0b1b      	lsrs	r3, r3, #12
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	b2da      	uxtb	r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afde:	0a9b      	lsrs	r3, r3, #10
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 0303 	and.w	r3, r3, #3
 800affa:	b2da      	uxtb	r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b006:	085b      	lsrs	r3, r3, #1
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	004005ff 	.word	0x004005ff

0800b030 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b088:	b5b0      	push	{r4, r5, r7, lr}
 800b08a:	b08e      	sub	sp, #56	; 0x38
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2203      	movs	r2, #3
 800b096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d02e      	beq.n	800b100 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0a8:	d106      	bne.n	800b0b8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	639a      	str	r2, [r3, #56]	; 0x38
 800b0b6:	e029      	b.n	800b10c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0be:	d10a      	bne.n	800b0d6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fb0f 	bl	800b6e4 <SD_WideBus_Enable>
 800b0c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38
 800b0d4:	e01a      	b.n	800b10c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fb4c 	bl	800b77a <SD_WideBus_Disable>
 800b0e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38
 800b0f0:	e00c      	b.n	800b10c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	639a      	str	r2, [r3, #56]	; 0x38
 800b0fe:	e005      	b.n	800b10c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a18      	ldr	r2, [pc, #96]	; (800b17c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b11a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e024      	b.n	800b172 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681d      	ldr	r5, [r3, #0]
 800b14e:	466c      	mov	r4, sp
 800b150:	f107 0318 	add.w	r3, r7, #24
 800b154:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b15c:	f107 030c 	add.w	r3, r7, #12
 800b160:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b162:	4628      	mov	r0, r5
 800b164:	f002 fcb2 	bl	800dacc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3728      	adds	r7, #40	; 0x28
 800b176:	46bd      	mov	sp, r7
 800b178:	bdb0      	pop	{r4, r5, r7, pc}
 800b17a:	bf00      	nop
 800b17c:	004005ff 	.word	0x004005ff

0800b180 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b18c:	f107 030c 	add.w	r3, r7, #12
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fa7e 	bl	800b694 <SD_SendStatus>
 800b198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	0a5b      	lsrs	r3, r3, #9
 800b1b0:	f003 030f 	and.w	r3, r3, #15
 800b1b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b1b6:	693b      	ldr	r3, [r7, #16]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fc:	2b82      	cmp	r3, #130	; 0x82
 800b1fe:	d111      	bne.n	800b224 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f002 fde7 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800b20a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	431a      	orrs	r2, r3
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff fd58 	bl	800acd4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f022 0208 	bic.w	r2, r2, #8
 800b232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f240 523a 	movw	r2, #1338	; 0x53a
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f003 fa3f 	bl	800e6d0 <HAL_SD_RxCpltCallback>
#endif
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7fd f830 	bl	80082d0 <HAL_DMA_GetError>
 800b270:	4603      	mov	r3, r0
 800b272:	2b02      	cmp	r3, #2
 800b274:	d03e      	beq.n	800b2f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b284:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d002      	beq.n	800b292 <SD_DMAError+0x36>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d12d      	bne.n	800b2ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a19      	ldr	r2, [pc, #100]	; (800b2fc <SD_DMAError+0xa0>)
 800b298:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b2a8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b2b6:	6978      	ldr	r0, [r7, #20]
 800b2b8:	f7ff ff62 	bl	800b180 <HAL_SD_GetCardState>
 800b2bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b06      	cmp	r3, #6
 800b2c2:	d002      	beq.n	800b2ca <SD_DMAError+0x6e>
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b05      	cmp	r3, #5
 800b2c8:	d10a      	bne.n	800b2e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f002 fd82 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b2ee:	6978      	ldr	r0, [r7, #20]
 800b2f0:	f7ff fcf0 	bl	800acd4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	004005ff 	.word	0x004005ff

0800b300 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f240 523a 	movw	r2, #1338	; 0x53a
 800b316:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff ff31 	bl	800b180 <HAL_SD_GetCardState>
 800b31e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b06      	cmp	r3, #6
 800b332:	d002      	beq.n	800b33a <SD_DMATxAbort+0x3a>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b05      	cmp	r3, #5
 800b338:	d10a      	bne.n	800b350 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f002 fd4a 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800b344:	4602      	mov	r2, r0
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	431a      	orrs	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	2b00      	cmp	r3, #0
 800b356:	d103      	bne.n	800b360 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f003 f9a5 	bl	800e6a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b35e:	e002      	b.n	800b366 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f7ff fcb7 	bl	800acd4 <HAL_SD_ErrorCallback>
}
 800b366:	bf00      	nop
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f240 523a 	movw	r2, #1338	; 0x53a
 800b384:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fefa 	bl	800b180 <HAL_SD_GetCardState>
 800b38c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b06      	cmp	r3, #6
 800b3a0:	d002      	beq.n	800b3a8 <SD_DMARxAbort+0x3a>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b05      	cmp	r3, #5
 800b3a6:	d10a      	bne.n	800b3be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f002 fd13 	bl	800ddd8 <SDMMC_CmdStopTransfer>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f003 f96e 	bl	800e6a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b3cc:	e002      	b.n	800b3d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff fc80 	bl	800acd4 <HAL_SD_ErrorCallback>
}
 800b3d4:	bf00      	nop
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b3dc:	b5b0      	push	{r4, r5, r7, lr}
 800b3de:	b094      	sub	sp, #80	; 0x50
 800b3e0:	af04      	add	r7, sp, #16
 800b3e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f002 fbc5 	bl	800db7c <SDIO_GetPowerState>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d102      	bne.n	800b3fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b3fc:	e0b7      	b.n	800b56e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	2b03      	cmp	r3, #3
 800b404:	d02f      	beq.n	800b466 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f002 fdee 	bl	800dfec <SDMMC_CmdSendCID>
 800b410:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <SD_InitCard+0x40>
    {
      return errorstate;
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	e0a8      	b.n	800b56e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2100      	movs	r1, #0
 800b422:	4618      	mov	r0, r3
 800b424:	f002 fbef 	bl	800dc06 <SDIO_GetResponse>
 800b428:	4602      	mov	r2, r0
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2104      	movs	r1, #4
 800b434:	4618      	mov	r0, r3
 800b436:	f002 fbe6 	bl	800dc06 <SDIO_GetResponse>
 800b43a:	4602      	mov	r2, r0
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2108      	movs	r1, #8
 800b446:	4618      	mov	r0, r3
 800b448:	f002 fbdd 	bl	800dc06 <SDIO_GetResponse>
 800b44c:	4602      	mov	r2, r0
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	210c      	movs	r1, #12
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 fbd4 	bl	800dc06 <SDIO_GetResponse>
 800b45e:	4602      	mov	r2, r0
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d00d      	beq.n	800b48a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f107 020e 	add.w	r2, r7, #14
 800b476:	4611      	mov	r1, r2
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fdf4 	bl	800e066 <SDMMC_CmdSetRelAdd>
 800b47e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <SD_InitCard+0xae>
    {
      return errorstate;
 800b486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b488:	e071      	b.n	800b56e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d036      	beq.n	800b500 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b492:	89fb      	ldrh	r3, [r7, #14]
 800b494:	461a      	mov	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f002 fdbe 	bl	800e028 <SDMMC_CmdSendCSD>
 800b4ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b6:	e05a      	b.n	800b56e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f002 fba1 	bl	800dc06 <SDIO_GetResponse>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2104      	movs	r1, #4
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f002 fb98 	bl	800dc06 <SDIO_GetResponse>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2108      	movs	r1, #8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f002 fb8f 	bl	800dc06 <SDIO_GetResponse>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	210c      	movs	r1, #12
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f002 fb86 	bl	800dc06 <SDIO_GetResponse>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2104      	movs	r1, #4
 800b506:	4618      	mov	r0, r3
 800b508:	f002 fb7d 	bl	800dc06 <SDIO_GetResponse>
 800b50c:	4603      	mov	r3, r0
 800b50e:	0d1a      	lsrs	r2, r3, #20
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b514:	f107 0310 	add.w	r3, r7, #16
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fbe4 	bl	800ace8 <HAL_SD_GetCardCSD>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b52a:	e020      	b.n	800b56e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6819      	ldr	r1, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b534:	041b      	lsls	r3, r3, #16
 800b536:	f04f 0400 	mov.w	r4, #0
 800b53a:	461a      	mov	r2, r3
 800b53c:	4623      	mov	r3, r4
 800b53e:	4608      	mov	r0, r1
 800b540:	f002 fc6c 	bl	800de1c <SDMMC_CmdSelDesel>
 800b544:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d001      	beq.n	800b550 <SD_InitCard+0x174>
  {
    return errorstate;
 800b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54e:	e00e      	b.n	800b56e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681d      	ldr	r5, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	466c      	mov	r4, sp
 800b558:	f103 0210 	add.w	r2, r3, #16
 800b55c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b55e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b562:	3304      	adds	r3, #4
 800b564:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b566:	4628      	mov	r0, r5
 800b568:	f002 fab0 	bl	800dacc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3740      	adds	r7, #64	; 0x40
 800b572:	46bd      	mov	sp, r7
 800b574:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b578 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	2300      	movs	r3, #0
 800b58a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f002 fc66 	bl	800de62 <SDMMC_CmdGoIdleState>
 800b596:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	e072      	b.n	800b688 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f002 fc79 	bl	800de9e <SDMMC_CmdOperCond>
 800b5ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00d      	beq.n	800b5d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f002 fc4f 	bl	800de62 <SDMMC_CmdGoIdleState>
 800b5c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	e05b      	b.n	800b688 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d137      	bne.n	800b64e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f002 fc79 	bl	800dedc <SDMMC_CmdAppCommand>
 800b5ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d02d      	beq.n	800b64e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b5f6:	e047      	b.n	800b688 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	4618      	mov	r0, r3
 800b600:	f002 fc6c 	bl	800dedc <SDMMC_CmdAppCommand>
 800b604:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <SD_PowerON+0x98>
    {
      return errorstate;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	e03b      	b.n	800b688 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	491e      	ldr	r1, [pc, #120]	; (800b690 <SD_PowerON+0x118>)
 800b616:	4618      	mov	r0, r3
 800b618:	f002 fc82 	bl	800df20 <SDMMC_CmdAppOperCommand>
 800b61c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b628:	e02e      	b.n	800b688 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f002 fae8 	bl	800dc06 <SDIO_GetResponse>
 800b636:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	0fdb      	lsrs	r3, r3, #31
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d101      	bne.n	800b644 <SD_PowerON+0xcc>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <SD_PowerON+0xce>
 800b644:	2300      	movs	r3, #0
 800b646:	613b      	str	r3, [r7, #16]

    count++;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	3301      	adds	r3, #1
 800b64c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b654:	4293      	cmp	r3, r2
 800b656:	d802      	bhi.n	800b65e <SD_PowerON+0xe6>
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0cc      	beq.n	800b5f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b664:	4293      	cmp	r3, r2
 800b666:	d902      	bls.n	800b66e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b66c:	e00c      	b.n	800b688 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d003      	beq.n	800b680 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	645a      	str	r2, [r3, #68]	; 0x44
 800b67e:	e002      	b.n	800b686 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	c1100000 	.word	0xc1100000

0800b694 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6a8:	e018      	b.n	800b6dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b2:	041b      	lsls	r3, r3, #16
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	f002 fcf6 	bl	800e0a8 <SDMMC_CmdSendStatus>
 800b6bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	e009      	b.n	800b6dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f002 fa99 	bl	800dc06 <SDIO_GetResponse>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f002 fa83 	bl	800dc06 <SDIO_GetResponse>
 800b700:	4603      	mov	r3, r0
 800b702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b70a:	d102      	bne.n	800b712 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b70c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b710:	e02f      	b.n	800b772 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b712:	f107 030c 	add.w	r3, r7, #12
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f879 	bl	800b810 <SD_FindSCR>
 800b71e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	e023      	b.n	800b772 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01c      	beq.n	800b76e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73c:	041b      	lsls	r3, r3, #16
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f002 fbcb 	bl	800dedc <SDMMC_CmdAppCommand>
 800b746:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	e00f      	b.n	800b772 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2102      	movs	r1, #2
 800b758:	4618      	mov	r0, r3
 800b75a:	f002 fc04 	bl	800df66 <SDMMC_CmdBusWidth>
 800b75e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	e003      	b.n	800b772 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e001      	b.n	800b772 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b76e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b086      	sub	sp, #24
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b782:	2300      	movs	r3, #0
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	2300      	movs	r3, #0
 800b788:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2100      	movs	r1, #0
 800b790:	4618      	mov	r0, r3
 800b792:	f002 fa38 	bl	800dc06 <SDIO_GetResponse>
 800b796:	4603      	mov	r3, r0
 800b798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b79c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7a0:	d102      	bne.n	800b7a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7a6:	e02f      	b.n	800b808 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7a8:	f107 030c 	add.w	r3, r7, #12
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f82e 	bl	800b810 <SD_FindSCR>
 800b7b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	e023      	b.n	800b808 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d01c      	beq.n	800b804 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d2:	041b      	lsls	r3, r3, #16
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f002 fb80 	bl	800dedc <SDMMC_CmdAppCommand>
 800b7dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	e00f      	b.n	800b808 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f002 fbb9 	bl	800df66 <SDMMC_CmdBusWidth>
 800b7f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	e003      	b.n	800b808 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b800:	2300      	movs	r3, #0
 800b802:	e001      	b.n	800b808 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b804:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b810:	b590      	push	{r4, r7, lr}
 800b812:	b08f      	sub	sp, #60	; 0x3c
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b81a:	f7fb fd63 	bl	80072e4 <HAL_GetTick>
 800b81e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b824:	2300      	movs	r3, #0
 800b826:	60bb      	str	r3, [r7, #8]
 800b828:	2300      	movs	r3, #0
 800b82a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2108      	movs	r1, #8
 800b836:	4618      	mov	r0, r3
 800b838:	f002 fa24 	bl	800dc84 <SDMMC_CmdBlockLength>
 800b83c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	e0a9      	b.n	800b99c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b850:	041b      	lsls	r3, r3, #16
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f002 fb41 	bl	800dedc <SDMMC_CmdAppCommand>
 800b85a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	e09a      	b.n	800b99c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
 800b86a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b86c:	2308      	movs	r3, #8
 800b86e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b870:	2330      	movs	r3, #48	; 0x30
 800b872:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b874:	2302      	movs	r3, #2
 800b876:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b878:	2300      	movs	r3, #0
 800b87a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f107 0210 	add.w	r2, r7, #16
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f002 f9ce 	bl	800dc2c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4618      	mov	r0, r3
 800b896:	f002 fb88 	bl	800dfaa <SDMMC_CmdSendSCR>
 800b89a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d022      	beq.n	800b8e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	e07a      	b.n	800b99c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00e      	beq.n	800b8d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6819      	ldr	r1, [r3, #0]
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	f107 0208 	add.w	r2, r7, #8
 800b8c0:	18d4      	adds	r4, r2, r3
 800b8c2:	4608      	mov	r0, r1
 800b8c4:	f002 f92d 	bl	800db22 <SDIO_ReadFIFO>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	6023      	str	r3, [r4, #0]
      index++;
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b8d2:	f7fb fd07 	bl	80072e4 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d102      	bne.n	800b8e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b8e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8e6:	e059      	b.n	800b99c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8ee:	f240 432a 	movw	r3, #1066	; 0x42a
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0d6      	beq.n	800b8a6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fe:	f003 0308 	and.w	r3, r3, #8
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2208      	movs	r2, #8
 800b90c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b90e:	2308      	movs	r3, #8
 800b910:	e044      	b.n	800b99c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b918:	f003 0302 	and.w	r3, r3, #2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2202      	movs	r2, #2
 800b926:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b928:	2302      	movs	r3, #2
 800b92a:	e037      	b.n	800b99c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b932:	f003 0320 	and.w	r3, r3, #32
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2220      	movs	r2, #32
 800b940:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b942:	2320      	movs	r3, #32
 800b944:	e02a      	b.n	800b99c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b94e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	061a      	lsls	r2, r3, #24
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b95c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	0a1b      	lsrs	r3, r3, #8
 800b962:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b966:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	0e1b      	lsrs	r3, r3, #24
 800b96c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	601a      	str	r2, [r3, #0]
    scr++;
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	3304      	adds	r3, #4
 800b976:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	061a      	lsls	r2, r3, #24
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	021b      	lsls	r3, r3, #8
 800b980:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b984:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	0a1b      	lsrs	r3, r3, #8
 800b98a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b98e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	0e1b      	lsrs	r3, r3, #24
 800b994:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	373c      	adds	r7, #60	; 0x3c
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd90      	pop	{r4, r7, pc}

0800b9a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d03f      	beq.n	800ba3e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	e033      	b.n	800ba2c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f002 f8aa 	bl	800db22 <SDIO_ReadFIFO>
 800b9ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	0a1b      	lsrs	r3, r3, #8
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	0c1b      	lsrs	r3, r3, #16
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3301      	adds	r3, #1
 800ba08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	0e1b      	lsrs	r3, r3, #24
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	617b      	str	r3, [r7, #20]
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2b07      	cmp	r3, #7
 800ba30:	d9c8      	bls.n	800b9c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ba3e:	bf00      	nop
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b086      	sub	sp, #24
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d043      	beq.n	800bae8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ba60:	2300      	movs	r3, #0
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	e037      	b.n	800bad6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	021a      	lsls	r2, r3, #8
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	041a      	lsls	r2, r3, #16
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3b01      	subs	r3, #1
 800baa6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	061a      	lsls	r2, r3, #24
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	3b01      	subs	r3, #1
 800babe:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f107 0208 	add.w	r2, r7, #8
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f002 f836 	bl	800db3c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	3301      	adds	r3, #1
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2b07      	cmp	r3, #7
 800bada:	d9c4      	bls.n	800ba66 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bae8:	bf00      	nop
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e056      	b.n	800bbb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7f9 fc8b 	bl	8005438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2202      	movs	r2, #2
 800bb26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	431a      	orrs	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	69db      	ldr	r3, [r3, #28]
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	ea42 0103 	orr.w	r1, r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	0c1b      	lsrs	r3, r3, #16
 800bb80:	f003 0104 	and.w	r1, r3, #4
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	69da      	ldr	r2, [r3, #28]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d101      	bne.n	800bbda <HAL_SPI_Transmit+0x22>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e11e      	b.n	800be18 <HAL_SPI_Transmit+0x260>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbe2:	f7fb fb7f 	bl	80072e4 <HAL_GetTick>
 800bbe6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bbe8:	88fb      	ldrh	r3, [r7, #6]
 800bbea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d002      	beq.n	800bbfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bbfc:	e103      	b.n	800be06 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <HAL_SPI_Transmit+0x52>
 800bc04:	88fb      	ldrh	r3, [r7, #6]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc0e:	e0fa      	b.n	800be06 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2203      	movs	r2, #3
 800bc14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	88fa      	ldrh	r2, [r7, #6]
 800bc28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	88fa      	ldrh	r2, [r7, #6]
 800bc2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc56:	d107      	bne.n	800bc68 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc72:	2b40      	cmp	r3, #64	; 0x40
 800bc74:	d007      	beq.n	800bc86 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc8e:	d14b      	bne.n	800bd28 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <HAL_SPI_Transmit+0xe6>
 800bc98:	8afb      	ldrh	r3, [r7, #22]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d13e      	bne.n	800bd1c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca2:	881a      	ldrh	r2, [r3, #0]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcae:	1c9a      	adds	r2, r3, #2
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bcc2:	e02b      	b.n	800bd1c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d112      	bne.n	800bcf8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd6:	881a      	ldrh	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce2:	1c9a      	adds	r2, r3, #2
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	86da      	strh	r2, [r3, #54]	; 0x36
 800bcf6:	e011      	b.n	800bd1c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcf8:	f7fb faf4 	bl	80072e4 <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d803      	bhi.n	800bd10 <HAL_SPI_Transmit+0x158>
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd0e:	d102      	bne.n	800bd16 <HAL_SPI_Transmit+0x15e>
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bd1a:	e074      	b.n	800be06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1ce      	bne.n	800bcc4 <HAL_SPI_Transmit+0x10c>
 800bd26:	e04c      	b.n	800bdc2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <HAL_SPI_Transmit+0x17e>
 800bd30:	8afb      	ldrh	r3, [r7, #22]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d140      	bne.n	800bdb8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	330c      	adds	r3, #12
 800bd40:	7812      	ldrb	r2, [r2, #0]
 800bd42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	3b01      	subs	r3, #1
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bd5c:	e02c      	b.n	800bdb8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d113      	bne.n	800bd94 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	330c      	adds	r3, #12
 800bd76:	7812      	ldrb	r2, [r2, #0]
 800bd78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	86da      	strh	r2, [r3, #54]	; 0x36
 800bd92:	e011      	b.n	800bdb8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd94:	f7fb faa6 	bl	80072e4 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d803      	bhi.n	800bdac <HAL_SPI_Transmit+0x1f4>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdaa:	d102      	bne.n	800bdb2 <HAL_SPI_Transmit+0x1fa>
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d102      	bne.n	800bdb8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bdb6:	e026      	b.n	800be06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1cd      	bne.n	800bd5e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdc2:	69ba      	ldr	r2, [r7, #24]
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 fba4 	bl	800c514 <SPI_EndRxTxTransaction>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10a      	bne.n	800bdf6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bde0:	2300      	movs	r3, #0
 800bde2:	613b      	str	r3, [r7, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	77fb      	strb	r3, [r7, #31]
 800be02:	e000      	b.n	800be06 <HAL_SPI_Transmit+0x24e>
  }

error:
 800be04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800be16:	7ffb      	ldrb	r3, [r7, #31]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	4613      	mov	r3, r2
 800be2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be3c:	d112      	bne.n	800be64 <HAL_SPI_Receive+0x44>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10e      	bne.n	800be64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2204      	movs	r2, #4
 800be4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800be4e:	88fa      	ldrh	r2, [r7, #6]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	4613      	mov	r3, r2
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f000 f8e9 	bl	800c032 <HAL_SPI_TransmitReceive>
 800be60:	4603      	mov	r3, r0
 800be62:	e0e2      	b.n	800c02a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d101      	bne.n	800be72 <HAL_SPI_Receive+0x52>
 800be6e:	2302      	movs	r3, #2
 800be70:	e0db      	b.n	800c02a <HAL_SPI_Receive+0x20a>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be7a:	f7fb fa33 	bl	80072e4 <HAL_GetTick>
 800be7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d002      	beq.n	800be92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800be8c:	2302      	movs	r3, #2
 800be8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be90:	e0c2      	b.n	800c018 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <HAL_SPI_Receive+0x7e>
 800be98:	88fb      	ldrh	r3, [r7, #6]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bea2:	e0b9      	b.n	800c018 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2204      	movs	r2, #4
 800bea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	88fa      	ldrh	r2, [r7, #6]
 800bebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	88fa      	ldrh	r2, [r7, #6]
 800bec2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beea:	d107      	bne.n	800befc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800befa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf06:	2b40      	cmp	r3, #64	; 0x40
 800bf08:	d007      	beq.n	800bf1a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d162      	bne.n	800bfe8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bf22:	e02e      	b.n	800bf82 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d115      	bne.n	800bf5e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f103 020c 	add.w	r2, r3, #12
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	b2d2      	uxtb	r2, r2
 800bf42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	3b01      	subs	r3, #1
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf5c:	e011      	b.n	800bf82 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf5e:	f7fb f9c1 	bl	80072e4 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d803      	bhi.n	800bf76 <HAL_SPI_Receive+0x156>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d102      	bne.n	800bf7c <HAL_SPI_Receive+0x15c>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bf80:	e04a      	b.n	800c018 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1cb      	bne.n	800bf24 <HAL_SPI_Receive+0x104>
 800bf8c:	e031      	b.n	800bff2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d113      	bne.n	800bfc4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68da      	ldr	r2, [r3, #12]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	b292      	uxth	r2, r2
 800bfa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfae:	1c9a      	adds	r2, r3, #2
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfc2:	e011      	b.n	800bfe8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfc4:	f7fb f98e 	bl	80072e4 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d803      	bhi.n	800bfdc <HAL_SPI_Receive+0x1bc>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfda:	d102      	bne.n	800bfe2 <HAL_SPI_Receive+0x1c2>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bfe6:	e017      	b.n	800c018 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1cd      	bne.n	800bf8e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f000 fa27 	bl	800c44a <SPI_EndRxTransaction>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2220      	movs	r2, #32
 800c006:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d002      	beq.n	800c016 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	75fb      	strb	r3, [r7, #23]
 800c014:	e000      	b.n	800c018 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c016:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c028:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b08c      	sub	sp, #48	; 0x30
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	60b9      	str	r1, [r7, #8]
 800c03c:	607a      	str	r2, [r7, #4]
 800c03e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c040:	2301      	movs	r3, #1
 800c042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <HAL_SPI_TransmitReceive+0x26>
 800c054:	2302      	movs	r3, #2
 800c056:	e18a      	b.n	800c36e <HAL_SPI_TransmitReceive+0x33c>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c060:	f7fb f940 	bl	80072e4 <HAL_GetTick>
 800c064:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c06c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c076:	887b      	ldrh	r3, [r7, #2]
 800c078:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c07a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d00f      	beq.n	800c0a2 <HAL_SPI_TransmitReceive+0x70>
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c088:	d107      	bne.n	800c09a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d103      	bne.n	800c09a <HAL_SPI_TransmitReceive+0x68>
 800c092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c096:	2b04      	cmp	r3, #4
 800c098:	d003      	beq.n	800c0a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c09a:	2302      	movs	r3, #2
 800c09c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c0a0:	e15b      	b.n	800c35a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d005      	beq.n	800c0b4 <HAL_SPI_TransmitReceive+0x82>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <HAL_SPI_TransmitReceive+0x82>
 800c0ae:	887b      	ldrh	r3, [r7, #2]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c0ba:	e14e      	b.n	800c35a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b04      	cmp	r3, #4
 800c0c6:	d003      	beq.n	800c0d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2205      	movs	r2, #5
 800c0cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	887a      	ldrh	r2, [r7, #2]
 800c0e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	887a      	ldrh	r2, [r7, #2]
 800c0e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	887a      	ldrh	r2, [r7, #2]
 800c0f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	887a      	ldrh	r2, [r7, #2]
 800c0f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b40      	cmp	r3, #64	; 0x40
 800c112:	d007      	beq.n	800c124 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c12c:	d178      	bne.n	800c220 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <HAL_SPI_TransmitReceive+0x10a>
 800c136:	8b7b      	ldrh	r3, [r7, #26]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d166      	bne.n	800c20a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c140:	881a      	ldrh	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14c:	1c9a      	adds	r2, r3, #2
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c156:	b29b      	uxth	r3, r3
 800c158:	3b01      	subs	r3, #1
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c160:	e053      	b.n	800c20a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d11b      	bne.n	800c1a8 <HAL_SPI_TransmitReceive+0x176>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c174:	b29b      	uxth	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d016      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0x176>
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d113      	bne.n	800c1a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c184:	881a      	ldrh	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c190:	1c9a      	adds	r2, r3, #2
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	3b01      	subs	r3, #1
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d119      	bne.n	800c1ea <HAL_SPI_TransmitReceive+0x1b8>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d014      	beq.n	800c1ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68da      	ldr	r2, [r3, #12]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	1c9a      	adds	r2, r3, #2
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c1ea:	f7fb f87b 	bl	80072e4 <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d807      	bhi.n	800c20a <HAL_SPI_TransmitReceive+0x1d8>
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c200:	d003      	beq.n	800c20a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c208:	e0a7      	b.n	800c35a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1a6      	bne.n	800c162 <HAL_SPI_TransmitReceive+0x130>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c218:	b29b      	uxth	r3, r3
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1a1      	bne.n	800c162 <HAL_SPI_TransmitReceive+0x130>
 800c21e:	e07c      	b.n	800c31a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <HAL_SPI_TransmitReceive+0x1fc>
 800c228:	8b7b      	ldrh	r3, [r7, #26]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d16b      	bne.n	800c306 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	330c      	adds	r3, #12
 800c238:	7812      	ldrb	r2, [r2, #0]
 800c23a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	3b01      	subs	r3, #1
 800c24e:	b29a      	uxth	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c254:	e057      	b.n	800c306 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f003 0302 	and.w	r3, r3, #2
 800c260:	2b02      	cmp	r3, #2
 800c262:	d11c      	bne.n	800c29e <HAL_SPI_TransmitReceive+0x26c>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c268:	b29b      	uxth	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d017      	beq.n	800c29e <HAL_SPI_TransmitReceive+0x26c>
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	2b01      	cmp	r3, #1
 800c272:	d114      	bne.n	800c29e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	330c      	adds	r3, #12
 800c27e:	7812      	ldrb	r2, [r2, #0]
 800c280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c286:	1c5a      	adds	r2, r3, #1
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c290:	b29b      	uxth	r3, r3
 800c292:	3b01      	subs	r3, #1
 800c294:	b29a      	uxth	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d119      	bne.n	800c2e0 <HAL_SPI_TransmitReceive+0x2ae>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d014      	beq.n	800c2e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c0:	b2d2      	uxtb	r2, r2
 800c2c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c2e0:	f7fb f800 	bl	80072e4 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d803      	bhi.n	800c2f8 <HAL_SPI_TransmitReceive+0x2c6>
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d102      	bne.n	800c2fe <HAL_SPI_TransmitReceive+0x2cc>
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d103      	bne.n	800c306 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c304:	e029      	b.n	800c35a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1a2      	bne.n	800c256 <HAL_SPI_TransmitReceive+0x224>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c314:	b29b      	uxth	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	d19d      	bne.n	800c256 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f8f8 	bl	800c514 <SPI_EndRxTxTransaction>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d006      	beq.n	800c338 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2220      	movs	r2, #32
 800c334:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c336:	e010      	b.n	800c35a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10b      	bne.n	800c358 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c340:	2300      	movs	r3, #0
 800c342:	617b      	str	r3, [r7, #20]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	617b      	str	r3, [r7, #20]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	e000      	b.n	800c35a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c36a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3730      	adds	r7, #48	; 0x30
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	4613      	mov	r3, r2
 800c384:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c386:	e04c      	b.n	800c422 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38e:	d048      	beq.n	800c422 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c390:	f7fa ffa8 	bl	80072e4 <HAL_GetTick>
 800c394:	4602      	mov	r2, r0
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d902      	bls.n	800c3a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d13d      	bne.n	800c422 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3be:	d111      	bne.n	800c3e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3c8:	d004      	beq.n	800c3d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d2:	d107      	bne.n	800c3e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ec:	d10f      	bne.n	800c40e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c40c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	e00f      	b.n	800c442 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	689a      	ldr	r2, [r3, #8]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4013      	ands	r3, r2
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	429a      	cmp	r2, r3
 800c430:	bf0c      	ite	eq
 800c432:	2301      	moveq	r3, #1
 800c434:	2300      	movne	r3, #0
 800c436:	b2db      	uxtb	r3, r3
 800c438:	461a      	mov	r2, r3
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d1a3      	bne.n	800c388 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b086      	sub	sp, #24
 800c44e:	af02      	add	r7, sp, #8
 800c450:	60f8      	str	r0, [r7, #12]
 800c452:	60b9      	str	r1, [r7, #8]
 800c454:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c45e:	d111      	bne.n	800c484 <SPI_EndRxTransaction+0x3a>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c468:	d004      	beq.n	800c474 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c472:	d107      	bne.n	800c484 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c482:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c48c:	d12a      	bne.n	800c4e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c496:	d012      	beq.n	800c4be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2180      	movs	r1, #128	; 0x80
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f7ff ff67 	bl	800c376 <SPI_WaitFlagStateUntilTimeout>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d02d      	beq.n	800c50a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b2:	f043 0220 	orr.w	r2, r3, #32
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e026      	b.n	800c50c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff ff54 	bl	800c376 <SPI_WaitFlagStateUntilTimeout>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01a      	beq.n	800c50a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d8:	f043 0220 	orr.w	r2, r3, #32
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e013      	b.n	800c50c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7ff ff41 	bl	800c376 <SPI_WaitFlagStateUntilTimeout>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d007      	beq.n	800c50a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fe:	f043 0220 	orr.w	r2, r3, #32
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e000      	b.n	800c50c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af02      	add	r7, sp, #8
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c520:	4b1b      	ldr	r3, [pc, #108]	; (800c590 <SPI_EndRxTxTransaction+0x7c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a1b      	ldr	r2, [pc, #108]	; (800c594 <SPI_EndRxTxTransaction+0x80>)
 800c526:	fba2 2303 	umull	r2, r3, r2, r3
 800c52a:	0d5b      	lsrs	r3, r3, #21
 800c52c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c530:	fb02 f303 	mul.w	r3, r2, r3
 800c534:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c53e:	d112      	bne.n	800c566 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2200      	movs	r2, #0
 800c548:	2180      	movs	r1, #128	; 0x80
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f7ff ff13 	bl	800c376 <SPI_WaitFlagStateUntilTimeout>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d016      	beq.n	800c584 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55a:	f043 0220 	orr.w	r2, r3, #32
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e00f      	b.n	800c586 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	3b01      	subs	r3, #1
 800c570:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c57c:	2b80      	cmp	r3, #128	; 0x80
 800c57e:	d0f2      	beq.n	800c566 <SPI_EndRxTxTransaction+0x52>
 800c580:	e000      	b.n	800c584 <SPI_EndRxTxTransaction+0x70>
        break;
 800c582:	bf00      	nop
  }

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000000 	.word	0x20000000
 800c594:	165e9f81 	.word	0x165e9f81

0800c598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e01d      	b.n	800c5e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7f8 fff6 	bl	80055b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	f000 fb56 	bl	800cc88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	68da      	ldr	r2, [r3, #12]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f042 0201 	orr.w	r2, r2, #1
 800c604:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	f003 0307 	and.w	r3, r3, #7
 800c610:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b06      	cmp	r3, #6
 800c616:	d007      	beq.n	800c628 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f042 0201 	orr.w	r2, r2, #1
 800c626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c644:	2301      	movs	r3, #1
 800c646:	e01d      	b.n	800c684 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7f8 ff33 	bl	80054c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2202      	movs	r2, #2
 800c666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3304      	adds	r3, #4
 800c672:	4619      	mov	r1, r3
 800c674:	4610      	mov	r0, r2
 800c676:	f000 fb07 	bl	800cc88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2201      	movs	r2, #1
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fd42 	bl	800d128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a15      	ldr	r2, [pc, #84]	; (800c700 <HAL_TIM_PWM_Start+0x74>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d004      	beq.n	800c6b8 <HAL_TIM_PWM_Start+0x2c>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a14      	ldr	r2, [pc, #80]	; (800c704 <HAL_TIM_PWM_Start+0x78>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d101      	bne.n	800c6bc <HAL_TIM_PWM_Start+0x30>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e000      	b.n	800c6be <HAL_TIM_PWM_Start+0x32>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	f003 0307 	and.w	r3, r3, #7
 800c6dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b06      	cmp	r3, #6
 800c6e2:	d007      	beq.n	800c6f4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f042 0201 	orr.w	r2, r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	40010000 	.word	0x40010000
 800c704:	40010400 	.word	0x40010400

0800c708 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e083      	b.n	800c824 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7f8 ffcd 	bl	80056d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2202      	movs	r2, #2
 800c73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	6812      	ldr	r2, [r2, #0]
 800c748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c74c:	f023 0307 	bic.w	r3, r3, #7
 800c750:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3304      	adds	r3, #4
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f000 fa93 	bl	800cc88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	699b      	ldr	r3, [r3, #24]
 800c770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	6a1b      	ldr	r3, [r3, #32]
 800c778:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	4313      	orrs	r3, r2
 800c782:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	4313      	orrs	r3, r2
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c7a8:	f023 030c 	bic.w	r3, r3, #12
 800c7ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68da      	ldr	r2, [r3, #12]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	021b      	lsls	r3, r3, #8
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	011a      	lsls	r2, r3, #4
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	031b      	lsls	r3, r3, #12
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c7e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c7ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <HAL_TIM_Encoder_Start+0x16>
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d008      	beq.n	800c852 <HAL_TIM_Encoder_Start+0x26>
 800c840:	e00f      	b.n	800c862 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2201      	movs	r2, #1
 800c848:	2100      	movs	r1, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 fc6c 	bl	800d128 <TIM_CCxChannelCmd>
      break;
 800c850:	e016      	b.n	800c880 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2201      	movs	r2, #1
 800c858:	2104      	movs	r1, #4
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fc64 	bl	800d128 <TIM_CCxChannelCmd>
      break;
 800c860:	e00e      	b.n	800c880 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2201      	movs	r2, #1
 800c868:	2100      	movs	r1, #0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 fc5c 	bl	800d128 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2201      	movs	r2, #1
 800c876:	2104      	movs	r1, #4
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fc55 	bl	800d128 <TIM_CCxChannelCmd>
      break;
 800c87e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f042 0201 	orr.w	r2, r2, #1
 800c88e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b082      	sub	sp, #8
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d122      	bne.n	800c8f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d11b      	bne.n	800c8f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f06f 0202 	mvn.w	r2, #2
 800c8c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	699b      	ldr	r3, [r3, #24]
 800c8d4:	f003 0303 	and.w	r3, r3, #3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f9b5 	bl	800cc4c <HAL_TIM_IC_CaptureCallback>
 800c8e2:	e005      	b.n	800c8f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f9a7 	bl	800cc38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f9b8 	bl	800cc60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	f003 0304 	and.w	r3, r3, #4
 800c900:	2b04      	cmp	r3, #4
 800c902:	d122      	bne.n	800c94a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f003 0304 	and.w	r3, r3, #4
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d11b      	bne.n	800c94a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f06f 0204 	mvn.w	r2, #4
 800c91a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f98b 	bl	800cc4c <HAL_TIM_IC_CaptureCallback>
 800c936:	e005      	b.n	800c944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f97d 	bl	800cc38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f98e 	bl	800cc60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	f003 0308 	and.w	r3, r3, #8
 800c954:	2b08      	cmp	r3, #8
 800c956:	d122      	bne.n	800c99e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	2b08      	cmp	r3, #8
 800c964:	d11b      	bne.n	800c99e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f06f 0208 	mvn.w	r2, #8
 800c96e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2204      	movs	r2, #4
 800c974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	69db      	ldr	r3, [r3, #28]
 800c97c:	f003 0303 	and.w	r3, r3, #3
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f961 	bl	800cc4c <HAL_TIM_IC_CaptureCallback>
 800c98a:	e005      	b.n	800c998 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f953 	bl	800cc38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f964 	bl	800cc60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	f003 0310 	and.w	r3, r3, #16
 800c9a8:	2b10      	cmp	r3, #16
 800c9aa:	d122      	bne.n	800c9f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	f003 0310 	and.w	r3, r3, #16
 800c9b6:	2b10      	cmp	r3, #16
 800c9b8:	d11b      	bne.n	800c9f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f06f 0210 	mvn.w	r2, #16
 800c9c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2208      	movs	r2, #8
 800c9c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d003      	beq.n	800c9e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f937 	bl	800cc4c <HAL_TIM_IC_CaptureCallback>
 800c9de:	e005      	b.n	800c9ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 f929 	bl	800cc38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f93a 	bl	800cc60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d10e      	bne.n	800ca1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d107      	bne.n	800ca1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f06f 0201 	mvn.w	r2, #1
 800ca16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7f7 fb31 	bl	8004080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca28:	2b80      	cmp	r3, #128	; 0x80
 800ca2a:	d10e      	bne.n	800ca4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca36:	2b80      	cmp	r3, #128	; 0x80
 800ca38:	d107      	bne.n	800ca4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fc6d 	bl	800d324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca54:	2b40      	cmp	r3, #64	; 0x40
 800ca56:	d10e      	bne.n	800ca76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca62:	2b40      	cmp	r3, #64	; 0x40
 800ca64:	d107      	bne.n	800ca76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f8ff 	bl	800cc74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d10e      	bne.n	800caa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	d107      	bne.n	800caa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f06f 0220 	mvn.w	r2, #32
 800ca9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 fc37 	bl	800d310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caa2:	bf00      	nop
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d101      	bne.n	800cac6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cac2:	2302      	movs	r3, #2
 800cac4:	e0b4      	b.n	800cc30 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2202      	movs	r2, #2
 800cad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b0c      	cmp	r3, #12
 800cada:	f200 809f 	bhi.w	800cc1c <HAL_TIM_PWM_ConfigChannel+0x170>
 800cade:	a201      	add	r2, pc, #4	; (adr r2, 800cae4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae4:	0800cb19 	.word	0x0800cb19
 800cae8:	0800cc1d 	.word	0x0800cc1d
 800caec:	0800cc1d 	.word	0x0800cc1d
 800caf0:	0800cc1d 	.word	0x0800cc1d
 800caf4:	0800cb59 	.word	0x0800cb59
 800caf8:	0800cc1d 	.word	0x0800cc1d
 800cafc:	0800cc1d 	.word	0x0800cc1d
 800cb00:	0800cc1d 	.word	0x0800cc1d
 800cb04:	0800cb9b 	.word	0x0800cb9b
 800cb08:	0800cc1d 	.word	0x0800cc1d
 800cb0c:	0800cc1d 	.word	0x0800cc1d
 800cb10:	0800cc1d 	.word	0x0800cc1d
 800cb14:	0800cbdb 	.word	0x0800cbdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 f952 	bl	800cdc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	699a      	ldr	r2, [r3, #24]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f042 0208 	orr.w	r2, r2, #8
 800cb32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	699a      	ldr	r2, [r3, #24]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0204 	bic.w	r2, r2, #4
 800cb42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6999      	ldr	r1, [r3, #24]
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	691a      	ldr	r2, [r3, #16]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	430a      	orrs	r2, r1
 800cb54:	619a      	str	r2, [r3, #24]
      break;
 800cb56:	e062      	b.n	800cc1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 f9a2 	bl	800cea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	699a      	ldr	r2, [r3, #24]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	699a      	ldr	r2, [r3, #24]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6999      	ldr	r1, [r3, #24]
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	021a      	lsls	r2, r3, #8
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	430a      	orrs	r2, r1
 800cb96:	619a      	str	r2, [r3, #24]
      break;
 800cb98:	e041      	b.n	800cc1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 f9f7 	bl	800cf94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f042 0208 	orr.w	r2, r2, #8
 800cbb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69da      	ldr	r2, [r3, #28]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0204 	bic.w	r2, r2, #4
 800cbc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69d9      	ldr	r1, [r3, #28]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	691a      	ldr	r2, [r3, #16]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	61da      	str	r2, [r3, #28]
      break;
 800cbd8:	e021      	b.n	800cc1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68b9      	ldr	r1, [r7, #8]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 fa4b 	bl	800d07c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	69da      	ldr	r2, [r3, #28]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	69da      	ldr	r2, [r3, #28]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69d9      	ldr	r1, [r3, #28]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	021a      	lsls	r2, r3, #8
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	61da      	str	r2, [r3, #28]
      break;
 800cc1a:	e000      	b.n	800cc1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cc1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc68:	bf00      	nop
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a40      	ldr	r2, [pc, #256]	; (800cd9c <TIM_Base_SetConfig+0x114>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d013      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca6:	d00f      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a3d      	ldr	r2, [pc, #244]	; (800cda0 <TIM_Base_SetConfig+0x118>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d00b      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a3c      	ldr	r2, [pc, #240]	; (800cda4 <TIM_Base_SetConfig+0x11c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d007      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a3b      	ldr	r2, [pc, #236]	; (800cda8 <TIM_Base_SetConfig+0x120>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d003      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a3a      	ldr	r2, [pc, #232]	; (800cdac <TIM_Base_SetConfig+0x124>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d108      	bne.n	800ccda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a2f      	ldr	r2, [pc, #188]	; (800cd9c <TIM_Base_SetConfig+0x114>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d02b      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce8:	d027      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a2c      	ldr	r2, [pc, #176]	; (800cda0 <TIM_Base_SetConfig+0x118>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d023      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a2b      	ldr	r2, [pc, #172]	; (800cda4 <TIM_Base_SetConfig+0x11c>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d01f      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a2a      	ldr	r2, [pc, #168]	; (800cda8 <TIM_Base_SetConfig+0x120>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d01b      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a29      	ldr	r2, [pc, #164]	; (800cdac <TIM_Base_SetConfig+0x124>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d017      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a28      	ldr	r2, [pc, #160]	; (800cdb0 <TIM_Base_SetConfig+0x128>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d013      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a27      	ldr	r2, [pc, #156]	; (800cdb4 <TIM_Base_SetConfig+0x12c>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00f      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a26      	ldr	r2, [pc, #152]	; (800cdb8 <TIM_Base_SetConfig+0x130>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00b      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a25      	ldr	r2, [pc, #148]	; (800cdbc <TIM_Base_SetConfig+0x134>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d007      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a24      	ldr	r2, [pc, #144]	; (800cdc0 <TIM_Base_SetConfig+0x138>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_Base_SetConfig+0xb2>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a23      	ldr	r2, [pc, #140]	; (800cdc4 <TIM_Base_SetConfig+0x13c>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d108      	bne.n	800cd4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	689a      	ldr	r2, [r3, #8]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <TIM_Base_SetConfig+0x114>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d003      	beq.n	800cd80 <TIM_Base_SetConfig+0xf8>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a0c      	ldr	r2, [pc, #48]	; (800cdac <TIM_Base_SetConfig+0x124>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d103      	bne.n	800cd88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	691a      	ldr	r2, [r3, #16]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	615a      	str	r2, [r3, #20]
}
 800cd8e:	bf00      	nop
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	40010000 	.word	0x40010000
 800cda0:	40000400 	.word	0x40000400
 800cda4:	40000800 	.word	0x40000800
 800cda8:	40000c00 	.word	0x40000c00
 800cdac:	40010400 	.word	0x40010400
 800cdb0:	40014000 	.word	0x40014000
 800cdb4:	40014400 	.word	0x40014400
 800cdb8:	40014800 	.word	0x40014800
 800cdbc:	40001800 	.word	0x40001800
 800cdc0:	40001c00 	.word	0x40001c00
 800cdc4:	40002000 	.word	0x40002000

0800cdc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	f023 0201 	bic.w	r2, r3, #1
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	f023 0302 	bic.w	r3, r3, #2
 800ce10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a20      	ldr	r2, [pc, #128]	; (800cea0 <TIM_OC1_SetConfig+0xd8>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d003      	beq.n	800ce2c <TIM_OC1_SetConfig+0x64>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a1f      	ldr	r2, [pc, #124]	; (800cea4 <TIM_OC1_SetConfig+0xdc>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d10c      	bne.n	800ce46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f023 0308 	bic.w	r3, r3, #8
 800ce32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f023 0304 	bic.w	r3, r3, #4
 800ce44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a15      	ldr	r2, [pc, #84]	; (800cea0 <TIM_OC1_SetConfig+0xd8>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d003      	beq.n	800ce56 <TIM_OC1_SetConfig+0x8e>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a14      	ldr	r2, [pc, #80]	; (800cea4 <TIM_OC1_SetConfig+0xdc>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d111      	bne.n	800ce7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	695b      	ldr	r3, [r3, #20]
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	693a      	ldr	r2, [r7, #16]
 800ce7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	685a      	ldr	r2, [r3, #4]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	621a      	str	r2, [r3, #32]
}
 800ce94:	bf00      	nop
 800ce96:	371c      	adds	r7, #28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	40010000 	.word	0x40010000
 800cea4:	40010400 	.word	0x40010400

0800cea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b087      	sub	sp, #28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	f023 0210 	bic.w	r2, r3, #16
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ced6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	021b      	lsls	r3, r3, #8
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f023 0320 	bic.w	r3, r3, #32
 800cef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	011b      	lsls	r3, r3, #4
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a22      	ldr	r2, [pc, #136]	; (800cf8c <TIM_OC2_SetConfig+0xe4>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d003      	beq.n	800cf10 <TIM_OC2_SetConfig+0x68>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a21      	ldr	r2, [pc, #132]	; (800cf90 <TIM_OC2_SetConfig+0xe8>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d10d      	bne.n	800cf2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a17      	ldr	r2, [pc, #92]	; (800cf8c <TIM_OC2_SetConfig+0xe4>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d003      	beq.n	800cf3c <TIM_OC2_SetConfig+0x94>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a16      	ldr	r2, [pc, #88]	; (800cf90 <TIM_OC2_SetConfig+0xe8>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d113      	bne.n	800cf64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	693a      	ldr	r2, [r7, #16]
 800cf60:	4313      	orrs	r3, r2
 800cf62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	621a      	str	r2, [r3, #32]
}
 800cf7e:	bf00      	nop
 800cf80:	371c      	adds	r7, #28
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	40010000 	.word	0x40010000
 800cf90:	40010400 	.word	0x40010400

0800cf94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	69db      	ldr	r3, [r3, #28]
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	021b      	lsls	r3, r3, #8
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a21      	ldr	r2, [pc, #132]	; (800d074 <TIM_OC3_SetConfig+0xe0>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d003      	beq.n	800cffa <TIM_OC3_SetConfig+0x66>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a20      	ldr	r2, [pc, #128]	; (800d078 <TIM_OC3_SetConfig+0xe4>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d10d      	bne.n	800d016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	021b      	lsls	r3, r3, #8
 800d008:	697a      	ldr	r2, [r7, #20]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a16      	ldr	r2, [pc, #88]	; (800d074 <TIM_OC3_SetConfig+0xe0>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d003      	beq.n	800d026 <TIM_OC3_SetConfig+0x92>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a15      	ldr	r2, [pc, #84]	; (800d078 <TIM_OC3_SetConfig+0xe4>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d113      	bne.n	800d04e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d02c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	011b      	lsls	r3, r3, #4
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	4313      	orrs	r3, r2
 800d040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	011b      	lsls	r3, r3, #4
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	685a      	ldr	r2, [r3, #4]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	697a      	ldr	r2, [r7, #20]
 800d066:	621a      	str	r2, [r3, #32]
}
 800d068:	bf00      	nop
 800d06a:	371c      	adds	r7, #28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	40010000 	.word	0x40010000
 800d078:	40010400 	.word	0x40010400

0800d07c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	69db      	ldr	r3, [r3, #28]
 800d0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	021b      	lsls	r3, r3, #8
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	031b      	lsls	r3, r3, #12
 800d0ce:	693a      	ldr	r2, [r7, #16]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a12      	ldr	r2, [pc, #72]	; (800d120 <TIM_OC4_SetConfig+0xa4>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d003      	beq.n	800d0e4 <TIM_OC4_SetConfig+0x68>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4a11      	ldr	r2, [pc, #68]	; (800d124 <TIM_OC4_SetConfig+0xa8>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d109      	bne.n	800d0f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	695b      	ldr	r3, [r3, #20]
 800d0f0:	019b      	lsls	r3, r3, #6
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	621a      	str	r2, [r3, #32]
}
 800d112:	bf00      	nop
 800d114:	371c      	adds	r7, #28
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	40010000 	.word	0x40010000
 800d124:	40010400 	.word	0x40010400

0800d128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f003 031f 	and.w	r3, r3, #31
 800d13a:	2201      	movs	r2, #1
 800d13c:	fa02 f303 	lsl.w	r3, r2, r3
 800d140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6a1a      	ldr	r2, [r3, #32]
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	43db      	mvns	r3, r3
 800d14a:	401a      	ands	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6a1a      	ldr	r2, [r3, #32]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	f003 031f 	and.w	r3, r3, #31
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	fa01 f303 	lsl.w	r3, r1, r3
 800d160:	431a      	orrs	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	621a      	str	r2, [r3, #32]
}
 800d166:	bf00      	nop
 800d168:	371c      	adds	r7, #28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
	...

0800d174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d184:	2b01      	cmp	r3, #1
 800d186:	d101      	bne.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d188:	2302      	movs	r3, #2
 800d18a:	e05a      	b.n	800d242 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2202      	movs	r2, #2
 800d198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a21      	ldr	r2, [pc, #132]	; (800d250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d022      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1d8:	d01d      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a1d      	ldr	r2, [pc, #116]	; (800d254 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d018      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1b      	ldr	r2, [pc, #108]	; (800d258 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d013      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a1a      	ldr	r2, [pc, #104]	; (800d25c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d00e      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a18      	ldr	r2, [pc, #96]	; (800d260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d009      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a17      	ldr	r2, [pc, #92]	; (800d264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d004      	beq.n	800d216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a15      	ldr	r2, [pc, #84]	; (800d268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d10c      	bne.n	800d230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d21c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	4313      	orrs	r3, r2
 800d226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68ba      	ldr	r2, [r7, #8]
 800d22e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	40010000 	.word	0x40010000
 800d254:	40000400 	.word	0x40000400
 800d258:	40000800 	.word	0x40000800
 800d25c:	40000c00 	.word	0x40000c00
 800d260:	40010400 	.word	0x40010400
 800d264:	40014000 	.word	0x40014000
 800d268:	40001800 	.word	0x40001800

0800d26c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d280:	2b01      	cmp	r3, #1
 800d282:	d101      	bne.n	800d288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d284:	2302      	movs	r3, #2
 800d286:	e03d      	b.n	800d304 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	69db      	ldr	r3, [r3, #28]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d318:	bf00      	nop
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	e03f      	b.n	800d3ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d350:	b2db      	uxtb	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d106      	bne.n	800d364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7f8 fae0 	bl	8005924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2224      	movs	r2, #36	; 0x24
 800d368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68da      	ldr	r2, [r3, #12]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d37a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f829 	bl	800d3d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	691a      	ldr	r2, [r3, #16]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	695a      	ldr	r2, [r3, #20]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68da      	ldr	r2, [r3, #12]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2220      	movs	r2, #32
 800d3c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
	...

0800d3d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d8:	b085      	sub	sp, #20
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68da      	ldr	r2, [r3, #12]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	430a      	orrs	r2, r1
 800d3f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	689a      	ldr	r2, [r3, #8]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	695b      	ldr	r3, [r3, #20]
 800d402:	431a      	orrs	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	69db      	ldr	r3, [r3, #28]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d416:	f023 030c 	bic.w	r3, r3, #12
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	6812      	ldr	r2, [r2, #0]
 800d41e:	68f9      	ldr	r1, [r7, #12]
 800d420:	430b      	orrs	r3, r1
 800d422:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	699a      	ldr	r2, [r3, #24]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d442:	f040 818b 	bne.w	800d75c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4ac1      	ldr	r2, [pc, #772]	; (800d750 <UART_SetConfig+0x37c>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d005      	beq.n	800d45c <UART_SetConfig+0x88>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4abf      	ldr	r2, [pc, #764]	; (800d754 <UART_SetConfig+0x380>)
 800d456:	4293      	cmp	r3, r2
 800d458:	f040 80bd 	bne.w	800d5d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d45c:	f7fc fbcc 	bl	8009bf8 <HAL_RCC_GetPCLK2Freq>
 800d460:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	461d      	mov	r5, r3
 800d466:	f04f 0600 	mov.w	r6, #0
 800d46a:	46a8      	mov	r8, r5
 800d46c:	46b1      	mov	r9, r6
 800d46e:	eb18 0308 	adds.w	r3, r8, r8
 800d472:	eb49 0409 	adc.w	r4, r9, r9
 800d476:	4698      	mov	r8, r3
 800d478:	46a1      	mov	r9, r4
 800d47a:	eb18 0805 	adds.w	r8, r8, r5
 800d47e:	eb49 0906 	adc.w	r9, r9, r6
 800d482:	f04f 0100 	mov.w	r1, #0
 800d486:	f04f 0200 	mov.w	r2, #0
 800d48a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d48e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d492:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d496:	4688      	mov	r8, r1
 800d498:	4691      	mov	r9, r2
 800d49a:	eb18 0005 	adds.w	r0, r8, r5
 800d49e:	eb49 0106 	adc.w	r1, r9, r6
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	461d      	mov	r5, r3
 800d4a8:	f04f 0600 	mov.w	r6, #0
 800d4ac:	196b      	adds	r3, r5, r5
 800d4ae:	eb46 0406 	adc.w	r4, r6, r6
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	f7f3 fbff 	bl	8000cb8 <__aeabi_uldivmod>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	460c      	mov	r4, r1
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4ba5      	ldr	r3, [pc, #660]	; (800d758 <UART_SetConfig+0x384>)
 800d4c2:	fba3 2302 	umull	r2, r3, r3, r2
 800d4c6:	095b      	lsrs	r3, r3, #5
 800d4c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	461d      	mov	r5, r3
 800d4d0:	f04f 0600 	mov.w	r6, #0
 800d4d4:	46a9      	mov	r9, r5
 800d4d6:	46b2      	mov	sl, r6
 800d4d8:	eb19 0309 	adds.w	r3, r9, r9
 800d4dc:	eb4a 040a 	adc.w	r4, sl, sl
 800d4e0:	4699      	mov	r9, r3
 800d4e2:	46a2      	mov	sl, r4
 800d4e4:	eb19 0905 	adds.w	r9, r9, r5
 800d4e8:	eb4a 0a06 	adc.w	sl, sl, r6
 800d4ec:	f04f 0100 	mov.w	r1, #0
 800d4f0:	f04f 0200 	mov.w	r2, #0
 800d4f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d4fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d500:	4689      	mov	r9, r1
 800d502:	4692      	mov	sl, r2
 800d504:	eb19 0005 	adds.w	r0, r9, r5
 800d508:	eb4a 0106 	adc.w	r1, sl, r6
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	461d      	mov	r5, r3
 800d512:	f04f 0600 	mov.w	r6, #0
 800d516:	196b      	adds	r3, r5, r5
 800d518:	eb46 0406 	adc.w	r4, r6, r6
 800d51c:	461a      	mov	r2, r3
 800d51e:	4623      	mov	r3, r4
 800d520:	f7f3 fbca 	bl	8000cb8 <__aeabi_uldivmod>
 800d524:	4603      	mov	r3, r0
 800d526:	460c      	mov	r4, r1
 800d528:	461a      	mov	r2, r3
 800d52a:	4b8b      	ldr	r3, [pc, #556]	; (800d758 <UART_SetConfig+0x384>)
 800d52c:	fba3 1302 	umull	r1, r3, r3, r2
 800d530:	095b      	lsrs	r3, r3, #5
 800d532:	2164      	movs	r1, #100	; 0x64
 800d534:	fb01 f303 	mul.w	r3, r1, r3
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	3332      	adds	r3, #50	; 0x32
 800d53e:	4a86      	ldr	r2, [pc, #536]	; (800d758 <UART_SetConfig+0x384>)
 800d540:	fba2 2303 	umull	r2, r3, r2, r3
 800d544:	095b      	lsrs	r3, r3, #5
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d54c:	4498      	add	r8, r3
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	461d      	mov	r5, r3
 800d552:	f04f 0600 	mov.w	r6, #0
 800d556:	46a9      	mov	r9, r5
 800d558:	46b2      	mov	sl, r6
 800d55a:	eb19 0309 	adds.w	r3, r9, r9
 800d55e:	eb4a 040a 	adc.w	r4, sl, sl
 800d562:	4699      	mov	r9, r3
 800d564:	46a2      	mov	sl, r4
 800d566:	eb19 0905 	adds.w	r9, r9, r5
 800d56a:	eb4a 0a06 	adc.w	sl, sl, r6
 800d56e:	f04f 0100 	mov.w	r1, #0
 800d572:	f04f 0200 	mov.w	r2, #0
 800d576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d57a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d57e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d582:	4689      	mov	r9, r1
 800d584:	4692      	mov	sl, r2
 800d586:	eb19 0005 	adds.w	r0, r9, r5
 800d58a:	eb4a 0106 	adc.w	r1, sl, r6
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	461d      	mov	r5, r3
 800d594:	f04f 0600 	mov.w	r6, #0
 800d598:	196b      	adds	r3, r5, r5
 800d59a:	eb46 0406 	adc.w	r4, r6, r6
 800d59e:	461a      	mov	r2, r3
 800d5a0:	4623      	mov	r3, r4
 800d5a2:	f7f3 fb89 	bl	8000cb8 <__aeabi_uldivmod>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	4b6a      	ldr	r3, [pc, #424]	; (800d758 <UART_SetConfig+0x384>)
 800d5ae:	fba3 1302 	umull	r1, r3, r3, r2
 800d5b2:	095b      	lsrs	r3, r3, #5
 800d5b4:	2164      	movs	r1, #100	; 0x64
 800d5b6:	fb01 f303 	mul.w	r3, r1, r3
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	00db      	lsls	r3, r3, #3
 800d5be:	3332      	adds	r3, #50	; 0x32
 800d5c0:	4a65      	ldr	r2, [pc, #404]	; (800d758 <UART_SetConfig+0x384>)
 800d5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5c6:	095b      	lsrs	r3, r3, #5
 800d5c8:	f003 0207 	and.w	r2, r3, #7
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4442      	add	r2, r8
 800d5d2:	609a      	str	r2, [r3, #8]
 800d5d4:	e26f      	b.n	800dab6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d5d6:	f7fc fafb 	bl	8009bd0 <HAL_RCC_GetPCLK1Freq>
 800d5da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	461d      	mov	r5, r3
 800d5e0:	f04f 0600 	mov.w	r6, #0
 800d5e4:	46a8      	mov	r8, r5
 800d5e6:	46b1      	mov	r9, r6
 800d5e8:	eb18 0308 	adds.w	r3, r8, r8
 800d5ec:	eb49 0409 	adc.w	r4, r9, r9
 800d5f0:	4698      	mov	r8, r3
 800d5f2:	46a1      	mov	r9, r4
 800d5f4:	eb18 0805 	adds.w	r8, r8, r5
 800d5f8:	eb49 0906 	adc.w	r9, r9, r6
 800d5fc:	f04f 0100 	mov.w	r1, #0
 800d600:	f04f 0200 	mov.w	r2, #0
 800d604:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d608:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d60c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d610:	4688      	mov	r8, r1
 800d612:	4691      	mov	r9, r2
 800d614:	eb18 0005 	adds.w	r0, r8, r5
 800d618:	eb49 0106 	adc.w	r1, r9, r6
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	461d      	mov	r5, r3
 800d622:	f04f 0600 	mov.w	r6, #0
 800d626:	196b      	adds	r3, r5, r5
 800d628:	eb46 0406 	adc.w	r4, r6, r6
 800d62c:	461a      	mov	r2, r3
 800d62e:	4623      	mov	r3, r4
 800d630:	f7f3 fb42 	bl	8000cb8 <__aeabi_uldivmod>
 800d634:	4603      	mov	r3, r0
 800d636:	460c      	mov	r4, r1
 800d638:	461a      	mov	r2, r3
 800d63a:	4b47      	ldr	r3, [pc, #284]	; (800d758 <UART_SetConfig+0x384>)
 800d63c:	fba3 2302 	umull	r2, r3, r3, r2
 800d640:	095b      	lsrs	r3, r3, #5
 800d642:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	461d      	mov	r5, r3
 800d64a:	f04f 0600 	mov.w	r6, #0
 800d64e:	46a9      	mov	r9, r5
 800d650:	46b2      	mov	sl, r6
 800d652:	eb19 0309 	adds.w	r3, r9, r9
 800d656:	eb4a 040a 	adc.w	r4, sl, sl
 800d65a:	4699      	mov	r9, r3
 800d65c:	46a2      	mov	sl, r4
 800d65e:	eb19 0905 	adds.w	r9, r9, r5
 800d662:	eb4a 0a06 	adc.w	sl, sl, r6
 800d666:	f04f 0100 	mov.w	r1, #0
 800d66a:	f04f 0200 	mov.w	r2, #0
 800d66e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d672:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d676:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d67a:	4689      	mov	r9, r1
 800d67c:	4692      	mov	sl, r2
 800d67e:	eb19 0005 	adds.w	r0, r9, r5
 800d682:	eb4a 0106 	adc.w	r1, sl, r6
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	461d      	mov	r5, r3
 800d68c:	f04f 0600 	mov.w	r6, #0
 800d690:	196b      	adds	r3, r5, r5
 800d692:	eb46 0406 	adc.w	r4, r6, r6
 800d696:	461a      	mov	r2, r3
 800d698:	4623      	mov	r3, r4
 800d69a:	f7f3 fb0d 	bl	8000cb8 <__aeabi_uldivmod>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	4b2c      	ldr	r3, [pc, #176]	; (800d758 <UART_SetConfig+0x384>)
 800d6a6:	fba3 1302 	umull	r1, r3, r3, r2
 800d6aa:	095b      	lsrs	r3, r3, #5
 800d6ac:	2164      	movs	r1, #100	; 0x64
 800d6ae:	fb01 f303 	mul.w	r3, r1, r3
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	3332      	adds	r3, #50	; 0x32
 800d6b8:	4a27      	ldr	r2, [pc, #156]	; (800d758 <UART_SetConfig+0x384>)
 800d6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d6be:	095b      	lsrs	r3, r3, #5
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d6c6:	4498      	add	r8, r3
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	461d      	mov	r5, r3
 800d6cc:	f04f 0600 	mov.w	r6, #0
 800d6d0:	46a9      	mov	r9, r5
 800d6d2:	46b2      	mov	sl, r6
 800d6d4:	eb19 0309 	adds.w	r3, r9, r9
 800d6d8:	eb4a 040a 	adc.w	r4, sl, sl
 800d6dc:	4699      	mov	r9, r3
 800d6de:	46a2      	mov	sl, r4
 800d6e0:	eb19 0905 	adds.w	r9, r9, r5
 800d6e4:	eb4a 0a06 	adc.w	sl, sl, r6
 800d6e8:	f04f 0100 	mov.w	r1, #0
 800d6ec:	f04f 0200 	mov.w	r2, #0
 800d6f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d6f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d6f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d6fc:	4689      	mov	r9, r1
 800d6fe:	4692      	mov	sl, r2
 800d700:	eb19 0005 	adds.w	r0, r9, r5
 800d704:	eb4a 0106 	adc.w	r1, sl, r6
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	461d      	mov	r5, r3
 800d70e:	f04f 0600 	mov.w	r6, #0
 800d712:	196b      	adds	r3, r5, r5
 800d714:	eb46 0406 	adc.w	r4, r6, r6
 800d718:	461a      	mov	r2, r3
 800d71a:	4623      	mov	r3, r4
 800d71c:	f7f3 facc 	bl	8000cb8 <__aeabi_uldivmod>
 800d720:	4603      	mov	r3, r0
 800d722:	460c      	mov	r4, r1
 800d724:	461a      	mov	r2, r3
 800d726:	4b0c      	ldr	r3, [pc, #48]	; (800d758 <UART_SetConfig+0x384>)
 800d728:	fba3 1302 	umull	r1, r3, r3, r2
 800d72c:	095b      	lsrs	r3, r3, #5
 800d72e:	2164      	movs	r1, #100	; 0x64
 800d730:	fb01 f303 	mul.w	r3, r1, r3
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	3332      	adds	r3, #50	; 0x32
 800d73a:	4a07      	ldr	r2, [pc, #28]	; (800d758 <UART_SetConfig+0x384>)
 800d73c:	fba2 2303 	umull	r2, r3, r2, r3
 800d740:	095b      	lsrs	r3, r3, #5
 800d742:	f003 0207 	and.w	r2, r3, #7
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4442      	add	r2, r8
 800d74c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d74e:	e1b2      	b.n	800dab6 <UART_SetConfig+0x6e2>
 800d750:	40011000 	.word	0x40011000
 800d754:	40011400 	.word	0x40011400
 800d758:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4ad7      	ldr	r2, [pc, #860]	; (800dac0 <UART_SetConfig+0x6ec>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d005      	beq.n	800d772 <UART_SetConfig+0x39e>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4ad6      	ldr	r2, [pc, #856]	; (800dac4 <UART_SetConfig+0x6f0>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	f040 80d1 	bne.w	800d914 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d772:	f7fc fa41 	bl	8009bf8 <HAL_RCC_GetPCLK2Freq>
 800d776:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	469a      	mov	sl, r3
 800d77c:	f04f 0b00 	mov.w	fp, #0
 800d780:	46d0      	mov	r8, sl
 800d782:	46d9      	mov	r9, fp
 800d784:	eb18 0308 	adds.w	r3, r8, r8
 800d788:	eb49 0409 	adc.w	r4, r9, r9
 800d78c:	4698      	mov	r8, r3
 800d78e:	46a1      	mov	r9, r4
 800d790:	eb18 080a 	adds.w	r8, r8, sl
 800d794:	eb49 090b 	adc.w	r9, r9, fp
 800d798:	f04f 0100 	mov.w	r1, #0
 800d79c:	f04f 0200 	mov.w	r2, #0
 800d7a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d7a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d7a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d7ac:	4688      	mov	r8, r1
 800d7ae:	4691      	mov	r9, r2
 800d7b0:	eb1a 0508 	adds.w	r5, sl, r8
 800d7b4:	eb4b 0609 	adc.w	r6, fp, r9
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f04f 0200 	mov.w	r2, #0
 800d7c2:	f04f 0300 	mov.w	r3, #0
 800d7c6:	f04f 0400 	mov.w	r4, #0
 800d7ca:	0094      	lsls	r4, r2, #2
 800d7cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7d0:	008b      	lsls	r3, r1, #2
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	4623      	mov	r3, r4
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	4631      	mov	r1, r6
 800d7da:	f7f3 fa6d 	bl	8000cb8 <__aeabi_uldivmod>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	4bb8      	ldr	r3, [pc, #736]	; (800dac8 <UART_SetConfig+0x6f4>)
 800d7e6:	fba3 2302 	umull	r2, r3, r3, r2
 800d7ea:	095b      	lsrs	r3, r3, #5
 800d7ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	469b      	mov	fp, r3
 800d7f4:	f04f 0c00 	mov.w	ip, #0
 800d7f8:	46d9      	mov	r9, fp
 800d7fa:	46e2      	mov	sl, ip
 800d7fc:	eb19 0309 	adds.w	r3, r9, r9
 800d800:	eb4a 040a 	adc.w	r4, sl, sl
 800d804:	4699      	mov	r9, r3
 800d806:	46a2      	mov	sl, r4
 800d808:	eb19 090b 	adds.w	r9, r9, fp
 800d80c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d810:	f04f 0100 	mov.w	r1, #0
 800d814:	f04f 0200 	mov.w	r2, #0
 800d818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d81c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d824:	4689      	mov	r9, r1
 800d826:	4692      	mov	sl, r2
 800d828:	eb1b 0509 	adds.w	r5, fp, r9
 800d82c:	eb4c 060a 	adc.w	r6, ip, sl
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	4619      	mov	r1, r3
 800d836:	f04f 0200 	mov.w	r2, #0
 800d83a:	f04f 0300 	mov.w	r3, #0
 800d83e:	f04f 0400 	mov.w	r4, #0
 800d842:	0094      	lsls	r4, r2, #2
 800d844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d848:	008b      	lsls	r3, r1, #2
 800d84a:	461a      	mov	r2, r3
 800d84c:	4623      	mov	r3, r4
 800d84e:	4628      	mov	r0, r5
 800d850:	4631      	mov	r1, r6
 800d852:	f7f3 fa31 	bl	8000cb8 <__aeabi_uldivmod>
 800d856:	4603      	mov	r3, r0
 800d858:	460c      	mov	r4, r1
 800d85a:	461a      	mov	r2, r3
 800d85c:	4b9a      	ldr	r3, [pc, #616]	; (800dac8 <UART_SetConfig+0x6f4>)
 800d85e:	fba3 1302 	umull	r1, r3, r3, r2
 800d862:	095b      	lsrs	r3, r3, #5
 800d864:	2164      	movs	r1, #100	; 0x64
 800d866:	fb01 f303 	mul.w	r3, r1, r3
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	011b      	lsls	r3, r3, #4
 800d86e:	3332      	adds	r3, #50	; 0x32
 800d870:	4a95      	ldr	r2, [pc, #596]	; (800dac8 <UART_SetConfig+0x6f4>)
 800d872:	fba2 2303 	umull	r2, r3, r2, r3
 800d876:	095b      	lsrs	r3, r3, #5
 800d878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d87c:	4498      	add	r8, r3
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	469b      	mov	fp, r3
 800d882:	f04f 0c00 	mov.w	ip, #0
 800d886:	46d9      	mov	r9, fp
 800d888:	46e2      	mov	sl, ip
 800d88a:	eb19 0309 	adds.w	r3, r9, r9
 800d88e:	eb4a 040a 	adc.w	r4, sl, sl
 800d892:	4699      	mov	r9, r3
 800d894:	46a2      	mov	sl, r4
 800d896:	eb19 090b 	adds.w	r9, r9, fp
 800d89a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d89e:	f04f 0100 	mov.w	r1, #0
 800d8a2:	f04f 0200 	mov.w	r2, #0
 800d8a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d8ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d8b2:	4689      	mov	r9, r1
 800d8b4:	4692      	mov	sl, r2
 800d8b6:	eb1b 0509 	adds.w	r5, fp, r9
 800d8ba:	eb4c 060a 	adc.w	r6, ip, sl
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	f04f 0200 	mov.w	r2, #0
 800d8c8:	f04f 0300 	mov.w	r3, #0
 800d8cc:	f04f 0400 	mov.w	r4, #0
 800d8d0:	0094      	lsls	r4, r2, #2
 800d8d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d8d6:	008b      	lsls	r3, r1, #2
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4623      	mov	r3, r4
 800d8dc:	4628      	mov	r0, r5
 800d8de:	4631      	mov	r1, r6
 800d8e0:	f7f3 f9ea 	bl	8000cb8 <__aeabi_uldivmod>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	460c      	mov	r4, r1
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	4b77      	ldr	r3, [pc, #476]	; (800dac8 <UART_SetConfig+0x6f4>)
 800d8ec:	fba3 1302 	umull	r1, r3, r3, r2
 800d8f0:	095b      	lsrs	r3, r3, #5
 800d8f2:	2164      	movs	r1, #100	; 0x64
 800d8f4:	fb01 f303 	mul.w	r3, r1, r3
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	011b      	lsls	r3, r3, #4
 800d8fc:	3332      	adds	r3, #50	; 0x32
 800d8fe:	4a72      	ldr	r2, [pc, #456]	; (800dac8 <UART_SetConfig+0x6f4>)
 800d900:	fba2 2303 	umull	r2, r3, r2, r3
 800d904:	095b      	lsrs	r3, r3, #5
 800d906:	f003 020f 	and.w	r2, r3, #15
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4442      	add	r2, r8
 800d910:	609a      	str	r2, [r3, #8]
 800d912:	e0d0      	b.n	800dab6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d914:	f7fc f95c 	bl	8009bd0 <HAL_RCC_GetPCLK1Freq>
 800d918:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	469a      	mov	sl, r3
 800d91e:	f04f 0b00 	mov.w	fp, #0
 800d922:	46d0      	mov	r8, sl
 800d924:	46d9      	mov	r9, fp
 800d926:	eb18 0308 	adds.w	r3, r8, r8
 800d92a:	eb49 0409 	adc.w	r4, r9, r9
 800d92e:	4698      	mov	r8, r3
 800d930:	46a1      	mov	r9, r4
 800d932:	eb18 080a 	adds.w	r8, r8, sl
 800d936:	eb49 090b 	adc.w	r9, r9, fp
 800d93a:	f04f 0100 	mov.w	r1, #0
 800d93e:	f04f 0200 	mov.w	r2, #0
 800d942:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d946:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d94a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d94e:	4688      	mov	r8, r1
 800d950:	4691      	mov	r9, r2
 800d952:	eb1a 0508 	adds.w	r5, sl, r8
 800d956:	eb4b 0609 	adc.w	r6, fp, r9
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	4619      	mov	r1, r3
 800d960:	f04f 0200 	mov.w	r2, #0
 800d964:	f04f 0300 	mov.w	r3, #0
 800d968:	f04f 0400 	mov.w	r4, #0
 800d96c:	0094      	lsls	r4, r2, #2
 800d96e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d972:	008b      	lsls	r3, r1, #2
 800d974:	461a      	mov	r2, r3
 800d976:	4623      	mov	r3, r4
 800d978:	4628      	mov	r0, r5
 800d97a:	4631      	mov	r1, r6
 800d97c:	f7f3 f99c 	bl	8000cb8 <__aeabi_uldivmod>
 800d980:	4603      	mov	r3, r0
 800d982:	460c      	mov	r4, r1
 800d984:	461a      	mov	r2, r3
 800d986:	4b50      	ldr	r3, [pc, #320]	; (800dac8 <UART_SetConfig+0x6f4>)
 800d988:	fba3 2302 	umull	r2, r3, r3, r2
 800d98c:	095b      	lsrs	r3, r3, #5
 800d98e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	469b      	mov	fp, r3
 800d996:	f04f 0c00 	mov.w	ip, #0
 800d99a:	46d9      	mov	r9, fp
 800d99c:	46e2      	mov	sl, ip
 800d99e:	eb19 0309 	adds.w	r3, r9, r9
 800d9a2:	eb4a 040a 	adc.w	r4, sl, sl
 800d9a6:	4699      	mov	r9, r3
 800d9a8:	46a2      	mov	sl, r4
 800d9aa:	eb19 090b 	adds.w	r9, r9, fp
 800d9ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d9b2:	f04f 0100 	mov.w	r1, #0
 800d9b6:	f04f 0200 	mov.w	r2, #0
 800d9ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d9be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d9c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d9c6:	4689      	mov	r9, r1
 800d9c8:	4692      	mov	sl, r2
 800d9ca:	eb1b 0509 	adds.w	r5, fp, r9
 800d9ce:	eb4c 060a 	adc.w	r6, ip, sl
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	f04f 0200 	mov.w	r2, #0
 800d9dc:	f04f 0300 	mov.w	r3, #0
 800d9e0:	f04f 0400 	mov.w	r4, #0
 800d9e4:	0094      	lsls	r4, r2, #2
 800d9e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d9ea:	008b      	lsls	r3, r1, #2
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	4623      	mov	r3, r4
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	f7f3 f960 	bl	8000cb8 <__aeabi_uldivmod>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	4b32      	ldr	r3, [pc, #200]	; (800dac8 <UART_SetConfig+0x6f4>)
 800da00:	fba3 1302 	umull	r1, r3, r3, r2
 800da04:	095b      	lsrs	r3, r3, #5
 800da06:	2164      	movs	r1, #100	; 0x64
 800da08:	fb01 f303 	mul.w	r3, r1, r3
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	011b      	lsls	r3, r3, #4
 800da10:	3332      	adds	r3, #50	; 0x32
 800da12:	4a2d      	ldr	r2, [pc, #180]	; (800dac8 <UART_SetConfig+0x6f4>)
 800da14:	fba2 2303 	umull	r2, r3, r2, r3
 800da18:	095b      	lsrs	r3, r3, #5
 800da1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da1e:	4498      	add	r8, r3
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	469b      	mov	fp, r3
 800da24:	f04f 0c00 	mov.w	ip, #0
 800da28:	46d9      	mov	r9, fp
 800da2a:	46e2      	mov	sl, ip
 800da2c:	eb19 0309 	adds.w	r3, r9, r9
 800da30:	eb4a 040a 	adc.w	r4, sl, sl
 800da34:	4699      	mov	r9, r3
 800da36:	46a2      	mov	sl, r4
 800da38:	eb19 090b 	adds.w	r9, r9, fp
 800da3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800da40:	f04f 0100 	mov.w	r1, #0
 800da44:	f04f 0200 	mov.w	r2, #0
 800da48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800da50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800da54:	4689      	mov	r9, r1
 800da56:	4692      	mov	sl, r2
 800da58:	eb1b 0509 	adds.w	r5, fp, r9
 800da5c:	eb4c 060a 	adc.w	r6, ip, sl
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	4619      	mov	r1, r3
 800da66:	f04f 0200 	mov.w	r2, #0
 800da6a:	f04f 0300 	mov.w	r3, #0
 800da6e:	f04f 0400 	mov.w	r4, #0
 800da72:	0094      	lsls	r4, r2, #2
 800da74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800da78:	008b      	lsls	r3, r1, #2
 800da7a:	461a      	mov	r2, r3
 800da7c:	4623      	mov	r3, r4
 800da7e:	4628      	mov	r0, r5
 800da80:	4631      	mov	r1, r6
 800da82:	f7f3 f919 	bl	8000cb8 <__aeabi_uldivmod>
 800da86:	4603      	mov	r3, r0
 800da88:	460c      	mov	r4, r1
 800da8a:	461a      	mov	r2, r3
 800da8c:	4b0e      	ldr	r3, [pc, #56]	; (800dac8 <UART_SetConfig+0x6f4>)
 800da8e:	fba3 1302 	umull	r1, r3, r3, r2
 800da92:	095b      	lsrs	r3, r3, #5
 800da94:	2164      	movs	r1, #100	; 0x64
 800da96:	fb01 f303 	mul.w	r3, r1, r3
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	011b      	lsls	r3, r3, #4
 800da9e:	3332      	adds	r3, #50	; 0x32
 800daa0:	4a09      	ldr	r2, [pc, #36]	; (800dac8 <UART_SetConfig+0x6f4>)
 800daa2:	fba2 2303 	umull	r2, r3, r2, r3
 800daa6:	095b      	lsrs	r3, r3, #5
 800daa8:	f003 020f 	and.w	r2, r3, #15
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4442      	add	r2, r8
 800dab2:	609a      	str	r2, [r3, #8]
}
 800dab4:	e7ff      	b.n	800dab6 <UART_SetConfig+0x6e2>
 800dab6:	bf00      	nop
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac0:	40011000 	.word	0x40011000
 800dac4:	40011400 	.word	0x40011400
 800dac8:	51eb851f 	.word	0x51eb851f

0800dacc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dacc:	b084      	sub	sp, #16
 800dace:	b480      	push	{r7}
 800dad0:	b085      	sub	sp, #20
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	f107 001c 	add.w	r0, r7, #28
 800dada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dae2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dae4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dae6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800daea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800daee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800daf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800daf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800daf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800db06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	b004      	add	sp, #16
 800db20:	4770      	bx	lr

0800db22 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800db22:	b480      	push	{r7}
 800db24:	b083      	sub	sp, #12
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800db5e:	b580      	push	{r7, lr}
 800db60:	b082      	sub	sp, #8
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2203      	movs	r2, #3
 800db6a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800db6c:	2002      	movs	r0, #2
 800db6e:	f7f9 fbc5 	bl	80072fc <HAL_Delay>
  
  return HAL_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0303 	and.w	r3, r3, #3
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dbb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dbbc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800dbc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dbd2:	f023 030f 	bic.w	r3, r3, #15
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800dbde:	2300      	movs	r3, #0
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	b2db      	uxtb	r3, r3
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	370c      	adds	r7, #12
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b085      	sub	sp, #20
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	3314      	adds	r3, #20
 800dc14:	461a      	mov	r2, r3
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	4413      	add	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
}  
 800dc20:	4618      	mov	r0, r3
 800dc22:	3714      	adds	r7, #20
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dc52:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dc58:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dc5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	431a      	orrs	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0

}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dc92:	2310      	movs	r3, #16
 800dc94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc96:	2340      	movs	r3, #64	; 0x40
 800dc98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dca4:	f107 0308 	add.w	r3, r7, #8
 800dca8:	4619      	mov	r1, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7ff ff74 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dcb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcb4:	2110      	movs	r1, #16
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fa40 	bl	800e13c <SDMMC_GetCmdResp1>
 800dcbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcbe:	69fb      	ldr	r3, [r7, #28]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3720      	adds	r7, #32
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dcd6:	2311      	movs	r3, #17
 800dcd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcda:	2340      	movs	r3, #64	; 0x40
 800dcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcde:	2300      	movs	r3, #0
 800dce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dce6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dce8:	f107 0308 	add.w	r3, r7, #8
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff ff52 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcf8:	2111      	movs	r1, #17
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fa1e 	bl	800e13c <SDMMC_GetCmdResp1>
 800dd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd02:	69fb      	ldr	r3, [r7, #28]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dd1a:	2312      	movs	r3, #18
 800dd1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd1e:	2340      	movs	r3, #64	; 0x40
 800dd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd22:	2300      	movs	r3, #0
 800dd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd2c:	f107 0308 	add.w	r3, r7, #8
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ff30 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dd38:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd3c:	2112      	movs	r1, #18
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 f9fc 	bl	800e13c <SDMMC_GetCmdResp1>
 800dd44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd46:	69fb      	ldr	r3, [r7, #28]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3720      	adds	r7, #32
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b088      	sub	sp, #32
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dd5e:	2318      	movs	r3, #24
 800dd60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd62:	2340      	movs	r3, #64	; 0x40
 800dd64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd66:	2300      	movs	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd70:	f107 0308 	add.w	r3, r7, #8
 800dd74:	4619      	mov	r1, r3
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff0e 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dd7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd80:	2118      	movs	r1, #24
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 f9da 	bl	800e13c <SDMMC_GetCmdResp1>
 800dd88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd8a:	69fb      	ldr	r3, [r7, #28]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3720      	adds	r7, #32
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dda2:	2319      	movs	r3, #25
 800dda4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dda6:	2340      	movs	r3, #64	; 0x40
 800dda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddb4:	f107 0308 	add.w	r3, r7, #8
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff feec 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ddc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddc4:	2119      	movs	r1, #25
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f9b8 	bl	800e13c <SDMMC_GetCmdResp1>
 800ddcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddce:	69fb      	ldr	r3, [r7, #28]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3720      	adds	r7, #32
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dde4:	230c      	movs	r3, #12
 800dde6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dde8:	2340      	movs	r3, #64	; 0x40
 800ddea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddec:	2300      	movs	r3, #0
 800ddee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddf6:	f107 0308 	add.w	r3, r7, #8
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff fecb 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800de02:	4a05      	ldr	r2, [pc, #20]	; (800de18 <SDMMC_CmdStopTransfer+0x40>)
 800de04:	210c      	movs	r1, #12
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f998 	bl	800e13c <SDMMC_GetCmdResp1>
 800de0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de0e:	69fb      	ldr	r3, [r7, #28]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3720      	adds	r7, #32
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	05f5e100 	.word	0x05f5e100

0800de1c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08a      	sub	sp, #40	; 0x28
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800de2c:	2307      	movs	r3, #7
 800de2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de30:	2340      	movs	r3, #64	; 0x40
 800de32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de34:	2300      	movs	r3, #0
 800de36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de3e:	f107 0310 	add.w	r3, r7, #16
 800de42:	4619      	mov	r1, r3
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7ff fea7 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800de4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de4e:	2107      	movs	r1, #7
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 f973 	bl	800e13c <SDMMC_GetCmdResp1>
 800de56:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3728      	adds	r7, #40	; 0x28
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b088      	sub	sp, #32
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800de6e:	2300      	movs	r3, #0
 800de70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800de72:	2300      	movs	r3, #0
 800de74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de76:	2300      	movs	r3, #0
 800de78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de80:	f107 0308 	add.w	r3, r7, #8
 800de84:	4619      	mov	r1, r3
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7ff fe86 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f92d 	bl	800e0ec <SDMMC_GetCmdError>
 800de92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de94:	69fb      	ldr	r3, [r7, #28]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3720      	adds	r7, #32
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b088      	sub	sp, #32
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dea6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800deaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800deac:	2308      	movs	r3, #8
 800deae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800deb4:	2300      	movs	r3, #0
 800deb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800deb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800debc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800debe:	f107 0308 	add.w	r3, r7, #8
 800dec2:	4619      	mov	r1, r3
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7ff fe67 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fb16 	bl	800e4fc <SDMMC_GetCmdResp7>
 800ded0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ded2:	69fb      	ldr	r3, [r7, #28]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3720      	adds	r7, #32
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800deea:	2337      	movs	r3, #55	; 0x37
 800deec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800deee:	2340      	movs	r3, #64	; 0x40
 800def0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800def6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800defa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff fe48 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800df08:	f241 3288 	movw	r2, #5000	; 0x1388
 800df0c:	2137      	movs	r1, #55	; 0x37
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 f914 	bl	800e13c <SDMMC_GetCmdResp1>
 800df14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df16:	69fb      	ldr	r3, [r7, #28]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3720      	adds	r7, #32
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b088      	sub	sp, #32
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800df36:	2329      	movs	r3, #41	; 0x29
 800df38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df3a:	2340      	movs	r3, #64	; 0x40
 800df3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df48:	f107 0308 	add.w	r3, r7, #8
 800df4c:	4619      	mov	r1, r3
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff fe22 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fa23 	bl	800e3a0 <SDMMC_GetCmdResp3>
 800df5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df5c:	69fb      	ldr	r3, [r7, #28]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3720      	adds	r7, #32
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b088      	sub	sp, #32
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800df74:	2306      	movs	r3, #6
 800df76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df78:	2340      	movs	r3, #64	; 0x40
 800df7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df7c:	2300      	movs	r3, #0
 800df7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df86:	f107 0308 	add.w	r3, r7, #8
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff fe03 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800df92:	f241 3288 	movw	r2, #5000	; 0x1388
 800df96:	2106      	movs	r1, #6
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 f8cf 	bl	800e13c <SDMMC_GetCmdResp1>
 800df9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3720      	adds	r7, #32
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b088      	sub	sp, #32
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dfb6:	2333      	movs	r3, #51	; 0x33
 800dfb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfba:	2340      	movs	r3, #64	; 0x40
 800dfbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff fde2 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800dfd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd8:	2133      	movs	r1, #51	; 0x33
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f8ae 	bl	800e13c <SDMMC_GetCmdResp1>
 800dfe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfe2:	69fb      	ldr	r3, [r7, #28]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3720      	adds	r7, #32
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dff4:	2300      	movs	r3, #0
 800dff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dff8:	2302      	movs	r3, #2
 800dffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dffc:	23c0      	movs	r3, #192	; 0xc0
 800dffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e000:	2300      	movs	r3, #0
 800e002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e008:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e00a:	f107 0308 	add.w	r3, r7, #8
 800e00e:	4619      	mov	r1, r3
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7ff fdc1 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f97c 	bl	800e314 <SDMMC_GetCmdResp2>
 800e01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e036:	2309      	movs	r3, #9
 800e038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e03a:	23c0      	movs	r3, #192	; 0xc0
 800e03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e03e:	2300      	movs	r3, #0
 800e040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e048:	f107 0308 	add.w	r3, r7, #8
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff fda2 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 f95d 	bl	800e314 <SDMMC_GetCmdResp2>
 800e05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e05c:	69fb      	ldr	r3, [r7, #28]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3720      	adds	r7, #32
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b088      	sub	sp, #32
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e070:	2300      	movs	r3, #0
 800e072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e074:	2303      	movs	r3, #3
 800e076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e078:	2340      	movs	r3, #64	; 0x40
 800e07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e07c:	2300      	movs	r3, #0
 800e07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e084:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e086:	f107 0308 	add.w	r3, r7, #8
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff fd83 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	2103      	movs	r1, #3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 f9bc 	bl	800e414 <SDMMC_GetCmdResp6>
 800e09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e09e:	69fb      	ldr	r3, [r7, #28]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3720      	adds	r7, #32
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e0b6:	230d      	movs	r3, #13
 800e0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0ba:	2340      	movs	r3, #64	; 0x40
 800e0bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0c8:	f107 0308 	add.w	r3, r7, #8
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff fd62 	bl	800db98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d8:	210d      	movs	r1, #13
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f82e 	bl	800e13c <SDMMC_GetCmdResp1>
 800e0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e0ec:	b490      	push	{r4, r7}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0f4:	4b0f      	ldr	r3, [pc, #60]	; (800e134 <SDMMC_GetCmdError+0x48>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a0f      	ldr	r2, [pc, #60]	; (800e138 <SDMMC_GetCmdError+0x4c>)
 800e0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e0fe:	0a5b      	lsrs	r3, r3, #9
 800e100:	f241 3288 	movw	r2, #5000	; 0x1388
 800e104:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e108:	4623      	mov	r3, r4
 800e10a:	1e5c      	subs	r4, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e110:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e114:	e009      	b.n	800e12a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0f2      	beq.n	800e108 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	22c5      	movs	r2, #197	; 0xc5
 800e126:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bc90      	pop	{r4, r7}
 800e132:	4770      	bx	lr
 800e134:	20000000 	.word	0x20000000
 800e138:	10624dd3 	.word	0x10624dd3

0800e13c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e13c:	b590      	push	{r4, r7, lr}
 800e13e:	b087      	sub	sp, #28
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	460b      	mov	r3, r1
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e14a:	4b6f      	ldr	r3, [pc, #444]	; (800e308 <SDMMC_GetCmdResp1+0x1cc>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a6f      	ldr	r2, [pc, #444]	; (800e30c <SDMMC_GetCmdResp1+0x1d0>)
 800e150:	fba2 2303 	umull	r2, r3, r2, r3
 800e154:	0a5b      	lsrs	r3, r3, #9
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e15c:	4623      	mov	r3, r4
 800e15e:	1e5c      	subs	r4, r3, #1
 800e160:	2b00      	cmp	r3, #0
 800e162:	d102      	bne.n	800e16a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e168:	e0c9      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e16e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0f0      	beq.n	800e15c <SDMMC_GetCmdResp1+0x20>
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1eb      	bne.n	800e15c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e188:	f003 0304 	and.w	r3, r3, #4
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d004      	beq.n	800e19a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2204      	movs	r2, #4
 800e194:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e196:	2304      	movs	r3, #4
 800e198:	e0b1      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d004      	beq.n	800e1b0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e0a6      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	22c5      	movs	r2, #197	; 0xc5
 800e1b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7ff fd18 	bl	800dbec <SDIO_GetCommandResponse>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	461a      	mov	r2, r3
 800e1c0:	7afb      	ldrb	r3, [r7, #11]
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d001      	beq.n	800e1ca <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e099      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f7ff fd1a 	bl	800dc06 <SDIO_GetResponse>
 800e1d2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e1d4:	693a      	ldr	r2, [r7, #16]
 800e1d6:	4b4e      	ldr	r3, [pc, #312]	; (800e310 <SDMMC_GetCmdResp1+0x1d4>)
 800e1d8:	4013      	ands	r3, r2
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e08d      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	da02      	bge.n	800e1ee <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e1e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e1ec:	e087      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d001      	beq.n	800e1fc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e1f8:	2340      	movs	r3, #64	; 0x40
 800e1fa:	e080      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e206:	2380      	movs	r3, #128	; 0x80
 800e208:	e079      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e210:	2b00      	cmp	r3, #0
 800e212:	d002      	beq.n	800e21a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e214:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e218:	e071      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e224:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e228:	e069      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e238:	e061      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e248:	e059      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e258:	e051      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e268:	e049      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e274:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e278:	e041      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e288:	e039      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e298:	e031      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e2a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e2a8:	e029      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e2b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e2b8:	e021      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e2c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e2c8:	e019      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e2d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e2d8:	e011      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e2e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e2e8:	e009      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	f003 0308 	and.w	r3, r3, #8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e2f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e2f8:	e001      	b.n	800e2fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	371c      	adds	r7, #28
 800e302:	46bd      	mov	sp, r7
 800e304:	bd90      	pop	{r4, r7, pc}
 800e306:	bf00      	nop
 800e308:	20000000 	.word	0x20000000
 800e30c:	10624dd3 	.word	0x10624dd3
 800e310:	fdffe008 	.word	0xfdffe008

0800e314 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e314:	b490      	push	{r4, r7}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e31c:	4b1e      	ldr	r3, [pc, #120]	; (800e398 <SDMMC_GetCmdResp2+0x84>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a1e      	ldr	r2, [pc, #120]	; (800e39c <SDMMC_GetCmdResp2+0x88>)
 800e322:	fba2 2303 	umull	r2, r3, r2, r3
 800e326:	0a5b      	lsrs	r3, r3, #9
 800e328:	f241 3288 	movw	r2, #5000	; 0x1388
 800e32c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e330:	4623      	mov	r3, r4
 800e332:	1e5c      	subs	r4, r3, #1
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e33c:	e026      	b.n	800e38c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e342:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0f0      	beq.n	800e330 <SDMMC_GetCmdResp2+0x1c>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1eb      	bne.n	800e330 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e35c:	f003 0304 	and.w	r3, r3, #4
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2204      	movs	r2, #4
 800e368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e36a:	2304      	movs	r3, #4
 800e36c:	e00e      	b.n	800e38c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d004      	beq.n	800e384 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2201      	movs	r2, #1
 800e37e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e380:	2301      	movs	r3, #1
 800e382:	e003      	b.n	800e38c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	22c5      	movs	r2, #197	; 0xc5
 800e388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bc90      	pop	{r4, r7}
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	20000000 	.word	0x20000000
 800e39c:	10624dd3 	.word	0x10624dd3

0800e3a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e3a0:	b490      	push	{r4, r7}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e3a8:	4b18      	ldr	r3, [pc, #96]	; (800e40c <SDMMC_GetCmdResp3+0x6c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a18      	ldr	r2, [pc, #96]	; (800e410 <SDMMC_GetCmdResp3+0x70>)
 800e3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b2:	0a5b      	lsrs	r3, r3, #9
 800e3b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e3bc:	4623      	mov	r3, r4
 800e3be:	1e5c      	subs	r4, r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3c8:	e01b      	b.n	800e402 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d0f0      	beq.n	800e3bc <SDMMC_GetCmdResp3+0x1c>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1eb      	bne.n	800e3bc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d004      	beq.n	800e3fa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3f6:	2304      	movs	r3, #4
 800e3f8:	e003      	b.n	800e402 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	22c5      	movs	r2, #197	; 0xc5
 800e3fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bc90      	pop	{r4, r7}
 800e40a:	4770      	bx	lr
 800e40c:	20000000 	.word	0x20000000
 800e410:	10624dd3 	.word	0x10624dd3

0800e414 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	460b      	mov	r3, r1
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e422:	4b34      	ldr	r3, [pc, #208]	; (800e4f4 <SDMMC_GetCmdResp6+0xe0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a34      	ldr	r2, [pc, #208]	; (800e4f8 <SDMMC_GetCmdResp6+0xe4>)
 800e428:	fba2 2303 	umull	r2, r3, r2, r3
 800e42c:	0a5b      	lsrs	r3, r3, #9
 800e42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e432:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e436:	4623      	mov	r3, r4
 800e438:	1e5c      	subs	r4, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d102      	bne.n	800e444 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e43e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e442:	e052      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e448:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e450:	2b00      	cmp	r3, #0
 800e452:	d0f0      	beq.n	800e436 <SDMMC_GetCmdResp6+0x22>
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1eb      	bne.n	800e436 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e462:	f003 0304 	and.w	r3, r3, #4
 800e466:	2b00      	cmp	r3, #0
 800e468:	d004      	beq.n	800e474 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2204      	movs	r2, #4
 800e46e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e470:	2304      	movs	r3, #4
 800e472:	e03a      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d004      	beq.n	800e48a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2201      	movs	r2, #1
 800e484:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e486:	2301      	movs	r3, #1
 800e488:	e02f      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff fbae 	bl	800dbec <SDIO_GetCommandResponse>
 800e490:	4603      	mov	r3, r0
 800e492:	461a      	mov	r2, r3
 800e494:	7afb      	ldrb	r3, [r7, #11]
 800e496:	4293      	cmp	r3, r2
 800e498:	d001      	beq.n	800e49e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e49a:	2301      	movs	r3, #1
 800e49c:	e025      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	22c5      	movs	r2, #197	; 0xc5
 800e4a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7ff fbad 	bl	800dc06 <SDIO_GetResponse>
 800e4ac:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d106      	bne.n	800e4c6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	0c1b      	lsrs	r3, r3, #16
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	e011      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e4d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4d4:	e009      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4e4:	e001      	b.n	800e4ea <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e4e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd90      	pop	{r4, r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000000 	.word	0x20000000
 800e4f8:	10624dd3 	.word	0x10624dd3

0800e4fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e4fc:	b490      	push	{r4, r7}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e504:	4b21      	ldr	r3, [pc, #132]	; (800e58c <SDMMC_GetCmdResp7+0x90>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a21      	ldr	r2, [pc, #132]	; (800e590 <SDMMC_GetCmdResp7+0x94>)
 800e50a:	fba2 2303 	umull	r2, r3, r2, r3
 800e50e:	0a5b      	lsrs	r3, r3, #9
 800e510:	f241 3288 	movw	r2, #5000	; 0x1388
 800e514:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e518:	4623      	mov	r3, r4
 800e51a:	1e5c      	subs	r4, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e524:	e02c      	b.n	800e580 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e52a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e532:	2b00      	cmp	r3, #0
 800e534:	d0f0      	beq.n	800e518 <SDMMC_GetCmdResp7+0x1c>
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1eb      	bne.n	800e518 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d004      	beq.n	800e556 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2204      	movs	r2, #4
 800e550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e552:	2304      	movs	r3, #4
 800e554:	e014      	b.n	800e580 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e55a:	f003 0301 	and.w	r3, r3, #1
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d004      	beq.n	800e56c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2201      	movs	r2, #1
 800e566:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e568:	2301      	movs	r3, #1
 800e56a:	e009      	b.n	800e580 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e574:	2b00      	cmp	r3, #0
 800e576:	d002      	beq.n	800e57e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2240      	movs	r2, #64	; 0x40
 800e57c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e57e:	2300      	movs	r3, #0
  
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bc90      	pop	{r4, r7}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	20000000 	.word	0x20000000
 800e590:	10624dd3 	.word	0x10624dd3

0800e594 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e598:	4904      	ldr	r1, [pc, #16]	; (800e5ac <MX_FATFS_Init+0x18>)
 800e59a:	4805      	ldr	r0, [pc, #20]	; (800e5b0 <MX_FATFS_Init+0x1c>)
 800e59c:	f003 fb9c 	bl	8011cd8 <FATFS_LinkDriver>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	4b03      	ldr	r3, [pc, #12]	; (800e5b4 <MX_FATFS_Init+0x20>)
 800e5a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e5a8:	bf00      	nop
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20039db0 	.word	0x20039db0
 800e5b0:	080181d4 	.word	0x080181d4
 800e5b4:	20039dac 	.word	0x20039dac

0800e5b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e5c2:	f000 f896 	bl	800e6f2 <BSP_SD_IsDetected>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d001      	beq.n	800e5d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e012      	b.n	800e5f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e5d0:	480b      	ldr	r0, [pc, #44]	; (800e600 <BSP_SD_Init+0x48>)
 800e5d2:	f7fb ffa5 	bl	800a520 <HAL_SD_Init>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d109      	bne.n	800e5f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e5e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e5e4:	4806      	ldr	r0, [pc, #24]	; (800e600 <BSP_SD_Init+0x48>)
 800e5e6:	f7fc fd4f 	bl	800b088 <HAL_SD_ConfigWideBusOperation>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d001      	beq.n	800e5f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e5f4:	79fb      	ldrb	r3, [r7, #7]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20039ba8 	.word	0x20039ba8

0800e604 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	68f9      	ldr	r1, [r7, #12]
 800e61a:	4806      	ldr	r0, [pc, #24]	; (800e634 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e61c:	f7fc f810 	bl	800a640 <HAL_SD_ReadBlocks_DMA>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	20039ba8 	.word	0x20039ba8

0800e638 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e644:	2300      	movs	r3, #0
 800e646:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	68f9      	ldr	r1, [r7, #12]
 800e64e:	4806      	ldr	r0, [pc, #24]	; (800e668 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e650:	f7fc f8de 	bl	800a810 <HAL_SD_WriteBlocks_DMA>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e660:	4618      	mov	r0, r3
 800e662:	3718      	adds	r7, #24
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	20039ba8 	.word	0x20039ba8

0800e66c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e670:	4805      	ldr	r0, [pc, #20]	; (800e688 <BSP_SD_GetCardState+0x1c>)
 800e672:	f7fc fd85 	bl	800b180 <HAL_SD_GetCardState>
 800e676:	4603      	mov	r3, r0
 800e678:	2b04      	cmp	r3, #4
 800e67a:	bf14      	ite	ne
 800e67c:	2301      	movne	r3, #1
 800e67e:	2300      	moveq	r3, #0
 800e680:	b2db      	uxtb	r3, r3
}
 800e682:	4618      	mov	r0, r3
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20039ba8 	.word	0x20039ba8

0800e68c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e694:	6879      	ldr	r1, [r7, #4]
 800e696:	4803      	ldr	r0, [pc, #12]	; (800e6a4 <BSP_SD_GetCardInfo+0x18>)
 800e698:	f7fc fcca 	bl	800b030 <HAL_SD_GetCardInfo>
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	20039ba8 	.word	0x20039ba8

0800e6a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e6b0:	f000 f818 	bl	800e6e4 <BSP_SD_AbortCallback>
}
 800e6b4:	bf00      	nop
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e6c4:	f000 f9a8 	bl	800ea18 <BSP_SD_WriteCpltCallback>
}
 800e6c8:	bf00      	nop
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e6d8:	f000 f9aa 	bl	800ea30 <BSP_SD_ReadCpltCallback>
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	af00      	add	r7, sp, #0

}
 800e6e8:	bf00      	nop
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e6fc:	f000 f80c 	bl	800e718 <BSP_PlatformIsDetected>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d101      	bne.n	800e70a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e706:	2300      	movs	r3, #0
 800e708:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e70a:	79fb      	ldrb	r3, [r7, #7]
 800e70c:	b2db      	uxtb	r3, r3
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
	...

0800e718 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e71e:	2301      	movs	r3, #1
 800e720:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e726:	4806      	ldr	r0, [pc, #24]	; (800e740 <BSP_PlatformIsDetected+0x28>)
 800e728:	f7fa f866 	bl	80087f8 <HAL_GPIO_ReadPin>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e732:	2300      	movs	r3, #0
 800e734:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e736:	79fb      	ldrb	r3, [r7, #7]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	40020000 	.word	0x40020000

0800e744 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e74c:	f7f8 fdca 	bl	80072e4 <HAL_GetTick>
 800e750:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e752:	e006      	b.n	800e762 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e754:	f7ff ff8a 	bl	800e66c <BSP_SD_GetCardState>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e75e:	2300      	movs	r3, #0
 800e760:	e009      	b.n	800e776 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e762:	f7f8 fdbf 	bl	80072e4 <HAL_GetTick>
 800e766:	4602      	mov	r2, r0
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d8f0      	bhi.n	800e754 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e772:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
	...

0800e780 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e78a:	4b0b      	ldr	r3, [pc, #44]	; (800e7b8 <SD_CheckStatus+0x38>)
 800e78c:	2201      	movs	r2, #1
 800e78e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e790:	f7ff ff6c 	bl	800e66c <BSP_SD_GetCardState>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d107      	bne.n	800e7aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e79a:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <SD_CheckStatus+0x38>)
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	f023 0301 	bic.w	r3, r3, #1
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	4b04      	ldr	r3, [pc, #16]	; (800e7b8 <SD_CheckStatus+0x38>)
 800e7a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e7aa:	4b03      	ldr	r3, [pc, #12]	; (800e7b8 <SD_CheckStatus+0x38>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	b2db      	uxtb	r3, r3
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	20000009 	.word	0x20000009

0800e7bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e7c6:	f7ff fef7 	bl	800e5b8 <BSP_SD_Init>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d107      	bne.n	800e7e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff ffd4 	bl	800e780 <SD_CheckStatus>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	461a      	mov	r2, r3
 800e7dc:	4b04      	ldr	r3, [pc, #16]	; (800e7f0 <SD_initialize+0x34>)
 800e7de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e7e0:	4b03      	ldr	r3, [pc, #12]	; (800e7f0 <SD_initialize+0x34>)
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	b2db      	uxtb	r3, r3
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20000009 	.word	0x20000009

0800e7f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ffbd 	bl	800e780 <SD_CheckStatus>
 800e806:	4603      	mov	r3, r0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	60b9      	str	r1, [r7, #8]
 800e818:	607a      	str	r2, [r7, #4]
 800e81a:	603b      	str	r3, [r7, #0]
 800e81c:	4603      	mov	r3, r0
 800e81e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e824:	f247 5030 	movw	r0, #30000	; 0x7530
 800e828:	f7ff ff8c 	bl	800e744 <SD_CheckStatusWithTimeout>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	da01      	bge.n	800e836 <SD_read+0x26>
  {
    return res;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	e03b      	b.n	800e8ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	68b8      	ldr	r0, [r7, #8]
 800e83c:	f7ff fee2 	bl	800e604 <BSP_SD_ReadBlocks_DMA>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d132      	bne.n	800e8ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e846:	4b1c      	ldr	r3, [pc, #112]	; (800e8b8 <SD_read+0xa8>)
 800e848:	2200      	movs	r2, #0
 800e84a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e84c:	f7f8 fd4a 	bl	80072e4 <HAL_GetTick>
 800e850:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e852:	bf00      	nop
 800e854:	4b18      	ldr	r3, [pc, #96]	; (800e8b8 <SD_read+0xa8>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d108      	bne.n	800e86e <SD_read+0x5e>
 800e85c:	f7f8 fd42 	bl	80072e4 <HAL_GetTick>
 800e860:	4602      	mov	r2, r0
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	f247 522f 	movw	r2, #29999	; 0x752f
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d9f2      	bls.n	800e854 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e86e:	4b12      	ldr	r3, [pc, #72]	; (800e8b8 <SD_read+0xa8>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d102      	bne.n	800e87c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	75fb      	strb	r3, [r7, #23]
 800e87a:	e017      	b.n	800e8ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e87c:	4b0e      	ldr	r3, [pc, #56]	; (800e8b8 <SD_read+0xa8>)
 800e87e:	2200      	movs	r2, #0
 800e880:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e882:	f7f8 fd2f 	bl	80072e4 <HAL_GetTick>
 800e886:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e888:	e007      	b.n	800e89a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e88a:	f7ff feef 	bl	800e66c <BSP_SD_GetCardState>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <SD_read+0x8a>
          {
            res = RES_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e898:	e008      	b.n	800e8ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e89a:	f7f8 fd23 	bl	80072e4 <HAL_GetTick>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	f247 522f 	movw	r2, #29999	; 0x752f
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d9ee      	bls.n	800e88a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3718      	adds	r7, #24
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20037444 	.word	0x20037444

0800e8bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	607a      	str	r2, [r7, #4]
 800e8c6:	603b      	str	r3, [r7, #0]
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e8d0:	4b24      	ldr	r3, [pc, #144]	; (800e964 <SD_write+0xa8>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e8d6:	f247 5030 	movw	r0, #30000	; 0x7530
 800e8da:	f7ff ff33 	bl	800e744 <SD_CheckStatusWithTimeout>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	da01      	bge.n	800e8e8 <SD_write+0x2c>
  {
    return res;
 800e8e4:	7dfb      	ldrb	r3, [r7, #23]
 800e8e6:	e038      	b.n	800e95a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	68b8      	ldr	r0, [r7, #8]
 800e8ee:	f7ff fea3 	bl	800e638 <BSP_SD_WriteBlocks_DMA>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d12f      	bne.n	800e958 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e8f8:	f7f8 fcf4 	bl	80072e4 <HAL_GetTick>
 800e8fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e8fe:	bf00      	nop
 800e900:	4b18      	ldr	r3, [pc, #96]	; (800e964 <SD_write+0xa8>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d108      	bne.n	800e91a <SD_write+0x5e>
 800e908:	f7f8 fcec 	bl	80072e4 <HAL_GetTick>
 800e90c:	4602      	mov	r2, r0
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	f247 522f 	movw	r2, #29999	; 0x752f
 800e916:	4293      	cmp	r3, r2
 800e918:	d9f2      	bls.n	800e900 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e91a:	4b12      	ldr	r3, [pc, #72]	; (800e964 <SD_write+0xa8>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d102      	bne.n	800e928 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e922:	2301      	movs	r3, #1
 800e924:	75fb      	strb	r3, [r7, #23]
 800e926:	e017      	b.n	800e958 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e928:	4b0e      	ldr	r3, [pc, #56]	; (800e964 <SD_write+0xa8>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e92e:	f7f8 fcd9 	bl	80072e4 <HAL_GetTick>
 800e932:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e934:	e007      	b.n	800e946 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e936:	f7ff fe99 	bl	800e66c <BSP_SD_GetCardState>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d102      	bne.n	800e946 <SD_write+0x8a>
          {
            res = RES_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	75fb      	strb	r3, [r7, #23]
            break;
 800e944:	e008      	b.n	800e958 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e946:	f7f8 fccd 	bl	80072e4 <HAL_GetTick>
 800e94a:	4602      	mov	r2, r0
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	f247 522f 	movw	r2, #29999	; 0x752f
 800e954:	4293      	cmp	r3, r2
 800e956:	d9ee      	bls.n	800e936 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e958:	7dfb      	ldrb	r3, [r7, #23]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3718      	adds	r7, #24
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20037440 	.word	0x20037440

0800e968 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08c      	sub	sp, #48	; 0x30
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	4603      	mov	r3, r0
 800e970:	603a      	str	r2, [r7, #0]
 800e972:	71fb      	strb	r3, [r7, #7]
 800e974:	460b      	mov	r3, r1
 800e976:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e978:	2301      	movs	r3, #1
 800e97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e97e:	4b25      	ldr	r3, [pc, #148]	; (800ea14 <SD_ioctl+0xac>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	b2db      	uxtb	r3, r3
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <SD_ioctl+0x28>
 800e98c:	2303      	movs	r3, #3
 800e98e:	e03c      	b.n	800ea0a <SD_ioctl+0xa2>

  switch (cmd)
 800e990:	79bb      	ldrb	r3, [r7, #6]
 800e992:	2b03      	cmp	r3, #3
 800e994:	d834      	bhi.n	800ea00 <SD_ioctl+0x98>
 800e996:	a201      	add	r2, pc, #4	; (adr r2, 800e99c <SD_ioctl+0x34>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800e9ad 	.word	0x0800e9ad
 800e9a0:	0800e9b5 	.word	0x0800e9b5
 800e9a4:	0800e9cd 	.word	0x0800e9cd
 800e9a8:	0800e9e7 	.word	0x0800e9e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e9b2:	e028      	b.n	800ea06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e9b4:	f107 030c 	add.w	r3, r7, #12
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff fe67 	bl	800e68c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e9ca:	e01c      	b.n	800ea06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e9cc:	f107 030c 	add.w	r3, r7, #12
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff fe5b 	bl	800e68c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e9e4:	e00f      	b.n	800ea06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e9e6:	f107 030c 	add.w	r3, r7, #12
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7ff fe4e 	bl	800e68c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	0a5a      	lsrs	r2, r3, #9
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e9fe:	e002      	b.n	800ea06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ea06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3730      	adds	r7, #48	; 0x30
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	20000009 	.word	0x20000009

0800ea18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ea1c:	4b03      	ldr	r3, [pc, #12]	; (800ea2c <BSP_SD_WriteCpltCallback+0x14>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	601a      	str	r2, [r3, #0]
}
 800ea22:	bf00      	nop
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	20037440 	.word	0x20037440

0800ea30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ea30:	b480      	push	{r7}
 800ea32:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ea34:	4b03      	ldr	r3, [pc, #12]	; (800ea44 <BSP_SD_ReadCpltCallback+0x14>)
 800ea36:	2201      	movs	r2, #1
 800ea38:	601a      	str	r2, [r3, #0]
}
 800ea3a:	bf00      	nop
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	20037444 	.word	0x20037444

0800ea48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	4603      	mov	r3, r0
 800ea50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	4a08      	ldr	r2, [pc, #32]	; (800ea78 <disk_status+0x30>)
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	79fa      	ldrb	r2, [r7, #7]
 800ea60:	4905      	ldr	r1, [pc, #20]	; (800ea78 <disk_status+0x30>)
 800ea62:	440a      	add	r2, r1
 800ea64:	7a12      	ldrb	r2, [r2, #8]
 800ea66:	4610      	mov	r0, r2
 800ea68:	4798      	blx	r3
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ea6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20037470 	.word	0x20037470

0800ea7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ea86:	2300      	movs	r3, #0
 800ea88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	4a0d      	ldr	r2, [pc, #52]	; (800eac4 <disk_initialize+0x48>)
 800ea8e:	5cd3      	ldrb	r3, [r2, r3]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d111      	bne.n	800eab8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	4a0b      	ldr	r2, [pc, #44]	; (800eac4 <disk_initialize+0x48>)
 800ea98:	2101      	movs	r1, #1
 800ea9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ea9c:	79fb      	ldrb	r3, [r7, #7]
 800ea9e:	4a09      	ldr	r2, [pc, #36]	; (800eac4 <disk_initialize+0x48>)
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	79fa      	ldrb	r2, [r7, #7]
 800eaaa:	4906      	ldr	r1, [pc, #24]	; (800eac4 <disk_initialize+0x48>)
 800eaac:	440a      	add	r2, r1
 800eaae:	7a12      	ldrb	r2, [r2, #8]
 800eab0:	4610      	mov	r0, r2
 800eab2:	4798      	blx	r3
 800eab4:	4603      	mov	r3, r0
 800eab6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20037470 	.word	0x20037470

0800eac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eac8:	b590      	push	{r4, r7, lr}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
 800ead2:	603b      	str	r3, [r7, #0]
 800ead4:	4603      	mov	r3, r0
 800ead6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
 800eada:	4a0a      	ldr	r2, [pc, #40]	; (800eb04 <disk_read+0x3c>)
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4413      	add	r3, r2
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	689c      	ldr	r4, [r3, #8]
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	4a07      	ldr	r2, [pc, #28]	; (800eb04 <disk_read+0x3c>)
 800eae8:	4413      	add	r3, r2
 800eaea:	7a18      	ldrb	r0, [r3, #8]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	68b9      	ldr	r1, [r7, #8]
 800eaf2:	47a0      	blx	r4
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	371c      	adds	r7, #28
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd90      	pop	{r4, r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20037470 	.word	0x20037470

0800eb08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eb08:	b590      	push	{r4, r7, lr}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60b9      	str	r1, [r7, #8]
 800eb10:	607a      	str	r2, [r7, #4]
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	4603      	mov	r3, r0
 800eb16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
 800eb1a:	4a0a      	ldr	r2, [pc, #40]	; (800eb44 <disk_write+0x3c>)
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	68dc      	ldr	r4, [r3, #12]
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
 800eb26:	4a07      	ldr	r2, [pc, #28]	; (800eb44 <disk_write+0x3c>)
 800eb28:	4413      	add	r3, r2
 800eb2a:	7a18      	ldrb	r0, [r3, #8]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	47a0      	blx	r4
 800eb34:	4603      	mov	r3, r0
 800eb36:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd90      	pop	{r4, r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20037470 	.word	0x20037470

0800eb48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	603a      	str	r2, [r7, #0]
 800eb52:	71fb      	strb	r3, [r7, #7]
 800eb54:	460b      	mov	r3, r1
 800eb56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	4a09      	ldr	r2, [pc, #36]	; (800eb80 <disk_ioctl+0x38>)
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	79fa      	ldrb	r2, [r7, #7]
 800eb66:	4906      	ldr	r1, [pc, #24]	; (800eb80 <disk_ioctl+0x38>)
 800eb68:	440a      	add	r2, r1
 800eb6a:	7a10      	ldrb	r0, [r2, #8]
 800eb6c:	79b9      	ldrb	r1, [r7, #6]
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	4798      	blx	r3
 800eb72:	4603      	mov	r3, r0
 800eb74:	73fb      	strb	r3, [r7, #15]
  return res;
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	20037470 	.word	0x20037470

0800eb84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eb94:	89fb      	ldrh	r3, [r7, #14]
 800eb96:	021b      	lsls	r3, r3, #8
 800eb98:	b21a      	sxth	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	b21b      	sxth	r3, r3
 800eba0:	4313      	orrs	r3, r2
 800eba2:	b21b      	sxth	r3, r3
 800eba4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800eba6:	89fb      	ldrh	r3, [r7, #14]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3714      	adds	r7, #20
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	3303      	adds	r3, #3
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	021b      	lsls	r3, r3, #8
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	3202      	adds	r2, #2
 800ebcc:	7812      	ldrb	r2, [r2, #0]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	021b      	lsls	r3, r3, #8
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	3201      	adds	r2, #1
 800ebda:	7812      	ldrb	r2, [r2, #0]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	021b      	lsls	r3, r3, #8
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	7812      	ldrb	r2, [r2, #0]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]
	return rv;
 800ebec:	68fb      	ldr	r3, [r7, #12]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	460b      	mov	r3, r1
 800ec04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	607a      	str	r2, [r7, #4]
 800ec0c:	887a      	ldrh	r2, [r7, #2]
 800ec0e:	b2d2      	uxtb	r2, r2
 800ec10:	701a      	strb	r2, [r3, #0]
 800ec12:	887b      	ldrh	r3, [r7, #2]
 800ec14:	0a1b      	lsrs	r3, r3, #8
 800ec16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	607a      	str	r2, [r7, #4]
 800ec1e:	887a      	ldrh	r2, [r7, #2]
 800ec20:	b2d2      	uxtb	r2, r2
 800ec22:	701a      	strb	r2, [r3, #0]
}
 800ec24:	bf00      	nop
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	1c5a      	adds	r2, r3, #1
 800ec3e:	607a      	str	r2, [r7, #4]
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	b2d2      	uxtb	r2, r2
 800ec44:	701a      	strb	r2, [r3, #0]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	0a1b      	lsrs	r3, r3, #8
 800ec4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	607a      	str	r2, [r7, #4]
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	b2d2      	uxtb	r2, r2
 800ec56:	701a      	strb	r2, [r3, #0]
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	0a1b      	lsrs	r3, r3, #8
 800ec5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	1c5a      	adds	r2, r3, #1
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	b2d2      	uxtb	r2, r2
 800ec68:	701a      	strb	r2, [r3, #0]
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	0a1b      	lsrs	r3, r3, #8
 800ec6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	607a      	str	r2, [r7, #4]
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	b2d2      	uxtb	r2, r2
 800ec7a:	701a      	strb	r2, [r3, #0]
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ec88:	b480      	push	{r7}
 800ec8a:	b087      	sub	sp, #28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00d      	beq.n	800ecbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	1c53      	adds	r3, r2, #1
 800eca6:	613b      	str	r3, [r7, #16]
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	1c59      	adds	r1, r3, #1
 800ecac:	6179      	str	r1, [r7, #20]
 800ecae:	7812      	ldrb	r2, [r2, #0]
 800ecb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	607b      	str	r3, [r7, #4]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1f1      	bne.n	800eca2 <mem_cpy+0x1a>
	}
}
 800ecbe:	bf00      	nop
 800ecc0:	371c      	adds	r7, #28
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr

0800ecca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ecca:	b480      	push	{r7}
 800eccc:	b087      	sub	sp, #28
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	60f8      	str	r0, [r7, #12]
 800ecd2:	60b9      	str	r1, [r7, #8]
 800ecd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	617a      	str	r2, [r7, #20]
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	b2d2      	uxtb	r2, r2
 800ece4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	607b      	str	r3, [r7, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1f3      	bne.n	800ecda <mem_set+0x10>
}
 800ecf2:	bf00      	nop
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ecfe:	b480      	push	{r7}
 800ed00:	b089      	sub	sp, #36	; 0x24
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	60f8      	str	r0, [r7, #12]
 800ed06:	60b9      	str	r1, [r7, #8]
 800ed08:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	61fb      	str	r3, [r7, #28]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	61fa      	str	r2, [r7, #28]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	1c5a      	adds	r2, r3, #1
 800ed24:	61ba      	str	r2, [r7, #24]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	1acb      	subs	r3, r1, r3
 800ed2a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	607b      	str	r3, [r7, #4]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <mem_cmp+0x40>
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d0eb      	beq.n	800ed16 <mem_cmp+0x18>

	return r;
 800ed3e:	697b      	ldr	r3, [r7, #20]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3724      	adds	r7, #36	; 0x24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ed56:	e002      	b.n	800ed5e <chk_chr+0x12>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	607b      	str	r3, [r7, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d005      	beq.n	800ed72 <chk_chr+0x26>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d1f2      	bne.n	800ed58 <chk_chr+0xc>
	return *str;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	781b      	ldrb	r3, [r3, #0]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
	...

0800ed84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ed8e:	2300      	movs	r3, #0
 800ed90:	60bb      	str	r3, [r7, #8]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	e029      	b.n	800edec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ed98:	4a27      	ldr	r2, [pc, #156]	; (800ee38 <chk_lock+0xb4>)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	011b      	lsls	r3, r3, #4
 800ed9e:	4413      	add	r3, r2
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d01d      	beq.n	800ede2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eda6:	4a24      	ldr	r2, [pc, #144]	; (800ee38 <chk_lock+0xb4>)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	011b      	lsls	r3, r3, #4
 800edac:	4413      	add	r3, r2
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d116      	bne.n	800ede6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800edb8:	4a1f      	ldr	r2, [pc, #124]	; (800ee38 <chk_lock+0xb4>)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	011b      	lsls	r3, r3, #4
 800edbe:	4413      	add	r3, r2
 800edc0:	3304      	adds	r3, #4
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800edc8:	429a      	cmp	r2, r3
 800edca:	d10c      	bne.n	800ede6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800edcc:	4a1a      	ldr	r2, [pc, #104]	; (800ee38 <chk_lock+0xb4>)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	011b      	lsls	r3, r3, #4
 800edd2:	4413      	add	r3, r2
 800edd4:	3308      	adds	r3, #8
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eddc:	429a      	cmp	r2, r3
 800edde:	d102      	bne.n	800ede6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ede0:	e007      	b.n	800edf2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ede2:	2301      	movs	r3, #1
 800ede4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	3301      	adds	r3, #1
 800edea:	60fb      	str	r3, [r7, #12]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d9d2      	bls.n	800ed98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d109      	bne.n	800ee0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d102      	bne.n	800ee04 <chk_lock+0x80>
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d101      	bne.n	800ee08 <chk_lock+0x84>
 800ee04:	2300      	movs	r3, #0
 800ee06:	e010      	b.n	800ee2a <chk_lock+0xa6>
 800ee08:	2312      	movs	r3, #18
 800ee0a:	e00e      	b.n	800ee2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d108      	bne.n	800ee24 <chk_lock+0xa0>
 800ee12:	4a09      	ldr	r2, [pc, #36]	; (800ee38 <chk_lock+0xb4>)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	011b      	lsls	r3, r3, #4
 800ee18:	4413      	add	r3, r2
 800ee1a:	330c      	adds	r3, #12
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee22:	d101      	bne.n	800ee28 <chk_lock+0xa4>
 800ee24:	2310      	movs	r3, #16
 800ee26:	e000      	b.n	800ee2a <chk_lock+0xa6>
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3714      	adds	r7, #20
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	20037450 	.word	0x20037450

0800ee3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ee42:	2300      	movs	r3, #0
 800ee44:	607b      	str	r3, [r7, #4]
 800ee46:	e002      	b.n	800ee4e <enq_lock+0x12>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	607b      	str	r3, [r7, #4]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d806      	bhi.n	800ee62 <enq_lock+0x26>
 800ee54:	4a09      	ldr	r2, [pc, #36]	; (800ee7c <enq_lock+0x40>)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	011b      	lsls	r3, r3, #4
 800ee5a:	4413      	add	r3, r2
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1f2      	bne.n	800ee48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	bf14      	ite	ne
 800ee68:	2301      	movne	r3, #1
 800ee6a:	2300      	moveq	r3, #0
 800ee6c:	b2db      	uxtb	r3, r3
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	20037450 	.word	0x20037450

0800ee80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e01f      	b.n	800eed0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ee90:	4a41      	ldr	r2, [pc, #260]	; (800ef98 <inc_lock+0x118>)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	011b      	lsls	r3, r3, #4
 800ee96:	4413      	add	r3, r2
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d113      	bne.n	800eeca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eea2:	4a3d      	ldr	r2, [pc, #244]	; (800ef98 <inc_lock+0x118>)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	011b      	lsls	r3, r3, #4
 800eea8:	4413      	add	r3, r2
 800eeaa:	3304      	adds	r3, #4
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d109      	bne.n	800eeca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eeb6:	4a38      	ldr	r2, [pc, #224]	; (800ef98 <inc_lock+0x118>)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	011b      	lsls	r3, r3, #4
 800eebc:	4413      	add	r3, r2
 800eebe:	3308      	adds	r3, #8
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d006      	beq.n	800eed8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	3301      	adds	r3, #1
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d9dc      	bls.n	800ee90 <inc_lock+0x10>
 800eed6:	e000      	b.n	800eeda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eed8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d132      	bne.n	800ef46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eee0:	2300      	movs	r3, #0
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	e002      	b.n	800eeec <inc_lock+0x6c>
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3301      	adds	r3, #1
 800eeea:	60fb      	str	r3, [r7, #12]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d806      	bhi.n	800ef00 <inc_lock+0x80>
 800eef2:	4a29      	ldr	r2, [pc, #164]	; (800ef98 <inc_lock+0x118>)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	4413      	add	r3, r2
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1f2      	bne.n	800eee6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d101      	bne.n	800ef0a <inc_lock+0x8a>
 800ef06:	2300      	movs	r3, #0
 800ef08:	e040      	b.n	800ef8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	4922      	ldr	r1, [pc, #136]	; (800ef98 <inc_lock+0x118>)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	011b      	lsls	r3, r3, #4
 800ef14:	440b      	add	r3, r1
 800ef16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	491e      	ldr	r1, [pc, #120]	; (800ef98 <inc_lock+0x118>)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	011b      	lsls	r3, r3, #4
 800ef22:	440b      	add	r3, r1
 800ef24:	3304      	adds	r3, #4
 800ef26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	695a      	ldr	r2, [r3, #20]
 800ef2c:	491a      	ldr	r1, [pc, #104]	; (800ef98 <inc_lock+0x118>)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	440b      	add	r3, r1
 800ef34:	3308      	adds	r3, #8
 800ef36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ef38:	4a17      	ldr	r2, [pc, #92]	; (800ef98 <inc_lock+0x118>)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	011b      	lsls	r3, r3, #4
 800ef3e:	4413      	add	r3, r2
 800ef40:	330c      	adds	r3, #12
 800ef42:	2200      	movs	r2, #0
 800ef44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d009      	beq.n	800ef60 <inc_lock+0xe0>
 800ef4c:	4a12      	ldr	r2, [pc, #72]	; (800ef98 <inc_lock+0x118>)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	011b      	lsls	r3, r3, #4
 800ef52:	4413      	add	r3, r2
 800ef54:	330c      	adds	r3, #12
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <inc_lock+0xe0>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e015      	b.n	800ef8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d108      	bne.n	800ef78 <inc_lock+0xf8>
 800ef66:	4a0c      	ldr	r2, [pc, #48]	; (800ef98 <inc_lock+0x118>)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	011b      	lsls	r3, r3, #4
 800ef6c:	4413      	add	r3, r2
 800ef6e:	330c      	adds	r3, #12
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	3301      	adds	r3, #1
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	e001      	b.n	800ef7c <inc_lock+0xfc>
 800ef78:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef7c:	4906      	ldr	r1, [pc, #24]	; (800ef98 <inc_lock+0x118>)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	011b      	lsls	r3, r3, #4
 800ef82:	440b      	add	r3, r1
 800ef84:	330c      	adds	r3, #12
 800ef86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	3301      	adds	r3, #1
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr
 800ef98:	20037450 	.word	0x20037450

0800ef9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	3b01      	subs	r3, #1
 800efa8:	607b      	str	r3, [r7, #4]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d825      	bhi.n	800effc <dec_lock+0x60>
		n = Files[i].ctr;
 800efb0:	4a17      	ldr	r2, [pc, #92]	; (800f010 <dec_lock+0x74>)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	011b      	lsls	r3, r3, #4
 800efb6:	4413      	add	r3, r2
 800efb8:	330c      	adds	r3, #12
 800efba:	881b      	ldrh	r3, [r3, #0]
 800efbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800efbe:	89fb      	ldrh	r3, [r7, #14]
 800efc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efc4:	d101      	bne.n	800efca <dec_lock+0x2e>
 800efc6:	2300      	movs	r3, #0
 800efc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800efca:	89fb      	ldrh	r3, [r7, #14]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <dec_lock+0x3a>
 800efd0:	89fb      	ldrh	r3, [r7, #14]
 800efd2:	3b01      	subs	r3, #1
 800efd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800efd6:	4a0e      	ldr	r2, [pc, #56]	; (800f010 <dec_lock+0x74>)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	011b      	lsls	r3, r3, #4
 800efdc:	4413      	add	r3, r2
 800efde:	330c      	adds	r3, #12
 800efe0:	89fa      	ldrh	r2, [r7, #14]
 800efe2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800efe4:	89fb      	ldrh	r3, [r7, #14]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <dec_lock+0x5a>
 800efea:	4a09      	ldr	r2, [pc, #36]	; (800f010 <dec_lock+0x74>)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	011b      	lsls	r3, r3, #4
 800eff0:	4413      	add	r3, r2
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	737b      	strb	r3, [r7, #13]
 800effa:	e001      	b.n	800f000 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800effc:	2302      	movs	r3, #2
 800effe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f000:	7b7b      	ldrb	r3, [r7, #13]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3714      	adds	r7, #20
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	20037450 	.word	0x20037450

0800f014 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f01c:	2300      	movs	r3, #0
 800f01e:	60fb      	str	r3, [r7, #12]
 800f020:	e010      	b.n	800f044 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f022:	4a0d      	ldr	r2, [pc, #52]	; (800f058 <clear_lock+0x44>)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	011b      	lsls	r3, r3, #4
 800f028:	4413      	add	r3, r2
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d105      	bne.n	800f03e <clear_lock+0x2a>
 800f032:	4a09      	ldr	r2, [pc, #36]	; (800f058 <clear_lock+0x44>)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	011b      	lsls	r3, r3, #4
 800f038:	4413      	add	r3, r2
 800f03a:	2200      	movs	r2, #0
 800f03c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	3301      	adds	r3, #1
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d9eb      	bls.n	800f022 <clear_lock+0xe>
	}
}
 800f04a:	bf00      	nop
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	20037450 	.word	0x20037450

0800f05c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f064:	2300      	movs	r3, #0
 800f066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	78db      	ldrb	r3, [r3, #3]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d034      	beq.n	800f0da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f074:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7858      	ldrb	r0, [r3, #1]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f080:	2301      	movs	r3, #1
 800f082:	697a      	ldr	r2, [r7, #20]
 800f084:	f7ff fd40 	bl	800eb08 <disk_write>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f08e:	2301      	movs	r3, #1
 800f090:	73fb      	strb	r3, [r7, #15]
 800f092:	e022      	b.n	800f0da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f09e:	697a      	ldr	r2, [r7, #20]
 800f0a0:	1ad2      	subs	r2, r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a1b      	ldr	r3, [r3, #32]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d217      	bcs.n	800f0da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	789b      	ldrb	r3, [r3, #2]
 800f0ae:	613b      	str	r3, [r7, #16]
 800f0b0:	e010      	b.n	800f0d4 <sync_window+0x78>
					wsect += fs->fsize;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6a1b      	ldr	r3, [r3, #32]
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	7858      	ldrb	r0, [r3, #1]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	697a      	ldr	r2, [r7, #20]
 800f0ca:	f7ff fd1d 	bl	800eb08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	613b      	str	r3, [r7, #16]
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d8eb      	bhi.n	800f0b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3718      	adds	r7, #24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f6:	683a      	ldr	r2, [r7, #0]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d01b      	beq.n	800f134 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff ffad 	bl	800f05c <sync_window>
 800f102:	4603      	mov	r3, r0
 800f104:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f106:	7bfb      	ldrb	r3, [r7, #15]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d113      	bne.n	800f134 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	7858      	ldrb	r0, [r3, #1]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f116:	2301      	movs	r3, #1
 800f118:	683a      	ldr	r2, [r7, #0]
 800f11a:	f7ff fcd5 	bl	800eac8 <disk_read>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f124:	f04f 33ff 	mov.w	r3, #4294967295
 800f128:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f134:	7bfb      	ldrb	r3, [r7, #15]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff ff87 	bl	800f05c <sync_window>
 800f14e:	4603      	mov	r3, r0
 800f150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f152:	7bfb      	ldrb	r3, [r7, #15]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d159      	bne.n	800f20c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b03      	cmp	r3, #3
 800f15e:	d149      	bne.n	800f1f4 <sync_fs+0xb4>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	791b      	ldrb	r3, [r3, #4]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d145      	bne.n	800f1f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	899b      	ldrh	r3, [r3, #12]
 800f172:	461a      	mov	r2, r3
 800f174:	2100      	movs	r1, #0
 800f176:	f7ff fda8 	bl	800ecca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3338      	adds	r3, #56	; 0x38
 800f17e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f182:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f186:	4618      	mov	r0, r3
 800f188:	f7ff fd37 	bl	800ebfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3338      	adds	r3, #56	; 0x38
 800f190:	4921      	ldr	r1, [pc, #132]	; (800f218 <sync_fs+0xd8>)
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff fd4c 	bl	800ec30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	3338      	adds	r3, #56	; 0x38
 800f19c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f1a0:	491e      	ldr	r1, [pc, #120]	; (800f21c <sync_fs+0xdc>)
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff fd44 	bl	800ec30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	3338      	adds	r3, #56	; 0x38
 800f1ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	695b      	ldr	r3, [r3, #20]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	f7ff fd3a 	bl	800ec30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	3338      	adds	r3, #56	; 0x38
 800f1c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	691b      	ldr	r3, [r3, #16]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	f7ff fd30 	bl	800ec30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d4:	1c5a      	adds	r2, r3, #1
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	7858      	ldrb	r0, [r3, #1]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	f7ff fc8d 	bl	800eb08 <disk_write>
			fs->fsi_flag = 0;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	785b      	ldrb	r3, [r3, #1]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fca3 	bl	800eb48 <disk_ioctl>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <sync_fs+0xcc>
 800f208:	2301      	movs	r3, #1
 800f20a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	41615252 	.word	0x41615252
 800f21c:	61417272 	.word	0x61417272

0800f220 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	3b02      	subs	r3, #2
 800f22e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	69db      	ldr	r3, [r3, #28]
 800f234:	3b02      	subs	r3, #2
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d301      	bcc.n	800f240 <clust2sect+0x20>
 800f23c:	2300      	movs	r3, #0
 800f23e:	e008      	b.n	800f252 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	895b      	ldrh	r3, [r3, #10]
 800f244:	461a      	mov	r2, r3
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	fb03 f202 	mul.w	r2, r3, r2
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f250:	4413      	add	r3, r2
}
 800f252:	4618      	mov	r0, r3
 800f254:	370c      	adds	r7, #12
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr

0800f25e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b086      	sub	sp, #24
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d904      	bls.n	800f27e <get_fat+0x20>
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d302      	bcc.n	800f284 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f27e:	2301      	movs	r3, #1
 800f280:	617b      	str	r3, [r7, #20]
 800f282:	e0b7      	b.n	800f3f4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f284:	f04f 33ff 	mov.w	r3, #4294967295
 800f288:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d05a      	beq.n	800f348 <get_fat+0xea>
 800f292:	2b03      	cmp	r3, #3
 800f294:	d07d      	beq.n	800f392 <get_fat+0x134>
 800f296:	2b01      	cmp	r3, #1
 800f298:	f040 80a2 	bne.w	800f3e0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	085b      	lsrs	r3, r3, #1
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	899b      	ldrh	r3, [r3, #12]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2ba:	4413      	add	r3, r2
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6938      	ldr	r0, [r7, #16]
 800f2c0:	f7ff ff10 	bl	800f0e4 <move_window>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f040 808d 	bne.w	800f3e6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	60fa      	str	r2, [r7, #12]
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	8992      	ldrh	r2, [r2, #12]
 800f2d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2da:	fb02 f201 	mul.w	r2, r2, r1
 800f2de:	1a9b      	subs	r3, r3, r2
 800f2e0:	693a      	ldr	r2, [r7, #16]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f2e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	899b      	ldrh	r3, [r3, #12]
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2fa:	4413      	add	r3, r2
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6938      	ldr	r0, [r7, #16]
 800f300:	f7ff fef0 	bl	800f0e4 <move_window>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d16f      	bne.n	800f3ea <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	899b      	ldrh	r3, [r3, #12]
 800f30e:	461a      	mov	r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	fbb3 f1f2 	udiv	r1, r3, r2
 800f316:	fb02 f201 	mul.w	r2, r2, r1
 800f31a:	1a9b      	subs	r3, r3, r2
 800f31c:	693a      	ldr	r2, [r7, #16]
 800f31e:	4413      	add	r3, r2
 800f320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f324:	021b      	lsls	r3, r3, #8
 800f326:	461a      	mov	r2, r3
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	4313      	orrs	r3, r2
 800f32c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	f003 0301 	and.w	r3, r3, #1
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <get_fat+0xe0>
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	091b      	lsrs	r3, r3, #4
 800f33c:	e002      	b.n	800f344 <get_fat+0xe6>
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f344:	617b      	str	r3, [r7, #20]
			break;
 800f346:	e055      	b.n	800f3f4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	899b      	ldrh	r3, [r3, #12]
 800f350:	085b      	lsrs	r3, r3, #1
 800f352:	b29b      	uxth	r3, r3
 800f354:	4619      	mov	r1, r3
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	fbb3 f3f1 	udiv	r3, r3, r1
 800f35c:	4413      	add	r3, r2
 800f35e:	4619      	mov	r1, r3
 800f360:	6938      	ldr	r0, [r7, #16]
 800f362:	f7ff febf 	bl	800f0e4 <move_window>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d140      	bne.n	800f3ee <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	8992      	ldrh	r2, [r2, #12]
 800f37a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f37e:	fb02 f200 	mul.w	r2, r2, r0
 800f382:	1a9b      	subs	r3, r3, r2
 800f384:	440b      	add	r3, r1
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fbfc 	bl	800eb84 <ld_word>
 800f38c:	4603      	mov	r3, r0
 800f38e:	617b      	str	r3, [r7, #20]
			break;
 800f390:	e030      	b.n	800f3f4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	899b      	ldrh	r3, [r3, #12]
 800f39a:	089b      	lsrs	r3, r3, #2
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	4619      	mov	r1, r3
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3a6:	4413      	add	r3, r2
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	6938      	ldr	r0, [r7, #16]
 800f3ac:	f7ff fe9a 	bl	800f0e4 <move_window>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d11d      	bne.n	800f3f2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	8992      	ldrh	r2, [r2, #12]
 800f3c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3c8:	fb02 f200 	mul.w	r2, r2, r0
 800f3cc:	1a9b      	subs	r3, r3, r2
 800f3ce:	440b      	add	r3, r1
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7ff fbef 	bl	800ebb4 <ld_dword>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f3dc:	617b      	str	r3, [r7, #20]
			break;
 800f3de:	e009      	b.n	800f3f4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	e006      	b.n	800f3f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3e6:	bf00      	nop
 800f3e8:	e004      	b.n	800f3f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3ea:	bf00      	nop
 800f3ec:	e002      	b.n	800f3f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f3ee:	bf00      	nop
 800f3f0:	e000      	b.n	800f3f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f3f2:	bf00      	nop
		}
	}

	return val;
 800f3f4:	697b      	ldr	r3, [r7, #20]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3718      	adds	r7, #24
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f3fe:	b590      	push	{r4, r7, lr}
 800f400:	b089      	sub	sp, #36	; 0x24
 800f402:	af00      	add	r7, sp, #0
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f40a:	2302      	movs	r3, #2
 800f40c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b01      	cmp	r3, #1
 800f412:	f240 8106 	bls.w	800f622 <put_fat+0x224>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	69db      	ldr	r3, [r3, #28]
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	f080 8100 	bcs.w	800f622 <put_fat+0x224>
		switch (fs->fs_type) {
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b02      	cmp	r3, #2
 800f428:	f000 8088 	beq.w	800f53c <put_fat+0x13e>
 800f42c:	2b03      	cmp	r3, #3
 800f42e:	f000 80b0 	beq.w	800f592 <put_fat+0x194>
 800f432:	2b01      	cmp	r3, #1
 800f434:	f040 80f5 	bne.w	800f622 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	61bb      	str	r3, [r7, #24]
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	085b      	lsrs	r3, r3, #1
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	4413      	add	r3, r2
 800f444:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	899b      	ldrh	r3, [r3, #12]
 800f44e:	4619      	mov	r1, r3
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	fbb3 f3f1 	udiv	r3, r3, r1
 800f456:	4413      	add	r3, r2
 800f458:	4619      	mov	r1, r3
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fe42 	bl	800f0e4 <move_window>
 800f460:	4603      	mov	r3, r0
 800f462:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f464:	7ffb      	ldrb	r3, [r7, #31]
 800f466:	2b00      	cmp	r3, #0
 800f468:	f040 80d4 	bne.w	800f614 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	1c5a      	adds	r2, r3, #1
 800f476:	61ba      	str	r2, [r7, #24]
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	8992      	ldrh	r2, [r2, #12]
 800f47c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f480:	fb02 f200 	mul.w	r2, r2, r0
 800f484:	1a9b      	subs	r3, r3, r2
 800f486:	440b      	add	r3, r1
 800f488:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	f003 0301 	and.w	r3, r3, #1
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00d      	beq.n	800f4b0 <put_fat+0xb2>
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	b25b      	sxtb	r3, r3
 800f49a:	f003 030f 	and.w	r3, r3, #15
 800f49e:	b25a      	sxtb	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	011b      	lsls	r3, r3, #4
 800f4a6:	b25b      	sxtb	r3, r3
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	b25b      	sxtb	r3, r3
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	e001      	b.n	800f4b4 <put_fat+0xb6>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	697a      	ldr	r2, [r7, #20]
 800f4b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	899b      	ldrh	r3, [r3, #12]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800f4ce:	4413      	add	r3, r2
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f7ff fe06 	bl	800f0e4 <move_window>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4dc:	7ffb      	ldrb	r3, [r7, #31]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f040 809a 	bne.w	800f618 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	899b      	ldrh	r3, [r3, #12]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f4f6:	fb02 f200 	mul.w	r2, r2, r0
 800f4fa:	1a9b      	subs	r3, r3, r2
 800f4fc:	440b      	add	r3, r1
 800f4fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <put_fat+0x114>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	091b      	lsrs	r3, r3, #4
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	e00e      	b.n	800f530 <put_fat+0x132>
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	b25b      	sxtb	r3, r3
 800f518:	f023 030f 	bic.w	r3, r3, #15
 800f51c:	b25a      	sxtb	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	0a1b      	lsrs	r3, r3, #8
 800f522:	b25b      	sxtb	r3, r3
 800f524:	f003 030f 	and.w	r3, r3, #15
 800f528:	b25b      	sxtb	r3, r3
 800f52a:	4313      	orrs	r3, r2
 800f52c:	b25b      	sxtb	r3, r3
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2201      	movs	r2, #1
 800f538:	70da      	strb	r2, [r3, #3]
			break;
 800f53a:	e072      	b.n	800f622 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	899b      	ldrh	r3, [r3, #12]
 800f544:	085b      	lsrs	r3, r3, #1
 800f546:	b29b      	uxth	r3, r3
 800f548:	4619      	mov	r1, r3
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f550:	4413      	add	r3, r2
 800f552:	4619      	mov	r1, r3
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f7ff fdc5 	bl	800f0e4 <move_window>
 800f55a:	4603      	mov	r3, r0
 800f55c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f55e:	7ffb      	ldrb	r3, [r7, #31]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d15b      	bne.n	800f61c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	8992      	ldrh	r2, [r2, #12]
 800f572:	fbb3 f0f2 	udiv	r0, r3, r2
 800f576:	fb02 f200 	mul.w	r2, r2, r0
 800f57a:	1a9b      	subs	r3, r3, r2
 800f57c:	440b      	add	r3, r1
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	b292      	uxth	r2, r2
 800f582:	4611      	mov	r1, r2
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff fb38 	bl	800ebfa <st_word>
			fs->wflag = 1;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2201      	movs	r2, #1
 800f58e:	70da      	strb	r2, [r3, #3]
			break;
 800f590:	e047      	b.n	800f622 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	899b      	ldrh	r3, [r3, #12]
 800f59a:	089b      	lsrs	r3, r3, #2
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	4619      	mov	r1, r3
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5a6:	4413      	add	r3, r2
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7ff fd9a 	bl	800f0e4 <move_window>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5b4:	7ffb      	ldrb	r3, [r7, #31]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d132      	bne.n	800f620 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	8992      	ldrh	r2, [r2, #12]
 800f5ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5d2:	fb02 f200 	mul.w	r2, r2, r0
 800f5d6:	1a9b      	subs	r3, r3, r2
 800f5d8:	440b      	add	r3, r1
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7ff faea 	bl	800ebb4 <ld_dword>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f5e6:	4323      	orrs	r3, r4
 800f5e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	8992      	ldrh	r2, [r2, #12]
 800f5f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5fc:	fb02 f200 	mul.w	r2, r2, r0
 800f600:	1a9b      	subs	r3, r3, r2
 800f602:	440b      	add	r3, r1
 800f604:	6879      	ldr	r1, [r7, #4]
 800f606:	4618      	mov	r0, r3
 800f608:	f7ff fb12 	bl	800ec30 <st_dword>
			fs->wflag = 1;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2201      	movs	r2, #1
 800f610:	70da      	strb	r2, [r3, #3]
			break;
 800f612:	e006      	b.n	800f622 <put_fat+0x224>
			if (res != FR_OK) break;
 800f614:	bf00      	nop
 800f616:	e004      	b.n	800f622 <put_fat+0x224>
			if (res != FR_OK) break;
 800f618:	bf00      	nop
 800f61a:	e002      	b.n	800f622 <put_fat+0x224>
			if (res != FR_OK) break;
 800f61c:	bf00      	nop
 800f61e:	e000      	b.n	800f622 <put_fat+0x224>
			if (res != FR_OK) break;
 800f620:	bf00      	nop
		}
	}
	return res;
 800f622:	7ffb      	ldrb	r3, [r7, #31]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3724      	adds	r7, #36	; 0x24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd90      	pop	{r4, r7, pc}

0800f62c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b088      	sub	sp, #32
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d904      	bls.n	800f652 <remove_chain+0x26>
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	69db      	ldr	r3, [r3, #28]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d301      	bcc.n	800f656 <remove_chain+0x2a>
 800f652:	2302      	movs	r3, #2
 800f654:	e04b      	b.n	800f6ee <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00c      	beq.n	800f676 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f65c:	f04f 32ff 	mov.w	r2, #4294967295
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	69b8      	ldr	r0, [r7, #24]
 800f664:	f7ff fecb 	bl	800f3fe <put_fat>
 800f668:	4603      	mov	r3, r0
 800f66a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f66c:	7ffb      	ldrb	r3, [r7, #31]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <remove_chain+0x4a>
 800f672:	7ffb      	ldrb	r3, [r7, #31]
 800f674:	e03b      	b.n	800f6ee <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f676:	68b9      	ldr	r1, [r7, #8]
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7ff fdf0 	bl	800f25e <get_fat>
 800f67e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d031      	beq.n	800f6ea <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d101      	bne.n	800f690 <remove_chain+0x64>
 800f68c:	2302      	movs	r3, #2
 800f68e:	e02e      	b.n	800f6ee <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f696:	d101      	bne.n	800f69c <remove_chain+0x70>
 800f698:	2301      	movs	r3, #1
 800f69a:	e028      	b.n	800f6ee <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f69c:	2200      	movs	r2, #0
 800f69e:	68b9      	ldr	r1, [r7, #8]
 800f6a0:	69b8      	ldr	r0, [r7, #24]
 800f6a2:	f7ff feac 	bl	800f3fe <put_fat>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f6aa:	7ffb      	ldrb	r3, [r7, #31]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <remove_chain+0x88>
 800f6b0:	7ffb      	ldrb	r3, [r7, #31]
 800f6b2:	e01c      	b.n	800f6ee <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	695a      	ldr	r2, [r3, #20]
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	69db      	ldr	r3, [r3, #28]
 800f6bc:	3b02      	subs	r3, #2
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d20b      	bcs.n	800f6da <remove_chain+0xae>
			fs->free_clst++;
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	695b      	ldr	r3, [r3, #20]
 800f6c6:	1c5a      	adds	r2, r3, #1
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	791b      	ldrb	r3, [r3, #4]
 800f6d0:	f043 0301 	orr.w	r3, r3, #1
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	69db      	ldr	r3, [r3, #28]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d3c6      	bcc.n	800f676 <remove_chain+0x4a>
 800f6e8:	e000      	b.n	800f6ec <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f6ea:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3720      	adds	r7, #32
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b088      	sub	sp, #32
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d10d      	bne.n	800f728 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d004      	beq.n	800f722 <create_chain+0x2c>
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	69db      	ldr	r3, [r3, #28]
 800f71c:	69ba      	ldr	r2, [r7, #24]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d31b      	bcc.n	800f75a <create_chain+0x64>
 800f722:	2301      	movs	r3, #1
 800f724:	61bb      	str	r3, [r7, #24]
 800f726:	e018      	b.n	800f75a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f728:	6839      	ldr	r1, [r7, #0]
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff fd97 	bl	800f25e <get_fat>
 800f730:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d801      	bhi.n	800f73c <create_chain+0x46>
 800f738:	2301      	movs	r3, #1
 800f73a:	e070      	b.n	800f81e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f742:	d101      	bne.n	800f748 <create_chain+0x52>
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	e06a      	b.n	800f81e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	69db      	ldr	r3, [r3, #28]
 800f74c:	68fa      	ldr	r2, [r7, #12]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d201      	bcs.n	800f756 <create_chain+0x60>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	e063      	b.n	800f81e <create_chain+0x128>
		scl = clst;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	3301      	adds	r3, #1
 800f762:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	69fa      	ldr	r2, [r7, #28]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d307      	bcc.n	800f77e <create_chain+0x88>
				ncl = 2;
 800f76e:	2302      	movs	r3, #2
 800f770:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f772:	69fa      	ldr	r2, [r7, #28]
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	429a      	cmp	r2, r3
 800f778:	d901      	bls.n	800f77e <create_chain+0x88>
 800f77a:	2300      	movs	r3, #0
 800f77c:	e04f      	b.n	800f81e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f77e:	69f9      	ldr	r1, [r7, #28]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7ff fd6c 	bl	800f25e <get_fat>
 800f786:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00e      	beq.n	800f7ac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d003      	beq.n	800f79c <create_chain+0xa6>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79a:	d101      	bne.n	800f7a0 <create_chain+0xaa>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	e03e      	b.n	800f81e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f7a0:	69fa      	ldr	r2, [r7, #28]
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d1da      	bne.n	800f75e <create_chain+0x68>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e038      	b.n	800f81e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f7ac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b2:	69f9      	ldr	r1, [r7, #28]
 800f7b4:	6938      	ldr	r0, [r7, #16]
 800f7b6:	f7ff fe22 	bl	800f3fe <put_fat>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f7be:	7dfb      	ldrb	r3, [r7, #23]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d109      	bne.n	800f7d8 <create_chain+0xe2>
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d006      	beq.n	800f7d8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f7ca:	69fa      	ldr	r2, [r7, #28]
 800f7cc:	6839      	ldr	r1, [r7, #0]
 800f7ce:	6938      	ldr	r0, [r7, #16]
 800f7d0:	f7ff fe15 	bl	800f3fe <put_fat>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f7d8:	7dfb      	ldrb	r3, [r7, #23]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d116      	bne.n	800f80c <create_chain+0x116>
		fs->last_clst = ncl;
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	69fa      	ldr	r2, [r7, #28]
 800f7e2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	695a      	ldr	r2, [r3, #20]
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	3b02      	subs	r3, #2
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d804      	bhi.n	800f7fc <create_chain+0x106>
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	695b      	ldr	r3, [r3, #20]
 800f7f6:	1e5a      	subs	r2, r3, #1
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	791b      	ldrb	r3, [r3, #4]
 800f800:	f043 0301 	orr.w	r3, r3, #1
 800f804:	b2da      	uxtb	r2, r3
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	711a      	strb	r2, [r3, #4]
 800f80a:	e007      	b.n	800f81c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f80c:	7dfb      	ldrb	r3, [r7, #23]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d102      	bne.n	800f818 <create_chain+0x122>
 800f812:	f04f 33ff 	mov.w	r3, #4294967295
 800f816:	e000      	b.n	800f81a <create_chain+0x124>
 800f818:	2301      	movs	r3, #1
 800f81a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f81c:	69fb      	ldr	r3, [r7, #28]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3720      	adds	r7, #32
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f826:	b480      	push	{r7}
 800f828:	b087      	sub	sp, #28
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83a:	3304      	adds	r3, #4
 800f83c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	899b      	ldrh	r3, [r3, #12]
 800f842:	461a      	mov	r2, r3
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	fbb3 f3f2 	udiv	r3, r3, r2
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	8952      	ldrh	r2, [r2, #10]
 800f84e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f852:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	1d1a      	adds	r2, r3, #4
 800f858:	613a      	str	r2, [r7, #16]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d101      	bne.n	800f868 <clmt_clust+0x42>
 800f864:	2300      	movs	r3, #0
 800f866:	e010      	b.n	800f88a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d307      	bcc.n	800f880 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f870:	697a      	ldr	r2, [r7, #20]
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	617b      	str	r3, [r7, #20]
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	3304      	adds	r3, #4
 800f87c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f87e:	e7e9      	b.n	800f854 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f880:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	4413      	add	r3, r2
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	371c      	adds	r7, #28
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b086      	sub	sp, #24
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
 800f89e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8ac:	d204      	bcs.n	800f8b8 <dir_sdi+0x22>
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	f003 031f 	and.w	r3, r3, #31
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <dir_sdi+0x26>
		return FR_INT_ERR;
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	e071      	b.n	800f9a0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d106      	bne.n	800f8dc <dir_sdi+0x46>
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	d902      	bls.n	800f8dc <dir_sdi+0x46>
		clst = fs->dirbase;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10c      	bne.n	800f8fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	095b      	lsrs	r3, r3, #5
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	8912      	ldrh	r2, [r2, #8]
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d301      	bcc.n	800f8f2 <dir_sdi+0x5c>
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	e056      	b.n	800f9a0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	61da      	str	r2, [r3, #28]
 800f8fa:	e02d      	b.n	800f958 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	895b      	ldrh	r3, [r3, #10]
 800f900:	461a      	mov	r2, r3
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	899b      	ldrh	r3, [r3, #12]
 800f906:	fb03 f302 	mul.w	r3, r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f90c:	e019      	b.n	800f942 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6979      	ldr	r1, [r7, #20]
 800f912:	4618      	mov	r0, r3
 800f914:	f7ff fca3 	bl	800f25e <get_fat>
 800f918:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f920:	d101      	bne.n	800f926 <dir_sdi+0x90>
 800f922:	2301      	movs	r3, #1
 800f924:	e03c      	b.n	800f9a0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d904      	bls.n	800f936 <dir_sdi+0xa0>
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	69db      	ldr	r3, [r3, #28]
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	429a      	cmp	r2, r3
 800f934:	d301      	bcc.n	800f93a <dir_sdi+0xa4>
 800f936:	2302      	movs	r3, #2
 800f938:	e032      	b.n	800f9a0 <dir_sdi+0x10a>
			ofs -= csz;
 800f93a:	683a      	ldr	r2, [r7, #0]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f942:	683a      	ldr	r2, [r7, #0]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	429a      	cmp	r2, r3
 800f948:	d2e1      	bcs.n	800f90e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f94a:	6979      	ldr	r1, [r7, #20]
 800f94c:	6938      	ldr	r0, [r7, #16]
 800f94e:	f7ff fc67 	bl	800f220 <clust2sect>
 800f952:	4602      	mov	r2, r0
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <dir_sdi+0xd4>
 800f966:	2302      	movs	r3, #2
 800f968:	e01a      	b.n	800f9a0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	69da      	ldr	r2, [r3, #28]
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	899b      	ldrh	r3, [r3, #12]
 800f972:	4619      	mov	r1, r3
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	fbb3 f3f1 	udiv	r3, r3, r1
 800f97a:	441a      	add	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	899b      	ldrh	r3, [r3, #12]
 800f98a:	461a      	mov	r2, r3
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f992:	fb02 f200 	mul.w	r2, r2, r0
 800f996:	1a9b      	subs	r3, r3, r2
 800f998:	18ca      	adds	r2, r1, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3718      	adds	r7, #24
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	3320      	adds	r3, #32
 800f9be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	69db      	ldr	r3, [r3, #28]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <dir_next+0x28>
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f9ce:	d301      	bcc.n	800f9d4 <dir_next+0x2c>
 800f9d0:	2304      	movs	r3, #4
 800f9d2:	e0bb      	b.n	800fb4c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	899b      	ldrh	r3, [r3, #12]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9e0:	fb02 f201 	mul.w	r2, r2, r1
 800f9e4:	1a9b      	subs	r3, r3, r2
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f040 809d 	bne.w	800fb26 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	69db      	ldr	r3, [r3, #28]
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10b      	bne.n	800fa16 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	095b      	lsrs	r3, r3, #5
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	8912      	ldrh	r2, [r2, #8]
 800fa06:	4293      	cmp	r3, r2
 800fa08:	f0c0 808d 	bcc.w	800fb26 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	61da      	str	r2, [r3, #28]
 800fa12:	2304      	movs	r3, #4
 800fa14:	e09a      	b.n	800fb4c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	899b      	ldrh	r3, [r3, #12]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	8952      	ldrh	r2, [r2, #10]
 800fa26:	3a01      	subs	r2, #1
 800fa28:	4013      	ands	r3, r2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d17b      	bne.n	800fb26 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	4619      	mov	r1, r3
 800fa36:	4610      	mov	r0, r2
 800fa38:	f7ff fc11 	bl	800f25e <get_fat>
 800fa3c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d801      	bhi.n	800fa48 <dir_next+0xa0>
 800fa44:	2302      	movs	r3, #2
 800fa46:	e081      	b.n	800fb4c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4e:	d101      	bne.n	800fa54 <dir_next+0xac>
 800fa50:	2301      	movs	r3, #1
 800fa52:	e07b      	b.n	800fb4c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	69db      	ldr	r3, [r3, #28]
 800fa58:	697a      	ldr	r2, [r7, #20]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d359      	bcc.n	800fb12 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d104      	bne.n	800fa6e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	61da      	str	r2, [r3, #28]
 800fa6a:	2304      	movs	r3, #4
 800fa6c:	e06e      	b.n	800fb4c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	4619      	mov	r1, r3
 800fa76:	4610      	mov	r0, r2
 800fa78:	f7ff fe3d 	bl	800f6f6 <create_chain>
 800fa7c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d101      	bne.n	800fa88 <dir_next+0xe0>
 800fa84:	2307      	movs	r3, #7
 800fa86:	e061      	b.n	800fb4c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d101      	bne.n	800fa92 <dir_next+0xea>
 800fa8e:	2302      	movs	r3, #2
 800fa90:	e05c      	b.n	800fb4c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa98:	d101      	bne.n	800fa9e <dir_next+0xf6>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e056      	b.n	800fb4c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f7ff fadc 	bl	800f05c <sync_window>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <dir_next+0x106>
 800faaa:	2301      	movs	r3, #1
 800faac:	e04e      	b.n	800fb4c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	899b      	ldrh	r3, [r3, #12]
 800fab8:	461a      	mov	r2, r3
 800faba:	2100      	movs	r1, #0
 800fabc:	f7ff f905 	bl	800ecca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fac0:	2300      	movs	r3, #0
 800fac2:	613b      	str	r3, [r7, #16]
 800fac4:	6979      	ldr	r1, [r7, #20]
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f7ff fbaa 	bl	800f220 <clust2sect>
 800facc:	4602      	mov	r2, r0
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	635a      	str	r2, [r3, #52]	; 0x34
 800fad2:	e012      	b.n	800fafa <dir_next+0x152>
						fs->wflag = 1;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2201      	movs	r2, #1
 800fad8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f7ff fabe 	bl	800f05c <sync_window>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <dir_next+0x142>
 800fae6:	2301      	movs	r3, #1
 800fae8:	e030      	b.n	800fb4c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	3301      	adds	r3, #1
 800faee:	613b      	str	r3, [r7, #16]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	635a      	str	r2, [r3, #52]	; 0x34
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	895b      	ldrh	r3, [r3, #10]
 800fafe:	461a      	mov	r2, r3
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d3e6      	bcc.n	800fad4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	1ad2      	subs	r2, r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fb18:	6979      	ldr	r1, [r7, #20]
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	f7ff fb80 	bl	800f220 <clust2sect>
 800fb20:	4602      	mov	r2, r0
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	899b      	ldrh	r3, [r3, #12]
 800fb36:	461a      	mov	r2, r3
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb3e:	fb02 f200 	mul.w	r2, r2, r0
 800fb42:	1a9b      	subs	r3, r3, r2
 800fb44:	18ca      	adds	r2, r1, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3718      	adds	r7, #24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b086      	sub	sp, #24
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fb64:	2100      	movs	r1, #0
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff fe95 	bl	800f896 <dir_sdi>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb70:	7dfb      	ldrb	r3, [r7, #23]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d12b      	bne.n	800fbce <dir_alloc+0x7a>
		n = 0;
 800fb76:	2300      	movs	r3, #0
 800fb78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	4619      	mov	r1, r3
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f7ff faaf 	bl	800f0e4 <move_window>
 800fb86:	4603      	mov	r3, r0
 800fb88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d11d      	bne.n	800fbcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6a1b      	ldr	r3, [r3, #32]
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	2be5      	cmp	r3, #229	; 0xe5
 800fb98:	d004      	beq.n	800fba4 <dir_alloc+0x50>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d107      	bne.n	800fbb4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	3301      	adds	r3, #1
 800fba8:	613b      	str	r3, [r7, #16]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d102      	bne.n	800fbb8 <dir_alloc+0x64>
 800fbb2:	e00c      	b.n	800fbce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fbb8:	2101      	movs	r1, #1
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f7ff fef4 	bl	800f9a8 <dir_next>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fbc4:	7dfb      	ldrb	r3, [r7, #23]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d0d7      	beq.n	800fb7a <dir_alloc+0x26>
 800fbca:	e000      	b.n	800fbce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fbcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fbce:	7dfb      	ldrb	r3, [r7, #23]
 800fbd0:	2b04      	cmp	r3, #4
 800fbd2:	d101      	bne.n	800fbd8 <dir_alloc+0x84>
 800fbd4:	2307      	movs	r3, #7
 800fbd6:	75fb      	strb	r3, [r7, #23]
	return res;
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3718      	adds	r7, #24
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	331a      	adds	r3, #26
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fe ffc7 	bl	800eb84 <ld_word>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	d109      	bne.n	800fc16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	3314      	adds	r3, #20
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe ffbc 	bl	800eb84 <ld_word>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	041b      	lsls	r3, r3, #16
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fc16:	68fb      	ldr	r3, [r7, #12]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	331a      	adds	r3, #26
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	b292      	uxth	r2, r2
 800fc34:	4611      	mov	r1, r2
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fe ffdf 	bl	800ebfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	d109      	bne.n	800fc58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	f103 0214 	add.w	r2, r3, #20
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	0c1b      	lsrs	r3, r3, #16
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	4619      	mov	r1, r3
 800fc52:	4610      	mov	r0, r2
 800fc54:	f7fe ffd1 	bl	800ebfa <st_word>
	}
}
 800fc58:	bf00      	nop
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fc6a:	2304      	movs	r3, #4
 800fc6c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fc74:	e03c      	b.n	800fcf0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	69db      	ldr	r3, [r3, #28]
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	6938      	ldr	r0, [r7, #16]
 800fc7e:	f7ff fa31 	bl	800f0e4 <move_window>
 800fc82:	4603      	mov	r3, r0
 800fc84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fc86:	7dfb      	ldrb	r3, [r7, #23]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d136      	bne.n	800fcfa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a1b      	ldr	r3, [r3, #32]
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d102      	bne.n	800fca0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fc9a:	2304      	movs	r3, #4
 800fc9c:	75fb      	strb	r3, [r7, #23]
 800fc9e:	e031      	b.n	800fd04 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6a1b      	ldr	r3, [r3, #32]
 800fca4:	330b      	adds	r3, #11
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcac:	73bb      	strb	r3, [r7, #14]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	7bba      	ldrb	r2, [r7, #14]
 800fcb2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
 800fcb6:	2be5      	cmp	r3, #229	; 0xe5
 800fcb8:	d011      	beq.n	800fcde <dir_read+0x7e>
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	2b2e      	cmp	r3, #46	; 0x2e
 800fcbe:	d00e      	beq.n	800fcde <dir_read+0x7e>
 800fcc0:	7bbb      	ldrb	r3, [r7, #14]
 800fcc2:	2b0f      	cmp	r3, #15
 800fcc4:	d00b      	beq.n	800fcde <dir_read+0x7e>
 800fcc6:	7bbb      	ldrb	r3, [r7, #14]
 800fcc8:	f023 0320 	bic.w	r3, r3, #32
 800fccc:	2b08      	cmp	r3, #8
 800fcce:	bf0c      	ite	eq
 800fcd0:	2301      	moveq	r3, #1
 800fcd2:	2300      	movne	r3, #0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d00f      	beq.n	800fcfe <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fcde:	2100      	movs	r1, #0
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7ff fe61 	bl	800f9a8 <dir_next>
 800fce6:	4603      	mov	r3, r0
 800fce8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fcea:	7dfb      	ldrb	r3, [r7, #23]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d108      	bne.n	800fd02 <dir_read+0xa2>
	while (dp->sect) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	69db      	ldr	r3, [r3, #28]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1be      	bne.n	800fc76 <dir_read+0x16>
 800fcf8:	e004      	b.n	800fd04 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fcfa:	bf00      	nop
 800fcfc:	e002      	b.n	800fd04 <dir_read+0xa4>
				break;
 800fcfe:	bf00      	nop
 800fd00:	e000      	b.n	800fd04 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fd02:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fd04:	7dfb      	ldrb	r3, [r7, #23]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <dir_read+0xb0>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	61da      	str	r2, [r3, #28]
	return res;
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3718      	adds	r7, #24
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b086      	sub	sp, #24
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fd28:	2100      	movs	r1, #0
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7ff fdb3 	bl	800f896 <dir_sdi>
 800fd30:	4603      	mov	r3, r0
 800fd32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <dir_find+0x24>
 800fd3a:	7dfb      	ldrb	r3, [r7, #23]
 800fd3c:	e03e      	b.n	800fdbc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	4619      	mov	r1, r3
 800fd44:	6938      	ldr	r0, [r7, #16]
 800fd46:	f7ff f9cd 	bl	800f0e4 <move_window>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d12f      	bne.n	800fdb4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a1b      	ldr	r3, [r3, #32]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d102      	bne.n	800fd68 <dir_find+0x4e>
 800fd62:	2304      	movs	r3, #4
 800fd64:	75fb      	strb	r3, [r7, #23]
 800fd66:	e028      	b.n	800fdba <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a1b      	ldr	r3, [r3, #32]
 800fd6c:	330b      	adds	r3, #11
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd74:	b2da      	uxtb	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	330b      	adds	r3, #11
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	f003 0308 	and.w	r3, r3, #8
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10a      	bne.n	800fda0 <dir_find+0x86>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6a18      	ldr	r0, [r3, #32]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	3324      	adds	r3, #36	; 0x24
 800fd92:	220b      	movs	r2, #11
 800fd94:	4619      	mov	r1, r3
 800fd96:	f7fe ffb2 	bl	800ecfe <mem_cmp>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00b      	beq.n	800fdb8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fda0:	2100      	movs	r1, #0
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff fe00 	bl	800f9a8 <dir_next>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d0c5      	beq.n	800fd3e <dir_find+0x24>
 800fdb2:	e002      	b.n	800fdba <dir_find+0xa0>
		if (res != FR_OK) break;
 800fdb4:	bf00      	nop
 800fdb6:	e000      	b.n	800fdba <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fdb8:	bf00      	nop

	return res;
 800fdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3718      	adds	r7, #24
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fdd2:	2101      	movs	r1, #1
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff febd 	bl	800fb54 <dir_alloc>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d11c      	bne.n	800fe1e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	69db      	ldr	r3, [r3, #28]
 800fde8:	4619      	mov	r1, r3
 800fdea:	68b8      	ldr	r0, [r7, #8]
 800fdec:	f7ff f97a 	bl	800f0e4 <move_window>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdf4:	7bfb      	ldrb	r3, [r7, #15]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d111      	bne.n	800fe1e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	2220      	movs	r2, #32
 800fe00:	2100      	movs	r1, #0
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fe ff61 	bl	800ecca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6a18      	ldr	r0, [r3, #32]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3324      	adds	r3, #36	; 0x24
 800fe10:	220b      	movs	r2, #11
 800fe12:	4619      	mov	r1, r3
 800fe14:	f7fe ff38 	bl	800ec88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fe1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3710      	adds	r7, #16
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	69db      	ldr	r3, [r3, #28]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f7ff f951 	bl	800f0e4 <move_window>
 800fe42:	4603      	mov	r3, r0
 800fe44:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800fe46:	7afb      	ldrb	r3, [r7, #11]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d106      	bne.n	800fe5a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6a1b      	ldr	r3, [r3, #32]
 800fe50:	22e5      	movs	r2, #229	; 0xe5
 800fe52:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2201      	movs	r2, #1
 800fe58:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800fe5a:	7afb      	ldrb	r3, [r7, #11]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b088      	sub	sp, #32
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	3324      	adds	r3, #36	; 0x24
 800fe78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fe7a:	220b      	movs	r2, #11
 800fe7c:	2120      	movs	r1, #32
 800fe7e:	68b8      	ldr	r0, [r7, #8]
 800fe80:	f7fe ff23 	bl	800ecca <mem_set>
	si = i = 0; ni = 8;
 800fe84:	2300      	movs	r3, #0
 800fe86:	613b      	str	r3, [r7, #16]
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	617b      	str	r3, [r7, #20]
 800fe8c:	2308      	movs	r3, #8
 800fe8e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	4413      	add	r3, r2
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b2e      	cmp	r3, #46	; 0x2e
 800fe9a:	d12f      	bne.n	800fefc <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	617a      	str	r2, [r7, #20]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	4413      	add	r3, r2
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800feaa:	7ffb      	ldrb	r3, [r7, #31]
 800feac:	2b2e      	cmp	r3, #46	; 0x2e
 800feae:	d10a      	bne.n	800fec6 <create_name+0x62>
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	d807      	bhi.n	800fec6 <create_name+0x62>
			sfn[i++] = c;
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	1c5a      	adds	r2, r3, #1
 800feba:	613a      	str	r2, [r7, #16]
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	4413      	add	r3, r2
 800fec0:	7ffa      	ldrb	r2, [r7, #31]
 800fec2:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800fec4:	e7ea      	b.n	800fe9c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800fec6:	7ffb      	ldrb	r3, [r7, #31]
 800fec8:	2b2f      	cmp	r3, #47	; 0x2f
 800feca:	d007      	beq.n	800fedc <create_name+0x78>
 800fecc:	7ffb      	ldrb	r3, [r7, #31]
 800fece:	2b5c      	cmp	r3, #92	; 0x5c
 800fed0:	d004      	beq.n	800fedc <create_name+0x78>
 800fed2:	7ffb      	ldrb	r3, [r7, #31]
 800fed4:	2b20      	cmp	r3, #32
 800fed6:	d901      	bls.n	800fedc <create_name+0x78>
 800fed8:	2306      	movs	r3, #6
 800feda:	e084      	b.n	800ffe6 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	441a      	add	r2, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800fee6:	7ffb      	ldrb	r3, [r7, #31]
 800fee8:	2b20      	cmp	r3, #32
 800feea:	d801      	bhi.n	800fef0 <create_name+0x8c>
 800feec:	2224      	movs	r2, #36	; 0x24
 800feee:	e000      	b.n	800fef2 <create_name+0x8e>
 800fef0:	2220      	movs	r2, #32
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	330b      	adds	r3, #11
 800fef6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800fef8:	2300      	movs	r3, #0
 800fefa:	e074      	b.n	800ffe6 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	617a      	str	r2, [r7, #20]
 800ff02:	68fa      	ldr	r2, [r7, #12]
 800ff04:	4413      	add	r3, r2
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ff0a:	7ffb      	ldrb	r3, [r7, #31]
 800ff0c:	2b20      	cmp	r3, #32
 800ff0e:	d94e      	bls.n	800ffae <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ff10:	7ffb      	ldrb	r3, [r7, #31]
 800ff12:	2b2f      	cmp	r3, #47	; 0x2f
 800ff14:	d006      	beq.n	800ff24 <create_name+0xc0>
 800ff16:	7ffb      	ldrb	r3, [r7, #31]
 800ff18:	2b5c      	cmp	r3, #92	; 0x5c
 800ff1a:	d110      	bne.n	800ff3e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ff1c:	e002      	b.n	800ff24 <create_name+0xc0>
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	3301      	adds	r3, #1
 800ff22:	617b      	str	r3, [r7, #20]
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	4413      	add	r3, r2
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	2b2f      	cmp	r3, #47	; 0x2f
 800ff2e:	d0f6      	beq.n	800ff1e <create_name+0xba>
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	4413      	add	r3, r2
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	2b5c      	cmp	r3, #92	; 0x5c
 800ff3a:	d0f0      	beq.n	800ff1e <create_name+0xba>
			break;
 800ff3c:	e038      	b.n	800ffb0 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ff3e:	7ffb      	ldrb	r3, [r7, #31]
 800ff40:	2b2e      	cmp	r3, #46	; 0x2e
 800ff42:	d003      	beq.n	800ff4c <create_name+0xe8>
 800ff44:	693a      	ldr	r2, [r7, #16]
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d30c      	bcc.n	800ff66 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	2b0b      	cmp	r3, #11
 800ff50:	d002      	beq.n	800ff58 <create_name+0xf4>
 800ff52:	7ffb      	ldrb	r3, [r7, #31]
 800ff54:	2b2e      	cmp	r3, #46	; 0x2e
 800ff56:	d001      	beq.n	800ff5c <create_name+0xf8>
 800ff58:	2306      	movs	r3, #6
 800ff5a:	e044      	b.n	800ffe6 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800ff5c:	2308      	movs	r3, #8
 800ff5e:	613b      	str	r3, [r7, #16]
 800ff60:	230b      	movs	r3, #11
 800ff62:	61bb      	str	r3, [r7, #24]
			continue;
 800ff64:	e022      	b.n	800ffac <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ff66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	da04      	bge.n	800ff78 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ff6e:	7ffb      	ldrb	r3, [r7, #31]
 800ff70:	3b80      	subs	r3, #128	; 0x80
 800ff72:	4a1f      	ldr	r2, [pc, #124]	; (800fff0 <create_name+0x18c>)
 800ff74:	5cd3      	ldrb	r3, [r2, r3]
 800ff76:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ff78:	7ffb      	ldrb	r3, [r7, #31]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	481d      	ldr	r0, [pc, #116]	; (800fff4 <create_name+0x190>)
 800ff7e:	f7fe fee5 	bl	800ed4c <chk_chr>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <create_name+0x128>
 800ff88:	2306      	movs	r3, #6
 800ff8a:	e02c      	b.n	800ffe6 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ff8c:	7ffb      	ldrb	r3, [r7, #31]
 800ff8e:	2b60      	cmp	r3, #96	; 0x60
 800ff90:	d905      	bls.n	800ff9e <create_name+0x13a>
 800ff92:	7ffb      	ldrb	r3, [r7, #31]
 800ff94:	2b7a      	cmp	r3, #122	; 0x7a
 800ff96:	d802      	bhi.n	800ff9e <create_name+0x13a>
 800ff98:	7ffb      	ldrb	r3, [r7, #31]
 800ff9a:	3b20      	subs	r3, #32
 800ff9c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	1c5a      	adds	r2, r3, #1
 800ffa2:	613a      	str	r2, [r7, #16]
 800ffa4:	68ba      	ldr	r2, [r7, #8]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	7ffa      	ldrb	r2, [r7, #31]
 800ffaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ffac:	e7a6      	b.n	800fefc <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ffae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	441a      	add	r2, r3
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d101      	bne.n	800ffc4 <create_name+0x160>
 800ffc0:	2306      	movs	r3, #6
 800ffc2:	e010      	b.n	800ffe6 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2be5      	cmp	r3, #229	; 0xe5
 800ffca:	d102      	bne.n	800ffd2 <create_name+0x16e>
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	2205      	movs	r2, #5
 800ffd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ffd2:	7ffb      	ldrb	r3, [r7, #31]
 800ffd4:	2b20      	cmp	r3, #32
 800ffd6:	d801      	bhi.n	800ffdc <create_name+0x178>
 800ffd8:	2204      	movs	r2, #4
 800ffda:	e000      	b.n	800ffde <create_name+0x17a>
 800ffdc:	2200      	movs	r2, #0
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	330b      	adds	r3, #11
 800ffe2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ffe4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3720      	adds	r7, #32
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	080181e8 	.word	0x080181e8
 800fff4:	08018198 	.word	0x08018198

0800fff8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	2b2f      	cmp	r3, #47	; 0x2f
 8010012:	d00b      	beq.n	801002c <follow_path+0x34>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b5c      	cmp	r3, #92	; 0x5c
 801001a:	d007      	beq.n	801002c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	699a      	ldr	r2, [r3, #24]
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	609a      	str	r2, [r3, #8]
 8010024:	e00d      	b.n	8010042 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	3301      	adds	r3, #1
 801002a:	603b      	str	r3, [r7, #0]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	2b2f      	cmp	r3, #47	; 0x2f
 8010032:	d0f8      	beq.n	8010026 <follow_path+0x2e>
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b5c      	cmp	r3, #92	; 0x5c
 801003a:	d0f4      	beq.n	8010026 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	2200      	movs	r2, #0
 8010040:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	2b1f      	cmp	r3, #31
 8010048:	d80a      	bhi.n	8010060 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2280      	movs	r2, #128	; 0x80
 801004e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010052:	2100      	movs	r1, #0
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7ff fc1e 	bl	800f896 <dir_sdi>
 801005a:	4603      	mov	r3, r0
 801005c:	75fb      	strb	r3, [r7, #23]
 801005e:	e05b      	b.n	8010118 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010060:	463b      	mov	r3, r7
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff fefd 	bl	800fe64 <create_name>
 801006a:	4603      	mov	r3, r0
 801006c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801006e:	7dfb      	ldrb	r3, [r7, #23]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d14c      	bne.n	801010e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff fe50 	bl	800fd1a <dir_find>
 801007a:	4603      	mov	r3, r0
 801007c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010084:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010086:	7dfb      	ldrb	r3, [r7, #23]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d01b      	beq.n	80100c4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801008c:	7dfb      	ldrb	r3, [r7, #23]
 801008e:	2b04      	cmp	r3, #4
 8010090:	d13f      	bne.n	8010112 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010092:	7afb      	ldrb	r3, [r7, #11]
 8010094:	f003 0320 	and.w	r3, r3, #32
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00b      	beq.n	80100b4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801009c:	7afb      	ldrb	r3, [r7, #11]
 801009e:	f003 0304 	and.w	r3, r3, #4
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d031      	beq.n	801010a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2280      	movs	r2, #128	; 0x80
 80100aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80100b2:	e02e      	b.n	8010112 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80100b4:	7afb      	ldrb	r3, [r7, #11]
 80100b6:	f003 0304 	and.w	r3, r3, #4
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d129      	bne.n	8010112 <follow_path+0x11a>
 80100be:	2305      	movs	r3, #5
 80100c0:	75fb      	strb	r3, [r7, #23]
				break;
 80100c2:	e026      	b.n	8010112 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100c4:	7afb      	ldrb	r3, [r7, #11]
 80100c6:	f003 0304 	and.w	r3, r3, #4
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d123      	bne.n	8010116 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	799b      	ldrb	r3, [r3, #6]
 80100d2:	f003 0310 	and.w	r3, r3, #16
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d102      	bne.n	80100e0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80100da:	2305      	movs	r3, #5
 80100dc:	75fb      	strb	r3, [r7, #23]
 80100de:	e01b      	b.n	8010118 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	695b      	ldr	r3, [r3, #20]
 80100ea:	68fa      	ldr	r2, [r7, #12]
 80100ec:	8992      	ldrh	r2, [r2, #12]
 80100ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80100f2:	fb02 f200 	mul.w	r2, r2, r0
 80100f6:	1a9b      	subs	r3, r3, r2
 80100f8:	440b      	add	r3, r1
 80100fa:	4619      	mov	r1, r3
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f7ff fd70 	bl	800fbe2 <ld_clust>
 8010102:	4602      	mov	r2, r0
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	609a      	str	r2, [r3, #8]
 8010108:	e7aa      	b.n	8010060 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801010a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801010c:	e7a8      	b.n	8010060 <follow_path+0x68>
			if (res != FR_OK) break;
 801010e:	bf00      	nop
 8010110:	e002      	b.n	8010118 <follow_path+0x120>
				break;
 8010112:	bf00      	nop
 8010114:	e000      	b.n	8010118 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010116:	bf00      	nop
			}
		}
	}

	return res;
 8010118:	7dfb      	ldrb	r3, [r7, #23]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3718      	adds	r7, #24
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010122:	b480      	push	{r7}
 8010124:	b087      	sub	sp, #28
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801012a:	f04f 33ff 	mov.w	r3, #4294967295
 801012e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d031      	beq.n	801019c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	617b      	str	r3, [r7, #20]
 801013e:	e002      	b.n	8010146 <get_ldnumber+0x24>
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	3301      	adds	r3, #1
 8010144:	617b      	str	r3, [r7, #20]
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	2b20      	cmp	r3, #32
 801014c:	d903      	bls.n	8010156 <get_ldnumber+0x34>
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	2b3a      	cmp	r3, #58	; 0x3a
 8010154:	d1f4      	bne.n	8010140 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	2b3a      	cmp	r3, #58	; 0x3a
 801015c:	d11c      	bne.n	8010198 <get_ldnumber+0x76>
			tp = *path;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	1c5a      	adds	r2, r3, #1
 8010168:	60fa      	str	r2, [r7, #12]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	3b30      	subs	r3, #48	; 0x30
 801016e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2b09      	cmp	r3, #9
 8010174:	d80e      	bhi.n	8010194 <get_ldnumber+0x72>
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	429a      	cmp	r2, r3
 801017c:	d10a      	bne.n	8010194 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d107      	bne.n	8010194 <get_ldnumber+0x72>
					vol = (int)i;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	3301      	adds	r3, #1
 801018c:	617b      	str	r3, [r7, #20]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	697a      	ldr	r2, [r7, #20]
 8010192:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	e002      	b.n	801019e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010198:	2300      	movs	r3, #0
 801019a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801019c:	693b      	ldr	r3, [r7, #16]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	371c      	adds	r7, #28
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
	...

080101ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	70da      	strb	r2, [r3, #3]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f04f 32ff 	mov.w	r2, #4294967295
 80101c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7fe ff8c 	bl	800f0e4 <move_window>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <check_fs+0x2a>
 80101d2:	2304      	movs	r3, #4
 80101d4:	e038      	b.n	8010248 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	3338      	adds	r3, #56	; 0x38
 80101da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fe fcd0 	bl	800eb84 <ld_word>
 80101e4:	4603      	mov	r3, r0
 80101e6:	461a      	mov	r2, r3
 80101e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d001      	beq.n	80101f4 <check_fs+0x48>
 80101f0:	2303      	movs	r3, #3
 80101f2:	e029      	b.n	8010248 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80101fa:	2be9      	cmp	r3, #233	; 0xe9
 80101fc:	d009      	beq.n	8010212 <check_fs+0x66>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010204:	2beb      	cmp	r3, #235	; 0xeb
 8010206:	d11e      	bne.n	8010246 <check_fs+0x9a>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801020e:	2b90      	cmp	r3, #144	; 0x90
 8010210:	d119      	bne.n	8010246 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3338      	adds	r3, #56	; 0x38
 8010216:	3336      	adds	r3, #54	; 0x36
 8010218:	4618      	mov	r0, r3
 801021a:	f7fe fccb 	bl	800ebb4 <ld_dword>
 801021e:	4603      	mov	r3, r0
 8010220:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010224:	4a0a      	ldr	r2, [pc, #40]	; (8010250 <check_fs+0xa4>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d101      	bne.n	801022e <check_fs+0x82>
 801022a:	2300      	movs	r3, #0
 801022c:	e00c      	b.n	8010248 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3338      	adds	r3, #56	; 0x38
 8010232:	3352      	adds	r3, #82	; 0x52
 8010234:	4618      	mov	r0, r3
 8010236:	f7fe fcbd 	bl	800ebb4 <ld_dword>
 801023a:	4602      	mov	r2, r0
 801023c:	4b05      	ldr	r3, [pc, #20]	; (8010254 <check_fs+0xa8>)
 801023e:	429a      	cmp	r2, r3
 8010240:	d101      	bne.n	8010246 <check_fs+0x9a>
 8010242:	2300      	movs	r3, #0
 8010244:	e000      	b.n	8010248 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010246:	2302      	movs	r3, #2
}
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	00544146 	.word	0x00544146
 8010254:	33544146 	.word	0x33544146

08010258 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b096      	sub	sp, #88	; 0x58
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	4613      	mov	r3, r2
 8010264:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2200      	movs	r2, #0
 801026a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7ff ff58 	bl	8010122 <get_ldnumber>
 8010272:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010276:	2b00      	cmp	r3, #0
 8010278:	da01      	bge.n	801027e <find_volume+0x26>
 801027a:	230b      	movs	r3, #11
 801027c:	e268      	b.n	8010750 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801027e:	4ab0      	ldr	r2, [pc, #704]	; (8010540 <find_volume+0x2e8>)
 8010280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010286:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028a:	2b00      	cmp	r3, #0
 801028c:	d101      	bne.n	8010292 <find_volume+0x3a>
 801028e:	230c      	movs	r3, #12
 8010290:	e25e      	b.n	8010750 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010296:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	f023 0301 	bic.w	r3, r3, #1
 801029e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80102a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01a      	beq.n	80102de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80102a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102aa:	785b      	ldrb	r3, [r3, #1]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fe fbcb 	bl	800ea48 <disk_status>
 80102b2:	4603      	mov	r3, r0
 80102b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80102b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102bc:	f003 0301 	and.w	r3, r3, #1
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10c      	bne.n	80102de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80102c4:	79fb      	ldrb	r3, [r7, #7]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d007      	beq.n	80102da <find_volume+0x82>
 80102ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ce:	f003 0304 	and.w	r3, r3, #4
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80102d6:	230a      	movs	r3, #10
 80102d8:	e23a      	b.n	8010750 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80102da:	2300      	movs	r3, #0
 80102dc:	e238      	b.n	8010750 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80102de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e0:	2200      	movs	r2, #0
 80102e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80102e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80102ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ee:	785b      	ldrb	r3, [r3, #1]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fe fbc3 	bl	800ea7c <disk_initialize>
 80102f6:	4603      	mov	r3, r0
 80102f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80102fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010300:	f003 0301 	and.w	r3, r3, #1
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010308:	2303      	movs	r3, #3
 801030a:	e221      	b.n	8010750 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801030c:	79fb      	ldrb	r3, [r7, #7]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d007      	beq.n	8010322 <find_volume+0xca>
 8010312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010316:	f003 0304 	and.w	r3, r3, #4
 801031a:	2b00      	cmp	r3, #0
 801031c:	d001      	beq.n	8010322 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801031e:	230a      	movs	r3, #10
 8010320:	e216      	b.n	8010750 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010324:	7858      	ldrb	r0, [r3, #1]
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	330c      	adds	r3, #12
 801032a:	461a      	mov	r2, r3
 801032c:	2102      	movs	r1, #2
 801032e:	f7fe fc0b 	bl	800eb48 <disk_ioctl>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <find_volume+0xe4>
 8010338:	2301      	movs	r3, #1
 801033a:	e209      	b.n	8010750 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033e:	899b      	ldrh	r3, [r3, #12]
 8010340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010344:	d80d      	bhi.n	8010362 <find_volume+0x10a>
 8010346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010348:	899b      	ldrh	r3, [r3, #12]
 801034a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801034e:	d308      	bcc.n	8010362 <find_volume+0x10a>
 8010350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010352:	899b      	ldrh	r3, [r3, #12]
 8010354:	461a      	mov	r2, r3
 8010356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010358:	899b      	ldrh	r3, [r3, #12]
 801035a:	3b01      	subs	r3, #1
 801035c:	4013      	ands	r3, r2
 801035e:	2b00      	cmp	r3, #0
 8010360:	d001      	beq.n	8010366 <find_volume+0x10e>
 8010362:	2301      	movs	r3, #1
 8010364:	e1f4      	b.n	8010750 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801036a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801036c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801036e:	f7ff ff1d 	bl	80101ac <check_fs>
 8010372:	4603      	mov	r3, r0
 8010374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801037c:	2b02      	cmp	r3, #2
 801037e:	d14b      	bne.n	8010418 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010380:	2300      	movs	r3, #0
 8010382:	643b      	str	r3, [r7, #64]	; 0x40
 8010384:	e01f      	b.n	80103c6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010388:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801038c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801038e:	011b      	lsls	r3, r3, #4
 8010390:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010394:	4413      	add	r3, r2
 8010396:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039a:	3304      	adds	r3, #4
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d006      	beq.n	80103b0 <find_volume+0x158>
 80103a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a4:	3308      	adds	r3, #8
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fe fc04 	bl	800ebb4 <ld_dword>
 80103ac:	4602      	mov	r2, r0
 80103ae:	e000      	b.n	80103b2 <find_volume+0x15a>
 80103b0:	2200      	movs	r2, #0
 80103b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80103ba:	440b      	add	r3, r1
 80103bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80103c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c2:	3301      	adds	r3, #1
 80103c4:	643b      	str	r3, [r7, #64]	; 0x40
 80103c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c8:	2b03      	cmp	r3, #3
 80103ca:	d9dc      	bls.n	8010386 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80103cc:	2300      	movs	r3, #0
 80103ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80103d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d002      	beq.n	80103dc <find_volume+0x184>
 80103d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103d8:	3b01      	subs	r3, #1
 80103da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80103dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80103e4:	4413      	add	r3, r2
 80103e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80103ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80103ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d005      	beq.n	80103fe <find_volume+0x1a6>
 80103f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103f6:	f7ff fed9 	bl	80101ac <check_fs>
 80103fa:	4603      	mov	r3, r0
 80103fc:	e000      	b.n	8010400 <find_volume+0x1a8>
 80103fe:	2303      	movs	r3, #3
 8010400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010408:	2b01      	cmp	r3, #1
 801040a:	d905      	bls.n	8010418 <find_volume+0x1c0>
 801040c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801040e:	3301      	adds	r3, #1
 8010410:	643b      	str	r3, [r7, #64]	; 0x40
 8010412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010414:	2b03      	cmp	r3, #3
 8010416:	d9e1      	bls.n	80103dc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801041c:	2b04      	cmp	r3, #4
 801041e:	d101      	bne.n	8010424 <find_volume+0x1cc>
 8010420:	2301      	movs	r3, #1
 8010422:	e195      	b.n	8010750 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010428:	2b01      	cmp	r3, #1
 801042a:	d901      	bls.n	8010430 <find_volume+0x1d8>
 801042c:	230d      	movs	r3, #13
 801042e:	e18f      	b.n	8010750 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010432:	3338      	adds	r3, #56	; 0x38
 8010434:	330b      	adds	r3, #11
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fba4 	bl	800eb84 <ld_word>
 801043c:	4603      	mov	r3, r0
 801043e:	461a      	mov	r2, r3
 8010440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010442:	899b      	ldrh	r3, [r3, #12]
 8010444:	429a      	cmp	r2, r3
 8010446:	d001      	beq.n	801044c <find_volume+0x1f4>
 8010448:	230d      	movs	r3, #13
 801044a:	e181      	b.n	8010750 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801044c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044e:	3338      	adds	r3, #56	; 0x38
 8010450:	3316      	adds	r3, #22
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe fb96 	bl	800eb84 <ld_word>
 8010458:	4603      	mov	r3, r0
 801045a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801045c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045e:	2b00      	cmp	r3, #0
 8010460:	d106      	bne.n	8010470 <find_volume+0x218>
 8010462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010464:	3338      	adds	r3, #56	; 0x38
 8010466:	3324      	adds	r3, #36	; 0x24
 8010468:	4618      	mov	r0, r3
 801046a:	f7fe fba3 	bl	800ebb4 <ld_dword>
 801046e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010474:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801047c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010482:	789b      	ldrb	r3, [r3, #2]
 8010484:	2b01      	cmp	r3, #1
 8010486:	d005      	beq.n	8010494 <find_volume+0x23c>
 8010488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048a:	789b      	ldrb	r3, [r3, #2]
 801048c:	2b02      	cmp	r3, #2
 801048e:	d001      	beq.n	8010494 <find_volume+0x23c>
 8010490:	230d      	movs	r3, #13
 8010492:	e15d      	b.n	8010750 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010496:	789b      	ldrb	r3, [r3, #2]
 8010498:	461a      	mov	r2, r3
 801049a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801049c:	fb02 f303 	mul.w	r3, r2, r3
 80104a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80104a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80104ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b0:	895b      	ldrh	r3, [r3, #10]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d008      	beq.n	80104c8 <find_volume+0x270>
 80104b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b8:	895b      	ldrh	r3, [r3, #10]
 80104ba:	461a      	mov	r2, r3
 80104bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104be:	895b      	ldrh	r3, [r3, #10]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	4013      	ands	r3, r2
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <find_volume+0x274>
 80104c8:	230d      	movs	r3, #13
 80104ca:	e141      	b.n	8010750 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80104cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ce:	3338      	adds	r3, #56	; 0x38
 80104d0:	3311      	adds	r3, #17
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fe fb56 	bl	800eb84 <ld_word>
 80104d8:	4603      	mov	r3, r0
 80104da:	461a      	mov	r2, r3
 80104dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80104e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e2:	891b      	ldrh	r3, [r3, #8]
 80104e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104e6:	8992      	ldrh	r2, [r2, #12]
 80104e8:	0952      	lsrs	r2, r2, #5
 80104ea:	b292      	uxth	r2, r2
 80104ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80104f0:	fb02 f201 	mul.w	r2, r2, r1
 80104f4:	1a9b      	subs	r3, r3, r2
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d001      	beq.n	8010500 <find_volume+0x2a8>
 80104fc:	230d      	movs	r3, #13
 80104fe:	e127      	b.n	8010750 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010502:	3338      	adds	r3, #56	; 0x38
 8010504:	3313      	adds	r3, #19
 8010506:	4618      	mov	r0, r3
 8010508:	f7fe fb3c 	bl	800eb84 <ld_word>
 801050c:	4603      	mov	r3, r0
 801050e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010512:	2b00      	cmp	r3, #0
 8010514:	d106      	bne.n	8010524 <find_volume+0x2cc>
 8010516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010518:	3338      	adds	r3, #56	; 0x38
 801051a:	3320      	adds	r3, #32
 801051c:	4618      	mov	r0, r3
 801051e:	f7fe fb49 	bl	800ebb4 <ld_dword>
 8010522:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010526:	3338      	adds	r3, #56	; 0x38
 8010528:	330e      	adds	r3, #14
 801052a:	4618      	mov	r0, r3
 801052c:	f7fe fb2a 	bl	800eb84 <ld_word>
 8010530:	4603      	mov	r3, r0
 8010532:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010536:	2b00      	cmp	r3, #0
 8010538:	d104      	bne.n	8010544 <find_volume+0x2ec>
 801053a:	230d      	movs	r3, #13
 801053c:	e108      	b.n	8010750 <find_volume+0x4f8>
 801053e:	bf00      	nop
 8010540:	20037448 	.word	0x20037448

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010548:	4413      	add	r3, r2
 801054a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801054c:	8911      	ldrh	r1, [r2, #8]
 801054e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010550:	8992      	ldrh	r2, [r2, #12]
 8010552:	0952      	lsrs	r2, r2, #5
 8010554:	b292      	uxth	r2, r2
 8010556:	fbb1 f2f2 	udiv	r2, r1, r2
 801055a:	b292      	uxth	r2, r2
 801055c:	4413      	add	r3, r2
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010564:	429a      	cmp	r2, r3
 8010566:	d201      	bcs.n	801056c <find_volume+0x314>
 8010568:	230d      	movs	r3, #13
 801056a:	e0f1      	b.n	8010750 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801056c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010574:	8952      	ldrh	r2, [r2, #10]
 8010576:	fbb3 f3f2 	udiv	r3, r3, r2
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <find_volume+0x32e>
 8010582:	230d      	movs	r3, #13
 8010584:	e0e4      	b.n	8010750 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010586:	2303      	movs	r3, #3
 8010588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010592:	4293      	cmp	r3, r2
 8010594:	d802      	bhi.n	801059c <find_volume+0x344>
 8010596:	2302      	movs	r3, #2
 8010598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d802      	bhi.n	80105ac <find_volume+0x354>
 80105a6:	2301      	movs	r3, #1
 80105a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80105ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ae:	1c9a      	adds	r2, r3, #2
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80105b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80105ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105be:	441a      	add	r2, r3
 80105c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80105c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c8:	441a      	add	r2, r3
 80105ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105cc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80105ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105d2:	2b03      	cmp	r3, #3
 80105d4:	d11e      	bne.n	8010614 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80105d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d8:	3338      	adds	r3, #56	; 0x38
 80105da:	332a      	adds	r3, #42	; 0x2a
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe fad1 	bl	800eb84 <ld_word>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d001      	beq.n	80105ec <find_volume+0x394>
 80105e8:	230d      	movs	r3, #13
 80105ea:	e0b1      	b.n	8010750 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	891b      	ldrh	r3, [r3, #8]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d001      	beq.n	80105f8 <find_volume+0x3a0>
 80105f4:	230d      	movs	r3, #13
 80105f6:	e0ab      	b.n	8010750 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	3338      	adds	r3, #56	; 0x38
 80105fc:	332c      	adds	r3, #44	; 0x2c
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fe fad8 	bl	800ebb4 <ld_dword>
 8010604:	4602      	mov	r2, r0
 8010606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010608:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801060a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060c:	69db      	ldr	r3, [r3, #28]
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	647b      	str	r3, [r7, #68]	; 0x44
 8010612:	e01f      	b.n	8010654 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010616:	891b      	ldrh	r3, [r3, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d101      	bne.n	8010620 <find_volume+0x3c8>
 801061c:	230d      	movs	r3, #13
 801061e:	e097      	b.n	8010750 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010626:	441a      	add	r2, r3
 8010628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801062c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010630:	2b02      	cmp	r3, #2
 8010632:	d103      	bne.n	801063c <find_volume+0x3e4>
 8010634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010636:	69db      	ldr	r3, [r3, #28]
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	e00a      	b.n	8010652 <find_volume+0x3fa>
 801063c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063e:	69da      	ldr	r2, [r3, #28]
 8010640:	4613      	mov	r3, r2
 8010642:	005b      	lsls	r3, r3, #1
 8010644:	4413      	add	r3, r2
 8010646:	085a      	lsrs	r2, r3, #1
 8010648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064a:	69db      	ldr	r3, [r3, #28]
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010652:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	6a1a      	ldr	r2, [r3, #32]
 8010658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065a:	899b      	ldrh	r3, [r3, #12]
 801065c:	4619      	mov	r1, r3
 801065e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010660:	440b      	add	r3, r1
 8010662:	3b01      	subs	r3, #1
 8010664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010666:	8989      	ldrh	r1, [r1, #12]
 8010668:	fbb3 f3f1 	udiv	r3, r3, r1
 801066c:	429a      	cmp	r2, r3
 801066e:	d201      	bcs.n	8010674 <find_volume+0x41c>
 8010670:	230d      	movs	r3, #13
 8010672:	e06d      	b.n	8010750 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	f04f 32ff 	mov.w	r2, #4294967295
 801067a:	615a      	str	r2, [r3, #20]
 801067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067e:	695a      	ldr	r2, [r3, #20]
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010686:	2280      	movs	r2, #128	; 0x80
 8010688:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801068a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801068e:	2b03      	cmp	r3, #3
 8010690:	d149      	bne.n	8010726 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010694:	3338      	adds	r3, #56	; 0x38
 8010696:	3330      	adds	r3, #48	; 0x30
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe fa73 	bl	800eb84 <ld_word>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d140      	bne.n	8010726 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80106a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106a6:	3301      	adds	r3, #1
 80106a8:	4619      	mov	r1, r3
 80106aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106ac:	f7fe fd1a 	bl	800f0e4 <move_window>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d137      	bne.n	8010726 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80106b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b8:	2200      	movs	r2, #0
 80106ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80106bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106be:	3338      	adds	r3, #56	; 0x38
 80106c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fe fa5d 	bl	800eb84 <ld_word>
 80106ca:	4603      	mov	r3, r0
 80106cc:	461a      	mov	r2, r3
 80106ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d127      	bne.n	8010726 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	3338      	adds	r3, #56	; 0x38
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fe fa6a 	bl	800ebb4 <ld_dword>
 80106e0:	4602      	mov	r2, r0
 80106e2:	4b1d      	ldr	r3, [pc, #116]	; (8010758 <find_volume+0x500>)
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d11e      	bne.n	8010726 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80106e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ea:	3338      	adds	r3, #56	; 0x38
 80106ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fe fa5f 	bl	800ebb4 <ld_dword>
 80106f6:	4602      	mov	r2, r0
 80106f8:	4b18      	ldr	r3, [pc, #96]	; (801075c <find_volume+0x504>)
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d113      	bne.n	8010726 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	3338      	adds	r3, #56	; 0x38
 8010702:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe fa54 	bl	800ebb4 <ld_dword>
 801070c:	4602      	mov	r2, r0
 801070e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010710:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010714:	3338      	adds	r3, #56	; 0x38
 8010716:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801071a:	4618      	mov	r0, r3
 801071c:	f7fe fa4a 	bl	800ebb4 <ld_dword>
 8010720:	4602      	mov	r2, r0
 8010722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010724:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010728:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801072c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801072e:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <find_volume+0x508>)
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	b29a      	uxth	r2, r3
 8010736:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <find_volume+0x508>)
 8010738:	801a      	strh	r2, [r3, #0]
 801073a:	4b09      	ldr	r3, [pc, #36]	; (8010760 <find_volume+0x508>)
 801073c:	881a      	ldrh	r2, [r3, #0]
 801073e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010740:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010744:	2200      	movs	r2, #0
 8010746:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010748:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801074a:	f7fe fc63 	bl	800f014 <clear_lock>
#endif
	return FR_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3758      	adds	r7, #88	; 0x58
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	41615252 	.word	0x41615252
 801075c:	61417272 	.word	0x61417272
 8010760:	2003744c 	.word	0x2003744c

08010764 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801076e:	2309      	movs	r3, #9
 8010770:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d01c      	beq.n	80107b2 <validate+0x4e>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d018      	beq.n	80107b2 <validate+0x4e>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d013      	beq.n	80107b2 <validate+0x4e>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	889a      	ldrh	r2, [r3, #4]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	88db      	ldrh	r3, [r3, #6]
 8010794:	429a      	cmp	r2, r3
 8010796:	d10c      	bne.n	80107b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	785b      	ldrb	r3, [r3, #1]
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fe f952 	bl	800ea48 <disk_status>
 80107a4:	4603      	mov	r3, r0
 80107a6:	f003 0301 	and.w	r3, r3, #1
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <validate+0x4e>
			res = FR_OK;
 80107ae:	2300      	movs	r3, #0
 80107b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80107b2:	7bfb      	ldrb	r3, [r7, #15]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d102      	bne.n	80107be <validate+0x5a>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	e000      	b.n	80107c0 <validate+0x5c>
 80107be:	2300      	movs	r3, #0
 80107c0:	683a      	ldr	r2, [r7, #0]
 80107c2:	6013      	str	r3, [r2, #0]
	return res;
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
	...

080107d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b088      	sub	sp, #32
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	4613      	mov	r3, r2
 80107dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80107e2:	f107 0310 	add.w	r3, r7, #16
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7ff fc9b 	bl	8010122 <get_ldnumber>
 80107ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	da01      	bge.n	80107f8 <f_mount+0x28>
 80107f4:	230b      	movs	r3, #11
 80107f6:	e02b      	b.n	8010850 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80107f8:	4a17      	ldr	r2, [pc, #92]	; (8010858 <f_mount+0x88>)
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010800:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d005      	beq.n	8010814 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010808:	69b8      	ldr	r0, [r7, #24]
 801080a:	f7fe fc03 	bl	800f014 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	2200      	movs	r2, #0
 8010812:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d002      	beq.n	8010820 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2200      	movs	r2, #0
 801081e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	490d      	ldr	r1, [pc, #52]	; (8010858 <f_mount+0x88>)
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <f_mount+0x66>
 8010830:	79fb      	ldrb	r3, [r7, #7]
 8010832:	2b01      	cmp	r3, #1
 8010834:	d001      	beq.n	801083a <f_mount+0x6a>
 8010836:	2300      	movs	r3, #0
 8010838:	e00a      	b.n	8010850 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801083a:	f107 010c 	add.w	r1, r7, #12
 801083e:	f107 0308 	add.w	r3, r7, #8
 8010842:	2200      	movs	r2, #0
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff fd07 	bl	8010258 <find_volume>
 801084a:	4603      	mov	r3, r0
 801084c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801084e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010850:	4618      	mov	r0, r3
 8010852:	3720      	adds	r7, #32
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	20037448 	.word	0x20037448

0801085c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b098      	sub	sp, #96	; 0x60
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	4613      	mov	r3, r2
 8010868:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d101      	bne.n	8010874 <f_open+0x18>
 8010870:	2309      	movs	r3, #9
 8010872:	e1ba      	b.n	8010bea <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801087a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801087c:	79fa      	ldrb	r2, [r7, #7]
 801087e:	f107 0110 	add.w	r1, r7, #16
 8010882:	f107 0308 	add.w	r3, r7, #8
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff fce6 	bl	8010258 <find_volume>
 801088c:	4603      	mov	r3, r0
 801088e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010896:	2b00      	cmp	r3, #0
 8010898:	f040 819e 	bne.w	8010bd8 <f_open+0x37c>
		dj.obj.fs = fs;
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	f107 0314 	add.w	r3, r7, #20
 80108a6:	4611      	mov	r1, r2
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff fba5 	bl	800fff8 <follow_path>
 80108ae:	4603      	mov	r3, r0
 80108b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80108b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d11a      	bne.n	80108f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80108bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80108c0:	b25b      	sxtb	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	da03      	bge.n	80108ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80108c6:	2306      	movs	r3, #6
 80108c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80108cc:	e011      	b.n	80108f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80108ce:	79fb      	ldrb	r3, [r7, #7]
 80108d0:	f023 0301 	bic.w	r3, r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	bf14      	ite	ne
 80108d8:	2301      	movne	r3, #1
 80108da:	2300      	moveq	r3, #0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	461a      	mov	r2, r3
 80108e0:	f107 0314 	add.w	r3, r7, #20
 80108e4:	4611      	mov	r1, r2
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fe fa4c 	bl	800ed84 <chk_lock>
 80108ec:	4603      	mov	r3, r0
 80108ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	f003 031c 	and.w	r3, r3, #28
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d07e      	beq.n	80109fa <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80108fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010900:	2b00      	cmp	r3, #0
 8010902:	d017      	beq.n	8010934 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010908:	2b04      	cmp	r3, #4
 801090a:	d10e      	bne.n	801092a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801090c:	f7fe fa96 	bl	800ee3c <enq_lock>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d006      	beq.n	8010924 <f_open+0xc8>
 8010916:	f107 0314 	add.w	r3, r7, #20
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff fa52 	bl	800fdc4 <dir_register>
 8010920:	4603      	mov	r3, r0
 8010922:	e000      	b.n	8010926 <f_open+0xca>
 8010924:	2312      	movs	r3, #18
 8010926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	f043 0308 	orr.w	r3, r3, #8
 8010930:	71fb      	strb	r3, [r7, #7]
 8010932:	e010      	b.n	8010956 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010934:	7ebb      	ldrb	r3, [r7, #26]
 8010936:	f003 0311 	and.w	r3, r3, #17
 801093a:	2b00      	cmp	r3, #0
 801093c:	d003      	beq.n	8010946 <f_open+0xea>
					res = FR_DENIED;
 801093e:	2307      	movs	r3, #7
 8010940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010944:	e007      	b.n	8010956 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010946:	79fb      	ldrb	r3, [r7, #7]
 8010948:	f003 0304 	and.w	r3, r3, #4
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <f_open+0xfa>
 8010950:	2308      	movs	r3, #8
 8010952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801095a:	2b00      	cmp	r3, #0
 801095c:	d167      	bne.n	8010a2e <f_open+0x1d2>
 801095e:	79fb      	ldrb	r3, [r7, #7]
 8010960:	f003 0308 	and.w	r3, r3, #8
 8010964:	2b00      	cmp	r3, #0
 8010966:	d062      	beq.n	8010a2e <f_open+0x1d2>
				dw = GET_FATTIME();
 8010968:	4ba2      	ldr	r3, [pc, #648]	; (8010bf4 <f_open+0x398>)
 801096a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096e:	330e      	adds	r3, #14
 8010970:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe f95c 	bl	800ec30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097a:	3316      	adds	r3, #22
 801097c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801097e:	4618      	mov	r0, r3
 8010980:	f7fe f956 	bl	800ec30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010986:	330b      	adds	r3, #11
 8010988:	2220      	movs	r2, #32
 801098a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010990:	4611      	mov	r1, r2
 8010992:	4618      	mov	r0, r3
 8010994:	f7ff f925 	bl	800fbe2 <ld_clust>
 8010998:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801099e:	2200      	movs	r2, #0
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff f93d 	bl	800fc20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80109a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a8:	331c      	adds	r3, #28
 80109aa:	2100      	movs	r1, #0
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fe f93f 	bl	800ec30 <st_dword>
					fs->wflag = 1;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2201      	movs	r2, #1
 80109b6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80109b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d037      	beq.n	8010a2e <f_open+0x1d2>
						dw = fs->winsect;
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c2:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80109c4:	f107 0314 	add.w	r3, r7, #20
 80109c8:	2200      	movs	r2, #0
 80109ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe fe2d 	bl	800f62c <remove_chain>
 80109d2:	4603      	mov	r3, r0
 80109d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80109d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d126      	bne.n	8010a2e <f_open+0x1d2>
							res = move_window(fs, dw);
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7fe fb7d 	bl	800f0e4 <move_window>
 80109ea:	4603      	mov	r3, r0
 80109ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109f4:	3a01      	subs	r2, #1
 80109f6:	611a      	str	r2, [r3, #16]
 80109f8:	e019      	b.n	8010a2e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80109fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d115      	bne.n	8010a2e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010a02:	7ebb      	ldrb	r3, [r7, #26]
 8010a04:	f003 0310 	and.w	r3, r3, #16
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d003      	beq.n	8010a14 <f_open+0x1b8>
					res = FR_NO_FILE;
 8010a0c:	2304      	movs	r3, #4
 8010a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010a12:	e00c      	b.n	8010a2e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010a14:	79fb      	ldrb	r3, [r7, #7]
 8010a16:	f003 0302 	and.w	r3, r3, #2
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d007      	beq.n	8010a2e <f_open+0x1d2>
 8010a1e:	7ebb      	ldrb	r3, [r7, #26]
 8010a20:	f003 0301 	and.w	r3, r3, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d002      	beq.n	8010a2e <f_open+0x1d2>
						res = FR_DENIED;
 8010a28:	2307      	movs	r3, #7
 8010a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d128      	bne.n	8010a88 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010a36:	79fb      	ldrb	r3, [r7, #7]
 8010a38:	f003 0308 	and.w	r3, r3, #8
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d003      	beq.n	8010a48 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010a40:	79fb      	ldrb	r3, [r7, #7]
 8010a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a46:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010a56:	79fb      	ldrb	r3, [r7, #7]
 8010a58:	f023 0301 	bic.w	r3, r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	bf14      	ite	ne
 8010a60:	2301      	movne	r3, #1
 8010a62:	2300      	moveq	r3, #0
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	461a      	mov	r2, r3
 8010a68:	f107 0314 	add.w	r3, r7, #20
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7fe fa06 	bl	800ee80 <inc_lock>
 8010a74:	4602      	mov	r2, r0
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	691b      	ldr	r3, [r3, #16]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d102      	bne.n	8010a88 <f_open+0x22c>
 8010a82:	2302      	movs	r3, #2
 8010a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f040 80a3 	bne.w	8010bd8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7ff f8a2 	bl	800fbe2 <ld_clust>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa6:	331c      	adds	r3, #28
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fe f883 	bl	800ebb4 <ld_dword>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010aba:	693a      	ldr	r2, [r7, #16]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	88da      	ldrh	r2, [r3, #6]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	79fa      	ldrb	r2, [r7, #7]
 8010acc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2200      	movs	r2, #0
 8010ade:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	3330      	adds	r3, #48	; 0x30
 8010ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fe f8ed 	bl	800ecca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010af0:	79fb      	ldrb	r3, [r7, #7]
 8010af2:	f003 0320 	and.w	r3, r3, #32
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d06e      	beq.n	8010bd8 <f_open+0x37c>
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d06a      	beq.n	8010bd8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	68da      	ldr	r2, [r3, #12]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	895b      	ldrh	r3, [r3, #10]
 8010b0e:	461a      	mov	r2, r3
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	899b      	ldrh	r3, [r3, #12]
 8010b14:	fb03 f302 	mul.w	r3, r3, r2
 8010b18:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	657b      	str	r3, [r7, #84]	; 0x54
 8010b26:	e016      	b.n	8010b56 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fe fb96 	bl	800f25e <get_fat>
 8010b32:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d802      	bhi.n	8010b40 <f_open+0x2e4>
 8010b3a:	2302      	movs	r3, #2
 8010b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b46:	d102      	bne.n	8010b4e <f_open+0x2f2>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b52:	1ad3      	subs	r3, r2, r3
 8010b54:	657b      	str	r3, [r7, #84]	; 0x54
 8010b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <f_open+0x30a>
 8010b5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d8e0      	bhi.n	8010b28 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b6a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d131      	bne.n	8010bd8 <f_open+0x37c>
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	899b      	ldrh	r3, [r3, #12]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b80:	fb02 f201 	mul.w	r2, r2, r1
 8010b84:	1a9b      	subs	r3, r3, r2
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d026      	beq.n	8010bd8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fe fb46 	bl	800f220 <clust2sect>
 8010b94:	6478      	str	r0, [r7, #68]	; 0x44
 8010b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d103      	bne.n	8010ba4 <f_open+0x348>
						res = FR_INT_ERR;
 8010b9c:	2302      	movs	r3, #2
 8010b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010ba2:	e019      	b.n	8010bd8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	899b      	ldrh	r3, [r3, #12]
 8010ba8:	461a      	mov	r2, r3
 8010baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bac:	fbb3 f2f2 	udiv	r2, r3, r2
 8010bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb2:	441a      	add	r2, r3
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	7858      	ldrb	r0, [r3, #1]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	6a1a      	ldr	r2, [r3, #32]
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	f7fd ff7e 	bl	800eac8 <disk_read>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <f_open+0x37c>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <f_open+0x38a>
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3760      	adds	r7, #96	; 0x60
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	274a0000 	.word	0x274a0000

08010bf8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08e      	sub	sp, #56	; 0x38
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f107 0214 	add.w	r2, r7, #20
 8010c16:	4611      	mov	r1, r2
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff fda3 	bl	8010764 <validate>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d107      	bne.n	8010c3c <f_read+0x44>
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	7d5b      	ldrb	r3, [r3, #21]
 8010c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d002      	beq.n	8010c42 <f_read+0x4a>
 8010c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c40:	e135      	b.n	8010eae <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	7d1b      	ldrb	r3, [r3, #20]
 8010c46:	f003 0301 	and.w	r3, r3, #1
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d101      	bne.n	8010c52 <f_read+0x5a>
 8010c4e:	2307      	movs	r3, #7
 8010c50:	e12d      	b.n	8010eae <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	6a3b      	ldr	r3, [r7, #32]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	f240 811e 	bls.w	8010ea4 <f_read+0x2ac>
 8010c68:	6a3b      	ldr	r3, [r7, #32]
 8010c6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010c6c:	e11a      	b.n	8010ea4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	699b      	ldr	r3, [r3, #24]
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	8992      	ldrh	r2, [r2, #12]
 8010c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c7a:	fb02 f201 	mul.w	r2, r2, r1
 8010c7e:	1a9b      	subs	r3, r3, r2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f040 80d5 	bne.w	8010e30 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	699b      	ldr	r3, [r3, #24]
 8010c8a:	697a      	ldr	r2, [r7, #20]
 8010c8c:	8992      	ldrh	r2, [r2, #12]
 8010c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c92:	697a      	ldr	r2, [r7, #20]
 8010c94:	8952      	ldrh	r2, [r2, #10]
 8010c96:	3a01      	subs	r2, #1
 8010c98:	4013      	ands	r3, r2
 8010c9a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d12f      	bne.n	8010d02 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	699b      	ldr	r3, [r3, #24]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d103      	bne.n	8010cb2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	633b      	str	r3, [r7, #48]	; 0x30
 8010cb0:	e013      	b.n	8010cda <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d007      	beq.n	8010cca <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	699b      	ldr	r3, [r3, #24]
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f7fe fdb0 	bl	800f826 <clmt_clust>
 8010cc6:	6338      	str	r0, [r7, #48]	; 0x30
 8010cc8:	e007      	b.n	8010cda <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	69db      	ldr	r3, [r3, #28]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	f7fe fac3 	bl	800f25e <get_fat>
 8010cd8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d804      	bhi.n	8010cea <f_read+0xf2>
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	755a      	strb	r2, [r3, #21]
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	e0e1      	b.n	8010eae <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf0:	d104      	bne.n	8010cfc <f_read+0x104>
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	755a      	strb	r2, [r3, #21]
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e0d8      	b.n	8010eae <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d00:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	69db      	ldr	r3, [r3, #28]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	f7fe fa88 	bl	800f220 <clust2sect>
 8010d10:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d104      	bne.n	8010d22 <f_read+0x12a>
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	755a      	strb	r2, [r3, #21]
 8010d1e:	2302      	movs	r3, #2
 8010d20:	e0c5      	b.n	8010eae <f_read+0x2b6>
			sect += csect;
 8010d22:	69ba      	ldr	r2, [r7, #24]
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	4413      	add	r3, r2
 8010d28:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	899b      	ldrh	r3, [r3, #12]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d36:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d041      	beq.n	8010dc2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010d3e:	69fa      	ldr	r2, [r7, #28]
 8010d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d42:	4413      	add	r3, r2
 8010d44:	697a      	ldr	r2, [r7, #20]
 8010d46:	8952      	ldrh	r2, [r2, #10]
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d905      	bls.n	8010d58 <f_read+0x160>
					cc = fs->csize - csect;
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	895b      	ldrh	r3, [r3, #10]
 8010d50:	461a      	mov	r2, r3
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	7858      	ldrb	r0, [r3, #1]
 8010d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5e:	69ba      	ldr	r2, [r7, #24]
 8010d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d62:	f7fd feb1 	bl	800eac8 <disk_read>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <f_read+0x17e>
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	755a      	strb	r2, [r3, #21]
 8010d72:	2301      	movs	r3, #1
 8010d74:	e09b      	b.n	8010eae <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	7d1b      	ldrb	r3, [r3, #20]
 8010d7a:	b25b      	sxtb	r3, r3
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	da18      	bge.n	8010db2 <f_read+0x1ba>
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6a1a      	ldr	r2, [r3, #32]
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d911      	bls.n	8010db2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	6a1a      	ldr	r2, [r3, #32]
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	697a      	ldr	r2, [r7, #20]
 8010d98:	8992      	ldrh	r2, [r2, #12]
 8010d9a:	fb02 f303 	mul.w	r3, r2, r3
 8010d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da0:	18d0      	adds	r0, r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	899b      	ldrh	r3, [r3, #12]
 8010dac:	461a      	mov	r2, r3
 8010dae:	f7fd ff6b 	bl	800ec88 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	899b      	ldrh	r3, [r3, #12]
 8010db6:	461a      	mov	r2, r3
 8010db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dba:	fb02 f303 	mul.w	r3, r2, r3
 8010dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010dc0:	e05c      	b.n	8010e7c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	6a1b      	ldr	r3, [r3, #32]
 8010dc6:	69ba      	ldr	r2, [r7, #24]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d02e      	beq.n	8010e2a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	7d1b      	ldrb	r3, [r3, #20]
 8010dd0:	b25b      	sxtb	r3, r3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	da18      	bge.n	8010e08 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	7858      	ldrb	r0, [r3, #1]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6a1a      	ldr	r2, [r3, #32]
 8010de4:	2301      	movs	r3, #1
 8010de6:	f7fd fe8f 	bl	800eb08 <disk_write>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d004      	beq.n	8010dfa <f_read+0x202>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2201      	movs	r2, #1
 8010df4:	755a      	strb	r2, [r3, #21]
 8010df6:	2301      	movs	r3, #1
 8010df8:	e059      	b.n	8010eae <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	7d1b      	ldrb	r3, [r3, #20]
 8010dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	7858      	ldrb	r0, [r3, #1]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e12:	2301      	movs	r3, #1
 8010e14:	69ba      	ldr	r2, [r7, #24]
 8010e16:	f7fd fe57 	bl	800eac8 <disk_read>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d004      	beq.n	8010e2a <f_read+0x232>
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2201      	movs	r2, #1
 8010e24:	755a      	strb	r2, [r3, #21]
 8010e26:	2301      	movs	r3, #1
 8010e28:	e041      	b.n	8010eae <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	69ba      	ldr	r2, [r7, #24]
 8010e2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	899b      	ldrh	r3, [r3, #12]
 8010e34:	4618      	mov	r0, r3
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	699b      	ldr	r3, [r3, #24]
 8010e3a:	697a      	ldr	r2, [r7, #20]
 8010e3c:	8992      	ldrh	r2, [r2, #12]
 8010e3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e42:	fb02 f201 	mul.w	r2, r2, r1
 8010e46:	1a9b      	subs	r3, r3, r2
 8010e48:	1ac3      	subs	r3, r0, r3
 8010e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d901      	bls.n	8010e58 <f_read+0x260>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	699b      	ldr	r3, [r3, #24]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	8992      	ldrh	r2, [r2, #12]
 8010e66:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e6a:	fb02 f200 	mul.w	r2, r2, r0
 8010e6e:	1a9b      	subs	r3, r3, r2
 8010e70:	440b      	add	r3, r1
 8010e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e74:	4619      	mov	r1, r3
 8010e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e78:	f7fd ff06 	bl	800ec88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e80:	4413      	add	r3, r2
 8010e82:	627b      	str	r3, [r7, #36]	; 0x24
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	699a      	ldr	r2, [r3, #24]
 8010e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8a:	441a      	add	r2, r3
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	619a      	str	r2, [r3, #24]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e96:	441a      	add	r2, r3
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f47f aee1 	bne.w	8010c6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3738      	adds	r7, #56	; 0x38
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b08c      	sub	sp, #48	; 0x30
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	60f8      	str	r0, [r7, #12]
 8010ebe:	60b9      	str	r1, [r7, #8]
 8010ec0:	607a      	str	r2, [r7, #4]
 8010ec2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f107 0210 	add.w	r2, r7, #16
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fc44 	bl	8010764 <validate>
 8010edc:	4603      	mov	r3, r0
 8010ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d107      	bne.n	8010efa <f_write+0x44>
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	7d5b      	ldrb	r3, [r3, #21]
 8010eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d002      	beq.n	8010f00 <f_write+0x4a>
 8010efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010efe:	e16a      	b.n	80111d6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	7d1b      	ldrb	r3, [r3, #20]
 8010f04:	f003 0302 	and.w	r3, r3, #2
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <f_write+0x5a>
 8010f0c:	2307      	movs	r3, #7
 8010f0e:	e162      	b.n	80111d6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	699a      	ldr	r2, [r3, #24]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	441a      	add	r2, r3
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	699b      	ldr	r3, [r3, #24]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	f080 814c 	bcs.w	80111ba <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	699b      	ldr	r3, [r3, #24]
 8010f26:	43db      	mvns	r3, r3
 8010f28:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f2a:	e146      	b.n	80111ba <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	699b      	ldr	r3, [r3, #24]
 8010f30:	693a      	ldr	r2, [r7, #16]
 8010f32:	8992      	ldrh	r2, [r2, #12]
 8010f34:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f38:	fb02 f201 	mul.w	r2, r2, r1
 8010f3c:	1a9b      	subs	r3, r3, r2
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f040 80f1 	bne.w	8011126 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	699b      	ldr	r3, [r3, #24]
 8010f48:	693a      	ldr	r2, [r7, #16]
 8010f4a:	8992      	ldrh	r2, [r2, #12]
 8010f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	8952      	ldrh	r2, [r2, #10]
 8010f54:	3a01      	subs	r2, #1
 8010f56:	4013      	ands	r3, r2
 8010f58:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d143      	bne.n	8010fe8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	699b      	ldr	r3, [r3, #24]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d10c      	bne.n	8010f82 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	689b      	ldr	r3, [r3, #8]
 8010f6c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d11a      	bne.n	8010faa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2100      	movs	r1, #0
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fe fbbc 	bl	800f6f6 <create_chain>
 8010f7e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f80:	e013      	b.n	8010faa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d007      	beq.n	8010f9a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	699b      	ldr	r3, [r3, #24]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f7fe fc48 	bl	800f826 <clmt_clust>
 8010f96:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f98:	e007      	b.n	8010faa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010f9a:	68fa      	ldr	r2, [r7, #12]
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	69db      	ldr	r3, [r3, #28]
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	4610      	mov	r0, r2
 8010fa4:	f7fe fba7 	bl	800f6f6 <create_chain>
 8010fa8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	f000 8109 	beq.w	80111c4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d104      	bne.n	8010fc2 <f_write+0x10c>
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2202      	movs	r2, #2
 8010fbc:	755a      	strb	r2, [r3, #21]
 8010fbe:	2302      	movs	r3, #2
 8010fc0:	e109      	b.n	80111d6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc8:	d104      	bne.n	8010fd4 <f_write+0x11e>
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	755a      	strb	r2, [r3, #21]
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e100      	b.n	80111d6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fd8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d102      	bne.n	8010fe8 <f_write+0x132>
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fe6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	7d1b      	ldrb	r3, [r3, #20]
 8010fec:	b25b      	sxtb	r3, r3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	da18      	bge.n	8011024 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	7858      	ldrb	r0, [r3, #1]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6a1a      	ldr	r2, [r3, #32]
 8011000:	2301      	movs	r3, #1
 8011002:	f7fd fd81 	bl	800eb08 <disk_write>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d004      	beq.n	8011016 <f_write+0x160>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2201      	movs	r2, #1
 8011010:	755a      	strb	r2, [r3, #21]
 8011012:	2301      	movs	r3, #1
 8011014:	e0df      	b.n	80111d6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	7d1b      	ldrb	r3, [r3, #20]
 801101a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801101e:	b2da      	uxtb	r2, r3
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	69db      	ldr	r3, [r3, #28]
 801102a:	4619      	mov	r1, r3
 801102c:	4610      	mov	r0, r2
 801102e:	f7fe f8f7 	bl	800f220 <clust2sect>
 8011032:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d104      	bne.n	8011044 <f_write+0x18e>
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2202      	movs	r2, #2
 801103e:	755a      	strb	r2, [r3, #21]
 8011040:	2302      	movs	r3, #2
 8011042:	e0c8      	b.n	80111d6 <f_write+0x320>
			sect += csect;
 8011044:	697a      	ldr	r2, [r7, #20]
 8011046:	69bb      	ldr	r3, [r7, #24]
 8011048:	4413      	add	r3, r2
 801104a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	899b      	ldrh	r3, [r3, #12]
 8011050:	461a      	mov	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	fbb3 f3f2 	udiv	r3, r3, r2
 8011058:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801105a:	6a3b      	ldr	r3, [r7, #32]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d043      	beq.n	80110e8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011060:	69ba      	ldr	r2, [r7, #24]
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	4413      	add	r3, r2
 8011066:	693a      	ldr	r2, [r7, #16]
 8011068:	8952      	ldrh	r2, [r2, #10]
 801106a:	4293      	cmp	r3, r2
 801106c:	d905      	bls.n	801107a <f_write+0x1c4>
					cc = fs->csize - csect;
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	895b      	ldrh	r3, [r3, #10]
 8011072:	461a      	mov	r2, r3
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	7858      	ldrb	r0, [r3, #1]
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	697a      	ldr	r2, [r7, #20]
 8011082:	69f9      	ldr	r1, [r7, #28]
 8011084:	f7fd fd40 	bl	800eb08 <disk_write>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d004      	beq.n	8011098 <f_write+0x1e2>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2201      	movs	r2, #1
 8011092:	755a      	strb	r2, [r3, #21]
 8011094:	2301      	movs	r3, #1
 8011096:	e09e      	b.n	80111d6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6a1a      	ldr	r2, [r3, #32]
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	1ad3      	subs	r3, r2, r3
 80110a0:	6a3a      	ldr	r2, [r7, #32]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d918      	bls.n	80110d8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6a1a      	ldr	r2, [r3, #32]
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	693a      	ldr	r2, [r7, #16]
 80110b6:	8992      	ldrh	r2, [r2, #12]
 80110b8:	fb02 f303 	mul.w	r3, r2, r3
 80110bc:	69fa      	ldr	r2, [r7, #28]
 80110be:	18d1      	adds	r1, r2, r3
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	899b      	ldrh	r3, [r3, #12]
 80110c4:	461a      	mov	r2, r3
 80110c6:	f7fd fddf 	bl	800ec88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	7d1b      	ldrb	r3, [r3, #20]
 80110ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	899b      	ldrh	r3, [r3, #12]
 80110dc:	461a      	mov	r2, r3
 80110de:	6a3b      	ldr	r3, [r7, #32]
 80110e0:	fb02 f303 	mul.w	r3, r2, r3
 80110e4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80110e6:	e04b      	b.n	8011180 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	6a1b      	ldr	r3, [r3, #32]
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d016      	beq.n	8011120 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	699a      	ldr	r2, [r3, #24]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d210      	bcs.n	8011120 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	7858      	ldrb	r0, [r3, #1]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011108:	2301      	movs	r3, #1
 801110a:	697a      	ldr	r2, [r7, #20]
 801110c:	f7fd fcdc 	bl	800eac8 <disk_read>
 8011110:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011112:	2b00      	cmp	r3, #0
 8011114:	d004      	beq.n	8011120 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2201      	movs	r2, #1
 801111a:	755a      	strb	r2, [r3, #21]
 801111c:	2301      	movs	r3, #1
 801111e:	e05a      	b.n	80111d6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	697a      	ldr	r2, [r7, #20]
 8011124:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	899b      	ldrh	r3, [r3, #12]
 801112a:	4618      	mov	r0, r3
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	693a      	ldr	r2, [r7, #16]
 8011132:	8992      	ldrh	r2, [r2, #12]
 8011134:	fbb3 f1f2 	udiv	r1, r3, r2
 8011138:	fb02 f201 	mul.w	r2, r2, r1
 801113c:	1a9b      	subs	r3, r3, r2
 801113e:	1ac3      	subs	r3, r0, r3
 8011140:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	429a      	cmp	r2, r3
 8011148:	d901      	bls.n	801114e <f_write+0x298>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	699b      	ldr	r3, [r3, #24]
 8011158:	693a      	ldr	r2, [r7, #16]
 801115a:	8992      	ldrh	r2, [r2, #12]
 801115c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011160:	fb02 f200 	mul.w	r2, r2, r0
 8011164:	1a9b      	subs	r3, r3, r2
 8011166:	440b      	add	r3, r1
 8011168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801116a:	69f9      	ldr	r1, [r7, #28]
 801116c:	4618      	mov	r0, r3
 801116e:	f7fd fd8b 	bl	800ec88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	7d1b      	ldrb	r3, [r3, #20]
 8011176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801117a:	b2da      	uxtb	r2, r3
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011180:	69fa      	ldr	r2, [r7, #28]
 8011182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011184:	4413      	add	r3, r2
 8011186:	61fb      	str	r3, [r7, #28]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	699a      	ldr	r2, [r3, #24]
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	441a      	add	r2, r3
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	619a      	str	r2, [r3, #24]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	68da      	ldr	r2, [r3, #12]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	699b      	ldr	r3, [r3, #24]
 801119c:	429a      	cmp	r2, r3
 801119e:	bf38      	it	cc
 80111a0:	461a      	movcc	r2, r3
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	60da      	str	r2, [r3, #12]
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ac:	441a      	add	r2, r3
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f47f aeb5 	bne.w	8010f2c <f_write+0x76>
 80111c2:	e000      	b.n	80111c6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80111c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	7d1b      	ldrb	r3, [r3, #20]
 80111ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3730      	adds	r7, #48	; 0x30
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
	...

080111e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f107 0208 	add.w	r2, r7, #8
 80111ee:	4611      	mov	r1, r2
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7ff fab7 	bl	8010764 <validate>
 80111f6:	4603      	mov	r3, r0
 80111f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80111fa:	7dfb      	ldrb	r3, [r7, #23]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d167      	bne.n	80112d0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	7d1b      	ldrb	r3, [r3, #20]
 8011204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011208:	2b00      	cmp	r3, #0
 801120a:	d061      	beq.n	80112d0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	7d1b      	ldrb	r3, [r3, #20]
 8011210:	b25b      	sxtb	r3, r3
 8011212:	2b00      	cmp	r3, #0
 8011214:	da15      	bge.n	8011242 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	7858      	ldrb	r0, [r3, #1]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6a1a      	ldr	r2, [r3, #32]
 8011224:	2301      	movs	r3, #1
 8011226:	f7fd fc6f 	bl	800eb08 <disk_write>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d001      	beq.n	8011234 <f_sync+0x54>
 8011230:	2301      	movs	r3, #1
 8011232:	e04e      	b.n	80112d2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7d1b      	ldrb	r3, [r3, #20]
 8011238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801123c:	b2da      	uxtb	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011242:	4b26      	ldr	r3, [pc, #152]	; (80112dc <f_sync+0xfc>)
 8011244:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011246:	68ba      	ldr	r2, [r7, #8]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801124c:	4619      	mov	r1, r3
 801124e:	4610      	mov	r0, r2
 8011250:	f7fd ff48 	bl	800f0e4 <move_window>
 8011254:	4603      	mov	r3, r0
 8011256:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011258:	7dfb      	ldrb	r3, [r7, #23]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d138      	bne.n	80112d0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011262:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	330b      	adds	r3, #11
 8011268:	781a      	ldrb	r2, [r3, #0]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	330b      	adds	r3, #11
 801126e:	f042 0220 	orr.w	r2, r2, #32
 8011272:	b2d2      	uxtb	r2, r2
 8011274:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6818      	ldr	r0, [r3, #0]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	461a      	mov	r2, r3
 8011280:	68f9      	ldr	r1, [r7, #12]
 8011282:	f7fe fccd 	bl	800fc20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f103 021c 	add.w	r2, r3, #28
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7fd fccc 	bl	800ec30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	3316      	adds	r3, #22
 801129c:	6939      	ldr	r1, [r7, #16]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fd fcc6 	bl	800ec30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	3312      	adds	r3, #18
 80112a8:	2100      	movs	r1, #0
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fd fca5 	bl	800ebfa <st_word>
					fs->wflag = 1;
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2201      	movs	r2, #1
 80112b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fd ff41 	bl	800f140 <sync_fs>
 80112be:	4603      	mov	r3, r0
 80112c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	7d1b      	ldrb	r3, [r3, #20]
 80112c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80112d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3718      	adds	r7, #24
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	274a0000 	.word	0x274a0000

080112e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff ff79 	bl	80111e0 <f_sync>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d118      	bne.n	801132a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f107 0208 	add.w	r2, r7, #8
 80112fe:	4611      	mov	r1, r2
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff fa2f 	bl	8010764 <validate>
 8011306:	4603      	mov	r3, r0
 8011308:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801130a:	7bfb      	ldrb	r3, [r7, #15]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10c      	bne.n	801132a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	691b      	ldr	r3, [r3, #16]
 8011314:	4618      	mov	r0, r3
 8011316:	f7fd fe41 	bl	800ef9c <dec_lock>
 801131a:	4603      	mov	r3, r0
 801131c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801131e:	7bfb      	ldrb	r3, [r7, #15]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d102      	bne.n	801132a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801132a:	7bfb      	ldrb	r3, [r7, #15]
}
 801132c:	4618      	mov	r0, r3
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011334:	b590      	push	{r4, r7, lr}
 8011336:	b091      	sub	sp, #68	; 0x44
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801133c:	f107 0108 	add.w	r1, r7, #8
 8011340:	1d3b      	adds	r3, r7, #4
 8011342:	2200      	movs	r2, #0
 8011344:	4618      	mov	r0, r3
 8011346:	f7fe ff87 	bl	8010258 <find_volume>
 801134a:	4603      	mov	r3, r0
 801134c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011350:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011354:	2b00      	cmp	r3, #0
 8011356:	d131      	bne.n	80113bc <f_chdir+0x88>
		dj.obj.fs = fs;
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	f107 030c 	add.w	r3, r7, #12
 8011362:	4611      	mov	r1, r2
 8011364:	4618      	mov	r0, r3
 8011366:	f7fe fe47 	bl	800fff8 <follow_path>
 801136a:	4603      	mov	r3, r0
 801136c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011374:	2b00      	cmp	r3, #0
 8011376:	d11a      	bne.n	80113ae <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011378:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801137c:	b25b      	sxtb	r3, r3
 801137e:	2b00      	cmp	r3, #0
 8011380:	da03      	bge.n	801138a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	697a      	ldr	r2, [r7, #20]
 8011386:	619a      	str	r2, [r3, #24]
 8011388:	e011      	b.n	80113ae <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801138a:	7cbb      	ldrb	r3, [r7, #18]
 801138c:	f003 0310 	and.w	r3, r3, #16
 8011390:	2b00      	cmp	r3, #0
 8011392:	d009      	beq.n	80113a8 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011398:	68bc      	ldr	r4, [r7, #8]
 801139a:	4611      	mov	r1, r2
 801139c:	4618      	mov	r0, r3
 801139e:	f7fe fc20 	bl	800fbe2 <ld_clust>
 80113a2:	4603      	mov	r3, r0
 80113a4:	61a3      	str	r3, [r4, #24]
 80113a6:	e002      	b.n	80113ae <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80113a8:	2305      	movs	r3, #5
 80113aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80113ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113b2:	2b04      	cmp	r3, #4
 80113b4:	d102      	bne.n	80113bc <f_chdir+0x88>
 80113b6:	2305      	movs	r3, #5
 80113b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80113bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3744      	adds	r7, #68	; 0x44
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd90      	pop	{r4, r7, pc}

080113c8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b090      	sub	sp, #64	; 0x40
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f107 0208 	add.w	r2, r7, #8
 80113d8:	4611      	mov	r1, r2
 80113da:	4618      	mov	r0, r3
 80113dc:	f7ff f9c2 	bl	8010764 <validate>
 80113e0:	4603      	mov	r3, r0
 80113e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80113e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d103      	bne.n	80113f6 <f_lseek+0x2e>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	7d5b      	ldrb	r3, [r3, #21]
 80113f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80113f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d002      	beq.n	8011404 <f_lseek+0x3c>
 80113fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011402:	e201      	b.n	8011808 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 80d9 	beq.w	80115c0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011414:	d15a      	bne.n	80114cc <f_lseek+0x104>
			tbl = fp->cltbl;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	1d1a      	adds	r2, r3, #4
 8011420:	627a      	str	r2, [r7, #36]	; 0x24
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	617b      	str	r3, [r7, #20]
 8011426:	2302      	movs	r3, #2
 8011428:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011432:	2b00      	cmp	r3, #0
 8011434:	d03a      	beq.n	80114ac <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011438:	613b      	str	r3, [r7, #16]
 801143a:	2300      	movs	r3, #0
 801143c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011440:	3302      	adds	r3, #2
 8011442:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	60fb      	str	r3, [r7, #12]
 8011448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144a:	3301      	adds	r3, #1
 801144c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011452:	4618      	mov	r0, r3
 8011454:	f7fd ff03 	bl	800f25e <get_fat>
 8011458:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145c:	2b01      	cmp	r3, #1
 801145e:	d804      	bhi.n	801146a <f_lseek+0xa2>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2202      	movs	r2, #2
 8011464:	755a      	strb	r2, [r3, #21]
 8011466:	2302      	movs	r3, #2
 8011468:	e1ce      	b.n	8011808 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011470:	d104      	bne.n	801147c <f_lseek+0xb4>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2201      	movs	r2, #1
 8011476:	755a      	strb	r2, [r3, #21]
 8011478:	2301      	movs	r3, #1
 801147a:	e1c5      	b.n	8011808 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	3301      	adds	r3, #1
 8011480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011482:	429a      	cmp	r2, r3
 8011484:	d0de      	beq.n	8011444 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	429a      	cmp	r2, r3
 801148c:	d809      	bhi.n	80114a2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011490:	1d1a      	adds	r2, r3, #4
 8011492:	627a      	str	r2, [r7, #36]	; 0x24
 8011494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149a:	1d1a      	adds	r2, r3, #4
 801149c:	627a      	str	r2, [r7, #36]	; 0x24
 801149e:	693a      	ldr	r2, [r7, #16]
 80114a0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	69db      	ldr	r3, [r3, #28]
 80114a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d3c4      	bcc.n	8011436 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80114b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d803      	bhi.n	80114c4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80114bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]
 80114c2:	e19f      	b.n	8011804 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80114c4:	2311      	movs	r3, #17
 80114c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80114ca:	e19b      	b.n	8011804 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	683a      	ldr	r2, [r7, #0]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d902      	bls.n	80114dc <f_lseek+0x114>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	683a      	ldr	r2, [r7, #0]
 80114e0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	f000 818d 	beq.w	8011804 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	3b01      	subs	r3, #1
 80114ee:	4619      	mov	r1, r3
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7fe f998 	bl	800f826 <clmt_clust>
 80114f6:	4602      	mov	r2, r0
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80114fc:	68ba      	ldr	r2, [r7, #8]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	69db      	ldr	r3, [r3, #28]
 8011502:	4619      	mov	r1, r3
 8011504:	4610      	mov	r0, r2
 8011506:	f7fd fe8b 	bl	800f220 <clust2sect>
 801150a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d104      	bne.n	801151c <f_lseek+0x154>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2202      	movs	r2, #2
 8011516:	755a      	strb	r2, [r3, #21]
 8011518:	2302      	movs	r3, #2
 801151a:	e175      	b.n	8011808 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	3b01      	subs	r3, #1
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	8992      	ldrh	r2, [r2, #12]
 8011524:	fbb3 f3f2 	udiv	r3, r3, r2
 8011528:	68ba      	ldr	r2, [r7, #8]
 801152a:	8952      	ldrh	r2, [r2, #10]
 801152c:	3a01      	subs	r2, #1
 801152e:	4013      	ands	r3, r2
 8011530:	69ba      	ldr	r2, [r7, #24]
 8011532:	4413      	add	r3, r2
 8011534:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	699b      	ldr	r3, [r3, #24]
 801153a:	68ba      	ldr	r2, [r7, #8]
 801153c:	8992      	ldrh	r2, [r2, #12]
 801153e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011542:	fb02 f201 	mul.w	r2, r2, r1
 8011546:	1a9b      	subs	r3, r3, r2
 8011548:	2b00      	cmp	r3, #0
 801154a:	f000 815b 	beq.w	8011804 <f_lseek+0x43c>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6a1b      	ldr	r3, [r3, #32]
 8011552:	69ba      	ldr	r2, [r7, #24]
 8011554:	429a      	cmp	r2, r3
 8011556:	f000 8155 	beq.w	8011804 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	7d1b      	ldrb	r3, [r3, #20]
 801155e:	b25b      	sxtb	r3, r3
 8011560:	2b00      	cmp	r3, #0
 8011562:	da18      	bge.n	8011596 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	7858      	ldrb	r0, [r3, #1]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a1a      	ldr	r2, [r3, #32]
 8011572:	2301      	movs	r3, #1
 8011574:	f7fd fac8 	bl	800eb08 <disk_write>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d004      	beq.n	8011588 <f_lseek+0x1c0>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2201      	movs	r2, #1
 8011582:	755a      	strb	r2, [r3, #21]
 8011584:	2301      	movs	r3, #1
 8011586:	e13f      	b.n	8011808 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	7d1b      	ldrb	r3, [r3, #20]
 801158c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011590:	b2da      	uxtb	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	7858      	ldrb	r0, [r3, #1]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115a0:	2301      	movs	r3, #1
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	f7fd fa90 	bl	800eac8 <disk_read>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d004      	beq.n	80115b8 <f_lseek+0x1f0>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2201      	movs	r2, #1
 80115b2:	755a      	strb	r2, [r3, #21]
 80115b4:	2301      	movs	r3, #1
 80115b6:	e127      	b.n	8011808 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	69ba      	ldr	r2, [r7, #24]
 80115bc:	621a      	str	r2, [r3, #32]
 80115be:	e121      	b.n	8011804 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	683a      	ldr	r2, [r7, #0]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d908      	bls.n	80115dc <f_lseek+0x214>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	7d1b      	ldrb	r3, [r3, #20]
 80115ce:	f003 0302 	and.w	r3, r3, #2
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d102      	bne.n	80115dc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	699b      	ldr	r3, [r3, #24]
 80115e0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	637b      	str	r3, [r7, #52]	; 0x34
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115ea:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f000 80b5 	beq.w	801175e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	895b      	ldrh	r3, [r3, #10]
 80115f8:	461a      	mov	r2, r3
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	899b      	ldrh	r3, [r3, #12]
 80115fe:	fb03 f302 	mul.w	r3, r3, r2
 8011602:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011604:	6a3b      	ldr	r3, [r7, #32]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d01b      	beq.n	8011642 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	1e5a      	subs	r2, r3, #1
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	fbb2 f2f3 	udiv	r2, r2, r3
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	1e59      	subs	r1, r3, #1
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801161e:	429a      	cmp	r2, r3
 8011620:	d30f      	bcc.n	8011642 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011622:	6a3b      	ldr	r3, [r7, #32]
 8011624:	1e5a      	subs	r2, r3, #1
 8011626:	69fb      	ldr	r3, [r7, #28]
 8011628:	425b      	negs	r3, r3
 801162a:	401a      	ands	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	699b      	ldr	r3, [r3, #24]
 8011634:	683a      	ldr	r2, [r7, #0]
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	69db      	ldr	r3, [r3, #28]
 801163e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011640:	e022      	b.n	8011688 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164a:	2b00      	cmp	r3, #0
 801164c:	d119      	bne.n	8011682 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2100      	movs	r1, #0
 8011652:	4618      	mov	r0, r3
 8011654:	f7fe f84f 	bl	800f6f6 <create_chain>
 8011658:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801165a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165c:	2b01      	cmp	r3, #1
 801165e:	d104      	bne.n	801166a <f_lseek+0x2a2>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2202      	movs	r2, #2
 8011664:	755a      	strb	r2, [r3, #21]
 8011666:	2302      	movs	r3, #2
 8011668:	e0ce      	b.n	8011808 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011670:	d104      	bne.n	801167c <f_lseek+0x2b4>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2201      	movs	r2, #1
 8011676:	755a      	strb	r2, [r3, #21]
 8011678:	2301      	movs	r3, #1
 801167a:	e0c5      	b.n	8011808 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011680:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011686:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	2b00      	cmp	r3, #0
 801168c:	d067      	beq.n	801175e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801168e:	e03a      	b.n	8011706 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	1ad3      	subs	r3, r2, r3
 8011696:	603b      	str	r3, [r7, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	699a      	ldr	r2, [r3, #24]
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	441a      	add	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	7d1b      	ldrb	r3, [r3, #20]
 80116a8:	f003 0302 	and.w	r3, r3, #2
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00b      	beq.n	80116c8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe f81e 	bl	800f6f6 <create_chain>
 80116ba:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d108      	bne.n	80116d4 <f_lseek+0x30c>
							ofs = 0; break;
 80116c2:	2300      	movs	r3, #0
 80116c4:	603b      	str	r3, [r7, #0]
 80116c6:	e022      	b.n	801170e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fd fdc6 	bl	800f25e <get_fat>
 80116d2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116da:	d104      	bne.n	80116e6 <f_lseek+0x31e>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2201      	movs	r2, #1
 80116e0:	755a      	strb	r2, [r3, #21]
 80116e2:	2301      	movs	r3, #1
 80116e4:	e090      	b.n	8011808 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80116e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d904      	bls.n	80116f6 <f_lseek+0x32e>
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	69db      	ldr	r3, [r3, #28]
 80116f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d304      	bcc.n	8011700 <f_lseek+0x338>
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2202      	movs	r2, #2
 80116fa:	755a      	strb	r2, [r3, #21]
 80116fc:	2302      	movs	r3, #2
 80116fe:	e083      	b.n	8011808 <f_lseek+0x440>
					fp->clust = clst;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011704:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011706:	683a      	ldr	r2, [r7, #0]
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	429a      	cmp	r2, r3
 801170c:	d8c0      	bhi.n	8011690 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	699a      	ldr	r2, [r3, #24]
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	441a      	add	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	899b      	ldrh	r3, [r3, #12]
 801171e:	461a      	mov	r2, r3
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	fbb3 f1f2 	udiv	r1, r3, r2
 8011726:	fb02 f201 	mul.w	r2, r2, r1
 801172a:	1a9b      	subs	r3, r3, r2
 801172c:	2b00      	cmp	r3, #0
 801172e:	d016      	beq.n	801175e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011734:	4618      	mov	r0, r3
 8011736:	f7fd fd73 	bl	800f220 <clust2sect>
 801173a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801173e:	2b00      	cmp	r3, #0
 8011740:	d104      	bne.n	801174c <f_lseek+0x384>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2202      	movs	r2, #2
 8011746:	755a      	strb	r2, [r3, #21]
 8011748:	2302      	movs	r3, #2
 801174a:	e05d      	b.n	8011808 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	461a      	mov	r2, r3
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	fbb3 f3f2 	udiv	r3, r3, r2
 8011758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801175a:	4413      	add	r3, r2
 801175c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	699a      	ldr	r2, [r3, #24]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	429a      	cmp	r2, r3
 8011768:	d90a      	bls.n	8011780 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	699a      	ldr	r2, [r3, #24]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	7d1b      	ldrb	r3, [r3, #20]
 8011776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177a:	b2da      	uxtb	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	699b      	ldr	r3, [r3, #24]
 8011784:	68ba      	ldr	r2, [r7, #8]
 8011786:	8992      	ldrh	r2, [r2, #12]
 8011788:	fbb3 f1f2 	udiv	r1, r3, r2
 801178c:	fb02 f201 	mul.w	r2, r2, r1
 8011790:	1a9b      	subs	r3, r3, r2
 8011792:	2b00      	cmp	r3, #0
 8011794:	d036      	beq.n	8011804 <f_lseek+0x43c>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801179c:	429a      	cmp	r2, r3
 801179e:	d031      	beq.n	8011804 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	7d1b      	ldrb	r3, [r3, #20]
 80117a4:	b25b      	sxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	da18      	bge.n	80117dc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	7858      	ldrb	r0, [r3, #1]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6a1a      	ldr	r2, [r3, #32]
 80117b8:	2301      	movs	r3, #1
 80117ba:	f7fd f9a5 	bl	800eb08 <disk_write>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d004      	beq.n	80117ce <f_lseek+0x406>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2201      	movs	r2, #1
 80117c8:	755a      	strb	r2, [r3, #21]
 80117ca:	2301      	movs	r3, #1
 80117cc:	e01c      	b.n	8011808 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	7d1b      	ldrb	r3, [r3, #20]
 80117d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117d6:	b2da      	uxtb	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	7858      	ldrb	r0, [r3, #1]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117e6:	2301      	movs	r3, #1
 80117e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117ea:	f7fd f96d 	bl	800eac8 <disk_read>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d004      	beq.n	80117fe <f_lseek+0x436>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2201      	movs	r2, #1
 80117f8:	755a      	strb	r2, [r3, #21]
 80117fa:	2301      	movs	r3, #1
 80117fc:	e004      	b.n	8011808 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011802:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011804:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011808:	4618      	mov	r0, r3
 801180a:	3740      	adds	r7, #64	; 0x40
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b09e      	sub	sp, #120	; 0x78
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011818:	2300      	movs	r3, #0
 801181a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801181c:	f107 010c 	add.w	r1, r7, #12
 8011820:	1d3b      	adds	r3, r7, #4
 8011822:	2202      	movs	r2, #2
 8011824:	4618      	mov	r0, r3
 8011826:	f7fe fd17 	bl	8010258 <find_volume>
 801182a:	4603      	mov	r3, r0
 801182c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011834:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011838:	2b00      	cmp	r3, #0
 801183a:	f040 80a4 	bne.w	8011986 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011844:	4611      	mov	r1, r2
 8011846:	4618      	mov	r0, r3
 8011848:	f7fe fbd6 	bl	800fff8 <follow_path>
 801184c:	4603      	mov	r3, r0
 801184e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011852:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011856:	2b00      	cmp	r3, #0
 8011858:	d108      	bne.n	801186c <f_unlink+0x5c>
 801185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801185e:	f003 0320 	and.w	r3, r3, #32
 8011862:	2b00      	cmp	r3, #0
 8011864:	d002      	beq.n	801186c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011866:	2306      	movs	r3, #6
 8011868:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801186c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011870:	2b00      	cmp	r3, #0
 8011872:	d108      	bne.n	8011886 <f_unlink+0x76>
 8011874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011878:	2102      	movs	r1, #2
 801187a:	4618      	mov	r0, r3
 801187c:	f7fd fa82 	bl	800ed84 <chk_lock>
 8011880:	4603      	mov	r3, r0
 8011882:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011886:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801188a:	2b00      	cmp	r3, #0
 801188c:	d17b      	bne.n	8011986 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801188e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011892:	b25b      	sxtb	r3, r3
 8011894:	2b00      	cmp	r3, #0
 8011896:	da03      	bge.n	80118a0 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011898:	2306      	movs	r3, #6
 801189a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801189e:	e008      	b.n	80118b2 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80118a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80118a4:	f003 0301 	and.w	r3, r3, #1
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80118ac:	2307      	movs	r3, #7
 80118ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80118b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d13d      	bne.n	8011936 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118be:	4611      	mov	r1, r2
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7fe f98e 	bl	800fbe2 <ld_clust>
 80118c6:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80118c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80118cc:	f003 0310 	and.w	r3, r3, #16
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d030      	beq.n	8011936 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	699b      	ldr	r3, [r3, #24]
 80118d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80118da:	429a      	cmp	r2, r3
 80118dc:	d103      	bne.n	80118e6 <f_unlink+0xd6>
						res = FR_DENIED;
 80118de:	2307      	movs	r3, #7
 80118e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80118e4:	e027      	b.n	8011936 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80118ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118ec:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80118ee:	f107 0310 	add.w	r3, r7, #16
 80118f2:	2100      	movs	r1, #0
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fd ffce 	bl	800f896 <dir_sdi>
 80118fa:	4603      	mov	r3, r0
 80118fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011900:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011904:	2b00      	cmp	r3, #0
 8011906:	d116      	bne.n	8011936 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011908:	f107 0310 	add.w	r3, r7, #16
 801190c:	2100      	movs	r1, #0
 801190e:	4618      	mov	r0, r3
 8011910:	f7fe f9a6 	bl	800fc60 <dir_read>
 8011914:	4603      	mov	r3, r0
 8011916:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801191a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801191e:	2b00      	cmp	r3, #0
 8011920:	d102      	bne.n	8011928 <f_unlink+0x118>
 8011922:	2307      	movs	r3, #7
 8011924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011928:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801192c:	2b04      	cmp	r3, #4
 801192e:	d102      	bne.n	8011936 <f_unlink+0x126>
 8011930:	2300      	movs	r3, #0
 8011932:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011936:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801193a:	2b00      	cmp	r3, #0
 801193c:	d123      	bne.n	8011986 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801193e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe fa70 	bl	800fe28 <dir_remove>
 8011948:	4603      	mov	r3, r0
 801194a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801194e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011952:	2b00      	cmp	r3, #0
 8011954:	d10c      	bne.n	8011970 <f_unlink+0x160>
 8011956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011958:	2b00      	cmp	r3, #0
 801195a:	d009      	beq.n	8011970 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801195c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011960:	2200      	movs	r2, #0
 8011962:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011964:	4618      	mov	r0, r3
 8011966:	f7fd fe61 	bl	800f62c <remove_chain>
 801196a:	4603      	mov	r3, r0
 801196c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011970:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011974:	2b00      	cmp	r3, #0
 8011976:	d106      	bne.n	8011986 <f_unlink+0x176>
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	4618      	mov	r0, r3
 801197c:	f7fd fbe0 	bl	800f140 <sync_fs>
 8011980:	4603      	mov	r3, r0
 8011982:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011986:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801198a:	4618      	mov	r0, r3
 801198c:	3778      	adds	r7, #120	; 0x78
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
	...

08011994 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b096      	sub	sp, #88	; 0x58
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801199c:	f107 0108 	add.w	r1, r7, #8
 80119a0:	1d3b      	adds	r3, r7, #4
 80119a2:	2202      	movs	r2, #2
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fe fc57 	bl	8010258 <find_volume>
 80119aa:	4603      	mov	r3, r0
 80119ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80119b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f040 80fe 	bne.w	8011bba <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	f107 030c 	add.w	r3, r7, #12
 80119c4:	4611      	mov	r1, r2
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fe fb16 	bl	800fff8 <follow_path>
 80119cc:	4603      	mov	r3, r0
 80119ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80119d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d102      	bne.n	80119e0 <f_mkdir+0x4c>
 80119da:	2308      	movs	r3, #8
 80119dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80119e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	d108      	bne.n	80119fa <f_mkdir+0x66>
 80119e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80119ec:	f003 0320 	and.w	r3, r3, #32
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d002      	beq.n	80119fa <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80119f4:	2306      	movs	r3, #6
 80119f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80119fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119fe:	2b04      	cmp	r3, #4
 8011a00:	f040 80db 	bne.w	8011bba <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011a04:	f107 030c 	add.w	r3, r7, #12
 8011a08:	2100      	movs	r1, #0
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fd fe73 	bl	800f6f6 <create_chain>
 8011a10:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	895b      	ldrh	r3, [r3, #10]
 8011a16:	461a      	mov	r2, r3
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	899b      	ldrh	r3, [r3, #12]
 8011a1c:	fb03 f302 	mul.w	r3, r3, r2
 8011a20:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011a22:	2300      	movs	r3, #0
 8011a24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d102      	bne.n	8011a34 <f_mkdir+0xa0>
 8011a2e:	2307      	movs	r3, #7
 8011a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d102      	bne.n	8011a40 <f_mkdir+0xac>
 8011a3a:	2302      	movs	r3, #2
 8011a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a46:	d102      	bne.n	8011a4e <f_mkdir+0xba>
 8011a48:	2301      	movs	r3, #1
 8011a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <f_mkdir+0xd0>
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fd faff 	bl	800f05c <sync_window>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011a64:	4b58      	ldr	r3, [pc, #352]	; (8011bc8 <f_mkdir+0x234>)
 8011a66:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d16c      	bne.n	8011b4a <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fd fbd3 	bl	800f220 <clust2sect>
 8011a7a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	3338      	adds	r3, #56	; 0x38
 8011a80:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	899b      	ldrh	r3, [r3, #12]
 8011a86:	461a      	mov	r2, r3
 8011a88:	2100      	movs	r1, #0
 8011a8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a8c:	f7fd f91d 	bl	800ecca <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011a90:	220b      	movs	r2, #11
 8011a92:	2120      	movs	r1, #32
 8011a94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a96:	f7fd f918 	bl	800ecca <mem_set>
					dir[DIR_Name] = '.';
 8011a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a9c:	222e      	movs	r2, #46	; 0x2e
 8011a9e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa2:	330b      	adds	r3, #11
 8011aa4:	2210      	movs	r2, #16
 8011aa6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aaa:	3316      	adds	r3, #22
 8011aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fd f8be 	bl	800ec30 <st_dword>
					st_clust(fs, dir, dcl);
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fe f8b0 	bl	800fc20 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac2:	3320      	adds	r3, #32
 8011ac4:	2220      	movs	r2, #32
 8011ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fd f8dd 	bl	800ec88 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad0:	3321      	adds	r3, #33	; 0x21
 8011ad2:	222e      	movs	r2, #46	; 0x2e
 8011ad4:	701a      	strb	r2, [r3, #0]
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	2b03      	cmp	r3, #3
 8011ae0:	d106      	bne.n	8011af0 <f_mkdir+0x15c>
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d101      	bne.n	8011af0 <f_mkdir+0x15c>
 8011aec:	2300      	movs	r3, #0
 8011aee:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011af0:	68b8      	ldr	r0, [r7, #8]
 8011af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af4:	3320      	adds	r3, #32
 8011af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011af8:	4619      	mov	r1, r3
 8011afa:	f7fe f891 	bl	800fc20 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	895b      	ldrh	r3, [r3, #10]
 8011b02:	653b      	str	r3, [r7, #80]	; 0x50
 8011b04:	e01c      	b.n	8011b40 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b08:	1c5a      	adds	r2, r3, #1
 8011b0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011b0c:	68ba      	ldr	r2, [r7, #8]
 8011b0e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	2201      	movs	r2, #1
 8011b14:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fd fa9f 	bl	800f05c <sync_window>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d10d      	bne.n	8011b48 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	899b      	ldrh	r3, [r3, #12]
 8011b30:	461a      	mov	r2, r3
 8011b32:	2100      	movs	r1, #0
 8011b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b36:	f7fd f8c8 	bl	800ecca <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8011b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1df      	bne.n	8011b06 <f_mkdir+0x172>
 8011b46:	e000      	b.n	8011b4a <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011b48:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d107      	bne.n	8011b62 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011b52:	f107 030c 	add.w	r3, r7, #12
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fe f934 	bl	800fdc4 <dir_register>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d120      	bne.n	8011bac <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b70:	3316      	adds	r3, #22
 8011b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fd f85b 	bl	800ec30 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe f84d 	bl	800fc20 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b88:	330b      	adds	r3, #11
 8011b8a:	2210      	movs	r2, #16
 8011b8c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2201      	movs	r2, #1
 8011b92:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d10e      	bne.n	8011bba <f_mkdir+0x226>
					res = sync_fs(fs);
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fd face 	bl	800f140 <sync_fs>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011baa:	e006      	b.n	8011bba <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011bac:	f107 030c 	add.w	r3, r7, #12
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fd fd39 	bl	800f62c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3758      	adds	r7, #88	; 0x58
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	274a0000 	.word	0x274a0000

08011bcc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b088      	sub	sp, #32
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011be0:	e017      	b.n	8011c12 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011be2:	f107 0310 	add.w	r3, r7, #16
 8011be6:	f107 0114 	add.w	r1, r7, #20
 8011bea:	2201      	movs	r2, #1
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7ff f803 	bl	8010bf8 <f_read>
		if (rc != 1) break;
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d112      	bne.n	8011c1e <f_gets+0x52>
		c = s[0];
 8011bf8:	7d3b      	ldrb	r3, [r7, #20]
 8011bfa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	1c5a      	adds	r2, r3, #1
 8011c00:	61ba      	str	r2, [r7, #24]
 8011c02:	7dfa      	ldrb	r2, [r7, #23]
 8011c04:	701a      	strb	r2, [r3, #0]
		n++;
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	3301      	adds	r3, #1
 8011c0a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011c0c:	7dfb      	ldrb	r3, [r7, #23]
 8011c0e:	2b0a      	cmp	r3, #10
 8011c10:	d007      	beq.n	8011c22 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	3b01      	subs	r3, #1
 8011c16:	69fa      	ldr	r2, [r7, #28]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	dbe2      	blt.n	8011be2 <f_gets+0x16>
 8011c1c:	e002      	b.n	8011c24 <f_gets+0x58>
		if (rc != 1) break;
 8011c1e:	bf00      	nop
 8011c20:	e000      	b.n	8011c24 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011c22:	bf00      	nop
	}
	*p = 0;
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	2200      	movs	r2, #0
 8011c28:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d001      	beq.n	8011c34 <f_gets+0x68>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	e000      	b.n	8011c36 <f_gets+0x6a>
 8011c34:	2300      	movs	r3, #0
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3720      	adds	r7, #32
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
	...

08011c40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b087      	sub	sp, #28
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011c56:	4b1f      	ldr	r3, [pc, #124]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c58:	7a5b      	ldrb	r3, [r3, #9]
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d131      	bne.n	8011cc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c60:	4b1c      	ldr	r3, [pc, #112]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c62:	7a5b      	ldrb	r3, [r3, #9]
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	461a      	mov	r2, r3
 8011c68:	4b1a      	ldr	r3, [pc, #104]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011c6e:	4b19      	ldr	r3, [pc, #100]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c70:	7a5b      	ldrb	r3, [r3, #9]
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	4a17      	ldr	r2, [pc, #92]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	4413      	add	r3, r2
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011c7e:	4b15      	ldr	r3, [pc, #84]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c80:	7a5b      	ldrb	r3, [r3, #9]
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	461a      	mov	r2, r3
 8011c86:	4b13      	ldr	r3, [pc, #76]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c88:	4413      	add	r3, r2
 8011c8a:	79fa      	ldrb	r2, [r7, #7]
 8011c8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011c8e:	4b11      	ldr	r3, [pc, #68]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c90:	7a5b      	ldrb	r3, [r3, #9]
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	1c5a      	adds	r2, r3, #1
 8011c96:	b2d1      	uxtb	r1, r2
 8011c98:	4a0e      	ldr	r2, [pc, #56]	; (8011cd4 <FATFS_LinkDriverEx+0x94>)
 8011c9a:	7251      	strb	r1, [r2, #9]
 8011c9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011c9e:	7dbb      	ldrb	r3, [r7, #22]
 8011ca0:	3330      	adds	r3, #48	; 0x30
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	3301      	adds	r3, #1
 8011cac:	223a      	movs	r2, #58	; 0x3a
 8011cae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	3302      	adds	r3, #2
 8011cb4:	222f      	movs	r2, #47	; 0x2f
 8011cb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	3303      	adds	r3, #3
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	371c      	adds	r7, #28
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop
 8011cd4:	20037470 	.word	0x20037470

08011cd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7ff ffaa 	bl	8011c40 <FATFS_LinkDriverEx>
 8011cec:	4603      	mov	r3, r0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <__cxa_guard_acquire>:
 8011cf6:	6803      	ldr	r3, [r0, #0]
 8011cf8:	07db      	lsls	r3, r3, #31
 8011cfa:	d406      	bmi.n	8011d0a <__cxa_guard_acquire+0x14>
 8011cfc:	7843      	ldrb	r3, [r0, #1]
 8011cfe:	b103      	cbz	r3, 8011d02 <__cxa_guard_acquire+0xc>
 8011d00:	deff      	udf	#255	; 0xff
 8011d02:	2301      	movs	r3, #1
 8011d04:	7043      	strb	r3, [r0, #1]
 8011d06:	4618      	mov	r0, r3
 8011d08:	4770      	bx	lr
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	4770      	bx	lr

08011d0e <__cxa_guard_release>:
 8011d0e:	2301      	movs	r3, #1
 8011d10:	6003      	str	r3, [r0, #0]
 8011d12:	4770      	bx	lr
 8011d14:	0000      	movs	r0, r0
	...

08011d18 <cos>:
 8011d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d1a:	ec51 0b10 	vmov	r0, r1, d0
 8011d1e:	4a1e      	ldr	r2, [pc, #120]	; (8011d98 <cos+0x80>)
 8011d20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d24:	4293      	cmp	r3, r2
 8011d26:	dc06      	bgt.n	8011d36 <cos+0x1e>
 8011d28:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011d90 <cos+0x78>
 8011d2c:	f000 fa74 	bl	8012218 <__kernel_cos>
 8011d30:	ec51 0b10 	vmov	r0, r1, d0
 8011d34:	e007      	b.n	8011d46 <cos+0x2e>
 8011d36:	4a19      	ldr	r2, [pc, #100]	; (8011d9c <cos+0x84>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	dd09      	ble.n	8011d50 <cos+0x38>
 8011d3c:	ee10 2a10 	vmov	r2, s0
 8011d40:	460b      	mov	r3, r1
 8011d42:	f7ee fab9 	bl	80002b8 <__aeabi_dsub>
 8011d46:	ec41 0b10 	vmov	d0, r0, r1
 8011d4a:	b005      	add	sp, #20
 8011d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d50:	4668      	mov	r0, sp
 8011d52:	f000 f86d 	bl	8011e30 <__ieee754_rem_pio2>
 8011d56:	f000 0003 	and.w	r0, r0, #3
 8011d5a:	2801      	cmp	r0, #1
 8011d5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011d60:	ed9d 0b00 	vldr	d0, [sp]
 8011d64:	d007      	beq.n	8011d76 <cos+0x5e>
 8011d66:	2802      	cmp	r0, #2
 8011d68:	d00e      	beq.n	8011d88 <cos+0x70>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d0de      	beq.n	8011d2c <cos+0x14>
 8011d6e:	2001      	movs	r0, #1
 8011d70:	f000 fe5a 	bl	8012a28 <__kernel_sin>
 8011d74:	e7dc      	b.n	8011d30 <cos+0x18>
 8011d76:	f000 fe57 	bl	8012a28 <__kernel_sin>
 8011d7a:	ec53 2b10 	vmov	r2, r3, d0
 8011d7e:	ee10 0a10 	vmov	r0, s0
 8011d82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011d86:	e7de      	b.n	8011d46 <cos+0x2e>
 8011d88:	f000 fa46 	bl	8012218 <__kernel_cos>
 8011d8c:	e7f5      	b.n	8011d7a <cos+0x62>
 8011d8e:	bf00      	nop
	...
 8011d98:	3fe921fb 	.word	0x3fe921fb
 8011d9c:	7fefffff 	.word	0x7fefffff

08011da0 <sin>:
 8011da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011da2:	ec51 0b10 	vmov	r0, r1, d0
 8011da6:	4a20      	ldr	r2, [pc, #128]	; (8011e28 <sin+0x88>)
 8011da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011dac:	4293      	cmp	r3, r2
 8011dae:	dc07      	bgt.n	8011dc0 <sin+0x20>
 8011db0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011e20 <sin+0x80>
 8011db4:	2000      	movs	r0, #0
 8011db6:	f000 fe37 	bl	8012a28 <__kernel_sin>
 8011dba:	ec51 0b10 	vmov	r0, r1, d0
 8011dbe:	e007      	b.n	8011dd0 <sin+0x30>
 8011dc0:	4a1a      	ldr	r2, [pc, #104]	; (8011e2c <sin+0x8c>)
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	dd09      	ble.n	8011dda <sin+0x3a>
 8011dc6:	ee10 2a10 	vmov	r2, s0
 8011dca:	460b      	mov	r3, r1
 8011dcc:	f7ee fa74 	bl	80002b8 <__aeabi_dsub>
 8011dd0:	ec41 0b10 	vmov	d0, r0, r1
 8011dd4:	b005      	add	sp, #20
 8011dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dda:	4668      	mov	r0, sp
 8011ddc:	f000 f828 	bl	8011e30 <__ieee754_rem_pio2>
 8011de0:	f000 0003 	and.w	r0, r0, #3
 8011de4:	2801      	cmp	r0, #1
 8011de6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011dea:	ed9d 0b00 	vldr	d0, [sp]
 8011dee:	d004      	beq.n	8011dfa <sin+0x5a>
 8011df0:	2802      	cmp	r0, #2
 8011df2:	d005      	beq.n	8011e00 <sin+0x60>
 8011df4:	b970      	cbnz	r0, 8011e14 <sin+0x74>
 8011df6:	2001      	movs	r0, #1
 8011df8:	e7dd      	b.n	8011db6 <sin+0x16>
 8011dfa:	f000 fa0d 	bl	8012218 <__kernel_cos>
 8011dfe:	e7dc      	b.n	8011dba <sin+0x1a>
 8011e00:	2001      	movs	r0, #1
 8011e02:	f000 fe11 	bl	8012a28 <__kernel_sin>
 8011e06:	ec53 2b10 	vmov	r2, r3, d0
 8011e0a:	ee10 0a10 	vmov	r0, s0
 8011e0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011e12:	e7dd      	b.n	8011dd0 <sin+0x30>
 8011e14:	f000 fa00 	bl	8012218 <__kernel_cos>
 8011e18:	e7f5      	b.n	8011e06 <sin+0x66>
 8011e1a:	bf00      	nop
 8011e1c:	f3af 8000 	nop.w
	...
 8011e28:	3fe921fb 	.word	0x3fe921fb
 8011e2c:	7fefffff 	.word	0x7fefffff

08011e30 <__ieee754_rem_pio2>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	ec57 6b10 	vmov	r6, r7, d0
 8011e38:	4bc3      	ldr	r3, [pc, #780]	; (8012148 <__ieee754_rem_pio2+0x318>)
 8011e3a:	b08d      	sub	sp, #52	; 0x34
 8011e3c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011e40:	4598      	cmp	r8, r3
 8011e42:	4604      	mov	r4, r0
 8011e44:	9704      	str	r7, [sp, #16]
 8011e46:	dc07      	bgt.n	8011e58 <__ieee754_rem_pio2+0x28>
 8011e48:	2200      	movs	r2, #0
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	ed84 0b00 	vstr	d0, [r4]
 8011e50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e54:	2500      	movs	r5, #0
 8011e56:	e027      	b.n	8011ea8 <__ieee754_rem_pio2+0x78>
 8011e58:	4bbc      	ldr	r3, [pc, #752]	; (801214c <__ieee754_rem_pio2+0x31c>)
 8011e5a:	4598      	cmp	r8, r3
 8011e5c:	dc75      	bgt.n	8011f4a <__ieee754_rem_pio2+0x11a>
 8011e5e:	9b04      	ldr	r3, [sp, #16]
 8011e60:	4dbb      	ldr	r5, [pc, #748]	; (8012150 <__ieee754_rem_pio2+0x320>)
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	ee10 0a10 	vmov	r0, s0
 8011e68:	a3a9      	add	r3, pc, #676	; (adr r3, 8012110 <__ieee754_rem_pio2+0x2e0>)
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	4639      	mov	r1, r7
 8011e70:	dd36      	ble.n	8011ee0 <__ieee754_rem_pio2+0xb0>
 8011e72:	f7ee fa21 	bl	80002b8 <__aeabi_dsub>
 8011e76:	45a8      	cmp	r8, r5
 8011e78:	4606      	mov	r6, r0
 8011e7a:	460f      	mov	r7, r1
 8011e7c:	d018      	beq.n	8011eb0 <__ieee754_rem_pio2+0x80>
 8011e7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012118 <__ieee754_rem_pio2+0x2e8>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	f7ee fa18 	bl	80002b8 <__aeabi_dsub>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	e9c4 2300 	strd	r2, r3, [r4]
 8011e90:	4630      	mov	r0, r6
 8011e92:	4639      	mov	r1, r7
 8011e94:	f7ee fa10 	bl	80002b8 <__aeabi_dsub>
 8011e98:	a39f      	add	r3, pc, #636	; (adr r3, 8012118 <__ieee754_rem_pio2+0x2e8>)
 8011e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9e:	f7ee fa0b 	bl	80002b8 <__aeabi_dsub>
 8011ea2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011ea6:	2501      	movs	r5, #1
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	b00d      	add	sp, #52	; 0x34
 8011eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb0:	a39b      	add	r3, pc, #620	; (adr r3, 8012120 <__ieee754_rem_pio2+0x2f0>)
 8011eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb6:	f7ee f9ff 	bl	80002b8 <__aeabi_dsub>
 8011eba:	a39b      	add	r3, pc, #620	; (adr r3, 8012128 <__ieee754_rem_pio2+0x2f8>)
 8011ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	460f      	mov	r7, r1
 8011ec4:	f7ee f9f8 	bl	80002b8 <__aeabi_dsub>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	e9c4 2300 	strd	r2, r3, [r4]
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	4639      	mov	r1, r7
 8011ed4:	f7ee f9f0 	bl	80002b8 <__aeabi_dsub>
 8011ed8:	a393      	add	r3, pc, #588	; (adr r3, 8012128 <__ieee754_rem_pio2+0x2f8>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	e7de      	b.n	8011e9e <__ieee754_rem_pio2+0x6e>
 8011ee0:	f7ee f9ec 	bl	80002bc <__adddf3>
 8011ee4:	45a8      	cmp	r8, r5
 8011ee6:	4606      	mov	r6, r0
 8011ee8:	460f      	mov	r7, r1
 8011eea:	d016      	beq.n	8011f1a <__ieee754_rem_pio2+0xea>
 8011eec:	a38a      	add	r3, pc, #552	; (adr r3, 8012118 <__ieee754_rem_pio2+0x2e8>)
 8011eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef2:	f7ee f9e3 	bl	80002bc <__adddf3>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	e9c4 2300 	strd	r2, r3, [r4]
 8011efe:	4630      	mov	r0, r6
 8011f00:	4639      	mov	r1, r7
 8011f02:	f7ee f9d9 	bl	80002b8 <__aeabi_dsub>
 8011f06:	a384      	add	r3, pc, #528	; (adr r3, 8012118 <__ieee754_rem_pio2+0x2e8>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	f7ee f9d6 	bl	80002bc <__adddf3>
 8011f10:	f04f 35ff 	mov.w	r5, #4294967295
 8011f14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f18:	e7c6      	b.n	8011ea8 <__ieee754_rem_pio2+0x78>
 8011f1a:	a381      	add	r3, pc, #516	; (adr r3, 8012120 <__ieee754_rem_pio2+0x2f0>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	f7ee f9cc 	bl	80002bc <__adddf3>
 8011f24:	a380      	add	r3, pc, #512	; (adr r3, 8012128 <__ieee754_rem_pio2+0x2f8>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460f      	mov	r7, r1
 8011f2e:	f7ee f9c5 	bl	80002bc <__adddf3>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	e9c4 2300 	strd	r2, r3, [r4]
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	4639      	mov	r1, r7
 8011f3e:	f7ee f9bb 	bl	80002b8 <__aeabi_dsub>
 8011f42:	a379      	add	r3, pc, #484	; (adr r3, 8012128 <__ieee754_rem_pio2+0x2f8>)
 8011f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f48:	e7e0      	b.n	8011f0c <__ieee754_rem_pio2+0xdc>
 8011f4a:	4b82      	ldr	r3, [pc, #520]	; (8012154 <__ieee754_rem_pio2+0x324>)
 8011f4c:	4598      	cmp	r8, r3
 8011f4e:	f300 80d0 	bgt.w	80120f2 <__ieee754_rem_pio2+0x2c2>
 8011f52:	f000 fe23 	bl	8012b9c <fabs>
 8011f56:	ec57 6b10 	vmov	r6, r7, d0
 8011f5a:	ee10 0a10 	vmov	r0, s0
 8011f5e:	a374      	add	r3, pc, #464	; (adr r3, 8012130 <__ieee754_rem_pio2+0x300>)
 8011f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f64:	4639      	mov	r1, r7
 8011f66:	f7ee fb5f 	bl	8000628 <__aeabi_dmul>
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	4b7a      	ldr	r3, [pc, #488]	; (8012158 <__ieee754_rem_pio2+0x328>)
 8011f6e:	f7ee f9a5 	bl	80002bc <__adddf3>
 8011f72:	f7ee fe09 	bl	8000b88 <__aeabi_d2iz>
 8011f76:	4605      	mov	r5, r0
 8011f78:	f7ee faec 	bl	8000554 <__aeabi_i2d>
 8011f7c:	a364      	add	r3, pc, #400	; (adr r3, 8012110 <__ieee754_rem_pio2+0x2e0>)
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f86:	f7ee fb4f 	bl	8000628 <__aeabi_dmul>
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	4630      	mov	r0, r6
 8011f90:	4639      	mov	r1, r7
 8011f92:	f7ee f991 	bl	80002b8 <__aeabi_dsub>
 8011f96:	a360      	add	r3, pc, #384	; (adr r3, 8012118 <__ieee754_rem_pio2+0x2e8>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	4682      	mov	sl, r0
 8011f9e:	468b      	mov	fp, r1
 8011fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fa4:	f7ee fb40 	bl	8000628 <__aeabi_dmul>
 8011fa8:	2d1f      	cmp	r5, #31
 8011faa:	4606      	mov	r6, r0
 8011fac:	460f      	mov	r7, r1
 8011fae:	dc0c      	bgt.n	8011fca <__ieee754_rem_pio2+0x19a>
 8011fb0:	1e6a      	subs	r2, r5, #1
 8011fb2:	4b6a      	ldr	r3, [pc, #424]	; (801215c <__ieee754_rem_pio2+0x32c>)
 8011fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fb8:	4543      	cmp	r3, r8
 8011fba:	d006      	beq.n	8011fca <__ieee754_rem_pio2+0x19a>
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	463b      	mov	r3, r7
 8011fc0:	4650      	mov	r0, sl
 8011fc2:	4659      	mov	r1, fp
 8011fc4:	f7ee f978 	bl	80002b8 <__aeabi_dsub>
 8011fc8:	e00e      	b.n	8011fe8 <__ieee754_rem_pio2+0x1b8>
 8011fca:	4632      	mov	r2, r6
 8011fcc:	463b      	mov	r3, r7
 8011fce:	4650      	mov	r0, sl
 8011fd0:	4659      	mov	r1, fp
 8011fd2:	f7ee f971 	bl	80002b8 <__aeabi_dsub>
 8011fd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011fda:	9305      	str	r3, [sp, #20]
 8011fdc:	9a05      	ldr	r2, [sp, #20]
 8011fde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011fe2:	1ad3      	subs	r3, r2, r3
 8011fe4:	2b10      	cmp	r3, #16
 8011fe6:	dc02      	bgt.n	8011fee <__ieee754_rem_pio2+0x1be>
 8011fe8:	e9c4 0100 	strd	r0, r1, [r4]
 8011fec:	e039      	b.n	8012062 <__ieee754_rem_pio2+0x232>
 8011fee:	a34c      	add	r3, pc, #304	; (adr r3, 8012120 <__ieee754_rem_pio2+0x2f0>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ff8:	f7ee fb16 	bl	8000628 <__aeabi_dmul>
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	4602      	mov	r2, r0
 8012002:	460b      	mov	r3, r1
 8012004:	4650      	mov	r0, sl
 8012006:	4659      	mov	r1, fp
 8012008:	f7ee f956 	bl	80002b8 <__aeabi_dsub>
 801200c:	4602      	mov	r2, r0
 801200e:	460b      	mov	r3, r1
 8012010:	4680      	mov	r8, r0
 8012012:	4689      	mov	r9, r1
 8012014:	4650      	mov	r0, sl
 8012016:	4659      	mov	r1, fp
 8012018:	f7ee f94e 	bl	80002b8 <__aeabi_dsub>
 801201c:	4632      	mov	r2, r6
 801201e:	463b      	mov	r3, r7
 8012020:	f7ee f94a 	bl	80002b8 <__aeabi_dsub>
 8012024:	a340      	add	r3, pc, #256	; (adr r3, 8012128 <__ieee754_rem_pio2+0x2f8>)
 8012026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202a:	4606      	mov	r6, r0
 801202c:	460f      	mov	r7, r1
 801202e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012032:	f7ee faf9 	bl	8000628 <__aeabi_dmul>
 8012036:	4632      	mov	r2, r6
 8012038:	463b      	mov	r3, r7
 801203a:	f7ee f93d 	bl	80002b8 <__aeabi_dsub>
 801203e:	4602      	mov	r2, r0
 8012040:	460b      	mov	r3, r1
 8012042:	4606      	mov	r6, r0
 8012044:	460f      	mov	r7, r1
 8012046:	4640      	mov	r0, r8
 8012048:	4649      	mov	r1, r9
 801204a:	f7ee f935 	bl	80002b8 <__aeabi_dsub>
 801204e:	9a05      	ldr	r2, [sp, #20]
 8012050:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012054:	1ad3      	subs	r3, r2, r3
 8012056:	2b31      	cmp	r3, #49	; 0x31
 8012058:	dc20      	bgt.n	801209c <__ieee754_rem_pio2+0x26c>
 801205a:	e9c4 0100 	strd	r0, r1, [r4]
 801205e:	46c2      	mov	sl, r8
 8012060:	46cb      	mov	fp, r9
 8012062:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012066:	4650      	mov	r0, sl
 8012068:	4642      	mov	r2, r8
 801206a:	464b      	mov	r3, r9
 801206c:	4659      	mov	r1, fp
 801206e:	f7ee f923 	bl	80002b8 <__aeabi_dsub>
 8012072:	463b      	mov	r3, r7
 8012074:	4632      	mov	r2, r6
 8012076:	f7ee f91f 	bl	80002b8 <__aeabi_dsub>
 801207a:	9b04      	ldr	r3, [sp, #16]
 801207c:	2b00      	cmp	r3, #0
 801207e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012082:	f6bf af11 	bge.w	8011ea8 <__ieee754_rem_pio2+0x78>
 8012086:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801208a:	6063      	str	r3, [r4, #4]
 801208c:	f8c4 8000 	str.w	r8, [r4]
 8012090:	60a0      	str	r0, [r4, #8]
 8012092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012096:	60e3      	str	r3, [r4, #12]
 8012098:	426d      	negs	r5, r5
 801209a:	e705      	b.n	8011ea8 <__ieee754_rem_pio2+0x78>
 801209c:	a326      	add	r3, pc, #152	; (adr r3, 8012138 <__ieee754_rem_pio2+0x308>)
 801209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120a6:	f7ee fabf 	bl	8000628 <__aeabi_dmul>
 80120aa:	4606      	mov	r6, r0
 80120ac:	460f      	mov	r7, r1
 80120ae:	4602      	mov	r2, r0
 80120b0:	460b      	mov	r3, r1
 80120b2:	4640      	mov	r0, r8
 80120b4:	4649      	mov	r1, r9
 80120b6:	f7ee f8ff 	bl	80002b8 <__aeabi_dsub>
 80120ba:	4602      	mov	r2, r0
 80120bc:	460b      	mov	r3, r1
 80120be:	4682      	mov	sl, r0
 80120c0:	468b      	mov	fp, r1
 80120c2:	4640      	mov	r0, r8
 80120c4:	4649      	mov	r1, r9
 80120c6:	f7ee f8f7 	bl	80002b8 <__aeabi_dsub>
 80120ca:	4632      	mov	r2, r6
 80120cc:	463b      	mov	r3, r7
 80120ce:	f7ee f8f3 	bl	80002b8 <__aeabi_dsub>
 80120d2:	a31b      	add	r3, pc, #108	; (adr r3, 8012140 <__ieee754_rem_pio2+0x310>)
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	4606      	mov	r6, r0
 80120da:	460f      	mov	r7, r1
 80120dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120e0:	f7ee faa2 	bl	8000628 <__aeabi_dmul>
 80120e4:	4632      	mov	r2, r6
 80120e6:	463b      	mov	r3, r7
 80120e8:	f7ee f8e6 	bl	80002b8 <__aeabi_dsub>
 80120ec:	4606      	mov	r6, r0
 80120ee:	460f      	mov	r7, r1
 80120f0:	e764      	b.n	8011fbc <__ieee754_rem_pio2+0x18c>
 80120f2:	4b1b      	ldr	r3, [pc, #108]	; (8012160 <__ieee754_rem_pio2+0x330>)
 80120f4:	4598      	cmp	r8, r3
 80120f6:	dd35      	ble.n	8012164 <__ieee754_rem_pio2+0x334>
 80120f8:	ee10 2a10 	vmov	r2, s0
 80120fc:	463b      	mov	r3, r7
 80120fe:	4630      	mov	r0, r6
 8012100:	4639      	mov	r1, r7
 8012102:	f7ee f8d9 	bl	80002b8 <__aeabi_dsub>
 8012106:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801210a:	e9c4 0100 	strd	r0, r1, [r4]
 801210e:	e6a1      	b.n	8011e54 <__ieee754_rem_pio2+0x24>
 8012110:	54400000 	.word	0x54400000
 8012114:	3ff921fb 	.word	0x3ff921fb
 8012118:	1a626331 	.word	0x1a626331
 801211c:	3dd0b461 	.word	0x3dd0b461
 8012120:	1a600000 	.word	0x1a600000
 8012124:	3dd0b461 	.word	0x3dd0b461
 8012128:	2e037073 	.word	0x2e037073
 801212c:	3ba3198a 	.word	0x3ba3198a
 8012130:	6dc9c883 	.word	0x6dc9c883
 8012134:	3fe45f30 	.word	0x3fe45f30
 8012138:	2e000000 	.word	0x2e000000
 801213c:	3ba3198a 	.word	0x3ba3198a
 8012140:	252049c1 	.word	0x252049c1
 8012144:	397b839a 	.word	0x397b839a
 8012148:	3fe921fb 	.word	0x3fe921fb
 801214c:	4002d97b 	.word	0x4002d97b
 8012150:	3ff921fb 	.word	0x3ff921fb
 8012154:	413921fb 	.word	0x413921fb
 8012158:	3fe00000 	.word	0x3fe00000
 801215c:	08018268 	.word	0x08018268
 8012160:	7fefffff 	.word	0x7fefffff
 8012164:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012168:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801216c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012170:	4630      	mov	r0, r6
 8012172:	460f      	mov	r7, r1
 8012174:	f7ee fd08 	bl	8000b88 <__aeabi_d2iz>
 8012178:	f7ee f9ec 	bl	8000554 <__aeabi_i2d>
 801217c:	4602      	mov	r2, r0
 801217e:	460b      	mov	r3, r1
 8012180:	4630      	mov	r0, r6
 8012182:	4639      	mov	r1, r7
 8012184:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012188:	f7ee f896 	bl	80002b8 <__aeabi_dsub>
 801218c:	2200      	movs	r2, #0
 801218e:	4b1f      	ldr	r3, [pc, #124]	; (801220c <__ieee754_rem_pio2+0x3dc>)
 8012190:	f7ee fa4a 	bl	8000628 <__aeabi_dmul>
 8012194:	460f      	mov	r7, r1
 8012196:	4606      	mov	r6, r0
 8012198:	f7ee fcf6 	bl	8000b88 <__aeabi_d2iz>
 801219c:	f7ee f9da 	bl	8000554 <__aeabi_i2d>
 80121a0:	4602      	mov	r2, r0
 80121a2:	460b      	mov	r3, r1
 80121a4:	4630      	mov	r0, r6
 80121a6:	4639      	mov	r1, r7
 80121a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80121ac:	f7ee f884 	bl	80002b8 <__aeabi_dsub>
 80121b0:	2200      	movs	r2, #0
 80121b2:	4b16      	ldr	r3, [pc, #88]	; (801220c <__ieee754_rem_pio2+0x3dc>)
 80121b4:	f7ee fa38 	bl	8000628 <__aeabi_dmul>
 80121b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80121bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80121c0:	f04f 0803 	mov.w	r8, #3
 80121c4:	2600      	movs	r6, #0
 80121c6:	2700      	movs	r7, #0
 80121c8:	4632      	mov	r2, r6
 80121ca:	463b      	mov	r3, r7
 80121cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80121d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80121d4:	f7ee fc90 	bl	8000af8 <__aeabi_dcmpeq>
 80121d8:	b9b0      	cbnz	r0, 8012208 <__ieee754_rem_pio2+0x3d8>
 80121da:	4b0d      	ldr	r3, [pc, #52]	; (8012210 <__ieee754_rem_pio2+0x3e0>)
 80121dc:	9301      	str	r3, [sp, #4]
 80121de:	2302      	movs	r3, #2
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	462a      	mov	r2, r5
 80121e4:	4643      	mov	r3, r8
 80121e6:	4621      	mov	r1, r4
 80121e8:	a806      	add	r0, sp, #24
 80121ea:	f000 f8dd 	bl	80123a8 <__kernel_rem_pio2>
 80121ee:	9b04      	ldr	r3, [sp, #16]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	4605      	mov	r5, r0
 80121f4:	f6bf ae58 	bge.w	8011ea8 <__ieee754_rem_pio2+0x78>
 80121f8:	6863      	ldr	r3, [r4, #4]
 80121fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80121fe:	6063      	str	r3, [r4, #4]
 8012200:	68e3      	ldr	r3, [r4, #12]
 8012202:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012206:	e746      	b.n	8012096 <__ieee754_rem_pio2+0x266>
 8012208:	46d0      	mov	r8, sl
 801220a:	e7dd      	b.n	80121c8 <__ieee754_rem_pio2+0x398>
 801220c:	41700000 	.word	0x41700000
 8012210:	080182e8 	.word	0x080182e8
 8012214:	00000000 	.word	0x00000000

08012218 <__kernel_cos>:
 8012218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221c:	ec59 8b10 	vmov	r8, r9, d0
 8012220:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012224:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012228:	ed2d 8b02 	vpush	{d8}
 801222c:	eeb0 8a41 	vmov.f32	s16, s2
 8012230:	eef0 8a61 	vmov.f32	s17, s3
 8012234:	da07      	bge.n	8012246 <__kernel_cos+0x2e>
 8012236:	ee10 0a10 	vmov	r0, s0
 801223a:	4649      	mov	r1, r9
 801223c:	f7ee fca4 	bl	8000b88 <__aeabi_d2iz>
 8012240:	2800      	cmp	r0, #0
 8012242:	f000 8089 	beq.w	8012358 <__kernel_cos+0x140>
 8012246:	4642      	mov	r2, r8
 8012248:	464b      	mov	r3, r9
 801224a:	4640      	mov	r0, r8
 801224c:	4649      	mov	r1, r9
 801224e:	f7ee f9eb 	bl	8000628 <__aeabi_dmul>
 8012252:	2200      	movs	r2, #0
 8012254:	4b4e      	ldr	r3, [pc, #312]	; (8012390 <__kernel_cos+0x178>)
 8012256:	4604      	mov	r4, r0
 8012258:	460d      	mov	r5, r1
 801225a:	f7ee f9e5 	bl	8000628 <__aeabi_dmul>
 801225e:	a340      	add	r3, pc, #256	; (adr r3, 8012360 <__kernel_cos+0x148>)
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	4682      	mov	sl, r0
 8012266:	468b      	mov	fp, r1
 8012268:	4620      	mov	r0, r4
 801226a:	4629      	mov	r1, r5
 801226c:	f7ee f9dc 	bl	8000628 <__aeabi_dmul>
 8012270:	a33d      	add	r3, pc, #244	; (adr r3, 8012368 <__kernel_cos+0x150>)
 8012272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012276:	f7ee f821 	bl	80002bc <__adddf3>
 801227a:	4622      	mov	r2, r4
 801227c:	462b      	mov	r3, r5
 801227e:	f7ee f9d3 	bl	8000628 <__aeabi_dmul>
 8012282:	a33b      	add	r3, pc, #236	; (adr r3, 8012370 <__kernel_cos+0x158>)
 8012284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012288:	f7ee f816 	bl	80002b8 <__aeabi_dsub>
 801228c:	4622      	mov	r2, r4
 801228e:	462b      	mov	r3, r5
 8012290:	f7ee f9ca 	bl	8000628 <__aeabi_dmul>
 8012294:	a338      	add	r3, pc, #224	; (adr r3, 8012378 <__kernel_cos+0x160>)
 8012296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229a:	f7ee f80f 	bl	80002bc <__adddf3>
 801229e:	4622      	mov	r2, r4
 80122a0:	462b      	mov	r3, r5
 80122a2:	f7ee f9c1 	bl	8000628 <__aeabi_dmul>
 80122a6:	a336      	add	r3, pc, #216	; (adr r3, 8012380 <__kernel_cos+0x168>)
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	f7ee f804 	bl	80002b8 <__aeabi_dsub>
 80122b0:	4622      	mov	r2, r4
 80122b2:	462b      	mov	r3, r5
 80122b4:	f7ee f9b8 	bl	8000628 <__aeabi_dmul>
 80122b8:	a333      	add	r3, pc, #204	; (adr r3, 8012388 <__kernel_cos+0x170>)
 80122ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122be:	f7ed fffd 	bl	80002bc <__adddf3>
 80122c2:	4622      	mov	r2, r4
 80122c4:	462b      	mov	r3, r5
 80122c6:	f7ee f9af 	bl	8000628 <__aeabi_dmul>
 80122ca:	4622      	mov	r2, r4
 80122cc:	462b      	mov	r3, r5
 80122ce:	f7ee f9ab 	bl	8000628 <__aeabi_dmul>
 80122d2:	ec53 2b18 	vmov	r2, r3, d8
 80122d6:	4604      	mov	r4, r0
 80122d8:	460d      	mov	r5, r1
 80122da:	4640      	mov	r0, r8
 80122dc:	4649      	mov	r1, r9
 80122de:	f7ee f9a3 	bl	8000628 <__aeabi_dmul>
 80122e2:	460b      	mov	r3, r1
 80122e4:	4602      	mov	r2, r0
 80122e6:	4629      	mov	r1, r5
 80122e8:	4620      	mov	r0, r4
 80122ea:	f7ed ffe5 	bl	80002b8 <__aeabi_dsub>
 80122ee:	4b29      	ldr	r3, [pc, #164]	; (8012394 <__kernel_cos+0x17c>)
 80122f0:	429e      	cmp	r6, r3
 80122f2:	4680      	mov	r8, r0
 80122f4:	4689      	mov	r9, r1
 80122f6:	dc11      	bgt.n	801231c <__kernel_cos+0x104>
 80122f8:	4602      	mov	r2, r0
 80122fa:	460b      	mov	r3, r1
 80122fc:	4650      	mov	r0, sl
 80122fe:	4659      	mov	r1, fp
 8012300:	f7ed ffda 	bl	80002b8 <__aeabi_dsub>
 8012304:	460b      	mov	r3, r1
 8012306:	4924      	ldr	r1, [pc, #144]	; (8012398 <__kernel_cos+0x180>)
 8012308:	4602      	mov	r2, r0
 801230a:	2000      	movs	r0, #0
 801230c:	f7ed ffd4 	bl	80002b8 <__aeabi_dsub>
 8012310:	ecbd 8b02 	vpop	{d8}
 8012314:	ec41 0b10 	vmov	d0, r0, r1
 8012318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231c:	4b1f      	ldr	r3, [pc, #124]	; (801239c <__kernel_cos+0x184>)
 801231e:	491e      	ldr	r1, [pc, #120]	; (8012398 <__kernel_cos+0x180>)
 8012320:	429e      	cmp	r6, r3
 8012322:	bfcc      	ite	gt
 8012324:	4d1e      	ldrgt	r5, [pc, #120]	; (80123a0 <__kernel_cos+0x188>)
 8012326:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801232a:	2400      	movs	r4, #0
 801232c:	4622      	mov	r2, r4
 801232e:	462b      	mov	r3, r5
 8012330:	2000      	movs	r0, #0
 8012332:	f7ed ffc1 	bl	80002b8 <__aeabi_dsub>
 8012336:	4622      	mov	r2, r4
 8012338:	4606      	mov	r6, r0
 801233a:	460f      	mov	r7, r1
 801233c:	462b      	mov	r3, r5
 801233e:	4650      	mov	r0, sl
 8012340:	4659      	mov	r1, fp
 8012342:	f7ed ffb9 	bl	80002b8 <__aeabi_dsub>
 8012346:	4642      	mov	r2, r8
 8012348:	464b      	mov	r3, r9
 801234a:	f7ed ffb5 	bl	80002b8 <__aeabi_dsub>
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	4630      	mov	r0, r6
 8012354:	4639      	mov	r1, r7
 8012356:	e7d9      	b.n	801230c <__kernel_cos+0xf4>
 8012358:	2000      	movs	r0, #0
 801235a:	490f      	ldr	r1, [pc, #60]	; (8012398 <__kernel_cos+0x180>)
 801235c:	e7d8      	b.n	8012310 <__kernel_cos+0xf8>
 801235e:	bf00      	nop
 8012360:	be8838d4 	.word	0xbe8838d4
 8012364:	bda8fae9 	.word	0xbda8fae9
 8012368:	bdb4b1c4 	.word	0xbdb4b1c4
 801236c:	3e21ee9e 	.word	0x3e21ee9e
 8012370:	809c52ad 	.word	0x809c52ad
 8012374:	3e927e4f 	.word	0x3e927e4f
 8012378:	19cb1590 	.word	0x19cb1590
 801237c:	3efa01a0 	.word	0x3efa01a0
 8012380:	16c15177 	.word	0x16c15177
 8012384:	3f56c16c 	.word	0x3f56c16c
 8012388:	5555554c 	.word	0x5555554c
 801238c:	3fa55555 	.word	0x3fa55555
 8012390:	3fe00000 	.word	0x3fe00000
 8012394:	3fd33332 	.word	0x3fd33332
 8012398:	3ff00000 	.word	0x3ff00000
 801239c:	3fe90000 	.word	0x3fe90000
 80123a0:	3fd20000 	.word	0x3fd20000
 80123a4:	00000000 	.word	0x00000000

080123a8 <__kernel_rem_pio2>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	ed2d 8b02 	vpush	{d8}
 80123b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80123b4:	1ed4      	subs	r4, r2, #3
 80123b6:	9308      	str	r3, [sp, #32]
 80123b8:	9101      	str	r1, [sp, #4]
 80123ba:	4bc5      	ldr	r3, [pc, #788]	; (80126d0 <__kernel_rem_pio2+0x328>)
 80123bc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80123be:	9009      	str	r0, [sp, #36]	; 0x24
 80123c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123c4:	9304      	str	r3, [sp, #16]
 80123c6:	9b08      	ldr	r3, [sp, #32]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	9307      	str	r3, [sp, #28]
 80123cc:	2318      	movs	r3, #24
 80123ce:	fb94 f4f3 	sdiv	r4, r4, r3
 80123d2:	f06f 0317 	mvn.w	r3, #23
 80123d6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80123da:	fb04 3303 	mla	r3, r4, r3, r3
 80123de:	eb03 0a02 	add.w	sl, r3, r2
 80123e2:	9b04      	ldr	r3, [sp, #16]
 80123e4:	9a07      	ldr	r2, [sp, #28]
 80123e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80126c0 <__kernel_rem_pio2+0x318>
 80123ea:	eb03 0802 	add.w	r8, r3, r2
 80123ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80123f0:	1aa7      	subs	r7, r4, r2
 80123f2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80123f6:	ae22      	add	r6, sp, #136	; 0x88
 80123f8:	2500      	movs	r5, #0
 80123fa:	4545      	cmp	r5, r8
 80123fc:	dd13      	ble.n	8012426 <__kernel_rem_pio2+0x7e>
 80123fe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80126c0 <__kernel_rem_pio2+0x318>
 8012402:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012406:	2600      	movs	r6, #0
 8012408:	9b04      	ldr	r3, [sp, #16]
 801240a:	429e      	cmp	r6, r3
 801240c:	dc32      	bgt.n	8012474 <__kernel_rem_pio2+0xcc>
 801240e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012410:	9302      	str	r3, [sp, #8]
 8012412:	9b08      	ldr	r3, [sp, #32]
 8012414:	199d      	adds	r5, r3, r6
 8012416:	ab22      	add	r3, sp, #136	; 0x88
 8012418:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801241c:	9306      	str	r3, [sp, #24]
 801241e:	ec59 8b18 	vmov	r8, r9, d8
 8012422:	2700      	movs	r7, #0
 8012424:	e01f      	b.n	8012466 <__kernel_rem_pio2+0xbe>
 8012426:	42ef      	cmn	r7, r5
 8012428:	d407      	bmi.n	801243a <__kernel_rem_pio2+0x92>
 801242a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801242e:	f7ee f891 	bl	8000554 <__aeabi_i2d>
 8012432:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012436:	3501      	adds	r5, #1
 8012438:	e7df      	b.n	80123fa <__kernel_rem_pio2+0x52>
 801243a:	ec51 0b18 	vmov	r0, r1, d8
 801243e:	e7f8      	b.n	8012432 <__kernel_rem_pio2+0x8a>
 8012440:	9906      	ldr	r1, [sp, #24]
 8012442:	9d02      	ldr	r5, [sp, #8]
 8012444:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012448:	9106      	str	r1, [sp, #24]
 801244a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801244e:	9502      	str	r5, [sp, #8]
 8012450:	f7ee f8ea 	bl	8000628 <__aeabi_dmul>
 8012454:	4602      	mov	r2, r0
 8012456:	460b      	mov	r3, r1
 8012458:	4640      	mov	r0, r8
 801245a:	4649      	mov	r1, r9
 801245c:	f7ed ff2e 	bl	80002bc <__adddf3>
 8012460:	3701      	adds	r7, #1
 8012462:	4680      	mov	r8, r0
 8012464:	4689      	mov	r9, r1
 8012466:	9b07      	ldr	r3, [sp, #28]
 8012468:	429f      	cmp	r7, r3
 801246a:	dde9      	ble.n	8012440 <__kernel_rem_pio2+0x98>
 801246c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012470:	3601      	adds	r6, #1
 8012472:	e7c9      	b.n	8012408 <__kernel_rem_pio2+0x60>
 8012474:	9b04      	ldr	r3, [sp, #16]
 8012476:	aa0e      	add	r2, sp, #56	; 0x38
 8012478:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801247c:	930c      	str	r3, [sp, #48]	; 0x30
 801247e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012480:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012484:	9c04      	ldr	r4, [sp, #16]
 8012486:	930b      	str	r3, [sp, #44]	; 0x2c
 8012488:	ab9a      	add	r3, sp, #616	; 0x268
 801248a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801248e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012492:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012496:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801249a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801249e:	ab9a      	add	r3, sp, #616	; 0x268
 80124a0:	445b      	add	r3, fp
 80124a2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80124a6:	2500      	movs	r5, #0
 80124a8:	1b63      	subs	r3, r4, r5
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	dc78      	bgt.n	80125a0 <__kernel_rem_pio2+0x1f8>
 80124ae:	4650      	mov	r0, sl
 80124b0:	ec49 8b10 	vmov	d0, r8, r9
 80124b4:	f000 fc00 	bl	8012cb8 <scalbn>
 80124b8:	ec57 6b10 	vmov	r6, r7, d0
 80124bc:	2200      	movs	r2, #0
 80124be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80124c2:	ee10 0a10 	vmov	r0, s0
 80124c6:	4639      	mov	r1, r7
 80124c8:	f7ee f8ae 	bl	8000628 <__aeabi_dmul>
 80124cc:	ec41 0b10 	vmov	d0, r0, r1
 80124d0:	f000 fb6e 	bl	8012bb0 <floor>
 80124d4:	2200      	movs	r2, #0
 80124d6:	ec51 0b10 	vmov	r0, r1, d0
 80124da:	4b7e      	ldr	r3, [pc, #504]	; (80126d4 <__kernel_rem_pio2+0x32c>)
 80124dc:	f7ee f8a4 	bl	8000628 <__aeabi_dmul>
 80124e0:	4602      	mov	r2, r0
 80124e2:	460b      	mov	r3, r1
 80124e4:	4630      	mov	r0, r6
 80124e6:	4639      	mov	r1, r7
 80124e8:	f7ed fee6 	bl	80002b8 <__aeabi_dsub>
 80124ec:	460f      	mov	r7, r1
 80124ee:	4606      	mov	r6, r0
 80124f0:	f7ee fb4a 	bl	8000b88 <__aeabi_d2iz>
 80124f4:	9006      	str	r0, [sp, #24]
 80124f6:	f7ee f82d 	bl	8000554 <__aeabi_i2d>
 80124fa:	4602      	mov	r2, r0
 80124fc:	460b      	mov	r3, r1
 80124fe:	4630      	mov	r0, r6
 8012500:	4639      	mov	r1, r7
 8012502:	f7ed fed9 	bl	80002b8 <__aeabi_dsub>
 8012506:	f1ba 0f00 	cmp.w	sl, #0
 801250a:	4606      	mov	r6, r0
 801250c:	460f      	mov	r7, r1
 801250e:	dd6c      	ble.n	80125ea <__kernel_rem_pio2+0x242>
 8012510:	1e62      	subs	r2, r4, #1
 8012512:	ab0e      	add	r3, sp, #56	; 0x38
 8012514:	f1ca 0118 	rsb	r1, sl, #24
 8012518:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801251c:	9d06      	ldr	r5, [sp, #24]
 801251e:	fa40 f301 	asr.w	r3, r0, r1
 8012522:	441d      	add	r5, r3
 8012524:	408b      	lsls	r3, r1
 8012526:	1ac0      	subs	r0, r0, r3
 8012528:	ab0e      	add	r3, sp, #56	; 0x38
 801252a:	9506      	str	r5, [sp, #24]
 801252c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012530:	f1ca 0317 	rsb	r3, sl, #23
 8012534:	fa40 f303 	asr.w	r3, r0, r3
 8012538:	9302      	str	r3, [sp, #8]
 801253a:	9b02      	ldr	r3, [sp, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	dd62      	ble.n	8012606 <__kernel_rem_pio2+0x25e>
 8012540:	9b06      	ldr	r3, [sp, #24]
 8012542:	2200      	movs	r2, #0
 8012544:	3301      	adds	r3, #1
 8012546:	9306      	str	r3, [sp, #24]
 8012548:	4615      	mov	r5, r2
 801254a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801254e:	4294      	cmp	r4, r2
 8012550:	f300 8095 	bgt.w	801267e <__kernel_rem_pio2+0x2d6>
 8012554:	f1ba 0f00 	cmp.w	sl, #0
 8012558:	dd07      	ble.n	801256a <__kernel_rem_pio2+0x1c2>
 801255a:	f1ba 0f01 	cmp.w	sl, #1
 801255e:	f000 80a2 	beq.w	80126a6 <__kernel_rem_pio2+0x2fe>
 8012562:	f1ba 0f02 	cmp.w	sl, #2
 8012566:	f000 80c1 	beq.w	80126ec <__kernel_rem_pio2+0x344>
 801256a:	9b02      	ldr	r3, [sp, #8]
 801256c:	2b02      	cmp	r3, #2
 801256e:	d14a      	bne.n	8012606 <__kernel_rem_pio2+0x25e>
 8012570:	4632      	mov	r2, r6
 8012572:	463b      	mov	r3, r7
 8012574:	2000      	movs	r0, #0
 8012576:	4958      	ldr	r1, [pc, #352]	; (80126d8 <__kernel_rem_pio2+0x330>)
 8012578:	f7ed fe9e 	bl	80002b8 <__aeabi_dsub>
 801257c:	4606      	mov	r6, r0
 801257e:	460f      	mov	r7, r1
 8012580:	2d00      	cmp	r5, #0
 8012582:	d040      	beq.n	8012606 <__kernel_rem_pio2+0x25e>
 8012584:	4650      	mov	r0, sl
 8012586:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80126c8 <__kernel_rem_pio2+0x320>
 801258a:	f000 fb95 	bl	8012cb8 <scalbn>
 801258e:	4630      	mov	r0, r6
 8012590:	4639      	mov	r1, r7
 8012592:	ec53 2b10 	vmov	r2, r3, d0
 8012596:	f7ed fe8f 	bl	80002b8 <__aeabi_dsub>
 801259a:	4606      	mov	r6, r0
 801259c:	460f      	mov	r7, r1
 801259e:	e032      	b.n	8012606 <__kernel_rem_pio2+0x25e>
 80125a0:	2200      	movs	r2, #0
 80125a2:	4b4e      	ldr	r3, [pc, #312]	; (80126dc <__kernel_rem_pio2+0x334>)
 80125a4:	4640      	mov	r0, r8
 80125a6:	4649      	mov	r1, r9
 80125a8:	f7ee f83e 	bl	8000628 <__aeabi_dmul>
 80125ac:	f7ee faec 	bl	8000b88 <__aeabi_d2iz>
 80125b0:	f7ed ffd0 	bl	8000554 <__aeabi_i2d>
 80125b4:	2200      	movs	r2, #0
 80125b6:	4b4a      	ldr	r3, [pc, #296]	; (80126e0 <__kernel_rem_pio2+0x338>)
 80125b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125bc:	f7ee f834 	bl	8000628 <__aeabi_dmul>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	4640      	mov	r0, r8
 80125c6:	4649      	mov	r1, r9
 80125c8:	f7ed fe76 	bl	80002b8 <__aeabi_dsub>
 80125cc:	f7ee fadc 	bl	8000b88 <__aeabi_d2iz>
 80125d0:	ab0e      	add	r3, sp, #56	; 0x38
 80125d2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80125d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80125da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125de:	f7ed fe6d 	bl	80002bc <__adddf3>
 80125e2:	3501      	adds	r5, #1
 80125e4:	4680      	mov	r8, r0
 80125e6:	4689      	mov	r9, r1
 80125e8:	e75e      	b.n	80124a8 <__kernel_rem_pio2+0x100>
 80125ea:	d105      	bne.n	80125f8 <__kernel_rem_pio2+0x250>
 80125ec:	1e63      	subs	r3, r4, #1
 80125ee:	aa0e      	add	r2, sp, #56	; 0x38
 80125f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80125f4:	15c3      	asrs	r3, r0, #23
 80125f6:	e79f      	b.n	8012538 <__kernel_rem_pio2+0x190>
 80125f8:	2200      	movs	r2, #0
 80125fa:	4b3a      	ldr	r3, [pc, #232]	; (80126e4 <__kernel_rem_pio2+0x33c>)
 80125fc:	f7ee fa9a 	bl	8000b34 <__aeabi_dcmpge>
 8012600:	2800      	cmp	r0, #0
 8012602:	d139      	bne.n	8012678 <__kernel_rem_pio2+0x2d0>
 8012604:	9002      	str	r0, [sp, #8]
 8012606:	2200      	movs	r2, #0
 8012608:	2300      	movs	r3, #0
 801260a:	4630      	mov	r0, r6
 801260c:	4639      	mov	r1, r7
 801260e:	f7ee fa73 	bl	8000af8 <__aeabi_dcmpeq>
 8012612:	2800      	cmp	r0, #0
 8012614:	f000 80c7 	beq.w	80127a6 <__kernel_rem_pio2+0x3fe>
 8012618:	1e65      	subs	r5, r4, #1
 801261a:	462b      	mov	r3, r5
 801261c:	2200      	movs	r2, #0
 801261e:	9904      	ldr	r1, [sp, #16]
 8012620:	428b      	cmp	r3, r1
 8012622:	da6a      	bge.n	80126fa <__kernel_rem_pio2+0x352>
 8012624:	2a00      	cmp	r2, #0
 8012626:	f000 8088 	beq.w	801273a <__kernel_rem_pio2+0x392>
 801262a:	ab0e      	add	r3, sp, #56	; 0x38
 801262c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012630:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 80b4 	beq.w	80127a2 <__kernel_rem_pio2+0x3fa>
 801263a:	4650      	mov	r0, sl
 801263c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80126c8 <__kernel_rem_pio2+0x320>
 8012640:	f000 fb3a 	bl	8012cb8 <scalbn>
 8012644:	00ec      	lsls	r4, r5, #3
 8012646:	ab72      	add	r3, sp, #456	; 0x1c8
 8012648:	191e      	adds	r6, r3, r4
 801264a:	ec59 8b10 	vmov	r8, r9, d0
 801264e:	f106 0a08 	add.w	sl, r6, #8
 8012652:	462f      	mov	r7, r5
 8012654:	2f00      	cmp	r7, #0
 8012656:	f280 80df 	bge.w	8012818 <__kernel_rem_pio2+0x470>
 801265a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80126c0 <__kernel_rem_pio2+0x318>
 801265e:	f04f 0a00 	mov.w	sl, #0
 8012662:	eba5 030a 	sub.w	r3, r5, sl
 8012666:	2b00      	cmp	r3, #0
 8012668:	f2c0 810a 	blt.w	8012880 <__kernel_rem_pio2+0x4d8>
 801266c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80126e8 <__kernel_rem_pio2+0x340>
 8012670:	ec59 8b18 	vmov	r8, r9, d8
 8012674:	2700      	movs	r7, #0
 8012676:	e0f5      	b.n	8012864 <__kernel_rem_pio2+0x4bc>
 8012678:	2302      	movs	r3, #2
 801267a:	9302      	str	r3, [sp, #8]
 801267c:	e760      	b.n	8012540 <__kernel_rem_pio2+0x198>
 801267e:	ab0e      	add	r3, sp, #56	; 0x38
 8012680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012684:	b94d      	cbnz	r5, 801269a <__kernel_rem_pio2+0x2f2>
 8012686:	b12b      	cbz	r3, 8012694 <__kernel_rem_pio2+0x2ec>
 8012688:	a80e      	add	r0, sp, #56	; 0x38
 801268a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801268e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012692:	2301      	movs	r3, #1
 8012694:	3201      	adds	r2, #1
 8012696:	461d      	mov	r5, r3
 8012698:	e759      	b.n	801254e <__kernel_rem_pio2+0x1a6>
 801269a:	a80e      	add	r0, sp, #56	; 0x38
 801269c:	1acb      	subs	r3, r1, r3
 801269e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80126a2:	462b      	mov	r3, r5
 80126a4:	e7f6      	b.n	8012694 <__kernel_rem_pio2+0x2ec>
 80126a6:	1e62      	subs	r2, r4, #1
 80126a8:	ab0e      	add	r3, sp, #56	; 0x38
 80126aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80126b2:	a90e      	add	r1, sp, #56	; 0x38
 80126b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80126b8:	e757      	b.n	801256a <__kernel_rem_pio2+0x1c2>
 80126ba:	bf00      	nop
 80126bc:	f3af 8000 	nop.w
	...
 80126cc:	3ff00000 	.word	0x3ff00000
 80126d0:	08018430 	.word	0x08018430
 80126d4:	40200000 	.word	0x40200000
 80126d8:	3ff00000 	.word	0x3ff00000
 80126dc:	3e700000 	.word	0x3e700000
 80126e0:	41700000 	.word	0x41700000
 80126e4:	3fe00000 	.word	0x3fe00000
 80126e8:	080183f0 	.word	0x080183f0
 80126ec:	1e62      	subs	r2, r4, #1
 80126ee:	ab0e      	add	r3, sp, #56	; 0x38
 80126f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80126f8:	e7db      	b.n	80126b2 <__kernel_rem_pio2+0x30a>
 80126fa:	a90e      	add	r1, sp, #56	; 0x38
 80126fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012700:	3b01      	subs	r3, #1
 8012702:	430a      	orrs	r2, r1
 8012704:	e78b      	b.n	801261e <__kernel_rem_pio2+0x276>
 8012706:	3301      	adds	r3, #1
 8012708:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801270c:	2900      	cmp	r1, #0
 801270e:	d0fa      	beq.n	8012706 <__kernel_rem_pio2+0x35e>
 8012710:	9a08      	ldr	r2, [sp, #32]
 8012712:	4422      	add	r2, r4
 8012714:	00d2      	lsls	r2, r2, #3
 8012716:	a922      	add	r1, sp, #136	; 0x88
 8012718:	18e3      	adds	r3, r4, r3
 801271a:	9206      	str	r2, [sp, #24]
 801271c:	440a      	add	r2, r1
 801271e:	9302      	str	r3, [sp, #8]
 8012720:	f10b 0108 	add.w	r1, fp, #8
 8012724:	f102 0308 	add.w	r3, r2, #8
 8012728:	1c66      	adds	r6, r4, #1
 801272a:	910a      	str	r1, [sp, #40]	; 0x28
 801272c:	2500      	movs	r5, #0
 801272e:	930d      	str	r3, [sp, #52]	; 0x34
 8012730:	9b02      	ldr	r3, [sp, #8]
 8012732:	42b3      	cmp	r3, r6
 8012734:	da04      	bge.n	8012740 <__kernel_rem_pio2+0x398>
 8012736:	461c      	mov	r4, r3
 8012738:	e6a6      	b.n	8012488 <__kernel_rem_pio2+0xe0>
 801273a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801273c:	2301      	movs	r3, #1
 801273e:	e7e3      	b.n	8012708 <__kernel_rem_pio2+0x360>
 8012740:	9b06      	ldr	r3, [sp, #24]
 8012742:	18ef      	adds	r7, r5, r3
 8012744:	ab22      	add	r3, sp, #136	; 0x88
 8012746:	441f      	add	r7, r3
 8012748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801274a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801274e:	f7ed ff01 	bl	8000554 <__aeabi_i2d>
 8012752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012754:	461c      	mov	r4, r3
 8012756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012758:	e9c7 0100 	strd	r0, r1, [r7]
 801275c:	eb03 0b05 	add.w	fp, r3, r5
 8012760:	2700      	movs	r7, #0
 8012762:	f04f 0800 	mov.w	r8, #0
 8012766:	f04f 0900 	mov.w	r9, #0
 801276a:	9b07      	ldr	r3, [sp, #28]
 801276c:	429f      	cmp	r7, r3
 801276e:	dd08      	ble.n	8012782 <__kernel_rem_pio2+0x3da>
 8012770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012772:	aa72      	add	r2, sp, #456	; 0x1c8
 8012774:	18eb      	adds	r3, r5, r3
 8012776:	4413      	add	r3, r2
 8012778:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801277c:	3601      	adds	r6, #1
 801277e:	3508      	adds	r5, #8
 8012780:	e7d6      	b.n	8012730 <__kernel_rem_pio2+0x388>
 8012782:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012786:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801278a:	f7ed ff4d 	bl	8000628 <__aeabi_dmul>
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	4640      	mov	r0, r8
 8012794:	4649      	mov	r1, r9
 8012796:	f7ed fd91 	bl	80002bc <__adddf3>
 801279a:	3701      	adds	r7, #1
 801279c:	4680      	mov	r8, r0
 801279e:	4689      	mov	r9, r1
 80127a0:	e7e3      	b.n	801276a <__kernel_rem_pio2+0x3c2>
 80127a2:	3d01      	subs	r5, #1
 80127a4:	e741      	b.n	801262a <__kernel_rem_pio2+0x282>
 80127a6:	f1ca 0000 	rsb	r0, sl, #0
 80127aa:	ec47 6b10 	vmov	d0, r6, r7
 80127ae:	f000 fa83 	bl	8012cb8 <scalbn>
 80127b2:	ec57 6b10 	vmov	r6, r7, d0
 80127b6:	2200      	movs	r2, #0
 80127b8:	4b99      	ldr	r3, [pc, #612]	; (8012a20 <__kernel_rem_pio2+0x678>)
 80127ba:	ee10 0a10 	vmov	r0, s0
 80127be:	4639      	mov	r1, r7
 80127c0:	f7ee f9b8 	bl	8000b34 <__aeabi_dcmpge>
 80127c4:	b1f8      	cbz	r0, 8012806 <__kernel_rem_pio2+0x45e>
 80127c6:	2200      	movs	r2, #0
 80127c8:	4b96      	ldr	r3, [pc, #600]	; (8012a24 <__kernel_rem_pio2+0x67c>)
 80127ca:	4630      	mov	r0, r6
 80127cc:	4639      	mov	r1, r7
 80127ce:	f7ed ff2b 	bl	8000628 <__aeabi_dmul>
 80127d2:	f7ee f9d9 	bl	8000b88 <__aeabi_d2iz>
 80127d6:	4680      	mov	r8, r0
 80127d8:	f7ed febc 	bl	8000554 <__aeabi_i2d>
 80127dc:	2200      	movs	r2, #0
 80127de:	4b90      	ldr	r3, [pc, #576]	; (8012a20 <__kernel_rem_pio2+0x678>)
 80127e0:	f7ed ff22 	bl	8000628 <__aeabi_dmul>
 80127e4:	460b      	mov	r3, r1
 80127e6:	4602      	mov	r2, r0
 80127e8:	4639      	mov	r1, r7
 80127ea:	4630      	mov	r0, r6
 80127ec:	f7ed fd64 	bl	80002b8 <__aeabi_dsub>
 80127f0:	f7ee f9ca 	bl	8000b88 <__aeabi_d2iz>
 80127f4:	1c65      	adds	r5, r4, #1
 80127f6:	ab0e      	add	r3, sp, #56	; 0x38
 80127f8:	f10a 0a18 	add.w	sl, sl, #24
 80127fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012800:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012804:	e719      	b.n	801263a <__kernel_rem_pio2+0x292>
 8012806:	4630      	mov	r0, r6
 8012808:	4639      	mov	r1, r7
 801280a:	f7ee f9bd 	bl	8000b88 <__aeabi_d2iz>
 801280e:	ab0e      	add	r3, sp, #56	; 0x38
 8012810:	4625      	mov	r5, r4
 8012812:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012816:	e710      	b.n	801263a <__kernel_rem_pio2+0x292>
 8012818:	ab0e      	add	r3, sp, #56	; 0x38
 801281a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801281e:	f7ed fe99 	bl	8000554 <__aeabi_i2d>
 8012822:	4642      	mov	r2, r8
 8012824:	464b      	mov	r3, r9
 8012826:	f7ed feff 	bl	8000628 <__aeabi_dmul>
 801282a:	2200      	movs	r2, #0
 801282c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012830:	4b7c      	ldr	r3, [pc, #496]	; (8012a24 <__kernel_rem_pio2+0x67c>)
 8012832:	4640      	mov	r0, r8
 8012834:	4649      	mov	r1, r9
 8012836:	f7ed fef7 	bl	8000628 <__aeabi_dmul>
 801283a:	3f01      	subs	r7, #1
 801283c:	4680      	mov	r8, r0
 801283e:	4689      	mov	r9, r1
 8012840:	e708      	b.n	8012654 <__kernel_rem_pio2+0x2ac>
 8012842:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801284e:	f7ed feeb 	bl	8000628 <__aeabi_dmul>
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	4640      	mov	r0, r8
 8012858:	4649      	mov	r1, r9
 801285a:	f7ed fd2f 	bl	80002bc <__adddf3>
 801285e:	3701      	adds	r7, #1
 8012860:	4680      	mov	r8, r0
 8012862:	4689      	mov	r9, r1
 8012864:	9b04      	ldr	r3, [sp, #16]
 8012866:	429f      	cmp	r7, r3
 8012868:	dc01      	bgt.n	801286e <__kernel_rem_pio2+0x4c6>
 801286a:	45ba      	cmp	sl, r7
 801286c:	dae9      	bge.n	8012842 <__kernel_rem_pio2+0x49a>
 801286e:	ab4a      	add	r3, sp, #296	; 0x128
 8012870:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012874:	e9c3 8900 	strd	r8, r9, [r3]
 8012878:	f10a 0a01 	add.w	sl, sl, #1
 801287c:	3e08      	subs	r6, #8
 801287e:	e6f0      	b.n	8012662 <__kernel_rem_pio2+0x2ba>
 8012880:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012882:	2b03      	cmp	r3, #3
 8012884:	d85b      	bhi.n	801293e <__kernel_rem_pio2+0x596>
 8012886:	e8df f003 	tbb	[pc, r3]
 801288a:	264a      	.short	0x264a
 801288c:	0226      	.short	0x0226
 801288e:	ab9a      	add	r3, sp, #616	; 0x268
 8012890:	441c      	add	r4, r3
 8012892:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012896:	46a2      	mov	sl, r4
 8012898:	46ab      	mov	fp, r5
 801289a:	f1bb 0f00 	cmp.w	fp, #0
 801289e:	dc6c      	bgt.n	801297a <__kernel_rem_pio2+0x5d2>
 80128a0:	46a2      	mov	sl, r4
 80128a2:	46ab      	mov	fp, r5
 80128a4:	f1bb 0f01 	cmp.w	fp, #1
 80128a8:	f300 8086 	bgt.w	80129b8 <__kernel_rem_pio2+0x610>
 80128ac:	2000      	movs	r0, #0
 80128ae:	2100      	movs	r1, #0
 80128b0:	2d01      	cmp	r5, #1
 80128b2:	f300 80a0 	bgt.w	80129f6 <__kernel_rem_pio2+0x64e>
 80128b6:	9b02      	ldr	r3, [sp, #8]
 80128b8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80128bc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f040 809e 	bne.w	8012a02 <__kernel_rem_pio2+0x65a>
 80128c6:	9b01      	ldr	r3, [sp, #4]
 80128c8:	e9c3 7800 	strd	r7, r8, [r3]
 80128cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80128d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80128d4:	e033      	b.n	801293e <__kernel_rem_pio2+0x596>
 80128d6:	3408      	adds	r4, #8
 80128d8:	ab4a      	add	r3, sp, #296	; 0x128
 80128da:	441c      	add	r4, r3
 80128dc:	462e      	mov	r6, r5
 80128de:	2000      	movs	r0, #0
 80128e0:	2100      	movs	r1, #0
 80128e2:	2e00      	cmp	r6, #0
 80128e4:	da3a      	bge.n	801295c <__kernel_rem_pio2+0x5b4>
 80128e6:	9b02      	ldr	r3, [sp, #8]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d03d      	beq.n	8012968 <__kernel_rem_pio2+0x5c0>
 80128ec:	4602      	mov	r2, r0
 80128ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128f2:	9c01      	ldr	r4, [sp, #4]
 80128f4:	e9c4 2300 	strd	r2, r3, [r4]
 80128f8:	4602      	mov	r2, r0
 80128fa:	460b      	mov	r3, r1
 80128fc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012900:	f7ed fcda 	bl	80002b8 <__aeabi_dsub>
 8012904:	ae4c      	add	r6, sp, #304	; 0x130
 8012906:	2401      	movs	r4, #1
 8012908:	42a5      	cmp	r5, r4
 801290a:	da30      	bge.n	801296e <__kernel_rem_pio2+0x5c6>
 801290c:	9b02      	ldr	r3, [sp, #8]
 801290e:	b113      	cbz	r3, 8012916 <__kernel_rem_pio2+0x56e>
 8012910:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012914:	4619      	mov	r1, r3
 8012916:	9b01      	ldr	r3, [sp, #4]
 8012918:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801291c:	e00f      	b.n	801293e <__kernel_rem_pio2+0x596>
 801291e:	ab9a      	add	r3, sp, #616	; 0x268
 8012920:	441c      	add	r4, r3
 8012922:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012926:	2000      	movs	r0, #0
 8012928:	2100      	movs	r1, #0
 801292a:	2d00      	cmp	r5, #0
 801292c:	da10      	bge.n	8012950 <__kernel_rem_pio2+0x5a8>
 801292e:	9b02      	ldr	r3, [sp, #8]
 8012930:	b113      	cbz	r3, 8012938 <__kernel_rem_pio2+0x590>
 8012932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012936:	4619      	mov	r1, r3
 8012938:	9b01      	ldr	r3, [sp, #4]
 801293a:	e9c3 0100 	strd	r0, r1, [r3]
 801293e:	9b06      	ldr	r3, [sp, #24]
 8012940:	f003 0007 	and.w	r0, r3, #7
 8012944:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012948:	ecbd 8b02 	vpop	{d8}
 801294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012950:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012954:	f7ed fcb2 	bl	80002bc <__adddf3>
 8012958:	3d01      	subs	r5, #1
 801295a:	e7e6      	b.n	801292a <__kernel_rem_pio2+0x582>
 801295c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012960:	f7ed fcac 	bl	80002bc <__adddf3>
 8012964:	3e01      	subs	r6, #1
 8012966:	e7bc      	b.n	80128e2 <__kernel_rem_pio2+0x53a>
 8012968:	4602      	mov	r2, r0
 801296a:	460b      	mov	r3, r1
 801296c:	e7c1      	b.n	80128f2 <__kernel_rem_pio2+0x54a>
 801296e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012972:	f7ed fca3 	bl	80002bc <__adddf3>
 8012976:	3401      	adds	r4, #1
 8012978:	e7c6      	b.n	8012908 <__kernel_rem_pio2+0x560>
 801297a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801297e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012982:	4640      	mov	r0, r8
 8012984:	ec53 2b17 	vmov	r2, r3, d7
 8012988:	4649      	mov	r1, r9
 801298a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801298e:	f7ed fc95 	bl	80002bc <__adddf3>
 8012992:	4602      	mov	r2, r0
 8012994:	460b      	mov	r3, r1
 8012996:	4606      	mov	r6, r0
 8012998:	460f      	mov	r7, r1
 801299a:	4640      	mov	r0, r8
 801299c:	4649      	mov	r1, r9
 801299e:	f7ed fc8b 	bl	80002b8 <__aeabi_dsub>
 80129a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129a6:	f7ed fc89 	bl	80002bc <__adddf3>
 80129aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129ae:	e9ca 0100 	strd	r0, r1, [sl]
 80129b2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80129b6:	e770      	b.n	801289a <__kernel_rem_pio2+0x4f2>
 80129b8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80129bc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80129c0:	4630      	mov	r0, r6
 80129c2:	ec53 2b17 	vmov	r2, r3, d7
 80129c6:	4639      	mov	r1, r7
 80129c8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80129cc:	f7ed fc76 	bl	80002bc <__adddf3>
 80129d0:	4602      	mov	r2, r0
 80129d2:	460b      	mov	r3, r1
 80129d4:	4680      	mov	r8, r0
 80129d6:	4689      	mov	r9, r1
 80129d8:	4630      	mov	r0, r6
 80129da:	4639      	mov	r1, r7
 80129dc:	f7ed fc6c 	bl	80002b8 <__aeabi_dsub>
 80129e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129e4:	f7ed fc6a 	bl	80002bc <__adddf3>
 80129e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129ec:	e9ca 0100 	strd	r0, r1, [sl]
 80129f0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80129f4:	e756      	b.n	80128a4 <__kernel_rem_pio2+0x4fc>
 80129f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80129fa:	f7ed fc5f 	bl	80002bc <__adddf3>
 80129fe:	3d01      	subs	r5, #1
 8012a00:	e756      	b.n	80128b0 <__kernel_rem_pio2+0x508>
 8012a02:	9b01      	ldr	r3, [sp, #4]
 8012a04:	9a01      	ldr	r2, [sp, #4]
 8012a06:	601f      	str	r7, [r3, #0]
 8012a08:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012a0c:	605c      	str	r4, [r3, #4]
 8012a0e:	609d      	str	r5, [r3, #8]
 8012a10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012a14:	60d3      	str	r3, [r2, #12]
 8012a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a1a:	6110      	str	r0, [r2, #16]
 8012a1c:	6153      	str	r3, [r2, #20]
 8012a1e:	e78e      	b.n	801293e <__kernel_rem_pio2+0x596>
 8012a20:	41700000 	.word	0x41700000
 8012a24:	3e700000 	.word	0x3e700000

08012a28 <__kernel_sin>:
 8012a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a2c:	ec55 4b10 	vmov	r4, r5, d0
 8012a30:	b085      	sub	sp, #20
 8012a32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a36:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012a3a:	ed8d 1b00 	vstr	d1, [sp]
 8012a3e:	9002      	str	r0, [sp, #8]
 8012a40:	da06      	bge.n	8012a50 <__kernel_sin+0x28>
 8012a42:	ee10 0a10 	vmov	r0, s0
 8012a46:	4629      	mov	r1, r5
 8012a48:	f7ee f89e 	bl	8000b88 <__aeabi_d2iz>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	d051      	beq.n	8012af4 <__kernel_sin+0xcc>
 8012a50:	4622      	mov	r2, r4
 8012a52:	462b      	mov	r3, r5
 8012a54:	4620      	mov	r0, r4
 8012a56:	4629      	mov	r1, r5
 8012a58:	f7ed fde6 	bl	8000628 <__aeabi_dmul>
 8012a5c:	4682      	mov	sl, r0
 8012a5e:	468b      	mov	fp, r1
 8012a60:	4602      	mov	r2, r0
 8012a62:	460b      	mov	r3, r1
 8012a64:	4620      	mov	r0, r4
 8012a66:	4629      	mov	r1, r5
 8012a68:	f7ed fdde 	bl	8000628 <__aeabi_dmul>
 8012a6c:	a341      	add	r3, pc, #260	; (adr r3, 8012b74 <__kernel_sin+0x14c>)
 8012a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a72:	4680      	mov	r8, r0
 8012a74:	4689      	mov	r9, r1
 8012a76:	4650      	mov	r0, sl
 8012a78:	4659      	mov	r1, fp
 8012a7a:	f7ed fdd5 	bl	8000628 <__aeabi_dmul>
 8012a7e:	a33f      	add	r3, pc, #252	; (adr r3, 8012b7c <__kernel_sin+0x154>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	f7ed fc18 	bl	80002b8 <__aeabi_dsub>
 8012a88:	4652      	mov	r2, sl
 8012a8a:	465b      	mov	r3, fp
 8012a8c:	f7ed fdcc 	bl	8000628 <__aeabi_dmul>
 8012a90:	a33c      	add	r3, pc, #240	; (adr r3, 8012b84 <__kernel_sin+0x15c>)
 8012a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a96:	f7ed fc11 	bl	80002bc <__adddf3>
 8012a9a:	4652      	mov	r2, sl
 8012a9c:	465b      	mov	r3, fp
 8012a9e:	f7ed fdc3 	bl	8000628 <__aeabi_dmul>
 8012aa2:	a33a      	add	r3, pc, #232	; (adr r3, 8012b8c <__kernel_sin+0x164>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	f7ed fc06 	bl	80002b8 <__aeabi_dsub>
 8012aac:	4652      	mov	r2, sl
 8012aae:	465b      	mov	r3, fp
 8012ab0:	f7ed fdba 	bl	8000628 <__aeabi_dmul>
 8012ab4:	a337      	add	r3, pc, #220	; (adr r3, 8012b94 <__kernel_sin+0x16c>)
 8012ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aba:	f7ed fbff 	bl	80002bc <__adddf3>
 8012abe:	9b02      	ldr	r3, [sp, #8]
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	460f      	mov	r7, r1
 8012ac4:	b9db      	cbnz	r3, 8012afe <__kernel_sin+0xd6>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	460b      	mov	r3, r1
 8012aca:	4650      	mov	r0, sl
 8012acc:	4659      	mov	r1, fp
 8012ace:	f7ed fdab 	bl	8000628 <__aeabi_dmul>
 8012ad2:	a325      	add	r3, pc, #148	; (adr r3, 8012b68 <__kernel_sin+0x140>)
 8012ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad8:	f7ed fbee 	bl	80002b8 <__aeabi_dsub>
 8012adc:	4642      	mov	r2, r8
 8012ade:	464b      	mov	r3, r9
 8012ae0:	f7ed fda2 	bl	8000628 <__aeabi_dmul>
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	4620      	mov	r0, r4
 8012aea:	4629      	mov	r1, r5
 8012aec:	f7ed fbe6 	bl	80002bc <__adddf3>
 8012af0:	4604      	mov	r4, r0
 8012af2:	460d      	mov	r5, r1
 8012af4:	ec45 4b10 	vmov	d0, r4, r5
 8012af8:	b005      	add	sp, #20
 8012afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012afe:	2200      	movs	r2, #0
 8012b00:	4b1b      	ldr	r3, [pc, #108]	; (8012b70 <__kernel_sin+0x148>)
 8012b02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b06:	f7ed fd8f 	bl	8000628 <__aeabi_dmul>
 8012b0a:	4632      	mov	r2, r6
 8012b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b10:	463b      	mov	r3, r7
 8012b12:	4640      	mov	r0, r8
 8012b14:	4649      	mov	r1, r9
 8012b16:	f7ed fd87 	bl	8000628 <__aeabi_dmul>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b22:	f7ed fbc9 	bl	80002b8 <__aeabi_dsub>
 8012b26:	4652      	mov	r2, sl
 8012b28:	465b      	mov	r3, fp
 8012b2a:	f7ed fd7d 	bl	8000628 <__aeabi_dmul>
 8012b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b32:	f7ed fbc1 	bl	80002b8 <__aeabi_dsub>
 8012b36:	a30c      	add	r3, pc, #48	; (adr r3, 8012b68 <__kernel_sin+0x140>)
 8012b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3c:	4606      	mov	r6, r0
 8012b3e:	460f      	mov	r7, r1
 8012b40:	4640      	mov	r0, r8
 8012b42:	4649      	mov	r1, r9
 8012b44:	f7ed fd70 	bl	8000628 <__aeabi_dmul>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	4639      	mov	r1, r7
 8012b50:	f7ed fbb4 	bl	80002bc <__adddf3>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	4620      	mov	r0, r4
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	f7ed fbac 	bl	80002b8 <__aeabi_dsub>
 8012b60:	e7c6      	b.n	8012af0 <__kernel_sin+0xc8>
 8012b62:	bf00      	nop
 8012b64:	f3af 8000 	nop.w
 8012b68:	55555549 	.word	0x55555549
 8012b6c:	3fc55555 	.word	0x3fc55555
 8012b70:	3fe00000 	.word	0x3fe00000
 8012b74:	5acfd57c 	.word	0x5acfd57c
 8012b78:	3de5d93a 	.word	0x3de5d93a
 8012b7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012b80:	3e5ae5e6 	.word	0x3e5ae5e6
 8012b84:	57b1fe7d 	.word	0x57b1fe7d
 8012b88:	3ec71de3 	.word	0x3ec71de3
 8012b8c:	19c161d5 	.word	0x19c161d5
 8012b90:	3f2a01a0 	.word	0x3f2a01a0
 8012b94:	1110f8a6 	.word	0x1110f8a6
 8012b98:	3f811111 	.word	0x3f811111

08012b9c <fabs>:
 8012b9c:	ec51 0b10 	vmov	r0, r1, d0
 8012ba0:	ee10 2a10 	vmov	r2, s0
 8012ba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ba8:	ec43 2b10 	vmov	d0, r2, r3
 8012bac:	4770      	bx	lr
	...

08012bb0 <floor>:
 8012bb0:	ec51 0b10 	vmov	r0, r1, d0
 8012bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012bbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012bc0:	2e13      	cmp	r6, #19
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	ee10 5a10 	vmov	r5, s0
 8012bc8:	4680      	mov	r8, r0
 8012bca:	dc34      	bgt.n	8012c36 <floor+0x86>
 8012bcc:	2e00      	cmp	r6, #0
 8012bce:	da16      	bge.n	8012bfe <floor+0x4e>
 8012bd0:	a335      	add	r3, pc, #212	; (adr r3, 8012ca8 <floor+0xf8>)
 8012bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd6:	f7ed fb71 	bl	80002bc <__adddf3>
 8012bda:	2200      	movs	r2, #0
 8012bdc:	2300      	movs	r3, #0
 8012bde:	f7ed ffb3 	bl	8000b48 <__aeabi_dcmpgt>
 8012be2:	b148      	cbz	r0, 8012bf8 <floor+0x48>
 8012be4:	2c00      	cmp	r4, #0
 8012be6:	da59      	bge.n	8012c9c <floor+0xec>
 8012be8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012bec:	4a30      	ldr	r2, [pc, #192]	; (8012cb0 <floor+0x100>)
 8012bee:	432b      	orrs	r3, r5
 8012bf0:	2500      	movs	r5, #0
 8012bf2:	42ab      	cmp	r3, r5
 8012bf4:	bf18      	it	ne
 8012bf6:	4614      	movne	r4, r2
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	e025      	b.n	8012c4a <floor+0x9a>
 8012bfe:	4f2d      	ldr	r7, [pc, #180]	; (8012cb4 <floor+0x104>)
 8012c00:	4137      	asrs	r7, r6
 8012c02:	ea01 0307 	and.w	r3, r1, r7
 8012c06:	4303      	orrs	r3, r0
 8012c08:	d01f      	beq.n	8012c4a <floor+0x9a>
 8012c0a:	a327      	add	r3, pc, #156	; (adr r3, 8012ca8 <floor+0xf8>)
 8012c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c10:	f7ed fb54 	bl	80002bc <__adddf3>
 8012c14:	2200      	movs	r2, #0
 8012c16:	2300      	movs	r3, #0
 8012c18:	f7ed ff96 	bl	8000b48 <__aeabi_dcmpgt>
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d0eb      	beq.n	8012bf8 <floor+0x48>
 8012c20:	2c00      	cmp	r4, #0
 8012c22:	bfbe      	ittt	lt
 8012c24:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012c28:	fa43 f606 	asrlt.w	r6, r3, r6
 8012c2c:	19a4      	addlt	r4, r4, r6
 8012c2e:	ea24 0407 	bic.w	r4, r4, r7
 8012c32:	2500      	movs	r5, #0
 8012c34:	e7e0      	b.n	8012bf8 <floor+0x48>
 8012c36:	2e33      	cmp	r6, #51	; 0x33
 8012c38:	dd0b      	ble.n	8012c52 <floor+0xa2>
 8012c3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012c3e:	d104      	bne.n	8012c4a <floor+0x9a>
 8012c40:	ee10 2a10 	vmov	r2, s0
 8012c44:	460b      	mov	r3, r1
 8012c46:	f7ed fb39 	bl	80002bc <__adddf3>
 8012c4a:	ec41 0b10 	vmov	d0, r0, r1
 8012c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c52:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012c56:	f04f 33ff 	mov.w	r3, #4294967295
 8012c5a:	fa23 f707 	lsr.w	r7, r3, r7
 8012c5e:	4207      	tst	r7, r0
 8012c60:	d0f3      	beq.n	8012c4a <floor+0x9a>
 8012c62:	a311      	add	r3, pc, #68	; (adr r3, 8012ca8 <floor+0xf8>)
 8012c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c68:	f7ed fb28 	bl	80002bc <__adddf3>
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	2300      	movs	r3, #0
 8012c70:	f7ed ff6a 	bl	8000b48 <__aeabi_dcmpgt>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d0bf      	beq.n	8012bf8 <floor+0x48>
 8012c78:	2c00      	cmp	r4, #0
 8012c7a:	da02      	bge.n	8012c82 <floor+0xd2>
 8012c7c:	2e14      	cmp	r6, #20
 8012c7e:	d103      	bne.n	8012c88 <floor+0xd8>
 8012c80:	3401      	adds	r4, #1
 8012c82:	ea25 0507 	bic.w	r5, r5, r7
 8012c86:	e7b7      	b.n	8012bf8 <floor+0x48>
 8012c88:	2301      	movs	r3, #1
 8012c8a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012c8e:	fa03 f606 	lsl.w	r6, r3, r6
 8012c92:	4435      	add	r5, r6
 8012c94:	4545      	cmp	r5, r8
 8012c96:	bf38      	it	cc
 8012c98:	18e4      	addcc	r4, r4, r3
 8012c9a:	e7f2      	b.n	8012c82 <floor+0xd2>
 8012c9c:	2500      	movs	r5, #0
 8012c9e:	462c      	mov	r4, r5
 8012ca0:	e7aa      	b.n	8012bf8 <floor+0x48>
 8012ca2:	bf00      	nop
 8012ca4:	f3af 8000 	nop.w
 8012ca8:	8800759c 	.word	0x8800759c
 8012cac:	7e37e43c 	.word	0x7e37e43c
 8012cb0:	bff00000 	.word	0xbff00000
 8012cb4:	000fffff 	.word	0x000fffff

08012cb8 <scalbn>:
 8012cb8:	b570      	push	{r4, r5, r6, lr}
 8012cba:	ec55 4b10 	vmov	r4, r5, d0
 8012cbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	462b      	mov	r3, r5
 8012cc6:	b9aa      	cbnz	r2, 8012cf4 <scalbn+0x3c>
 8012cc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012ccc:	4323      	orrs	r3, r4
 8012cce:	d03b      	beq.n	8012d48 <scalbn+0x90>
 8012cd0:	4b31      	ldr	r3, [pc, #196]	; (8012d98 <scalbn+0xe0>)
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	ee10 0a10 	vmov	r0, s0
 8012cda:	f7ed fca5 	bl	8000628 <__aeabi_dmul>
 8012cde:	4b2f      	ldr	r3, [pc, #188]	; (8012d9c <scalbn+0xe4>)
 8012ce0:	429e      	cmp	r6, r3
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	460d      	mov	r5, r1
 8012ce6:	da12      	bge.n	8012d0e <scalbn+0x56>
 8012ce8:	a327      	add	r3, pc, #156	; (adr r3, 8012d88 <scalbn+0xd0>)
 8012cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cee:	f7ed fc9b 	bl	8000628 <__aeabi_dmul>
 8012cf2:	e009      	b.n	8012d08 <scalbn+0x50>
 8012cf4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012cf8:	428a      	cmp	r2, r1
 8012cfa:	d10c      	bne.n	8012d16 <scalbn+0x5e>
 8012cfc:	ee10 2a10 	vmov	r2, s0
 8012d00:	4620      	mov	r0, r4
 8012d02:	4629      	mov	r1, r5
 8012d04:	f7ed fada 	bl	80002bc <__adddf3>
 8012d08:	4604      	mov	r4, r0
 8012d0a:	460d      	mov	r5, r1
 8012d0c:	e01c      	b.n	8012d48 <scalbn+0x90>
 8012d0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012d12:	460b      	mov	r3, r1
 8012d14:	3a36      	subs	r2, #54	; 0x36
 8012d16:	4432      	add	r2, r6
 8012d18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012d1c:	428a      	cmp	r2, r1
 8012d1e:	dd0b      	ble.n	8012d38 <scalbn+0x80>
 8012d20:	ec45 4b11 	vmov	d1, r4, r5
 8012d24:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012d90 <scalbn+0xd8>
 8012d28:	f000 f83c 	bl	8012da4 <copysign>
 8012d2c:	a318      	add	r3, pc, #96	; (adr r3, 8012d90 <scalbn+0xd8>)
 8012d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d32:	ec51 0b10 	vmov	r0, r1, d0
 8012d36:	e7da      	b.n	8012cee <scalbn+0x36>
 8012d38:	2a00      	cmp	r2, #0
 8012d3a:	dd08      	ble.n	8012d4e <scalbn+0x96>
 8012d3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012d40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012d44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d48:	ec45 4b10 	vmov	d0, r4, r5
 8012d4c:	bd70      	pop	{r4, r5, r6, pc}
 8012d4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012d52:	da0d      	bge.n	8012d70 <scalbn+0xb8>
 8012d54:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012d58:	429e      	cmp	r6, r3
 8012d5a:	ec45 4b11 	vmov	d1, r4, r5
 8012d5e:	dce1      	bgt.n	8012d24 <scalbn+0x6c>
 8012d60:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012d88 <scalbn+0xd0>
 8012d64:	f000 f81e 	bl	8012da4 <copysign>
 8012d68:	a307      	add	r3, pc, #28	; (adr r3, 8012d88 <scalbn+0xd0>)
 8012d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6e:	e7e0      	b.n	8012d32 <scalbn+0x7a>
 8012d70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012d74:	3236      	adds	r2, #54	; 0x36
 8012d76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012d7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d7e:	4620      	mov	r0, r4
 8012d80:	4629      	mov	r1, r5
 8012d82:	2200      	movs	r2, #0
 8012d84:	4b06      	ldr	r3, [pc, #24]	; (8012da0 <scalbn+0xe8>)
 8012d86:	e7b2      	b.n	8012cee <scalbn+0x36>
 8012d88:	c2f8f359 	.word	0xc2f8f359
 8012d8c:	01a56e1f 	.word	0x01a56e1f
 8012d90:	8800759c 	.word	0x8800759c
 8012d94:	7e37e43c 	.word	0x7e37e43c
 8012d98:	43500000 	.word	0x43500000
 8012d9c:	ffff3cb0 	.word	0xffff3cb0
 8012da0:	3c900000 	.word	0x3c900000

08012da4 <copysign>:
 8012da4:	ec51 0b10 	vmov	r0, r1, d0
 8012da8:	ee11 0a90 	vmov	r0, s3
 8012dac:	ee10 2a10 	vmov	r2, s0
 8012db0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012db8:	ea41 0300 	orr.w	r3, r1, r0
 8012dbc:	ec43 2b10 	vmov	d0, r2, r3
 8012dc0:	4770      	bx	lr
	...

08012dc4 <__errno>:
 8012dc4:	4b01      	ldr	r3, [pc, #4]	; (8012dcc <__errno+0x8>)
 8012dc6:	6818      	ldr	r0, [r3, #0]
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop
 8012dcc:	2000000c 	.word	0x2000000c

08012dd0 <__libc_init_array>:
 8012dd0:	b570      	push	{r4, r5, r6, lr}
 8012dd2:	4e0d      	ldr	r6, [pc, #52]	; (8012e08 <__libc_init_array+0x38>)
 8012dd4:	4c0d      	ldr	r4, [pc, #52]	; (8012e0c <__libc_init_array+0x3c>)
 8012dd6:	1ba4      	subs	r4, r4, r6
 8012dd8:	10a4      	asrs	r4, r4, #2
 8012dda:	2500      	movs	r5, #0
 8012ddc:	42a5      	cmp	r5, r4
 8012dde:	d109      	bne.n	8012df4 <__libc_init_array+0x24>
 8012de0:	4e0b      	ldr	r6, [pc, #44]	; (8012e10 <__libc_init_array+0x40>)
 8012de2:	4c0c      	ldr	r4, [pc, #48]	; (8012e14 <__libc_init_array+0x44>)
 8012de4:	f004 ff38 	bl	8017c58 <_init>
 8012de8:	1ba4      	subs	r4, r4, r6
 8012dea:	10a4      	asrs	r4, r4, #2
 8012dec:	2500      	movs	r5, #0
 8012dee:	42a5      	cmp	r5, r4
 8012df0:	d105      	bne.n	8012dfe <__libc_init_array+0x2e>
 8012df2:	bd70      	pop	{r4, r5, r6, pc}
 8012df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012df8:	4798      	blx	r3
 8012dfa:	3501      	adds	r5, #1
 8012dfc:	e7ee      	b.n	8012ddc <__libc_init_array+0xc>
 8012dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e02:	4798      	blx	r3
 8012e04:	3501      	adds	r5, #1
 8012e06:	e7f2      	b.n	8012dee <__libc_init_array+0x1e>
 8012e08:	08018784 	.word	0x08018784
 8012e0c:	08018784 	.word	0x08018784
 8012e10:	08018784 	.word	0x08018784
 8012e14:	0801878c 	.word	0x0801878c

08012e18 <memcpy>:
 8012e18:	b510      	push	{r4, lr}
 8012e1a:	1e43      	subs	r3, r0, #1
 8012e1c:	440a      	add	r2, r1
 8012e1e:	4291      	cmp	r1, r2
 8012e20:	d100      	bne.n	8012e24 <memcpy+0xc>
 8012e22:	bd10      	pop	{r4, pc}
 8012e24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e2c:	e7f7      	b.n	8012e1e <memcpy+0x6>

08012e2e <memset>:
 8012e2e:	4402      	add	r2, r0
 8012e30:	4603      	mov	r3, r0
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d100      	bne.n	8012e38 <memset+0xa>
 8012e36:	4770      	bx	lr
 8012e38:	f803 1b01 	strb.w	r1, [r3], #1
 8012e3c:	e7f9      	b.n	8012e32 <memset+0x4>

08012e3e <__cvt>:
 8012e3e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e42:	ec55 4b10 	vmov	r4, r5, d0
 8012e46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012e48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012e4c:	2d00      	cmp	r5, #0
 8012e4e:	460e      	mov	r6, r1
 8012e50:	4691      	mov	r9, r2
 8012e52:	4619      	mov	r1, r3
 8012e54:	bfb8      	it	lt
 8012e56:	4622      	movlt	r2, r4
 8012e58:	462b      	mov	r3, r5
 8012e5a:	f027 0720 	bic.w	r7, r7, #32
 8012e5e:	bfbb      	ittet	lt
 8012e60:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012e64:	461d      	movlt	r5, r3
 8012e66:	2300      	movge	r3, #0
 8012e68:	232d      	movlt	r3, #45	; 0x2d
 8012e6a:	bfb8      	it	lt
 8012e6c:	4614      	movlt	r4, r2
 8012e6e:	2f46      	cmp	r7, #70	; 0x46
 8012e70:	700b      	strb	r3, [r1, #0]
 8012e72:	d004      	beq.n	8012e7e <__cvt+0x40>
 8012e74:	2f45      	cmp	r7, #69	; 0x45
 8012e76:	d100      	bne.n	8012e7a <__cvt+0x3c>
 8012e78:	3601      	adds	r6, #1
 8012e7a:	2102      	movs	r1, #2
 8012e7c:	e000      	b.n	8012e80 <__cvt+0x42>
 8012e7e:	2103      	movs	r1, #3
 8012e80:	ab03      	add	r3, sp, #12
 8012e82:	9301      	str	r3, [sp, #4]
 8012e84:	ab02      	add	r3, sp, #8
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	4632      	mov	r2, r6
 8012e8a:	4653      	mov	r3, sl
 8012e8c:	ec45 4b10 	vmov	d0, r4, r5
 8012e90:	f001 ffb2 	bl	8014df8 <_dtoa_r>
 8012e94:	2f47      	cmp	r7, #71	; 0x47
 8012e96:	4680      	mov	r8, r0
 8012e98:	d102      	bne.n	8012ea0 <__cvt+0x62>
 8012e9a:	f019 0f01 	tst.w	r9, #1
 8012e9e:	d026      	beq.n	8012eee <__cvt+0xb0>
 8012ea0:	2f46      	cmp	r7, #70	; 0x46
 8012ea2:	eb08 0906 	add.w	r9, r8, r6
 8012ea6:	d111      	bne.n	8012ecc <__cvt+0x8e>
 8012ea8:	f898 3000 	ldrb.w	r3, [r8]
 8012eac:	2b30      	cmp	r3, #48	; 0x30
 8012eae:	d10a      	bne.n	8012ec6 <__cvt+0x88>
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	f7ed fe1e 	bl	8000af8 <__aeabi_dcmpeq>
 8012ebc:	b918      	cbnz	r0, 8012ec6 <__cvt+0x88>
 8012ebe:	f1c6 0601 	rsb	r6, r6, #1
 8012ec2:	f8ca 6000 	str.w	r6, [sl]
 8012ec6:	f8da 3000 	ldr.w	r3, [sl]
 8012eca:	4499      	add	r9, r3
 8012ecc:	2200      	movs	r2, #0
 8012ece:	2300      	movs	r3, #0
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	4629      	mov	r1, r5
 8012ed4:	f7ed fe10 	bl	8000af8 <__aeabi_dcmpeq>
 8012ed8:	b938      	cbnz	r0, 8012eea <__cvt+0xac>
 8012eda:	2230      	movs	r2, #48	; 0x30
 8012edc:	9b03      	ldr	r3, [sp, #12]
 8012ede:	454b      	cmp	r3, r9
 8012ee0:	d205      	bcs.n	8012eee <__cvt+0xb0>
 8012ee2:	1c59      	adds	r1, r3, #1
 8012ee4:	9103      	str	r1, [sp, #12]
 8012ee6:	701a      	strb	r2, [r3, #0]
 8012ee8:	e7f8      	b.n	8012edc <__cvt+0x9e>
 8012eea:	f8cd 900c 	str.w	r9, [sp, #12]
 8012eee:	9b03      	ldr	r3, [sp, #12]
 8012ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ef2:	eba3 0308 	sub.w	r3, r3, r8
 8012ef6:	4640      	mov	r0, r8
 8012ef8:	6013      	str	r3, [r2, #0]
 8012efa:	b004      	add	sp, #16
 8012efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012f00 <__exponent>:
 8012f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f02:	2900      	cmp	r1, #0
 8012f04:	4604      	mov	r4, r0
 8012f06:	bfba      	itte	lt
 8012f08:	4249      	neglt	r1, r1
 8012f0a:	232d      	movlt	r3, #45	; 0x2d
 8012f0c:	232b      	movge	r3, #43	; 0x2b
 8012f0e:	2909      	cmp	r1, #9
 8012f10:	f804 2b02 	strb.w	r2, [r4], #2
 8012f14:	7043      	strb	r3, [r0, #1]
 8012f16:	dd20      	ble.n	8012f5a <__exponent+0x5a>
 8012f18:	f10d 0307 	add.w	r3, sp, #7
 8012f1c:	461f      	mov	r7, r3
 8012f1e:	260a      	movs	r6, #10
 8012f20:	fb91 f5f6 	sdiv	r5, r1, r6
 8012f24:	fb06 1115 	mls	r1, r6, r5, r1
 8012f28:	3130      	adds	r1, #48	; 0x30
 8012f2a:	2d09      	cmp	r5, #9
 8012f2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012f30:	f103 32ff 	add.w	r2, r3, #4294967295
 8012f34:	4629      	mov	r1, r5
 8012f36:	dc09      	bgt.n	8012f4c <__exponent+0x4c>
 8012f38:	3130      	adds	r1, #48	; 0x30
 8012f3a:	3b02      	subs	r3, #2
 8012f3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012f40:	42bb      	cmp	r3, r7
 8012f42:	4622      	mov	r2, r4
 8012f44:	d304      	bcc.n	8012f50 <__exponent+0x50>
 8012f46:	1a10      	subs	r0, r2, r0
 8012f48:	b003      	add	sp, #12
 8012f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	e7e7      	b.n	8012f20 <__exponent+0x20>
 8012f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f54:	f804 2b01 	strb.w	r2, [r4], #1
 8012f58:	e7f2      	b.n	8012f40 <__exponent+0x40>
 8012f5a:	2330      	movs	r3, #48	; 0x30
 8012f5c:	4419      	add	r1, r3
 8012f5e:	7083      	strb	r3, [r0, #2]
 8012f60:	1d02      	adds	r2, r0, #4
 8012f62:	70c1      	strb	r1, [r0, #3]
 8012f64:	e7ef      	b.n	8012f46 <__exponent+0x46>
	...

08012f68 <_printf_float>:
 8012f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6c:	b08d      	sub	sp, #52	; 0x34
 8012f6e:	460c      	mov	r4, r1
 8012f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012f74:	4616      	mov	r6, r2
 8012f76:	461f      	mov	r7, r3
 8012f78:	4605      	mov	r5, r0
 8012f7a:	f003 f9a9 	bl	80162d0 <_localeconv_r>
 8012f7e:	6803      	ldr	r3, [r0, #0]
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ed f93c 	bl	8000200 <strlen>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f90:	9005      	str	r0, [sp, #20]
 8012f92:	3307      	adds	r3, #7
 8012f94:	f023 0307 	bic.w	r3, r3, #7
 8012f98:	f103 0208 	add.w	r2, r3, #8
 8012f9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012fa0:	f8d4 b000 	ldr.w	fp, [r4]
 8012fa4:	f8c8 2000 	str.w	r2, [r8]
 8012fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012fb0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012fb4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012fb8:	9307      	str	r3, [sp, #28]
 8012fba:	f8cd 8018 	str.w	r8, [sp, #24]
 8012fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc2:	4ba7      	ldr	r3, [pc, #668]	; (8013260 <_printf_float+0x2f8>)
 8012fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fc8:	f7ed fdc8 	bl	8000b5c <__aeabi_dcmpun>
 8012fcc:	bb70      	cbnz	r0, 801302c <_printf_float+0xc4>
 8012fce:	f04f 32ff 	mov.w	r2, #4294967295
 8012fd2:	4ba3      	ldr	r3, [pc, #652]	; (8013260 <_printf_float+0x2f8>)
 8012fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fd8:	f7ed fda2 	bl	8000b20 <__aeabi_dcmple>
 8012fdc:	bb30      	cbnz	r0, 801302c <_printf_float+0xc4>
 8012fde:	2200      	movs	r2, #0
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4640      	mov	r0, r8
 8012fe4:	4649      	mov	r1, r9
 8012fe6:	f7ed fd91 	bl	8000b0c <__aeabi_dcmplt>
 8012fea:	b110      	cbz	r0, 8012ff2 <_printf_float+0x8a>
 8012fec:	232d      	movs	r3, #45	; 0x2d
 8012fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ff2:	4a9c      	ldr	r2, [pc, #624]	; (8013264 <_printf_float+0x2fc>)
 8012ff4:	4b9c      	ldr	r3, [pc, #624]	; (8013268 <_printf_float+0x300>)
 8012ff6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012ffa:	bf8c      	ite	hi
 8012ffc:	4690      	movhi	r8, r2
 8012ffe:	4698      	movls	r8, r3
 8013000:	2303      	movs	r3, #3
 8013002:	f02b 0204 	bic.w	r2, fp, #4
 8013006:	6123      	str	r3, [r4, #16]
 8013008:	6022      	str	r2, [r4, #0]
 801300a:	f04f 0900 	mov.w	r9, #0
 801300e:	9700      	str	r7, [sp, #0]
 8013010:	4633      	mov	r3, r6
 8013012:	aa0b      	add	r2, sp, #44	; 0x2c
 8013014:	4621      	mov	r1, r4
 8013016:	4628      	mov	r0, r5
 8013018:	f000 f9e6 	bl	80133e8 <_printf_common>
 801301c:	3001      	adds	r0, #1
 801301e:	f040 808d 	bne.w	801313c <_printf_float+0x1d4>
 8013022:	f04f 30ff 	mov.w	r0, #4294967295
 8013026:	b00d      	add	sp, #52	; 0x34
 8013028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302c:	4642      	mov	r2, r8
 801302e:	464b      	mov	r3, r9
 8013030:	4640      	mov	r0, r8
 8013032:	4649      	mov	r1, r9
 8013034:	f7ed fd92 	bl	8000b5c <__aeabi_dcmpun>
 8013038:	b110      	cbz	r0, 8013040 <_printf_float+0xd8>
 801303a:	4a8c      	ldr	r2, [pc, #560]	; (801326c <_printf_float+0x304>)
 801303c:	4b8c      	ldr	r3, [pc, #560]	; (8013270 <_printf_float+0x308>)
 801303e:	e7da      	b.n	8012ff6 <_printf_float+0x8e>
 8013040:	6861      	ldr	r1, [r4, #4]
 8013042:	1c4b      	adds	r3, r1, #1
 8013044:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013048:	a80a      	add	r0, sp, #40	; 0x28
 801304a:	d13e      	bne.n	80130ca <_printf_float+0x162>
 801304c:	2306      	movs	r3, #6
 801304e:	6063      	str	r3, [r4, #4]
 8013050:	2300      	movs	r3, #0
 8013052:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013056:	ab09      	add	r3, sp, #36	; 0x24
 8013058:	9300      	str	r3, [sp, #0]
 801305a:	ec49 8b10 	vmov	d0, r8, r9
 801305e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013062:	6022      	str	r2, [r4, #0]
 8013064:	f8cd a004 	str.w	sl, [sp, #4]
 8013068:	6861      	ldr	r1, [r4, #4]
 801306a:	4628      	mov	r0, r5
 801306c:	f7ff fee7 	bl	8012e3e <__cvt>
 8013070:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013074:	2b47      	cmp	r3, #71	; 0x47
 8013076:	4680      	mov	r8, r0
 8013078:	d109      	bne.n	801308e <_printf_float+0x126>
 801307a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801307c:	1cd8      	adds	r0, r3, #3
 801307e:	db02      	blt.n	8013086 <_printf_float+0x11e>
 8013080:	6862      	ldr	r2, [r4, #4]
 8013082:	4293      	cmp	r3, r2
 8013084:	dd47      	ble.n	8013116 <_printf_float+0x1ae>
 8013086:	f1aa 0a02 	sub.w	sl, sl, #2
 801308a:	fa5f fa8a 	uxtb.w	sl, sl
 801308e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013094:	d824      	bhi.n	80130e0 <_printf_float+0x178>
 8013096:	3901      	subs	r1, #1
 8013098:	4652      	mov	r2, sl
 801309a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801309e:	9109      	str	r1, [sp, #36]	; 0x24
 80130a0:	f7ff ff2e 	bl	8012f00 <__exponent>
 80130a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130a6:	1813      	adds	r3, r2, r0
 80130a8:	2a01      	cmp	r2, #1
 80130aa:	4681      	mov	r9, r0
 80130ac:	6123      	str	r3, [r4, #16]
 80130ae:	dc02      	bgt.n	80130b6 <_printf_float+0x14e>
 80130b0:	6822      	ldr	r2, [r4, #0]
 80130b2:	07d1      	lsls	r1, r2, #31
 80130b4:	d501      	bpl.n	80130ba <_printf_float+0x152>
 80130b6:	3301      	adds	r3, #1
 80130b8:	6123      	str	r3, [r4, #16]
 80130ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d0a5      	beq.n	801300e <_printf_float+0xa6>
 80130c2:	232d      	movs	r3, #45	; 0x2d
 80130c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130c8:	e7a1      	b.n	801300e <_printf_float+0xa6>
 80130ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80130ce:	f000 8177 	beq.w	80133c0 <_printf_float+0x458>
 80130d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80130d6:	d1bb      	bne.n	8013050 <_printf_float+0xe8>
 80130d8:	2900      	cmp	r1, #0
 80130da:	d1b9      	bne.n	8013050 <_printf_float+0xe8>
 80130dc:	2301      	movs	r3, #1
 80130de:	e7b6      	b.n	801304e <_printf_float+0xe6>
 80130e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80130e4:	d119      	bne.n	801311a <_printf_float+0x1b2>
 80130e6:	2900      	cmp	r1, #0
 80130e8:	6863      	ldr	r3, [r4, #4]
 80130ea:	dd0c      	ble.n	8013106 <_printf_float+0x19e>
 80130ec:	6121      	str	r1, [r4, #16]
 80130ee:	b913      	cbnz	r3, 80130f6 <_printf_float+0x18e>
 80130f0:	6822      	ldr	r2, [r4, #0]
 80130f2:	07d2      	lsls	r2, r2, #31
 80130f4:	d502      	bpl.n	80130fc <_printf_float+0x194>
 80130f6:	3301      	adds	r3, #1
 80130f8:	440b      	add	r3, r1
 80130fa:	6123      	str	r3, [r4, #16]
 80130fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8013100:	f04f 0900 	mov.w	r9, #0
 8013104:	e7d9      	b.n	80130ba <_printf_float+0x152>
 8013106:	b913      	cbnz	r3, 801310e <_printf_float+0x1a6>
 8013108:	6822      	ldr	r2, [r4, #0]
 801310a:	07d0      	lsls	r0, r2, #31
 801310c:	d501      	bpl.n	8013112 <_printf_float+0x1aa>
 801310e:	3302      	adds	r3, #2
 8013110:	e7f3      	b.n	80130fa <_printf_float+0x192>
 8013112:	2301      	movs	r3, #1
 8013114:	e7f1      	b.n	80130fa <_printf_float+0x192>
 8013116:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801311a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801311e:	4293      	cmp	r3, r2
 8013120:	db05      	blt.n	801312e <_printf_float+0x1c6>
 8013122:	6822      	ldr	r2, [r4, #0]
 8013124:	6123      	str	r3, [r4, #16]
 8013126:	07d1      	lsls	r1, r2, #31
 8013128:	d5e8      	bpl.n	80130fc <_printf_float+0x194>
 801312a:	3301      	adds	r3, #1
 801312c:	e7e5      	b.n	80130fa <_printf_float+0x192>
 801312e:	2b00      	cmp	r3, #0
 8013130:	bfd4      	ite	le
 8013132:	f1c3 0302 	rsble	r3, r3, #2
 8013136:	2301      	movgt	r3, #1
 8013138:	4413      	add	r3, r2
 801313a:	e7de      	b.n	80130fa <_printf_float+0x192>
 801313c:	6823      	ldr	r3, [r4, #0]
 801313e:	055a      	lsls	r2, r3, #21
 8013140:	d407      	bmi.n	8013152 <_printf_float+0x1ea>
 8013142:	6923      	ldr	r3, [r4, #16]
 8013144:	4642      	mov	r2, r8
 8013146:	4631      	mov	r1, r6
 8013148:	4628      	mov	r0, r5
 801314a:	47b8      	blx	r7
 801314c:	3001      	adds	r0, #1
 801314e:	d12b      	bne.n	80131a8 <_printf_float+0x240>
 8013150:	e767      	b.n	8013022 <_printf_float+0xba>
 8013152:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013156:	f240 80dc 	bls.w	8013312 <_printf_float+0x3aa>
 801315a:	2200      	movs	r2, #0
 801315c:	2300      	movs	r3, #0
 801315e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013162:	f7ed fcc9 	bl	8000af8 <__aeabi_dcmpeq>
 8013166:	2800      	cmp	r0, #0
 8013168:	d033      	beq.n	80131d2 <_printf_float+0x26a>
 801316a:	2301      	movs	r3, #1
 801316c:	4a41      	ldr	r2, [pc, #260]	; (8013274 <_printf_float+0x30c>)
 801316e:	4631      	mov	r1, r6
 8013170:	4628      	mov	r0, r5
 8013172:	47b8      	blx	r7
 8013174:	3001      	adds	r0, #1
 8013176:	f43f af54 	beq.w	8013022 <_printf_float+0xba>
 801317a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801317e:	429a      	cmp	r2, r3
 8013180:	db02      	blt.n	8013188 <_printf_float+0x220>
 8013182:	6823      	ldr	r3, [r4, #0]
 8013184:	07d8      	lsls	r0, r3, #31
 8013186:	d50f      	bpl.n	80131a8 <_printf_float+0x240>
 8013188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801318c:	4631      	mov	r1, r6
 801318e:	4628      	mov	r0, r5
 8013190:	47b8      	blx	r7
 8013192:	3001      	adds	r0, #1
 8013194:	f43f af45 	beq.w	8013022 <_printf_float+0xba>
 8013198:	f04f 0800 	mov.w	r8, #0
 801319c:	f104 091a 	add.w	r9, r4, #26
 80131a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131a2:	3b01      	subs	r3, #1
 80131a4:	4543      	cmp	r3, r8
 80131a6:	dc09      	bgt.n	80131bc <_printf_float+0x254>
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	079b      	lsls	r3, r3, #30
 80131ac:	f100 8103 	bmi.w	80133b6 <_printf_float+0x44e>
 80131b0:	68e0      	ldr	r0, [r4, #12]
 80131b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131b4:	4298      	cmp	r0, r3
 80131b6:	bfb8      	it	lt
 80131b8:	4618      	movlt	r0, r3
 80131ba:	e734      	b.n	8013026 <_printf_float+0xbe>
 80131bc:	2301      	movs	r3, #1
 80131be:	464a      	mov	r2, r9
 80131c0:	4631      	mov	r1, r6
 80131c2:	4628      	mov	r0, r5
 80131c4:	47b8      	blx	r7
 80131c6:	3001      	adds	r0, #1
 80131c8:	f43f af2b 	beq.w	8013022 <_printf_float+0xba>
 80131cc:	f108 0801 	add.w	r8, r8, #1
 80131d0:	e7e6      	b.n	80131a0 <_printf_float+0x238>
 80131d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	dc2b      	bgt.n	8013230 <_printf_float+0x2c8>
 80131d8:	2301      	movs	r3, #1
 80131da:	4a26      	ldr	r2, [pc, #152]	; (8013274 <_printf_float+0x30c>)
 80131dc:	4631      	mov	r1, r6
 80131de:	4628      	mov	r0, r5
 80131e0:	47b8      	blx	r7
 80131e2:	3001      	adds	r0, #1
 80131e4:	f43f af1d 	beq.w	8013022 <_printf_float+0xba>
 80131e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ea:	b923      	cbnz	r3, 80131f6 <_printf_float+0x28e>
 80131ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ee:	b913      	cbnz	r3, 80131f6 <_printf_float+0x28e>
 80131f0:	6823      	ldr	r3, [r4, #0]
 80131f2:	07d9      	lsls	r1, r3, #31
 80131f4:	d5d8      	bpl.n	80131a8 <_printf_float+0x240>
 80131f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131fa:	4631      	mov	r1, r6
 80131fc:	4628      	mov	r0, r5
 80131fe:	47b8      	blx	r7
 8013200:	3001      	adds	r0, #1
 8013202:	f43f af0e 	beq.w	8013022 <_printf_float+0xba>
 8013206:	f04f 0900 	mov.w	r9, #0
 801320a:	f104 0a1a 	add.w	sl, r4, #26
 801320e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013210:	425b      	negs	r3, r3
 8013212:	454b      	cmp	r3, r9
 8013214:	dc01      	bgt.n	801321a <_printf_float+0x2b2>
 8013216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013218:	e794      	b.n	8013144 <_printf_float+0x1dc>
 801321a:	2301      	movs	r3, #1
 801321c:	4652      	mov	r2, sl
 801321e:	4631      	mov	r1, r6
 8013220:	4628      	mov	r0, r5
 8013222:	47b8      	blx	r7
 8013224:	3001      	adds	r0, #1
 8013226:	f43f aefc 	beq.w	8013022 <_printf_float+0xba>
 801322a:	f109 0901 	add.w	r9, r9, #1
 801322e:	e7ee      	b.n	801320e <_printf_float+0x2a6>
 8013230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013234:	429a      	cmp	r2, r3
 8013236:	bfa8      	it	ge
 8013238:	461a      	movge	r2, r3
 801323a:	2a00      	cmp	r2, #0
 801323c:	4691      	mov	r9, r2
 801323e:	dd07      	ble.n	8013250 <_printf_float+0x2e8>
 8013240:	4613      	mov	r3, r2
 8013242:	4631      	mov	r1, r6
 8013244:	4642      	mov	r2, r8
 8013246:	4628      	mov	r0, r5
 8013248:	47b8      	blx	r7
 801324a:	3001      	adds	r0, #1
 801324c:	f43f aee9 	beq.w	8013022 <_printf_float+0xba>
 8013250:	f104 031a 	add.w	r3, r4, #26
 8013254:	f04f 0b00 	mov.w	fp, #0
 8013258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801325c:	9306      	str	r3, [sp, #24]
 801325e:	e015      	b.n	801328c <_printf_float+0x324>
 8013260:	7fefffff 	.word	0x7fefffff
 8013264:	08018448 	.word	0x08018448
 8013268:	08018444 	.word	0x08018444
 801326c:	08018450 	.word	0x08018450
 8013270:	0801844c 	.word	0x0801844c
 8013274:	08018673 	.word	0x08018673
 8013278:	2301      	movs	r3, #1
 801327a:	9a06      	ldr	r2, [sp, #24]
 801327c:	4631      	mov	r1, r6
 801327e:	4628      	mov	r0, r5
 8013280:	47b8      	blx	r7
 8013282:	3001      	adds	r0, #1
 8013284:	f43f aecd 	beq.w	8013022 <_printf_float+0xba>
 8013288:	f10b 0b01 	add.w	fp, fp, #1
 801328c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013290:	ebaa 0309 	sub.w	r3, sl, r9
 8013294:	455b      	cmp	r3, fp
 8013296:	dcef      	bgt.n	8013278 <_printf_float+0x310>
 8013298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801329c:	429a      	cmp	r2, r3
 801329e:	44d0      	add	r8, sl
 80132a0:	db15      	blt.n	80132ce <_printf_float+0x366>
 80132a2:	6823      	ldr	r3, [r4, #0]
 80132a4:	07da      	lsls	r2, r3, #31
 80132a6:	d412      	bmi.n	80132ce <_printf_float+0x366>
 80132a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132ac:	eba3 020a 	sub.w	r2, r3, sl
 80132b0:	eba3 0a01 	sub.w	sl, r3, r1
 80132b4:	4592      	cmp	sl, r2
 80132b6:	bfa8      	it	ge
 80132b8:	4692      	movge	sl, r2
 80132ba:	f1ba 0f00 	cmp.w	sl, #0
 80132be:	dc0e      	bgt.n	80132de <_printf_float+0x376>
 80132c0:	f04f 0800 	mov.w	r8, #0
 80132c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132c8:	f104 091a 	add.w	r9, r4, #26
 80132cc:	e019      	b.n	8013302 <_printf_float+0x39a>
 80132ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132d2:	4631      	mov	r1, r6
 80132d4:	4628      	mov	r0, r5
 80132d6:	47b8      	blx	r7
 80132d8:	3001      	adds	r0, #1
 80132da:	d1e5      	bne.n	80132a8 <_printf_float+0x340>
 80132dc:	e6a1      	b.n	8013022 <_printf_float+0xba>
 80132de:	4653      	mov	r3, sl
 80132e0:	4642      	mov	r2, r8
 80132e2:	4631      	mov	r1, r6
 80132e4:	4628      	mov	r0, r5
 80132e6:	47b8      	blx	r7
 80132e8:	3001      	adds	r0, #1
 80132ea:	d1e9      	bne.n	80132c0 <_printf_float+0x358>
 80132ec:	e699      	b.n	8013022 <_printf_float+0xba>
 80132ee:	2301      	movs	r3, #1
 80132f0:	464a      	mov	r2, r9
 80132f2:	4631      	mov	r1, r6
 80132f4:	4628      	mov	r0, r5
 80132f6:	47b8      	blx	r7
 80132f8:	3001      	adds	r0, #1
 80132fa:	f43f ae92 	beq.w	8013022 <_printf_float+0xba>
 80132fe:	f108 0801 	add.w	r8, r8, #1
 8013302:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013306:	1a9b      	subs	r3, r3, r2
 8013308:	eba3 030a 	sub.w	r3, r3, sl
 801330c:	4543      	cmp	r3, r8
 801330e:	dcee      	bgt.n	80132ee <_printf_float+0x386>
 8013310:	e74a      	b.n	80131a8 <_printf_float+0x240>
 8013312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013314:	2a01      	cmp	r2, #1
 8013316:	dc01      	bgt.n	801331c <_printf_float+0x3b4>
 8013318:	07db      	lsls	r3, r3, #31
 801331a:	d53a      	bpl.n	8013392 <_printf_float+0x42a>
 801331c:	2301      	movs	r3, #1
 801331e:	4642      	mov	r2, r8
 8013320:	4631      	mov	r1, r6
 8013322:	4628      	mov	r0, r5
 8013324:	47b8      	blx	r7
 8013326:	3001      	adds	r0, #1
 8013328:	f43f ae7b 	beq.w	8013022 <_printf_float+0xba>
 801332c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013330:	4631      	mov	r1, r6
 8013332:	4628      	mov	r0, r5
 8013334:	47b8      	blx	r7
 8013336:	3001      	adds	r0, #1
 8013338:	f108 0801 	add.w	r8, r8, #1
 801333c:	f43f ae71 	beq.w	8013022 <_printf_float+0xba>
 8013340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013342:	2200      	movs	r2, #0
 8013344:	f103 3aff 	add.w	sl, r3, #4294967295
 8013348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801334c:	2300      	movs	r3, #0
 801334e:	f7ed fbd3 	bl	8000af8 <__aeabi_dcmpeq>
 8013352:	b9c8      	cbnz	r0, 8013388 <_printf_float+0x420>
 8013354:	4653      	mov	r3, sl
 8013356:	4642      	mov	r2, r8
 8013358:	4631      	mov	r1, r6
 801335a:	4628      	mov	r0, r5
 801335c:	47b8      	blx	r7
 801335e:	3001      	adds	r0, #1
 8013360:	d10e      	bne.n	8013380 <_printf_float+0x418>
 8013362:	e65e      	b.n	8013022 <_printf_float+0xba>
 8013364:	2301      	movs	r3, #1
 8013366:	4652      	mov	r2, sl
 8013368:	4631      	mov	r1, r6
 801336a:	4628      	mov	r0, r5
 801336c:	47b8      	blx	r7
 801336e:	3001      	adds	r0, #1
 8013370:	f43f ae57 	beq.w	8013022 <_printf_float+0xba>
 8013374:	f108 0801 	add.w	r8, r8, #1
 8013378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801337a:	3b01      	subs	r3, #1
 801337c:	4543      	cmp	r3, r8
 801337e:	dcf1      	bgt.n	8013364 <_printf_float+0x3fc>
 8013380:	464b      	mov	r3, r9
 8013382:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013386:	e6de      	b.n	8013146 <_printf_float+0x1de>
 8013388:	f04f 0800 	mov.w	r8, #0
 801338c:	f104 0a1a 	add.w	sl, r4, #26
 8013390:	e7f2      	b.n	8013378 <_printf_float+0x410>
 8013392:	2301      	movs	r3, #1
 8013394:	e7df      	b.n	8013356 <_printf_float+0x3ee>
 8013396:	2301      	movs	r3, #1
 8013398:	464a      	mov	r2, r9
 801339a:	4631      	mov	r1, r6
 801339c:	4628      	mov	r0, r5
 801339e:	47b8      	blx	r7
 80133a0:	3001      	adds	r0, #1
 80133a2:	f43f ae3e 	beq.w	8013022 <_printf_float+0xba>
 80133a6:	f108 0801 	add.w	r8, r8, #1
 80133aa:	68e3      	ldr	r3, [r4, #12]
 80133ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133ae:	1a9b      	subs	r3, r3, r2
 80133b0:	4543      	cmp	r3, r8
 80133b2:	dcf0      	bgt.n	8013396 <_printf_float+0x42e>
 80133b4:	e6fc      	b.n	80131b0 <_printf_float+0x248>
 80133b6:	f04f 0800 	mov.w	r8, #0
 80133ba:	f104 0919 	add.w	r9, r4, #25
 80133be:	e7f4      	b.n	80133aa <_printf_float+0x442>
 80133c0:	2900      	cmp	r1, #0
 80133c2:	f43f ae8b 	beq.w	80130dc <_printf_float+0x174>
 80133c6:	2300      	movs	r3, #0
 80133c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80133cc:	ab09      	add	r3, sp, #36	; 0x24
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	ec49 8b10 	vmov	d0, r8, r9
 80133d4:	6022      	str	r2, [r4, #0]
 80133d6:	f8cd a004 	str.w	sl, [sp, #4]
 80133da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133de:	4628      	mov	r0, r5
 80133e0:	f7ff fd2d 	bl	8012e3e <__cvt>
 80133e4:	4680      	mov	r8, r0
 80133e6:	e648      	b.n	801307a <_printf_float+0x112>

080133e8 <_printf_common>:
 80133e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133ec:	4691      	mov	r9, r2
 80133ee:	461f      	mov	r7, r3
 80133f0:	688a      	ldr	r2, [r1, #8]
 80133f2:	690b      	ldr	r3, [r1, #16]
 80133f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133f8:	4293      	cmp	r3, r2
 80133fa:	bfb8      	it	lt
 80133fc:	4613      	movlt	r3, r2
 80133fe:	f8c9 3000 	str.w	r3, [r9]
 8013402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013406:	4606      	mov	r6, r0
 8013408:	460c      	mov	r4, r1
 801340a:	b112      	cbz	r2, 8013412 <_printf_common+0x2a>
 801340c:	3301      	adds	r3, #1
 801340e:	f8c9 3000 	str.w	r3, [r9]
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	0699      	lsls	r1, r3, #26
 8013416:	bf42      	ittt	mi
 8013418:	f8d9 3000 	ldrmi.w	r3, [r9]
 801341c:	3302      	addmi	r3, #2
 801341e:	f8c9 3000 	strmi.w	r3, [r9]
 8013422:	6825      	ldr	r5, [r4, #0]
 8013424:	f015 0506 	ands.w	r5, r5, #6
 8013428:	d107      	bne.n	801343a <_printf_common+0x52>
 801342a:	f104 0a19 	add.w	sl, r4, #25
 801342e:	68e3      	ldr	r3, [r4, #12]
 8013430:	f8d9 2000 	ldr.w	r2, [r9]
 8013434:	1a9b      	subs	r3, r3, r2
 8013436:	42ab      	cmp	r3, r5
 8013438:	dc28      	bgt.n	801348c <_printf_common+0xa4>
 801343a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801343e:	6822      	ldr	r2, [r4, #0]
 8013440:	3300      	adds	r3, #0
 8013442:	bf18      	it	ne
 8013444:	2301      	movne	r3, #1
 8013446:	0692      	lsls	r2, r2, #26
 8013448:	d42d      	bmi.n	80134a6 <_printf_common+0xbe>
 801344a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801344e:	4639      	mov	r1, r7
 8013450:	4630      	mov	r0, r6
 8013452:	47c0      	blx	r8
 8013454:	3001      	adds	r0, #1
 8013456:	d020      	beq.n	801349a <_printf_common+0xb2>
 8013458:	6823      	ldr	r3, [r4, #0]
 801345a:	68e5      	ldr	r5, [r4, #12]
 801345c:	f8d9 2000 	ldr.w	r2, [r9]
 8013460:	f003 0306 	and.w	r3, r3, #6
 8013464:	2b04      	cmp	r3, #4
 8013466:	bf08      	it	eq
 8013468:	1aad      	subeq	r5, r5, r2
 801346a:	68a3      	ldr	r3, [r4, #8]
 801346c:	6922      	ldr	r2, [r4, #16]
 801346e:	bf0c      	ite	eq
 8013470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013474:	2500      	movne	r5, #0
 8013476:	4293      	cmp	r3, r2
 8013478:	bfc4      	itt	gt
 801347a:	1a9b      	subgt	r3, r3, r2
 801347c:	18ed      	addgt	r5, r5, r3
 801347e:	f04f 0900 	mov.w	r9, #0
 8013482:	341a      	adds	r4, #26
 8013484:	454d      	cmp	r5, r9
 8013486:	d11a      	bne.n	80134be <_printf_common+0xd6>
 8013488:	2000      	movs	r0, #0
 801348a:	e008      	b.n	801349e <_printf_common+0xb6>
 801348c:	2301      	movs	r3, #1
 801348e:	4652      	mov	r2, sl
 8013490:	4639      	mov	r1, r7
 8013492:	4630      	mov	r0, r6
 8013494:	47c0      	blx	r8
 8013496:	3001      	adds	r0, #1
 8013498:	d103      	bne.n	80134a2 <_printf_common+0xba>
 801349a:	f04f 30ff 	mov.w	r0, #4294967295
 801349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a2:	3501      	adds	r5, #1
 80134a4:	e7c3      	b.n	801342e <_printf_common+0x46>
 80134a6:	18e1      	adds	r1, r4, r3
 80134a8:	1c5a      	adds	r2, r3, #1
 80134aa:	2030      	movs	r0, #48	; 0x30
 80134ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134b0:	4422      	add	r2, r4
 80134b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80134b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80134ba:	3302      	adds	r3, #2
 80134bc:	e7c5      	b.n	801344a <_printf_common+0x62>
 80134be:	2301      	movs	r3, #1
 80134c0:	4622      	mov	r2, r4
 80134c2:	4639      	mov	r1, r7
 80134c4:	4630      	mov	r0, r6
 80134c6:	47c0      	blx	r8
 80134c8:	3001      	adds	r0, #1
 80134ca:	d0e6      	beq.n	801349a <_printf_common+0xb2>
 80134cc:	f109 0901 	add.w	r9, r9, #1
 80134d0:	e7d8      	b.n	8013484 <_printf_common+0x9c>
	...

080134d4 <_printf_i>:
 80134d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80134dc:	460c      	mov	r4, r1
 80134de:	7e09      	ldrb	r1, [r1, #24]
 80134e0:	b085      	sub	sp, #20
 80134e2:	296e      	cmp	r1, #110	; 0x6e
 80134e4:	4617      	mov	r7, r2
 80134e6:	4606      	mov	r6, r0
 80134e8:	4698      	mov	r8, r3
 80134ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134ec:	f000 80b3 	beq.w	8013656 <_printf_i+0x182>
 80134f0:	d822      	bhi.n	8013538 <_printf_i+0x64>
 80134f2:	2963      	cmp	r1, #99	; 0x63
 80134f4:	d036      	beq.n	8013564 <_printf_i+0x90>
 80134f6:	d80a      	bhi.n	801350e <_printf_i+0x3a>
 80134f8:	2900      	cmp	r1, #0
 80134fa:	f000 80b9 	beq.w	8013670 <_printf_i+0x19c>
 80134fe:	2958      	cmp	r1, #88	; 0x58
 8013500:	f000 8083 	beq.w	801360a <_printf_i+0x136>
 8013504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013508:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801350c:	e032      	b.n	8013574 <_printf_i+0xa0>
 801350e:	2964      	cmp	r1, #100	; 0x64
 8013510:	d001      	beq.n	8013516 <_printf_i+0x42>
 8013512:	2969      	cmp	r1, #105	; 0x69
 8013514:	d1f6      	bne.n	8013504 <_printf_i+0x30>
 8013516:	6820      	ldr	r0, [r4, #0]
 8013518:	6813      	ldr	r3, [r2, #0]
 801351a:	0605      	lsls	r5, r0, #24
 801351c:	f103 0104 	add.w	r1, r3, #4
 8013520:	d52a      	bpl.n	8013578 <_printf_i+0xa4>
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	6011      	str	r1, [r2, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	da03      	bge.n	8013532 <_printf_i+0x5e>
 801352a:	222d      	movs	r2, #45	; 0x2d
 801352c:	425b      	negs	r3, r3
 801352e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013532:	486f      	ldr	r0, [pc, #444]	; (80136f0 <_printf_i+0x21c>)
 8013534:	220a      	movs	r2, #10
 8013536:	e039      	b.n	80135ac <_printf_i+0xd8>
 8013538:	2973      	cmp	r1, #115	; 0x73
 801353a:	f000 809d 	beq.w	8013678 <_printf_i+0x1a4>
 801353e:	d808      	bhi.n	8013552 <_printf_i+0x7e>
 8013540:	296f      	cmp	r1, #111	; 0x6f
 8013542:	d020      	beq.n	8013586 <_printf_i+0xb2>
 8013544:	2970      	cmp	r1, #112	; 0x70
 8013546:	d1dd      	bne.n	8013504 <_printf_i+0x30>
 8013548:	6823      	ldr	r3, [r4, #0]
 801354a:	f043 0320 	orr.w	r3, r3, #32
 801354e:	6023      	str	r3, [r4, #0]
 8013550:	e003      	b.n	801355a <_printf_i+0x86>
 8013552:	2975      	cmp	r1, #117	; 0x75
 8013554:	d017      	beq.n	8013586 <_printf_i+0xb2>
 8013556:	2978      	cmp	r1, #120	; 0x78
 8013558:	d1d4      	bne.n	8013504 <_printf_i+0x30>
 801355a:	2378      	movs	r3, #120	; 0x78
 801355c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013560:	4864      	ldr	r0, [pc, #400]	; (80136f4 <_printf_i+0x220>)
 8013562:	e055      	b.n	8013610 <_printf_i+0x13c>
 8013564:	6813      	ldr	r3, [r2, #0]
 8013566:	1d19      	adds	r1, r3, #4
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	6011      	str	r1, [r2, #0]
 801356c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013574:	2301      	movs	r3, #1
 8013576:	e08c      	b.n	8013692 <_printf_i+0x1be>
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	6011      	str	r1, [r2, #0]
 801357c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013580:	bf18      	it	ne
 8013582:	b21b      	sxthne	r3, r3
 8013584:	e7cf      	b.n	8013526 <_printf_i+0x52>
 8013586:	6813      	ldr	r3, [r2, #0]
 8013588:	6825      	ldr	r5, [r4, #0]
 801358a:	1d18      	adds	r0, r3, #4
 801358c:	6010      	str	r0, [r2, #0]
 801358e:	0628      	lsls	r0, r5, #24
 8013590:	d501      	bpl.n	8013596 <_printf_i+0xc2>
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	e002      	b.n	801359c <_printf_i+0xc8>
 8013596:	0668      	lsls	r0, r5, #25
 8013598:	d5fb      	bpl.n	8013592 <_printf_i+0xbe>
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	4854      	ldr	r0, [pc, #336]	; (80136f0 <_printf_i+0x21c>)
 801359e:	296f      	cmp	r1, #111	; 0x6f
 80135a0:	bf14      	ite	ne
 80135a2:	220a      	movne	r2, #10
 80135a4:	2208      	moveq	r2, #8
 80135a6:	2100      	movs	r1, #0
 80135a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135ac:	6865      	ldr	r5, [r4, #4]
 80135ae:	60a5      	str	r5, [r4, #8]
 80135b0:	2d00      	cmp	r5, #0
 80135b2:	f2c0 8095 	blt.w	80136e0 <_printf_i+0x20c>
 80135b6:	6821      	ldr	r1, [r4, #0]
 80135b8:	f021 0104 	bic.w	r1, r1, #4
 80135bc:	6021      	str	r1, [r4, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d13d      	bne.n	801363e <_printf_i+0x16a>
 80135c2:	2d00      	cmp	r5, #0
 80135c4:	f040 808e 	bne.w	80136e4 <_printf_i+0x210>
 80135c8:	4665      	mov	r5, ip
 80135ca:	2a08      	cmp	r2, #8
 80135cc:	d10b      	bne.n	80135e6 <_printf_i+0x112>
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	07db      	lsls	r3, r3, #31
 80135d2:	d508      	bpl.n	80135e6 <_printf_i+0x112>
 80135d4:	6923      	ldr	r3, [r4, #16]
 80135d6:	6862      	ldr	r2, [r4, #4]
 80135d8:	429a      	cmp	r2, r3
 80135da:	bfde      	ittt	le
 80135dc:	2330      	movle	r3, #48	; 0x30
 80135de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80135e6:	ebac 0305 	sub.w	r3, ip, r5
 80135ea:	6123      	str	r3, [r4, #16]
 80135ec:	f8cd 8000 	str.w	r8, [sp]
 80135f0:	463b      	mov	r3, r7
 80135f2:	aa03      	add	r2, sp, #12
 80135f4:	4621      	mov	r1, r4
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7ff fef6 	bl	80133e8 <_printf_common>
 80135fc:	3001      	adds	r0, #1
 80135fe:	d14d      	bne.n	801369c <_printf_i+0x1c8>
 8013600:	f04f 30ff 	mov.w	r0, #4294967295
 8013604:	b005      	add	sp, #20
 8013606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801360a:	4839      	ldr	r0, [pc, #228]	; (80136f0 <_printf_i+0x21c>)
 801360c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013610:	6813      	ldr	r3, [r2, #0]
 8013612:	6821      	ldr	r1, [r4, #0]
 8013614:	1d1d      	adds	r5, r3, #4
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	6015      	str	r5, [r2, #0]
 801361a:	060a      	lsls	r2, r1, #24
 801361c:	d50b      	bpl.n	8013636 <_printf_i+0x162>
 801361e:	07ca      	lsls	r2, r1, #31
 8013620:	bf44      	itt	mi
 8013622:	f041 0120 	orrmi.w	r1, r1, #32
 8013626:	6021      	strmi	r1, [r4, #0]
 8013628:	b91b      	cbnz	r3, 8013632 <_printf_i+0x15e>
 801362a:	6822      	ldr	r2, [r4, #0]
 801362c:	f022 0220 	bic.w	r2, r2, #32
 8013630:	6022      	str	r2, [r4, #0]
 8013632:	2210      	movs	r2, #16
 8013634:	e7b7      	b.n	80135a6 <_printf_i+0xd2>
 8013636:	064d      	lsls	r5, r1, #25
 8013638:	bf48      	it	mi
 801363a:	b29b      	uxthmi	r3, r3
 801363c:	e7ef      	b.n	801361e <_printf_i+0x14a>
 801363e:	4665      	mov	r5, ip
 8013640:	fbb3 f1f2 	udiv	r1, r3, r2
 8013644:	fb02 3311 	mls	r3, r2, r1, r3
 8013648:	5cc3      	ldrb	r3, [r0, r3]
 801364a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801364e:	460b      	mov	r3, r1
 8013650:	2900      	cmp	r1, #0
 8013652:	d1f5      	bne.n	8013640 <_printf_i+0x16c>
 8013654:	e7b9      	b.n	80135ca <_printf_i+0xf6>
 8013656:	6813      	ldr	r3, [r2, #0]
 8013658:	6825      	ldr	r5, [r4, #0]
 801365a:	6961      	ldr	r1, [r4, #20]
 801365c:	1d18      	adds	r0, r3, #4
 801365e:	6010      	str	r0, [r2, #0]
 8013660:	0628      	lsls	r0, r5, #24
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	d501      	bpl.n	801366a <_printf_i+0x196>
 8013666:	6019      	str	r1, [r3, #0]
 8013668:	e002      	b.n	8013670 <_printf_i+0x19c>
 801366a:	066a      	lsls	r2, r5, #25
 801366c:	d5fb      	bpl.n	8013666 <_printf_i+0x192>
 801366e:	8019      	strh	r1, [r3, #0]
 8013670:	2300      	movs	r3, #0
 8013672:	6123      	str	r3, [r4, #16]
 8013674:	4665      	mov	r5, ip
 8013676:	e7b9      	b.n	80135ec <_printf_i+0x118>
 8013678:	6813      	ldr	r3, [r2, #0]
 801367a:	1d19      	adds	r1, r3, #4
 801367c:	6011      	str	r1, [r2, #0]
 801367e:	681d      	ldr	r5, [r3, #0]
 8013680:	6862      	ldr	r2, [r4, #4]
 8013682:	2100      	movs	r1, #0
 8013684:	4628      	mov	r0, r5
 8013686:	f7ec fdc3 	bl	8000210 <memchr>
 801368a:	b108      	cbz	r0, 8013690 <_printf_i+0x1bc>
 801368c:	1b40      	subs	r0, r0, r5
 801368e:	6060      	str	r0, [r4, #4]
 8013690:	6863      	ldr	r3, [r4, #4]
 8013692:	6123      	str	r3, [r4, #16]
 8013694:	2300      	movs	r3, #0
 8013696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801369a:	e7a7      	b.n	80135ec <_printf_i+0x118>
 801369c:	6923      	ldr	r3, [r4, #16]
 801369e:	462a      	mov	r2, r5
 80136a0:	4639      	mov	r1, r7
 80136a2:	4630      	mov	r0, r6
 80136a4:	47c0      	blx	r8
 80136a6:	3001      	adds	r0, #1
 80136a8:	d0aa      	beq.n	8013600 <_printf_i+0x12c>
 80136aa:	6823      	ldr	r3, [r4, #0]
 80136ac:	079b      	lsls	r3, r3, #30
 80136ae:	d413      	bmi.n	80136d8 <_printf_i+0x204>
 80136b0:	68e0      	ldr	r0, [r4, #12]
 80136b2:	9b03      	ldr	r3, [sp, #12]
 80136b4:	4298      	cmp	r0, r3
 80136b6:	bfb8      	it	lt
 80136b8:	4618      	movlt	r0, r3
 80136ba:	e7a3      	b.n	8013604 <_printf_i+0x130>
 80136bc:	2301      	movs	r3, #1
 80136be:	464a      	mov	r2, r9
 80136c0:	4639      	mov	r1, r7
 80136c2:	4630      	mov	r0, r6
 80136c4:	47c0      	blx	r8
 80136c6:	3001      	adds	r0, #1
 80136c8:	d09a      	beq.n	8013600 <_printf_i+0x12c>
 80136ca:	3501      	adds	r5, #1
 80136cc:	68e3      	ldr	r3, [r4, #12]
 80136ce:	9a03      	ldr	r2, [sp, #12]
 80136d0:	1a9b      	subs	r3, r3, r2
 80136d2:	42ab      	cmp	r3, r5
 80136d4:	dcf2      	bgt.n	80136bc <_printf_i+0x1e8>
 80136d6:	e7eb      	b.n	80136b0 <_printf_i+0x1dc>
 80136d8:	2500      	movs	r5, #0
 80136da:	f104 0919 	add.w	r9, r4, #25
 80136de:	e7f5      	b.n	80136cc <_printf_i+0x1f8>
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d1ac      	bne.n	801363e <_printf_i+0x16a>
 80136e4:	7803      	ldrb	r3, [r0, #0]
 80136e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136ee:	e76c      	b.n	80135ca <_printf_i+0xf6>
 80136f0:	08018454 	.word	0x08018454
 80136f4:	08018465 	.word	0x08018465

080136f8 <_scanf_float>:
 80136f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fc:	469a      	mov	sl, r3
 80136fe:	688b      	ldr	r3, [r1, #8]
 8013700:	4616      	mov	r6, r2
 8013702:	1e5a      	subs	r2, r3, #1
 8013704:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013708:	b087      	sub	sp, #28
 801370a:	bf83      	ittte	hi
 801370c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013710:	189b      	addhi	r3, r3, r2
 8013712:	9301      	strhi	r3, [sp, #4]
 8013714:	2300      	movls	r3, #0
 8013716:	bf86      	itte	hi
 8013718:	f240 135d 	movwhi	r3, #349	; 0x15d
 801371c:	608b      	strhi	r3, [r1, #8]
 801371e:	9301      	strls	r3, [sp, #4]
 8013720:	680b      	ldr	r3, [r1, #0]
 8013722:	4688      	mov	r8, r1
 8013724:	f04f 0b00 	mov.w	fp, #0
 8013728:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801372c:	f848 3b1c 	str.w	r3, [r8], #28
 8013730:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013734:	4607      	mov	r7, r0
 8013736:	460c      	mov	r4, r1
 8013738:	4645      	mov	r5, r8
 801373a:	465a      	mov	r2, fp
 801373c:	46d9      	mov	r9, fp
 801373e:	f8cd b008 	str.w	fp, [sp, #8]
 8013742:	68a1      	ldr	r1, [r4, #8]
 8013744:	b181      	cbz	r1, 8013768 <_scanf_float+0x70>
 8013746:	6833      	ldr	r3, [r6, #0]
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	2b49      	cmp	r3, #73	; 0x49
 801374c:	d071      	beq.n	8013832 <_scanf_float+0x13a>
 801374e:	d84d      	bhi.n	80137ec <_scanf_float+0xf4>
 8013750:	2b39      	cmp	r3, #57	; 0x39
 8013752:	d840      	bhi.n	80137d6 <_scanf_float+0xde>
 8013754:	2b31      	cmp	r3, #49	; 0x31
 8013756:	f080 8088 	bcs.w	801386a <_scanf_float+0x172>
 801375a:	2b2d      	cmp	r3, #45	; 0x2d
 801375c:	f000 8090 	beq.w	8013880 <_scanf_float+0x188>
 8013760:	d815      	bhi.n	801378e <_scanf_float+0x96>
 8013762:	2b2b      	cmp	r3, #43	; 0x2b
 8013764:	f000 808c 	beq.w	8013880 <_scanf_float+0x188>
 8013768:	f1b9 0f00 	cmp.w	r9, #0
 801376c:	d003      	beq.n	8013776 <_scanf_float+0x7e>
 801376e:	6823      	ldr	r3, [r4, #0]
 8013770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013774:	6023      	str	r3, [r4, #0]
 8013776:	3a01      	subs	r2, #1
 8013778:	2a01      	cmp	r2, #1
 801377a:	f200 80ea 	bhi.w	8013952 <_scanf_float+0x25a>
 801377e:	4545      	cmp	r5, r8
 8013780:	f200 80dc 	bhi.w	801393c <_scanf_float+0x244>
 8013784:	2601      	movs	r6, #1
 8013786:	4630      	mov	r0, r6
 8013788:	b007      	add	sp, #28
 801378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378e:	2b2e      	cmp	r3, #46	; 0x2e
 8013790:	f000 809f 	beq.w	80138d2 <_scanf_float+0x1da>
 8013794:	2b30      	cmp	r3, #48	; 0x30
 8013796:	d1e7      	bne.n	8013768 <_scanf_float+0x70>
 8013798:	6820      	ldr	r0, [r4, #0]
 801379a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801379e:	d064      	beq.n	801386a <_scanf_float+0x172>
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80137a6:	6020      	str	r0, [r4, #0]
 80137a8:	f109 0901 	add.w	r9, r9, #1
 80137ac:	b11b      	cbz	r3, 80137b6 <_scanf_float+0xbe>
 80137ae:	3b01      	subs	r3, #1
 80137b0:	3101      	adds	r1, #1
 80137b2:	9301      	str	r3, [sp, #4]
 80137b4:	60a1      	str	r1, [r4, #8]
 80137b6:	68a3      	ldr	r3, [r4, #8]
 80137b8:	3b01      	subs	r3, #1
 80137ba:	60a3      	str	r3, [r4, #8]
 80137bc:	6923      	ldr	r3, [r4, #16]
 80137be:	3301      	adds	r3, #1
 80137c0:	6123      	str	r3, [r4, #16]
 80137c2:	6873      	ldr	r3, [r6, #4]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	6073      	str	r3, [r6, #4]
 80137ca:	f340 80ac 	ble.w	8013926 <_scanf_float+0x22e>
 80137ce:	6833      	ldr	r3, [r6, #0]
 80137d0:	3301      	adds	r3, #1
 80137d2:	6033      	str	r3, [r6, #0]
 80137d4:	e7b5      	b.n	8013742 <_scanf_float+0x4a>
 80137d6:	2b45      	cmp	r3, #69	; 0x45
 80137d8:	f000 8085 	beq.w	80138e6 <_scanf_float+0x1ee>
 80137dc:	2b46      	cmp	r3, #70	; 0x46
 80137de:	d06a      	beq.n	80138b6 <_scanf_float+0x1be>
 80137e0:	2b41      	cmp	r3, #65	; 0x41
 80137e2:	d1c1      	bne.n	8013768 <_scanf_float+0x70>
 80137e4:	2a01      	cmp	r2, #1
 80137e6:	d1bf      	bne.n	8013768 <_scanf_float+0x70>
 80137e8:	2202      	movs	r2, #2
 80137ea:	e046      	b.n	801387a <_scanf_float+0x182>
 80137ec:	2b65      	cmp	r3, #101	; 0x65
 80137ee:	d07a      	beq.n	80138e6 <_scanf_float+0x1ee>
 80137f0:	d818      	bhi.n	8013824 <_scanf_float+0x12c>
 80137f2:	2b54      	cmp	r3, #84	; 0x54
 80137f4:	d066      	beq.n	80138c4 <_scanf_float+0x1cc>
 80137f6:	d811      	bhi.n	801381c <_scanf_float+0x124>
 80137f8:	2b4e      	cmp	r3, #78	; 0x4e
 80137fa:	d1b5      	bne.n	8013768 <_scanf_float+0x70>
 80137fc:	2a00      	cmp	r2, #0
 80137fe:	d146      	bne.n	801388e <_scanf_float+0x196>
 8013800:	f1b9 0f00 	cmp.w	r9, #0
 8013804:	d145      	bne.n	8013892 <_scanf_float+0x19a>
 8013806:	6821      	ldr	r1, [r4, #0]
 8013808:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801380c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013810:	d13f      	bne.n	8013892 <_scanf_float+0x19a>
 8013812:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013816:	6021      	str	r1, [r4, #0]
 8013818:	2201      	movs	r2, #1
 801381a:	e02e      	b.n	801387a <_scanf_float+0x182>
 801381c:	2b59      	cmp	r3, #89	; 0x59
 801381e:	d01e      	beq.n	801385e <_scanf_float+0x166>
 8013820:	2b61      	cmp	r3, #97	; 0x61
 8013822:	e7de      	b.n	80137e2 <_scanf_float+0xea>
 8013824:	2b6e      	cmp	r3, #110	; 0x6e
 8013826:	d0e9      	beq.n	80137fc <_scanf_float+0x104>
 8013828:	d815      	bhi.n	8013856 <_scanf_float+0x15e>
 801382a:	2b66      	cmp	r3, #102	; 0x66
 801382c:	d043      	beq.n	80138b6 <_scanf_float+0x1be>
 801382e:	2b69      	cmp	r3, #105	; 0x69
 8013830:	d19a      	bne.n	8013768 <_scanf_float+0x70>
 8013832:	f1bb 0f00 	cmp.w	fp, #0
 8013836:	d138      	bne.n	80138aa <_scanf_float+0x1b2>
 8013838:	f1b9 0f00 	cmp.w	r9, #0
 801383c:	d197      	bne.n	801376e <_scanf_float+0x76>
 801383e:	6821      	ldr	r1, [r4, #0]
 8013840:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013844:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013848:	d195      	bne.n	8013776 <_scanf_float+0x7e>
 801384a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801384e:	6021      	str	r1, [r4, #0]
 8013850:	f04f 0b01 	mov.w	fp, #1
 8013854:	e011      	b.n	801387a <_scanf_float+0x182>
 8013856:	2b74      	cmp	r3, #116	; 0x74
 8013858:	d034      	beq.n	80138c4 <_scanf_float+0x1cc>
 801385a:	2b79      	cmp	r3, #121	; 0x79
 801385c:	d184      	bne.n	8013768 <_scanf_float+0x70>
 801385e:	f1bb 0f07 	cmp.w	fp, #7
 8013862:	d181      	bne.n	8013768 <_scanf_float+0x70>
 8013864:	f04f 0b08 	mov.w	fp, #8
 8013868:	e007      	b.n	801387a <_scanf_float+0x182>
 801386a:	eb12 0f0b 	cmn.w	r2, fp
 801386e:	f47f af7b 	bne.w	8013768 <_scanf_float+0x70>
 8013872:	6821      	ldr	r1, [r4, #0]
 8013874:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013878:	6021      	str	r1, [r4, #0]
 801387a:	702b      	strb	r3, [r5, #0]
 801387c:	3501      	adds	r5, #1
 801387e:	e79a      	b.n	80137b6 <_scanf_float+0xbe>
 8013880:	6821      	ldr	r1, [r4, #0]
 8013882:	0608      	lsls	r0, r1, #24
 8013884:	f57f af70 	bpl.w	8013768 <_scanf_float+0x70>
 8013888:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801388c:	e7f4      	b.n	8013878 <_scanf_float+0x180>
 801388e:	2a02      	cmp	r2, #2
 8013890:	d047      	beq.n	8013922 <_scanf_float+0x22a>
 8013892:	f1bb 0f01 	cmp.w	fp, #1
 8013896:	d003      	beq.n	80138a0 <_scanf_float+0x1a8>
 8013898:	f1bb 0f04 	cmp.w	fp, #4
 801389c:	f47f af64 	bne.w	8013768 <_scanf_float+0x70>
 80138a0:	f10b 0b01 	add.w	fp, fp, #1
 80138a4:	fa5f fb8b 	uxtb.w	fp, fp
 80138a8:	e7e7      	b.n	801387a <_scanf_float+0x182>
 80138aa:	f1bb 0f03 	cmp.w	fp, #3
 80138ae:	d0f7      	beq.n	80138a0 <_scanf_float+0x1a8>
 80138b0:	f1bb 0f05 	cmp.w	fp, #5
 80138b4:	e7f2      	b.n	801389c <_scanf_float+0x1a4>
 80138b6:	f1bb 0f02 	cmp.w	fp, #2
 80138ba:	f47f af55 	bne.w	8013768 <_scanf_float+0x70>
 80138be:	f04f 0b03 	mov.w	fp, #3
 80138c2:	e7da      	b.n	801387a <_scanf_float+0x182>
 80138c4:	f1bb 0f06 	cmp.w	fp, #6
 80138c8:	f47f af4e 	bne.w	8013768 <_scanf_float+0x70>
 80138cc:	f04f 0b07 	mov.w	fp, #7
 80138d0:	e7d3      	b.n	801387a <_scanf_float+0x182>
 80138d2:	6821      	ldr	r1, [r4, #0]
 80138d4:	0588      	lsls	r0, r1, #22
 80138d6:	f57f af47 	bpl.w	8013768 <_scanf_float+0x70>
 80138da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80138de:	6021      	str	r1, [r4, #0]
 80138e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80138e4:	e7c9      	b.n	801387a <_scanf_float+0x182>
 80138e6:	6821      	ldr	r1, [r4, #0]
 80138e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80138ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80138f0:	d006      	beq.n	8013900 <_scanf_float+0x208>
 80138f2:	0548      	lsls	r0, r1, #21
 80138f4:	f57f af38 	bpl.w	8013768 <_scanf_float+0x70>
 80138f8:	f1b9 0f00 	cmp.w	r9, #0
 80138fc:	f43f af3b 	beq.w	8013776 <_scanf_float+0x7e>
 8013900:	0588      	lsls	r0, r1, #22
 8013902:	bf58      	it	pl
 8013904:	9802      	ldrpl	r0, [sp, #8]
 8013906:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801390a:	bf58      	it	pl
 801390c:	eba9 0000 	subpl.w	r0, r9, r0
 8013910:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013914:	bf58      	it	pl
 8013916:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801391a:	6021      	str	r1, [r4, #0]
 801391c:	f04f 0900 	mov.w	r9, #0
 8013920:	e7ab      	b.n	801387a <_scanf_float+0x182>
 8013922:	2203      	movs	r2, #3
 8013924:	e7a9      	b.n	801387a <_scanf_float+0x182>
 8013926:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801392a:	9205      	str	r2, [sp, #20]
 801392c:	4631      	mov	r1, r6
 801392e:	4638      	mov	r0, r7
 8013930:	4798      	blx	r3
 8013932:	9a05      	ldr	r2, [sp, #20]
 8013934:	2800      	cmp	r0, #0
 8013936:	f43f af04 	beq.w	8013742 <_scanf_float+0x4a>
 801393a:	e715      	b.n	8013768 <_scanf_float+0x70>
 801393c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013940:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013944:	4632      	mov	r2, r6
 8013946:	4638      	mov	r0, r7
 8013948:	4798      	blx	r3
 801394a:	6923      	ldr	r3, [r4, #16]
 801394c:	3b01      	subs	r3, #1
 801394e:	6123      	str	r3, [r4, #16]
 8013950:	e715      	b.n	801377e <_scanf_float+0x86>
 8013952:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013956:	2b06      	cmp	r3, #6
 8013958:	d80a      	bhi.n	8013970 <_scanf_float+0x278>
 801395a:	f1bb 0f02 	cmp.w	fp, #2
 801395e:	d968      	bls.n	8013a32 <_scanf_float+0x33a>
 8013960:	f1ab 0b03 	sub.w	fp, fp, #3
 8013964:	fa5f fb8b 	uxtb.w	fp, fp
 8013968:	eba5 0b0b 	sub.w	fp, r5, fp
 801396c:	455d      	cmp	r5, fp
 801396e:	d14b      	bne.n	8013a08 <_scanf_float+0x310>
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	05da      	lsls	r2, r3, #23
 8013974:	d51f      	bpl.n	80139b6 <_scanf_float+0x2be>
 8013976:	055b      	lsls	r3, r3, #21
 8013978:	d468      	bmi.n	8013a4c <_scanf_float+0x354>
 801397a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801397e:	6923      	ldr	r3, [r4, #16]
 8013980:	2965      	cmp	r1, #101	; 0x65
 8013982:	f103 33ff 	add.w	r3, r3, #4294967295
 8013986:	f105 3bff 	add.w	fp, r5, #4294967295
 801398a:	6123      	str	r3, [r4, #16]
 801398c:	d00d      	beq.n	80139aa <_scanf_float+0x2b2>
 801398e:	2945      	cmp	r1, #69	; 0x45
 8013990:	d00b      	beq.n	80139aa <_scanf_float+0x2b2>
 8013992:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013996:	4632      	mov	r2, r6
 8013998:	4638      	mov	r0, r7
 801399a:	4798      	blx	r3
 801399c:	6923      	ldr	r3, [r4, #16]
 801399e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80139a2:	3b01      	subs	r3, #1
 80139a4:	f1a5 0b02 	sub.w	fp, r5, #2
 80139a8:	6123      	str	r3, [r4, #16]
 80139aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139ae:	4632      	mov	r2, r6
 80139b0:	4638      	mov	r0, r7
 80139b2:	4798      	blx	r3
 80139b4:	465d      	mov	r5, fp
 80139b6:	6826      	ldr	r6, [r4, #0]
 80139b8:	f016 0610 	ands.w	r6, r6, #16
 80139bc:	d17a      	bne.n	8013ab4 <_scanf_float+0x3bc>
 80139be:	702e      	strb	r6, [r5, #0]
 80139c0:	6823      	ldr	r3, [r4, #0]
 80139c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80139c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139ca:	d142      	bne.n	8013a52 <_scanf_float+0x35a>
 80139cc:	9b02      	ldr	r3, [sp, #8]
 80139ce:	eba9 0303 	sub.w	r3, r9, r3
 80139d2:	425a      	negs	r2, r3
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d149      	bne.n	8013a6c <_scanf_float+0x374>
 80139d8:	2200      	movs	r2, #0
 80139da:	4641      	mov	r1, r8
 80139dc:	4638      	mov	r0, r7
 80139de:	f000 ffdf 	bl	80149a0 <_strtod_r>
 80139e2:	6825      	ldr	r5, [r4, #0]
 80139e4:	f8da 3000 	ldr.w	r3, [sl]
 80139e8:	f015 0f02 	tst.w	r5, #2
 80139ec:	f103 0204 	add.w	r2, r3, #4
 80139f0:	ec59 8b10 	vmov	r8, r9, d0
 80139f4:	f8ca 2000 	str.w	r2, [sl]
 80139f8:	d043      	beq.n	8013a82 <_scanf_float+0x38a>
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	e9c3 8900 	strd	r8, r9, [r3]
 8013a00:	68e3      	ldr	r3, [r4, #12]
 8013a02:	3301      	adds	r3, #1
 8013a04:	60e3      	str	r3, [r4, #12]
 8013a06:	e6be      	b.n	8013786 <_scanf_float+0x8e>
 8013a08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013a10:	4632      	mov	r2, r6
 8013a12:	4638      	mov	r0, r7
 8013a14:	4798      	blx	r3
 8013a16:	6923      	ldr	r3, [r4, #16]
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	6123      	str	r3, [r4, #16]
 8013a1c:	e7a6      	b.n	801396c <_scanf_float+0x274>
 8013a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a22:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013a26:	4632      	mov	r2, r6
 8013a28:	4638      	mov	r0, r7
 8013a2a:	4798      	blx	r3
 8013a2c:	6923      	ldr	r3, [r4, #16]
 8013a2e:	3b01      	subs	r3, #1
 8013a30:	6123      	str	r3, [r4, #16]
 8013a32:	4545      	cmp	r5, r8
 8013a34:	d8f3      	bhi.n	8013a1e <_scanf_float+0x326>
 8013a36:	e6a5      	b.n	8013784 <_scanf_float+0x8c>
 8013a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013a40:	4632      	mov	r2, r6
 8013a42:	4638      	mov	r0, r7
 8013a44:	4798      	blx	r3
 8013a46:	6923      	ldr	r3, [r4, #16]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	6123      	str	r3, [r4, #16]
 8013a4c:	4545      	cmp	r5, r8
 8013a4e:	d8f3      	bhi.n	8013a38 <_scanf_float+0x340>
 8013a50:	e698      	b.n	8013784 <_scanf_float+0x8c>
 8013a52:	9b03      	ldr	r3, [sp, #12]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d0bf      	beq.n	80139d8 <_scanf_float+0x2e0>
 8013a58:	9904      	ldr	r1, [sp, #16]
 8013a5a:	230a      	movs	r3, #10
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	3101      	adds	r1, #1
 8013a60:	4638      	mov	r0, r7
 8013a62:	f001 f829 	bl	8014ab8 <_strtol_r>
 8013a66:	9b03      	ldr	r3, [sp, #12]
 8013a68:	9d04      	ldr	r5, [sp, #16]
 8013a6a:	1ac2      	subs	r2, r0, r3
 8013a6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013a70:	429d      	cmp	r5, r3
 8013a72:	bf28      	it	cs
 8013a74:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013a78:	490f      	ldr	r1, [pc, #60]	; (8013ab8 <_scanf_float+0x3c0>)
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f000 f8e8 	bl	8013c50 <siprintf>
 8013a80:	e7aa      	b.n	80139d8 <_scanf_float+0x2e0>
 8013a82:	f015 0504 	ands.w	r5, r5, #4
 8013a86:	d1b8      	bne.n	80139fa <_scanf_float+0x302>
 8013a88:	681f      	ldr	r7, [r3, #0]
 8013a8a:	ee10 2a10 	vmov	r2, s0
 8013a8e:	464b      	mov	r3, r9
 8013a90:	ee10 0a10 	vmov	r0, s0
 8013a94:	4649      	mov	r1, r9
 8013a96:	f7ed f861 	bl	8000b5c <__aeabi_dcmpun>
 8013a9a:	b128      	cbz	r0, 8013aa8 <_scanf_float+0x3b0>
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f000 f89d 	bl	8013bdc <nanf>
 8013aa2:	ed87 0a00 	vstr	s0, [r7]
 8013aa6:	e7ab      	b.n	8013a00 <_scanf_float+0x308>
 8013aa8:	4640      	mov	r0, r8
 8013aaa:	4649      	mov	r1, r9
 8013aac:	f7ed f8b4 	bl	8000c18 <__aeabi_d2f>
 8013ab0:	6038      	str	r0, [r7, #0]
 8013ab2:	e7a5      	b.n	8013a00 <_scanf_float+0x308>
 8013ab4:	2600      	movs	r6, #0
 8013ab6:	e666      	b.n	8013786 <_scanf_float+0x8e>
 8013ab8:	08018476 	.word	0x08018476

08013abc <iprintf>:
 8013abc:	b40f      	push	{r0, r1, r2, r3}
 8013abe:	4b0a      	ldr	r3, [pc, #40]	; (8013ae8 <iprintf+0x2c>)
 8013ac0:	b513      	push	{r0, r1, r4, lr}
 8013ac2:	681c      	ldr	r4, [r3, #0]
 8013ac4:	b124      	cbz	r4, 8013ad0 <iprintf+0x14>
 8013ac6:	69a3      	ldr	r3, [r4, #24]
 8013ac8:	b913      	cbnz	r3, 8013ad0 <iprintf+0x14>
 8013aca:	4620      	mov	r0, r4
 8013acc:	f002 f83c 	bl	8015b48 <__sinit>
 8013ad0:	ab05      	add	r3, sp, #20
 8013ad2:	9a04      	ldr	r2, [sp, #16]
 8013ad4:	68a1      	ldr	r1, [r4, #8]
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f003 fc73 	bl	80173c4 <_vfiprintf_r>
 8013ade:	b002      	add	sp, #8
 8013ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ae4:	b004      	add	sp, #16
 8013ae6:	4770      	bx	lr
 8013ae8:	2000000c 	.word	0x2000000c

08013aec <putchar>:
 8013aec:	b538      	push	{r3, r4, r5, lr}
 8013aee:	4b08      	ldr	r3, [pc, #32]	; (8013b10 <putchar+0x24>)
 8013af0:	681c      	ldr	r4, [r3, #0]
 8013af2:	4605      	mov	r5, r0
 8013af4:	b124      	cbz	r4, 8013b00 <putchar+0x14>
 8013af6:	69a3      	ldr	r3, [r4, #24]
 8013af8:	b913      	cbnz	r3, 8013b00 <putchar+0x14>
 8013afa:	4620      	mov	r0, r4
 8013afc:	f002 f824 	bl	8015b48 <__sinit>
 8013b00:	68a2      	ldr	r2, [r4, #8]
 8013b02:	4629      	mov	r1, r5
 8013b04:	4620      	mov	r0, r4
 8013b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b0a:	f003 bec9 	b.w	80178a0 <_putc_r>
 8013b0e:	bf00      	nop
 8013b10:	2000000c 	.word	0x2000000c

08013b14 <_puts_r>:
 8013b14:	b570      	push	{r4, r5, r6, lr}
 8013b16:	460e      	mov	r6, r1
 8013b18:	4605      	mov	r5, r0
 8013b1a:	b118      	cbz	r0, 8013b24 <_puts_r+0x10>
 8013b1c:	6983      	ldr	r3, [r0, #24]
 8013b1e:	b90b      	cbnz	r3, 8013b24 <_puts_r+0x10>
 8013b20:	f002 f812 	bl	8015b48 <__sinit>
 8013b24:	69ab      	ldr	r3, [r5, #24]
 8013b26:	68ac      	ldr	r4, [r5, #8]
 8013b28:	b913      	cbnz	r3, 8013b30 <_puts_r+0x1c>
 8013b2a:	4628      	mov	r0, r5
 8013b2c:	f002 f80c 	bl	8015b48 <__sinit>
 8013b30:	4b23      	ldr	r3, [pc, #140]	; (8013bc0 <_puts_r+0xac>)
 8013b32:	429c      	cmp	r4, r3
 8013b34:	d117      	bne.n	8013b66 <_puts_r+0x52>
 8013b36:	686c      	ldr	r4, [r5, #4]
 8013b38:	89a3      	ldrh	r3, [r4, #12]
 8013b3a:	071b      	lsls	r3, r3, #28
 8013b3c:	d51d      	bpl.n	8013b7a <_puts_r+0x66>
 8013b3e:	6923      	ldr	r3, [r4, #16]
 8013b40:	b1db      	cbz	r3, 8013b7a <_puts_r+0x66>
 8013b42:	3e01      	subs	r6, #1
 8013b44:	68a3      	ldr	r3, [r4, #8]
 8013b46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	60a3      	str	r3, [r4, #8]
 8013b4e:	b9e9      	cbnz	r1, 8013b8c <_puts_r+0x78>
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	da2e      	bge.n	8013bb2 <_puts_r+0x9e>
 8013b54:	4622      	mov	r2, r4
 8013b56:	210a      	movs	r1, #10
 8013b58:	4628      	mov	r0, r5
 8013b5a:	f000 ffdf 	bl	8014b1c <__swbuf_r>
 8013b5e:	3001      	adds	r0, #1
 8013b60:	d011      	beq.n	8013b86 <_puts_r+0x72>
 8013b62:	200a      	movs	r0, #10
 8013b64:	e011      	b.n	8013b8a <_puts_r+0x76>
 8013b66:	4b17      	ldr	r3, [pc, #92]	; (8013bc4 <_puts_r+0xb0>)
 8013b68:	429c      	cmp	r4, r3
 8013b6a:	d101      	bne.n	8013b70 <_puts_r+0x5c>
 8013b6c:	68ac      	ldr	r4, [r5, #8]
 8013b6e:	e7e3      	b.n	8013b38 <_puts_r+0x24>
 8013b70:	4b15      	ldr	r3, [pc, #84]	; (8013bc8 <_puts_r+0xb4>)
 8013b72:	429c      	cmp	r4, r3
 8013b74:	bf08      	it	eq
 8013b76:	68ec      	ldreq	r4, [r5, #12]
 8013b78:	e7de      	b.n	8013b38 <_puts_r+0x24>
 8013b7a:	4621      	mov	r1, r4
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	f001 f831 	bl	8014be4 <__swsetup_r>
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d0dd      	beq.n	8013b42 <_puts_r+0x2e>
 8013b86:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8a:	bd70      	pop	{r4, r5, r6, pc}
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	da04      	bge.n	8013b9a <_puts_r+0x86>
 8013b90:	69a2      	ldr	r2, [r4, #24]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	dc06      	bgt.n	8013ba4 <_puts_r+0x90>
 8013b96:	290a      	cmp	r1, #10
 8013b98:	d004      	beq.n	8013ba4 <_puts_r+0x90>
 8013b9a:	6823      	ldr	r3, [r4, #0]
 8013b9c:	1c5a      	adds	r2, r3, #1
 8013b9e:	6022      	str	r2, [r4, #0]
 8013ba0:	7019      	strb	r1, [r3, #0]
 8013ba2:	e7cf      	b.n	8013b44 <_puts_r+0x30>
 8013ba4:	4622      	mov	r2, r4
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f000 ffb8 	bl	8014b1c <__swbuf_r>
 8013bac:	3001      	adds	r0, #1
 8013bae:	d1c9      	bne.n	8013b44 <_puts_r+0x30>
 8013bb0:	e7e9      	b.n	8013b86 <_puts_r+0x72>
 8013bb2:	6823      	ldr	r3, [r4, #0]
 8013bb4:	200a      	movs	r0, #10
 8013bb6:	1c5a      	adds	r2, r3, #1
 8013bb8:	6022      	str	r2, [r4, #0]
 8013bba:	7018      	strb	r0, [r3, #0]
 8013bbc:	e7e5      	b.n	8013b8a <_puts_r+0x76>
 8013bbe:	bf00      	nop
 8013bc0:	08018500 	.word	0x08018500
 8013bc4:	08018520 	.word	0x08018520
 8013bc8:	080184e0 	.word	0x080184e0

08013bcc <puts>:
 8013bcc:	4b02      	ldr	r3, [pc, #8]	; (8013bd8 <puts+0xc>)
 8013bce:	4601      	mov	r1, r0
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	f7ff bf9f 	b.w	8013b14 <_puts_r>
 8013bd6:	bf00      	nop
 8013bd8:	2000000c 	.word	0x2000000c

08013bdc <nanf>:
 8013bdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013be4 <nanf+0x8>
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	7fc00000 	.word	0x7fc00000

08013be8 <sniprintf>:
 8013be8:	b40c      	push	{r2, r3}
 8013bea:	b530      	push	{r4, r5, lr}
 8013bec:	4b17      	ldr	r3, [pc, #92]	; (8013c4c <sniprintf+0x64>)
 8013bee:	1e0c      	subs	r4, r1, #0
 8013bf0:	b09d      	sub	sp, #116	; 0x74
 8013bf2:	681d      	ldr	r5, [r3, #0]
 8013bf4:	da08      	bge.n	8013c08 <sniprintf+0x20>
 8013bf6:	238b      	movs	r3, #139	; 0x8b
 8013bf8:	602b      	str	r3, [r5, #0]
 8013bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8013bfe:	b01d      	add	sp, #116	; 0x74
 8013c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c04:	b002      	add	sp, #8
 8013c06:	4770      	bx	lr
 8013c08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c10:	bf14      	ite	ne
 8013c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013c16:	4623      	moveq	r3, r4
 8013c18:	9304      	str	r3, [sp, #16]
 8013c1a:	9307      	str	r3, [sp, #28]
 8013c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c20:	9002      	str	r0, [sp, #8]
 8013c22:	9006      	str	r0, [sp, #24]
 8013c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013c28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013c2a:	ab21      	add	r3, sp, #132	; 0x84
 8013c2c:	a902      	add	r1, sp, #8
 8013c2e:	4628      	mov	r0, r5
 8013c30:	9301      	str	r3, [sp, #4]
 8013c32:	f003 f8fb 	bl	8016e2c <_svfiprintf_r>
 8013c36:	1c43      	adds	r3, r0, #1
 8013c38:	bfbc      	itt	lt
 8013c3a:	238b      	movlt	r3, #139	; 0x8b
 8013c3c:	602b      	strlt	r3, [r5, #0]
 8013c3e:	2c00      	cmp	r4, #0
 8013c40:	d0dd      	beq.n	8013bfe <sniprintf+0x16>
 8013c42:	9b02      	ldr	r3, [sp, #8]
 8013c44:	2200      	movs	r2, #0
 8013c46:	701a      	strb	r2, [r3, #0]
 8013c48:	e7d9      	b.n	8013bfe <sniprintf+0x16>
 8013c4a:	bf00      	nop
 8013c4c:	2000000c 	.word	0x2000000c

08013c50 <siprintf>:
 8013c50:	b40e      	push	{r1, r2, r3}
 8013c52:	b500      	push	{lr}
 8013c54:	b09c      	sub	sp, #112	; 0x70
 8013c56:	ab1d      	add	r3, sp, #116	; 0x74
 8013c58:	9002      	str	r0, [sp, #8]
 8013c5a:	9006      	str	r0, [sp, #24]
 8013c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013c60:	4809      	ldr	r0, [pc, #36]	; (8013c88 <siprintf+0x38>)
 8013c62:	9107      	str	r1, [sp, #28]
 8013c64:	9104      	str	r1, [sp, #16]
 8013c66:	4909      	ldr	r1, [pc, #36]	; (8013c8c <siprintf+0x3c>)
 8013c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c6c:	9105      	str	r1, [sp, #20]
 8013c6e:	6800      	ldr	r0, [r0, #0]
 8013c70:	9301      	str	r3, [sp, #4]
 8013c72:	a902      	add	r1, sp, #8
 8013c74:	f003 f8da 	bl	8016e2c <_svfiprintf_r>
 8013c78:	9b02      	ldr	r3, [sp, #8]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	701a      	strb	r2, [r3, #0]
 8013c7e:	b01c      	add	sp, #112	; 0x70
 8013c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c84:	b003      	add	sp, #12
 8013c86:	4770      	bx	lr
 8013c88:	2000000c 	.word	0x2000000c
 8013c8c:	ffff0208 	.word	0xffff0208

08013c90 <siscanf>:
 8013c90:	b40e      	push	{r1, r2, r3}
 8013c92:	b530      	push	{r4, r5, lr}
 8013c94:	b09c      	sub	sp, #112	; 0x70
 8013c96:	ac1f      	add	r4, sp, #124	; 0x7c
 8013c98:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013c9c:	f854 5b04 	ldr.w	r5, [r4], #4
 8013ca0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013ca4:	9002      	str	r0, [sp, #8]
 8013ca6:	9006      	str	r0, [sp, #24]
 8013ca8:	f7ec faaa 	bl	8000200 <strlen>
 8013cac:	4b0b      	ldr	r3, [pc, #44]	; (8013cdc <siscanf+0x4c>)
 8013cae:	9003      	str	r0, [sp, #12]
 8013cb0:	9007      	str	r0, [sp, #28]
 8013cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cb4:	480a      	ldr	r0, [pc, #40]	; (8013ce0 <siscanf+0x50>)
 8013cb6:	9401      	str	r4, [sp, #4]
 8013cb8:	2300      	movs	r3, #0
 8013cba:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cbc:	9314      	str	r3, [sp, #80]	; 0x50
 8013cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013cc6:	462a      	mov	r2, r5
 8013cc8:	4623      	mov	r3, r4
 8013cca:	a902      	add	r1, sp, #8
 8013ccc:	6800      	ldr	r0, [r0, #0]
 8013cce:	f003 f9ff 	bl	80170d0 <__ssvfiscanf_r>
 8013cd2:	b01c      	add	sp, #112	; 0x70
 8013cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cd8:	b003      	add	sp, #12
 8013cda:	4770      	bx	lr
 8013cdc:	08013d07 	.word	0x08013d07
 8013ce0:	2000000c 	.word	0x2000000c

08013ce4 <__sread>:
 8013ce4:	b510      	push	{r4, lr}
 8013ce6:	460c      	mov	r4, r1
 8013ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cec:	f003 fe0e 	bl	801790c <_read_r>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	bfab      	itete	ge
 8013cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8013cf8:	181b      	addge	r3, r3, r0
 8013cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013cfe:	bfac      	ite	ge
 8013d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d02:	81a3      	strhlt	r3, [r4, #12]
 8013d04:	bd10      	pop	{r4, pc}

08013d06 <__seofread>:
 8013d06:	2000      	movs	r0, #0
 8013d08:	4770      	bx	lr

08013d0a <__swrite>:
 8013d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0e:	461f      	mov	r7, r3
 8013d10:	898b      	ldrh	r3, [r1, #12]
 8013d12:	05db      	lsls	r3, r3, #23
 8013d14:	4605      	mov	r5, r0
 8013d16:	460c      	mov	r4, r1
 8013d18:	4616      	mov	r6, r2
 8013d1a:	d505      	bpl.n	8013d28 <__swrite+0x1e>
 8013d1c:	2302      	movs	r3, #2
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d24:	f002 fae2 	bl	80162ec <_lseek_r>
 8013d28:	89a3      	ldrh	r3, [r4, #12]
 8013d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d32:	81a3      	strh	r3, [r4, #12]
 8013d34:	4632      	mov	r2, r6
 8013d36:	463b      	mov	r3, r7
 8013d38:	4628      	mov	r0, r5
 8013d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3e:	f000 bf3f 	b.w	8014bc0 <_write_r>

08013d42 <__sseek>:
 8013d42:	b510      	push	{r4, lr}
 8013d44:	460c      	mov	r4, r1
 8013d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4a:	f002 facf 	bl	80162ec <_lseek_r>
 8013d4e:	1c43      	adds	r3, r0, #1
 8013d50:	89a3      	ldrh	r3, [r4, #12]
 8013d52:	bf15      	itete	ne
 8013d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d5e:	81a3      	strheq	r3, [r4, #12]
 8013d60:	bf18      	it	ne
 8013d62:	81a3      	strhne	r3, [r4, #12]
 8013d64:	bd10      	pop	{r4, pc}

08013d66 <__sclose>:
 8013d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d6a:	f000 bfa9 	b.w	8014cc0 <_close_r>

08013d6e <strcpy>:
 8013d6e:	4603      	mov	r3, r0
 8013d70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d74:	f803 2b01 	strb.w	r2, [r3], #1
 8013d78:	2a00      	cmp	r2, #0
 8013d7a:	d1f9      	bne.n	8013d70 <strcpy+0x2>
 8013d7c:	4770      	bx	lr

08013d7e <sulp>:
 8013d7e:	b570      	push	{r4, r5, r6, lr}
 8013d80:	4604      	mov	r4, r0
 8013d82:	460d      	mov	r5, r1
 8013d84:	ec45 4b10 	vmov	d0, r4, r5
 8013d88:	4616      	mov	r6, r2
 8013d8a:	f002 fe0b 	bl	80169a4 <__ulp>
 8013d8e:	ec51 0b10 	vmov	r0, r1, d0
 8013d92:	b17e      	cbz	r6, 8013db4 <sulp+0x36>
 8013d94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013d98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	dd09      	ble.n	8013db4 <sulp+0x36>
 8013da0:	051b      	lsls	r3, r3, #20
 8013da2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013da6:	2400      	movs	r4, #0
 8013da8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013dac:	4622      	mov	r2, r4
 8013dae:	462b      	mov	r3, r5
 8013db0:	f7ec fc3a 	bl	8000628 <__aeabi_dmul>
 8013db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013db8 <_strtod_l>:
 8013db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dbc:	461f      	mov	r7, r3
 8013dbe:	b0a1      	sub	sp, #132	; 0x84
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	4681      	mov	r9, r0
 8013dc4:	4638      	mov	r0, r7
 8013dc6:	460e      	mov	r6, r1
 8013dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8013dca:	931c      	str	r3, [sp, #112]	; 0x70
 8013dcc:	f002 fa7e 	bl	80162cc <__localeconv_l>
 8013dd0:	4680      	mov	r8, r0
 8013dd2:	6800      	ldr	r0, [r0, #0]
 8013dd4:	f7ec fa14 	bl	8000200 <strlen>
 8013dd8:	f04f 0a00 	mov.w	sl, #0
 8013ddc:	4604      	mov	r4, r0
 8013dde:	f04f 0b00 	mov.w	fp, #0
 8013de2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013de6:	781a      	ldrb	r2, [r3, #0]
 8013de8:	2a0d      	cmp	r2, #13
 8013dea:	d832      	bhi.n	8013e52 <_strtod_l+0x9a>
 8013dec:	2a09      	cmp	r2, #9
 8013dee:	d236      	bcs.n	8013e5e <_strtod_l+0xa6>
 8013df0:	2a00      	cmp	r2, #0
 8013df2:	d03e      	beq.n	8013e72 <_strtod_l+0xba>
 8013df4:	2300      	movs	r3, #0
 8013df6:	930d      	str	r3, [sp, #52]	; 0x34
 8013df8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013dfa:	782b      	ldrb	r3, [r5, #0]
 8013dfc:	2b30      	cmp	r3, #48	; 0x30
 8013dfe:	f040 80ac 	bne.w	8013f5a <_strtod_l+0x1a2>
 8013e02:	786b      	ldrb	r3, [r5, #1]
 8013e04:	2b58      	cmp	r3, #88	; 0x58
 8013e06:	d001      	beq.n	8013e0c <_strtod_l+0x54>
 8013e08:	2b78      	cmp	r3, #120	; 0x78
 8013e0a:	d167      	bne.n	8013edc <_strtod_l+0x124>
 8013e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e0e:	9301      	str	r3, [sp, #4]
 8013e10:	ab1c      	add	r3, sp, #112	; 0x70
 8013e12:	9300      	str	r3, [sp, #0]
 8013e14:	9702      	str	r7, [sp, #8]
 8013e16:	ab1d      	add	r3, sp, #116	; 0x74
 8013e18:	4a88      	ldr	r2, [pc, #544]	; (801403c <_strtod_l+0x284>)
 8013e1a:	a91b      	add	r1, sp, #108	; 0x6c
 8013e1c:	4648      	mov	r0, r9
 8013e1e:	f001 ff6c 	bl	8015cfa <__gethex>
 8013e22:	f010 0407 	ands.w	r4, r0, #7
 8013e26:	4606      	mov	r6, r0
 8013e28:	d005      	beq.n	8013e36 <_strtod_l+0x7e>
 8013e2a:	2c06      	cmp	r4, #6
 8013e2c:	d12b      	bne.n	8013e86 <_strtod_l+0xce>
 8013e2e:	3501      	adds	r5, #1
 8013e30:	2300      	movs	r3, #0
 8013e32:	951b      	str	r5, [sp, #108]	; 0x6c
 8013e34:	930d      	str	r3, [sp, #52]	; 0x34
 8013e36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f040 859a 	bne.w	8014972 <_strtod_l+0xbba>
 8013e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e40:	b1e3      	cbz	r3, 8013e7c <_strtod_l+0xc4>
 8013e42:	4652      	mov	r2, sl
 8013e44:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013e48:	ec43 2b10 	vmov	d0, r2, r3
 8013e4c:	b021      	add	sp, #132	; 0x84
 8013e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e52:	2a2b      	cmp	r2, #43	; 0x2b
 8013e54:	d015      	beq.n	8013e82 <_strtod_l+0xca>
 8013e56:	2a2d      	cmp	r2, #45	; 0x2d
 8013e58:	d004      	beq.n	8013e64 <_strtod_l+0xac>
 8013e5a:	2a20      	cmp	r2, #32
 8013e5c:	d1ca      	bne.n	8013df4 <_strtod_l+0x3c>
 8013e5e:	3301      	adds	r3, #1
 8013e60:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e62:	e7bf      	b.n	8013de4 <_strtod_l+0x2c>
 8013e64:	2201      	movs	r2, #1
 8013e66:	920d      	str	r2, [sp, #52]	; 0x34
 8013e68:	1c5a      	adds	r2, r3, #1
 8013e6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8013e6c:	785b      	ldrb	r3, [r3, #1]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d1c2      	bne.n	8013df8 <_strtod_l+0x40>
 8013e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e74:	961b      	str	r6, [sp, #108]	; 0x6c
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f040 8579 	bne.w	801496e <_strtod_l+0xbb6>
 8013e7c:	4652      	mov	r2, sl
 8013e7e:	465b      	mov	r3, fp
 8013e80:	e7e2      	b.n	8013e48 <_strtod_l+0x90>
 8013e82:	2200      	movs	r2, #0
 8013e84:	e7ef      	b.n	8013e66 <_strtod_l+0xae>
 8013e86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e88:	b13a      	cbz	r2, 8013e9a <_strtod_l+0xe2>
 8013e8a:	2135      	movs	r1, #53	; 0x35
 8013e8c:	a81e      	add	r0, sp, #120	; 0x78
 8013e8e:	f002 fe81 	bl	8016b94 <__copybits>
 8013e92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e94:	4648      	mov	r0, r9
 8013e96:	f002 faed 	bl	8016474 <_Bfree>
 8013e9a:	3c01      	subs	r4, #1
 8013e9c:	2c04      	cmp	r4, #4
 8013e9e:	d806      	bhi.n	8013eae <_strtod_l+0xf6>
 8013ea0:	e8df f004 	tbb	[pc, r4]
 8013ea4:	1714030a 	.word	0x1714030a
 8013ea8:	0a          	.byte	0x0a
 8013ea9:	00          	.byte	0x00
 8013eaa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013eae:	0730      	lsls	r0, r6, #28
 8013eb0:	d5c1      	bpl.n	8013e36 <_strtod_l+0x7e>
 8013eb2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013eb6:	e7be      	b.n	8013e36 <_strtod_l+0x7e>
 8013eb8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013ebc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013ebe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013ec2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013ec6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013eca:	e7f0      	b.n	8013eae <_strtod_l+0xf6>
 8013ecc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014040 <_strtod_l+0x288>
 8013ed0:	e7ed      	b.n	8013eae <_strtod_l+0xf6>
 8013ed2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013ed6:	f04f 3aff 	mov.w	sl, #4294967295
 8013eda:	e7e8      	b.n	8013eae <_strtod_l+0xf6>
 8013edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ede:	1c5a      	adds	r2, r3, #1
 8013ee0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013ee2:	785b      	ldrb	r3, [r3, #1]
 8013ee4:	2b30      	cmp	r3, #48	; 0x30
 8013ee6:	d0f9      	beq.n	8013edc <_strtod_l+0x124>
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d0a4      	beq.n	8013e36 <_strtod_l+0x7e>
 8013eec:	2301      	movs	r3, #1
 8013eee:	2500      	movs	r5, #0
 8013ef0:	9306      	str	r3, [sp, #24]
 8013ef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ef4:	9308      	str	r3, [sp, #32]
 8013ef6:	9507      	str	r5, [sp, #28]
 8013ef8:	9505      	str	r5, [sp, #20]
 8013efa:	220a      	movs	r2, #10
 8013efc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013efe:	7807      	ldrb	r7, [r0, #0]
 8013f00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013f04:	b2d9      	uxtb	r1, r3
 8013f06:	2909      	cmp	r1, #9
 8013f08:	d929      	bls.n	8013f5e <_strtod_l+0x1a6>
 8013f0a:	4622      	mov	r2, r4
 8013f0c:	f8d8 1000 	ldr.w	r1, [r8]
 8013f10:	f003 fd50 	bl	80179b4 <strncmp>
 8013f14:	2800      	cmp	r0, #0
 8013f16:	d031      	beq.n	8013f7c <_strtod_l+0x1c4>
 8013f18:	2000      	movs	r0, #0
 8013f1a:	9c05      	ldr	r4, [sp, #20]
 8013f1c:	9004      	str	r0, [sp, #16]
 8013f1e:	463b      	mov	r3, r7
 8013f20:	4602      	mov	r2, r0
 8013f22:	2b65      	cmp	r3, #101	; 0x65
 8013f24:	d001      	beq.n	8013f2a <_strtod_l+0x172>
 8013f26:	2b45      	cmp	r3, #69	; 0x45
 8013f28:	d114      	bne.n	8013f54 <_strtod_l+0x19c>
 8013f2a:	b924      	cbnz	r4, 8013f36 <_strtod_l+0x17e>
 8013f2c:	b910      	cbnz	r0, 8013f34 <_strtod_l+0x17c>
 8013f2e:	9b06      	ldr	r3, [sp, #24]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d09e      	beq.n	8013e72 <_strtod_l+0xba>
 8013f34:	2400      	movs	r4, #0
 8013f36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013f38:	1c73      	adds	r3, r6, #1
 8013f3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013f3c:	7873      	ldrb	r3, [r6, #1]
 8013f3e:	2b2b      	cmp	r3, #43	; 0x2b
 8013f40:	d078      	beq.n	8014034 <_strtod_l+0x27c>
 8013f42:	2b2d      	cmp	r3, #45	; 0x2d
 8013f44:	d070      	beq.n	8014028 <_strtod_l+0x270>
 8013f46:	f04f 0c00 	mov.w	ip, #0
 8013f4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013f4e:	2f09      	cmp	r7, #9
 8013f50:	d97c      	bls.n	801404c <_strtod_l+0x294>
 8013f52:	961b      	str	r6, [sp, #108]	; 0x6c
 8013f54:	f04f 0e00 	mov.w	lr, #0
 8013f58:	e09a      	b.n	8014090 <_strtod_l+0x2d8>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	e7c7      	b.n	8013eee <_strtod_l+0x136>
 8013f5e:	9905      	ldr	r1, [sp, #20]
 8013f60:	2908      	cmp	r1, #8
 8013f62:	bfdd      	ittte	le
 8013f64:	9907      	ldrle	r1, [sp, #28]
 8013f66:	fb02 3301 	mlale	r3, r2, r1, r3
 8013f6a:	9307      	strle	r3, [sp, #28]
 8013f6c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013f70:	9b05      	ldr	r3, [sp, #20]
 8013f72:	3001      	adds	r0, #1
 8013f74:	3301      	adds	r3, #1
 8013f76:	9305      	str	r3, [sp, #20]
 8013f78:	901b      	str	r0, [sp, #108]	; 0x6c
 8013f7a:	e7bf      	b.n	8013efc <_strtod_l+0x144>
 8013f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f7e:	191a      	adds	r2, r3, r4
 8013f80:	921b      	str	r2, [sp, #108]	; 0x6c
 8013f82:	9a05      	ldr	r2, [sp, #20]
 8013f84:	5d1b      	ldrb	r3, [r3, r4]
 8013f86:	2a00      	cmp	r2, #0
 8013f88:	d037      	beq.n	8013ffa <_strtod_l+0x242>
 8013f8a:	9c05      	ldr	r4, [sp, #20]
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013f92:	2909      	cmp	r1, #9
 8013f94:	d913      	bls.n	8013fbe <_strtod_l+0x206>
 8013f96:	2101      	movs	r1, #1
 8013f98:	9104      	str	r1, [sp, #16]
 8013f9a:	e7c2      	b.n	8013f22 <_strtod_l+0x16a>
 8013f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f9e:	1c5a      	adds	r2, r3, #1
 8013fa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013fa2:	785b      	ldrb	r3, [r3, #1]
 8013fa4:	3001      	adds	r0, #1
 8013fa6:	2b30      	cmp	r3, #48	; 0x30
 8013fa8:	d0f8      	beq.n	8013f9c <_strtod_l+0x1e4>
 8013faa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013fae:	2a08      	cmp	r2, #8
 8013fb0:	f200 84e4 	bhi.w	801497c <_strtod_l+0xbc4>
 8013fb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013fb6:	9208      	str	r2, [sp, #32]
 8013fb8:	4602      	mov	r2, r0
 8013fba:	2000      	movs	r0, #0
 8013fbc:	4604      	mov	r4, r0
 8013fbe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013fc2:	f100 0101 	add.w	r1, r0, #1
 8013fc6:	d012      	beq.n	8013fee <_strtod_l+0x236>
 8013fc8:	440a      	add	r2, r1
 8013fca:	eb00 0c04 	add.w	ip, r0, r4
 8013fce:	4621      	mov	r1, r4
 8013fd0:	270a      	movs	r7, #10
 8013fd2:	458c      	cmp	ip, r1
 8013fd4:	d113      	bne.n	8013ffe <_strtod_l+0x246>
 8013fd6:	1821      	adds	r1, r4, r0
 8013fd8:	2908      	cmp	r1, #8
 8013fda:	f104 0401 	add.w	r4, r4, #1
 8013fde:	4404      	add	r4, r0
 8013fe0:	dc19      	bgt.n	8014016 <_strtod_l+0x25e>
 8013fe2:	9b07      	ldr	r3, [sp, #28]
 8013fe4:	210a      	movs	r1, #10
 8013fe6:	fb01 e303 	mla	r3, r1, r3, lr
 8013fea:	9307      	str	r3, [sp, #28]
 8013fec:	2100      	movs	r1, #0
 8013fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ff0:	1c58      	adds	r0, r3, #1
 8013ff2:	901b      	str	r0, [sp, #108]	; 0x6c
 8013ff4:	785b      	ldrb	r3, [r3, #1]
 8013ff6:	4608      	mov	r0, r1
 8013ff8:	e7c9      	b.n	8013f8e <_strtod_l+0x1d6>
 8013ffa:	9805      	ldr	r0, [sp, #20]
 8013ffc:	e7d3      	b.n	8013fa6 <_strtod_l+0x1ee>
 8013ffe:	2908      	cmp	r1, #8
 8014000:	f101 0101 	add.w	r1, r1, #1
 8014004:	dc03      	bgt.n	801400e <_strtod_l+0x256>
 8014006:	9b07      	ldr	r3, [sp, #28]
 8014008:	437b      	muls	r3, r7
 801400a:	9307      	str	r3, [sp, #28]
 801400c:	e7e1      	b.n	8013fd2 <_strtod_l+0x21a>
 801400e:	2910      	cmp	r1, #16
 8014010:	bfd8      	it	le
 8014012:	437d      	mulle	r5, r7
 8014014:	e7dd      	b.n	8013fd2 <_strtod_l+0x21a>
 8014016:	2c10      	cmp	r4, #16
 8014018:	bfdc      	itt	le
 801401a:	210a      	movle	r1, #10
 801401c:	fb01 e505 	mlale	r5, r1, r5, lr
 8014020:	e7e4      	b.n	8013fec <_strtod_l+0x234>
 8014022:	2301      	movs	r3, #1
 8014024:	9304      	str	r3, [sp, #16]
 8014026:	e781      	b.n	8013f2c <_strtod_l+0x174>
 8014028:	f04f 0c01 	mov.w	ip, #1
 801402c:	1cb3      	adds	r3, r6, #2
 801402e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014030:	78b3      	ldrb	r3, [r6, #2]
 8014032:	e78a      	b.n	8013f4a <_strtod_l+0x192>
 8014034:	f04f 0c00 	mov.w	ip, #0
 8014038:	e7f8      	b.n	801402c <_strtod_l+0x274>
 801403a:	bf00      	nop
 801403c:	0801847c 	.word	0x0801847c
 8014040:	7ff00000 	.word	0x7ff00000
 8014044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014046:	1c5f      	adds	r7, r3, #1
 8014048:	971b      	str	r7, [sp, #108]	; 0x6c
 801404a:	785b      	ldrb	r3, [r3, #1]
 801404c:	2b30      	cmp	r3, #48	; 0x30
 801404e:	d0f9      	beq.n	8014044 <_strtod_l+0x28c>
 8014050:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014054:	2f08      	cmp	r7, #8
 8014056:	f63f af7d 	bhi.w	8013f54 <_strtod_l+0x19c>
 801405a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801405e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014060:	930a      	str	r3, [sp, #40]	; 0x28
 8014062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014064:	1c5f      	adds	r7, r3, #1
 8014066:	971b      	str	r7, [sp, #108]	; 0x6c
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801406e:	f1b8 0f09 	cmp.w	r8, #9
 8014072:	d937      	bls.n	80140e4 <_strtod_l+0x32c>
 8014074:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014076:	1a7f      	subs	r7, r7, r1
 8014078:	2f08      	cmp	r7, #8
 801407a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801407e:	dc37      	bgt.n	80140f0 <_strtod_l+0x338>
 8014080:	45be      	cmp	lr, r7
 8014082:	bfa8      	it	ge
 8014084:	46be      	movge	lr, r7
 8014086:	f1bc 0f00 	cmp.w	ip, #0
 801408a:	d001      	beq.n	8014090 <_strtod_l+0x2d8>
 801408c:	f1ce 0e00 	rsb	lr, lr, #0
 8014090:	2c00      	cmp	r4, #0
 8014092:	d151      	bne.n	8014138 <_strtod_l+0x380>
 8014094:	2800      	cmp	r0, #0
 8014096:	f47f aece 	bne.w	8013e36 <_strtod_l+0x7e>
 801409a:	9a06      	ldr	r2, [sp, #24]
 801409c:	2a00      	cmp	r2, #0
 801409e:	f47f aeca 	bne.w	8013e36 <_strtod_l+0x7e>
 80140a2:	9a04      	ldr	r2, [sp, #16]
 80140a4:	2a00      	cmp	r2, #0
 80140a6:	f47f aee4 	bne.w	8013e72 <_strtod_l+0xba>
 80140aa:	2b4e      	cmp	r3, #78	; 0x4e
 80140ac:	d027      	beq.n	80140fe <_strtod_l+0x346>
 80140ae:	dc21      	bgt.n	80140f4 <_strtod_l+0x33c>
 80140b0:	2b49      	cmp	r3, #73	; 0x49
 80140b2:	f47f aede 	bne.w	8013e72 <_strtod_l+0xba>
 80140b6:	49a0      	ldr	r1, [pc, #640]	; (8014338 <_strtod_l+0x580>)
 80140b8:	a81b      	add	r0, sp, #108	; 0x6c
 80140ba:	f002 f851 	bl	8016160 <__match>
 80140be:	2800      	cmp	r0, #0
 80140c0:	f43f aed7 	beq.w	8013e72 <_strtod_l+0xba>
 80140c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80140c6:	499d      	ldr	r1, [pc, #628]	; (801433c <_strtod_l+0x584>)
 80140c8:	3b01      	subs	r3, #1
 80140ca:	a81b      	add	r0, sp, #108	; 0x6c
 80140cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80140ce:	f002 f847 	bl	8016160 <__match>
 80140d2:	b910      	cbnz	r0, 80140da <_strtod_l+0x322>
 80140d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80140d6:	3301      	adds	r3, #1
 80140d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80140da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014350 <_strtod_l+0x598>
 80140de:	f04f 0a00 	mov.w	sl, #0
 80140e2:	e6a8      	b.n	8013e36 <_strtod_l+0x7e>
 80140e4:	210a      	movs	r1, #10
 80140e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80140ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80140ee:	e7b8      	b.n	8014062 <_strtod_l+0x2aa>
 80140f0:	46be      	mov	lr, r7
 80140f2:	e7c8      	b.n	8014086 <_strtod_l+0x2ce>
 80140f4:	2b69      	cmp	r3, #105	; 0x69
 80140f6:	d0de      	beq.n	80140b6 <_strtod_l+0x2fe>
 80140f8:	2b6e      	cmp	r3, #110	; 0x6e
 80140fa:	f47f aeba 	bne.w	8013e72 <_strtod_l+0xba>
 80140fe:	4990      	ldr	r1, [pc, #576]	; (8014340 <_strtod_l+0x588>)
 8014100:	a81b      	add	r0, sp, #108	; 0x6c
 8014102:	f002 f82d 	bl	8016160 <__match>
 8014106:	2800      	cmp	r0, #0
 8014108:	f43f aeb3 	beq.w	8013e72 <_strtod_l+0xba>
 801410c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	2b28      	cmp	r3, #40	; 0x28
 8014112:	d10e      	bne.n	8014132 <_strtod_l+0x37a>
 8014114:	aa1e      	add	r2, sp, #120	; 0x78
 8014116:	498b      	ldr	r1, [pc, #556]	; (8014344 <_strtod_l+0x58c>)
 8014118:	a81b      	add	r0, sp, #108	; 0x6c
 801411a:	f002 f835 	bl	8016188 <__hexnan>
 801411e:	2805      	cmp	r0, #5
 8014120:	d107      	bne.n	8014132 <_strtod_l+0x37a>
 8014122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014124:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014128:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801412c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014130:	e681      	b.n	8013e36 <_strtod_l+0x7e>
 8014132:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014358 <_strtod_l+0x5a0>
 8014136:	e7d2      	b.n	80140de <_strtod_l+0x326>
 8014138:	ebae 0302 	sub.w	r3, lr, r2
 801413c:	9306      	str	r3, [sp, #24]
 801413e:	9b05      	ldr	r3, [sp, #20]
 8014140:	9807      	ldr	r0, [sp, #28]
 8014142:	2b00      	cmp	r3, #0
 8014144:	bf08      	it	eq
 8014146:	4623      	moveq	r3, r4
 8014148:	2c10      	cmp	r4, #16
 801414a:	9305      	str	r3, [sp, #20]
 801414c:	46a0      	mov	r8, r4
 801414e:	bfa8      	it	ge
 8014150:	f04f 0810 	movge.w	r8, #16
 8014154:	f7ec f9ee 	bl	8000534 <__aeabi_ui2d>
 8014158:	2c09      	cmp	r4, #9
 801415a:	4682      	mov	sl, r0
 801415c:	468b      	mov	fp, r1
 801415e:	dc13      	bgt.n	8014188 <_strtod_l+0x3d0>
 8014160:	9b06      	ldr	r3, [sp, #24]
 8014162:	2b00      	cmp	r3, #0
 8014164:	f43f ae67 	beq.w	8013e36 <_strtod_l+0x7e>
 8014168:	9b06      	ldr	r3, [sp, #24]
 801416a:	dd7a      	ble.n	8014262 <_strtod_l+0x4aa>
 801416c:	2b16      	cmp	r3, #22
 801416e:	dc61      	bgt.n	8014234 <_strtod_l+0x47c>
 8014170:	4a75      	ldr	r2, [pc, #468]	; (8014348 <_strtod_l+0x590>)
 8014172:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014176:	e9de 0100 	ldrd	r0, r1, [lr]
 801417a:	4652      	mov	r2, sl
 801417c:	465b      	mov	r3, fp
 801417e:	f7ec fa53 	bl	8000628 <__aeabi_dmul>
 8014182:	4682      	mov	sl, r0
 8014184:	468b      	mov	fp, r1
 8014186:	e656      	b.n	8013e36 <_strtod_l+0x7e>
 8014188:	4b6f      	ldr	r3, [pc, #444]	; (8014348 <_strtod_l+0x590>)
 801418a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801418e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014192:	f7ec fa49 	bl	8000628 <__aeabi_dmul>
 8014196:	4606      	mov	r6, r0
 8014198:	4628      	mov	r0, r5
 801419a:	460f      	mov	r7, r1
 801419c:	f7ec f9ca 	bl	8000534 <__aeabi_ui2d>
 80141a0:	4602      	mov	r2, r0
 80141a2:	460b      	mov	r3, r1
 80141a4:	4630      	mov	r0, r6
 80141a6:	4639      	mov	r1, r7
 80141a8:	f7ec f888 	bl	80002bc <__adddf3>
 80141ac:	2c0f      	cmp	r4, #15
 80141ae:	4682      	mov	sl, r0
 80141b0:	468b      	mov	fp, r1
 80141b2:	ddd5      	ble.n	8014160 <_strtod_l+0x3a8>
 80141b4:	9b06      	ldr	r3, [sp, #24]
 80141b6:	eba4 0808 	sub.w	r8, r4, r8
 80141ba:	4498      	add	r8, r3
 80141bc:	f1b8 0f00 	cmp.w	r8, #0
 80141c0:	f340 8096 	ble.w	80142f0 <_strtod_l+0x538>
 80141c4:	f018 030f 	ands.w	r3, r8, #15
 80141c8:	d00a      	beq.n	80141e0 <_strtod_l+0x428>
 80141ca:	495f      	ldr	r1, [pc, #380]	; (8014348 <_strtod_l+0x590>)
 80141cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80141d0:	4652      	mov	r2, sl
 80141d2:	465b      	mov	r3, fp
 80141d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141d8:	f7ec fa26 	bl	8000628 <__aeabi_dmul>
 80141dc:	4682      	mov	sl, r0
 80141de:	468b      	mov	fp, r1
 80141e0:	f038 080f 	bics.w	r8, r8, #15
 80141e4:	d073      	beq.n	80142ce <_strtod_l+0x516>
 80141e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80141ea:	dd47      	ble.n	801427c <_strtod_l+0x4c4>
 80141ec:	2400      	movs	r4, #0
 80141ee:	46a0      	mov	r8, r4
 80141f0:	9407      	str	r4, [sp, #28]
 80141f2:	9405      	str	r4, [sp, #20]
 80141f4:	2322      	movs	r3, #34	; 0x22
 80141f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014350 <_strtod_l+0x598>
 80141fa:	f8c9 3000 	str.w	r3, [r9]
 80141fe:	f04f 0a00 	mov.w	sl, #0
 8014202:	9b07      	ldr	r3, [sp, #28]
 8014204:	2b00      	cmp	r3, #0
 8014206:	f43f ae16 	beq.w	8013e36 <_strtod_l+0x7e>
 801420a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801420c:	4648      	mov	r0, r9
 801420e:	f002 f931 	bl	8016474 <_Bfree>
 8014212:	9905      	ldr	r1, [sp, #20]
 8014214:	4648      	mov	r0, r9
 8014216:	f002 f92d 	bl	8016474 <_Bfree>
 801421a:	4641      	mov	r1, r8
 801421c:	4648      	mov	r0, r9
 801421e:	f002 f929 	bl	8016474 <_Bfree>
 8014222:	9907      	ldr	r1, [sp, #28]
 8014224:	4648      	mov	r0, r9
 8014226:	f002 f925 	bl	8016474 <_Bfree>
 801422a:	4621      	mov	r1, r4
 801422c:	4648      	mov	r0, r9
 801422e:	f002 f921 	bl	8016474 <_Bfree>
 8014232:	e600      	b.n	8013e36 <_strtod_l+0x7e>
 8014234:	9a06      	ldr	r2, [sp, #24]
 8014236:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801423a:	4293      	cmp	r3, r2
 801423c:	dbba      	blt.n	80141b4 <_strtod_l+0x3fc>
 801423e:	4d42      	ldr	r5, [pc, #264]	; (8014348 <_strtod_l+0x590>)
 8014240:	f1c4 040f 	rsb	r4, r4, #15
 8014244:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014248:	4652      	mov	r2, sl
 801424a:	465b      	mov	r3, fp
 801424c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014250:	f7ec f9ea 	bl	8000628 <__aeabi_dmul>
 8014254:	9b06      	ldr	r3, [sp, #24]
 8014256:	1b1c      	subs	r4, r3, r4
 8014258:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801425c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014260:	e78d      	b.n	801417e <_strtod_l+0x3c6>
 8014262:	f113 0f16 	cmn.w	r3, #22
 8014266:	dba5      	blt.n	80141b4 <_strtod_l+0x3fc>
 8014268:	4a37      	ldr	r2, [pc, #220]	; (8014348 <_strtod_l+0x590>)
 801426a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801426e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014272:	4650      	mov	r0, sl
 8014274:	4659      	mov	r1, fp
 8014276:	f7ec fb01 	bl	800087c <__aeabi_ddiv>
 801427a:	e782      	b.n	8014182 <_strtod_l+0x3ca>
 801427c:	2300      	movs	r3, #0
 801427e:	4e33      	ldr	r6, [pc, #204]	; (801434c <_strtod_l+0x594>)
 8014280:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014284:	4650      	mov	r0, sl
 8014286:	4659      	mov	r1, fp
 8014288:	461d      	mov	r5, r3
 801428a:	f1b8 0f01 	cmp.w	r8, #1
 801428e:	dc21      	bgt.n	80142d4 <_strtod_l+0x51c>
 8014290:	b10b      	cbz	r3, 8014296 <_strtod_l+0x4de>
 8014292:	4682      	mov	sl, r0
 8014294:	468b      	mov	fp, r1
 8014296:	4b2d      	ldr	r3, [pc, #180]	; (801434c <_strtod_l+0x594>)
 8014298:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801429c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80142a0:	4652      	mov	r2, sl
 80142a2:	465b      	mov	r3, fp
 80142a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80142a8:	f7ec f9be 	bl	8000628 <__aeabi_dmul>
 80142ac:	4b28      	ldr	r3, [pc, #160]	; (8014350 <_strtod_l+0x598>)
 80142ae:	460a      	mov	r2, r1
 80142b0:	400b      	ands	r3, r1
 80142b2:	4928      	ldr	r1, [pc, #160]	; (8014354 <_strtod_l+0x59c>)
 80142b4:	428b      	cmp	r3, r1
 80142b6:	4682      	mov	sl, r0
 80142b8:	d898      	bhi.n	80141ec <_strtod_l+0x434>
 80142ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80142be:	428b      	cmp	r3, r1
 80142c0:	bf86      	itte	hi
 80142c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801435c <_strtod_l+0x5a4>
 80142c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80142ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80142ce:	2300      	movs	r3, #0
 80142d0:	9304      	str	r3, [sp, #16]
 80142d2:	e077      	b.n	80143c4 <_strtod_l+0x60c>
 80142d4:	f018 0f01 	tst.w	r8, #1
 80142d8:	d006      	beq.n	80142e8 <_strtod_l+0x530>
 80142da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80142de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e2:	f7ec f9a1 	bl	8000628 <__aeabi_dmul>
 80142e6:	2301      	movs	r3, #1
 80142e8:	3501      	adds	r5, #1
 80142ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80142ee:	e7cc      	b.n	801428a <_strtod_l+0x4d2>
 80142f0:	d0ed      	beq.n	80142ce <_strtod_l+0x516>
 80142f2:	f1c8 0800 	rsb	r8, r8, #0
 80142f6:	f018 020f 	ands.w	r2, r8, #15
 80142fa:	d00a      	beq.n	8014312 <_strtod_l+0x55a>
 80142fc:	4b12      	ldr	r3, [pc, #72]	; (8014348 <_strtod_l+0x590>)
 80142fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014302:	4650      	mov	r0, sl
 8014304:	4659      	mov	r1, fp
 8014306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430a:	f7ec fab7 	bl	800087c <__aeabi_ddiv>
 801430e:	4682      	mov	sl, r0
 8014310:	468b      	mov	fp, r1
 8014312:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014316:	d0da      	beq.n	80142ce <_strtod_l+0x516>
 8014318:	f1b8 0f1f 	cmp.w	r8, #31
 801431c:	dd20      	ble.n	8014360 <_strtod_l+0x5a8>
 801431e:	2400      	movs	r4, #0
 8014320:	46a0      	mov	r8, r4
 8014322:	9407      	str	r4, [sp, #28]
 8014324:	9405      	str	r4, [sp, #20]
 8014326:	2322      	movs	r3, #34	; 0x22
 8014328:	f04f 0a00 	mov.w	sl, #0
 801432c:	f04f 0b00 	mov.w	fp, #0
 8014330:	f8c9 3000 	str.w	r3, [r9]
 8014334:	e765      	b.n	8014202 <_strtod_l+0x44a>
 8014336:	bf00      	nop
 8014338:	08018449 	.word	0x08018449
 801433c:	080184d3 	.word	0x080184d3
 8014340:	08018451 	.word	0x08018451
 8014344:	08018490 	.word	0x08018490
 8014348:	08018578 	.word	0x08018578
 801434c:	08018550 	.word	0x08018550
 8014350:	7ff00000 	.word	0x7ff00000
 8014354:	7ca00000 	.word	0x7ca00000
 8014358:	fff80000 	.word	0xfff80000
 801435c:	7fefffff 	.word	0x7fefffff
 8014360:	f018 0310 	ands.w	r3, r8, #16
 8014364:	bf18      	it	ne
 8014366:	236a      	movne	r3, #106	; 0x6a
 8014368:	4da0      	ldr	r5, [pc, #640]	; (80145ec <_strtod_l+0x834>)
 801436a:	9304      	str	r3, [sp, #16]
 801436c:	4650      	mov	r0, sl
 801436e:	4659      	mov	r1, fp
 8014370:	2300      	movs	r3, #0
 8014372:	f1b8 0f00 	cmp.w	r8, #0
 8014376:	f300 810a 	bgt.w	801458e <_strtod_l+0x7d6>
 801437a:	b10b      	cbz	r3, 8014380 <_strtod_l+0x5c8>
 801437c:	4682      	mov	sl, r0
 801437e:	468b      	mov	fp, r1
 8014380:	9b04      	ldr	r3, [sp, #16]
 8014382:	b1bb      	cbz	r3, 80143b4 <_strtod_l+0x5fc>
 8014384:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801438c:	2b00      	cmp	r3, #0
 801438e:	4659      	mov	r1, fp
 8014390:	dd10      	ble.n	80143b4 <_strtod_l+0x5fc>
 8014392:	2b1f      	cmp	r3, #31
 8014394:	f340 8107 	ble.w	80145a6 <_strtod_l+0x7ee>
 8014398:	2b34      	cmp	r3, #52	; 0x34
 801439a:	bfde      	ittt	le
 801439c:	3b20      	suble	r3, #32
 801439e:	f04f 32ff 	movle.w	r2, #4294967295
 80143a2:	fa02 f303 	lslle.w	r3, r2, r3
 80143a6:	f04f 0a00 	mov.w	sl, #0
 80143aa:	bfcc      	ite	gt
 80143ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80143b0:	ea03 0b01 	andle.w	fp, r3, r1
 80143b4:	2200      	movs	r2, #0
 80143b6:	2300      	movs	r3, #0
 80143b8:	4650      	mov	r0, sl
 80143ba:	4659      	mov	r1, fp
 80143bc:	f7ec fb9c 	bl	8000af8 <__aeabi_dcmpeq>
 80143c0:	2800      	cmp	r0, #0
 80143c2:	d1ac      	bne.n	801431e <_strtod_l+0x566>
 80143c4:	9b07      	ldr	r3, [sp, #28]
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	9a05      	ldr	r2, [sp, #20]
 80143ca:	9908      	ldr	r1, [sp, #32]
 80143cc:	4623      	mov	r3, r4
 80143ce:	4648      	mov	r0, r9
 80143d0:	f002 f8a2 	bl	8016518 <__s2b>
 80143d4:	9007      	str	r0, [sp, #28]
 80143d6:	2800      	cmp	r0, #0
 80143d8:	f43f af08 	beq.w	80141ec <_strtod_l+0x434>
 80143dc:	9a06      	ldr	r2, [sp, #24]
 80143de:	9b06      	ldr	r3, [sp, #24]
 80143e0:	2a00      	cmp	r2, #0
 80143e2:	f1c3 0300 	rsb	r3, r3, #0
 80143e6:	bfa8      	it	ge
 80143e8:	2300      	movge	r3, #0
 80143ea:	930e      	str	r3, [sp, #56]	; 0x38
 80143ec:	2400      	movs	r4, #0
 80143ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80143f2:	9316      	str	r3, [sp, #88]	; 0x58
 80143f4:	46a0      	mov	r8, r4
 80143f6:	9b07      	ldr	r3, [sp, #28]
 80143f8:	4648      	mov	r0, r9
 80143fa:	6859      	ldr	r1, [r3, #4]
 80143fc:	f002 f806 	bl	801640c <_Balloc>
 8014400:	9005      	str	r0, [sp, #20]
 8014402:	2800      	cmp	r0, #0
 8014404:	f43f aef6 	beq.w	80141f4 <_strtod_l+0x43c>
 8014408:	9b07      	ldr	r3, [sp, #28]
 801440a:	691a      	ldr	r2, [r3, #16]
 801440c:	3202      	adds	r2, #2
 801440e:	f103 010c 	add.w	r1, r3, #12
 8014412:	0092      	lsls	r2, r2, #2
 8014414:	300c      	adds	r0, #12
 8014416:	f7fe fcff 	bl	8012e18 <memcpy>
 801441a:	aa1e      	add	r2, sp, #120	; 0x78
 801441c:	a91d      	add	r1, sp, #116	; 0x74
 801441e:	ec4b ab10 	vmov	d0, sl, fp
 8014422:	4648      	mov	r0, r9
 8014424:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014428:	f002 fb32 	bl	8016a90 <__d2b>
 801442c:	901c      	str	r0, [sp, #112]	; 0x70
 801442e:	2800      	cmp	r0, #0
 8014430:	f43f aee0 	beq.w	80141f4 <_strtod_l+0x43c>
 8014434:	2101      	movs	r1, #1
 8014436:	4648      	mov	r0, r9
 8014438:	f002 f8fa 	bl	8016630 <__i2b>
 801443c:	4680      	mov	r8, r0
 801443e:	2800      	cmp	r0, #0
 8014440:	f43f aed8 	beq.w	80141f4 <_strtod_l+0x43c>
 8014444:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014446:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014448:	2e00      	cmp	r6, #0
 801444a:	bfab      	itete	ge
 801444c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801444e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014450:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014452:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014454:	bfac      	ite	ge
 8014456:	18f7      	addge	r7, r6, r3
 8014458:	1b9d      	sublt	r5, r3, r6
 801445a:	9b04      	ldr	r3, [sp, #16]
 801445c:	1af6      	subs	r6, r6, r3
 801445e:	4416      	add	r6, r2
 8014460:	4b63      	ldr	r3, [pc, #396]	; (80145f0 <_strtod_l+0x838>)
 8014462:	3e01      	subs	r6, #1
 8014464:	429e      	cmp	r6, r3
 8014466:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801446a:	f280 80af 	bge.w	80145cc <_strtod_l+0x814>
 801446e:	1b9b      	subs	r3, r3, r6
 8014470:	2b1f      	cmp	r3, #31
 8014472:	eba2 0203 	sub.w	r2, r2, r3
 8014476:	f04f 0101 	mov.w	r1, #1
 801447a:	f300 809b 	bgt.w	80145b4 <_strtod_l+0x7fc>
 801447e:	fa01 f303 	lsl.w	r3, r1, r3
 8014482:	930f      	str	r3, [sp, #60]	; 0x3c
 8014484:	2300      	movs	r3, #0
 8014486:	930a      	str	r3, [sp, #40]	; 0x28
 8014488:	18be      	adds	r6, r7, r2
 801448a:	9b04      	ldr	r3, [sp, #16]
 801448c:	42b7      	cmp	r7, r6
 801448e:	4415      	add	r5, r2
 8014490:	441d      	add	r5, r3
 8014492:	463b      	mov	r3, r7
 8014494:	bfa8      	it	ge
 8014496:	4633      	movge	r3, r6
 8014498:	42ab      	cmp	r3, r5
 801449a:	bfa8      	it	ge
 801449c:	462b      	movge	r3, r5
 801449e:	2b00      	cmp	r3, #0
 80144a0:	bfc2      	ittt	gt
 80144a2:	1af6      	subgt	r6, r6, r3
 80144a4:	1aed      	subgt	r5, r5, r3
 80144a6:	1aff      	subgt	r7, r7, r3
 80144a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144aa:	b1bb      	cbz	r3, 80144dc <_strtod_l+0x724>
 80144ac:	4641      	mov	r1, r8
 80144ae:	461a      	mov	r2, r3
 80144b0:	4648      	mov	r0, r9
 80144b2:	f002 f95d 	bl	8016770 <__pow5mult>
 80144b6:	4680      	mov	r8, r0
 80144b8:	2800      	cmp	r0, #0
 80144ba:	f43f ae9b 	beq.w	80141f4 <_strtod_l+0x43c>
 80144be:	4601      	mov	r1, r0
 80144c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80144c2:	4648      	mov	r0, r9
 80144c4:	f002 f8bd 	bl	8016642 <__multiply>
 80144c8:	900c      	str	r0, [sp, #48]	; 0x30
 80144ca:	2800      	cmp	r0, #0
 80144cc:	f43f ae92 	beq.w	80141f4 <_strtod_l+0x43c>
 80144d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80144d2:	4648      	mov	r0, r9
 80144d4:	f001 ffce 	bl	8016474 <_Bfree>
 80144d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144da:	931c      	str	r3, [sp, #112]	; 0x70
 80144dc:	2e00      	cmp	r6, #0
 80144de:	dc7a      	bgt.n	80145d6 <_strtod_l+0x81e>
 80144e0:	9b06      	ldr	r3, [sp, #24]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	dd08      	ble.n	80144f8 <_strtod_l+0x740>
 80144e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80144e8:	9905      	ldr	r1, [sp, #20]
 80144ea:	4648      	mov	r0, r9
 80144ec:	f002 f940 	bl	8016770 <__pow5mult>
 80144f0:	9005      	str	r0, [sp, #20]
 80144f2:	2800      	cmp	r0, #0
 80144f4:	f43f ae7e 	beq.w	80141f4 <_strtod_l+0x43c>
 80144f8:	2d00      	cmp	r5, #0
 80144fa:	dd08      	ble.n	801450e <_strtod_l+0x756>
 80144fc:	462a      	mov	r2, r5
 80144fe:	9905      	ldr	r1, [sp, #20]
 8014500:	4648      	mov	r0, r9
 8014502:	f002 f983 	bl	801680c <__lshift>
 8014506:	9005      	str	r0, [sp, #20]
 8014508:	2800      	cmp	r0, #0
 801450a:	f43f ae73 	beq.w	80141f4 <_strtod_l+0x43c>
 801450e:	2f00      	cmp	r7, #0
 8014510:	dd08      	ble.n	8014524 <_strtod_l+0x76c>
 8014512:	4641      	mov	r1, r8
 8014514:	463a      	mov	r2, r7
 8014516:	4648      	mov	r0, r9
 8014518:	f002 f978 	bl	801680c <__lshift>
 801451c:	4680      	mov	r8, r0
 801451e:	2800      	cmp	r0, #0
 8014520:	f43f ae68 	beq.w	80141f4 <_strtod_l+0x43c>
 8014524:	9a05      	ldr	r2, [sp, #20]
 8014526:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014528:	4648      	mov	r0, r9
 801452a:	f002 f9dd 	bl	80168e8 <__mdiff>
 801452e:	4604      	mov	r4, r0
 8014530:	2800      	cmp	r0, #0
 8014532:	f43f ae5f 	beq.w	80141f4 <_strtod_l+0x43c>
 8014536:	68c3      	ldr	r3, [r0, #12]
 8014538:	930c      	str	r3, [sp, #48]	; 0x30
 801453a:	2300      	movs	r3, #0
 801453c:	60c3      	str	r3, [r0, #12]
 801453e:	4641      	mov	r1, r8
 8014540:	f002 f9b8 	bl	80168b4 <__mcmp>
 8014544:	2800      	cmp	r0, #0
 8014546:	da55      	bge.n	80145f4 <_strtod_l+0x83c>
 8014548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801454a:	b9e3      	cbnz	r3, 8014586 <_strtod_l+0x7ce>
 801454c:	f1ba 0f00 	cmp.w	sl, #0
 8014550:	d119      	bne.n	8014586 <_strtod_l+0x7ce>
 8014552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014556:	b9b3      	cbnz	r3, 8014586 <_strtod_l+0x7ce>
 8014558:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801455c:	0d1b      	lsrs	r3, r3, #20
 801455e:	051b      	lsls	r3, r3, #20
 8014560:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014564:	d90f      	bls.n	8014586 <_strtod_l+0x7ce>
 8014566:	6963      	ldr	r3, [r4, #20]
 8014568:	b913      	cbnz	r3, 8014570 <_strtod_l+0x7b8>
 801456a:	6923      	ldr	r3, [r4, #16]
 801456c:	2b01      	cmp	r3, #1
 801456e:	dd0a      	ble.n	8014586 <_strtod_l+0x7ce>
 8014570:	4621      	mov	r1, r4
 8014572:	2201      	movs	r2, #1
 8014574:	4648      	mov	r0, r9
 8014576:	f002 f949 	bl	801680c <__lshift>
 801457a:	4641      	mov	r1, r8
 801457c:	4604      	mov	r4, r0
 801457e:	f002 f999 	bl	80168b4 <__mcmp>
 8014582:	2800      	cmp	r0, #0
 8014584:	dc67      	bgt.n	8014656 <_strtod_l+0x89e>
 8014586:	9b04      	ldr	r3, [sp, #16]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d171      	bne.n	8014670 <_strtod_l+0x8b8>
 801458c:	e63d      	b.n	801420a <_strtod_l+0x452>
 801458e:	f018 0f01 	tst.w	r8, #1
 8014592:	d004      	beq.n	801459e <_strtod_l+0x7e6>
 8014594:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014598:	f7ec f846 	bl	8000628 <__aeabi_dmul>
 801459c:	2301      	movs	r3, #1
 801459e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80145a2:	3508      	adds	r5, #8
 80145a4:	e6e5      	b.n	8014372 <_strtod_l+0x5ba>
 80145a6:	f04f 32ff 	mov.w	r2, #4294967295
 80145aa:	fa02 f303 	lsl.w	r3, r2, r3
 80145ae:	ea03 0a0a 	and.w	sl, r3, sl
 80145b2:	e6ff      	b.n	80143b4 <_strtod_l+0x5fc>
 80145b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80145b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80145bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80145c0:	36e2      	adds	r6, #226	; 0xe2
 80145c2:	fa01 f306 	lsl.w	r3, r1, r6
 80145c6:	930a      	str	r3, [sp, #40]	; 0x28
 80145c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80145ca:	e75d      	b.n	8014488 <_strtod_l+0x6d0>
 80145cc:	2300      	movs	r3, #0
 80145ce:	930a      	str	r3, [sp, #40]	; 0x28
 80145d0:	2301      	movs	r3, #1
 80145d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80145d4:	e758      	b.n	8014488 <_strtod_l+0x6d0>
 80145d6:	4632      	mov	r2, r6
 80145d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80145da:	4648      	mov	r0, r9
 80145dc:	f002 f916 	bl	801680c <__lshift>
 80145e0:	901c      	str	r0, [sp, #112]	; 0x70
 80145e2:	2800      	cmp	r0, #0
 80145e4:	f47f af7c 	bne.w	80144e0 <_strtod_l+0x728>
 80145e8:	e604      	b.n	80141f4 <_strtod_l+0x43c>
 80145ea:	bf00      	nop
 80145ec:	080184a8 	.word	0x080184a8
 80145f0:	fffffc02 	.word	0xfffffc02
 80145f4:	465d      	mov	r5, fp
 80145f6:	f040 8086 	bne.w	8014706 <_strtod_l+0x94e>
 80145fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014600:	b32a      	cbz	r2, 801464e <_strtod_l+0x896>
 8014602:	4aaf      	ldr	r2, [pc, #700]	; (80148c0 <_strtod_l+0xb08>)
 8014604:	4293      	cmp	r3, r2
 8014606:	d153      	bne.n	80146b0 <_strtod_l+0x8f8>
 8014608:	9b04      	ldr	r3, [sp, #16]
 801460a:	4650      	mov	r0, sl
 801460c:	b1d3      	cbz	r3, 8014644 <_strtod_l+0x88c>
 801460e:	4aad      	ldr	r2, [pc, #692]	; (80148c4 <_strtod_l+0xb0c>)
 8014610:	402a      	ands	r2, r5
 8014612:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014616:	f04f 31ff 	mov.w	r1, #4294967295
 801461a:	d816      	bhi.n	801464a <_strtod_l+0x892>
 801461c:	0d12      	lsrs	r2, r2, #20
 801461e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014622:	fa01 f303 	lsl.w	r3, r1, r3
 8014626:	4298      	cmp	r0, r3
 8014628:	d142      	bne.n	80146b0 <_strtod_l+0x8f8>
 801462a:	4ba7      	ldr	r3, [pc, #668]	; (80148c8 <_strtod_l+0xb10>)
 801462c:	429d      	cmp	r5, r3
 801462e:	d102      	bne.n	8014636 <_strtod_l+0x87e>
 8014630:	3001      	adds	r0, #1
 8014632:	f43f addf 	beq.w	80141f4 <_strtod_l+0x43c>
 8014636:	4ba3      	ldr	r3, [pc, #652]	; (80148c4 <_strtod_l+0xb0c>)
 8014638:	402b      	ands	r3, r5
 801463a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801463e:	f04f 0a00 	mov.w	sl, #0
 8014642:	e7a0      	b.n	8014586 <_strtod_l+0x7ce>
 8014644:	f04f 33ff 	mov.w	r3, #4294967295
 8014648:	e7ed      	b.n	8014626 <_strtod_l+0x86e>
 801464a:	460b      	mov	r3, r1
 801464c:	e7eb      	b.n	8014626 <_strtod_l+0x86e>
 801464e:	bb7b      	cbnz	r3, 80146b0 <_strtod_l+0x8f8>
 8014650:	f1ba 0f00 	cmp.w	sl, #0
 8014654:	d12c      	bne.n	80146b0 <_strtod_l+0x8f8>
 8014656:	9904      	ldr	r1, [sp, #16]
 8014658:	4a9a      	ldr	r2, [pc, #616]	; (80148c4 <_strtod_l+0xb0c>)
 801465a:	465b      	mov	r3, fp
 801465c:	b1f1      	cbz	r1, 801469c <_strtod_l+0x8e4>
 801465e:	ea02 010b 	and.w	r1, r2, fp
 8014662:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014666:	dc19      	bgt.n	801469c <_strtod_l+0x8e4>
 8014668:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801466c:	f77f ae5b 	ble.w	8014326 <_strtod_l+0x56e>
 8014670:	4a96      	ldr	r2, [pc, #600]	; (80148cc <_strtod_l+0xb14>)
 8014672:	2300      	movs	r3, #0
 8014674:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014678:	4650      	mov	r0, sl
 801467a:	4659      	mov	r1, fp
 801467c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014680:	f7eb ffd2 	bl	8000628 <__aeabi_dmul>
 8014684:	4682      	mov	sl, r0
 8014686:	468b      	mov	fp, r1
 8014688:	2900      	cmp	r1, #0
 801468a:	f47f adbe 	bne.w	801420a <_strtod_l+0x452>
 801468e:	2800      	cmp	r0, #0
 8014690:	f47f adbb 	bne.w	801420a <_strtod_l+0x452>
 8014694:	2322      	movs	r3, #34	; 0x22
 8014696:	f8c9 3000 	str.w	r3, [r9]
 801469a:	e5b6      	b.n	801420a <_strtod_l+0x452>
 801469c:	4013      	ands	r3, r2
 801469e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80146a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80146a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80146aa:	f04f 3aff 	mov.w	sl, #4294967295
 80146ae:	e76a      	b.n	8014586 <_strtod_l+0x7ce>
 80146b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146b2:	b193      	cbz	r3, 80146da <_strtod_l+0x922>
 80146b4:	422b      	tst	r3, r5
 80146b6:	f43f af66 	beq.w	8014586 <_strtod_l+0x7ce>
 80146ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146bc:	9a04      	ldr	r2, [sp, #16]
 80146be:	4650      	mov	r0, sl
 80146c0:	4659      	mov	r1, fp
 80146c2:	b173      	cbz	r3, 80146e2 <_strtod_l+0x92a>
 80146c4:	f7ff fb5b 	bl	8013d7e <sulp>
 80146c8:	4602      	mov	r2, r0
 80146ca:	460b      	mov	r3, r1
 80146cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80146d0:	f7eb fdf4 	bl	80002bc <__adddf3>
 80146d4:	4682      	mov	sl, r0
 80146d6:	468b      	mov	fp, r1
 80146d8:	e755      	b.n	8014586 <_strtod_l+0x7ce>
 80146da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146dc:	ea13 0f0a 	tst.w	r3, sl
 80146e0:	e7e9      	b.n	80146b6 <_strtod_l+0x8fe>
 80146e2:	f7ff fb4c 	bl	8013d7e <sulp>
 80146e6:	4602      	mov	r2, r0
 80146e8:	460b      	mov	r3, r1
 80146ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80146ee:	f7eb fde3 	bl	80002b8 <__aeabi_dsub>
 80146f2:	2200      	movs	r2, #0
 80146f4:	2300      	movs	r3, #0
 80146f6:	4682      	mov	sl, r0
 80146f8:	468b      	mov	fp, r1
 80146fa:	f7ec f9fd 	bl	8000af8 <__aeabi_dcmpeq>
 80146fe:	2800      	cmp	r0, #0
 8014700:	f47f ae11 	bne.w	8014326 <_strtod_l+0x56e>
 8014704:	e73f      	b.n	8014586 <_strtod_l+0x7ce>
 8014706:	4641      	mov	r1, r8
 8014708:	4620      	mov	r0, r4
 801470a:	f002 fa10 	bl	8016b2e <__ratio>
 801470e:	ec57 6b10 	vmov	r6, r7, d0
 8014712:	2200      	movs	r2, #0
 8014714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014718:	ee10 0a10 	vmov	r0, s0
 801471c:	4639      	mov	r1, r7
 801471e:	f7ec f9ff 	bl	8000b20 <__aeabi_dcmple>
 8014722:	2800      	cmp	r0, #0
 8014724:	d077      	beq.n	8014816 <_strtod_l+0xa5e>
 8014726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014728:	2b00      	cmp	r3, #0
 801472a:	d04a      	beq.n	80147c2 <_strtod_l+0xa0a>
 801472c:	4b68      	ldr	r3, [pc, #416]	; (80148d0 <_strtod_l+0xb18>)
 801472e:	2200      	movs	r2, #0
 8014730:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014734:	4f66      	ldr	r7, [pc, #408]	; (80148d0 <_strtod_l+0xb18>)
 8014736:	2600      	movs	r6, #0
 8014738:	4b62      	ldr	r3, [pc, #392]	; (80148c4 <_strtod_l+0xb0c>)
 801473a:	402b      	ands	r3, r5
 801473c:	930f      	str	r3, [sp, #60]	; 0x3c
 801473e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014740:	4b64      	ldr	r3, [pc, #400]	; (80148d4 <_strtod_l+0xb1c>)
 8014742:	429a      	cmp	r2, r3
 8014744:	f040 80ce 	bne.w	80148e4 <_strtod_l+0xb2c>
 8014748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801474c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014750:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014754:	ec4b ab10 	vmov	d0, sl, fp
 8014758:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801475c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014760:	f002 f920 	bl	80169a4 <__ulp>
 8014764:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014768:	ec53 2b10 	vmov	r2, r3, d0
 801476c:	f7eb ff5c 	bl	8000628 <__aeabi_dmul>
 8014770:	4652      	mov	r2, sl
 8014772:	465b      	mov	r3, fp
 8014774:	f7eb fda2 	bl	80002bc <__adddf3>
 8014778:	460b      	mov	r3, r1
 801477a:	4952      	ldr	r1, [pc, #328]	; (80148c4 <_strtod_l+0xb0c>)
 801477c:	4a56      	ldr	r2, [pc, #344]	; (80148d8 <_strtod_l+0xb20>)
 801477e:	4019      	ands	r1, r3
 8014780:	4291      	cmp	r1, r2
 8014782:	4682      	mov	sl, r0
 8014784:	d95b      	bls.n	801483e <_strtod_l+0xa86>
 8014786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014788:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801478c:	4293      	cmp	r3, r2
 801478e:	d103      	bne.n	8014798 <_strtod_l+0x9e0>
 8014790:	9b08      	ldr	r3, [sp, #32]
 8014792:	3301      	adds	r3, #1
 8014794:	f43f ad2e 	beq.w	80141f4 <_strtod_l+0x43c>
 8014798:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80148c8 <_strtod_l+0xb10>
 801479c:	f04f 3aff 	mov.w	sl, #4294967295
 80147a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80147a2:	4648      	mov	r0, r9
 80147a4:	f001 fe66 	bl	8016474 <_Bfree>
 80147a8:	9905      	ldr	r1, [sp, #20]
 80147aa:	4648      	mov	r0, r9
 80147ac:	f001 fe62 	bl	8016474 <_Bfree>
 80147b0:	4641      	mov	r1, r8
 80147b2:	4648      	mov	r0, r9
 80147b4:	f001 fe5e 	bl	8016474 <_Bfree>
 80147b8:	4621      	mov	r1, r4
 80147ba:	4648      	mov	r0, r9
 80147bc:	f001 fe5a 	bl	8016474 <_Bfree>
 80147c0:	e619      	b.n	80143f6 <_strtod_l+0x63e>
 80147c2:	f1ba 0f00 	cmp.w	sl, #0
 80147c6:	d11a      	bne.n	80147fe <_strtod_l+0xa46>
 80147c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80147cc:	b9eb      	cbnz	r3, 801480a <_strtod_l+0xa52>
 80147ce:	2200      	movs	r2, #0
 80147d0:	4b3f      	ldr	r3, [pc, #252]	; (80148d0 <_strtod_l+0xb18>)
 80147d2:	4630      	mov	r0, r6
 80147d4:	4639      	mov	r1, r7
 80147d6:	f7ec f999 	bl	8000b0c <__aeabi_dcmplt>
 80147da:	b9c8      	cbnz	r0, 8014810 <_strtod_l+0xa58>
 80147dc:	4630      	mov	r0, r6
 80147de:	4639      	mov	r1, r7
 80147e0:	2200      	movs	r2, #0
 80147e2:	4b3e      	ldr	r3, [pc, #248]	; (80148dc <_strtod_l+0xb24>)
 80147e4:	f7eb ff20 	bl	8000628 <__aeabi_dmul>
 80147e8:	4606      	mov	r6, r0
 80147ea:	460f      	mov	r7, r1
 80147ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80147f0:	9618      	str	r6, [sp, #96]	; 0x60
 80147f2:	9319      	str	r3, [sp, #100]	; 0x64
 80147f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80147f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80147fc:	e79c      	b.n	8014738 <_strtod_l+0x980>
 80147fe:	f1ba 0f01 	cmp.w	sl, #1
 8014802:	d102      	bne.n	801480a <_strtod_l+0xa52>
 8014804:	2d00      	cmp	r5, #0
 8014806:	f43f ad8e 	beq.w	8014326 <_strtod_l+0x56e>
 801480a:	2200      	movs	r2, #0
 801480c:	4b34      	ldr	r3, [pc, #208]	; (80148e0 <_strtod_l+0xb28>)
 801480e:	e78f      	b.n	8014730 <_strtod_l+0x978>
 8014810:	2600      	movs	r6, #0
 8014812:	4f32      	ldr	r7, [pc, #200]	; (80148dc <_strtod_l+0xb24>)
 8014814:	e7ea      	b.n	80147ec <_strtod_l+0xa34>
 8014816:	4b31      	ldr	r3, [pc, #196]	; (80148dc <_strtod_l+0xb24>)
 8014818:	4630      	mov	r0, r6
 801481a:	4639      	mov	r1, r7
 801481c:	2200      	movs	r2, #0
 801481e:	f7eb ff03 	bl	8000628 <__aeabi_dmul>
 8014822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014824:	4606      	mov	r6, r0
 8014826:	460f      	mov	r7, r1
 8014828:	b933      	cbnz	r3, 8014838 <_strtod_l+0xa80>
 801482a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801482e:	9010      	str	r0, [sp, #64]	; 0x40
 8014830:	9311      	str	r3, [sp, #68]	; 0x44
 8014832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014836:	e7df      	b.n	80147f8 <_strtod_l+0xa40>
 8014838:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801483c:	e7f9      	b.n	8014832 <_strtod_l+0xa7a>
 801483e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014842:	9b04      	ldr	r3, [sp, #16]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d1ab      	bne.n	80147a0 <_strtod_l+0x9e8>
 8014848:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801484c:	0d1b      	lsrs	r3, r3, #20
 801484e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014850:	051b      	lsls	r3, r3, #20
 8014852:	429a      	cmp	r2, r3
 8014854:	465d      	mov	r5, fp
 8014856:	d1a3      	bne.n	80147a0 <_strtod_l+0x9e8>
 8014858:	4639      	mov	r1, r7
 801485a:	4630      	mov	r0, r6
 801485c:	f7ec f994 	bl	8000b88 <__aeabi_d2iz>
 8014860:	f7eb fe78 	bl	8000554 <__aeabi_i2d>
 8014864:	460b      	mov	r3, r1
 8014866:	4602      	mov	r2, r0
 8014868:	4639      	mov	r1, r7
 801486a:	4630      	mov	r0, r6
 801486c:	f7eb fd24 	bl	80002b8 <__aeabi_dsub>
 8014870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014872:	4606      	mov	r6, r0
 8014874:	460f      	mov	r7, r1
 8014876:	b933      	cbnz	r3, 8014886 <_strtod_l+0xace>
 8014878:	f1ba 0f00 	cmp.w	sl, #0
 801487c:	d103      	bne.n	8014886 <_strtod_l+0xace>
 801487e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014882:	2d00      	cmp	r5, #0
 8014884:	d06d      	beq.n	8014962 <_strtod_l+0xbaa>
 8014886:	a30a      	add	r3, pc, #40	; (adr r3, 80148b0 <_strtod_l+0xaf8>)
 8014888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488c:	4630      	mov	r0, r6
 801488e:	4639      	mov	r1, r7
 8014890:	f7ec f93c 	bl	8000b0c <__aeabi_dcmplt>
 8014894:	2800      	cmp	r0, #0
 8014896:	f47f acb8 	bne.w	801420a <_strtod_l+0x452>
 801489a:	a307      	add	r3, pc, #28	; (adr r3, 80148b8 <_strtod_l+0xb00>)
 801489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a0:	4630      	mov	r0, r6
 80148a2:	4639      	mov	r1, r7
 80148a4:	f7ec f950 	bl	8000b48 <__aeabi_dcmpgt>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	f43f af79 	beq.w	80147a0 <_strtod_l+0x9e8>
 80148ae:	e4ac      	b.n	801420a <_strtod_l+0x452>
 80148b0:	94a03595 	.word	0x94a03595
 80148b4:	3fdfffff 	.word	0x3fdfffff
 80148b8:	35afe535 	.word	0x35afe535
 80148bc:	3fe00000 	.word	0x3fe00000
 80148c0:	000fffff 	.word	0x000fffff
 80148c4:	7ff00000 	.word	0x7ff00000
 80148c8:	7fefffff 	.word	0x7fefffff
 80148cc:	39500000 	.word	0x39500000
 80148d0:	3ff00000 	.word	0x3ff00000
 80148d4:	7fe00000 	.word	0x7fe00000
 80148d8:	7c9fffff 	.word	0x7c9fffff
 80148dc:	3fe00000 	.word	0x3fe00000
 80148e0:	bff00000 	.word	0xbff00000
 80148e4:	9b04      	ldr	r3, [sp, #16]
 80148e6:	b333      	cbz	r3, 8014936 <_strtod_l+0xb7e>
 80148e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80148ee:	d822      	bhi.n	8014936 <_strtod_l+0xb7e>
 80148f0:	a327      	add	r3, pc, #156	; (adr r3, 8014990 <_strtod_l+0xbd8>)
 80148f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f6:	4630      	mov	r0, r6
 80148f8:	4639      	mov	r1, r7
 80148fa:	f7ec f911 	bl	8000b20 <__aeabi_dcmple>
 80148fe:	b1a0      	cbz	r0, 801492a <_strtod_l+0xb72>
 8014900:	4639      	mov	r1, r7
 8014902:	4630      	mov	r0, r6
 8014904:	f7ec f968 	bl	8000bd8 <__aeabi_d2uiz>
 8014908:	2800      	cmp	r0, #0
 801490a:	bf08      	it	eq
 801490c:	2001      	moveq	r0, #1
 801490e:	f7eb fe11 	bl	8000534 <__aeabi_ui2d>
 8014912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014914:	4606      	mov	r6, r0
 8014916:	460f      	mov	r7, r1
 8014918:	bb03      	cbnz	r3, 801495c <_strtod_l+0xba4>
 801491a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801491e:	9012      	str	r0, [sp, #72]	; 0x48
 8014920:	9313      	str	r3, [sp, #76]	; 0x4c
 8014922:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014926:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801492a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801492c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801492e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014932:	1a9b      	subs	r3, r3, r2
 8014934:	930b      	str	r3, [sp, #44]	; 0x2c
 8014936:	ed9d 0b08 	vldr	d0, [sp, #32]
 801493a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801493e:	f002 f831 	bl	80169a4 <__ulp>
 8014942:	4650      	mov	r0, sl
 8014944:	ec53 2b10 	vmov	r2, r3, d0
 8014948:	4659      	mov	r1, fp
 801494a:	f7eb fe6d 	bl	8000628 <__aeabi_dmul>
 801494e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014952:	f7eb fcb3 	bl	80002bc <__adddf3>
 8014956:	4682      	mov	sl, r0
 8014958:	468b      	mov	fp, r1
 801495a:	e772      	b.n	8014842 <_strtod_l+0xa8a>
 801495c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014960:	e7df      	b.n	8014922 <_strtod_l+0xb6a>
 8014962:	a30d      	add	r3, pc, #52	; (adr r3, 8014998 <_strtod_l+0xbe0>)
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014968:	f7ec f8d0 	bl	8000b0c <__aeabi_dcmplt>
 801496c:	e79c      	b.n	80148a8 <_strtod_l+0xaf0>
 801496e:	2300      	movs	r3, #0
 8014970:	930d      	str	r3, [sp, #52]	; 0x34
 8014972:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014976:	6013      	str	r3, [r2, #0]
 8014978:	f7ff ba61 	b.w	8013e3e <_strtod_l+0x86>
 801497c:	2b65      	cmp	r3, #101	; 0x65
 801497e:	f04f 0200 	mov.w	r2, #0
 8014982:	f43f ab4e 	beq.w	8014022 <_strtod_l+0x26a>
 8014986:	2101      	movs	r1, #1
 8014988:	4614      	mov	r4, r2
 801498a:	9104      	str	r1, [sp, #16]
 801498c:	f7ff bacb 	b.w	8013f26 <_strtod_l+0x16e>
 8014990:	ffc00000 	.word	0xffc00000
 8014994:	41dfffff 	.word	0x41dfffff
 8014998:	94a03595 	.word	0x94a03595
 801499c:	3fcfffff 	.word	0x3fcfffff

080149a0 <_strtod_r>:
 80149a0:	4b05      	ldr	r3, [pc, #20]	; (80149b8 <_strtod_r+0x18>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	b410      	push	{r4}
 80149a6:	6a1b      	ldr	r3, [r3, #32]
 80149a8:	4c04      	ldr	r4, [pc, #16]	; (80149bc <_strtod_r+0x1c>)
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	bf08      	it	eq
 80149ae:	4623      	moveq	r3, r4
 80149b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149b4:	f7ff ba00 	b.w	8013db8 <_strtod_l>
 80149b8:	2000000c 	.word	0x2000000c
 80149bc:	20000070 	.word	0x20000070

080149c0 <_strtol_l.isra.0>:
 80149c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149c4:	4680      	mov	r8, r0
 80149c6:	4689      	mov	r9, r1
 80149c8:	4692      	mov	sl, r2
 80149ca:	461e      	mov	r6, r3
 80149cc:	460f      	mov	r7, r1
 80149ce:	463d      	mov	r5, r7
 80149d0:	9808      	ldr	r0, [sp, #32]
 80149d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80149d6:	f001 fc67 	bl	80162a8 <__locale_ctype_ptr_l>
 80149da:	4420      	add	r0, r4
 80149dc:	7843      	ldrb	r3, [r0, #1]
 80149de:	f013 0308 	ands.w	r3, r3, #8
 80149e2:	d132      	bne.n	8014a4a <_strtol_l.isra.0+0x8a>
 80149e4:	2c2d      	cmp	r4, #45	; 0x2d
 80149e6:	d132      	bne.n	8014a4e <_strtol_l.isra.0+0x8e>
 80149e8:	787c      	ldrb	r4, [r7, #1]
 80149ea:	1cbd      	adds	r5, r7, #2
 80149ec:	2201      	movs	r2, #1
 80149ee:	2e00      	cmp	r6, #0
 80149f0:	d05d      	beq.n	8014aae <_strtol_l.isra.0+0xee>
 80149f2:	2e10      	cmp	r6, #16
 80149f4:	d109      	bne.n	8014a0a <_strtol_l.isra.0+0x4a>
 80149f6:	2c30      	cmp	r4, #48	; 0x30
 80149f8:	d107      	bne.n	8014a0a <_strtol_l.isra.0+0x4a>
 80149fa:	782b      	ldrb	r3, [r5, #0]
 80149fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a00:	2b58      	cmp	r3, #88	; 0x58
 8014a02:	d14f      	bne.n	8014aa4 <_strtol_l.isra.0+0xe4>
 8014a04:	786c      	ldrb	r4, [r5, #1]
 8014a06:	2610      	movs	r6, #16
 8014a08:	3502      	adds	r5, #2
 8014a0a:	2a00      	cmp	r2, #0
 8014a0c:	bf14      	ite	ne
 8014a0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014a12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014a16:	2700      	movs	r7, #0
 8014a18:	fbb1 fcf6 	udiv	ip, r1, r6
 8014a1c:	4638      	mov	r0, r7
 8014a1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014a22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014a26:	2b09      	cmp	r3, #9
 8014a28:	d817      	bhi.n	8014a5a <_strtol_l.isra.0+0x9a>
 8014a2a:	461c      	mov	r4, r3
 8014a2c:	42a6      	cmp	r6, r4
 8014a2e:	dd23      	ble.n	8014a78 <_strtol_l.isra.0+0xb8>
 8014a30:	1c7b      	adds	r3, r7, #1
 8014a32:	d007      	beq.n	8014a44 <_strtol_l.isra.0+0x84>
 8014a34:	4584      	cmp	ip, r0
 8014a36:	d31c      	bcc.n	8014a72 <_strtol_l.isra.0+0xb2>
 8014a38:	d101      	bne.n	8014a3e <_strtol_l.isra.0+0x7e>
 8014a3a:	45a6      	cmp	lr, r4
 8014a3c:	db19      	blt.n	8014a72 <_strtol_l.isra.0+0xb2>
 8014a3e:	fb00 4006 	mla	r0, r0, r6, r4
 8014a42:	2701      	movs	r7, #1
 8014a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a48:	e7eb      	b.n	8014a22 <_strtol_l.isra.0+0x62>
 8014a4a:	462f      	mov	r7, r5
 8014a4c:	e7bf      	b.n	80149ce <_strtol_l.isra.0+0xe>
 8014a4e:	2c2b      	cmp	r4, #43	; 0x2b
 8014a50:	bf04      	itt	eq
 8014a52:	1cbd      	addeq	r5, r7, #2
 8014a54:	787c      	ldrbeq	r4, [r7, #1]
 8014a56:	461a      	mov	r2, r3
 8014a58:	e7c9      	b.n	80149ee <_strtol_l.isra.0+0x2e>
 8014a5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014a5e:	2b19      	cmp	r3, #25
 8014a60:	d801      	bhi.n	8014a66 <_strtol_l.isra.0+0xa6>
 8014a62:	3c37      	subs	r4, #55	; 0x37
 8014a64:	e7e2      	b.n	8014a2c <_strtol_l.isra.0+0x6c>
 8014a66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014a6a:	2b19      	cmp	r3, #25
 8014a6c:	d804      	bhi.n	8014a78 <_strtol_l.isra.0+0xb8>
 8014a6e:	3c57      	subs	r4, #87	; 0x57
 8014a70:	e7dc      	b.n	8014a2c <_strtol_l.isra.0+0x6c>
 8014a72:	f04f 37ff 	mov.w	r7, #4294967295
 8014a76:	e7e5      	b.n	8014a44 <_strtol_l.isra.0+0x84>
 8014a78:	1c7b      	adds	r3, r7, #1
 8014a7a:	d108      	bne.n	8014a8e <_strtol_l.isra.0+0xce>
 8014a7c:	2322      	movs	r3, #34	; 0x22
 8014a7e:	f8c8 3000 	str.w	r3, [r8]
 8014a82:	4608      	mov	r0, r1
 8014a84:	f1ba 0f00 	cmp.w	sl, #0
 8014a88:	d107      	bne.n	8014a9a <_strtol_l.isra.0+0xda>
 8014a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a8e:	b102      	cbz	r2, 8014a92 <_strtol_l.isra.0+0xd2>
 8014a90:	4240      	negs	r0, r0
 8014a92:	f1ba 0f00 	cmp.w	sl, #0
 8014a96:	d0f8      	beq.n	8014a8a <_strtol_l.isra.0+0xca>
 8014a98:	b10f      	cbz	r7, 8014a9e <_strtol_l.isra.0+0xde>
 8014a9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8014a9e:	f8ca 9000 	str.w	r9, [sl]
 8014aa2:	e7f2      	b.n	8014a8a <_strtol_l.isra.0+0xca>
 8014aa4:	2430      	movs	r4, #48	; 0x30
 8014aa6:	2e00      	cmp	r6, #0
 8014aa8:	d1af      	bne.n	8014a0a <_strtol_l.isra.0+0x4a>
 8014aaa:	2608      	movs	r6, #8
 8014aac:	e7ad      	b.n	8014a0a <_strtol_l.isra.0+0x4a>
 8014aae:	2c30      	cmp	r4, #48	; 0x30
 8014ab0:	d0a3      	beq.n	80149fa <_strtol_l.isra.0+0x3a>
 8014ab2:	260a      	movs	r6, #10
 8014ab4:	e7a9      	b.n	8014a0a <_strtol_l.isra.0+0x4a>
	...

08014ab8 <_strtol_r>:
 8014ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014aba:	4c06      	ldr	r4, [pc, #24]	; (8014ad4 <_strtol_r+0x1c>)
 8014abc:	4d06      	ldr	r5, [pc, #24]	; (8014ad8 <_strtol_r+0x20>)
 8014abe:	6824      	ldr	r4, [r4, #0]
 8014ac0:	6a24      	ldr	r4, [r4, #32]
 8014ac2:	2c00      	cmp	r4, #0
 8014ac4:	bf08      	it	eq
 8014ac6:	462c      	moveq	r4, r5
 8014ac8:	9400      	str	r4, [sp, #0]
 8014aca:	f7ff ff79 	bl	80149c0 <_strtol_l.isra.0>
 8014ace:	b003      	add	sp, #12
 8014ad0:	bd30      	pop	{r4, r5, pc}
 8014ad2:	bf00      	nop
 8014ad4:	2000000c 	.word	0x2000000c
 8014ad8:	20000070 	.word	0x20000070

08014adc <_vsiprintf_r>:
 8014adc:	b500      	push	{lr}
 8014ade:	b09b      	sub	sp, #108	; 0x6c
 8014ae0:	9100      	str	r1, [sp, #0]
 8014ae2:	9104      	str	r1, [sp, #16]
 8014ae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014ae8:	9105      	str	r1, [sp, #20]
 8014aea:	9102      	str	r1, [sp, #8]
 8014aec:	4905      	ldr	r1, [pc, #20]	; (8014b04 <_vsiprintf_r+0x28>)
 8014aee:	9103      	str	r1, [sp, #12]
 8014af0:	4669      	mov	r1, sp
 8014af2:	f002 f99b 	bl	8016e2c <_svfiprintf_r>
 8014af6:	9b00      	ldr	r3, [sp, #0]
 8014af8:	2200      	movs	r2, #0
 8014afa:	701a      	strb	r2, [r3, #0]
 8014afc:	b01b      	add	sp, #108	; 0x6c
 8014afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b02:	bf00      	nop
 8014b04:	ffff0208 	.word	0xffff0208

08014b08 <vsiprintf>:
 8014b08:	4613      	mov	r3, r2
 8014b0a:	460a      	mov	r2, r1
 8014b0c:	4601      	mov	r1, r0
 8014b0e:	4802      	ldr	r0, [pc, #8]	; (8014b18 <vsiprintf+0x10>)
 8014b10:	6800      	ldr	r0, [r0, #0]
 8014b12:	f7ff bfe3 	b.w	8014adc <_vsiprintf_r>
 8014b16:	bf00      	nop
 8014b18:	2000000c 	.word	0x2000000c

08014b1c <__swbuf_r>:
 8014b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b1e:	460e      	mov	r6, r1
 8014b20:	4614      	mov	r4, r2
 8014b22:	4605      	mov	r5, r0
 8014b24:	b118      	cbz	r0, 8014b2e <__swbuf_r+0x12>
 8014b26:	6983      	ldr	r3, [r0, #24]
 8014b28:	b90b      	cbnz	r3, 8014b2e <__swbuf_r+0x12>
 8014b2a:	f001 f80d 	bl	8015b48 <__sinit>
 8014b2e:	4b21      	ldr	r3, [pc, #132]	; (8014bb4 <__swbuf_r+0x98>)
 8014b30:	429c      	cmp	r4, r3
 8014b32:	d12a      	bne.n	8014b8a <__swbuf_r+0x6e>
 8014b34:	686c      	ldr	r4, [r5, #4]
 8014b36:	69a3      	ldr	r3, [r4, #24]
 8014b38:	60a3      	str	r3, [r4, #8]
 8014b3a:	89a3      	ldrh	r3, [r4, #12]
 8014b3c:	071a      	lsls	r2, r3, #28
 8014b3e:	d52e      	bpl.n	8014b9e <__swbuf_r+0x82>
 8014b40:	6923      	ldr	r3, [r4, #16]
 8014b42:	b363      	cbz	r3, 8014b9e <__swbuf_r+0x82>
 8014b44:	6923      	ldr	r3, [r4, #16]
 8014b46:	6820      	ldr	r0, [r4, #0]
 8014b48:	1ac0      	subs	r0, r0, r3
 8014b4a:	6963      	ldr	r3, [r4, #20]
 8014b4c:	b2f6      	uxtb	r6, r6
 8014b4e:	4283      	cmp	r3, r0
 8014b50:	4637      	mov	r7, r6
 8014b52:	dc04      	bgt.n	8014b5e <__swbuf_r+0x42>
 8014b54:	4621      	mov	r1, r4
 8014b56:	4628      	mov	r0, r5
 8014b58:	f000 ff8c 	bl	8015a74 <_fflush_r>
 8014b5c:	bb28      	cbnz	r0, 8014baa <__swbuf_r+0x8e>
 8014b5e:	68a3      	ldr	r3, [r4, #8]
 8014b60:	3b01      	subs	r3, #1
 8014b62:	60a3      	str	r3, [r4, #8]
 8014b64:	6823      	ldr	r3, [r4, #0]
 8014b66:	1c5a      	adds	r2, r3, #1
 8014b68:	6022      	str	r2, [r4, #0]
 8014b6a:	701e      	strb	r6, [r3, #0]
 8014b6c:	6963      	ldr	r3, [r4, #20]
 8014b6e:	3001      	adds	r0, #1
 8014b70:	4283      	cmp	r3, r0
 8014b72:	d004      	beq.n	8014b7e <__swbuf_r+0x62>
 8014b74:	89a3      	ldrh	r3, [r4, #12]
 8014b76:	07db      	lsls	r3, r3, #31
 8014b78:	d519      	bpl.n	8014bae <__swbuf_r+0x92>
 8014b7a:	2e0a      	cmp	r6, #10
 8014b7c:	d117      	bne.n	8014bae <__swbuf_r+0x92>
 8014b7e:	4621      	mov	r1, r4
 8014b80:	4628      	mov	r0, r5
 8014b82:	f000 ff77 	bl	8015a74 <_fflush_r>
 8014b86:	b190      	cbz	r0, 8014bae <__swbuf_r+0x92>
 8014b88:	e00f      	b.n	8014baa <__swbuf_r+0x8e>
 8014b8a:	4b0b      	ldr	r3, [pc, #44]	; (8014bb8 <__swbuf_r+0x9c>)
 8014b8c:	429c      	cmp	r4, r3
 8014b8e:	d101      	bne.n	8014b94 <__swbuf_r+0x78>
 8014b90:	68ac      	ldr	r4, [r5, #8]
 8014b92:	e7d0      	b.n	8014b36 <__swbuf_r+0x1a>
 8014b94:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <__swbuf_r+0xa0>)
 8014b96:	429c      	cmp	r4, r3
 8014b98:	bf08      	it	eq
 8014b9a:	68ec      	ldreq	r4, [r5, #12]
 8014b9c:	e7cb      	b.n	8014b36 <__swbuf_r+0x1a>
 8014b9e:	4621      	mov	r1, r4
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	f000 f81f 	bl	8014be4 <__swsetup_r>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d0cc      	beq.n	8014b44 <__swbuf_r+0x28>
 8014baa:	f04f 37ff 	mov.w	r7, #4294967295
 8014bae:	4638      	mov	r0, r7
 8014bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	08018500 	.word	0x08018500
 8014bb8:	08018520 	.word	0x08018520
 8014bbc:	080184e0 	.word	0x080184e0

08014bc0 <_write_r>:
 8014bc0:	b538      	push	{r3, r4, r5, lr}
 8014bc2:	4c07      	ldr	r4, [pc, #28]	; (8014be0 <_write_r+0x20>)
 8014bc4:	4605      	mov	r5, r0
 8014bc6:	4608      	mov	r0, r1
 8014bc8:	4611      	mov	r1, r2
 8014bca:	2200      	movs	r2, #0
 8014bcc:	6022      	str	r2, [r4, #0]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	f7ef fa2d 	bl	800402e <_write>
 8014bd4:	1c43      	adds	r3, r0, #1
 8014bd6:	d102      	bne.n	8014bde <_write_r+0x1e>
 8014bd8:	6823      	ldr	r3, [r4, #0]
 8014bda:	b103      	cbz	r3, 8014bde <_write_r+0x1e>
 8014bdc:	602b      	str	r3, [r5, #0]
 8014bde:	bd38      	pop	{r3, r4, r5, pc}
 8014be0:	2003be1c 	.word	0x2003be1c

08014be4 <__swsetup_r>:
 8014be4:	4b32      	ldr	r3, [pc, #200]	; (8014cb0 <__swsetup_r+0xcc>)
 8014be6:	b570      	push	{r4, r5, r6, lr}
 8014be8:	681d      	ldr	r5, [r3, #0]
 8014bea:	4606      	mov	r6, r0
 8014bec:	460c      	mov	r4, r1
 8014bee:	b125      	cbz	r5, 8014bfa <__swsetup_r+0x16>
 8014bf0:	69ab      	ldr	r3, [r5, #24]
 8014bf2:	b913      	cbnz	r3, 8014bfa <__swsetup_r+0x16>
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	f000 ffa7 	bl	8015b48 <__sinit>
 8014bfa:	4b2e      	ldr	r3, [pc, #184]	; (8014cb4 <__swsetup_r+0xd0>)
 8014bfc:	429c      	cmp	r4, r3
 8014bfe:	d10f      	bne.n	8014c20 <__swsetup_r+0x3c>
 8014c00:	686c      	ldr	r4, [r5, #4]
 8014c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	0715      	lsls	r5, r2, #28
 8014c0a:	d42c      	bmi.n	8014c66 <__swsetup_r+0x82>
 8014c0c:	06d0      	lsls	r0, r2, #27
 8014c0e:	d411      	bmi.n	8014c34 <__swsetup_r+0x50>
 8014c10:	2209      	movs	r2, #9
 8014c12:	6032      	str	r2, [r6, #0]
 8014c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c18:	81a3      	strh	r3, [r4, #12]
 8014c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c1e:	e03e      	b.n	8014c9e <__swsetup_r+0xba>
 8014c20:	4b25      	ldr	r3, [pc, #148]	; (8014cb8 <__swsetup_r+0xd4>)
 8014c22:	429c      	cmp	r4, r3
 8014c24:	d101      	bne.n	8014c2a <__swsetup_r+0x46>
 8014c26:	68ac      	ldr	r4, [r5, #8]
 8014c28:	e7eb      	b.n	8014c02 <__swsetup_r+0x1e>
 8014c2a:	4b24      	ldr	r3, [pc, #144]	; (8014cbc <__swsetup_r+0xd8>)
 8014c2c:	429c      	cmp	r4, r3
 8014c2e:	bf08      	it	eq
 8014c30:	68ec      	ldreq	r4, [r5, #12]
 8014c32:	e7e6      	b.n	8014c02 <__swsetup_r+0x1e>
 8014c34:	0751      	lsls	r1, r2, #29
 8014c36:	d512      	bpl.n	8014c5e <__swsetup_r+0x7a>
 8014c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c3a:	b141      	cbz	r1, 8014c4e <__swsetup_r+0x6a>
 8014c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c40:	4299      	cmp	r1, r3
 8014c42:	d002      	beq.n	8014c4a <__swsetup_r+0x66>
 8014c44:	4630      	mov	r0, r6
 8014c46:	f001 ffef 	bl	8016c28 <_free_r>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8014c4e:	89a3      	ldrh	r3, [r4, #12]
 8014c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c54:	81a3      	strh	r3, [r4, #12]
 8014c56:	2300      	movs	r3, #0
 8014c58:	6063      	str	r3, [r4, #4]
 8014c5a:	6923      	ldr	r3, [r4, #16]
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	f043 0308 	orr.w	r3, r3, #8
 8014c64:	81a3      	strh	r3, [r4, #12]
 8014c66:	6923      	ldr	r3, [r4, #16]
 8014c68:	b94b      	cbnz	r3, 8014c7e <__swsetup_r+0x9a>
 8014c6a:	89a3      	ldrh	r3, [r4, #12]
 8014c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c74:	d003      	beq.n	8014c7e <__swsetup_r+0x9a>
 8014c76:	4621      	mov	r1, r4
 8014c78:	4630      	mov	r0, r6
 8014c7a:	f001 fb6d 	bl	8016358 <__smakebuf_r>
 8014c7e:	89a2      	ldrh	r2, [r4, #12]
 8014c80:	f012 0301 	ands.w	r3, r2, #1
 8014c84:	d00c      	beq.n	8014ca0 <__swsetup_r+0xbc>
 8014c86:	2300      	movs	r3, #0
 8014c88:	60a3      	str	r3, [r4, #8]
 8014c8a:	6963      	ldr	r3, [r4, #20]
 8014c8c:	425b      	negs	r3, r3
 8014c8e:	61a3      	str	r3, [r4, #24]
 8014c90:	6923      	ldr	r3, [r4, #16]
 8014c92:	b953      	cbnz	r3, 8014caa <__swsetup_r+0xc6>
 8014c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014c9c:	d1ba      	bne.n	8014c14 <__swsetup_r+0x30>
 8014c9e:	bd70      	pop	{r4, r5, r6, pc}
 8014ca0:	0792      	lsls	r2, r2, #30
 8014ca2:	bf58      	it	pl
 8014ca4:	6963      	ldrpl	r3, [r4, #20]
 8014ca6:	60a3      	str	r3, [r4, #8]
 8014ca8:	e7f2      	b.n	8014c90 <__swsetup_r+0xac>
 8014caa:	2000      	movs	r0, #0
 8014cac:	e7f7      	b.n	8014c9e <__swsetup_r+0xba>
 8014cae:	bf00      	nop
 8014cb0:	2000000c 	.word	0x2000000c
 8014cb4:	08018500 	.word	0x08018500
 8014cb8:	08018520 	.word	0x08018520
 8014cbc:	080184e0 	.word	0x080184e0

08014cc0 <_close_r>:
 8014cc0:	b538      	push	{r3, r4, r5, lr}
 8014cc2:	4c06      	ldr	r4, [pc, #24]	; (8014cdc <_close_r+0x1c>)
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	4605      	mov	r5, r0
 8014cc8:	4608      	mov	r0, r1
 8014cca:	6023      	str	r3, [r4, #0]
 8014ccc:	f7f0 ff13 	bl	8005af6 <_close>
 8014cd0:	1c43      	adds	r3, r0, #1
 8014cd2:	d102      	bne.n	8014cda <_close_r+0x1a>
 8014cd4:	6823      	ldr	r3, [r4, #0]
 8014cd6:	b103      	cbz	r3, 8014cda <_close_r+0x1a>
 8014cd8:	602b      	str	r3, [r5, #0]
 8014cda:	bd38      	pop	{r3, r4, r5, pc}
 8014cdc:	2003be1c 	.word	0x2003be1c

08014ce0 <quorem>:
 8014ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce4:	6903      	ldr	r3, [r0, #16]
 8014ce6:	690c      	ldr	r4, [r1, #16]
 8014ce8:	42a3      	cmp	r3, r4
 8014cea:	4680      	mov	r8, r0
 8014cec:	f2c0 8082 	blt.w	8014df4 <quorem+0x114>
 8014cf0:	3c01      	subs	r4, #1
 8014cf2:	f101 0714 	add.w	r7, r1, #20
 8014cf6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014cfa:	f100 0614 	add.w	r6, r0, #20
 8014cfe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014d02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014d06:	eb06 030c 	add.w	r3, r6, ip
 8014d0a:	3501      	adds	r5, #1
 8014d0c:	eb07 090c 	add.w	r9, r7, ip
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	fbb0 f5f5 	udiv	r5, r0, r5
 8014d16:	b395      	cbz	r5, 8014d7e <quorem+0x9e>
 8014d18:	f04f 0a00 	mov.w	sl, #0
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	46b6      	mov	lr, r6
 8014d20:	46d3      	mov	fp, sl
 8014d22:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d26:	b293      	uxth	r3, r2
 8014d28:	fb05 a303 	mla	r3, r5, r3, sl
 8014d2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	ebab 0303 	sub.w	r3, fp, r3
 8014d36:	0c12      	lsrs	r2, r2, #16
 8014d38:	f8de b000 	ldr.w	fp, [lr]
 8014d3c:	fb05 a202 	mla	r2, r5, r2, sl
 8014d40:	fa13 f38b 	uxtah	r3, r3, fp
 8014d44:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014d48:	fa1f fb82 	uxth.w	fp, r2
 8014d4c:	f8de 2000 	ldr.w	r2, [lr]
 8014d50:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014d54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d5e:	4581      	cmp	r9, r0
 8014d60:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014d64:	f84e 3b04 	str.w	r3, [lr], #4
 8014d68:	d2db      	bcs.n	8014d22 <quorem+0x42>
 8014d6a:	f856 300c 	ldr.w	r3, [r6, ip]
 8014d6e:	b933      	cbnz	r3, 8014d7e <quorem+0x9e>
 8014d70:	9b01      	ldr	r3, [sp, #4]
 8014d72:	3b04      	subs	r3, #4
 8014d74:	429e      	cmp	r6, r3
 8014d76:	461a      	mov	r2, r3
 8014d78:	d330      	bcc.n	8014ddc <quorem+0xfc>
 8014d7a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014d7e:	4640      	mov	r0, r8
 8014d80:	f001 fd98 	bl	80168b4 <__mcmp>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	db25      	blt.n	8014dd4 <quorem+0xf4>
 8014d88:	3501      	adds	r5, #1
 8014d8a:	4630      	mov	r0, r6
 8014d8c:	f04f 0c00 	mov.w	ip, #0
 8014d90:	f857 2b04 	ldr.w	r2, [r7], #4
 8014d94:	f8d0 e000 	ldr.w	lr, [r0]
 8014d98:	b293      	uxth	r3, r2
 8014d9a:	ebac 0303 	sub.w	r3, ip, r3
 8014d9e:	0c12      	lsrs	r2, r2, #16
 8014da0:	fa13 f38e 	uxtah	r3, r3, lr
 8014da4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014db2:	45b9      	cmp	r9, r7
 8014db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014db8:	f840 3b04 	str.w	r3, [r0], #4
 8014dbc:	d2e8      	bcs.n	8014d90 <quorem+0xb0>
 8014dbe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014dc2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014dc6:	b92a      	cbnz	r2, 8014dd4 <quorem+0xf4>
 8014dc8:	3b04      	subs	r3, #4
 8014dca:	429e      	cmp	r6, r3
 8014dcc:	461a      	mov	r2, r3
 8014dce:	d30b      	bcc.n	8014de8 <quorem+0x108>
 8014dd0:	f8c8 4010 	str.w	r4, [r8, #16]
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	b003      	add	sp, #12
 8014dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ddc:	6812      	ldr	r2, [r2, #0]
 8014dde:	3b04      	subs	r3, #4
 8014de0:	2a00      	cmp	r2, #0
 8014de2:	d1ca      	bne.n	8014d7a <quorem+0x9a>
 8014de4:	3c01      	subs	r4, #1
 8014de6:	e7c5      	b.n	8014d74 <quorem+0x94>
 8014de8:	6812      	ldr	r2, [r2, #0]
 8014dea:	3b04      	subs	r3, #4
 8014dec:	2a00      	cmp	r2, #0
 8014dee:	d1ef      	bne.n	8014dd0 <quorem+0xf0>
 8014df0:	3c01      	subs	r4, #1
 8014df2:	e7ea      	b.n	8014dca <quorem+0xea>
 8014df4:	2000      	movs	r0, #0
 8014df6:	e7ee      	b.n	8014dd6 <quorem+0xf6>

08014df8 <_dtoa_r>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	ec57 6b10 	vmov	r6, r7, d0
 8014e00:	b097      	sub	sp, #92	; 0x5c
 8014e02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e04:	9106      	str	r1, [sp, #24]
 8014e06:	4604      	mov	r4, r0
 8014e08:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e0a:	9312      	str	r3, [sp, #72]	; 0x48
 8014e0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014e10:	e9cd 6700 	strd	r6, r7, [sp]
 8014e14:	b93d      	cbnz	r5, 8014e26 <_dtoa_r+0x2e>
 8014e16:	2010      	movs	r0, #16
 8014e18:	f001 fade 	bl	80163d8 <malloc>
 8014e1c:	6260      	str	r0, [r4, #36]	; 0x24
 8014e1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e22:	6005      	str	r5, [r0, #0]
 8014e24:	60c5      	str	r5, [r0, #12]
 8014e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e28:	6819      	ldr	r1, [r3, #0]
 8014e2a:	b151      	cbz	r1, 8014e42 <_dtoa_r+0x4a>
 8014e2c:	685a      	ldr	r2, [r3, #4]
 8014e2e:	604a      	str	r2, [r1, #4]
 8014e30:	2301      	movs	r3, #1
 8014e32:	4093      	lsls	r3, r2
 8014e34:	608b      	str	r3, [r1, #8]
 8014e36:	4620      	mov	r0, r4
 8014e38:	f001 fb1c 	bl	8016474 <_Bfree>
 8014e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e3e:	2200      	movs	r2, #0
 8014e40:	601a      	str	r2, [r3, #0]
 8014e42:	1e3b      	subs	r3, r7, #0
 8014e44:	bfbb      	ittet	lt
 8014e46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e4a:	9301      	strlt	r3, [sp, #4]
 8014e4c:	2300      	movge	r3, #0
 8014e4e:	2201      	movlt	r2, #1
 8014e50:	bfac      	ite	ge
 8014e52:	f8c8 3000 	strge.w	r3, [r8]
 8014e56:	f8c8 2000 	strlt.w	r2, [r8]
 8014e5a:	4baf      	ldr	r3, [pc, #700]	; (8015118 <_dtoa_r+0x320>)
 8014e5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014e60:	ea33 0308 	bics.w	r3, r3, r8
 8014e64:	d114      	bne.n	8014e90 <_dtoa_r+0x98>
 8014e66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e68:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e6c:	6013      	str	r3, [r2, #0]
 8014e6e:	9b00      	ldr	r3, [sp, #0]
 8014e70:	b923      	cbnz	r3, 8014e7c <_dtoa_r+0x84>
 8014e72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014e76:	2800      	cmp	r0, #0
 8014e78:	f000 8542 	beq.w	8015900 <_dtoa_r+0xb08>
 8014e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801512c <_dtoa_r+0x334>
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	f000 8544 	beq.w	8015910 <_dtoa_r+0xb18>
 8014e88:	f10b 0303 	add.w	r3, fp, #3
 8014e8c:	f000 bd3e 	b.w	801590c <_dtoa_r+0xb14>
 8014e90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014e94:	2200      	movs	r2, #0
 8014e96:	2300      	movs	r3, #0
 8014e98:	4630      	mov	r0, r6
 8014e9a:	4639      	mov	r1, r7
 8014e9c:	f7eb fe2c 	bl	8000af8 <__aeabi_dcmpeq>
 8014ea0:	4681      	mov	r9, r0
 8014ea2:	b168      	cbz	r0, 8014ec0 <_dtoa_r+0xc8>
 8014ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	6013      	str	r3, [r2, #0]
 8014eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	f000 8524 	beq.w	80158fa <_dtoa_r+0xb02>
 8014eb2:	4b9a      	ldr	r3, [pc, #616]	; (801511c <_dtoa_r+0x324>)
 8014eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014eb6:	f103 3bff 	add.w	fp, r3, #4294967295
 8014eba:	6013      	str	r3, [r2, #0]
 8014ebc:	f000 bd28 	b.w	8015910 <_dtoa_r+0xb18>
 8014ec0:	aa14      	add	r2, sp, #80	; 0x50
 8014ec2:	a915      	add	r1, sp, #84	; 0x54
 8014ec4:	ec47 6b10 	vmov	d0, r6, r7
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f001 fde1 	bl	8016a90 <__d2b>
 8014ece:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014ed2:	9004      	str	r0, [sp, #16]
 8014ed4:	2d00      	cmp	r5, #0
 8014ed6:	d07c      	beq.n	8014fd2 <_dtoa_r+0x1da>
 8014ed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014edc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014ee0:	46b2      	mov	sl, r6
 8014ee2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014eea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014eee:	2200      	movs	r2, #0
 8014ef0:	4b8b      	ldr	r3, [pc, #556]	; (8015120 <_dtoa_r+0x328>)
 8014ef2:	4650      	mov	r0, sl
 8014ef4:	4659      	mov	r1, fp
 8014ef6:	f7eb f9df 	bl	80002b8 <__aeabi_dsub>
 8014efa:	a381      	add	r3, pc, #516	; (adr r3, 8015100 <_dtoa_r+0x308>)
 8014efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f00:	f7eb fb92 	bl	8000628 <__aeabi_dmul>
 8014f04:	a380      	add	r3, pc, #512	; (adr r3, 8015108 <_dtoa_r+0x310>)
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	f7eb f9d7 	bl	80002bc <__adddf3>
 8014f0e:	4606      	mov	r6, r0
 8014f10:	4628      	mov	r0, r5
 8014f12:	460f      	mov	r7, r1
 8014f14:	f7eb fb1e 	bl	8000554 <__aeabi_i2d>
 8014f18:	a37d      	add	r3, pc, #500	; (adr r3, 8015110 <_dtoa_r+0x318>)
 8014f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1e:	f7eb fb83 	bl	8000628 <__aeabi_dmul>
 8014f22:	4602      	mov	r2, r0
 8014f24:	460b      	mov	r3, r1
 8014f26:	4630      	mov	r0, r6
 8014f28:	4639      	mov	r1, r7
 8014f2a:	f7eb f9c7 	bl	80002bc <__adddf3>
 8014f2e:	4606      	mov	r6, r0
 8014f30:	460f      	mov	r7, r1
 8014f32:	f7eb fe29 	bl	8000b88 <__aeabi_d2iz>
 8014f36:	2200      	movs	r2, #0
 8014f38:	4682      	mov	sl, r0
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	4639      	mov	r1, r7
 8014f40:	f7eb fde4 	bl	8000b0c <__aeabi_dcmplt>
 8014f44:	b148      	cbz	r0, 8014f5a <_dtoa_r+0x162>
 8014f46:	4650      	mov	r0, sl
 8014f48:	f7eb fb04 	bl	8000554 <__aeabi_i2d>
 8014f4c:	4632      	mov	r2, r6
 8014f4e:	463b      	mov	r3, r7
 8014f50:	f7eb fdd2 	bl	8000af8 <__aeabi_dcmpeq>
 8014f54:	b908      	cbnz	r0, 8014f5a <_dtoa_r+0x162>
 8014f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f5a:	f1ba 0f16 	cmp.w	sl, #22
 8014f5e:	d859      	bhi.n	8015014 <_dtoa_r+0x21c>
 8014f60:	4970      	ldr	r1, [pc, #448]	; (8015124 <_dtoa_r+0x32c>)
 8014f62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f6e:	f7eb fdeb 	bl	8000b48 <__aeabi_dcmpgt>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	d050      	beq.n	8015018 <_dtoa_r+0x220>
 8014f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f80:	1b5d      	subs	r5, r3, r5
 8014f82:	f1b5 0801 	subs.w	r8, r5, #1
 8014f86:	bf49      	itett	mi
 8014f88:	f1c5 0301 	rsbmi	r3, r5, #1
 8014f8c:	2300      	movpl	r3, #0
 8014f8e:	9305      	strmi	r3, [sp, #20]
 8014f90:	f04f 0800 	movmi.w	r8, #0
 8014f94:	bf58      	it	pl
 8014f96:	9305      	strpl	r3, [sp, #20]
 8014f98:	f1ba 0f00 	cmp.w	sl, #0
 8014f9c:	db3e      	blt.n	801501c <_dtoa_r+0x224>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	44d0      	add	r8, sl
 8014fa2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014fa6:	9307      	str	r3, [sp, #28]
 8014fa8:	9b06      	ldr	r3, [sp, #24]
 8014faa:	2b09      	cmp	r3, #9
 8014fac:	f200 8090 	bhi.w	80150d0 <_dtoa_r+0x2d8>
 8014fb0:	2b05      	cmp	r3, #5
 8014fb2:	bfc4      	itt	gt
 8014fb4:	3b04      	subgt	r3, #4
 8014fb6:	9306      	strgt	r3, [sp, #24]
 8014fb8:	9b06      	ldr	r3, [sp, #24]
 8014fba:	f1a3 0302 	sub.w	r3, r3, #2
 8014fbe:	bfcc      	ite	gt
 8014fc0:	2500      	movgt	r5, #0
 8014fc2:	2501      	movle	r5, #1
 8014fc4:	2b03      	cmp	r3, #3
 8014fc6:	f200 808f 	bhi.w	80150e8 <_dtoa_r+0x2f0>
 8014fca:	e8df f003 	tbb	[pc, r3]
 8014fce:	7f7d      	.short	0x7f7d
 8014fd0:	7131      	.short	0x7131
 8014fd2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014fd6:	441d      	add	r5, r3
 8014fd8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014fdc:	2820      	cmp	r0, #32
 8014fde:	dd13      	ble.n	8015008 <_dtoa_r+0x210>
 8014fe0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014fe4:	9b00      	ldr	r3, [sp, #0]
 8014fe6:	fa08 f800 	lsl.w	r8, r8, r0
 8014fea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014fee:	fa23 f000 	lsr.w	r0, r3, r0
 8014ff2:	ea48 0000 	orr.w	r0, r8, r0
 8014ff6:	f7eb fa9d 	bl	8000534 <__aeabi_ui2d>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	4682      	mov	sl, r0
 8014ffe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015002:	3d01      	subs	r5, #1
 8015004:	9313      	str	r3, [sp, #76]	; 0x4c
 8015006:	e772      	b.n	8014eee <_dtoa_r+0xf6>
 8015008:	9b00      	ldr	r3, [sp, #0]
 801500a:	f1c0 0020 	rsb	r0, r0, #32
 801500e:	fa03 f000 	lsl.w	r0, r3, r0
 8015012:	e7f0      	b.n	8014ff6 <_dtoa_r+0x1fe>
 8015014:	2301      	movs	r3, #1
 8015016:	e7b1      	b.n	8014f7c <_dtoa_r+0x184>
 8015018:	900f      	str	r0, [sp, #60]	; 0x3c
 801501a:	e7b0      	b.n	8014f7e <_dtoa_r+0x186>
 801501c:	9b05      	ldr	r3, [sp, #20]
 801501e:	eba3 030a 	sub.w	r3, r3, sl
 8015022:	9305      	str	r3, [sp, #20]
 8015024:	f1ca 0300 	rsb	r3, sl, #0
 8015028:	9307      	str	r3, [sp, #28]
 801502a:	2300      	movs	r3, #0
 801502c:	930e      	str	r3, [sp, #56]	; 0x38
 801502e:	e7bb      	b.n	8014fa8 <_dtoa_r+0x1b0>
 8015030:	2301      	movs	r3, #1
 8015032:	930a      	str	r3, [sp, #40]	; 0x28
 8015034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015036:	2b00      	cmp	r3, #0
 8015038:	dd59      	ble.n	80150ee <_dtoa_r+0x2f6>
 801503a:	9302      	str	r3, [sp, #8]
 801503c:	4699      	mov	r9, r3
 801503e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015040:	2200      	movs	r2, #0
 8015042:	6072      	str	r2, [r6, #4]
 8015044:	2204      	movs	r2, #4
 8015046:	f102 0014 	add.w	r0, r2, #20
 801504a:	4298      	cmp	r0, r3
 801504c:	6871      	ldr	r1, [r6, #4]
 801504e:	d953      	bls.n	80150f8 <_dtoa_r+0x300>
 8015050:	4620      	mov	r0, r4
 8015052:	f001 f9db 	bl	801640c <_Balloc>
 8015056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015058:	6030      	str	r0, [r6, #0]
 801505a:	f1b9 0f0e 	cmp.w	r9, #14
 801505e:	f8d3 b000 	ldr.w	fp, [r3]
 8015062:	f200 80e6 	bhi.w	8015232 <_dtoa_r+0x43a>
 8015066:	2d00      	cmp	r5, #0
 8015068:	f000 80e3 	beq.w	8015232 <_dtoa_r+0x43a>
 801506c:	ed9d 7b00 	vldr	d7, [sp]
 8015070:	f1ba 0f00 	cmp.w	sl, #0
 8015074:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015078:	dd74      	ble.n	8015164 <_dtoa_r+0x36c>
 801507a:	4a2a      	ldr	r2, [pc, #168]	; (8015124 <_dtoa_r+0x32c>)
 801507c:	f00a 030f 	and.w	r3, sl, #15
 8015080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015084:	ed93 7b00 	vldr	d7, [r3]
 8015088:	ea4f 162a 	mov.w	r6, sl, asr #4
 801508c:	06f0      	lsls	r0, r6, #27
 801508e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015092:	d565      	bpl.n	8015160 <_dtoa_r+0x368>
 8015094:	4b24      	ldr	r3, [pc, #144]	; (8015128 <_dtoa_r+0x330>)
 8015096:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801509a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801509e:	f7eb fbed 	bl	800087c <__aeabi_ddiv>
 80150a2:	e9cd 0100 	strd	r0, r1, [sp]
 80150a6:	f006 060f 	and.w	r6, r6, #15
 80150aa:	2503      	movs	r5, #3
 80150ac:	4f1e      	ldr	r7, [pc, #120]	; (8015128 <_dtoa_r+0x330>)
 80150ae:	e04c      	b.n	801514a <_dtoa_r+0x352>
 80150b0:	2301      	movs	r3, #1
 80150b2:	930a      	str	r3, [sp, #40]	; 0x28
 80150b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150b6:	4453      	add	r3, sl
 80150b8:	f103 0901 	add.w	r9, r3, #1
 80150bc:	9302      	str	r3, [sp, #8]
 80150be:	464b      	mov	r3, r9
 80150c0:	2b01      	cmp	r3, #1
 80150c2:	bfb8      	it	lt
 80150c4:	2301      	movlt	r3, #1
 80150c6:	e7ba      	b.n	801503e <_dtoa_r+0x246>
 80150c8:	2300      	movs	r3, #0
 80150ca:	e7b2      	b.n	8015032 <_dtoa_r+0x23a>
 80150cc:	2300      	movs	r3, #0
 80150ce:	e7f0      	b.n	80150b2 <_dtoa_r+0x2ba>
 80150d0:	2501      	movs	r5, #1
 80150d2:	2300      	movs	r3, #0
 80150d4:	9306      	str	r3, [sp, #24]
 80150d6:	950a      	str	r5, [sp, #40]	; 0x28
 80150d8:	f04f 33ff 	mov.w	r3, #4294967295
 80150dc:	9302      	str	r3, [sp, #8]
 80150de:	4699      	mov	r9, r3
 80150e0:	2200      	movs	r2, #0
 80150e2:	2312      	movs	r3, #18
 80150e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80150e6:	e7aa      	b.n	801503e <_dtoa_r+0x246>
 80150e8:	2301      	movs	r3, #1
 80150ea:	930a      	str	r3, [sp, #40]	; 0x28
 80150ec:	e7f4      	b.n	80150d8 <_dtoa_r+0x2e0>
 80150ee:	2301      	movs	r3, #1
 80150f0:	9302      	str	r3, [sp, #8]
 80150f2:	4699      	mov	r9, r3
 80150f4:	461a      	mov	r2, r3
 80150f6:	e7f5      	b.n	80150e4 <_dtoa_r+0x2ec>
 80150f8:	3101      	adds	r1, #1
 80150fa:	6071      	str	r1, [r6, #4]
 80150fc:	0052      	lsls	r2, r2, #1
 80150fe:	e7a2      	b.n	8015046 <_dtoa_r+0x24e>
 8015100:	636f4361 	.word	0x636f4361
 8015104:	3fd287a7 	.word	0x3fd287a7
 8015108:	8b60c8b3 	.word	0x8b60c8b3
 801510c:	3fc68a28 	.word	0x3fc68a28
 8015110:	509f79fb 	.word	0x509f79fb
 8015114:	3fd34413 	.word	0x3fd34413
 8015118:	7ff00000 	.word	0x7ff00000
 801511c:	08018674 	.word	0x08018674
 8015120:	3ff80000 	.word	0x3ff80000
 8015124:	08018578 	.word	0x08018578
 8015128:	08018550 	.word	0x08018550
 801512c:	080184d9 	.word	0x080184d9
 8015130:	07f1      	lsls	r1, r6, #31
 8015132:	d508      	bpl.n	8015146 <_dtoa_r+0x34e>
 8015134:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015138:	e9d7 2300 	ldrd	r2, r3, [r7]
 801513c:	f7eb fa74 	bl	8000628 <__aeabi_dmul>
 8015140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015144:	3501      	adds	r5, #1
 8015146:	1076      	asrs	r6, r6, #1
 8015148:	3708      	adds	r7, #8
 801514a:	2e00      	cmp	r6, #0
 801514c:	d1f0      	bne.n	8015130 <_dtoa_r+0x338>
 801514e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015156:	f7eb fb91 	bl	800087c <__aeabi_ddiv>
 801515a:	e9cd 0100 	strd	r0, r1, [sp]
 801515e:	e01a      	b.n	8015196 <_dtoa_r+0x39e>
 8015160:	2502      	movs	r5, #2
 8015162:	e7a3      	b.n	80150ac <_dtoa_r+0x2b4>
 8015164:	f000 80a0 	beq.w	80152a8 <_dtoa_r+0x4b0>
 8015168:	f1ca 0600 	rsb	r6, sl, #0
 801516c:	4b9f      	ldr	r3, [pc, #636]	; (80153ec <_dtoa_r+0x5f4>)
 801516e:	4fa0      	ldr	r7, [pc, #640]	; (80153f0 <_dtoa_r+0x5f8>)
 8015170:	f006 020f 	and.w	r2, r6, #15
 8015174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015180:	f7eb fa52 	bl	8000628 <__aeabi_dmul>
 8015184:	e9cd 0100 	strd	r0, r1, [sp]
 8015188:	1136      	asrs	r6, r6, #4
 801518a:	2300      	movs	r3, #0
 801518c:	2502      	movs	r5, #2
 801518e:	2e00      	cmp	r6, #0
 8015190:	d17f      	bne.n	8015292 <_dtoa_r+0x49a>
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1e1      	bne.n	801515a <_dtoa_r+0x362>
 8015196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015198:	2b00      	cmp	r3, #0
 801519a:	f000 8087 	beq.w	80152ac <_dtoa_r+0x4b4>
 801519e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151a2:	2200      	movs	r2, #0
 80151a4:	4b93      	ldr	r3, [pc, #588]	; (80153f4 <_dtoa_r+0x5fc>)
 80151a6:	4630      	mov	r0, r6
 80151a8:	4639      	mov	r1, r7
 80151aa:	f7eb fcaf 	bl	8000b0c <__aeabi_dcmplt>
 80151ae:	2800      	cmp	r0, #0
 80151b0:	d07c      	beq.n	80152ac <_dtoa_r+0x4b4>
 80151b2:	f1b9 0f00 	cmp.w	r9, #0
 80151b6:	d079      	beq.n	80152ac <_dtoa_r+0x4b4>
 80151b8:	9b02      	ldr	r3, [sp, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	dd35      	ble.n	801522a <_dtoa_r+0x432>
 80151be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80151c2:	9308      	str	r3, [sp, #32]
 80151c4:	4639      	mov	r1, r7
 80151c6:	2200      	movs	r2, #0
 80151c8:	4b8b      	ldr	r3, [pc, #556]	; (80153f8 <_dtoa_r+0x600>)
 80151ca:	4630      	mov	r0, r6
 80151cc:	f7eb fa2c 	bl	8000628 <__aeabi_dmul>
 80151d0:	e9cd 0100 	strd	r0, r1, [sp]
 80151d4:	9f02      	ldr	r7, [sp, #8]
 80151d6:	3501      	adds	r5, #1
 80151d8:	4628      	mov	r0, r5
 80151da:	f7eb f9bb 	bl	8000554 <__aeabi_i2d>
 80151de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151e2:	f7eb fa21 	bl	8000628 <__aeabi_dmul>
 80151e6:	2200      	movs	r2, #0
 80151e8:	4b84      	ldr	r3, [pc, #528]	; (80153fc <_dtoa_r+0x604>)
 80151ea:	f7eb f867 	bl	80002bc <__adddf3>
 80151ee:	4605      	mov	r5, r0
 80151f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80151f4:	2f00      	cmp	r7, #0
 80151f6:	d15d      	bne.n	80152b4 <_dtoa_r+0x4bc>
 80151f8:	2200      	movs	r2, #0
 80151fa:	4b81      	ldr	r3, [pc, #516]	; (8015400 <_dtoa_r+0x608>)
 80151fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015200:	f7eb f85a 	bl	80002b8 <__aeabi_dsub>
 8015204:	462a      	mov	r2, r5
 8015206:	4633      	mov	r3, r6
 8015208:	e9cd 0100 	strd	r0, r1, [sp]
 801520c:	f7eb fc9c 	bl	8000b48 <__aeabi_dcmpgt>
 8015210:	2800      	cmp	r0, #0
 8015212:	f040 8288 	bne.w	8015726 <_dtoa_r+0x92e>
 8015216:	462a      	mov	r2, r5
 8015218:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801521c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015220:	f7eb fc74 	bl	8000b0c <__aeabi_dcmplt>
 8015224:	2800      	cmp	r0, #0
 8015226:	f040 827c 	bne.w	8015722 <_dtoa_r+0x92a>
 801522a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801522e:	e9cd 2300 	strd	r2, r3, [sp]
 8015232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015234:	2b00      	cmp	r3, #0
 8015236:	f2c0 8150 	blt.w	80154da <_dtoa_r+0x6e2>
 801523a:	f1ba 0f0e 	cmp.w	sl, #14
 801523e:	f300 814c 	bgt.w	80154da <_dtoa_r+0x6e2>
 8015242:	4b6a      	ldr	r3, [pc, #424]	; (80153ec <_dtoa_r+0x5f4>)
 8015244:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015248:	ed93 7b00 	vldr	d7, [r3]
 801524c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801524e:	2b00      	cmp	r3, #0
 8015250:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015254:	f280 80d8 	bge.w	8015408 <_dtoa_r+0x610>
 8015258:	f1b9 0f00 	cmp.w	r9, #0
 801525c:	f300 80d4 	bgt.w	8015408 <_dtoa_r+0x610>
 8015260:	f040 825e 	bne.w	8015720 <_dtoa_r+0x928>
 8015264:	2200      	movs	r2, #0
 8015266:	4b66      	ldr	r3, [pc, #408]	; (8015400 <_dtoa_r+0x608>)
 8015268:	ec51 0b17 	vmov	r0, r1, d7
 801526c:	f7eb f9dc 	bl	8000628 <__aeabi_dmul>
 8015270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015274:	f7eb fc5e 	bl	8000b34 <__aeabi_dcmpge>
 8015278:	464f      	mov	r7, r9
 801527a:	464e      	mov	r6, r9
 801527c:	2800      	cmp	r0, #0
 801527e:	f040 8234 	bne.w	80156ea <_dtoa_r+0x8f2>
 8015282:	2331      	movs	r3, #49	; 0x31
 8015284:	f10b 0501 	add.w	r5, fp, #1
 8015288:	f88b 3000 	strb.w	r3, [fp]
 801528c:	f10a 0a01 	add.w	sl, sl, #1
 8015290:	e22f      	b.n	80156f2 <_dtoa_r+0x8fa>
 8015292:	07f2      	lsls	r2, r6, #31
 8015294:	d505      	bpl.n	80152a2 <_dtoa_r+0x4aa>
 8015296:	e9d7 2300 	ldrd	r2, r3, [r7]
 801529a:	f7eb f9c5 	bl	8000628 <__aeabi_dmul>
 801529e:	3501      	adds	r5, #1
 80152a0:	2301      	movs	r3, #1
 80152a2:	1076      	asrs	r6, r6, #1
 80152a4:	3708      	adds	r7, #8
 80152a6:	e772      	b.n	801518e <_dtoa_r+0x396>
 80152a8:	2502      	movs	r5, #2
 80152aa:	e774      	b.n	8015196 <_dtoa_r+0x39e>
 80152ac:	f8cd a020 	str.w	sl, [sp, #32]
 80152b0:	464f      	mov	r7, r9
 80152b2:	e791      	b.n	80151d8 <_dtoa_r+0x3e0>
 80152b4:	4b4d      	ldr	r3, [pc, #308]	; (80153ec <_dtoa_r+0x5f4>)
 80152b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80152be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d047      	beq.n	8015354 <_dtoa_r+0x55c>
 80152c4:	4602      	mov	r2, r0
 80152c6:	460b      	mov	r3, r1
 80152c8:	2000      	movs	r0, #0
 80152ca:	494e      	ldr	r1, [pc, #312]	; (8015404 <_dtoa_r+0x60c>)
 80152cc:	f7eb fad6 	bl	800087c <__aeabi_ddiv>
 80152d0:	462a      	mov	r2, r5
 80152d2:	4633      	mov	r3, r6
 80152d4:	f7ea fff0 	bl	80002b8 <__aeabi_dsub>
 80152d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80152dc:	465d      	mov	r5, fp
 80152de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152e2:	f7eb fc51 	bl	8000b88 <__aeabi_d2iz>
 80152e6:	4606      	mov	r6, r0
 80152e8:	f7eb f934 	bl	8000554 <__aeabi_i2d>
 80152ec:	4602      	mov	r2, r0
 80152ee:	460b      	mov	r3, r1
 80152f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152f4:	f7ea ffe0 	bl	80002b8 <__aeabi_dsub>
 80152f8:	3630      	adds	r6, #48	; 0x30
 80152fa:	f805 6b01 	strb.w	r6, [r5], #1
 80152fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015302:	e9cd 0100 	strd	r0, r1, [sp]
 8015306:	f7eb fc01 	bl	8000b0c <__aeabi_dcmplt>
 801530a:	2800      	cmp	r0, #0
 801530c:	d163      	bne.n	80153d6 <_dtoa_r+0x5de>
 801530e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015312:	2000      	movs	r0, #0
 8015314:	4937      	ldr	r1, [pc, #220]	; (80153f4 <_dtoa_r+0x5fc>)
 8015316:	f7ea ffcf 	bl	80002b8 <__aeabi_dsub>
 801531a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801531e:	f7eb fbf5 	bl	8000b0c <__aeabi_dcmplt>
 8015322:	2800      	cmp	r0, #0
 8015324:	f040 80b7 	bne.w	8015496 <_dtoa_r+0x69e>
 8015328:	eba5 030b 	sub.w	r3, r5, fp
 801532c:	429f      	cmp	r7, r3
 801532e:	f77f af7c 	ble.w	801522a <_dtoa_r+0x432>
 8015332:	2200      	movs	r2, #0
 8015334:	4b30      	ldr	r3, [pc, #192]	; (80153f8 <_dtoa_r+0x600>)
 8015336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801533a:	f7eb f975 	bl	8000628 <__aeabi_dmul>
 801533e:	2200      	movs	r2, #0
 8015340:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015344:	4b2c      	ldr	r3, [pc, #176]	; (80153f8 <_dtoa_r+0x600>)
 8015346:	e9dd 0100 	ldrd	r0, r1, [sp]
 801534a:	f7eb f96d 	bl	8000628 <__aeabi_dmul>
 801534e:	e9cd 0100 	strd	r0, r1, [sp]
 8015352:	e7c4      	b.n	80152de <_dtoa_r+0x4e6>
 8015354:	462a      	mov	r2, r5
 8015356:	4633      	mov	r3, r6
 8015358:	f7eb f966 	bl	8000628 <__aeabi_dmul>
 801535c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015360:	eb0b 0507 	add.w	r5, fp, r7
 8015364:	465e      	mov	r6, fp
 8015366:	e9dd 0100 	ldrd	r0, r1, [sp]
 801536a:	f7eb fc0d 	bl	8000b88 <__aeabi_d2iz>
 801536e:	4607      	mov	r7, r0
 8015370:	f7eb f8f0 	bl	8000554 <__aeabi_i2d>
 8015374:	3730      	adds	r7, #48	; 0x30
 8015376:	4602      	mov	r2, r0
 8015378:	460b      	mov	r3, r1
 801537a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801537e:	f7ea ff9b 	bl	80002b8 <__aeabi_dsub>
 8015382:	f806 7b01 	strb.w	r7, [r6], #1
 8015386:	42ae      	cmp	r6, r5
 8015388:	e9cd 0100 	strd	r0, r1, [sp]
 801538c:	f04f 0200 	mov.w	r2, #0
 8015390:	d126      	bne.n	80153e0 <_dtoa_r+0x5e8>
 8015392:	4b1c      	ldr	r3, [pc, #112]	; (8015404 <_dtoa_r+0x60c>)
 8015394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015398:	f7ea ff90 	bl	80002bc <__adddf3>
 801539c:	4602      	mov	r2, r0
 801539e:	460b      	mov	r3, r1
 80153a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153a4:	f7eb fbd0 	bl	8000b48 <__aeabi_dcmpgt>
 80153a8:	2800      	cmp	r0, #0
 80153aa:	d174      	bne.n	8015496 <_dtoa_r+0x69e>
 80153ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80153b0:	2000      	movs	r0, #0
 80153b2:	4914      	ldr	r1, [pc, #80]	; (8015404 <_dtoa_r+0x60c>)
 80153b4:	f7ea ff80 	bl	80002b8 <__aeabi_dsub>
 80153b8:	4602      	mov	r2, r0
 80153ba:	460b      	mov	r3, r1
 80153bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153c0:	f7eb fba4 	bl	8000b0c <__aeabi_dcmplt>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	f43f af30 	beq.w	801522a <_dtoa_r+0x432>
 80153ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80153ce:	2b30      	cmp	r3, #48	; 0x30
 80153d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80153d4:	d002      	beq.n	80153dc <_dtoa_r+0x5e4>
 80153d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80153da:	e04a      	b.n	8015472 <_dtoa_r+0x67a>
 80153dc:	4615      	mov	r5, r2
 80153de:	e7f4      	b.n	80153ca <_dtoa_r+0x5d2>
 80153e0:	4b05      	ldr	r3, [pc, #20]	; (80153f8 <_dtoa_r+0x600>)
 80153e2:	f7eb f921 	bl	8000628 <__aeabi_dmul>
 80153e6:	e9cd 0100 	strd	r0, r1, [sp]
 80153ea:	e7bc      	b.n	8015366 <_dtoa_r+0x56e>
 80153ec:	08018578 	.word	0x08018578
 80153f0:	08018550 	.word	0x08018550
 80153f4:	3ff00000 	.word	0x3ff00000
 80153f8:	40240000 	.word	0x40240000
 80153fc:	401c0000 	.word	0x401c0000
 8015400:	40140000 	.word	0x40140000
 8015404:	3fe00000 	.word	0x3fe00000
 8015408:	e9dd 6700 	ldrd	r6, r7, [sp]
 801540c:	465d      	mov	r5, fp
 801540e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015412:	4630      	mov	r0, r6
 8015414:	4639      	mov	r1, r7
 8015416:	f7eb fa31 	bl	800087c <__aeabi_ddiv>
 801541a:	f7eb fbb5 	bl	8000b88 <__aeabi_d2iz>
 801541e:	4680      	mov	r8, r0
 8015420:	f7eb f898 	bl	8000554 <__aeabi_i2d>
 8015424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015428:	f7eb f8fe 	bl	8000628 <__aeabi_dmul>
 801542c:	4602      	mov	r2, r0
 801542e:	460b      	mov	r3, r1
 8015430:	4630      	mov	r0, r6
 8015432:	4639      	mov	r1, r7
 8015434:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015438:	f7ea ff3e 	bl	80002b8 <__aeabi_dsub>
 801543c:	f805 6b01 	strb.w	r6, [r5], #1
 8015440:	eba5 060b 	sub.w	r6, r5, fp
 8015444:	45b1      	cmp	r9, r6
 8015446:	4602      	mov	r2, r0
 8015448:	460b      	mov	r3, r1
 801544a:	d139      	bne.n	80154c0 <_dtoa_r+0x6c8>
 801544c:	f7ea ff36 	bl	80002bc <__adddf3>
 8015450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015454:	4606      	mov	r6, r0
 8015456:	460f      	mov	r7, r1
 8015458:	f7eb fb76 	bl	8000b48 <__aeabi_dcmpgt>
 801545c:	b9c8      	cbnz	r0, 8015492 <_dtoa_r+0x69a>
 801545e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015462:	4630      	mov	r0, r6
 8015464:	4639      	mov	r1, r7
 8015466:	f7eb fb47 	bl	8000af8 <__aeabi_dcmpeq>
 801546a:	b110      	cbz	r0, 8015472 <_dtoa_r+0x67a>
 801546c:	f018 0f01 	tst.w	r8, #1
 8015470:	d10f      	bne.n	8015492 <_dtoa_r+0x69a>
 8015472:	9904      	ldr	r1, [sp, #16]
 8015474:	4620      	mov	r0, r4
 8015476:	f000 fffd 	bl	8016474 <_Bfree>
 801547a:	2300      	movs	r3, #0
 801547c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801547e:	702b      	strb	r3, [r5, #0]
 8015480:	f10a 0301 	add.w	r3, sl, #1
 8015484:	6013      	str	r3, [r2, #0]
 8015486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015488:	2b00      	cmp	r3, #0
 801548a:	f000 8241 	beq.w	8015910 <_dtoa_r+0xb18>
 801548e:	601d      	str	r5, [r3, #0]
 8015490:	e23e      	b.n	8015910 <_dtoa_r+0xb18>
 8015492:	f8cd a020 	str.w	sl, [sp, #32]
 8015496:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801549a:	2a39      	cmp	r2, #57	; 0x39
 801549c:	f105 33ff 	add.w	r3, r5, #4294967295
 80154a0:	d108      	bne.n	80154b4 <_dtoa_r+0x6bc>
 80154a2:	459b      	cmp	fp, r3
 80154a4:	d10a      	bne.n	80154bc <_dtoa_r+0x6c4>
 80154a6:	9b08      	ldr	r3, [sp, #32]
 80154a8:	3301      	adds	r3, #1
 80154aa:	9308      	str	r3, [sp, #32]
 80154ac:	2330      	movs	r3, #48	; 0x30
 80154ae:	f88b 3000 	strb.w	r3, [fp]
 80154b2:	465b      	mov	r3, fp
 80154b4:	781a      	ldrb	r2, [r3, #0]
 80154b6:	3201      	adds	r2, #1
 80154b8:	701a      	strb	r2, [r3, #0]
 80154ba:	e78c      	b.n	80153d6 <_dtoa_r+0x5de>
 80154bc:	461d      	mov	r5, r3
 80154be:	e7ea      	b.n	8015496 <_dtoa_r+0x69e>
 80154c0:	2200      	movs	r2, #0
 80154c2:	4b9b      	ldr	r3, [pc, #620]	; (8015730 <_dtoa_r+0x938>)
 80154c4:	f7eb f8b0 	bl	8000628 <__aeabi_dmul>
 80154c8:	2200      	movs	r2, #0
 80154ca:	2300      	movs	r3, #0
 80154cc:	4606      	mov	r6, r0
 80154ce:	460f      	mov	r7, r1
 80154d0:	f7eb fb12 	bl	8000af8 <__aeabi_dcmpeq>
 80154d4:	2800      	cmp	r0, #0
 80154d6:	d09a      	beq.n	801540e <_dtoa_r+0x616>
 80154d8:	e7cb      	b.n	8015472 <_dtoa_r+0x67a>
 80154da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154dc:	2a00      	cmp	r2, #0
 80154de:	f000 808b 	beq.w	80155f8 <_dtoa_r+0x800>
 80154e2:	9a06      	ldr	r2, [sp, #24]
 80154e4:	2a01      	cmp	r2, #1
 80154e6:	dc6e      	bgt.n	80155c6 <_dtoa_r+0x7ce>
 80154e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154ea:	2a00      	cmp	r2, #0
 80154ec:	d067      	beq.n	80155be <_dtoa_r+0x7c6>
 80154ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80154f2:	9f07      	ldr	r7, [sp, #28]
 80154f4:	9d05      	ldr	r5, [sp, #20]
 80154f6:	9a05      	ldr	r2, [sp, #20]
 80154f8:	2101      	movs	r1, #1
 80154fa:	441a      	add	r2, r3
 80154fc:	4620      	mov	r0, r4
 80154fe:	9205      	str	r2, [sp, #20]
 8015500:	4498      	add	r8, r3
 8015502:	f001 f895 	bl	8016630 <__i2b>
 8015506:	4606      	mov	r6, r0
 8015508:	2d00      	cmp	r5, #0
 801550a:	dd0c      	ble.n	8015526 <_dtoa_r+0x72e>
 801550c:	f1b8 0f00 	cmp.w	r8, #0
 8015510:	dd09      	ble.n	8015526 <_dtoa_r+0x72e>
 8015512:	4545      	cmp	r5, r8
 8015514:	9a05      	ldr	r2, [sp, #20]
 8015516:	462b      	mov	r3, r5
 8015518:	bfa8      	it	ge
 801551a:	4643      	movge	r3, r8
 801551c:	1ad2      	subs	r2, r2, r3
 801551e:	9205      	str	r2, [sp, #20]
 8015520:	1aed      	subs	r5, r5, r3
 8015522:	eba8 0803 	sub.w	r8, r8, r3
 8015526:	9b07      	ldr	r3, [sp, #28]
 8015528:	b1eb      	cbz	r3, 8015566 <_dtoa_r+0x76e>
 801552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552c:	2b00      	cmp	r3, #0
 801552e:	d067      	beq.n	8015600 <_dtoa_r+0x808>
 8015530:	b18f      	cbz	r7, 8015556 <_dtoa_r+0x75e>
 8015532:	4631      	mov	r1, r6
 8015534:	463a      	mov	r2, r7
 8015536:	4620      	mov	r0, r4
 8015538:	f001 f91a 	bl	8016770 <__pow5mult>
 801553c:	9a04      	ldr	r2, [sp, #16]
 801553e:	4601      	mov	r1, r0
 8015540:	4606      	mov	r6, r0
 8015542:	4620      	mov	r0, r4
 8015544:	f001 f87d 	bl	8016642 <__multiply>
 8015548:	9904      	ldr	r1, [sp, #16]
 801554a:	9008      	str	r0, [sp, #32]
 801554c:	4620      	mov	r0, r4
 801554e:	f000 ff91 	bl	8016474 <_Bfree>
 8015552:	9b08      	ldr	r3, [sp, #32]
 8015554:	9304      	str	r3, [sp, #16]
 8015556:	9b07      	ldr	r3, [sp, #28]
 8015558:	1bda      	subs	r2, r3, r7
 801555a:	d004      	beq.n	8015566 <_dtoa_r+0x76e>
 801555c:	9904      	ldr	r1, [sp, #16]
 801555e:	4620      	mov	r0, r4
 8015560:	f001 f906 	bl	8016770 <__pow5mult>
 8015564:	9004      	str	r0, [sp, #16]
 8015566:	2101      	movs	r1, #1
 8015568:	4620      	mov	r0, r4
 801556a:	f001 f861 	bl	8016630 <__i2b>
 801556e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015570:	4607      	mov	r7, r0
 8015572:	2b00      	cmp	r3, #0
 8015574:	f000 81d0 	beq.w	8015918 <_dtoa_r+0xb20>
 8015578:	461a      	mov	r2, r3
 801557a:	4601      	mov	r1, r0
 801557c:	4620      	mov	r0, r4
 801557e:	f001 f8f7 	bl	8016770 <__pow5mult>
 8015582:	9b06      	ldr	r3, [sp, #24]
 8015584:	2b01      	cmp	r3, #1
 8015586:	4607      	mov	r7, r0
 8015588:	dc40      	bgt.n	801560c <_dtoa_r+0x814>
 801558a:	9b00      	ldr	r3, [sp, #0]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d139      	bne.n	8015604 <_dtoa_r+0x80c>
 8015590:	9b01      	ldr	r3, [sp, #4]
 8015592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015596:	2b00      	cmp	r3, #0
 8015598:	d136      	bne.n	8015608 <_dtoa_r+0x810>
 801559a:	9b01      	ldr	r3, [sp, #4]
 801559c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155a0:	0d1b      	lsrs	r3, r3, #20
 80155a2:	051b      	lsls	r3, r3, #20
 80155a4:	b12b      	cbz	r3, 80155b2 <_dtoa_r+0x7ba>
 80155a6:	9b05      	ldr	r3, [sp, #20]
 80155a8:	3301      	adds	r3, #1
 80155aa:	9305      	str	r3, [sp, #20]
 80155ac:	f108 0801 	add.w	r8, r8, #1
 80155b0:	2301      	movs	r3, #1
 80155b2:	9307      	str	r3, [sp, #28]
 80155b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d12a      	bne.n	8015610 <_dtoa_r+0x818>
 80155ba:	2001      	movs	r0, #1
 80155bc:	e030      	b.n	8015620 <_dtoa_r+0x828>
 80155be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80155c4:	e795      	b.n	80154f2 <_dtoa_r+0x6fa>
 80155c6:	9b07      	ldr	r3, [sp, #28]
 80155c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80155cc:	42bb      	cmp	r3, r7
 80155ce:	bfbf      	itttt	lt
 80155d0:	9b07      	ldrlt	r3, [sp, #28]
 80155d2:	9707      	strlt	r7, [sp, #28]
 80155d4:	1afa      	sublt	r2, r7, r3
 80155d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80155d8:	bfbb      	ittet	lt
 80155da:	189b      	addlt	r3, r3, r2
 80155dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80155de:	1bdf      	subge	r7, r3, r7
 80155e0:	2700      	movlt	r7, #0
 80155e2:	f1b9 0f00 	cmp.w	r9, #0
 80155e6:	bfb5      	itete	lt
 80155e8:	9b05      	ldrlt	r3, [sp, #20]
 80155ea:	9d05      	ldrge	r5, [sp, #20]
 80155ec:	eba3 0509 	sublt.w	r5, r3, r9
 80155f0:	464b      	movge	r3, r9
 80155f2:	bfb8      	it	lt
 80155f4:	2300      	movlt	r3, #0
 80155f6:	e77e      	b.n	80154f6 <_dtoa_r+0x6fe>
 80155f8:	9f07      	ldr	r7, [sp, #28]
 80155fa:	9d05      	ldr	r5, [sp, #20]
 80155fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80155fe:	e783      	b.n	8015508 <_dtoa_r+0x710>
 8015600:	9a07      	ldr	r2, [sp, #28]
 8015602:	e7ab      	b.n	801555c <_dtoa_r+0x764>
 8015604:	2300      	movs	r3, #0
 8015606:	e7d4      	b.n	80155b2 <_dtoa_r+0x7ba>
 8015608:	9b00      	ldr	r3, [sp, #0]
 801560a:	e7d2      	b.n	80155b2 <_dtoa_r+0x7ba>
 801560c:	2300      	movs	r3, #0
 801560e:	9307      	str	r3, [sp, #28]
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015616:	6918      	ldr	r0, [r3, #16]
 8015618:	f000 ffbc 	bl	8016594 <__hi0bits>
 801561c:	f1c0 0020 	rsb	r0, r0, #32
 8015620:	4440      	add	r0, r8
 8015622:	f010 001f 	ands.w	r0, r0, #31
 8015626:	d047      	beq.n	80156b8 <_dtoa_r+0x8c0>
 8015628:	f1c0 0320 	rsb	r3, r0, #32
 801562c:	2b04      	cmp	r3, #4
 801562e:	dd3b      	ble.n	80156a8 <_dtoa_r+0x8b0>
 8015630:	9b05      	ldr	r3, [sp, #20]
 8015632:	f1c0 001c 	rsb	r0, r0, #28
 8015636:	4403      	add	r3, r0
 8015638:	9305      	str	r3, [sp, #20]
 801563a:	4405      	add	r5, r0
 801563c:	4480      	add	r8, r0
 801563e:	9b05      	ldr	r3, [sp, #20]
 8015640:	2b00      	cmp	r3, #0
 8015642:	dd05      	ble.n	8015650 <_dtoa_r+0x858>
 8015644:	461a      	mov	r2, r3
 8015646:	9904      	ldr	r1, [sp, #16]
 8015648:	4620      	mov	r0, r4
 801564a:	f001 f8df 	bl	801680c <__lshift>
 801564e:	9004      	str	r0, [sp, #16]
 8015650:	f1b8 0f00 	cmp.w	r8, #0
 8015654:	dd05      	ble.n	8015662 <_dtoa_r+0x86a>
 8015656:	4639      	mov	r1, r7
 8015658:	4642      	mov	r2, r8
 801565a:	4620      	mov	r0, r4
 801565c:	f001 f8d6 	bl	801680c <__lshift>
 8015660:	4607      	mov	r7, r0
 8015662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015664:	b353      	cbz	r3, 80156bc <_dtoa_r+0x8c4>
 8015666:	4639      	mov	r1, r7
 8015668:	9804      	ldr	r0, [sp, #16]
 801566a:	f001 f923 	bl	80168b4 <__mcmp>
 801566e:	2800      	cmp	r0, #0
 8015670:	da24      	bge.n	80156bc <_dtoa_r+0x8c4>
 8015672:	2300      	movs	r3, #0
 8015674:	220a      	movs	r2, #10
 8015676:	9904      	ldr	r1, [sp, #16]
 8015678:	4620      	mov	r0, r4
 801567a:	f000 ff12 	bl	80164a2 <__multadd>
 801567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015680:	9004      	str	r0, [sp, #16]
 8015682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015686:	2b00      	cmp	r3, #0
 8015688:	f000 814d 	beq.w	8015926 <_dtoa_r+0xb2e>
 801568c:	2300      	movs	r3, #0
 801568e:	4631      	mov	r1, r6
 8015690:	220a      	movs	r2, #10
 8015692:	4620      	mov	r0, r4
 8015694:	f000 ff05 	bl	80164a2 <__multadd>
 8015698:	9b02      	ldr	r3, [sp, #8]
 801569a:	2b00      	cmp	r3, #0
 801569c:	4606      	mov	r6, r0
 801569e:	dc4f      	bgt.n	8015740 <_dtoa_r+0x948>
 80156a0:	9b06      	ldr	r3, [sp, #24]
 80156a2:	2b02      	cmp	r3, #2
 80156a4:	dd4c      	ble.n	8015740 <_dtoa_r+0x948>
 80156a6:	e011      	b.n	80156cc <_dtoa_r+0x8d4>
 80156a8:	d0c9      	beq.n	801563e <_dtoa_r+0x846>
 80156aa:	9a05      	ldr	r2, [sp, #20]
 80156ac:	331c      	adds	r3, #28
 80156ae:	441a      	add	r2, r3
 80156b0:	9205      	str	r2, [sp, #20]
 80156b2:	441d      	add	r5, r3
 80156b4:	4498      	add	r8, r3
 80156b6:	e7c2      	b.n	801563e <_dtoa_r+0x846>
 80156b8:	4603      	mov	r3, r0
 80156ba:	e7f6      	b.n	80156aa <_dtoa_r+0x8b2>
 80156bc:	f1b9 0f00 	cmp.w	r9, #0
 80156c0:	dc38      	bgt.n	8015734 <_dtoa_r+0x93c>
 80156c2:	9b06      	ldr	r3, [sp, #24]
 80156c4:	2b02      	cmp	r3, #2
 80156c6:	dd35      	ble.n	8015734 <_dtoa_r+0x93c>
 80156c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80156cc:	9b02      	ldr	r3, [sp, #8]
 80156ce:	b963      	cbnz	r3, 80156ea <_dtoa_r+0x8f2>
 80156d0:	4639      	mov	r1, r7
 80156d2:	2205      	movs	r2, #5
 80156d4:	4620      	mov	r0, r4
 80156d6:	f000 fee4 	bl	80164a2 <__multadd>
 80156da:	4601      	mov	r1, r0
 80156dc:	4607      	mov	r7, r0
 80156de:	9804      	ldr	r0, [sp, #16]
 80156e0:	f001 f8e8 	bl	80168b4 <__mcmp>
 80156e4:	2800      	cmp	r0, #0
 80156e6:	f73f adcc 	bgt.w	8015282 <_dtoa_r+0x48a>
 80156ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156ec:	465d      	mov	r5, fp
 80156ee:	ea6f 0a03 	mvn.w	sl, r3
 80156f2:	f04f 0900 	mov.w	r9, #0
 80156f6:	4639      	mov	r1, r7
 80156f8:	4620      	mov	r0, r4
 80156fa:	f000 febb 	bl	8016474 <_Bfree>
 80156fe:	2e00      	cmp	r6, #0
 8015700:	f43f aeb7 	beq.w	8015472 <_dtoa_r+0x67a>
 8015704:	f1b9 0f00 	cmp.w	r9, #0
 8015708:	d005      	beq.n	8015716 <_dtoa_r+0x91e>
 801570a:	45b1      	cmp	r9, r6
 801570c:	d003      	beq.n	8015716 <_dtoa_r+0x91e>
 801570e:	4649      	mov	r1, r9
 8015710:	4620      	mov	r0, r4
 8015712:	f000 feaf 	bl	8016474 <_Bfree>
 8015716:	4631      	mov	r1, r6
 8015718:	4620      	mov	r0, r4
 801571a:	f000 feab 	bl	8016474 <_Bfree>
 801571e:	e6a8      	b.n	8015472 <_dtoa_r+0x67a>
 8015720:	2700      	movs	r7, #0
 8015722:	463e      	mov	r6, r7
 8015724:	e7e1      	b.n	80156ea <_dtoa_r+0x8f2>
 8015726:	f8dd a020 	ldr.w	sl, [sp, #32]
 801572a:	463e      	mov	r6, r7
 801572c:	e5a9      	b.n	8015282 <_dtoa_r+0x48a>
 801572e:	bf00      	nop
 8015730:	40240000 	.word	0x40240000
 8015734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015736:	f8cd 9008 	str.w	r9, [sp, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	f000 80fa 	beq.w	8015934 <_dtoa_r+0xb3c>
 8015740:	2d00      	cmp	r5, #0
 8015742:	dd05      	ble.n	8015750 <_dtoa_r+0x958>
 8015744:	4631      	mov	r1, r6
 8015746:	462a      	mov	r2, r5
 8015748:	4620      	mov	r0, r4
 801574a:	f001 f85f 	bl	801680c <__lshift>
 801574e:	4606      	mov	r6, r0
 8015750:	9b07      	ldr	r3, [sp, #28]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d04c      	beq.n	80157f0 <_dtoa_r+0x9f8>
 8015756:	6871      	ldr	r1, [r6, #4]
 8015758:	4620      	mov	r0, r4
 801575a:	f000 fe57 	bl	801640c <_Balloc>
 801575e:	6932      	ldr	r2, [r6, #16]
 8015760:	3202      	adds	r2, #2
 8015762:	4605      	mov	r5, r0
 8015764:	0092      	lsls	r2, r2, #2
 8015766:	f106 010c 	add.w	r1, r6, #12
 801576a:	300c      	adds	r0, #12
 801576c:	f7fd fb54 	bl	8012e18 <memcpy>
 8015770:	2201      	movs	r2, #1
 8015772:	4629      	mov	r1, r5
 8015774:	4620      	mov	r0, r4
 8015776:	f001 f849 	bl	801680c <__lshift>
 801577a:	9b00      	ldr	r3, [sp, #0]
 801577c:	f8cd b014 	str.w	fp, [sp, #20]
 8015780:	f003 0301 	and.w	r3, r3, #1
 8015784:	46b1      	mov	r9, r6
 8015786:	9307      	str	r3, [sp, #28]
 8015788:	4606      	mov	r6, r0
 801578a:	4639      	mov	r1, r7
 801578c:	9804      	ldr	r0, [sp, #16]
 801578e:	f7ff faa7 	bl	8014ce0 <quorem>
 8015792:	4649      	mov	r1, r9
 8015794:	4605      	mov	r5, r0
 8015796:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801579a:	9804      	ldr	r0, [sp, #16]
 801579c:	f001 f88a 	bl	80168b4 <__mcmp>
 80157a0:	4632      	mov	r2, r6
 80157a2:	9000      	str	r0, [sp, #0]
 80157a4:	4639      	mov	r1, r7
 80157a6:	4620      	mov	r0, r4
 80157a8:	f001 f89e 	bl	80168e8 <__mdiff>
 80157ac:	68c3      	ldr	r3, [r0, #12]
 80157ae:	4602      	mov	r2, r0
 80157b0:	bb03      	cbnz	r3, 80157f4 <_dtoa_r+0x9fc>
 80157b2:	4601      	mov	r1, r0
 80157b4:	9008      	str	r0, [sp, #32]
 80157b6:	9804      	ldr	r0, [sp, #16]
 80157b8:	f001 f87c 	bl	80168b4 <__mcmp>
 80157bc:	9a08      	ldr	r2, [sp, #32]
 80157be:	4603      	mov	r3, r0
 80157c0:	4611      	mov	r1, r2
 80157c2:	4620      	mov	r0, r4
 80157c4:	9308      	str	r3, [sp, #32]
 80157c6:	f000 fe55 	bl	8016474 <_Bfree>
 80157ca:	9b08      	ldr	r3, [sp, #32]
 80157cc:	b9a3      	cbnz	r3, 80157f8 <_dtoa_r+0xa00>
 80157ce:	9a06      	ldr	r2, [sp, #24]
 80157d0:	b992      	cbnz	r2, 80157f8 <_dtoa_r+0xa00>
 80157d2:	9a07      	ldr	r2, [sp, #28]
 80157d4:	b982      	cbnz	r2, 80157f8 <_dtoa_r+0xa00>
 80157d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80157da:	d029      	beq.n	8015830 <_dtoa_r+0xa38>
 80157dc:	9b00      	ldr	r3, [sp, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	dd01      	ble.n	80157e6 <_dtoa_r+0x9ee>
 80157e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80157e6:	9b05      	ldr	r3, [sp, #20]
 80157e8:	1c5d      	adds	r5, r3, #1
 80157ea:	f883 8000 	strb.w	r8, [r3]
 80157ee:	e782      	b.n	80156f6 <_dtoa_r+0x8fe>
 80157f0:	4630      	mov	r0, r6
 80157f2:	e7c2      	b.n	801577a <_dtoa_r+0x982>
 80157f4:	2301      	movs	r3, #1
 80157f6:	e7e3      	b.n	80157c0 <_dtoa_r+0x9c8>
 80157f8:	9a00      	ldr	r2, [sp, #0]
 80157fa:	2a00      	cmp	r2, #0
 80157fc:	db04      	blt.n	8015808 <_dtoa_r+0xa10>
 80157fe:	d125      	bne.n	801584c <_dtoa_r+0xa54>
 8015800:	9a06      	ldr	r2, [sp, #24]
 8015802:	bb1a      	cbnz	r2, 801584c <_dtoa_r+0xa54>
 8015804:	9a07      	ldr	r2, [sp, #28]
 8015806:	bb0a      	cbnz	r2, 801584c <_dtoa_r+0xa54>
 8015808:	2b00      	cmp	r3, #0
 801580a:	ddec      	ble.n	80157e6 <_dtoa_r+0x9ee>
 801580c:	2201      	movs	r2, #1
 801580e:	9904      	ldr	r1, [sp, #16]
 8015810:	4620      	mov	r0, r4
 8015812:	f000 fffb 	bl	801680c <__lshift>
 8015816:	4639      	mov	r1, r7
 8015818:	9004      	str	r0, [sp, #16]
 801581a:	f001 f84b 	bl	80168b4 <__mcmp>
 801581e:	2800      	cmp	r0, #0
 8015820:	dc03      	bgt.n	801582a <_dtoa_r+0xa32>
 8015822:	d1e0      	bne.n	80157e6 <_dtoa_r+0x9ee>
 8015824:	f018 0f01 	tst.w	r8, #1
 8015828:	d0dd      	beq.n	80157e6 <_dtoa_r+0x9ee>
 801582a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801582e:	d1d8      	bne.n	80157e2 <_dtoa_r+0x9ea>
 8015830:	9b05      	ldr	r3, [sp, #20]
 8015832:	9a05      	ldr	r2, [sp, #20]
 8015834:	1c5d      	adds	r5, r3, #1
 8015836:	2339      	movs	r3, #57	; 0x39
 8015838:	7013      	strb	r3, [r2, #0]
 801583a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801583e:	2b39      	cmp	r3, #57	; 0x39
 8015840:	f105 32ff 	add.w	r2, r5, #4294967295
 8015844:	d04f      	beq.n	80158e6 <_dtoa_r+0xaee>
 8015846:	3301      	adds	r3, #1
 8015848:	7013      	strb	r3, [r2, #0]
 801584a:	e754      	b.n	80156f6 <_dtoa_r+0x8fe>
 801584c:	9a05      	ldr	r2, [sp, #20]
 801584e:	2b00      	cmp	r3, #0
 8015850:	f102 0501 	add.w	r5, r2, #1
 8015854:	dd06      	ble.n	8015864 <_dtoa_r+0xa6c>
 8015856:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801585a:	d0e9      	beq.n	8015830 <_dtoa_r+0xa38>
 801585c:	f108 0801 	add.w	r8, r8, #1
 8015860:	9b05      	ldr	r3, [sp, #20]
 8015862:	e7c2      	b.n	80157ea <_dtoa_r+0x9f2>
 8015864:	9a02      	ldr	r2, [sp, #8]
 8015866:	f805 8c01 	strb.w	r8, [r5, #-1]
 801586a:	eba5 030b 	sub.w	r3, r5, fp
 801586e:	4293      	cmp	r3, r2
 8015870:	d021      	beq.n	80158b6 <_dtoa_r+0xabe>
 8015872:	2300      	movs	r3, #0
 8015874:	220a      	movs	r2, #10
 8015876:	9904      	ldr	r1, [sp, #16]
 8015878:	4620      	mov	r0, r4
 801587a:	f000 fe12 	bl	80164a2 <__multadd>
 801587e:	45b1      	cmp	r9, r6
 8015880:	9004      	str	r0, [sp, #16]
 8015882:	f04f 0300 	mov.w	r3, #0
 8015886:	f04f 020a 	mov.w	r2, #10
 801588a:	4649      	mov	r1, r9
 801588c:	4620      	mov	r0, r4
 801588e:	d105      	bne.n	801589c <_dtoa_r+0xaa4>
 8015890:	f000 fe07 	bl	80164a2 <__multadd>
 8015894:	4681      	mov	r9, r0
 8015896:	4606      	mov	r6, r0
 8015898:	9505      	str	r5, [sp, #20]
 801589a:	e776      	b.n	801578a <_dtoa_r+0x992>
 801589c:	f000 fe01 	bl	80164a2 <__multadd>
 80158a0:	4631      	mov	r1, r6
 80158a2:	4681      	mov	r9, r0
 80158a4:	2300      	movs	r3, #0
 80158a6:	220a      	movs	r2, #10
 80158a8:	4620      	mov	r0, r4
 80158aa:	f000 fdfa 	bl	80164a2 <__multadd>
 80158ae:	4606      	mov	r6, r0
 80158b0:	e7f2      	b.n	8015898 <_dtoa_r+0xaa0>
 80158b2:	f04f 0900 	mov.w	r9, #0
 80158b6:	2201      	movs	r2, #1
 80158b8:	9904      	ldr	r1, [sp, #16]
 80158ba:	4620      	mov	r0, r4
 80158bc:	f000 ffa6 	bl	801680c <__lshift>
 80158c0:	4639      	mov	r1, r7
 80158c2:	9004      	str	r0, [sp, #16]
 80158c4:	f000 fff6 	bl	80168b4 <__mcmp>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	dcb6      	bgt.n	801583a <_dtoa_r+0xa42>
 80158cc:	d102      	bne.n	80158d4 <_dtoa_r+0xadc>
 80158ce:	f018 0f01 	tst.w	r8, #1
 80158d2:	d1b2      	bne.n	801583a <_dtoa_r+0xa42>
 80158d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80158d8:	2b30      	cmp	r3, #48	; 0x30
 80158da:	f105 32ff 	add.w	r2, r5, #4294967295
 80158de:	f47f af0a 	bne.w	80156f6 <_dtoa_r+0x8fe>
 80158e2:	4615      	mov	r5, r2
 80158e4:	e7f6      	b.n	80158d4 <_dtoa_r+0xadc>
 80158e6:	4593      	cmp	fp, r2
 80158e8:	d105      	bne.n	80158f6 <_dtoa_r+0xafe>
 80158ea:	2331      	movs	r3, #49	; 0x31
 80158ec:	f10a 0a01 	add.w	sl, sl, #1
 80158f0:	f88b 3000 	strb.w	r3, [fp]
 80158f4:	e6ff      	b.n	80156f6 <_dtoa_r+0x8fe>
 80158f6:	4615      	mov	r5, r2
 80158f8:	e79f      	b.n	801583a <_dtoa_r+0xa42>
 80158fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015960 <_dtoa_r+0xb68>
 80158fe:	e007      	b.n	8015910 <_dtoa_r+0xb18>
 8015900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015902:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015964 <_dtoa_r+0xb6c>
 8015906:	b11b      	cbz	r3, 8015910 <_dtoa_r+0xb18>
 8015908:	f10b 0308 	add.w	r3, fp, #8
 801590c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801590e:	6013      	str	r3, [r2, #0]
 8015910:	4658      	mov	r0, fp
 8015912:	b017      	add	sp, #92	; 0x5c
 8015914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015918:	9b06      	ldr	r3, [sp, #24]
 801591a:	2b01      	cmp	r3, #1
 801591c:	f77f ae35 	ble.w	801558a <_dtoa_r+0x792>
 8015920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015922:	9307      	str	r3, [sp, #28]
 8015924:	e649      	b.n	80155ba <_dtoa_r+0x7c2>
 8015926:	9b02      	ldr	r3, [sp, #8]
 8015928:	2b00      	cmp	r3, #0
 801592a:	dc03      	bgt.n	8015934 <_dtoa_r+0xb3c>
 801592c:	9b06      	ldr	r3, [sp, #24]
 801592e:	2b02      	cmp	r3, #2
 8015930:	f73f aecc 	bgt.w	80156cc <_dtoa_r+0x8d4>
 8015934:	465d      	mov	r5, fp
 8015936:	4639      	mov	r1, r7
 8015938:	9804      	ldr	r0, [sp, #16]
 801593a:	f7ff f9d1 	bl	8014ce0 <quorem>
 801593e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015942:	f805 8b01 	strb.w	r8, [r5], #1
 8015946:	9a02      	ldr	r2, [sp, #8]
 8015948:	eba5 030b 	sub.w	r3, r5, fp
 801594c:	429a      	cmp	r2, r3
 801594e:	ddb0      	ble.n	80158b2 <_dtoa_r+0xaba>
 8015950:	2300      	movs	r3, #0
 8015952:	220a      	movs	r2, #10
 8015954:	9904      	ldr	r1, [sp, #16]
 8015956:	4620      	mov	r0, r4
 8015958:	f000 fda3 	bl	80164a2 <__multadd>
 801595c:	9004      	str	r0, [sp, #16]
 801595e:	e7ea      	b.n	8015936 <_dtoa_r+0xb3e>
 8015960:	08018673 	.word	0x08018673
 8015964:	080184d0 	.word	0x080184d0

08015968 <__sflush_r>:
 8015968:	898a      	ldrh	r2, [r1, #12]
 801596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801596e:	4605      	mov	r5, r0
 8015970:	0710      	lsls	r0, r2, #28
 8015972:	460c      	mov	r4, r1
 8015974:	d458      	bmi.n	8015a28 <__sflush_r+0xc0>
 8015976:	684b      	ldr	r3, [r1, #4]
 8015978:	2b00      	cmp	r3, #0
 801597a:	dc05      	bgt.n	8015988 <__sflush_r+0x20>
 801597c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801597e:	2b00      	cmp	r3, #0
 8015980:	dc02      	bgt.n	8015988 <__sflush_r+0x20>
 8015982:	2000      	movs	r0, #0
 8015984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801598a:	2e00      	cmp	r6, #0
 801598c:	d0f9      	beq.n	8015982 <__sflush_r+0x1a>
 801598e:	2300      	movs	r3, #0
 8015990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015994:	682f      	ldr	r7, [r5, #0]
 8015996:	6a21      	ldr	r1, [r4, #32]
 8015998:	602b      	str	r3, [r5, #0]
 801599a:	d032      	beq.n	8015a02 <__sflush_r+0x9a>
 801599c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801599e:	89a3      	ldrh	r3, [r4, #12]
 80159a0:	075a      	lsls	r2, r3, #29
 80159a2:	d505      	bpl.n	80159b0 <__sflush_r+0x48>
 80159a4:	6863      	ldr	r3, [r4, #4]
 80159a6:	1ac0      	subs	r0, r0, r3
 80159a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159aa:	b10b      	cbz	r3, 80159b0 <__sflush_r+0x48>
 80159ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159ae:	1ac0      	subs	r0, r0, r3
 80159b0:	2300      	movs	r3, #0
 80159b2:	4602      	mov	r2, r0
 80159b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159b6:	6a21      	ldr	r1, [r4, #32]
 80159b8:	4628      	mov	r0, r5
 80159ba:	47b0      	blx	r6
 80159bc:	1c43      	adds	r3, r0, #1
 80159be:	89a3      	ldrh	r3, [r4, #12]
 80159c0:	d106      	bne.n	80159d0 <__sflush_r+0x68>
 80159c2:	6829      	ldr	r1, [r5, #0]
 80159c4:	291d      	cmp	r1, #29
 80159c6:	d848      	bhi.n	8015a5a <__sflush_r+0xf2>
 80159c8:	4a29      	ldr	r2, [pc, #164]	; (8015a70 <__sflush_r+0x108>)
 80159ca:	40ca      	lsrs	r2, r1
 80159cc:	07d6      	lsls	r6, r2, #31
 80159ce:	d544      	bpl.n	8015a5a <__sflush_r+0xf2>
 80159d0:	2200      	movs	r2, #0
 80159d2:	6062      	str	r2, [r4, #4]
 80159d4:	04d9      	lsls	r1, r3, #19
 80159d6:	6922      	ldr	r2, [r4, #16]
 80159d8:	6022      	str	r2, [r4, #0]
 80159da:	d504      	bpl.n	80159e6 <__sflush_r+0x7e>
 80159dc:	1c42      	adds	r2, r0, #1
 80159de:	d101      	bne.n	80159e4 <__sflush_r+0x7c>
 80159e0:	682b      	ldr	r3, [r5, #0]
 80159e2:	b903      	cbnz	r3, 80159e6 <__sflush_r+0x7e>
 80159e4:	6560      	str	r0, [r4, #84]	; 0x54
 80159e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159e8:	602f      	str	r7, [r5, #0]
 80159ea:	2900      	cmp	r1, #0
 80159ec:	d0c9      	beq.n	8015982 <__sflush_r+0x1a>
 80159ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159f2:	4299      	cmp	r1, r3
 80159f4:	d002      	beq.n	80159fc <__sflush_r+0x94>
 80159f6:	4628      	mov	r0, r5
 80159f8:	f001 f916 	bl	8016c28 <_free_r>
 80159fc:	2000      	movs	r0, #0
 80159fe:	6360      	str	r0, [r4, #52]	; 0x34
 8015a00:	e7c0      	b.n	8015984 <__sflush_r+0x1c>
 8015a02:	2301      	movs	r3, #1
 8015a04:	4628      	mov	r0, r5
 8015a06:	47b0      	blx	r6
 8015a08:	1c41      	adds	r1, r0, #1
 8015a0a:	d1c8      	bne.n	801599e <__sflush_r+0x36>
 8015a0c:	682b      	ldr	r3, [r5, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d0c5      	beq.n	801599e <__sflush_r+0x36>
 8015a12:	2b1d      	cmp	r3, #29
 8015a14:	d001      	beq.n	8015a1a <__sflush_r+0xb2>
 8015a16:	2b16      	cmp	r3, #22
 8015a18:	d101      	bne.n	8015a1e <__sflush_r+0xb6>
 8015a1a:	602f      	str	r7, [r5, #0]
 8015a1c:	e7b1      	b.n	8015982 <__sflush_r+0x1a>
 8015a1e:	89a3      	ldrh	r3, [r4, #12]
 8015a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a24:	81a3      	strh	r3, [r4, #12]
 8015a26:	e7ad      	b.n	8015984 <__sflush_r+0x1c>
 8015a28:	690f      	ldr	r7, [r1, #16]
 8015a2a:	2f00      	cmp	r7, #0
 8015a2c:	d0a9      	beq.n	8015982 <__sflush_r+0x1a>
 8015a2e:	0793      	lsls	r3, r2, #30
 8015a30:	680e      	ldr	r6, [r1, #0]
 8015a32:	bf08      	it	eq
 8015a34:	694b      	ldreq	r3, [r1, #20]
 8015a36:	600f      	str	r7, [r1, #0]
 8015a38:	bf18      	it	ne
 8015a3a:	2300      	movne	r3, #0
 8015a3c:	eba6 0807 	sub.w	r8, r6, r7
 8015a40:	608b      	str	r3, [r1, #8]
 8015a42:	f1b8 0f00 	cmp.w	r8, #0
 8015a46:	dd9c      	ble.n	8015982 <__sflush_r+0x1a>
 8015a48:	4643      	mov	r3, r8
 8015a4a:	463a      	mov	r2, r7
 8015a4c:	6a21      	ldr	r1, [r4, #32]
 8015a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a50:	4628      	mov	r0, r5
 8015a52:	47b0      	blx	r6
 8015a54:	2800      	cmp	r0, #0
 8015a56:	dc06      	bgt.n	8015a66 <__sflush_r+0xfe>
 8015a58:	89a3      	ldrh	r3, [r4, #12]
 8015a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a5e:	81a3      	strh	r3, [r4, #12]
 8015a60:	f04f 30ff 	mov.w	r0, #4294967295
 8015a64:	e78e      	b.n	8015984 <__sflush_r+0x1c>
 8015a66:	4407      	add	r7, r0
 8015a68:	eba8 0800 	sub.w	r8, r8, r0
 8015a6c:	e7e9      	b.n	8015a42 <__sflush_r+0xda>
 8015a6e:	bf00      	nop
 8015a70:	20400001 	.word	0x20400001

08015a74 <_fflush_r>:
 8015a74:	b538      	push	{r3, r4, r5, lr}
 8015a76:	690b      	ldr	r3, [r1, #16]
 8015a78:	4605      	mov	r5, r0
 8015a7a:	460c      	mov	r4, r1
 8015a7c:	b1db      	cbz	r3, 8015ab6 <_fflush_r+0x42>
 8015a7e:	b118      	cbz	r0, 8015a88 <_fflush_r+0x14>
 8015a80:	6983      	ldr	r3, [r0, #24]
 8015a82:	b90b      	cbnz	r3, 8015a88 <_fflush_r+0x14>
 8015a84:	f000 f860 	bl	8015b48 <__sinit>
 8015a88:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <_fflush_r+0x48>)
 8015a8a:	429c      	cmp	r4, r3
 8015a8c:	d109      	bne.n	8015aa2 <_fflush_r+0x2e>
 8015a8e:	686c      	ldr	r4, [r5, #4]
 8015a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a94:	b17b      	cbz	r3, 8015ab6 <_fflush_r+0x42>
 8015a96:	4621      	mov	r1, r4
 8015a98:	4628      	mov	r0, r5
 8015a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a9e:	f7ff bf63 	b.w	8015968 <__sflush_r>
 8015aa2:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <_fflush_r+0x4c>)
 8015aa4:	429c      	cmp	r4, r3
 8015aa6:	d101      	bne.n	8015aac <_fflush_r+0x38>
 8015aa8:	68ac      	ldr	r4, [r5, #8]
 8015aaa:	e7f1      	b.n	8015a90 <_fflush_r+0x1c>
 8015aac:	4b05      	ldr	r3, [pc, #20]	; (8015ac4 <_fflush_r+0x50>)
 8015aae:	429c      	cmp	r4, r3
 8015ab0:	bf08      	it	eq
 8015ab2:	68ec      	ldreq	r4, [r5, #12]
 8015ab4:	e7ec      	b.n	8015a90 <_fflush_r+0x1c>
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	bd38      	pop	{r3, r4, r5, pc}
 8015aba:	bf00      	nop
 8015abc:	08018500 	.word	0x08018500
 8015ac0:	08018520 	.word	0x08018520
 8015ac4:	080184e0 	.word	0x080184e0

08015ac8 <std>:
 8015ac8:	2300      	movs	r3, #0
 8015aca:	b510      	push	{r4, lr}
 8015acc:	4604      	mov	r4, r0
 8015ace:	e9c0 3300 	strd	r3, r3, [r0]
 8015ad2:	6083      	str	r3, [r0, #8]
 8015ad4:	8181      	strh	r1, [r0, #12]
 8015ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8015ad8:	81c2      	strh	r2, [r0, #14]
 8015ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ade:	6183      	str	r3, [r0, #24]
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	2208      	movs	r2, #8
 8015ae4:	305c      	adds	r0, #92	; 0x5c
 8015ae6:	f7fd f9a2 	bl	8012e2e <memset>
 8015aea:	4b05      	ldr	r3, [pc, #20]	; (8015b00 <std+0x38>)
 8015aec:	6263      	str	r3, [r4, #36]	; 0x24
 8015aee:	4b05      	ldr	r3, [pc, #20]	; (8015b04 <std+0x3c>)
 8015af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8015af2:	4b05      	ldr	r3, [pc, #20]	; (8015b08 <std+0x40>)
 8015af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015af6:	4b05      	ldr	r3, [pc, #20]	; (8015b0c <std+0x44>)
 8015af8:	6224      	str	r4, [r4, #32]
 8015afa:	6323      	str	r3, [r4, #48]	; 0x30
 8015afc:	bd10      	pop	{r4, pc}
 8015afe:	bf00      	nop
 8015b00:	08013ce5 	.word	0x08013ce5
 8015b04:	08013d0b 	.word	0x08013d0b
 8015b08:	08013d43 	.word	0x08013d43
 8015b0c:	08013d67 	.word	0x08013d67

08015b10 <_cleanup_r>:
 8015b10:	4901      	ldr	r1, [pc, #4]	; (8015b18 <_cleanup_r+0x8>)
 8015b12:	f000 b885 	b.w	8015c20 <_fwalk_reent>
 8015b16:	bf00      	nop
 8015b18:	08015a75 	.word	0x08015a75

08015b1c <__sfmoreglue>:
 8015b1c:	b570      	push	{r4, r5, r6, lr}
 8015b1e:	1e4a      	subs	r2, r1, #1
 8015b20:	2568      	movs	r5, #104	; 0x68
 8015b22:	4355      	muls	r5, r2
 8015b24:	460e      	mov	r6, r1
 8015b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b2a:	f001 f8cb 	bl	8016cc4 <_malloc_r>
 8015b2e:	4604      	mov	r4, r0
 8015b30:	b140      	cbz	r0, 8015b44 <__sfmoreglue+0x28>
 8015b32:	2100      	movs	r1, #0
 8015b34:	e9c0 1600 	strd	r1, r6, [r0]
 8015b38:	300c      	adds	r0, #12
 8015b3a:	60a0      	str	r0, [r4, #8]
 8015b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b40:	f7fd f975 	bl	8012e2e <memset>
 8015b44:	4620      	mov	r0, r4
 8015b46:	bd70      	pop	{r4, r5, r6, pc}

08015b48 <__sinit>:
 8015b48:	6983      	ldr	r3, [r0, #24]
 8015b4a:	b510      	push	{r4, lr}
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	bb33      	cbnz	r3, 8015b9e <__sinit+0x56>
 8015b50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015b54:	6503      	str	r3, [r0, #80]	; 0x50
 8015b56:	4b12      	ldr	r3, [pc, #72]	; (8015ba0 <__sinit+0x58>)
 8015b58:	4a12      	ldr	r2, [pc, #72]	; (8015ba4 <__sinit+0x5c>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	6282      	str	r2, [r0, #40]	; 0x28
 8015b5e:	4298      	cmp	r0, r3
 8015b60:	bf04      	itt	eq
 8015b62:	2301      	moveq	r3, #1
 8015b64:	6183      	streq	r3, [r0, #24]
 8015b66:	f000 f81f 	bl	8015ba8 <__sfp>
 8015b6a:	6060      	str	r0, [r4, #4]
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	f000 f81b 	bl	8015ba8 <__sfp>
 8015b72:	60a0      	str	r0, [r4, #8]
 8015b74:	4620      	mov	r0, r4
 8015b76:	f000 f817 	bl	8015ba8 <__sfp>
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	60e0      	str	r0, [r4, #12]
 8015b7e:	2104      	movs	r1, #4
 8015b80:	6860      	ldr	r0, [r4, #4]
 8015b82:	f7ff ffa1 	bl	8015ac8 <std>
 8015b86:	2201      	movs	r2, #1
 8015b88:	2109      	movs	r1, #9
 8015b8a:	68a0      	ldr	r0, [r4, #8]
 8015b8c:	f7ff ff9c 	bl	8015ac8 <std>
 8015b90:	2202      	movs	r2, #2
 8015b92:	2112      	movs	r1, #18
 8015b94:	68e0      	ldr	r0, [r4, #12]
 8015b96:	f7ff ff97 	bl	8015ac8 <std>
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	61a3      	str	r3, [r4, #24]
 8015b9e:	bd10      	pop	{r4, pc}
 8015ba0:	08018440 	.word	0x08018440
 8015ba4:	08015b11 	.word	0x08015b11

08015ba8 <__sfp>:
 8015ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015baa:	4b1b      	ldr	r3, [pc, #108]	; (8015c18 <__sfp+0x70>)
 8015bac:	681e      	ldr	r6, [r3, #0]
 8015bae:	69b3      	ldr	r3, [r6, #24]
 8015bb0:	4607      	mov	r7, r0
 8015bb2:	b913      	cbnz	r3, 8015bba <__sfp+0x12>
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	f7ff ffc7 	bl	8015b48 <__sinit>
 8015bba:	3648      	adds	r6, #72	; 0x48
 8015bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015bc0:	3b01      	subs	r3, #1
 8015bc2:	d503      	bpl.n	8015bcc <__sfp+0x24>
 8015bc4:	6833      	ldr	r3, [r6, #0]
 8015bc6:	b133      	cbz	r3, 8015bd6 <__sfp+0x2e>
 8015bc8:	6836      	ldr	r6, [r6, #0]
 8015bca:	e7f7      	b.n	8015bbc <__sfp+0x14>
 8015bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015bd0:	b16d      	cbz	r5, 8015bee <__sfp+0x46>
 8015bd2:	3468      	adds	r4, #104	; 0x68
 8015bd4:	e7f4      	b.n	8015bc0 <__sfp+0x18>
 8015bd6:	2104      	movs	r1, #4
 8015bd8:	4638      	mov	r0, r7
 8015bda:	f7ff ff9f 	bl	8015b1c <__sfmoreglue>
 8015bde:	6030      	str	r0, [r6, #0]
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d1f1      	bne.n	8015bc8 <__sfp+0x20>
 8015be4:	230c      	movs	r3, #12
 8015be6:	603b      	str	r3, [r7, #0]
 8015be8:	4604      	mov	r4, r0
 8015bea:	4620      	mov	r0, r4
 8015bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bee:	4b0b      	ldr	r3, [pc, #44]	; (8015c1c <__sfp+0x74>)
 8015bf0:	6665      	str	r5, [r4, #100]	; 0x64
 8015bf2:	e9c4 5500 	strd	r5, r5, [r4]
 8015bf6:	60a5      	str	r5, [r4, #8]
 8015bf8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015bfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015c00:	2208      	movs	r2, #8
 8015c02:	4629      	mov	r1, r5
 8015c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c08:	f7fd f911 	bl	8012e2e <memset>
 8015c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c14:	e7e9      	b.n	8015bea <__sfp+0x42>
 8015c16:	bf00      	nop
 8015c18:	08018440 	.word	0x08018440
 8015c1c:	ffff0001 	.word	0xffff0001

08015c20 <_fwalk_reent>:
 8015c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c24:	4680      	mov	r8, r0
 8015c26:	4689      	mov	r9, r1
 8015c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c2c:	2600      	movs	r6, #0
 8015c2e:	b914      	cbnz	r4, 8015c36 <_fwalk_reent+0x16>
 8015c30:	4630      	mov	r0, r6
 8015c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015c3a:	3f01      	subs	r7, #1
 8015c3c:	d501      	bpl.n	8015c42 <_fwalk_reent+0x22>
 8015c3e:	6824      	ldr	r4, [r4, #0]
 8015c40:	e7f5      	b.n	8015c2e <_fwalk_reent+0xe>
 8015c42:	89ab      	ldrh	r3, [r5, #12]
 8015c44:	2b01      	cmp	r3, #1
 8015c46:	d907      	bls.n	8015c58 <_fwalk_reent+0x38>
 8015c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	d003      	beq.n	8015c58 <_fwalk_reent+0x38>
 8015c50:	4629      	mov	r1, r5
 8015c52:	4640      	mov	r0, r8
 8015c54:	47c8      	blx	r9
 8015c56:	4306      	orrs	r6, r0
 8015c58:	3568      	adds	r5, #104	; 0x68
 8015c5a:	e7ee      	b.n	8015c3a <_fwalk_reent+0x1a>

08015c5c <rshift>:
 8015c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c5e:	6906      	ldr	r6, [r0, #16]
 8015c60:	114b      	asrs	r3, r1, #5
 8015c62:	429e      	cmp	r6, r3
 8015c64:	f100 0414 	add.w	r4, r0, #20
 8015c68:	dd30      	ble.n	8015ccc <rshift+0x70>
 8015c6a:	f011 011f 	ands.w	r1, r1, #31
 8015c6e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015c72:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015c76:	d108      	bne.n	8015c8a <rshift+0x2e>
 8015c78:	4621      	mov	r1, r4
 8015c7a:	42b2      	cmp	r2, r6
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	d211      	bcs.n	8015ca4 <rshift+0x48>
 8015c80:	f852 3b04 	ldr.w	r3, [r2], #4
 8015c84:	f841 3b04 	str.w	r3, [r1], #4
 8015c88:	e7f7      	b.n	8015c7a <rshift+0x1e>
 8015c8a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015c8e:	f1c1 0c20 	rsb	ip, r1, #32
 8015c92:	40cd      	lsrs	r5, r1
 8015c94:	3204      	adds	r2, #4
 8015c96:	4623      	mov	r3, r4
 8015c98:	42b2      	cmp	r2, r6
 8015c9a:	4617      	mov	r7, r2
 8015c9c:	d30c      	bcc.n	8015cb8 <rshift+0x5c>
 8015c9e:	601d      	str	r5, [r3, #0]
 8015ca0:	b105      	cbz	r5, 8015ca4 <rshift+0x48>
 8015ca2:	3304      	adds	r3, #4
 8015ca4:	1b1a      	subs	r2, r3, r4
 8015ca6:	42a3      	cmp	r3, r4
 8015ca8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015cac:	bf08      	it	eq
 8015cae:	2300      	moveq	r3, #0
 8015cb0:	6102      	str	r2, [r0, #16]
 8015cb2:	bf08      	it	eq
 8015cb4:	6143      	streq	r3, [r0, #20]
 8015cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cb8:	683f      	ldr	r7, [r7, #0]
 8015cba:	fa07 f70c 	lsl.w	r7, r7, ip
 8015cbe:	433d      	orrs	r5, r7
 8015cc0:	f843 5b04 	str.w	r5, [r3], #4
 8015cc4:	f852 5b04 	ldr.w	r5, [r2], #4
 8015cc8:	40cd      	lsrs	r5, r1
 8015cca:	e7e5      	b.n	8015c98 <rshift+0x3c>
 8015ccc:	4623      	mov	r3, r4
 8015cce:	e7e9      	b.n	8015ca4 <rshift+0x48>

08015cd0 <__hexdig_fun>:
 8015cd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015cd4:	2b09      	cmp	r3, #9
 8015cd6:	d802      	bhi.n	8015cde <__hexdig_fun+0xe>
 8015cd8:	3820      	subs	r0, #32
 8015cda:	b2c0      	uxtb	r0, r0
 8015cdc:	4770      	bx	lr
 8015cde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015ce2:	2b05      	cmp	r3, #5
 8015ce4:	d801      	bhi.n	8015cea <__hexdig_fun+0x1a>
 8015ce6:	3847      	subs	r0, #71	; 0x47
 8015ce8:	e7f7      	b.n	8015cda <__hexdig_fun+0xa>
 8015cea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015cee:	2b05      	cmp	r3, #5
 8015cf0:	d801      	bhi.n	8015cf6 <__hexdig_fun+0x26>
 8015cf2:	3827      	subs	r0, #39	; 0x27
 8015cf4:	e7f1      	b.n	8015cda <__hexdig_fun+0xa>
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	4770      	bx	lr

08015cfa <__gethex>:
 8015cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfe:	b08b      	sub	sp, #44	; 0x2c
 8015d00:	468a      	mov	sl, r1
 8015d02:	9002      	str	r0, [sp, #8]
 8015d04:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015d06:	9306      	str	r3, [sp, #24]
 8015d08:	4690      	mov	r8, r2
 8015d0a:	f000 fadf 	bl	80162cc <__localeconv_l>
 8015d0e:	6803      	ldr	r3, [r0, #0]
 8015d10:	9303      	str	r3, [sp, #12]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7ea fa74 	bl	8000200 <strlen>
 8015d18:	9b03      	ldr	r3, [sp, #12]
 8015d1a:	9001      	str	r0, [sp, #4]
 8015d1c:	4403      	add	r3, r0
 8015d1e:	f04f 0b00 	mov.w	fp, #0
 8015d22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015d26:	9307      	str	r3, [sp, #28]
 8015d28:	f8da 3000 	ldr.w	r3, [sl]
 8015d2c:	3302      	adds	r3, #2
 8015d2e:	461f      	mov	r7, r3
 8015d30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d34:	2830      	cmp	r0, #48	; 0x30
 8015d36:	d06c      	beq.n	8015e12 <__gethex+0x118>
 8015d38:	f7ff ffca 	bl	8015cd0 <__hexdig_fun>
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d16a      	bne.n	8015e18 <__gethex+0x11e>
 8015d42:	9a01      	ldr	r2, [sp, #4]
 8015d44:	9903      	ldr	r1, [sp, #12]
 8015d46:	4638      	mov	r0, r7
 8015d48:	f001 fe34 	bl	80179b4 <strncmp>
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	d166      	bne.n	8015e1e <__gethex+0x124>
 8015d50:	9b01      	ldr	r3, [sp, #4]
 8015d52:	5cf8      	ldrb	r0, [r7, r3]
 8015d54:	18fe      	adds	r6, r7, r3
 8015d56:	f7ff ffbb 	bl	8015cd0 <__hexdig_fun>
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d062      	beq.n	8015e24 <__gethex+0x12a>
 8015d5e:	4633      	mov	r3, r6
 8015d60:	7818      	ldrb	r0, [r3, #0]
 8015d62:	2830      	cmp	r0, #48	; 0x30
 8015d64:	461f      	mov	r7, r3
 8015d66:	f103 0301 	add.w	r3, r3, #1
 8015d6a:	d0f9      	beq.n	8015d60 <__gethex+0x66>
 8015d6c:	f7ff ffb0 	bl	8015cd0 <__hexdig_fun>
 8015d70:	fab0 f580 	clz	r5, r0
 8015d74:	096d      	lsrs	r5, r5, #5
 8015d76:	4634      	mov	r4, r6
 8015d78:	f04f 0b01 	mov.w	fp, #1
 8015d7c:	463a      	mov	r2, r7
 8015d7e:	4616      	mov	r6, r2
 8015d80:	3201      	adds	r2, #1
 8015d82:	7830      	ldrb	r0, [r6, #0]
 8015d84:	f7ff ffa4 	bl	8015cd0 <__hexdig_fun>
 8015d88:	2800      	cmp	r0, #0
 8015d8a:	d1f8      	bne.n	8015d7e <__gethex+0x84>
 8015d8c:	9a01      	ldr	r2, [sp, #4]
 8015d8e:	9903      	ldr	r1, [sp, #12]
 8015d90:	4630      	mov	r0, r6
 8015d92:	f001 fe0f 	bl	80179b4 <strncmp>
 8015d96:	b950      	cbnz	r0, 8015dae <__gethex+0xb4>
 8015d98:	b954      	cbnz	r4, 8015db0 <__gethex+0xb6>
 8015d9a:	9b01      	ldr	r3, [sp, #4]
 8015d9c:	18f4      	adds	r4, r6, r3
 8015d9e:	4622      	mov	r2, r4
 8015da0:	4616      	mov	r6, r2
 8015da2:	3201      	adds	r2, #1
 8015da4:	7830      	ldrb	r0, [r6, #0]
 8015da6:	f7ff ff93 	bl	8015cd0 <__hexdig_fun>
 8015daa:	2800      	cmp	r0, #0
 8015dac:	d1f8      	bne.n	8015da0 <__gethex+0xa6>
 8015dae:	b10c      	cbz	r4, 8015db4 <__gethex+0xba>
 8015db0:	1ba4      	subs	r4, r4, r6
 8015db2:	00a4      	lsls	r4, r4, #2
 8015db4:	7833      	ldrb	r3, [r6, #0]
 8015db6:	2b50      	cmp	r3, #80	; 0x50
 8015db8:	d001      	beq.n	8015dbe <__gethex+0xc4>
 8015dba:	2b70      	cmp	r3, #112	; 0x70
 8015dbc:	d140      	bne.n	8015e40 <__gethex+0x146>
 8015dbe:	7873      	ldrb	r3, [r6, #1]
 8015dc0:	2b2b      	cmp	r3, #43	; 0x2b
 8015dc2:	d031      	beq.n	8015e28 <__gethex+0x12e>
 8015dc4:	2b2d      	cmp	r3, #45	; 0x2d
 8015dc6:	d033      	beq.n	8015e30 <__gethex+0x136>
 8015dc8:	1c71      	adds	r1, r6, #1
 8015dca:	f04f 0900 	mov.w	r9, #0
 8015dce:	7808      	ldrb	r0, [r1, #0]
 8015dd0:	f7ff ff7e 	bl	8015cd0 <__hexdig_fun>
 8015dd4:	1e43      	subs	r3, r0, #1
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	2b18      	cmp	r3, #24
 8015dda:	d831      	bhi.n	8015e40 <__gethex+0x146>
 8015ddc:	f1a0 0210 	sub.w	r2, r0, #16
 8015de0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015de4:	f7ff ff74 	bl	8015cd0 <__hexdig_fun>
 8015de8:	1e43      	subs	r3, r0, #1
 8015dea:	b2db      	uxtb	r3, r3
 8015dec:	2b18      	cmp	r3, #24
 8015dee:	d922      	bls.n	8015e36 <__gethex+0x13c>
 8015df0:	f1b9 0f00 	cmp.w	r9, #0
 8015df4:	d000      	beq.n	8015df8 <__gethex+0xfe>
 8015df6:	4252      	negs	r2, r2
 8015df8:	4414      	add	r4, r2
 8015dfa:	f8ca 1000 	str.w	r1, [sl]
 8015dfe:	b30d      	cbz	r5, 8015e44 <__gethex+0x14a>
 8015e00:	f1bb 0f00 	cmp.w	fp, #0
 8015e04:	bf0c      	ite	eq
 8015e06:	2706      	moveq	r7, #6
 8015e08:	2700      	movne	r7, #0
 8015e0a:	4638      	mov	r0, r7
 8015e0c:	b00b      	add	sp, #44	; 0x2c
 8015e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e12:	f10b 0b01 	add.w	fp, fp, #1
 8015e16:	e78a      	b.n	8015d2e <__gethex+0x34>
 8015e18:	2500      	movs	r5, #0
 8015e1a:	462c      	mov	r4, r5
 8015e1c:	e7ae      	b.n	8015d7c <__gethex+0x82>
 8015e1e:	463e      	mov	r6, r7
 8015e20:	2501      	movs	r5, #1
 8015e22:	e7c7      	b.n	8015db4 <__gethex+0xba>
 8015e24:	4604      	mov	r4, r0
 8015e26:	e7fb      	b.n	8015e20 <__gethex+0x126>
 8015e28:	f04f 0900 	mov.w	r9, #0
 8015e2c:	1cb1      	adds	r1, r6, #2
 8015e2e:	e7ce      	b.n	8015dce <__gethex+0xd4>
 8015e30:	f04f 0901 	mov.w	r9, #1
 8015e34:	e7fa      	b.n	8015e2c <__gethex+0x132>
 8015e36:	230a      	movs	r3, #10
 8015e38:	fb03 0202 	mla	r2, r3, r2, r0
 8015e3c:	3a10      	subs	r2, #16
 8015e3e:	e7cf      	b.n	8015de0 <__gethex+0xe6>
 8015e40:	4631      	mov	r1, r6
 8015e42:	e7da      	b.n	8015dfa <__gethex+0x100>
 8015e44:	1bf3      	subs	r3, r6, r7
 8015e46:	3b01      	subs	r3, #1
 8015e48:	4629      	mov	r1, r5
 8015e4a:	2b07      	cmp	r3, #7
 8015e4c:	dc49      	bgt.n	8015ee2 <__gethex+0x1e8>
 8015e4e:	9802      	ldr	r0, [sp, #8]
 8015e50:	f000 fadc 	bl	801640c <_Balloc>
 8015e54:	9b01      	ldr	r3, [sp, #4]
 8015e56:	f100 0914 	add.w	r9, r0, #20
 8015e5a:	f04f 0b00 	mov.w	fp, #0
 8015e5e:	f1c3 0301 	rsb	r3, r3, #1
 8015e62:	4605      	mov	r5, r0
 8015e64:	f8cd 9010 	str.w	r9, [sp, #16]
 8015e68:	46da      	mov	sl, fp
 8015e6a:	9308      	str	r3, [sp, #32]
 8015e6c:	42b7      	cmp	r7, r6
 8015e6e:	d33b      	bcc.n	8015ee8 <__gethex+0x1ee>
 8015e70:	9804      	ldr	r0, [sp, #16]
 8015e72:	f840 ab04 	str.w	sl, [r0], #4
 8015e76:	eba0 0009 	sub.w	r0, r0, r9
 8015e7a:	1080      	asrs	r0, r0, #2
 8015e7c:	6128      	str	r0, [r5, #16]
 8015e7e:	0147      	lsls	r7, r0, #5
 8015e80:	4650      	mov	r0, sl
 8015e82:	f000 fb87 	bl	8016594 <__hi0bits>
 8015e86:	f8d8 6000 	ldr.w	r6, [r8]
 8015e8a:	1a3f      	subs	r7, r7, r0
 8015e8c:	42b7      	cmp	r7, r6
 8015e8e:	dd64      	ble.n	8015f5a <__gethex+0x260>
 8015e90:	1bbf      	subs	r7, r7, r6
 8015e92:	4639      	mov	r1, r7
 8015e94:	4628      	mov	r0, r5
 8015e96:	f000 fe97 	bl	8016bc8 <__any_on>
 8015e9a:	4682      	mov	sl, r0
 8015e9c:	b178      	cbz	r0, 8015ebe <__gethex+0x1c4>
 8015e9e:	1e7b      	subs	r3, r7, #1
 8015ea0:	1159      	asrs	r1, r3, #5
 8015ea2:	f003 021f 	and.w	r2, r3, #31
 8015ea6:	f04f 0a01 	mov.w	sl, #1
 8015eaa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015eae:	fa0a f202 	lsl.w	r2, sl, r2
 8015eb2:	420a      	tst	r2, r1
 8015eb4:	d003      	beq.n	8015ebe <__gethex+0x1c4>
 8015eb6:	4553      	cmp	r3, sl
 8015eb8:	dc46      	bgt.n	8015f48 <__gethex+0x24e>
 8015eba:	f04f 0a02 	mov.w	sl, #2
 8015ebe:	4639      	mov	r1, r7
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	f7ff fecb 	bl	8015c5c <rshift>
 8015ec6:	443c      	add	r4, r7
 8015ec8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ecc:	42a3      	cmp	r3, r4
 8015ece:	da52      	bge.n	8015f76 <__gethex+0x27c>
 8015ed0:	4629      	mov	r1, r5
 8015ed2:	9802      	ldr	r0, [sp, #8]
 8015ed4:	f000 face 	bl	8016474 <_Bfree>
 8015ed8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015eda:	2300      	movs	r3, #0
 8015edc:	6013      	str	r3, [r2, #0]
 8015ede:	27a3      	movs	r7, #163	; 0xa3
 8015ee0:	e793      	b.n	8015e0a <__gethex+0x110>
 8015ee2:	3101      	adds	r1, #1
 8015ee4:	105b      	asrs	r3, r3, #1
 8015ee6:	e7b0      	b.n	8015e4a <__gethex+0x150>
 8015ee8:	1e73      	subs	r3, r6, #1
 8015eea:	9305      	str	r3, [sp, #20]
 8015eec:	9a07      	ldr	r2, [sp, #28]
 8015eee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d018      	beq.n	8015f28 <__gethex+0x22e>
 8015ef6:	f1bb 0f20 	cmp.w	fp, #32
 8015efa:	d107      	bne.n	8015f0c <__gethex+0x212>
 8015efc:	9b04      	ldr	r3, [sp, #16]
 8015efe:	f8c3 a000 	str.w	sl, [r3]
 8015f02:	3304      	adds	r3, #4
 8015f04:	f04f 0a00 	mov.w	sl, #0
 8015f08:	9304      	str	r3, [sp, #16]
 8015f0a:	46d3      	mov	fp, sl
 8015f0c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015f10:	f7ff fede 	bl	8015cd0 <__hexdig_fun>
 8015f14:	f000 000f 	and.w	r0, r0, #15
 8015f18:	fa00 f00b 	lsl.w	r0, r0, fp
 8015f1c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f20:	f10b 0b04 	add.w	fp, fp, #4
 8015f24:	9b05      	ldr	r3, [sp, #20]
 8015f26:	e00d      	b.n	8015f44 <__gethex+0x24a>
 8015f28:	9b05      	ldr	r3, [sp, #20]
 8015f2a:	9a08      	ldr	r2, [sp, #32]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	42bb      	cmp	r3, r7
 8015f30:	d3e1      	bcc.n	8015ef6 <__gethex+0x1fc>
 8015f32:	4618      	mov	r0, r3
 8015f34:	9a01      	ldr	r2, [sp, #4]
 8015f36:	9903      	ldr	r1, [sp, #12]
 8015f38:	9309      	str	r3, [sp, #36]	; 0x24
 8015f3a:	f001 fd3b 	bl	80179b4 <strncmp>
 8015f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f40:	2800      	cmp	r0, #0
 8015f42:	d1d8      	bne.n	8015ef6 <__gethex+0x1fc>
 8015f44:	461e      	mov	r6, r3
 8015f46:	e791      	b.n	8015e6c <__gethex+0x172>
 8015f48:	1eb9      	subs	r1, r7, #2
 8015f4a:	4628      	mov	r0, r5
 8015f4c:	f000 fe3c 	bl	8016bc8 <__any_on>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d0b2      	beq.n	8015eba <__gethex+0x1c0>
 8015f54:	f04f 0a03 	mov.w	sl, #3
 8015f58:	e7b1      	b.n	8015ebe <__gethex+0x1c4>
 8015f5a:	da09      	bge.n	8015f70 <__gethex+0x276>
 8015f5c:	1bf7      	subs	r7, r6, r7
 8015f5e:	4629      	mov	r1, r5
 8015f60:	463a      	mov	r2, r7
 8015f62:	9802      	ldr	r0, [sp, #8]
 8015f64:	f000 fc52 	bl	801680c <__lshift>
 8015f68:	1be4      	subs	r4, r4, r7
 8015f6a:	4605      	mov	r5, r0
 8015f6c:	f100 0914 	add.w	r9, r0, #20
 8015f70:	f04f 0a00 	mov.w	sl, #0
 8015f74:	e7a8      	b.n	8015ec8 <__gethex+0x1ce>
 8015f76:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015f7a:	42a0      	cmp	r0, r4
 8015f7c:	dd6a      	ble.n	8016054 <__gethex+0x35a>
 8015f7e:	1b04      	subs	r4, r0, r4
 8015f80:	42a6      	cmp	r6, r4
 8015f82:	dc2e      	bgt.n	8015fe2 <__gethex+0x2e8>
 8015f84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f88:	2b02      	cmp	r3, #2
 8015f8a:	d022      	beq.n	8015fd2 <__gethex+0x2d8>
 8015f8c:	2b03      	cmp	r3, #3
 8015f8e:	d024      	beq.n	8015fda <__gethex+0x2e0>
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d115      	bne.n	8015fc0 <__gethex+0x2c6>
 8015f94:	42a6      	cmp	r6, r4
 8015f96:	d113      	bne.n	8015fc0 <__gethex+0x2c6>
 8015f98:	2e01      	cmp	r6, #1
 8015f9a:	dc0b      	bgt.n	8015fb4 <__gethex+0x2ba>
 8015f9c:	9a06      	ldr	r2, [sp, #24]
 8015f9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015fa2:	6013      	str	r3, [r2, #0]
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	612b      	str	r3, [r5, #16]
 8015fa8:	f8c9 3000 	str.w	r3, [r9]
 8015fac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fae:	2762      	movs	r7, #98	; 0x62
 8015fb0:	601d      	str	r5, [r3, #0]
 8015fb2:	e72a      	b.n	8015e0a <__gethex+0x110>
 8015fb4:	1e71      	subs	r1, r6, #1
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	f000 fe06 	bl	8016bc8 <__any_on>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d1ed      	bne.n	8015f9c <__gethex+0x2a2>
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	9802      	ldr	r0, [sp, #8]
 8015fc4:	f000 fa56 	bl	8016474 <_Bfree>
 8015fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015fca:	2300      	movs	r3, #0
 8015fcc:	6013      	str	r3, [r2, #0]
 8015fce:	2750      	movs	r7, #80	; 0x50
 8015fd0:	e71b      	b.n	8015e0a <__gethex+0x110>
 8015fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d0e1      	beq.n	8015f9c <__gethex+0x2a2>
 8015fd8:	e7f2      	b.n	8015fc0 <__gethex+0x2c6>
 8015fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d1dd      	bne.n	8015f9c <__gethex+0x2a2>
 8015fe0:	e7ee      	b.n	8015fc0 <__gethex+0x2c6>
 8015fe2:	1e67      	subs	r7, r4, #1
 8015fe4:	f1ba 0f00 	cmp.w	sl, #0
 8015fe8:	d131      	bne.n	801604e <__gethex+0x354>
 8015fea:	b127      	cbz	r7, 8015ff6 <__gethex+0x2fc>
 8015fec:	4639      	mov	r1, r7
 8015fee:	4628      	mov	r0, r5
 8015ff0:	f000 fdea 	bl	8016bc8 <__any_on>
 8015ff4:	4682      	mov	sl, r0
 8015ff6:	117a      	asrs	r2, r7, #5
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	f007 071f 	and.w	r7, r7, #31
 8015ffe:	fa03 f707 	lsl.w	r7, r3, r7
 8016002:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016006:	4621      	mov	r1, r4
 8016008:	421f      	tst	r7, r3
 801600a:	4628      	mov	r0, r5
 801600c:	bf18      	it	ne
 801600e:	f04a 0a02 	orrne.w	sl, sl, #2
 8016012:	1b36      	subs	r6, r6, r4
 8016014:	f7ff fe22 	bl	8015c5c <rshift>
 8016018:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801601c:	2702      	movs	r7, #2
 801601e:	f1ba 0f00 	cmp.w	sl, #0
 8016022:	d048      	beq.n	80160b6 <__gethex+0x3bc>
 8016024:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016028:	2b02      	cmp	r3, #2
 801602a:	d015      	beq.n	8016058 <__gethex+0x35e>
 801602c:	2b03      	cmp	r3, #3
 801602e:	d017      	beq.n	8016060 <__gethex+0x366>
 8016030:	2b01      	cmp	r3, #1
 8016032:	d109      	bne.n	8016048 <__gethex+0x34e>
 8016034:	f01a 0f02 	tst.w	sl, #2
 8016038:	d006      	beq.n	8016048 <__gethex+0x34e>
 801603a:	f8d9 3000 	ldr.w	r3, [r9]
 801603e:	ea4a 0a03 	orr.w	sl, sl, r3
 8016042:	f01a 0f01 	tst.w	sl, #1
 8016046:	d10e      	bne.n	8016066 <__gethex+0x36c>
 8016048:	f047 0710 	orr.w	r7, r7, #16
 801604c:	e033      	b.n	80160b6 <__gethex+0x3bc>
 801604e:	f04f 0a01 	mov.w	sl, #1
 8016052:	e7d0      	b.n	8015ff6 <__gethex+0x2fc>
 8016054:	2701      	movs	r7, #1
 8016056:	e7e2      	b.n	801601e <__gethex+0x324>
 8016058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801605a:	f1c3 0301 	rsb	r3, r3, #1
 801605e:	9315      	str	r3, [sp, #84]	; 0x54
 8016060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016062:	2b00      	cmp	r3, #0
 8016064:	d0f0      	beq.n	8016048 <__gethex+0x34e>
 8016066:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801606a:	f105 0314 	add.w	r3, r5, #20
 801606e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016072:	eb03 010a 	add.w	r1, r3, sl
 8016076:	f04f 0c00 	mov.w	ip, #0
 801607a:	4618      	mov	r0, r3
 801607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016080:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016084:	d01c      	beq.n	80160c0 <__gethex+0x3c6>
 8016086:	3201      	adds	r2, #1
 8016088:	6002      	str	r2, [r0, #0]
 801608a:	2f02      	cmp	r7, #2
 801608c:	f105 0314 	add.w	r3, r5, #20
 8016090:	d138      	bne.n	8016104 <__gethex+0x40a>
 8016092:	f8d8 2000 	ldr.w	r2, [r8]
 8016096:	3a01      	subs	r2, #1
 8016098:	42b2      	cmp	r2, r6
 801609a:	d10a      	bne.n	80160b2 <__gethex+0x3b8>
 801609c:	1171      	asrs	r1, r6, #5
 801609e:	2201      	movs	r2, #1
 80160a0:	f006 061f 	and.w	r6, r6, #31
 80160a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80160a8:	fa02 f606 	lsl.w	r6, r2, r6
 80160ac:	421e      	tst	r6, r3
 80160ae:	bf18      	it	ne
 80160b0:	4617      	movne	r7, r2
 80160b2:	f047 0720 	orr.w	r7, r7, #32
 80160b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160b8:	601d      	str	r5, [r3, #0]
 80160ba:	9b06      	ldr	r3, [sp, #24]
 80160bc:	601c      	str	r4, [r3, #0]
 80160be:	e6a4      	b.n	8015e0a <__gethex+0x110>
 80160c0:	4299      	cmp	r1, r3
 80160c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80160c6:	d8d8      	bhi.n	801607a <__gethex+0x380>
 80160c8:	68ab      	ldr	r3, [r5, #8]
 80160ca:	4599      	cmp	r9, r3
 80160cc:	db12      	blt.n	80160f4 <__gethex+0x3fa>
 80160ce:	6869      	ldr	r1, [r5, #4]
 80160d0:	9802      	ldr	r0, [sp, #8]
 80160d2:	3101      	adds	r1, #1
 80160d4:	f000 f99a 	bl	801640c <_Balloc>
 80160d8:	692a      	ldr	r2, [r5, #16]
 80160da:	3202      	adds	r2, #2
 80160dc:	f105 010c 	add.w	r1, r5, #12
 80160e0:	4683      	mov	fp, r0
 80160e2:	0092      	lsls	r2, r2, #2
 80160e4:	300c      	adds	r0, #12
 80160e6:	f7fc fe97 	bl	8012e18 <memcpy>
 80160ea:	4629      	mov	r1, r5
 80160ec:	9802      	ldr	r0, [sp, #8]
 80160ee:	f000 f9c1 	bl	8016474 <_Bfree>
 80160f2:	465d      	mov	r5, fp
 80160f4:	692b      	ldr	r3, [r5, #16]
 80160f6:	1c5a      	adds	r2, r3, #1
 80160f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80160fc:	612a      	str	r2, [r5, #16]
 80160fe:	2201      	movs	r2, #1
 8016100:	615a      	str	r2, [r3, #20]
 8016102:	e7c2      	b.n	801608a <__gethex+0x390>
 8016104:	692a      	ldr	r2, [r5, #16]
 8016106:	454a      	cmp	r2, r9
 8016108:	dd0b      	ble.n	8016122 <__gethex+0x428>
 801610a:	2101      	movs	r1, #1
 801610c:	4628      	mov	r0, r5
 801610e:	f7ff fda5 	bl	8015c5c <rshift>
 8016112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016116:	3401      	adds	r4, #1
 8016118:	42a3      	cmp	r3, r4
 801611a:	f6ff aed9 	blt.w	8015ed0 <__gethex+0x1d6>
 801611e:	2701      	movs	r7, #1
 8016120:	e7c7      	b.n	80160b2 <__gethex+0x3b8>
 8016122:	f016 061f 	ands.w	r6, r6, #31
 8016126:	d0fa      	beq.n	801611e <__gethex+0x424>
 8016128:	449a      	add	sl, r3
 801612a:	f1c6 0620 	rsb	r6, r6, #32
 801612e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016132:	f000 fa2f 	bl	8016594 <__hi0bits>
 8016136:	42b0      	cmp	r0, r6
 8016138:	dbe7      	blt.n	801610a <__gethex+0x410>
 801613a:	e7f0      	b.n	801611e <__gethex+0x424>

0801613c <L_shift>:
 801613c:	f1c2 0208 	rsb	r2, r2, #8
 8016140:	0092      	lsls	r2, r2, #2
 8016142:	b570      	push	{r4, r5, r6, lr}
 8016144:	f1c2 0620 	rsb	r6, r2, #32
 8016148:	6843      	ldr	r3, [r0, #4]
 801614a:	6804      	ldr	r4, [r0, #0]
 801614c:	fa03 f506 	lsl.w	r5, r3, r6
 8016150:	432c      	orrs	r4, r5
 8016152:	40d3      	lsrs	r3, r2
 8016154:	6004      	str	r4, [r0, #0]
 8016156:	f840 3f04 	str.w	r3, [r0, #4]!
 801615a:	4288      	cmp	r0, r1
 801615c:	d3f4      	bcc.n	8016148 <L_shift+0xc>
 801615e:	bd70      	pop	{r4, r5, r6, pc}

08016160 <__match>:
 8016160:	b530      	push	{r4, r5, lr}
 8016162:	6803      	ldr	r3, [r0, #0]
 8016164:	3301      	adds	r3, #1
 8016166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801616a:	b914      	cbnz	r4, 8016172 <__match+0x12>
 801616c:	6003      	str	r3, [r0, #0]
 801616e:	2001      	movs	r0, #1
 8016170:	bd30      	pop	{r4, r5, pc}
 8016172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016176:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801617a:	2d19      	cmp	r5, #25
 801617c:	bf98      	it	ls
 801617e:	3220      	addls	r2, #32
 8016180:	42a2      	cmp	r2, r4
 8016182:	d0f0      	beq.n	8016166 <__match+0x6>
 8016184:	2000      	movs	r0, #0
 8016186:	e7f3      	b.n	8016170 <__match+0x10>

08016188 <__hexnan>:
 8016188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618c:	680b      	ldr	r3, [r1, #0]
 801618e:	6801      	ldr	r1, [r0, #0]
 8016190:	115f      	asrs	r7, r3, #5
 8016192:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016196:	f013 031f 	ands.w	r3, r3, #31
 801619a:	b087      	sub	sp, #28
 801619c:	bf18      	it	ne
 801619e:	3704      	addne	r7, #4
 80161a0:	2500      	movs	r5, #0
 80161a2:	1f3e      	subs	r6, r7, #4
 80161a4:	4682      	mov	sl, r0
 80161a6:	4690      	mov	r8, r2
 80161a8:	9301      	str	r3, [sp, #4]
 80161aa:	f847 5c04 	str.w	r5, [r7, #-4]
 80161ae:	46b1      	mov	r9, r6
 80161b0:	4634      	mov	r4, r6
 80161b2:	9502      	str	r5, [sp, #8]
 80161b4:	46ab      	mov	fp, r5
 80161b6:	784a      	ldrb	r2, [r1, #1]
 80161b8:	1c4b      	adds	r3, r1, #1
 80161ba:	9303      	str	r3, [sp, #12]
 80161bc:	b342      	cbz	r2, 8016210 <__hexnan+0x88>
 80161be:	4610      	mov	r0, r2
 80161c0:	9105      	str	r1, [sp, #20]
 80161c2:	9204      	str	r2, [sp, #16]
 80161c4:	f7ff fd84 	bl	8015cd0 <__hexdig_fun>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d143      	bne.n	8016254 <__hexnan+0xcc>
 80161cc:	9a04      	ldr	r2, [sp, #16]
 80161ce:	9905      	ldr	r1, [sp, #20]
 80161d0:	2a20      	cmp	r2, #32
 80161d2:	d818      	bhi.n	8016206 <__hexnan+0x7e>
 80161d4:	9b02      	ldr	r3, [sp, #8]
 80161d6:	459b      	cmp	fp, r3
 80161d8:	dd13      	ble.n	8016202 <__hexnan+0x7a>
 80161da:	454c      	cmp	r4, r9
 80161dc:	d206      	bcs.n	80161ec <__hexnan+0x64>
 80161de:	2d07      	cmp	r5, #7
 80161e0:	dc04      	bgt.n	80161ec <__hexnan+0x64>
 80161e2:	462a      	mov	r2, r5
 80161e4:	4649      	mov	r1, r9
 80161e6:	4620      	mov	r0, r4
 80161e8:	f7ff ffa8 	bl	801613c <L_shift>
 80161ec:	4544      	cmp	r4, r8
 80161ee:	d944      	bls.n	801627a <__hexnan+0xf2>
 80161f0:	2300      	movs	r3, #0
 80161f2:	f1a4 0904 	sub.w	r9, r4, #4
 80161f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80161fa:	f8cd b008 	str.w	fp, [sp, #8]
 80161fe:	464c      	mov	r4, r9
 8016200:	461d      	mov	r5, r3
 8016202:	9903      	ldr	r1, [sp, #12]
 8016204:	e7d7      	b.n	80161b6 <__hexnan+0x2e>
 8016206:	2a29      	cmp	r2, #41	; 0x29
 8016208:	d14a      	bne.n	80162a0 <__hexnan+0x118>
 801620a:	3102      	adds	r1, #2
 801620c:	f8ca 1000 	str.w	r1, [sl]
 8016210:	f1bb 0f00 	cmp.w	fp, #0
 8016214:	d044      	beq.n	80162a0 <__hexnan+0x118>
 8016216:	454c      	cmp	r4, r9
 8016218:	d206      	bcs.n	8016228 <__hexnan+0xa0>
 801621a:	2d07      	cmp	r5, #7
 801621c:	dc04      	bgt.n	8016228 <__hexnan+0xa0>
 801621e:	462a      	mov	r2, r5
 8016220:	4649      	mov	r1, r9
 8016222:	4620      	mov	r0, r4
 8016224:	f7ff ff8a 	bl	801613c <L_shift>
 8016228:	4544      	cmp	r4, r8
 801622a:	d928      	bls.n	801627e <__hexnan+0xf6>
 801622c:	4643      	mov	r3, r8
 801622e:	f854 2b04 	ldr.w	r2, [r4], #4
 8016232:	f843 2b04 	str.w	r2, [r3], #4
 8016236:	42a6      	cmp	r6, r4
 8016238:	d2f9      	bcs.n	801622e <__hexnan+0xa6>
 801623a:	2200      	movs	r2, #0
 801623c:	f843 2b04 	str.w	r2, [r3], #4
 8016240:	429e      	cmp	r6, r3
 8016242:	d2fb      	bcs.n	801623c <__hexnan+0xb4>
 8016244:	6833      	ldr	r3, [r6, #0]
 8016246:	b91b      	cbnz	r3, 8016250 <__hexnan+0xc8>
 8016248:	4546      	cmp	r6, r8
 801624a:	d127      	bne.n	801629c <__hexnan+0x114>
 801624c:	2301      	movs	r3, #1
 801624e:	6033      	str	r3, [r6, #0]
 8016250:	2005      	movs	r0, #5
 8016252:	e026      	b.n	80162a2 <__hexnan+0x11a>
 8016254:	3501      	adds	r5, #1
 8016256:	2d08      	cmp	r5, #8
 8016258:	f10b 0b01 	add.w	fp, fp, #1
 801625c:	dd06      	ble.n	801626c <__hexnan+0xe4>
 801625e:	4544      	cmp	r4, r8
 8016260:	d9cf      	bls.n	8016202 <__hexnan+0x7a>
 8016262:	2300      	movs	r3, #0
 8016264:	f844 3c04 	str.w	r3, [r4, #-4]
 8016268:	2501      	movs	r5, #1
 801626a:	3c04      	subs	r4, #4
 801626c:	6822      	ldr	r2, [r4, #0]
 801626e:	f000 000f 	and.w	r0, r0, #15
 8016272:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016276:	6020      	str	r0, [r4, #0]
 8016278:	e7c3      	b.n	8016202 <__hexnan+0x7a>
 801627a:	2508      	movs	r5, #8
 801627c:	e7c1      	b.n	8016202 <__hexnan+0x7a>
 801627e:	9b01      	ldr	r3, [sp, #4]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d0df      	beq.n	8016244 <__hexnan+0xbc>
 8016284:	f04f 32ff 	mov.w	r2, #4294967295
 8016288:	f1c3 0320 	rsb	r3, r3, #32
 801628c:	fa22 f303 	lsr.w	r3, r2, r3
 8016290:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016294:	401a      	ands	r2, r3
 8016296:	f847 2c04 	str.w	r2, [r7, #-4]
 801629a:	e7d3      	b.n	8016244 <__hexnan+0xbc>
 801629c:	3e04      	subs	r6, #4
 801629e:	e7d1      	b.n	8016244 <__hexnan+0xbc>
 80162a0:	2004      	movs	r0, #4
 80162a2:	b007      	add	sp, #28
 80162a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162a8 <__locale_ctype_ptr_l>:
 80162a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80162ac:	4770      	bx	lr
	...

080162b0 <__locale_ctype_ptr>:
 80162b0:	4b04      	ldr	r3, [pc, #16]	; (80162c4 <__locale_ctype_ptr+0x14>)
 80162b2:	4a05      	ldr	r2, [pc, #20]	; (80162c8 <__locale_ctype_ptr+0x18>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	6a1b      	ldr	r3, [r3, #32]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	bf08      	it	eq
 80162bc:	4613      	moveq	r3, r2
 80162be:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80162c2:	4770      	bx	lr
 80162c4:	2000000c 	.word	0x2000000c
 80162c8:	20000070 	.word	0x20000070

080162cc <__localeconv_l>:
 80162cc:	30f0      	adds	r0, #240	; 0xf0
 80162ce:	4770      	bx	lr

080162d0 <_localeconv_r>:
 80162d0:	4b04      	ldr	r3, [pc, #16]	; (80162e4 <_localeconv_r+0x14>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	6a18      	ldr	r0, [r3, #32]
 80162d6:	4b04      	ldr	r3, [pc, #16]	; (80162e8 <_localeconv_r+0x18>)
 80162d8:	2800      	cmp	r0, #0
 80162da:	bf08      	it	eq
 80162dc:	4618      	moveq	r0, r3
 80162de:	30f0      	adds	r0, #240	; 0xf0
 80162e0:	4770      	bx	lr
 80162e2:	bf00      	nop
 80162e4:	2000000c 	.word	0x2000000c
 80162e8:	20000070 	.word	0x20000070

080162ec <_lseek_r>:
 80162ec:	b538      	push	{r3, r4, r5, lr}
 80162ee:	4c07      	ldr	r4, [pc, #28]	; (801630c <_lseek_r+0x20>)
 80162f0:	4605      	mov	r5, r0
 80162f2:	4608      	mov	r0, r1
 80162f4:	4611      	mov	r1, r2
 80162f6:	2200      	movs	r2, #0
 80162f8:	6022      	str	r2, [r4, #0]
 80162fa:	461a      	mov	r2, r3
 80162fc:	f7ef fc22 	bl	8005b44 <_lseek>
 8016300:	1c43      	adds	r3, r0, #1
 8016302:	d102      	bne.n	801630a <_lseek_r+0x1e>
 8016304:	6823      	ldr	r3, [r4, #0]
 8016306:	b103      	cbz	r3, 801630a <_lseek_r+0x1e>
 8016308:	602b      	str	r3, [r5, #0]
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	2003be1c 	.word	0x2003be1c

08016310 <__swhatbuf_r>:
 8016310:	b570      	push	{r4, r5, r6, lr}
 8016312:	460e      	mov	r6, r1
 8016314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016318:	2900      	cmp	r1, #0
 801631a:	b096      	sub	sp, #88	; 0x58
 801631c:	4614      	mov	r4, r2
 801631e:	461d      	mov	r5, r3
 8016320:	da07      	bge.n	8016332 <__swhatbuf_r+0x22>
 8016322:	2300      	movs	r3, #0
 8016324:	602b      	str	r3, [r5, #0]
 8016326:	89b3      	ldrh	r3, [r6, #12]
 8016328:	061a      	lsls	r2, r3, #24
 801632a:	d410      	bmi.n	801634e <__swhatbuf_r+0x3e>
 801632c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016330:	e00e      	b.n	8016350 <__swhatbuf_r+0x40>
 8016332:	466a      	mov	r2, sp
 8016334:	f001 fc24 	bl	8017b80 <_fstat_r>
 8016338:	2800      	cmp	r0, #0
 801633a:	dbf2      	blt.n	8016322 <__swhatbuf_r+0x12>
 801633c:	9a01      	ldr	r2, [sp, #4]
 801633e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016342:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016346:	425a      	negs	r2, r3
 8016348:	415a      	adcs	r2, r3
 801634a:	602a      	str	r2, [r5, #0]
 801634c:	e7ee      	b.n	801632c <__swhatbuf_r+0x1c>
 801634e:	2340      	movs	r3, #64	; 0x40
 8016350:	2000      	movs	r0, #0
 8016352:	6023      	str	r3, [r4, #0]
 8016354:	b016      	add	sp, #88	; 0x58
 8016356:	bd70      	pop	{r4, r5, r6, pc}

08016358 <__smakebuf_r>:
 8016358:	898b      	ldrh	r3, [r1, #12]
 801635a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801635c:	079d      	lsls	r5, r3, #30
 801635e:	4606      	mov	r6, r0
 8016360:	460c      	mov	r4, r1
 8016362:	d507      	bpl.n	8016374 <__smakebuf_r+0x1c>
 8016364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016368:	6023      	str	r3, [r4, #0]
 801636a:	6123      	str	r3, [r4, #16]
 801636c:	2301      	movs	r3, #1
 801636e:	6163      	str	r3, [r4, #20]
 8016370:	b002      	add	sp, #8
 8016372:	bd70      	pop	{r4, r5, r6, pc}
 8016374:	ab01      	add	r3, sp, #4
 8016376:	466a      	mov	r2, sp
 8016378:	f7ff ffca 	bl	8016310 <__swhatbuf_r>
 801637c:	9900      	ldr	r1, [sp, #0]
 801637e:	4605      	mov	r5, r0
 8016380:	4630      	mov	r0, r6
 8016382:	f000 fc9f 	bl	8016cc4 <_malloc_r>
 8016386:	b948      	cbnz	r0, 801639c <__smakebuf_r+0x44>
 8016388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801638c:	059a      	lsls	r2, r3, #22
 801638e:	d4ef      	bmi.n	8016370 <__smakebuf_r+0x18>
 8016390:	f023 0303 	bic.w	r3, r3, #3
 8016394:	f043 0302 	orr.w	r3, r3, #2
 8016398:	81a3      	strh	r3, [r4, #12]
 801639a:	e7e3      	b.n	8016364 <__smakebuf_r+0xc>
 801639c:	4b0d      	ldr	r3, [pc, #52]	; (80163d4 <__smakebuf_r+0x7c>)
 801639e:	62b3      	str	r3, [r6, #40]	; 0x28
 80163a0:	89a3      	ldrh	r3, [r4, #12]
 80163a2:	6020      	str	r0, [r4, #0]
 80163a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163a8:	81a3      	strh	r3, [r4, #12]
 80163aa:	9b00      	ldr	r3, [sp, #0]
 80163ac:	6163      	str	r3, [r4, #20]
 80163ae:	9b01      	ldr	r3, [sp, #4]
 80163b0:	6120      	str	r0, [r4, #16]
 80163b2:	b15b      	cbz	r3, 80163cc <__smakebuf_r+0x74>
 80163b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163b8:	4630      	mov	r0, r6
 80163ba:	f001 fbf3 	bl	8017ba4 <_isatty_r>
 80163be:	b128      	cbz	r0, 80163cc <__smakebuf_r+0x74>
 80163c0:	89a3      	ldrh	r3, [r4, #12]
 80163c2:	f023 0303 	bic.w	r3, r3, #3
 80163c6:	f043 0301 	orr.w	r3, r3, #1
 80163ca:	81a3      	strh	r3, [r4, #12]
 80163cc:	89a3      	ldrh	r3, [r4, #12]
 80163ce:	431d      	orrs	r5, r3
 80163d0:	81a5      	strh	r5, [r4, #12]
 80163d2:	e7cd      	b.n	8016370 <__smakebuf_r+0x18>
 80163d4:	08015b11 	.word	0x08015b11

080163d8 <malloc>:
 80163d8:	4b02      	ldr	r3, [pc, #8]	; (80163e4 <malloc+0xc>)
 80163da:	4601      	mov	r1, r0
 80163dc:	6818      	ldr	r0, [r3, #0]
 80163de:	f000 bc71 	b.w	8016cc4 <_malloc_r>
 80163e2:	bf00      	nop
 80163e4:	2000000c 	.word	0x2000000c

080163e8 <__ascii_mbtowc>:
 80163e8:	b082      	sub	sp, #8
 80163ea:	b901      	cbnz	r1, 80163ee <__ascii_mbtowc+0x6>
 80163ec:	a901      	add	r1, sp, #4
 80163ee:	b142      	cbz	r2, 8016402 <__ascii_mbtowc+0x1a>
 80163f0:	b14b      	cbz	r3, 8016406 <__ascii_mbtowc+0x1e>
 80163f2:	7813      	ldrb	r3, [r2, #0]
 80163f4:	600b      	str	r3, [r1, #0]
 80163f6:	7812      	ldrb	r2, [r2, #0]
 80163f8:	1c10      	adds	r0, r2, #0
 80163fa:	bf18      	it	ne
 80163fc:	2001      	movne	r0, #1
 80163fe:	b002      	add	sp, #8
 8016400:	4770      	bx	lr
 8016402:	4610      	mov	r0, r2
 8016404:	e7fb      	b.n	80163fe <__ascii_mbtowc+0x16>
 8016406:	f06f 0001 	mvn.w	r0, #1
 801640a:	e7f8      	b.n	80163fe <__ascii_mbtowc+0x16>

0801640c <_Balloc>:
 801640c:	b570      	push	{r4, r5, r6, lr}
 801640e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016410:	4604      	mov	r4, r0
 8016412:	460e      	mov	r6, r1
 8016414:	b93d      	cbnz	r5, 8016426 <_Balloc+0x1a>
 8016416:	2010      	movs	r0, #16
 8016418:	f7ff ffde 	bl	80163d8 <malloc>
 801641c:	6260      	str	r0, [r4, #36]	; 0x24
 801641e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016422:	6005      	str	r5, [r0, #0]
 8016424:	60c5      	str	r5, [r0, #12]
 8016426:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016428:	68eb      	ldr	r3, [r5, #12]
 801642a:	b183      	cbz	r3, 801644e <_Balloc+0x42>
 801642c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016434:	b9b8      	cbnz	r0, 8016466 <_Balloc+0x5a>
 8016436:	2101      	movs	r1, #1
 8016438:	fa01 f506 	lsl.w	r5, r1, r6
 801643c:	1d6a      	adds	r2, r5, #5
 801643e:	0092      	lsls	r2, r2, #2
 8016440:	4620      	mov	r0, r4
 8016442:	f000 fbe2 	bl	8016c0a <_calloc_r>
 8016446:	b160      	cbz	r0, 8016462 <_Balloc+0x56>
 8016448:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801644c:	e00e      	b.n	801646c <_Balloc+0x60>
 801644e:	2221      	movs	r2, #33	; 0x21
 8016450:	2104      	movs	r1, #4
 8016452:	4620      	mov	r0, r4
 8016454:	f000 fbd9 	bl	8016c0a <_calloc_r>
 8016458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801645a:	60e8      	str	r0, [r5, #12]
 801645c:	68db      	ldr	r3, [r3, #12]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1e4      	bne.n	801642c <_Balloc+0x20>
 8016462:	2000      	movs	r0, #0
 8016464:	bd70      	pop	{r4, r5, r6, pc}
 8016466:	6802      	ldr	r2, [r0, #0]
 8016468:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801646c:	2300      	movs	r3, #0
 801646e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016472:	e7f7      	b.n	8016464 <_Balloc+0x58>

08016474 <_Bfree>:
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016478:	4606      	mov	r6, r0
 801647a:	460d      	mov	r5, r1
 801647c:	b93c      	cbnz	r4, 801648e <_Bfree+0x1a>
 801647e:	2010      	movs	r0, #16
 8016480:	f7ff ffaa 	bl	80163d8 <malloc>
 8016484:	6270      	str	r0, [r6, #36]	; 0x24
 8016486:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801648a:	6004      	str	r4, [r0, #0]
 801648c:	60c4      	str	r4, [r0, #12]
 801648e:	b13d      	cbz	r5, 80164a0 <_Bfree+0x2c>
 8016490:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016492:	686a      	ldr	r2, [r5, #4]
 8016494:	68db      	ldr	r3, [r3, #12]
 8016496:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801649a:	6029      	str	r1, [r5, #0]
 801649c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80164a0:	bd70      	pop	{r4, r5, r6, pc}

080164a2 <__multadd>:
 80164a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a6:	690d      	ldr	r5, [r1, #16]
 80164a8:	461f      	mov	r7, r3
 80164aa:	4606      	mov	r6, r0
 80164ac:	460c      	mov	r4, r1
 80164ae:	f101 0c14 	add.w	ip, r1, #20
 80164b2:	2300      	movs	r3, #0
 80164b4:	f8dc 0000 	ldr.w	r0, [ip]
 80164b8:	b281      	uxth	r1, r0
 80164ba:	fb02 7101 	mla	r1, r2, r1, r7
 80164be:	0c0f      	lsrs	r7, r1, #16
 80164c0:	0c00      	lsrs	r0, r0, #16
 80164c2:	fb02 7000 	mla	r0, r2, r0, r7
 80164c6:	b289      	uxth	r1, r1
 80164c8:	3301      	adds	r3, #1
 80164ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80164ce:	429d      	cmp	r5, r3
 80164d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80164d4:	f84c 1b04 	str.w	r1, [ip], #4
 80164d8:	dcec      	bgt.n	80164b4 <__multadd+0x12>
 80164da:	b1d7      	cbz	r7, 8016512 <__multadd+0x70>
 80164dc:	68a3      	ldr	r3, [r4, #8]
 80164de:	42ab      	cmp	r3, r5
 80164e0:	dc12      	bgt.n	8016508 <__multadd+0x66>
 80164e2:	6861      	ldr	r1, [r4, #4]
 80164e4:	4630      	mov	r0, r6
 80164e6:	3101      	adds	r1, #1
 80164e8:	f7ff ff90 	bl	801640c <_Balloc>
 80164ec:	6922      	ldr	r2, [r4, #16]
 80164ee:	3202      	adds	r2, #2
 80164f0:	f104 010c 	add.w	r1, r4, #12
 80164f4:	4680      	mov	r8, r0
 80164f6:	0092      	lsls	r2, r2, #2
 80164f8:	300c      	adds	r0, #12
 80164fa:	f7fc fc8d 	bl	8012e18 <memcpy>
 80164fe:	4621      	mov	r1, r4
 8016500:	4630      	mov	r0, r6
 8016502:	f7ff ffb7 	bl	8016474 <_Bfree>
 8016506:	4644      	mov	r4, r8
 8016508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801650c:	3501      	adds	r5, #1
 801650e:	615f      	str	r7, [r3, #20]
 8016510:	6125      	str	r5, [r4, #16]
 8016512:	4620      	mov	r0, r4
 8016514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016518 <__s2b>:
 8016518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801651c:	460c      	mov	r4, r1
 801651e:	4615      	mov	r5, r2
 8016520:	461f      	mov	r7, r3
 8016522:	2209      	movs	r2, #9
 8016524:	3308      	adds	r3, #8
 8016526:	4606      	mov	r6, r0
 8016528:	fb93 f3f2 	sdiv	r3, r3, r2
 801652c:	2100      	movs	r1, #0
 801652e:	2201      	movs	r2, #1
 8016530:	429a      	cmp	r2, r3
 8016532:	db20      	blt.n	8016576 <__s2b+0x5e>
 8016534:	4630      	mov	r0, r6
 8016536:	f7ff ff69 	bl	801640c <_Balloc>
 801653a:	9b08      	ldr	r3, [sp, #32]
 801653c:	6143      	str	r3, [r0, #20]
 801653e:	2d09      	cmp	r5, #9
 8016540:	f04f 0301 	mov.w	r3, #1
 8016544:	6103      	str	r3, [r0, #16]
 8016546:	dd19      	ble.n	801657c <__s2b+0x64>
 8016548:	f104 0809 	add.w	r8, r4, #9
 801654c:	46c1      	mov	r9, r8
 801654e:	442c      	add	r4, r5
 8016550:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016554:	4601      	mov	r1, r0
 8016556:	3b30      	subs	r3, #48	; 0x30
 8016558:	220a      	movs	r2, #10
 801655a:	4630      	mov	r0, r6
 801655c:	f7ff ffa1 	bl	80164a2 <__multadd>
 8016560:	45a1      	cmp	r9, r4
 8016562:	d1f5      	bne.n	8016550 <__s2b+0x38>
 8016564:	eb08 0405 	add.w	r4, r8, r5
 8016568:	3c08      	subs	r4, #8
 801656a:	1b2d      	subs	r5, r5, r4
 801656c:	1963      	adds	r3, r4, r5
 801656e:	42bb      	cmp	r3, r7
 8016570:	db07      	blt.n	8016582 <__s2b+0x6a>
 8016572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016576:	0052      	lsls	r2, r2, #1
 8016578:	3101      	adds	r1, #1
 801657a:	e7d9      	b.n	8016530 <__s2b+0x18>
 801657c:	340a      	adds	r4, #10
 801657e:	2509      	movs	r5, #9
 8016580:	e7f3      	b.n	801656a <__s2b+0x52>
 8016582:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016586:	4601      	mov	r1, r0
 8016588:	3b30      	subs	r3, #48	; 0x30
 801658a:	220a      	movs	r2, #10
 801658c:	4630      	mov	r0, r6
 801658e:	f7ff ff88 	bl	80164a2 <__multadd>
 8016592:	e7eb      	b.n	801656c <__s2b+0x54>

08016594 <__hi0bits>:
 8016594:	0c02      	lsrs	r2, r0, #16
 8016596:	0412      	lsls	r2, r2, #16
 8016598:	4603      	mov	r3, r0
 801659a:	b9b2      	cbnz	r2, 80165ca <__hi0bits+0x36>
 801659c:	0403      	lsls	r3, r0, #16
 801659e:	2010      	movs	r0, #16
 80165a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80165a4:	bf04      	itt	eq
 80165a6:	021b      	lsleq	r3, r3, #8
 80165a8:	3008      	addeq	r0, #8
 80165aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80165ae:	bf04      	itt	eq
 80165b0:	011b      	lsleq	r3, r3, #4
 80165b2:	3004      	addeq	r0, #4
 80165b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80165b8:	bf04      	itt	eq
 80165ba:	009b      	lsleq	r3, r3, #2
 80165bc:	3002      	addeq	r0, #2
 80165be:	2b00      	cmp	r3, #0
 80165c0:	db06      	blt.n	80165d0 <__hi0bits+0x3c>
 80165c2:	005b      	lsls	r3, r3, #1
 80165c4:	d503      	bpl.n	80165ce <__hi0bits+0x3a>
 80165c6:	3001      	adds	r0, #1
 80165c8:	4770      	bx	lr
 80165ca:	2000      	movs	r0, #0
 80165cc:	e7e8      	b.n	80165a0 <__hi0bits+0xc>
 80165ce:	2020      	movs	r0, #32
 80165d0:	4770      	bx	lr

080165d2 <__lo0bits>:
 80165d2:	6803      	ldr	r3, [r0, #0]
 80165d4:	f013 0207 	ands.w	r2, r3, #7
 80165d8:	4601      	mov	r1, r0
 80165da:	d00b      	beq.n	80165f4 <__lo0bits+0x22>
 80165dc:	07da      	lsls	r2, r3, #31
 80165de:	d423      	bmi.n	8016628 <__lo0bits+0x56>
 80165e0:	0798      	lsls	r0, r3, #30
 80165e2:	bf49      	itett	mi
 80165e4:	085b      	lsrmi	r3, r3, #1
 80165e6:	089b      	lsrpl	r3, r3, #2
 80165e8:	2001      	movmi	r0, #1
 80165ea:	600b      	strmi	r3, [r1, #0]
 80165ec:	bf5c      	itt	pl
 80165ee:	600b      	strpl	r3, [r1, #0]
 80165f0:	2002      	movpl	r0, #2
 80165f2:	4770      	bx	lr
 80165f4:	b298      	uxth	r0, r3
 80165f6:	b9a8      	cbnz	r0, 8016624 <__lo0bits+0x52>
 80165f8:	0c1b      	lsrs	r3, r3, #16
 80165fa:	2010      	movs	r0, #16
 80165fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016600:	bf04      	itt	eq
 8016602:	0a1b      	lsreq	r3, r3, #8
 8016604:	3008      	addeq	r0, #8
 8016606:	071a      	lsls	r2, r3, #28
 8016608:	bf04      	itt	eq
 801660a:	091b      	lsreq	r3, r3, #4
 801660c:	3004      	addeq	r0, #4
 801660e:	079a      	lsls	r2, r3, #30
 8016610:	bf04      	itt	eq
 8016612:	089b      	lsreq	r3, r3, #2
 8016614:	3002      	addeq	r0, #2
 8016616:	07da      	lsls	r2, r3, #31
 8016618:	d402      	bmi.n	8016620 <__lo0bits+0x4e>
 801661a:	085b      	lsrs	r3, r3, #1
 801661c:	d006      	beq.n	801662c <__lo0bits+0x5a>
 801661e:	3001      	adds	r0, #1
 8016620:	600b      	str	r3, [r1, #0]
 8016622:	4770      	bx	lr
 8016624:	4610      	mov	r0, r2
 8016626:	e7e9      	b.n	80165fc <__lo0bits+0x2a>
 8016628:	2000      	movs	r0, #0
 801662a:	4770      	bx	lr
 801662c:	2020      	movs	r0, #32
 801662e:	4770      	bx	lr

08016630 <__i2b>:
 8016630:	b510      	push	{r4, lr}
 8016632:	460c      	mov	r4, r1
 8016634:	2101      	movs	r1, #1
 8016636:	f7ff fee9 	bl	801640c <_Balloc>
 801663a:	2201      	movs	r2, #1
 801663c:	6144      	str	r4, [r0, #20]
 801663e:	6102      	str	r2, [r0, #16]
 8016640:	bd10      	pop	{r4, pc}

08016642 <__multiply>:
 8016642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016646:	4614      	mov	r4, r2
 8016648:	690a      	ldr	r2, [r1, #16]
 801664a:	6923      	ldr	r3, [r4, #16]
 801664c:	429a      	cmp	r2, r3
 801664e:	bfb8      	it	lt
 8016650:	460b      	movlt	r3, r1
 8016652:	4688      	mov	r8, r1
 8016654:	bfbc      	itt	lt
 8016656:	46a0      	movlt	r8, r4
 8016658:	461c      	movlt	r4, r3
 801665a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801665e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016662:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016666:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801666a:	eb07 0609 	add.w	r6, r7, r9
 801666e:	42b3      	cmp	r3, r6
 8016670:	bfb8      	it	lt
 8016672:	3101      	addlt	r1, #1
 8016674:	f7ff feca 	bl	801640c <_Balloc>
 8016678:	f100 0514 	add.w	r5, r0, #20
 801667c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016680:	462b      	mov	r3, r5
 8016682:	2200      	movs	r2, #0
 8016684:	4573      	cmp	r3, lr
 8016686:	d316      	bcc.n	80166b6 <__multiply+0x74>
 8016688:	f104 0214 	add.w	r2, r4, #20
 801668c:	f108 0114 	add.w	r1, r8, #20
 8016690:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016694:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016698:	9300      	str	r3, [sp, #0]
 801669a:	9b00      	ldr	r3, [sp, #0]
 801669c:	9201      	str	r2, [sp, #4]
 801669e:	4293      	cmp	r3, r2
 80166a0:	d80c      	bhi.n	80166bc <__multiply+0x7a>
 80166a2:	2e00      	cmp	r6, #0
 80166a4:	dd03      	ble.n	80166ae <__multiply+0x6c>
 80166a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d05d      	beq.n	801676a <__multiply+0x128>
 80166ae:	6106      	str	r6, [r0, #16]
 80166b0:	b003      	add	sp, #12
 80166b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b6:	f843 2b04 	str.w	r2, [r3], #4
 80166ba:	e7e3      	b.n	8016684 <__multiply+0x42>
 80166bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80166c0:	f1bb 0f00 	cmp.w	fp, #0
 80166c4:	d023      	beq.n	801670e <__multiply+0xcc>
 80166c6:	4689      	mov	r9, r1
 80166c8:	46ac      	mov	ip, r5
 80166ca:	f04f 0800 	mov.w	r8, #0
 80166ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80166d2:	f8dc a000 	ldr.w	sl, [ip]
 80166d6:	b2a3      	uxth	r3, r4
 80166d8:	fa1f fa8a 	uxth.w	sl, sl
 80166dc:	fb0b a303 	mla	r3, fp, r3, sl
 80166e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80166e4:	f8dc 4000 	ldr.w	r4, [ip]
 80166e8:	4443      	add	r3, r8
 80166ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80166ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80166f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80166f6:	46e2      	mov	sl, ip
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166fe:	454f      	cmp	r7, r9
 8016700:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016704:	f84a 3b04 	str.w	r3, [sl], #4
 8016708:	d82b      	bhi.n	8016762 <__multiply+0x120>
 801670a:	f8cc 8004 	str.w	r8, [ip, #4]
 801670e:	9b01      	ldr	r3, [sp, #4]
 8016710:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016714:	3204      	adds	r2, #4
 8016716:	f1ba 0f00 	cmp.w	sl, #0
 801671a:	d020      	beq.n	801675e <__multiply+0x11c>
 801671c:	682b      	ldr	r3, [r5, #0]
 801671e:	4689      	mov	r9, r1
 8016720:	46a8      	mov	r8, r5
 8016722:	f04f 0b00 	mov.w	fp, #0
 8016726:	f8b9 c000 	ldrh.w	ip, [r9]
 801672a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801672e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016732:	445c      	add	r4, fp
 8016734:	46c4      	mov	ip, r8
 8016736:	b29b      	uxth	r3, r3
 8016738:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801673c:	f84c 3b04 	str.w	r3, [ip], #4
 8016740:	f859 3b04 	ldr.w	r3, [r9], #4
 8016744:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016748:	0c1b      	lsrs	r3, r3, #16
 801674a:	fb0a b303 	mla	r3, sl, r3, fp
 801674e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016752:	454f      	cmp	r7, r9
 8016754:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016758:	d805      	bhi.n	8016766 <__multiply+0x124>
 801675a:	f8c8 3004 	str.w	r3, [r8, #4]
 801675e:	3504      	adds	r5, #4
 8016760:	e79b      	b.n	801669a <__multiply+0x58>
 8016762:	46d4      	mov	ip, sl
 8016764:	e7b3      	b.n	80166ce <__multiply+0x8c>
 8016766:	46e0      	mov	r8, ip
 8016768:	e7dd      	b.n	8016726 <__multiply+0xe4>
 801676a:	3e01      	subs	r6, #1
 801676c:	e799      	b.n	80166a2 <__multiply+0x60>
	...

08016770 <__pow5mult>:
 8016770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016774:	4615      	mov	r5, r2
 8016776:	f012 0203 	ands.w	r2, r2, #3
 801677a:	4606      	mov	r6, r0
 801677c:	460f      	mov	r7, r1
 801677e:	d007      	beq.n	8016790 <__pow5mult+0x20>
 8016780:	3a01      	subs	r2, #1
 8016782:	4c21      	ldr	r4, [pc, #132]	; (8016808 <__pow5mult+0x98>)
 8016784:	2300      	movs	r3, #0
 8016786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801678a:	f7ff fe8a 	bl	80164a2 <__multadd>
 801678e:	4607      	mov	r7, r0
 8016790:	10ad      	asrs	r5, r5, #2
 8016792:	d035      	beq.n	8016800 <__pow5mult+0x90>
 8016794:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016796:	b93c      	cbnz	r4, 80167a8 <__pow5mult+0x38>
 8016798:	2010      	movs	r0, #16
 801679a:	f7ff fe1d 	bl	80163d8 <malloc>
 801679e:	6270      	str	r0, [r6, #36]	; 0x24
 80167a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167a4:	6004      	str	r4, [r0, #0]
 80167a6:	60c4      	str	r4, [r0, #12]
 80167a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80167ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80167b0:	b94c      	cbnz	r4, 80167c6 <__pow5mult+0x56>
 80167b2:	f240 2171 	movw	r1, #625	; 0x271
 80167b6:	4630      	mov	r0, r6
 80167b8:	f7ff ff3a 	bl	8016630 <__i2b>
 80167bc:	2300      	movs	r3, #0
 80167be:	f8c8 0008 	str.w	r0, [r8, #8]
 80167c2:	4604      	mov	r4, r0
 80167c4:	6003      	str	r3, [r0, #0]
 80167c6:	f04f 0800 	mov.w	r8, #0
 80167ca:	07eb      	lsls	r3, r5, #31
 80167cc:	d50a      	bpl.n	80167e4 <__pow5mult+0x74>
 80167ce:	4639      	mov	r1, r7
 80167d0:	4622      	mov	r2, r4
 80167d2:	4630      	mov	r0, r6
 80167d4:	f7ff ff35 	bl	8016642 <__multiply>
 80167d8:	4639      	mov	r1, r7
 80167da:	4681      	mov	r9, r0
 80167dc:	4630      	mov	r0, r6
 80167de:	f7ff fe49 	bl	8016474 <_Bfree>
 80167e2:	464f      	mov	r7, r9
 80167e4:	106d      	asrs	r5, r5, #1
 80167e6:	d00b      	beq.n	8016800 <__pow5mult+0x90>
 80167e8:	6820      	ldr	r0, [r4, #0]
 80167ea:	b938      	cbnz	r0, 80167fc <__pow5mult+0x8c>
 80167ec:	4622      	mov	r2, r4
 80167ee:	4621      	mov	r1, r4
 80167f0:	4630      	mov	r0, r6
 80167f2:	f7ff ff26 	bl	8016642 <__multiply>
 80167f6:	6020      	str	r0, [r4, #0]
 80167f8:	f8c0 8000 	str.w	r8, [r0]
 80167fc:	4604      	mov	r4, r0
 80167fe:	e7e4      	b.n	80167ca <__pow5mult+0x5a>
 8016800:	4638      	mov	r0, r7
 8016802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016806:	bf00      	nop
 8016808:	08018640 	.word	0x08018640

0801680c <__lshift>:
 801680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016810:	460c      	mov	r4, r1
 8016812:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016816:	6923      	ldr	r3, [r4, #16]
 8016818:	6849      	ldr	r1, [r1, #4]
 801681a:	eb0a 0903 	add.w	r9, sl, r3
 801681e:	68a3      	ldr	r3, [r4, #8]
 8016820:	4607      	mov	r7, r0
 8016822:	4616      	mov	r6, r2
 8016824:	f109 0501 	add.w	r5, r9, #1
 8016828:	42ab      	cmp	r3, r5
 801682a:	db32      	blt.n	8016892 <__lshift+0x86>
 801682c:	4638      	mov	r0, r7
 801682e:	f7ff fded 	bl	801640c <_Balloc>
 8016832:	2300      	movs	r3, #0
 8016834:	4680      	mov	r8, r0
 8016836:	f100 0114 	add.w	r1, r0, #20
 801683a:	461a      	mov	r2, r3
 801683c:	4553      	cmp	r3, sl
 801683e:	db2b      	blt.n	8016898 <__lshift+0x8c>
 8016840:	6920      	ldr	r0, [r4, #16]
 8016842:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016846:	f104 0314 	add.w	r3, r4, #20
 801684a:	f016 021f 	ands.w	r2, r6, #31
 801684e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016852:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016856:	d025      	beq.n	80168a4 <__lshift+0x98>
 8016858:	f1c2 0e20 	rsb	lr, r2, #32
 801685c:	2000      	movs	r0, #0
 801685e:	681e      	ldr	r6, [r3, #0]
 8016860:	468a      	mov	sl, r1
 8016862:	4096      	lsls	r6, r2
 8016864:	4330      	orrs	r0, r6
 8016866:	f84a 0b04 	str.w	r0, [sl], #4
 801686a:	f853 0b04 	ldr.w	r0, [r3], #4
 801686e:	459c      	cmp	ip, r3
 8016870:	fa20 f00e 	lsr.w	r0, r0, lr
 8016874:	d814      	bhi.n	80168a0 <__lshift+0x94>
 8016876:	6048      	str	r0, [r1, #4]
 8016878:	b108      	cbz	r0, 801687e <__lshift+0x72>
 801687a:	f109 0502 	add.w	r5, r9, #2
 801687e:	3d01      	subs	r5, #1
 8016880:	4638      	mov	r0, r7
 8016882:	f8c8 5010 	str.w	r5, [r8, #16]
 8016886:	4621      	mov	r1, r4
 8016888:	f7ff fdf4 	bl	8016474 <_Bfree>
 801688c:	4640      	mov	r0, r8
 801688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016892:	3101      	adds	r1, #1
 8016894:	005b      	lsls	r3, r3, #1
 8016896:	e7c7      	b.n	8016828 <__lshift+0x1c>
 8016898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801689c:	3301      	adds	r3, #1
 801689e:	e7cd      	b.n	801683c <__lshift+0x30>
 80168a0:	4651      	mov	r1, sl
 80168a2:	e7dc      	b.n	801685e <__lshift+0x52>
 80168a4:	3904      	subs	r1, #4
 80168a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80168ae:	459c      	cmp	ip, r3
 80168b0:	d8f9      	bhi.n	80168a6 <__lshift+0x9a>
 80168b2:	e7e4      	b.n	801687e <__lshift+0x72>

080168b4 <__mcmp>:
 80168b4:	6903      	ldr	r3, [r0, #16]
 80168b6:	690a      	ldr	r2, [r1, #16]
 80168b8:	1a9b      	subs	r3, r3, r2
 80168ba:	b530      	push	{r4, r5, lr}
 80168bc:	d10c      	bne.n	80168d8 <__mcmp+0x24>
 80168be:	0092      	lsls	r2, r2, #2
 80168c0:	3014      	adds	r0, #20
 80168c2:	3114      	adds	r1, #20
 80168c4:	1884      	adds	r4, r0, r2
 80168c6:	4411      	add	r1, r2
 80168c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80168cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80168d0:	4295      	cmp	r5, r2
 80168d2:	d003      	beq.n	80168dc <__mcmp+0x28>
 80168d4:	d305      	bcc.n	80168e2 <__mcmp+0x2e>
 80168d6:	2301      	movs	r3, #1
 80168d8:	4618      	mov	r0, r3
 80168da:	bd30      	pop	{r4, r5, pc}
 80168dc:	42a0      	cmp	r0, r4
 80168de:	d3f3      	bcc.n	80168c8 <__mcmp+0x14>
 80168e0:	e7fa      	b.n	80168d8 <__mcmp+0x24>
 80168e2:	f04f 33ff 	mov.w	r3, #4294967295
 80168e6:	e7f7      	b.n	80168d8 <__mcmp+0x24>

080168e8 <__mdiff>:
 80168e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168ec:	460d      	mov	r5, r1
 80168ee:	4607      	mov	r7, r0
 80168f0:	4611      	mov	r1, r2
 80168f2:	4628      	mov	r0, r5
 80168f4:	4614      	mov	r4, r2
 80168f6:	f7ff ffdd 	bl	80168b4 <__mcmp>
 80168fa:	1e06      	subs	r6, r0, #0
 80168fc:	d108      	bne.n	8016910 <__mdiff+0x28>
 80168fe:	4631      	mov	r1, r6
 8016900:	4638      	mov	r0, r7
 8016902:	f7ff fd83 	bl	801640c <_Balloc>
 8016906:	2301      	movs	r3, #1
 8016908:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016910:	bfa4      	itt	ge
 8016912:	4623      	movge	r3, r4
 8016914:	462c      	movge	r4, r5
 8016916:	4638      	mov	r0, r7
 8016918:	6861      	ldr	r1, [r4, #4]
 801691a:	bfa6      	itte	ge
 801691c:	461d      	movge	r5, r3
 801691e:	2600      	movge	r6, #0
 8016920:	2601      	movlt	r6, #1
 8016922:	f7ff fd73 	bl	801640c <_Balloc>
 8016926:	692b      	ldr	r3, [r5, #16]
 8016928:	60c6      	str	r6, [r0, #12]
 801692a:	6926      	ldr	r6, [r4, #16]
 801692c:	f105 0914 	add.w	r9, r5, #20
 8016930:	f104 0214 	add.w	r2, r4, #20
 8016934:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016938:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801693c:	f100 0514 	add.w	r5, r0, #20
 8016940:	f04f 0e00 	mov.w	lr, #0
 8016944:	f852 ab04 	ldr.w	sl, [r2], #4
 8016948:	f859 4b04 	ldr.w	r4, [r9], #4
 801694c:	fa1e f18a 	uxtah	r1, lr, sl
 8016950:	b2a3      	uxth	r3, r4
 8016952:	1ac9      	subs	r1, r1, r3
 8016954:	0c23      	lsrs	r3, r4, #16
 8016956:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801695a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801695e:	b289      	uxth	r1, r1
 8016960:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016964:	45c8      	cmp	r8, r9
 8016966:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801696a:	4694      	mov	ip, r2
 801696c:	f845 3b04 	str.w	r3, [r5], #4
 8016970:	d8e8      	bhi.n	8016944 <__mdiff+0x5c>
 8016972:	45bc      	cmp	ip, r7
 8016974:	d304      	bcc.n	8016980 <__mdiff+0x98>
 8016976:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801697a:	b183      	cbz	r3, 801699e <__mdiff+0xb6>
 801697c:	6106      	str	r6, [r0, #16]
 801697e:	e7c5      	b.n	801690c <__mdiff+0x24>
 8016980:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016984:	fa1e f381 	uxtah	r3, lr, r1
 8016988:	141a      	asrs	r2, r3, #16
 801698a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801698e:	b29b      	uxth	r3, r3
 8016990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016994:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016998:	f845 3b04 	str.w	r3, [r5], #4
 801699c:	e7e9      	b.n	8016972 <__mdiff+0x8a>
 801699e:	3e01      	subs	r6, #1
 80169a0:	e7e9      	b.n	8016976 <__mdiff+0x8e>
	...

080169a4 <__ulp>:
 80169a4:	4b12      	ldr	r3, [pc, #72]	; (80169f0 <__ulp+0x4c>)
 80169a6:	ee10 2a90 	vmov	r2, s1
 80169aa:	401a      	ands	r2, r3
 80169ac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	dd04      	ble.n	80169be <__ulp+0x1a>
 80169b4:	2000      	movs	r0, #0
 80169b6:	4619      	mov	r1, r3
 80169b8:	ec41 0b10 	vmov	d0, r0, r1
 80169bc:	4770      	bx	lr
 80169be:	425b      	negs	r3, r3
 80169c0:	151b      	asrs	r3, r3, #20
 80169c2:	2b13      	cmp	r3, #19
 80169c4:	f04f 0000 	mov.w	r0, #0
 80169c8:	f04f 0100 	mov.w	r1, #0
 80169cc:	dc04      	bgt.n	80169d8 <__ulp+0x34>
 80169ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80169d2:	fa42 f103 	asr.w	r1, r2, r3
 80169d6:	e7ef      	b.n	80169b8 <__ulp+0x14>
 80169d8:	3b14      	subs	r3, #20
 80169da:	2b1e      	cmp	r3, #30
 80169dc:	f04f 0201 	mov.w	r2, #1
 80169e0:	bfda      	itte	le
 80169e2:	f1c3 031f 	rsble	r3, r3, #31
 80169e6:	fa02 f303 	lslle.w	r3, r2, r3
 80169ea:	4613      	movgt	r3, r2
 80169ec:	4618      	mov	r0, r3
 80169ee:	e7e3      	b.n	80169b8 <__ulp+0x14>
 80169f0:	7ff00000 	.word	0x7ff00000

080169f4 <__b2d>:
 80169f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f6:	6905      	ldr	r5, [r0, #16]
 80169f8:	f100 0714 	add.w	r7, r0, #20
 80169fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016a00:	1f2e      	subs	r6, r5, #4
 8016a02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016a06:	4620      	mov	r0, r4
 8016a08:	f7ff fdc4 	bl	8016594 <__hi0bits>
 8016a0c:	f1c0 0320 	rsb	r3, r0, #32
 8016a10:	280a      	cmp	r0, #10
 8016a12:	600b      	str	r3, [r1, #0]
 8016a14:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016a8c <__b2d+0x98>
 8016a18:	dc14      	bgt.n	8016a44 <__b2d+0x50>
 8016a1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8016a1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016a22:	42b7      	cmp	r7, r6
 8016a24:	ea41 030c 	orr.w	r3, r1, ip
 8016a28:	bf34      	ite	cc
 8016a2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016a2e:	2100      	movcs	r1, #0
 8016a30:	3015      	adds	r0, #21
 8016a32:	fa04 f000 	lsl.w	r0, r4, r0
 8016a36:	fa21 f10e 	lsr.w	r1, r1, lr
 8016a3a:	ea40 0201 	orr.w	r2, r0, r1
 8016a3e:	ec43 2b10 	vmov	d0, r2, r3
 8016a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a44:	42b7      	cmp	r7, r6
 8016a46:	bf3a      	itte	cc
 8016a48:	f1a5 0608 	subcc.w	r6, r5, #8
 8016a4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016a50:	2100      	movcs	r1, #0
 8016a52:	380b      	subs	r0, #11
 8016a54:	d015      	beq.n	8016a82 <__b2d+0x8e>
 8016a56:	4084      	lsls	r4, r0
 8016a58:	f1c0 0520 	rsb	r5, r0, #32
 8016a5c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016a60:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016a64:	42be      	cmp	r6, r7
 8016a66:	fa21 fc05 	lsr.w	ip, r1, r5
 8016a6a:	ea44 030c 	orr.w	r3, r4, ip
 8016a6e:	bf8c      	ite	hi
 8016a70:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016a74:	2400      	movls	r4, #0
 8016a76:	fa01 f000 	lsl.w	r0, r1, r0
 8016a7a:	40ec      	lsrs	r4, r5
 8016a7c:	ea40 0204 	orr.w	r2, r0, r4
 8016a80:	e7dd      	b.n	8016a3e <__b2d+0x4a>
 8016a82:	ea44 030c 	orr.w	r3, r4, ip
 8016a86:	460a      	mov	r2, r1
 8016a88:	e7d9      	b.n	8016a3e <__b2d+0x4a>
 8016a8a:	bf00      	nop
 8016a8c:	3ff00000 	.word	0x3ff00000

08016a90 <__d2b>:
 8016a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a94:	460e      	mov	r6, r1
 8016a96:	2101      	movs	r1, #1
 8016a98:	ec59 8b10 	vmov	r8, r9, d0
 8016a9c:	4615      	mov	r5, r2
 8016a9e:	f7ff fcb5 	bl	801640c <_Balloc>
 8016aa2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016aa6:	4607      	mov	r7, r0
 8016aa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016aac:	bb34      	cbnz	r4, 8016afc <__d2b+0x6c>
 8016aae:	9301      	str	r3, [sp, #4]
 8016ab0:	f1b8 0300 	subs.w	r3, r8, #0
 8016ab4:	d027      	beq.n	8016b06 <__d2b+0x76>
 8016ab6:	a802      	add	r0, sp, #8
 8016ab8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016abc:	f7ff fd89 	bl	80165d2 <__lo0bits>
 8016ac0:	9900      	ldr	r1, [sp, #0]
 8016ac2:	b1f0      	cbz	r0, 8016b02 <__d2b+0x72>
 8016ac4:	9a01      	ldr	r2, [sp, #4]
 8016ac6:	f1c0 0320 	rsb	r3, r0, #32
 8016aca:	fa02 f303 	lsl.w	r3, r2, r3
 8016ace:	430b      	orrs	r3, r1
 8016ad0:	40c2      	lsrs	r2, r0
 8016ad2:	617b      	str	r3, [r7, #20]
 8016ad4:	9201      	str	r2, [sp, #4]
 8016ad6:	9b01      	ldr	r3, [sp, #4]
 8016ad8:	61bb      	str	r3, [r7, #24]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	bf14      	ite	ne
 8016ade:	2102      	movne	r1, #2
 8016ae0:	2101      	moveq	r1, #1
 8016ae2:	6139      	str	r1, [r7, #16]
 8016ae4:	b1c4      	cbz	r4, 8016b18 <__d2b+0x88>
 8016ae6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016aea:	4404      	add	r4, r0
 8016aec:	6034      	str	r4, [r6, #0]
 8016aee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016af2:	6028      	str	r0, [r5, #0]
 8016af4:	4638      	mov	r0, r7
 8016af6:	b003      	add	sp, #12
 8016af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b00:	e7d5      	b.n	8016aae <__d2b+0x1e>
 8016b02:	6179      	str	r1, [r7, #20]
 8016b04:	e7e7      	b.n	8016ad6 <__d2b+0x46>
 8016b06:	a801      	add	r0, sp, #4
 8016b08:	f7ff fd63 	bl	80165d2 <__lo0bits>
 8016b0c:	9b01      	ldr	r3, [sp, #4]
 8016b0e:	617b      	str	r3, [r7, #20]
 8016b10:	2101      	movs	r1, #1
 8016b12:	6139      	str	r1, [r7, #16]
 8016b14:	3020      	adds	r0, #32
 8016b16:	e7e5      	b.n	8016ae4 <__d2b+0x54>
 8016b18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016b20:	6030      	str	r0, [r6, #0]
 8016b22:	6918      	ldr	r0, [r3, #16]
 8016b24:	f7ff fd36 	bl	8016594 <__hi0bits>
 8016b28:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016b2c:	e7e1      	b.n	8016af2 <__d2b+0x62>

08016b2e <__ratio>:
 8016b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b32:	4688      	mov	r8, r1
 8016b34:	4669      	mov	r1, sp
 8016b36:	4681      	mov	r9, r0
 8016b38:	f7ff ff5c 	bl	80169f4 <__b2d>
 8016b3c:	a901      	add	r1, sp, #4
 8016b3e:	4640      	mov	r0, r8
 8016b40:	ec57 6b10 	vmov	r6, r7, d0
 8016b44:	f7ff ff56 	bl	80169f4 <__b2d>
 8016b48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016b4c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016b50:	eba3 0c02 	sub.w	ip, r3, r2
 8016b54:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016b58:	1a9b      	subs	r3, r3, r2
 8016b5a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016b5e:	ec5b ab10 	vmov	sl, fp, d0
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	bfce      	itee	gt
 8016b66:	463a      	movgt	r2, r7
 8016b68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b6c:	465a      	movle	r2, fp
 8016b6e:	4659      	mov	r1, fp
 8016b70:	463d      	mov	r5, r7
 8016b72:	bfd4      	ite	le
 8016b74:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016b78:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	ee10 2a10 	vmov	r2, s0
 8016b82:	460b      	mov	r3, r1
 8016b84:	4629      	mov	r1, r5
 8016b86:	f7e9 fe79 	bl	800087c <__aeabi_ddiv>
 8016b8a:	ec41 0b10 	vmov	d0, r0, r1
 8016b8e:	b003      	add	sp, #12
 8016b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b94 <__copybits>:
 8016b94:	3901      	subs	r1, #1
 8016b96:	b510      	push	{r4, lr}
 8016b98:	1149      	asrs	r1, r1, #5
 8016b9a:	6914      	ldr	r4, [r2, #16]
 8016b9c:	3101      	adds	r1, #1
 8016b9e:	f102 0314 	add.w	r3, r2, #20
 8016ba2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016ba6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016baa:	42a3      	cmp	r3, r4
 8016bac:	4602      	mov	r2, r0
 8016bae:	d303      	bcc.n	8016bb8 <__copybits+0x24>
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	428a      	cmp	r2, r1
 8016bb4:	d305      	bcc.n	8016bc2 <__copybits+0x2e>
 8016bb6:	bd10      	pop	{r4, pc}
 8016bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bbc:	f840 2b04 	str.w	r2, [r0], #4
 8016bc0:	e7f3      	b.n	8016baa <__copybits+0x16>
 8016bc2:	f842 3b04 	str.w	r3, [r2], #4
 8016bc6:	e7f4      	b.n	8016bb2 <__copybits+0x1e>

08016bc8 <__any_on>:
 8016bc8:	f100 0214 	add.w	r2, r0, #20
 8016bcc:	6900      	ldr	r0, [r0, #16]
 8016bce:	114b      	asrs	r3, r1, #5
 8016bd0:	4298      	cmp	r0, r3
 8016bd2:	b510      	push	{r4, lr}
 8016bd4:	db11      	blt.n	8016bfa <__any_on+0x32>
 8016bd6:	dd0a      	ble.n	8016bee <__any_on+0x26>
 8016bd8:	f011 011f 	ands.w	r1, r1, #31
 8016bdc:	d007      	beq.n	8016bee <__any_on+0x26>
 8016bde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016be2:	fa24 f001 	lsr.w	r0, r4, r1
 8016be6:	fa00 f101 	lsl.w	r1, r0, r1
 8016bea:	428c      	cmp	r4, r1
 8016bec:	d10b      	bne.n	8016c06 <__any_on+0x3e>
 8016bee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016bf2:	4293      	cmp	r3, r2
 8016bf4:	d803      	bhi.n	8016bfe <__any_on+0x36>
 8016bf6:	2000      	movs	r0, #0
 8016bf8:	bd10      	pop	{r4, pc}
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	e7f7      	b.n	8016bee <__any_on+0x26>
 8016bfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016c02:	2900      	cmp	r1, #0
 8016c04:	d0f5      	beq.n	8016bf2 <__any_on+0x2a>
 8016c06:	2001      	movs	r0, #1
 8016c08:	e7f6      	b.n	8016bf8 <__any_on+0x30>

08016c0a <_calloc_r>:
 8016c0a:	b538      	push	{r3, r4, r5, lr}
 8016c0c:	fb02 f401 	mul.w	r4, r2, r1
 8016c10:	4621      	mov	r1, r4
 8016c12:	f000 f857 	bl	8016cc4 <_malloc_r>
 8016c16:	4605      	mov	r5, r0
 8016c18:	b118      	cbz	r0, 8016c22 <_calloc_r+0x18>
 8016c1a:	4622      	mov	r2, r4
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	f7fc f906 	bl	8012e2e <memset>
 8016c22:	4628      	mov	r0, r5
 8016c24:	bd38      	pop	{r3, r4, r5, pc}
	...

08016c28 <_free_r>:
 8016c28:	b538      	push	{r3, r4, r5, lr}
 8016c2a:	4605      	mov	r5, r0
 8016c2c:	2900      	cmp	r1, #0
 8016c2e:	d045      	beq.n	8016cbc <_free_r+0x94>
 8016c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c34:	1f0c      	subs	r4, r1, #4
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	bfb8      	it	lt
 8016c3a:	18e4      	addlt	r4, r4, r3
 8016c3c:	f000 ffdb 	bl	8017bf6 <__malloc_lock>
 8016c40:	4a1f      	ldr	r2, [pc, #124]	; (8016cc0 <_free_r+0x98>)
 8016c42:	6813      	ldr	r3, [r2, #0]
 8016c44:	4610      	mov	r0, r2
 8016c46:	b933      	cbnz	r3, 8016c56 <_free_r+0x2e>
 8016c48:	6063      	str	r3, [r4, #4]
 8016c4a:	6014      	str	r4, [r2, #0]
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c52:	f000 bfd1 	b.w	8017bf8 <__malloc_unlock>
 8016c56:	42a3      	cmp	r3, r4
 8016c58:	d90c      	bls.n	8016c74 <_free_r+0x4c>
 8016c5a:	6821      	ldr	r1, [r4, #0]
 8016c5c:	1862      	adds	r2, r4, r1
 8016c5e:	4293      	cmp	r3, r2
 8016c60:	bf04      	itt	eq
 8016c62:	681a      	ldreq	r2, [r3, #0]
 8016c64:	685b      	ldreq	r3, [r3, #4]
 8016c66:	6063      	str	r3, [r4, #4]
 8016c68:	bf04      	itt	eq
 8016c6a:	1852      	addeq	r2, r2, r1
 8016c6c:	6022      	streq	r2, [r4, #0]
 8016c6e:	6004      	str	r4, [r0, #0]
 8016c70:	e7ec      	b.n	8016c4c <_free_r+0x24>
 8016c72:	4613      	mov	r3, r2
 8016c74:	685a      	ldr	r2, [r3, #4]
 8016c76:	b10a      	cbz	r2, 8016c7c <_free_r+0x54>
 8016c78:	42a2      	cmp	r2, r4
 8016c7a:	d9fa      	bls.n	8016c72 <_free_r+0x4a>
 8016c7c:	6819      	ldr	r1, [r3, #0]
 8016c7e:	1858      	adds	r0, r3, r1
 8016c80:	42a0      	cmp	r0, r4
 8016c82:	d10b      	bne.n	8016c9c <_free_r+0x74>
 8016c84:	6820      	ldr	r0, [r4, #0]
 8016c86:	4401      	add	r1, r0
 8016c88:	1858      	adds	r0, r3, r1
 8016c8a:	4282      	cmp	r2, r0
 8016c8c:	6019      	str	r1, [r3, #0]
 8016c8e:	d1dd      	bne.n	8016c4c <_free_r+0x24>
 8016c90:	6810      	ldr	r0, [r2, #0]
 8016c92:	6852      	ldr	r2, [r2, #4]
 8016c94:	605a      	str	r2, [r3, #4]
 8016c96:	4401      	add	r1, r0
 8016c98:	6019      	str	r1, [r3, #0]
 8016c9a:	e7d7      	b.n	8016c4c <_free_r+0x24>
 8016c9c:	d902      	bls.n	8016ca4 <_free_r+0x7c>
 8016c9e:	230c      	movs	r3, #12
 8016ca0:	602b      	str	r3, [r5, #0]
 8016ca2:	e7d3      	b.n	8016c4c <_free_r+0x24>
 8016ca4:	6820      	ldr	r0, [r4, #0]
 8016ca6:	1821      	adds	r1, r4, r0
 8016ca8:	428a      	cmp	r2, r1
 8016caa:	bf04      	itt	eq
 8016cac:	6811      	ldreq	r1, [r2, #0]
 8016cae:	6852      	ldreq	r2, [r2, #4]
 8016cb0:	6062      	str	r2, [r4, #4]
 8016cb2:	bf04      	itt	eq
 8016cb4:	1809      	addeq	r1, r1, r0
 8016cb6:	6021      	streq	r1, [r4, #0]
 8016cb8:	605c      	str	r4, [r3, #4]
 8016cba:	e7c7      	b.n	8016c4c <_free_r+0x24>
 8016cbc:	bd38      	pop	{r3, r4, r5, pc}
 8016cbe:	bf00      	nop
 8016cc0:	2003747c 	.word	0x2003747c

08016cc4 <_malloc_r>:
 8016cc4:	b570      	push	{r4, r5, r6, lr}
 8016cc6:	1ccd      	adds	r5, r1, #3
 8016cc8:	f025 0503 	bic.w	r5, r5, #3
 8016ccc:	3508      	adds	r5, #8
 8016cce:	2d0c      	cmp	r5, #12
 8016cd0:	bf38      	it	cc
 8016cd2:	250c      	movcc	r5, #12
 8016cd4:	2d00      	cmp	r5, #0
 8016cd6:	4606      	mov	r6, r0
 8016cd8:	db01      	blt.n	8016cde <_malloc_r+0x1a>
 8016cda:	42a9      	cmp	r1, r5
 8016cdc:	d903      	bls.n	8016ce6 <_malloc_r+0x22>
 8016cde:	230c      	movs	r3, #12
 8016ce0:	6033      	str	r3, [r6, #0]
 8016ce2:	2000      	movs	r0, #0
 8016ce4:	bd70      	pop	{r4, r5, r6, pc}
 8016ce6:	f000 ff86 	bl	8017bf6 <__malloc_lock>
 8016cea:	4a21      	ldr	r2, [pc, #132]	; (8016d70 <_malloc_r+0xac>)
 8016cec:	6814      	ldr	r4, [r2, #0]
 8016cee:	4621      	mov	r1, r4
 8016cf0:	b991      	cbnz	r1, 8016d18 <_malloc_r+0x54>
 8016cf2:	4c20      	ldr	r4, [pc, #128]	; (8016d74 <_malloc_r+0xb0>)
 8016cf4:	6823      	ldr	r3, [r4, #0]
 8016cf6:	b91b      	cbnz	r3, 8016d00 <_malloc_r+0x3c>
 8016cf8:	4630      	mov	r0, r6
 8016cfa:	f000 fe19 	bl	8017930 <_sbrk_r>
 8016cfe:	6020      	str	r0, [r4, #0]
 8016d00:	4629      	mov	r1, r5
 8016d02:	4630      	mov	r0, r6
 8016d04:	f000 fe14 	bl	8017930 <_sbrk_r>
 8016d08:	1c43      	adds	r3, r0, #1
 8016d0a:	d124      	bne.n	8016d56 <_malloc_r+0x92>
 8016d0c:	230c      	movs	r3, #12
 8016d0e:	6033      	str	r3, [r6, #0]
 8016d10:	4630      	mov	r0, r6
 8016d12:	f000 ff71 	bl	8017bf8 <__malloc_unlock>
 8016d16:	e7e4      	b.n	8016ce2 <_malloc_r+0x1e>
 8016d18:	680b      	ldr	r3, [r1, #0]
 8016d1a:	1b5b      	subs	r3, r3, r5
 8016d1c:	d418      	bmi.n	8016d50 <_malloc_r+0x8c>
 8016d1e:	2b0b      	cmp	r3, #11
 8016d20:	d90f      	bls.n	8016d42 <_malloc_r+0x7e>
 8016d22:	600b      	str	r3, [r1, #0]
 8016d24:	50cd      	str	r5, [r1, r3]
 8016d26:	18cc      	adds	r4, r1, r3
 8016d28:	4630      	mov	r0, r6
 8016d2a:	f000 ff65 	bl	8017bf8 <__malloc_unlock>
 8016d2e:	f104 000b 	add.w	r0, r4, #11
 8016d32:	1d23      	adds	r3, r4, #4
 8016d34:	f020 0007 	bic.w	r0, r0, #7
 8016d38:	1ac3      	subs	r3, r0, r3
 8016d3a:	d0d3      	beq.n	8016ce4 <_malloc_r+0x20>
 8016d3c:	425a      	negs	r2, r3
 8016d3e:	50e2      	str	r2, [r4, r3]
 8016d40:	e7d0      	b.n	8016ce4 <_malloc_r+0x20>
 8016d42:	428c      	cmp	r4, r1
 8016d44:	684b      	ldr	r3, [r1, #4]
 8016d46:	bf16      	itet	ne
 8016d48:	6063      	strne	r3, [r4, #4]
 8016d4a:	6013      	streq	r3, [r2, #0]
 8016d4c:	460c      	movne	r4, r1
 8016d4e:	e7eb      	b.n	8016d28 <_malloc_r+0x64>
 8016d50:	460c      	mov	r4, r1
 8016d52:	6849      	ldr	r1, [r1, #4]
 8016d54:	e7cc      	b.n	8016cf0 <_malloc_r+0x2c>
 8016d56:	1cc4      	adds	r4, r0, #3
 8016d58:	f024 0403 	bic.w	r4, r4, #3
 8016d5c:	42a0      	cmp	r0, r4
 8016d5e:	d005      	beq.n	8016d6c <_malloc_r+0xa8>
 8016d60:	1a21      	subs	r1, r4, r0
 8016d62:	4630      	mov	r0, r6
 8016d64:	f000 fde4 	bl	8017930 <_sbrk_r>
 8016d68:	3001      	adds	r0, #1
 8016d6a:	d0cf      	beq.n	8016d0c <_malloc_r+0x48>
 8016d6c:	6025      	str	r5, [r4, #0]
 8016d6e:	e7db      	b.n	8016d28 <_malloc_r+0x64>
 8016d70:	2003747c 	.word	0x2003747c
 8016d74:	20037480 	.word	0x20037480

08016d78 <__ssputs_r>:
 8016d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d7c:	688e      	ldr	r6, [r1, #8]
 8016d7e:	429e      	cmp	r6, r3
 8016d80:	4682      	mov	sl, r0
 8016d82:	460c      	mov	r4, r1
 8016d84:	4690      	mov	r8, r2
 8016d86:	4699      	mov	r9, r3
 8016d88:	d837      	bhi.n	8016dfa <__ssputs_r+0x82>
 8016d8a:	898a      	ldrh	r2, [r1, #12]
 8016d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d90:	d031      	beq.n	8016df6 <__ssputs_r+0x7e>
 8016d92:	6825      	ldr	r5, [r4, #0]
 8016d94:	6909      	ldr	r1, [r1, #16]
 8016d96:	1a6f      	subs	r7, r5, r1
 8016d98:	6965      	ldr	r5, [r4, #20]
 8016d9a:	2302      	movs	r3, #2
 8016d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016da0:	fb95 f5f3 	sdiv	r5, r5, r3
 8016da4:	f109 0301 	add.w	r3, r9, #1
 8016da8:	443b      	add	r3, r7
 8016daa:	429d      	cmp	r5, r3
 8016dac:	bf38      	it	cc
 8016dae:	461d      	movcc	r5, r3
 8016db0:	0553      	lsls	r3, r2, #21
 8016db2:	d530      	bpl.n	8016e16 <__ssputs_r+0x9e>
 8016db4:	4629      	mov	r1, r5
 8016db6:	f7ff ff85 	bl	8016cc4 <_malloc_r>
 8016dba:	4606      	mov	r6, r0
 8016dbc:	b950      	cbnz	r0, 8016dd4 <__ssputs_r+0x5c>
 8016dbe:	230c      	movs	r3, #12
 8016dc0:	f8ca 3000 	str.w	r3, [sl]
 8016dc4:	89a3      	ldrh	r3, [r4, #12]
 8016dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dca:	81a3      	strh	r3, [r4, #12]
 8016dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dd4:	463a      	mov	r2, r7
 8016dd6:	6921      	ldr	r1, [r4, #16]
 8016dd8:	f7fc f81e 	bl	8012e18 <memcpy>
 8016ddc:	89a3      	ldrh	r3, [r4, #12]
 8016dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016de6:	81a3      	strh	r3, [r4, #12]
 8016de8:	6126      	str	r6, [r4, #16]
 8016dea:	6165      	str	r5, [r4, #20]
 8016dec:	443e      	add	r6, r7
 8016dee:	1bed      	subs	r5, r5, r7
 8016df0:	6026      	str	r6, [r4, #0]
 8016df2:	60a5      	str	r5, [r4, #8]
 8016df4:	464e      	mov	r6, r9
 8016df6:	454e      	cmp	r6, r9
 8016df8:	d900      	bls.n	8016dfc <__ssputs_r+0x84>
 8016dfa:	464e      	mov	r6, r9
 8016dfc:	4632      	mov	r2, r6
 8016dfe:	4641      	mov	r1, r8
 8016e00:	6820      	ldr	r0, [r4, #0]
 8016e02:	f000 fedf 	bl	8017bc4 <memmove>
 8016e06:	68a3      	ldr	r3, [r4, #8]
 8016e08:	1b9b      	subs	r3, r3, r6
 8016e0a:	60a3      	str	r3, [r4, #8]
 8016e0c:	6823      	ldr	r3, [r4, #0]
 8016e0e:	441e      	add	r6, r3
 8016e10:	6026      	str	r6, [r4, #0]
 8016e12:	2000      	movs	r0, #0
 8016e14:	e7dc      	b.n	8016dd0 <__ssputs_r+0x58>
 8016e16:	462a      	mov	r2, r5
 8016e18:	f000 feef 	bl	8017bfa <_realloc_r>
 8016e1c:	4606      	mov	r6, r0
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	d1e2      	bne.n	8016de8 <__ssputs_r+0x70>
 8016e22:	6921      	ldr	r1, [r4, #16]
 8016e24:	4650      	mov	r0, sl
 8016e26:	f7ff feff 	bl	8016c28 <_free_r>
 8016e2a:	e7c8      	b.n	8016dbe <__ssputs_r+0x46>

08016e2c <_svfiprintf_r>:
 8016e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e30:	461d      	mov	r5, r3
 8016e32:	898b      	ldrh	r3, [r1, #12]
 8016e34:	061f      	lsls	r7, r3, #24
 8016e36:	b09d      	sub	sp, #116	; 0x74
 8016e38:	4680      	mov	r8, r0
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	4616      	mov	r6, r2
 8016e3e:	d50f      	bpl.n	8016e60 <_svfiprintf_r+0x34>
 8016e40:	690b      	ldr	r3, [r1, #16]
 8016e42:	b96b      	cbnz	r3, 8016e60 <_svfiprintf_r+0x34>
 8016e44:	2140      	movs	r1, #64	; 0x40
 8016e46:	f7ff ff3d 	bl	8016cc4 <_malloc_r>
 8016e4a:	6020      	str	r0, [r4, #0]
 8016e4c:	6120      	str	r0, [r4, #16]
 8016e4e:	b928      	cbnz	r0, 8016e5c <_svfiprintf_r+0x30>
 8016e50:	230c      	movs	r3, #12
 8016e52:	f8c8 3000 	str.w	r3, [r8]
 8016e56:	f04f 30ff 	mov.w	r0, #4294967295
 8016e5a:	e0c8      	b.n	8016fee <_svfiprintf_r+0x1c2>
 8016e5c:	2340      	movs	r3, #64	; 0x40
 8016e5e:	6163      	str	r3, [r4, #20]
 8016e60:	2300      	movs	r3, #0
 8016e62:	9309      	str	r3, [sp, #36]	; 0x24
 8016e64:	2320      	movs	r3, #32
 8016e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e6a:	2330      	movs	r3, #48	; 0x30
 8016e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e70:	9503      	str	r5, [sp, #12]
 8016e72:	f04f 0b01 	mov.w	fp, #1
 8016e76:	4637      	mov	r7, r6
 8016e78:	463d      	mov	r5, r7
 8016e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e7e:	b10b      	cbz	r3, 8016e84 <_svfiprintf_r+0x58>
 8016e80:	2b25      	cmp	r3, #37	; 0x25
 8016e82:	d13e      	bne.n	8016f02 <_svfiprintf_r+0xd6>
 8016e84:	ebb7 0a06 	subs.w	sl, r7, r6
 8016e88:	d00b      	beq.n	8016ea2 <_svfiprintf_r+0x76>
 8016e8a:	4653      	mov	r3, sl
 8016e8c:	4632      	mov	r2, r6
 8016e8e:	4621      	mov	r1, r4
 8016e90:	4640      	mov	r0, r8
 8016e92:	f7ff ff71 	bl	8016d78 <__ssputs_r>
 8016e96:	3001      	adds	r0, #1
 8016e98:	f000 80a4 	beq.w	8016fe4 <_svfiprintf_r+0x1b8>
 8016e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9e:	4453      	add	r3, sl
 8016ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ea2:	783b      	ldrb	r3, [r7, #0]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f000 809d 	beq.w	8016fe4 <_svfiprintf_r+0x1b8>
 8016eaa:	2300      	movs	r3, #0
 8016eac:	f04f 32ff 	mov.w	r2, #4294967295
 8016eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016eb4:	9304      	str	r3, [sp, #16]
 8016eb6:	9307      	str	r3, [sp, #28]
 8016eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8016ebe:	462f      	mov	r7, r5
 8016ec0:	2205      	movs	r2, #5
 8016ec2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016ec6:	4850      	ldr	r0, [pc, #320]	; (8017008 <_svfiprintf_r+0x1dc>)
 8016ec8:	f7e9 f9a2 	bl	8000210 <memchr>
 8016ecc:	9b04      	ldr	r3, [sp, #16]
 8016ece:	b9d0      	cbnz	r0, 8016f06 <_svfiprintf_r+0xda>
 8016ed0:	06d9      	lsls	r1, r3, #27
 8016ed2:	bf44      	itt	mi
 8016ed4:	2220      	movmi	r2, #32
 8016ed6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016eda:	071a      	lsls	r2, r3, #28
 8016edc:	bf44      	itt	mi
 8016ede:	222b      	movmi	r2, #43	; 0x2b
 8016ee0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ee4:	782a      	ldrb	r2, [r5, #0]
 8016ee6:	2a2a      	cmp	r2, #42	; 0x2a
 8016ee8:	d015      	beq.n	8016f16 <_svfiprintf_r+0xea>
 8016eea:	9a07      	ldr	r2, [sp, #28]
 8016eec:	462f      	mov	r7, r5
 8016eee:	2000      	movs	r0, #0
 8016ef0:	250a      	movs	r5, #10
 8016ef2:	4639      	mov	r1, r7
 8016ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ef8:	3b30      	subs	r3, #48	; 0x30
 8016efa:	2b09      	cmp	r3, #9
 8016efc:	d94d      	bls.n	8016f9a <_svfiprintf_r+0x16e>
 8016efe:	b1b8      	cbz	r0, 8016f30 <_svfiprintf_r+0x104>
 8016f00:	e00f      	b.n	8016f22 <_svfiprintf_r+0xf6>
 8016f02:	462f      	mov	r7, r5
 8016f04:	e7b8      	b.n	8016e78 <_svfiprintf_r+0x4c>
 8016f06:	4a40      	ldr	r2, [pc, #256]	; (8017008 <_svfiprintf_r+0x1dc>)
 8016f08:	1a80      	subs	r0, r0, r2
 8016f0a:	fa0b f000 	lsl.w	r0, fp, r0
 8016f0e:	4318      	orrs	r0, r3
 8016f10:	9004      	str	r0, [sp, #16]
 8016f12:	463d      	mov	r5, r7
 8016f14:	e7d3      	b.n	8016ebe <_svfiprintf_r+0x92>
 8016f16:	9a03      	ldr	r2, [sp, #12]
 8016f18:	1d11      	adds	r1, r2, #4
 8016f1a:	6812      	ldr	r2, [r2, #0]
 8016f1c:	9103      	str	r1, [sp, #12]
 8016f1e:	2a00      	cmp	r2, #0
 8016f20:	db01      	blt.n	8016f26 <_svfiprintf_r+0xfa>
 8016f22:	9207      	str	r2, [sp, #28]
 8016f24:	e004      	b.n	8016f30 <_svfiprintf_r+0x104>
 8016f26:	4252      	negs	r2, r2
 8016f28:	f043 0302 	orr.w	r3, r3, #2
 8016f2c:	9207      	str	r2, [sp, #28]
 8016f2e:	9304      	str	r3, [sp, #16]
 8016f30:	783b      	ldrb	r3, [r7, #0]
 8016f32:	2b2e      	cmp	r3, #46	; 0x2e
 8016f34:	d10c      	bne.n	8016f50 <_svfiprintf_r+0x124>
 8016f36:	787b      	ldrb	r3, [r7, #1]
 8016f38:	2b2a      	cmp	r3, #42	; 0x2a
 8016f3a:	d133      	bne.n	8016fa4 <_svfiprintf_r+0x178>
 8016f3c:	9b03      	ldr	r3, [sp, #12]
 8016f3e:	1d1a      	adds	r2, r3, #4
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	9203      	str	r2, [sp, #12]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	bfb8      	it	lt
 8016f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f4c:	3702      	adds	r7, #2
 8016f4e:	9305      	str	r3, [sp, #20]
 8016f50:	4d2e      	ldr	r5, [pc, #184]	; (801700c <_svfiprintf_r+0x1e0>)
 8016f52:	7839      	ldrb	r1, [r7, #0]
 8016f54:	2203      	movs	r2, #3
 8016f56:	4628      	mov	r0, r5
 8016f58:	f7e9 f95a 	bl	8000210 <memchr>
 8016f5c:	b138      	cbz	r0, 8016f6e <_svfiprintf_r+0x142>
 8016f5e:	2340      	movs	r3, #64	; 0x40
 8016f60:	1b40      	subs	r0, r0, r5
 8016f62:	fa03 f000 	lsl.w	r0, r3, r0
 8016f66:	9b04      	ldr	r3, [sp, #16]
 8016f68:	4303      	orrs	r3, r0
 8016f6a:	3701      	adds	r7, #1
 8016f6c:	9304      	str	r3, [sp, #16]
 8016f6e:	7839      	ldrb	r1, [r7, #0]
 8016f70:	4827      	ldr	r0, [pc, #156]	; (8017010 <_svfiprintf_r+0x1e4>)
 8016f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f76:	2206      	movs	r2, #6
 8016f78:	1c7e      	adds	r6, r7, #1
 8016f7a:	f7e9 f949 	bl	8000210 <memchr>
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	d038      	beq.n	8016ff4 <_svfiprintf_r+0x1c8>
 8016f82:	4b24      	ldr	r3, [pc, #144]	; (8017014 <_svfiprintf_r+0x1e8>)
 8016f84:	bb13      	cbnz	r3, 8016fcc <_svfiprintf_r+0x1a0>
 8016f86:	9b03      	ldr	r3, [sp, #12]
 8016f88:	3307      	adds	r3, #7
 8016f8a:	f023 0307 	bic.w	r3, r3, #7
 8016f8e:	3308      	adds	r3, #8
 8016f90:	9303      	str	r3, [sp, #12]
 8016f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f94:	444b      	add	r3, r9
 8016f96:	9309      	str	r3, [sp, #36]	; 0x24
 8016f98:	e76d      	b.n	8016e76 <_svfiprintf_r+0x4a>
 8016f9a:	fb05 3202 	mla	r2, r5, r2, r3
 8016f9e:	2001      	movs	r0, #1
 8016fa0:	460f      	mov	r7, r1
 8016fa2:	e7a6      	b.n	8016ef2 <_svfiprintf_r+0xc6>
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	3701      	adds	r7, #1
 8016fa8:	9305      	str	r3, [sp, #20]
 8016faa:	4619      	mov	r1, r3
 8016fac:	250a      	movs	r5, #10
 8016fae:	4638      	mov	r0, r7
 8016fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fb4:	3a30      	subs	r2, #48	; 0x30
 8016fb6:	2a09      	cmp	r2, #9
 8016fb8:	d903      	bls.n	8016fc2 <_svfiprintf_r+0x196>
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d0c8      	beq.n	8016f50 <_svfiprintf_r+0x124>
 8016fbe:	9105      	str	r1, [sp, #20]
 8016fc0:	e7c6      	b.n	8016f50 <_svfiprintf_r+0x124>
 8016fc2:	fb05 2101 	mla	r1, r5, r1, r2
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	4607      	mov	r7, r0
 8016fca:	e7f0      	b.n	8016fae <_svfiprintf_r+0x182>
 8016fcc:	ab03      	add	r3, sp, #12
 8016fce:	9300      	str	r3, [sp, #0]
 8016fd0:	4622      	mov	r2, r4
 8016fd2:	4b11      	ldr	r3, [pc, #68]	; (8017018 <_svfiprintf_r+0x1ec>)
 8016fd4:	a904      	add	r1, sp, #16
 8016fd6:	4640      	mov	r0, r8
 8016fd8:	f7fb ffc6 	bl	8012f68 <_printf_float>
 8016fdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016fe0:	4681      	mov	r9, r0
 8016fe2:	d1d6      	bne.n	8016f92 <_svfiprintf_r+0x166>
 8016fe4:	89a3      	ldrh	r3, [r4, #12]
 8016fe6:	065b      	lsls	r3, r3, #25
 8016fe8:	f53f af35 	bmi.w	8016e56 <_svfiprintf_r+0x2a>
 8016fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fee:	b01d      	add	sp, #116	; 0x74
 8016ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ff4:	ab03      	add	r3, sp, #12
 8016ff6:	9300      	str	r3, [sp, #0]
 8016ff8:	4622      	mov	r2, r4
 8016ffa:	4b07      	ldr	r3, [pc, #28]	; (8017018 <_svfiprintf_r+0x1ec>)
 8016ffc:	a904      	add	r1, sp, #16
 8016ffe:	4640      	mov	r0, r8
 8017000:	f7fc fa68 	bl	80134d4 <_printf_i>
 8017004:	e7ea      	b.n	8016fdc <_svfiprintf_r+0x1b0>
 8017006:	bf00      	nop
 8017008:	0801864c 	.word	0x0801864c
 801700c:	08018652 	.word	0x08018652
 8017010:	08018656 	.word	0x08018656
 8017014:	08012f69 	.word	0x08012f69
 8017018:	08016d79 	.word	0x08016d79

0801701c <_sungetc_r>:
 801701c:	b538      	push	{r3, r4, r5, lr}
 801701e:	1c4b      	adds	r3, r1, #1
 8017020:	4614      	mov	r4, r2
 8017022:	d103      	bne.n	801702c <_sungetc_r+0x10>
 8017024:	f04f 35ff 	mov.w	r5, #4294967295
 8017028:	4628      	mov	r0, r5
 801702a:	bd38      	pop	{r3, r4, r5, pc}
 801702c:	8993      	ldrh	r3, [r2, #12]
 801702e:	f023 0320 	bic.w	r3, r3, #32
 8017032:	8193      	strh	r3, [r2, #12]
 8017034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017036:	6852      	ldr	r2, [r2, #4]
 8017038:	b2cd      	uxtb	r5, r1
 801703a:	b18b      	cbz	r3, 8017060 <_sungetc_r+0x44>
 801703c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801703e:	4293      	cmp	r3, r2
 8017040:	dd08      	ble.n	8017054 <_sungetc_r+0x38>
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	1e5a      	subs	r2, r3, #1
 8017046:	6022      	str	r2, [r4, #0]
 8017048:	f803 5c01 	strb.w	r5, [r3, #-1]
 801704c:	6863      	ldr	r3, [r4, #4]
 801704e:	3301      	adds	r3, #1
 8017050:	6063      	str	r3, [r4, #4]
 8017052:	e7e9      	b.n	8017028 <_sungetc_r+0xc>
 8017054:	4621      	mov	r1, r4
 8017056:	f000 fd4b 	bl	8017af0 <__submore>
 801705a:	2800      	cmp	r0, #0
 801705c:	d0f1      	beq.n	8017042 <_sungetc_r+0x26>
 801705e:	e7e1      	b.n	8017024 <_sungetc_r+0x8>
 8017060:	6921      	ldr	r1, [r4, #16]
 8017062:	6823      	ldr	r3, [r4, #0]
 8017064:	b151      	cbz	r1, 801707c <_sungetc_r+0x60>
 8017066:	4299      	cmp	r1, r3
 8017068:	d208      	bcs.n	801707c <_sungetc_r+0x60>
 801706a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801706e:	42a9      	cmp	r1, r5
 8017070:	d104      	bne.n	801707c <_sungetc_r+0x60>
 8017072:	3b01      	subs	r3, #1
 8017074:	3201      	adds	r2, #1
 8017076:	6023      	str	r3, [r4, #0]
 8017078:	6062      	str	r2, [r4, #4]
 801707a:	e7d5      	b.n	8017028 <_sungetc_r+0xc>
 801707c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017084:	6363      	str	r3, [r4, #52]	; 0x34
 8017086:	2303      	movs	r3, #3
 8017088:	63a3      	str	r3, [r4, #56]	; 0x38
 801708a:	4623      	mov	r3, r4
 801708c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017090:	6023      	str	r3, [r4, #0]
 8017092:	2301      	movs	r3, #1
 8017094:	e7dc      	b.n	8017050 <_sungetc_r+0x34>

08017096 <__ssrefill_r>:
 8017096:	b510      	push	{r4, lr}
 8017098:	460c      	mov	r4, r1
 801709a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801709c:	b169      	cbz	r1, 80170ba <__ssrefill_r+0x24>
 801709e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170a2:	4299      	cmp	r1, r3
 80170a4:	d001      	beq.n	80170aa <__ssrefill_r+0x14>
 80170a6:	f7ff fdbf 	bl	8016c28 <_free_r>
 80170aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80170ac:	6063      	str	r3, [r4, #4]
 80170ae:	2000      	movs	r0, #0
 80170b0:	6360      	str	r0, [r4, #52]	; 0x34
 80170b2:	b113      	cbz	r3, 80170ba <__ssrefill_r+0x24>
 80170b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80170b6:	6023      	str	r3, [r4, #0]
 80170b8:	bd10      	pop	{r4, pc}
 80170ba:	6923      	ldr	r3, [r4, #16]
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	2300      	movs	r3, #0
 80170c0:	6063      	str	r3, [r4, #4]
 80170c2:	89a3      	ldrh	r3, [r4, #12]
 80170c4:	f043 0320 	orr.w	r3, r3, #32
 80170c8:	81a3      	strh	r3, [r4, #12]
 80170ca:	f04f 30ff 	mov.w	r0, #4294967295
 80170ce:	e7f3      	b.n	80170b8 <__ssrefill_r+0x22>

080170d0 <__ssvfiscanf_r>:
 80170d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80170d8:	460c      	mov	r4, r1
 80170da:	2100      	movs	r1, #0
 80170dc:	9144      	str	r1, [sp, #272]	; 0x110
 80170de:	9145      	str	r1, [sp, #276]	; 0x114
 80170e0:	499f      	ldr	r1, [pc, #636]	; (8017360 <__ssvfiscanf_r+0x290>)
 80170e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80170e4:	f10d 0804 	add.w	r8, sp, #4
 80170e8:	499e      	ldr	r1, [pc, #632]	; (8017364 <__ssvfiscanf_r+0x294>)
 80170ea:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017368 <__ssvfiscanf_r+0x298>
 80170ee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80170f2:	4606      	mov	r6, r0
 80170f4:	4692      	mov	sl, r2
 80170f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	270a      	movs	r7, #10
 80170fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017100:	2b00      	cmp	r3, #0
 8017102:	f000 812a 	beq.w	801735a <__ssvfiscanf_r+0x28a>
 8017106:	4655      	mov	r5, sl
 8017108:	f7ff f8d2 	bl	80162b0 <__locale_ctype_ptr>
 801710c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017110:	4458      	add	r0, fp
 8017112:	7843      	ldrb	r3, [r0, #1]
 8017114:	f013 0308 	ands.w	r3, r3, #8
 8017118:	d01c      	beq.n	8017154 <__ssvfiscanf_r+0x84>
 801711a:	6863      	ldr	r3, [r4, #4]
 801711c:	2b00      	cmp	r3, #0
 801711e:	dd12      	ble.n	8017146 <__ssvfiscanf_r+0x76>
 8017120:	f7ff f8c6 	bl	80162b0 <__locale_ctype_ptr>
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	781a      	ldrb	r2, [r3, #0]
 8017128:	4410      	add	r0, r2
 801712a:	7842      	ldrb	r2, [r0, #1]
 801712c:	0712      	lsls	r2, r2, #28
 801712e:	d401      	bmi.n	8017134 <__ssvfiscanf_r+0x64>
 8017130:	46aa      	mov	sl, r5
 8017132:	e7e3      	b.n	80170fc <__ssvfiscanf_r+0x2c>
 8017134:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017136:	3201      	adds	r2, #1
 8017138:	9245      	str	r2, [sp, #276]	; 0x114
 801713a:	6862      	ldr	r2, [r4, #4]
 801713c:	3301      	adds	r3, #1
 801713e:	3a01      	subs	r2, #1
 8017140:	6062      	str	r2, [r4, #4]
 8017142:	6023      	str	r3, [r4, #0]
 8017144:	e7e9      	b.n	801711a <__ssvfiscanf_r+0x4a>
 8017146:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017148:	4621      	mov	r1, r4
 801714a:	4630      	mov	r0, r6
 801714c:	4798      	blx	r3
 801714e:	2800      	cmp	r0, #0
 8017150:	d0e6      	beq.n	8017120 <__ssvfiscanf_r+0x50>
 8017152:	e7ed      	b.n	8017130 <__ssvfiscanf_r+0x60>
 8017154:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017158:	f040 8082 	bne.w	8017260 <__ssvfiscanf_r+0x190>
 801715c:	9343      	str	r3, [sp, #268]	; 0x10c
 801715e:	9341      	str	r3, [sp, #260]	; 0x104
 8017160:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017164:	2b2a      	cmp	r3, #42	; 0x2a
 8017166:	d103      	bne.n	8017170 <__ssvfiscanf_r+0xa0>
 8017168:	2310      	movs	r3, #16
 801716a:	9341      	str	r3, [sp, #260]	; 0x104
 801716c:	f10a 0502 	add.w	r5, sl, #2
 8017170:	46aa      	mov	sl, r5
 8017172:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017176:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801717a:	2a09      	cmp	r2, #9
 801717c:	d922      	bls.n	80171c4 <__ssvfiscanf_r+0xf4>
 801717e:	2203      	movs	r2, #3
 8017180:	4879      	ldr	r0, [pc, #484]	; (8017368 <__ssvfiscanf_r+0x298>)
 8017182:	f7e9 f845 	bl	8000210 <memchr>
 8017186:	b138      	cbz	r0, 8017198 <__ssvfiscanf_r+0xc8>
 8017188:	eba0 0309 	sub.w	r3, r0, r9
 801718c:	2001      	movs	r0, #1
 801718e:	4098      	lsls	r0, r3
 8017190:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017192:	4318      	orrs	r0, r3
 8017194:	9041      	str	r0, [sp, #260]	; 0x104
 8017196:	46aa      	mov	sl, r5
 8017198:	f89a 3000 	ldrb.w	r3, [sl]
 801719c:	2b67      	cmp	r3, #103	; 0x67
 801719e:	f10a 0501 	add.w	r5, sl, #1
 80171a2:	d82b      	bhi.n	80171fc <__ssvfiscanf_r+0x12c>
 80171a4:	2b65      	cmp	r3, #101	; 0x65
 80171a6:	f080 809f 	bcs.w	80172e8 <__ssvfiscanf_r+0x218>
 80171aa:	2b47      	cmp	r3, #71	; 0x47
 80171ac:	d810      	bhi.n	80171d0 <__ssvfiscanf_r+0x100>
 80171ae:	2b45      	cmp	r3, #69	; 0x45
 80171b0:	f080 809a 	bcs.w	80172e8 <__ssvfiscanf_r+0x218>
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d06c      	beq.n	8017292 <__ssvfiscanf_r+0x1c2>
 80171b8:	2b25      	cmp	r3, #37	; 0x25
 80171ba:	d051      	beq.n	8017260 <__ssvfiscanf_r+0x190>
 80171bc:	2303      	movs	r3, #3
 80171be:	9347      	str	r3, [sp, #284]	; 0x11c
 80171c0:	9742      	str	r7, [sp, #264]	; 0x108
 80171c2:	e027      	b.n	8017214 <__ssvfiscanf_r+0x144>
 80171c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80171c6:	fb07 1303 	mla	r3, r7, r3, r1
 80171ca:	3b30      	subs	r3, #48	; 0x30
 80171cc:	9343      	str	r3, [sp, #268]	; 0x10c
 80171ce:	e7cf      	b.n	8017170 <__ssvfiscanf_r+0xa0>
 80171d0:	2b5b      	cmp	r3, #91	; 0x5b
 80171d2:	d06a      	beq.n	80172aa <__ssvfiscanf_r+0x1da>
 80171d4:	d80c      	bhi.n	80171f0 <__ssvfiscanf_r+0x120>
 80171d6:	2b58      	cmp	r3, #88	; 0x58
 80171d8:	d1f0      	bne.n	80171bc <__ssvfiscanf_r+0xec>
 80171da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80171dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80171e0:	9241      	str	r2, [sp, #260]	; 0x104
 80171e2:	2210      	movs	r2, #16
 80171e4:	9242      	str	r2, [sp, #264]	; 0x108
 80171e6:	2b6e      	cmp	r3, #110	; 0x6e
 80171e8:	bf8c      	ite	hi
 80171ea:	2304      	movhi	r3, #4
 80171ec:	2303      	movls	r3, #3
 80171ee:	e010      	b.n	8017212 <__ssvfiscanf_r+0x142>
 80171f0:	2b63      	cmp	r3, #99	; 0x63
 80171f2:	d065      	beq.n	80172c0 <__ssvfiscanf_r+0x1f0>
 80171f4:	2b64      	cmp	r3, #100	; 0x64
 80171f6:	d1e1      	bne.n	80171bc <__ssvfiscanf_r+0xec>
 80171f8:	9742      	str	r7, [sp, #264]	; 0x108
 80171fa:	e7f4      	b.n	80171e6 <__ssvfiscanf_r+0x116>
 80171fc:	2b70      	cmp	r3, #112	; 0x70
 80171fe:	d04b      	beq.n	8017298 <__ssvfiscanf_r+0x1c8>
 8017200:	d826      	bhi.n	8017250 <__ssvfiscanf_r+0x180>
 8017202:	2b6e      	cmp	r3, #110	; 0x6e
 8017204:	d062      	beq.n	80172cc <__ssvfiscanf_r+0x1fc>
 8017206:	d84c      	bhi.n	80172a2 <__ssvfiscanf_r+0x1d2>
 8017208:	2b69      	cmp	r3, #105	; 0x69
 801720a:	d1d7      	bne.n	80171bc <__ssvfiscanf_r+0xec>
 801720c:	2300      	movs	r3, #0
 801720e:	9342      	str	r3, [sp, #264]	; 0x108
 8017210:	2303      	movs	r3, #3
 8017212:	9347      	str	r3, [sp, #284]	; 0x11c
 8017214:	6863      	ldr	r3, [r4, #4]
 8017216:	2b00      	cmp	r3, #0
 8017218:	dd68      	ble.n	80172ec <__ssvfiscanf_r+0x21c>
 801721a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801721c:	0659      	lsls	r1, r3, #25
 801721e:	d407      	bmi.n	8017230 <__ssvfiscanf_r+0x160>
 8017220:	f7ff f846 	bl	80162b0 <__locale_ctype_ptr>
 8017224:	6823      	ldr	r3, [r4, #0]
 8017226:	781a      	ldrb	r2, [r3, #0]
 8017228:	4410      	add	r0, r2
 801722a:	7842      	ldrb	r2, [r0, #1]
 801722c:	0712      	lsls	r2, r2, #28
 801722e:	d464      	bmi.n	80172fa <__ssvfiscanf_r+0x22a>
 8017230:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017232:	2b02      	cmp	r3, #2
 8017234:	dc73      	bgt.n	801731e <__ssvfiscanf_r+0x24e>
 8017236:	466b      	mov	r3, sp
 8017238:	4622      	mov	r2, r4
 801723a:	a941      	add	r1, sp, #260	; 0x104
 801723c:	4630      	mov	r0, r6
 801723e:	f000 f9d7 	bl	80175f0 <_scanf_chars>
 8017242:	2801      	cmp	r0, #1
 8017244:	f000 8089 	beq.w	801735a <__ssvfiscanf_r+0x28a>
 8017248:	2802      	cmp	r0, #2
 801724a:	f47f af71 	bne.w	8017130 <__ssvfiscanf_r+0x60>
 801724e:	e01d      	b.n	801728c <__ssvfiscanf_r+0x1bc>
 8017250:	2b75      	cmp	r3, #117	; 0x75
 8017252:	d0d1      	beq.n	80171f8 <__ssvfiscanf_r+0x128>
 8017254:	2b78      	cmp	r3, #120	; 0x78
 8017256:	d0c0      	beq.n	80171da <__ssvfiscanf_r+0x10a>
 8017258:	2b73      	cmp	r3, #115	; 0x73
 801725a:	d1af      	bne.n	80171bc <__ssvfiscanf_r+0xec>
 801725c:	2302      	movs	r3, #2
 801725e:	e7d8      	b.n	8017212 <__ssvfiscanf_r+0x142>
 8017260:	6863      	ldr	r3, [r4, #4]
 8017262:	2b00      	cmp	r3, #0
 8017264:	dd0c      	ble.n	8017280 <__ssvfiscanf_r+0x1b0>
 8017266:	6823      	ldr	r3, [r4, #0]
 8017268:	781a      	ldrb	r2, [r3, #0]
 801726a:	455a      	cmp	r2, fp
 801726c:	d175      	bne.n	801735a <__ssvfiscanf_r+0x28a>
 801726e:	3301      	adds	r3, #1
 8017270:	6862      	ldr	r2, [r4, #4]
 8017272:	6023      	str	r3, [r4, #0]
 8017274:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017276:	3a01      	subs	r2, #1
 8017278:	3301      	adds	r3, #1
 801727a:	6062      	str	r2, [r4, #4]
 801727c:	9345      	str	r3, [sp, #276]	; 0x114
 801727e:	e757      	b.n	8017130 <__ssvfiscanf_r+0x60>
 8017280:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017282:	4621      	mov	r1, r4
 8017284:	4630      	mov	r0, r6
 8017286:	4798      	blx	r3
 8017288:	2800      	cmp	r0, #0
 801728a:	d0ec      	beq.n	8017266 <__ssvfiscanf_r+0x196>
 801728c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801728e:	2800      	cmp	r0, #0
 8017290:	d159      	bne.n	8017346 <__ssvfiscanf_r+0x276>
 8017292:	f04f 30ff 	mov.w	r0, #4294967295
 8017296:	e05c      	b.n	8017352 <__ssvfiscanf_r+0x282>
 8017298:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801729a:	f042 0220 	orr.w	r2, r2, #32
 801729e:	9241      	str	r2, [sp, #260]	; 0x104
 80172a0:	e79b      	b.n	80171da <__ssvfiscanf_r+0x10a>
 80172a2:	2308      	movs	r3, #8
 80172a4:	9342      	str	r3, [sp, #264]	; 0x108
 80172a6:	2304      	movs	r3, #4
 80172a8:	e7b3      	b.n	8017212 <__ssvfiscanf_r+0x142>
 80172aa:	4629      	mov	r1, r5
 80172ac:	4640      	mov	r0, r8
 80172ae:	f000 fb4f 	bl	8017950 <__sccl>
 80172b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172b8:	9341      	str	r3, [sp, #260]	; 0x104
 80172ba:	4605      	mov	r5, r0
 80172bc:	2301      	movs	r3, #1
 80172be:	e7a8      	b.n	8017212 <__ssvfiscanf_r+0x142>
 80172c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172c6:	9341      	str	r3, [sp, #260]	; 0x104
 80172c8:	2300      	movs	r3, #0
 80172ca:	e7a2      	b.n	8017212 <__ssvfiscanf_r+0x142>
 80172cc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80172ce:	06c3      	lsls	r3, r0, #27
 80172d0:	f53f af2e 	bmi.w	8017130 <__ssvfiscanf_r+0x60>
 80172d4:	9b00      	ldr	r3, [sp, #0]
 80172d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80172d8:	1d19      	adds	r1, r3, #4
 80172da:	9100      	str	r1, [sp, #0]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	07c0      	lsls	r0, r0, #31
 80172e0:	bf4c      	ite	mi
 80172e2:	801a      	strhmi	r2, [r3, #0]
 80172e4:	601a      	strpl	r2, [r3, #0]
 80172e6:	e723      	b.n	8017130 <__ssvfiscanf_r+0x60>
 80172e8:	2305      	movs	r3, #5
 80172ea:	e792      	b.n	8017212 <__ssvfiscanf_r+0x142>
 80172ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172ee:	4621      	mov	r1, r4
 80172f0:	4630      	mov	r0, r6
 80172f2:	4798      	blx	r3
 80172f4:	2800      	cmp	r0, #0
 80172f6:	d090      	beq.n	801721a <__ssvfiscanf_r+0x14a>
 80172f8:	e7c8      	b.n	801728c <__ssvfiscanf_r+0x1bc>
 80172fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80172fc:	3201      	adds	r2, #1
 80172fe:	9245      	str	r2, [sp, #276]	; 0x114
 8017300:	6862      	ldr	r2, [r4, #4]
 8017302:	3a01      	subs	r2, #1
 8017304:	2a00      	cmp	r2, #0
 8017306:	6062      	str	r2, [r4, #4]
 8017308:	dd02      	ble.n	8017310 <__ssvfiscanf_r+0x240>
 801730a:	3301      	adds	r3, #1
 801730c:	6023      	str	r3, [r4, #0]
 801730e:	e787      	b.n	8017220 <__ssvfiscanf_r+0x150>
 8017310:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017312:	4621      	mov	r1, r4
 8017314:	4630      	mov	r0, r6
 8017316:	4798      	blx	r3
 8017318:	2800      	cmp	r0, #0
 801731a:	d081      	beq.n	8017220 <__ssvfiscanf_r+0x150>
 801731c:	e7b6      	b.n	801728c <__ssvfiscanf_r+0x1bc>
 801731e:	2b04      	cmp	r3, #4
 8017320:	dc06      	bgt.n	8017330 <__ssvfiscanf_r+0x260>
 8017322:	466b      	mov	r3, sp
 8017324:	4622      	mov	r2, r4
 8017326:	a941      	add	r1, sp, #260	; 0x104
 8017328:	4630      	mov	r0, r6
 801732a:	f000 f9c5 	bl	80176b8 <_scanf_i>
 801732e:	e788      	b.n	8017242 <__ssvfiscanf_r+0x172>
 8017330:	4b0e      	ldr	r3, [pc, #56]	; (801736c <__ssvfiscanf_r+0x29c>)
 8017332:	2b00      	cmp	r3, #0
 8017334:	f43f aefc 	beq.w	8017130 <__ssvfiscanf_r+0x60>
 8017338:	466b      	mov	r3, sp
 801733a:	4622      	mov	r2, r4
 801733c:	a941      	add	r1, sp, #260	; 0x104
 801733e:	4630      	mov	r0, r6
 8017340:	f7fc f9da 	bl	80136f8 <_scanf_float>
 8017344:	e77d      	b.n	8017242 <__ssvfiscanf_r+0x172>
 8017346:	89a3      	ldrh	r3, [r4, #12]
 8017348:	f013 0f40 	tst.w	r3, #64	; 0x40
 801734c:	bf18      	it	ne
 801734e:	f04f 30ff 	movne.w	r0, #4294967295
 8017352:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801735c:	e7f9      	b.n	8017352 <__ssvfiscanf_r+0x282>
 801735e:	bf00      	nop
 8017360:	0801701d 	.word	0x0801701d
 8017364:	08017097 	.word	0x08017097
 8017368:	08018652 	.word	0x08018652
 801736c:	080136f9 	.word	0x080136f9

08017370 <__sfputc_r>:
 8017370:	6893      	ldr	r3, [r2, #8]
 8017372:	3b01      	subs	r3, #1
 8017374:	2b00      	cmp	r3, #0
 8017376:	b410      	push	{r4}
 8017378:	6093      	str	r3, [r2, #8]
 801737a:	da08      	bge.n	801738e <__sfputc_r+0x1e>
 801737c:	6994      	ldr	r4, [r2, #24]
 801737e:	42a3      	cmp	r3, r4
 8017380:	db01      	blt.n	8017386 <__sfputc_r+0x16>
 8017382:	290a      	cmp	r1, #10
 8017384:	d103      	bne.n	801738e <__sfputc_r+0x1e>
 8017386:	f85d 4b04 	ldr.w	r4, [sp], #4
 801738a:	f7fd bbc7 	b.w	8014b1c <__swbuf_r>
 801738e:	6813      	ldr	r3, [r2, #0]
 8017390:	1c58      	adds	r0, r3, #1
 8017392:	6010      	str	r0, [r2, #0]
 8017394:	7019      	strb	r1, [r3, #0]
 8017396:	4608      	mov	r0, r1
 8017398:	f85d 4b04 	ldr.w	r4, [sp], #4
 801739c:	4770      	bx	lr

0801739e <__sfputs_r>:
 801739e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173a0:	4606      	mov	r6, r0
 80173a2:	460f      	mov	r7, r1
 80173a4:	4614      	mov	r4, r2
 80173a6:	18d5      	adds	r5, r2, r3
 80173a8:	42ac      	cmp	r4, r5
 80173aa:	d101      	bne.n	80173b0 <__sfputs_r+0x12>
 80173ac:	2000      	movs	r0, #0
 80173ae:	e007      	b.n	80173c0 <__sfputs_r+0x22>
 80173b0:	463a      	mov	r2, r7
 80173b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173b6:	4630      	mov	r0, r6
 80173b8:	f7ff ffda 	bl	8017370 <__sfputc_r>
 80173bc:	1c43      	adds	r3, r0, #1
 80173be:	d1f3      	bne.n	80173a8 <__sfputs_r+0xa>
 80173c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080173c4 <_vfiprintf_r>:
 80173c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c8:	460c      	mov	r4, r1
 80173ca:	b09d      	sub	sp, #116	; 0x74
 80173cc:	4617      	mov	r7, r2
 80173ce:	461d      	mov	r5, r3
 80173d0:	4606      	mov	r6, r0
 80173d2:	b118      	cbz	r0, 80173dc <_vfiprintf_r+0x18>
 80173d4:	6983      	ldr	r3, [r0, #24]
 80173d6:	b90b      	cbnz	r3, 80173dc <_vfiprintf_r+0x18>
 80173d8:	f7fe fbb6 	bl	8015b48 <__sinit>
 80173dc:	4b7c      	ldr	r3, [pc, #496]	; (80175d0 <_vfiprintf_r+0x20c>)
 80173de:	429c      	cmp	r4, r3
 80173e0:	d158      	bne.n	8017494 <_vfiprintf_r+0xd0>
 80173e2:	6874      	ldr	r4, [r6, #4]
 80173e4:	89a3      	ldrh	r3, [r4, #12]
 80173e6:	0718      	lsls	r0, r3, #28
 80173e8:	d55e      	bpl.n	80174a8 <_vfiprintf_r+0xe4>
 80173ea:	6923      	ldr	r3, [r4, #16]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d05b      	beq.n	80174a8 <_vfiprintf_r+0xe4>
 80173f0:	2300      	movs	r3, #0
 80173f2:	9309      	str	r3, [sp, #36]	; 0x24
 80173f4:	2320      	movs	r3, #32
 80173f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173fa:	2330      	movs	r3, #48	; 0x30
 80173fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017400:	9503      	str	r5, [sp, #12]
 8017402:	f04f 0b01 	mov.w	fp, #1
 8017406:	46b8      	mov	r8, r7
 8017408:	4645      	mov	r5, r8
 801740a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801740e:	b10b      	cbz	r3, 8017414 <_vfiprintf_r+0x50>
 8017410:	2b25      	cmp	r3, #37	; 0x25
 8017412:	d154      	bne.n	80174be <_vfiprintf_r+0xfa>
 8017414:	ebb8 0a07 	subs.w	sl, r8, r7
 8017418:	d00b      	beq.n	8017432 <_vfiprintf_r+0x6e>
 801741a:	4653      	mov	r3, sl
 801741c:	463a      	mov	r2, r7
 801741e:	4621      	mov	r1, r4
 8017420:	4630      	mov	r0, r6
 8017422:	f7ff ffbc 	bl	801739e <__sfputs_r>
 8017426:	3001      	adds	r0, #1
 8017428:	f000 80c2 	beq.w	80175b0 <_vfiprintf_r+0x1ec>
 801742c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801742e:	4453      	add	r3, sl
 8017430:	9309      	str	r3, [sp, #36]	; 0x24
 8017432:	f898 3000 	ldrb.w	r3, [r8]
 8017436:	2b00      	cmp	r3, #0
 8017438:	f000 80ba 	beq.w	80175b0 <_vfiprintf_r+0x1ec>
 801743c:	2300      	movs	r3, #0
 801743e:	f04f 32ff 	mov.w	r2, #4294967295
 8017442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017446:	9304      	str	r3, [sp, #16]
 8017448:	9307      	str	r3, [sp, #28]
 801744a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801744e:	931a      	str	r3, [sp, #104]	; 0x68
 8017450:	46a8      	mov	r8, r5
 8017452:	2205      	movs	r2, #5
 8017454:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017458:	485e      	ldr	r0, [pc, #376]	; (80175d4 <_vfiprintf_r+0x210>)
 801745a:	f7e8 fed9 	bl	8000210 <memchr>
 801745e:	9b04      	ldr	r3, [sp, #16]
 8017460:	bb78      	cbnz	r0, 80174c2 <_vfiprintf_r+0xfe>
 8017462:	06d9      	lsls	r1, r3, #27
 8017464:	bf44      	itt	mi
 8017466:	2220      	movmi	r2, #32
 8017468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801746c:	071a      	lsls	r2, r3, #28
 801746e:	bf44      	itt	mi
 8017470:	222b      	movmi	r2, #43	; 0x2b
 8017472:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017476:	782a      	ldrb	r2, [r5, #0]
 8017478:	2a2a      	cmp	r2, #42	; 0x2a
 801747a:	d02a      	beq.n	80174d2 <_vfiprintf_r+0x10e>
 801747c:	9a07      	ldr	r2, [sp, #28]
 801747e:	46a8      	mov	r8, r5
 8017480:	2000      	movs	r0, #0
 8017482:	250a      	movs	r5, #10
 8017484:	4641      	mov	r1, r8
 8017486:	f811 3b01 	ldrb.w	r3, [r1], #1
 801748a:	3b30      	subs	r3, #48	; 0x30
 801748c:	2b09      	cmp	r3, #9
 801748e:	d969      	bls.n	8017564 <_vfiprintf_r+0x1a0>
 8017490:	b360      	cbz	r0, 80174ec <_vfiprintf_r+0x128>
 8017492:	e024      	b.n	80174de <_vfiprintf_r+0x11a>
 8017494:	4b50      	ldr	r3, [pc, #320]	; (80175d8 <_vfiprintf_r+0x214>)
 8017496:	429c      	cmp	r4, r3
 8017498:	d101      	bne.n	801749e <_vfiprintf_r+0xda>
 801749a:	68b4      	ldr	r4, [r6, #8]
 801749c:	e7a2      	b.n	80173e4 <_vfiprintf_r+0x20>
 801749e:	4b4f      	ldr	r3, [pc, #316]	; (80175dc <_vfiprintf_r+0x218>)
 80174a0:	429c      	cmp	r4, r3
 80174a2:	bf08      	it	eq
 80174a4:	68f4      	ldreq	r4, [r6, #12]
 80174a6:	e79d      	b.n	80173e4 <_vfiprintf_r+0x20>
 80174a8:	4621      	mov	r1, r4
 80174aa:	4630      	mov	r0, r6
 80174ac:	f7fd fb9a 	bl	8014be4 <__swsetup_r>
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d09d      	beq.n	80173f0 <_vfiprintf_r+0x2c>
 80174b4:	f04f 30ff 	mov.w	r0, #4294967295
 80174b8:	b01d      	add	sp, #116	; 0x74
 80174ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174be:	46a8      	mov	r8, r5
 80174c0:	e7a2      	b.n	8017408 <_vfiprintf_r+0x44>
 80174c2:	4a44      	ldr	r2, [pc, #272]	; (80175d4 <_vfiprintf_r+0x210>)
 80174c4:	1a80      	subs	r0, r0, r2
 80174c6:	fa0b f000 	lsl.w	r0, fp, r0
 80174ca:	4318      	orrs	r0, r3
 80174cc:	9004      	str	r0, [sp, #16]
 80174ce:	4645      	mov	r5, r8
 80174d0:	e7be      	b.n	8017450 <_vfiprintf_r+0x8c>
 80174d2:	9a03      	ldr	r2, [sp, #12]
 80174d4:	1d11      	adds	r1, r2, #4
 80174d6:	6812      	ldr	r2, [r2, #0]
 80174d8:	9103      	str	r1, [sp, #12]
 80174da:	2a00      	cmp	r2, #0
 80174dc:	db01      	blt.n	80174e2 <_vfiprintf_r+0x11e>
 80174de:	9207      	str	r2, [sp, #28]
 80174e0:	e004      	b.n	80174ec <_vfiprintf_r+0x128>
 80174e2:	4252      	negs	r2, r2
 80174e4:	f043 0302 	orr.w	r3, r3, #2
 80174e8:	9207      	str	r2, [sp, #28]
 80174ea:	9304      	str	r3, [sp, #16]
 80174ec:	f898 3000 	ldrb.w	r3, [r8]
 80174f0:	2b2e      	cmp	r3, #46	; 0x2e
 80174f2:	d10e      	bne.n	8017512 <_vfiprintf_r+0x14e>
 80174f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80174f8:	2b2a      	cmp	r3, #42	; 0x2a
 80174fa:	d138      	bne.n	801756e <_vfiprintf_r+0x1aa>
 80174fc:	9b03      	ldr	r3, [sp, #12]
 80174fe:	1d1a      	adds	r2, r3, #4
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	9203      	str	r2, [sp, #12]
 8017504:	2b00      	cmp	r3, #0
 8017506:	bfb8      	it	lt
 8017508:	f04f 33ff 	movlt.w	r3, #4294967295
 801750c:	f108 0802 	add.w	r8, r8, #2
 8017510:	9305      	str	r3, [sp, #20]
 8017512:	4d33      	ldr	r5, [pc, #204]	; (80175e0 <_vfiprintf_r+0x21c>)
 8017514:	f898 1000 	ldrb.w	r1, [r8]
 8017518:	2203      	movs	r2, #3
 801751a:	4628      	mov	r0, r5
 801751c:	f7e8 fe78 	bl	8000210 <memchr>
 8017520:	b140      	cbz	r0, 8017534 <_vfiprintf_r+0x170>
 8017522:	2340      	movs	r3, #64	; 0x40
 8017524:	1b40      	subs	r0, r0, r5
 8017526:	fa03 f000 	lsl.w	r0, r3, r0
 801752a:	9b04      	ldr	r3, [sp, #16]
 801752c:	4303      	orrs	r3, r0
 801752e:	f108 0801 	add.w	r8, r8, #1
 8017532:	9304      	str	r3, [sp, #16]
 8017534:	f898 1000 	ldrb.w	r1, [r8]
 8017538:	482a      	ldr	r0, [pc, #168]	; (80175e4 <_vfiprintf_r+0x220>)
 801753a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801753e:	2206      	movs	r2, #6
 8017540:	f108 0701 	add.w	r7, r8, #1
 8017544:	f7e8 fe64 	bl	8000210 <memchr>
 8017548:	2800      	cmp	r0, #0
 801754a:	d037      	beq.n	80175bc <_vfiprintf_r+0x1f8>
 801754c:	4b26      	ldr	r3, [pc, #152]	; (80175e8 <_vfiprintf_r+0x224>)
 801754e:	bb1b      	cbnz	r3, 8017598 <_vfiprintf_r+0x1d4>
 8017550:	9b03      	ldr	r3, [sp, #12]
 8017552:	3307      	adds	r3, #7
 8017554:	f023 0307 	bic.w	r3, r3, #7
 8017558:	3308      	adds	r3, #8
 801755a:	9303      	str	r3, [sp, #12]
 801755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801755e:	444b      	add	r3, r9
 8017560:	9309      	str	r3, [sp, #36]	; 0x24
 8017562:	e750      	b.n	8017406 <_vfiprintf_r+0x42>
 8017564:	fb05 3202 	mla	r2, r5, r2, r3
 8017568:	2001      	movs	r0, #1
 801756a:	4688      	mov	r8, r1
 801756c:	e78a      	b.n	8017484 <_vfiprintf_r+0xc0>
 801756e:	2300      	movs	r3, #0
 8017570:	f108 0801 	add.w	r8, r8, #1
 8017574:	9305      	str	r3, [sp, #20]
 8017576:	4619      	mov	r1, r3
 8017578:	250a      	movs	r5, #10
 801757a:	4640      	mov	r0, r8
 801757c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017580:	3a30      	subs	r2, #48	; 0x30
 8017582:	2a09      	cmp	r2, #9
 8017584:	d903      	bls.n	801758e <_vfiprintf_r+0x1ca>
 8017586:	2b00      	cmp	r3, #0
 8017588:	d0c3      	beq.n	8017512 <_vfiprintf_r+0x14e>
 801758a:	9105      	str	r1, [sp, #20]
 801758c:	e7c1      	b.n	8017512 <_vfiprintf_r+0x14e>
 801758e:	fb05 2101 	mla	r1, r5, r1, r2
 8017592:	2301      	movs	r3, #1
 8017594:	4680      	mov	r8, r0
 8017596:	e7f0      	b.n	801757a <_vfiprintf_r+0x1b6>
 8017598:	ab03      	add	r3, sp, #12
 801759a:	9300      	str	r3, [sp, #0]
 801759c:	4622      	mov	r2, r4
 801759e:	4b13      	ldr	r3, [pc, #76]	; (80175ec <_vfiprintf_r+0x228>)
 80175a0:	a904      	add	r1, sp, #16
 80175a2:	4630      	mov	r0, r6
 80175a4:	f7fb fce0 	bl	8012f68 <_printf_float>
 80175a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80175ac:	4681      	mov	r9, r0
 80175ae:	d1d5      	bne.n	801755c <_vfiprintf_r+0x198>
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	065b      	lsls	r3, r3, #25
 80175b4:	f53f af7e 	bmi.w	80174b4 <_vfiprintf_r+0xf0>
 80175b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175ba:	e77d      	b.n	80174b8 <_vfiprintf_r+0xf4>
 80175bc:	ab03      	add	r3, sp, #12
 80175be:	9300      	str	r3, [sp, #0]
 80175c0:	4622      	mov	r2, r4
 80175c2:	4b0a      	ldr	r3, [pc, #40]	; (80175ec <_vfiprintf_r+0x228>)
 80175c4:	a904      	add	r1, sp, #16
 80175c6:	4630      	mov	r0, r6
 80175c8:	f7fb ff84 	bl	80134d4 <_printf_i>
 80175cc:	e7ec      	b.n	80175a8 <_vfiprintf_r+0x1e4>
 80175ce:	bf00      	nop
 80175d0:	08018500 	.word	0x08018500
 80175d4:	0801864c 	.word	0x0801864c
 80175d8:	08018520 	.word	0x08018520
 80175dc:	080184e0 	.word	0x080184e0
 80175e0:	08018652 	.word	0x08018652
 80175e4:	08018656 	.word	0x08018656
 80175e8:	08012f69 	.word	0x08012f69
 80175ec:	0801739f 	.word	0x0801739f

080175f0 <_scanf_chars>:
 80175f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f4:	4615      	mov	r5, r2
 80175f6:	688a      	ldr	r2, [r1, #8]
 80175f8:	4680      	mov	r8, r0
 80175fa:	460c      	mov	r4, r1
 80175fc:	b932      	cbnz	r2, 801760c <_scanf_chars+0x1c>
 80175fe:	698a      	ldr	r2, [r1, #24]
 8017600:	2a00      	cmp	r2, #0
 8017602:	bf14      	ite	ne
 8017604:	f04f 32ff 	movne.w	r2, #4294967295
 8017608:	2201      	moveq	r2, #1
 801760a:	608a      	str	r2, [r1, #8]
 801760c:	6822      	ldr	r2, [r4, #0]
 801760e:	06d1      	lsls	r1, r2, #27
 8017610:	bf5f      	itttt	pl
 8017612:	681a      	ldrpl	r2, [r3, #0]
 8017614:	1d11      	addpl	r1, r2, #4
 8017616:	6019      	strpl	r1, [r3, #0]
 8017618:	6817      	ldrpl	r7, [r2, #0]
 801761a:	2600      	movs	r6, #0
 801761c:	69a3      	ldr	r3, [r4, #24]
 801761e:	b1db      	cbz	r3, 8017658 <_scanf_chars+0x68>
 8017620:	2b01      	cmp	r3, #1
 8017622:	d107      	bne.n	8017634 <_scanf_chars+0x44>
 8017624:	682b      	ldr	r3, [r5, #0]
 8017626:	6962      	ldr	r2, [r4, #20]
 8017628:	781b      	ldrb	r3, [r3, #0]
 801762a:	5cd3      	ldrb	r3, [r2, r3]
 801762c:	b9a3      	cbnz	r3, 8017658 <_scanf_chars+0x68>
 801762e:	2e00      	cmp	r6, #0
 8017630:	d132      	bne.n	8017698 <_scanf_chars+0xa8>
 8017632:	e006      	b.n	8017642 <_scanf_chars+0x52>
 8017634:	2b02      	cmp	r3, #2
 8017636:	d007      	beq.n	8017648 <_scanf_chars+0x58>
 8017638:	2e00      	cmp	r6, #0
 801763a:	d12d      	bne.n	8017698 <_scanf_chars+0xa8>
 801763c:	69a3      	ldr	r3, [r4, #24]
 801763e:	2b01      	cmp	r3, #1
 8017640:	d12a      	bne.n	8017698 <_scanf_chars+0xa8>
 8017642:	2001      	movs	r0, #1
 8017644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017648:	f7fe fe32 	bl	80162b0 <__locale_ctype_ptr>
 801764c:	682b      	ldr	r3, [r5, #0]
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	4418      	add	r0, r3
 8017652:	7843      	ldrb	r3, [r0, #1]
 8017654:	071b      	lsls	r3, r3, #28
 8017656:	d4ef      	bmi.n	8017638 <_scanf_chars+0x48>
 8017658:	6823      	ldr	r3, [r4, #0]
 801765a:	06da      	lsls	r2, r3, #27
 801765c:	bf5e      	ittt	pl
 801765e:	682b      	ldrpl	r3, [r5, #0]
 8017660:	781b      	ldrbpl	r3, [r3, #0]
 8017662:	703b      	strbpl	r3, [r7, #0]
 8017664:	682a      	ldr	r2, [r5, #0]
 8017666:	686b      	ldr	r3, [r5, #4]
 8017668:	f102 0201 	add.w	r2, r2, #1
 801766c:	602a      	str	r2, [r5, #0]
 801766e:	68a2      	ldr	r2, [r4, #8]
 8017670:	f103 33ff 	add.w	r3, r3, #4294967295
 8017674:	f102 32ff 	add.w	r2, r2, #4294967295
 8017678:	606b      	str	r3, [r5, #4]
 801767a:	f106 0601 	add.w	r6, r6, #1
 801767e:	bf58      	it	pl
 8017680:	3701      	addpl	r7, #1
 8017682:	60a2      	str	r2, [r4, #8]
 8017684:	b142      	cbz	r2, 8017698 <_scanf_chars+0xa8>
 8017686:	2b00      	cmp	r3, #0
 8017688:	dcc8      	bgt.n	801761c <_scanf_chars+0x2c>
 801768a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801768e:	4629      	mov	r1, r5
 8017690:	4640      	mov	r0, r8
 8017692:	4798      	blx	r3
 8017694:	2800      	cmp	r0, #0
 8017696:	d0c1      	beq.n	801761c <_scanf_chars+0x2c>
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	f013 0310 	ands.w	r3, r3, #16
 801769e:	d105      	bne.n	80176ac <_scanf_chars+0xbc>
 80176a0:	68e2      	ldr	r2, [r4, #12]
 80176a2:	3201      	adds	r2, #1
 80176a4:	60e2      	str	r2, [r4, #12]
 80176a6:	69a2      	ldr	r2, [r4, #24]
 80176a8:	b102      	cbz	r2, 80176ac <_scanf_chars+0xbc>
 80176aa:	703b      	strb	r3, [r7, #0]
 80176ac:	6923      	ldr	r3, [r4, #16]
 80176ae:	441e      	add	r6, r3
 80176b0:	6126      	str	r6, [r4, #16]
 80176b2:	2000      	movs	r0, #0
 80176b4:	e7c6      	b.n	8017644 <_scanf_chars+0x54>
	...

080176b8 <_scanf_i>:
 80176b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176bc:	469a      	mov	sl, r3
 80176be:	4b74      	ldr	r3, [pc, #464]	; (8017890 <_scanf_i+0x1d8>)
 80176c0:	460c      	mov	r4, r1
 80176c2:	4683      	mov	fp, r0
 80176c4:	4616      	mov	r6, r2
 80176c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176ca:	b087      	sub	sp, #28
 80176cc:	ab03      	add	r3, sp, #12
 80176ce:	68a7      	ldr	r7, [r4, #8]
 80176d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80176d4:	4b6f      	ldr	r3, [pc, #444]	; (8017894 <_scanf_i+0x1dc>)
 80176d6:	69a1      	ldr	r1, [r4, #24]
 80176d8:	4a6f      	ldr	r2, [pc, #444]	; (8017898 <_scanf_i+0x1e0>)
 80176da:	2903      	cmp	r1, #3
 80176dc:	bf08      	it	eq
 80176de:	461a      	moveq	r2, r3
 80176e0:	1e7b      	subs	r3, r7, #1
 80176e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80176e6:	bf84      	itt	hi
 80176e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80176ec:	60a3      	strhi	r3, [r4, #8]
 80176ee:	6823      	ldr	r3, [r4, #0]
 80176f0:	9200      	str	r2, [sp, #0]
 80176f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80176f6:	bf88      	it	hi
 80176f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80176fc:	f104 091c 	add.w	r9, r4, #28
 8017700:	6023      	str	r3, [r4, #0]
 8017702:	bf8c      	ite	hi
 8017704:	197f      	addhi	r7, r7, r5
 8017706:	2700      	movls	r7, #0
 8017708:	464b      	mov	r3, r9
 801770a:	f04f 0800 	mov.w	r8, #0
 801770e:	9301      	str	r3, [sp, #4]
 8017710:	6831      	ldr	r1, [r6, #0]
 8017712:	ab03      	add	r3, sp, #12
 8017714:	2202      	movs	r2, #2
 8017716:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801771a:	7809      	ldrb	r1, [r1, #0]
 801771c:	f7e8 fd78 	bl	8000210 <memchr>
 8017720:	9b01      	ldr	r3, [sp, #4]
 8017722:	b330      	cbz	r0, 8017772 <_scanf_i+0xba>
 8017724:	f1b8 0f01 	cmp.w	r8, #1
 8017728:	d15a      	bne.n	80177e0 <_scanf_i+0x128>
 801772a:	6862      	ldr	r2, [r4, #4]
 801772c:	b92a      	cbnz	r2, 801773a <_scanf_i+0x82>
 801772e:	6822      	ldr	r2, [r4, #0]
 8017730:	2108      	movs	r1, #8
 8017732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017736:	6061      	str	r1, [r4, #4]
 8017738:	6022      	str	r2, [r4, #0]
 801773a:	6822      	ldr	r2, [r4, #0]
 801773c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017740:	6022      	str	r2, [r4, #0]
 8017742:	68a2      	ldr	r2, [r4, #8]
 8017744:	1e51      	subs	r1, r2, #1
 8017746:	60a1      	str	r1, [r4, #8]
 8017748:	b19a      	cbz	r2, 8017772 <_scanf_i+0xba>
 801774a:	6832      	ldr	r2, [r6, #0]
 801774c:	1c51      	adds	r1, r2, #1
 801774e:	6031      	str	r1, [r6, #0]
 8017750:	7812      	ldrb	r2, [r2, #0]
 8017752:	701a      	strb	r2, [r3, #0]
 8017754:	1c5d      	adds	r5, r3, #1
 8017756:	6873      	ldr	r3, [r6, #4]
 8017758:	3b01      	subs	r3, #1
 801775a:	2b00      	cmp	r3, #0
 801775c:	6073      	str	r3, [r6, #4]
 801775e:	dc07      	bgt.n	8017770 <_scanf_i+0xb8>
 8017760:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017764:	4631      	mov	r1, r6
 8017766:	4658      	mov	r0, fp
 8017768:	4798      	blx	r3
 801776a:	2800      	cmp	r0, #0
 801776c:	f040 8086 	bne.w	801787c <_scanf_i+0x1c4>
 8017770:	462b      	mov	r3, r5
 8017772:	f108 0801 	add.w	r8, r8, #1
 8017776:	f1b8 0f03 	cmp.w	r8, #3
 801777a:	d1c8      	bne.n	801770e <_scanf_i+0x56>
 801777c:	6862      	ldr	r2, [r4, #4]
 801777e:	b90a      	cbnz	r2, 8017784 <_scanf_i+0xcc>
 8017780:	220a      	movs	r2, #10
 8017782:	6062      	str	r2, [r4, #4]
 8017784:	6862      	ldr	r2, [r4, #4]
 8017786:	4945      	ldr	r1, [pc, #276]	; (801789c <_scanf_i+0x1e4>)
 8017788:	6960      	ldr	r0, [r4, #20]
 801778a:	9301      	str	r3, [sp, #4]
 801778c:	1a89      	subs	r1, r1, r2
 801778e:	f000 f8df 	bl	8017950 <__sccl>
 8017792:	9b01      	ldr	r3, [sp, #4]
 8017794:	f04f 0800 	mov.w	r8, #0
 8017798:	461d      	mov	r5, r3
 801779a:	68a3      	ldr	r3, [r4, #8]
 801779c:	6822      	ldr	r2, [r4, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d03a      	beq.n	8017818 <_scanf_i+0x160>
 80177a2:	6831      	ldr	r1, [r6, #0]
 80177a4:	6960      	ldr	r0, [r4, #20]
 80177a6:	f891 c000 	ldrb.w	ip, [r1]
 80177aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80177ae:	2800      	cmp	r0, #0
 80177b0:	d032      	beq.n	8017818 <_scanf_i+0x160>
 80177b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80177b6:	d121      	bne.n	80177fc <_scanf_i+0x144>
 80177b8:	0510      	lsls	r0, r2, #20
 80177ba:	d51f      	bpl.n	80177fc <_scanf_i+0x144>
 80177bc:	f108 0801 	add.w	r8, r8, #1
 80177c0:	b117      	cbz	r7, 80177c8 <_scanf_i+0x110>
 80177c2:	3301      	adds	r3, #1
 80177c4:	3f01      	subs	r7, #1
 80177c6:	60a3      	str	r3, [r4, #8]
 80177c8:	6873      	ldr	r3, [r6, #4]
 80177ca:	3b01      	subs	r3, #1
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	6073      	str	r3, [r6, #4]
 80177d0:	dd1b      	ble.n	801780a <_scanf_i+0x152>
 80177d2:	6833      	ldr	r3, [r6, #0]
 80177d4:	3301      	adds	r3, #1
 80177d6:	6033      	str	r3, [r6, #0]
 80177d8:	68a3      	ldr	r3, [r4, #8]
 80177da:	3b01      	subs	r3, #1
 80177dc:	60a3      	str	r3, [r4, #8]
 80177de:	e7dc      	b.n	801779a <_scanf_i+0xe2>
 80177e0:	f1b8 0f02 	cmp.w	r8, #2
 80177e4:	d1ad      	bne.n	8017742 <_scanf_i+0x8a>
 80177e6:	6822      	ldr	r2, [r4, #0]
 80177e8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80177ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80177f0:	d1bf      	bne.n	8017772 <_scanf_i+0xba>
 80177f2:	2110      	movs	r1, #16
 80177f4:	6061      	str	r1, [r4, #4]
 80177f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80177fa:	e7a1      	b.n	8017740 <_scanf_i+0x88>
 80177fc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017800:	6022      	str	r2, [r4, #0]
 8017802:	780b      	ldrb	r3, [r1, #0]
 8017804:	702b      	strb	r3, [r5, #0]
 8017806:	3501      	adds	r5, #1
 8017808:	e7de      	b.n	80177c8 <_scanf_i+0x110>
 801780a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801780e:	4631      	mov	r1, r6
 8017810:	4658      	mov	r0, fp
 8017812:	4798      	blx	r3
 8017814:	2800      	cmp	r0, #0
 8017816:	d0df      	beq.n	80177d8 <_scanf_i+0x120>
 8017818:	6823      	ldr	r3, [r4, #0]
 801781a:	05d9      	lsls	r1, r3, #23
 801781c:	d50c      	bpl.n	8017838 <_scanf_i+0x180>
 801781e:	454d      	cmp	r5, r9
 8017820:	d908      	bls.n	8017834 <_scanf_i+0x17c>
 8017822:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017826:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801782a:	4632      	mov	r2, r6
 801782c:	4658      	mov	r0, fp
 801782e:	4798      	blx	r3
 8017830:	1e6f      	subs	r7, r5, #1
 8017832:	463d      	mov	r5, r7
 8017834:	454d      	cmp	r5, r9
 8017836:	d029      	beq.n	801788c <_scanf_i+0x1d4>
 8017838:	6822      	ldr	r2, [r4, #0]
 801783a:	f012 0210 	ands.w	r2, r2, #16
 801783e:	d113      	bne.n	8017868 <_scanf_i+0x1b0>
 8017840:	702a      	strb	r2, [r5, #0]
 8017842:	6863      	ldr	r3, [r4, #4]
 8017844:	9e00      	ldr	r6, [sp, #0]
 8017846:	4649      	mov	r1, r9
 8017848:	4658      	mov	r0, fp
 801784a:	47b0      	blx	r6
 801784c:	f8da 3000 	ldr.w	r3, [sl]
 8017850:	6821      	ldr	r1, [r4, #0]
 8017852:	1d1a      	adds	r2, r3, #4
 8017854:	f8ca 2000 	str.w	r2, [sl]
 8017858:	f011 0f20 	tst.w	r1, #32
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	d010      	beq.n	8017882 <_scanf_i+0x1ca>
 8017860:	6018      	str	r0, [r3, #0]
 8017862:	68e3      	ldr	r3, [r4, #12]
 8017864:	3301      	adds	r3, #1
 8017866:	60e3      	str	r3, [r4, #12]
 8017868:	eba5 0509 	sub.w	r5, r5, r9
 801786c:	44a8      	add	r8, r5
 801786e:	6925      	ldr	r5, [r4, #16]
 8017870:	4445      	add	r5, r8
 8017872:	6125      	str	r5, [r4, #16]
 8017874:	2000      	movs	r0, #0
 8017876:	b007      	add	sp, #28
 8017878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801787c:	f04f 0800 	mov.w	r8, #0
 8017880:	e7ca      	b.n	8017818 <_scanf_i+0x160>
 8017882:	07ca      	lsls	r2, r1, #31
 8017884:	bf4c      	ite	mi
 8017886:	8018      	strhmi	r0, [r3, #0]
 8017888:	6018      	strpl	r0, [r3, #0]
 801788a:	e7ea      	b.n	8017862 <_scanf_i+0x1aa>
 801788c:	2001      	movs	r0, #1
 801788e:	e7f2      	b.n	8017876 <_scanf_i+0x1be>
 8017890:	080181a8 	.word	0x080181a8
 8017894:	08014ab9 	.word	0x08014ab9
 8017898:	08017acd 	.word	0x08017acd
 801789c:	0801866d 	.word	0x0801866d

080178a0 <_putc_r>:
 80178a0:	b570      	push	{r4, r5, r6, lr}
 80178a2:	460d      	mov	r5, r1
 80178a4:	4614      	mov	r4, r2
 80178a6:	4606      	mov	r6, r0
 80178a8:	b118      	cbz	r0, 80178b2 <_putc_r+0x12>
 80178aa:	6983      	ldr	r3, [r0, #24]
 80178ac:	b90b      	cbnz	r3, 80178b2 <_putc_r+0x12>
 80178ae:	f7fe f94b 	bl	8015b48 <__sinit>
 80178b2:	4b13      	ldr	r3, [pc, #76]	; (8017900 <_putc_r+0x60>)
 80178b4:	429c      	cmp	r4, r3
 80178b6:	d112      	bne.n	80178de <_putc_r+0x3e>
 80178b8:	6874      	ldr	r4, [r6, #4]
 80178ba:	68a3      	ldr	r3, [r4, #8]
 80178bc:	3b01      	subs	r3, #1
 80178be:	2b00      	cmp	r3, #0
 80178c0:	60a3      	str	r3, [r4, #8]
 80178c2:	da16      	bge.n	80178f2 <_putc_r+0x52>
 80178c4:	69a2      	ldr	r2, [r4, #24]
 80178c6:	4293      	cmp	r3, r2
 80178c8:	db02      	blt.n	80178d0 <_putc_r+0x30>
 80178ca:	b2eb      	uxtb	r3, r5
 80178cc:	2b0a      	cmp	r3, #10
 80178ce:	d110      	bne.n	80178f2 <_putc_r+0x52>
 80178d0:	4622      	mov	r2, r4
 80178d2:	4629      	mov	r1, r5
 80178d4:	4630      	mov	r0, r6
 80178d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178da:	f7fd b91f 	b.w	8014b1c <__swbuf_r>
 80178de:	4b09      	ldr	r3, [pc, #36]	; (8017904 <_putc_r+0x64>)
 80178e0:	429c      	cmp	r4, r3
 80178e2:	d101      	bne.n	80178e8 <_putc_r+0x48>
 80178e4:	68b4      	ldr	r4, [r6, #8]
 80178e6:	e7e8      	b.n	80178ba <_putc_r+0x1a>
 80178e8:	4b07      	ldr	r3, [pc, #28]	; (8017908 <_putc_r+0x68>)
 80178ea:	429c      	cmp	r4, r3
 80178ec:	bf08      	it	eq
 80178ee:	68f4      	ldreq	r4, [r6, #12]
 80178f0:	e7e3      	b.n	80178ba <_putc_r+0x1a>
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	1c5a      	adds	r2, r3, #1
 80178f6:	6022      	str	r2, [r4, #0]
 80178f8:	701d      	strb	r5, [r3, #0]
 80178fa:	b2e8      	uxtb	r0, r5
 80178fc:	bd70      	pop	{r4, r5, r6, pc}
 80178fe:	bf00      	nop
 8017900:	08018500 	.word	0x08018500
 8017904:	08018520 	.word	0x08018520
 8017908:	080184e0 	.word	0x080184e0

0801790c <_read_r>:
 801790c:	b538      	push	{r3, r4, r5, lr}
 801790e:	4c07      	ldr	r4, [pc, #28]	; (801792c <_read_r+0x20>)
 8017910:	4605      	mov	r5, r0
 8017912:	4608      	mov	r0, r1
 8017914:	4611      	mov	r1, r2
 8017916:	2200      	movs	r2, #0
 8017918:	6022      	str	r2, [r4, #0]
 801791a:	461a      	mov	r2, r3
 801791c:	f7ee f8ce 	bl	8005abc <_read>
 8017920:	1c43      	adds	r3, r0, #1
 8017922:	d102      	bne.n	801792a <_read_r+0x1e>
 8017924:	6823      	ldr	r3, [r4, #0]
 8017926:	b103      	cbz	r3, 801792a <_read_r+0x1e>
 8017928:	602b      	str	r3, [r5, #0]
 801792a:	bd38      	pop	{r3, r4, r5, pc}
 801792c:	2003be1c 	.word	0x2003be1c

08017930 <_sbrk_r>:
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	4c06      	ldr	r4, [pc, #24]	; (801794c <_sbrk_r+0x1c>)
 8017934:	2300      	movs	r3, #0
 8017936:	4605      	mov	r5, r0
 8017938:	4608      	mov	r0, r1
 801793a:	6023      	str	r3, [r4, #0]
 801793c:	f7ee f910 	bl	8005b60 <_sbrk>
 8017940:	1c43      	adds	r3, r0, #1
 8017942:	d102      	bne.n	801794a <_sbrk_r+0x1a>
 8017944:	6823      	ldr	r3, [r4, #0]
 8017946:	b103      	cbz	r3, 801794a <_sbrk_r+0x1a>
 8017948:	602b      	str	r3, [r5, #0]
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	2003be1c 	.word	0x2003be1c

08017950 <__sccl>:
 8017950:	b570      	push	{r4, r5, r6, lr}
 8017952:	780b      	ldrb	r3, [r1, #0]
 8017954:	2b5e      	cmp	r3, #94	; 0x5e
 8017956:	bf13      	iteet	ne
 8017958:	1c4a      	addne	r2, r1, #1
 801795a:	1c8a      	addeq	r2, r1, #2
 801795c:	784b      	ldrbeq	r3, [r1, #1]
 801795e:	2100      	movne	r1, #0
 8017960:	bf08      	it	eq
 8017962:	2101      	moveq	r1, #1
 8017964:	1e44      	subs	r4, r0, #1
 8017966:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801796a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801796e:	42ac      	cmp	r4, r5
 8017970:	d1fb      	bne.n	801796a <__sccl+0x1a>
 8017972:	b913      	cbnz	r3, 801797a <__sccl+0x2a>
 8017974:	3a01      	subs	r2, #1
 8017976:	4610      	mov	r0, r2
 8017978:	bd70      	pop	{r4, r5, r6, pc}
 801797a:	f081 0401 	eor.w	r4, r1, #1
 801797e:	54c4      	strb	r4, [r0, r3]
 8017980:	1c51      	adds	r1, r2, #1
 8017982:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017986:	2d2d      	cmp	r5, #45	; 0x2d
 8017988:	f101 36ff 	add.w	r6, r1, #4294967295
 801798c:	460a      	mov	r2, r1
 801798e:	d006      	beq.n	801799e <__sccl+0x4e>
 8017990:	2d5d      	cmp	r5, #93	; 0x5d
 8017992:	d0f0      	beq.n	8017976 <__sccl+0x26>
 8017994:	b90d      	cbnz	r5, 801799a <__sccl+0x4a>
 8017996:	4632      	mov	r2, r6
 8017998:	e7ed      	b.n	8017976 <__sccl+0x26>
 801799a:	462b      	mov	r3, r5
 801799c:	e7ef      	b.n	801797e <__sccl+0x2e>
 801799e:	780e      	ldrb	r6, [r1, #0]
 80179a0:	2e5d      	cmp	r6, #93	; 0x5d
 80179a2:	d0fa      	beq.n	801799a <__sccl+0x4a>
 80179a4:	42b3      	cmp	r3, r6
 80179a6:	dcf8      	bgt.n	801799a <__sccl+0x4a>
 80179a8:	3301      	adds	r3, #1
 80179aa:	429e      	cmp	r6, r3
 80179ac:	54c4      	strb	r4, [r0, r3]
 80179ae:	dcfb      	bgt.n	80179a8 <__sccl+0x58>
 80179b0:	3102      	adds	r1, #2
 80179b2:	e7e6      	b.n	8017982 <__sccl+0x32>

080179b4 <strncmp>:
 80179b4:	b510      	push	{r4, lr}
 80179b6:	b16a      	cbz	r2, 80179d4 <strncmp+0x20>
 80179b8:	3901      	subs	r1, #1
 80179ba:	1884      	adds	r4, r0, r2
 80179bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80179c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80179c4:	4293      	cmp	r3, r2
 80179c6:	d103      	bne.n	80179d0 <strncmp+0x1c>
 80179c8:	42a0      	cmp	r0, r4
 80179ca:	d001      	beq.n	80179d0 <strncmp+0x1c>
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d1f5      	bne.n	80179bc <strncmp+0x8>
 80179d0:	1a98      	subs	r0, r3, r2
 80179d2:	bd10      	pop	{r4, pc}
 80179d4:	4610      	mov	r0, r2
 80179d6:	e7fc      	b.n	80179d2 <strncmp+0x1e>

080179d8 <_strtoul_l.isra.0>:
 80179d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179dc:	4680      	mov	r8, r0
 80179de:	4689      	mov	r9, r1
 80179e0:	4692      	mov	sl, r2
 80179e2:	461e      	mov	r6, r3
 80179e4:	460f      	mov	r7, r1
 80179e6:	463d      	mov	r5, r7
 80179e8:	9808      	ldr	r0, [sp, #32]
 80179ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179ee:	f7fe fc5b 	bl	80162a8 <__locale_ctype_ptr_l>
 80179f2:	4420      	add	r0, r4
 80179f4:	7843      	ldrb	r3, [r0, #1]
 80179f6:	f013 0308 	ands.w	r3, r3, #8
 80179fa:	d130      	bne.n	8017a5e <_strtoul_l.isra.0+0x86>
 80179fc:	2c2d      	cmp	r4, #45	; 0x2d
 80179fe:	d130      	bne.n	8017a62 <_strtoul_l.isra.0+0x8a>
 8017a00:	787c      	ldrb	r4, [r7, #1]
 8017a02:	1cbd      	adds	r5, r7, #2
 8017a04:	2101      	movs	r1, #1
 8017a06:	2e00      	cmp	r6, #0
 8017a08:	d05c      	beq.n	8017ac4 <_strtoul_l.isra.0+0xec>
 8017a0a:	2e10      	cmp	r6, #16
 8017a0c:	d109      	bne.n	8017a22 <_strtoul_l.isra.0+0x4a>
 8017a0e:	2c30      	cmp	r4, #48	; 0x30
 8017a10:	d107      	bne.n	8017a22 <_strtoul_l.isra.0+0x4a>
 8017a12:	782b      	ldrb	r3, [r5, #0]
 8017a14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017a18:	2b58      	cmp	r3, #88	; 0x58
 8017a1a:	d14e      	bne.n	8017aba <_strtoul_l.isra.0+0xe2>
 8017a1c:	786c      	ldrb	r4, [r5, #1]
 8017a1e:	2610      	movs	r6, #16
 8017a20:	3502      	adds	r5, #2
 8017a22:	f04f 32ff 	mov.w	r2, #4294967295
 8017a26:	2300      	movs	r3, #0
 8017a28:	fbb2 f2f6 	udiv	r2, r2, r6
 8017a2c:	fb06 fc02 	mul.w	ip, r6, r2
 8017a30:	ea6f 0c0c 	mvn.w	ip, ip
 8017a34:	4618      	mov	r0, r3
 8017a36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017a3a:	2f09      	cmp	r7, #9
 8017a3c:	d817      	bhi.n	8017a6e <_strtoul_l.isra.0+0x96>
 8017a3e:	463c      	mov	r4, r7
 8017a40:	42a6      	cmp	r6, r4
 8017a42:	dd23      	ble.n	8017a8c <_strtoul_l.isra.0+0xb4>
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	db1e      	blt.n	8017a86 <_strtoul_l.isra.0+0xae>
 8017a48:	4282      	cmp	r2, r0
 8017a4a:	d31c      	bcc.n	8017a86 <_strtoul_l.isra.0+0xae>
 8017a4c:	d101      	bne.n	8017a52 <_strtoul_l.isra.0+0x7a>
 8017a4e:	45a4      	cmp	ip, r4
 8017a50:	db19      	blt.n	8017a86 <_strtoul_l.isra.0+0xae>
 8017a52:	fb00 4006 	mla	r0, r0, r6, r4
 8017a56:	2301      	movs	r3, #1
 8017a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a5c:	e7eb      	b.n	8017a36 <_strtoul_l.isra.0+0x5e>
 8017a5e:	462f      	mov	r7, r5
 8017a60:	e7c1      	b.n	80179e6 <_strtoul_l.isra.0+0xe>
 8017a62:	2c2b      	cmp	r4, #43	; 0x2b
 8017a64:	bf04      	itt	eq
 8017a66:	1cbd      	addeq	r5, r7, #2
 8017a68:	787c      	ldrbeq	r4, [r7, #1]
 8017a6a:	4619      	mov	r1, r3
 8017a6c:	e7cb      	b.n	8017a06 <_strtoul_l.isra.0+0x2e>
 8017a6e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017a72:	2f19      	cmp	r7, #25
 8017a74:	d801      	bhi.n	8017a7a <_strtoul_l.isra.0+0xa2>
 8017a76:	3c37      	subs	r4, #55	; 0x37
 8017a78:	e7e2      	b.n	8017a40 <_strtoul_l.isra.0+0x68>
 8017a7a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017a7e:	2f19      	cmp	r7, #25
 8017a80:	d804      	bhi.n	8017a8c <_strtoul_l.isra.0+0xb4>
 8017a82:	3c57      	subs	r4, #87	; 0x57
 8017a84:	e7dc      	b.n	8017a40 <_strtoul_l.isra.0+0x68>
 8017a86:	f04f 33ff 	mov.w	r3, #4294967295
 8017a8a:	e7e5      	b.n	8017a58 <_strtoul_l.isra.0+0x80>
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	da09      	bge.n	8017aa4 <_strtoul_l.isra.0+0xcc>
 8017a90:	2322      	movs	r3, #34	; 0x22
 8017a92:	f8c8 3000 	str.w	r3, [r8]
 8017a96:	f04f 30ff 	mov.w	r0, #4294967295
 8017a9a:	f1ba 0f00 	cmp.w	sl, #0
 8017a9e:	d107      	bne.n	8017ab0 <_strtoul_l.isra.0+0xd8>
 8017aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aa4:	b101      	cbz	r1, 8017aa8 <_strtoul_l.isra.0+0xd0>
 8017aa6:	4240      	negs	r0, r0
 8017aa8:	f1ba 0f00 	cmp.w	sl, #0
 8017aac:	d0f8      	beq.n	8017aa0 <_strtoul_l.isra.0+0xc8>
 8017aae:	b10b      	cbz	r3, 8017ab4 <_strtoul_l.isra.0+0xdc>
 8017ab0:	f105 39ff 	add.w	r9, r5, #4294967295
 8017ab4:	f8ca 9000 	str.w	r9, [sl]
 8017ab8:	e7f2      	b.n	8017aa0 <_strtoul_l.isra.0+0xc8>
 8017aba:	2430      	movs	r4, #48	; 0x30
 8017abc:	2e00      	cmp	r6, #0
 8017abe:	d1b0      	bne.n	8017a22 <_strtoul_l.isra.0+0x4a>
 8017ac0:	2608      	movs	r6, #8
 8017ac2:	e7ae      	b.n	8017a22 <_strtoul_l.isra.0+0x4a>
 8017ac4:	2c30      	cmp	r4, #48	; 0x30
 8017ac6:	d0a4      	beq.n	8017a12 <_strtoul_l.isra.0+0x3a>
 8017ac8:	260a      	movs	r6, #10
 8017aca:	e7aa      	b.n	8017a22 <_strtoul_l.isra.0+0x4a>

08017acc <_strtoul_r>:
 8017acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ace:	4c06      	ldr	r4, [pc, #24]	; (8017ae8 <_strtoul_r+0x1c>)
 8017ad0:	4d06      	ldr	r5, [pc, #24]	; (8017aec <_strtoul_r+0x20>)
 8017ad2:	6824      	ldr	r4, [r4, #0]
 8017ad4:	6a24      	ldr	r4, [r4, #32]
 8017ad6:	2c00      	cmp	r4, #0
 8017ad8:	bf08      	it	eq
 8017ada:	462c      	moveq	r4, r5
 8017adc:	9400      	str	r4, [sp, #0]
 8017ade:	f7ff ff7b 	bl	80179d8 <_strtoul_l.isra.0>
 8017ae2:	b003      	add	sp, #12
 8017ae4:	bd30      	pop	{r4, r5, pc}
 8017ae6:	bf00      	nop
 8017ae8:	2000000c 	.word	0x2000000c
 8017aec:	20000070 	.word	0x20000070

08017af0 <__submore>:
 8017af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017af4:	460c      	mov	r4, r1
 8017af6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017afc:	4299      	cmp	r1, r3
 8017afe:	d11d      	bne.n	8017b3c <__submore+0x4c>
 8017b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017b04:	f7ff f8de 	bl	8016cc4 <_malloc_r>
 8017b08:	b918      	cbnz	r0, 8017b12 <__submore+0x22>
 8017b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b16:	63a3      	str	r3, [r4, #56]	; 0x38
 8017b18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8017b1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017b22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017b26:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017b2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017b2e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017b32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017b36:	6020      	str	r0, [r4, #0]
 8017b38:	2000      	movs	r0, #0
 8017b3a:	e7e8      	b.n	8017b0e <__submore+0x1e>
 8017b3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017b3e:	0077      	lsls	r7, r6, #1
 8017b40:	463a      	mov	r2, r7
 8017b42:	f000 f85a 	bl	8017bfa <_realloc_r>
 8017b46:	4605      	mov	r5, r0
 8017b48:	2800      	cmp	r0, #0
 8017b4a:	d0de      	beq.n	8017b0a <__submore+0x1a>
 8017b4c:	eb00 0806 	add.w	r8, r0, r6
 8017b50:	4601      	mov	r1, r0
 8017b52:	4632      	mov	r2, r6
 8017b54:	4640      	mov	r0, r8
 8017b56:	f7fb f95f 	bl	8012e18 <memcpy>
 8017b5a:	f8c4 8000 	str.w	r8, [r4]
 8017b5e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017b62:	e7e9      	b.n	8017b38 <__submore+0x48>

08017b64 <__ascii_wctomb>:
 8017b64:	b149      	cbz	r1, 8017b7a <__ascii_wctomb+0x16>
 8017b66:	2aff      	cmp	r2, #255	; 0xff
 8017b68:	bf85      	ittet	hi
 8017b6a:	238a      	movhi	r3, #138	; 0x8a
 8017b6c:	6003      	strhi	r3, [r0, #0]
 8017b6e:	700a      	strbls	r2, [r1, #0]
 8017b70:	f04f 30ff 	movhi.w	r0, #4294967295
 8017b74:	bf98      	it	ls
 8017b76:	2001      	movls	r0, #1
 8017b78:	4770      	bx	lr
 8017b7a:	4608      	mov	r0, r1
 8017b7c:	4770      	bx	lr
	...

08017b80 <_fstat_r>:
 8017b80:	b538      	push	{r3, r4, r5, lr}
 8017b82:	4c07      	ldr	r4, [pc, #28]	; (8017ba0 <_fstat_r+0x20>)
 8017b84:	2300      	movs	r3, #0
 8017b86:	4605      	mov	r5, r0
 8017b88:	4608      	mov	r0, r1
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	6023      	str	r3, [r4, #0]
 8017b8e:	f7ed ffbe 	bl	8005b0e <_fstat>
 8017b92:	1c43      	adds	r3, r0, #1
 8017b94:	d102      	bne.n	8017b9c <_fstat_r+0x1c>
 8017b96:	6823      	ldr	r3, [r4, #0]
 8017b98:	b103      	cbz	r3, 8017b9c <_fstat_r+0x1c>
 8017b9a:	602b      	str	r3, [r5, #0]
 8017b9c:	bd38      	pop	{r3, r4, r5, pc}
 8017b9e:	bf00      	nop
 8017ba0:	2003be1c 	.word	0x2003be1c

08017ba4 <_isatty_r>:
 8017ba4:	b538      	push	{r3, r4, r5, lr}
 8017ba6:	4c06      	ldr	r4, [pc, #24]	; (8017bc0 <_isatty_r+0x1c>)
 8017ba8:	2300      	movs	r3, #0
 8017baa:	4605      	mov	r5, r0
 8017bac:	4608      	mov	r0, r1
 8017bae:	6023      	str	r3, [r4, #0]
 8017bb0:	f7ed ffbd 	bl	8005b2e <_isatty>
 8017bb4:	1c43      	adds	r3, r0, #1
 8017bb6:	d102      	bne.n	8017bbe <_isatty_r+0x1a>
 8017bb8:	6823      	ldr	r3, [r4, #0]
 8017bba:	b103      	cbz	r3, 8017bbe <_isatty_r+0x1a>
 8017bbc:	602b      	str	r3, [r5, #0]
 8017bbe:	bd38      	pop	{r3, r4, r5, pc}
 8017bc0:	2003be1c 	.word	0x2003be1c

08017bc4 <memmove>:
 8017bc4:	4288      	cmp	r0, r1
 8017bc6:	b510      	push	{r4, lr}
 8017bc8:	eb01 0302 	add.w	r3, r1, r2
 8017bcc:	d807      	bhi.n	8017bde <memmove+0x1a>
 8017bce:	1e42      	subs	r2, r0, #1
 8017bd0:	4299      	cmp	r1, r3
 8017bd2:	d00a      	beq.n	8017bea <memmove+0x26>
 8017bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017bd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017bdc:	e7f8      	b.n	8017bd0 <memmove+0xc>
 8017bde:	4283      	cmp	r3, r0
 8017be0:	d9f5      	bls.n	8017bce <memmove+0xa>
 8017be2:	1881      	adds	r1, r0, r2
 8017be4:	1ad2      	subs	r2, r2, r3
 8017be6:	42d3      	cmn	r3, r2
 8017be8:	d100      	bne.n	8017bec <memmove+0x28>
 8017bea:	bd10      	pop	{r4, pc}
 8017bec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bf0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017bf4:	e7f7      	b.n	8017be6 <memmove+0x22>

08017bf6 <__malloc_lock>:
 8017bf6:	4770      	bx	lr

08017bf8 <__malloc_unlock>:
 8017bf8:	4770      	bx	lr

08017bfa <_realloc_r>:
 8017bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bfc:	4607      	mov	r7, r0
 8017bfe:	4614      	mov	r4, r2
 8017c00:	460e      	mov	r6, r1
 8017c02:	b921      	cbnz	r1, 8017c0e <_realloc_r+0x14>
 8017c04:	4611      	mov	r1, r2
 8017c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c0a:	f7ff b85b 	b.w	8016cc4 <_malloc_r>
 8017c0e:	b922      	cbnz	r2, 8017c1a <_realloc_r+0x20>
 8017c10:	f7ff f80a 	bl	8016c28 <_free_r>
 8017c14:	4625      	mov	r5, r4
 8017c16:	4628      	mov	r0, r5
 8017c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c1a:	f000 f814 	bl	8017c46 <_malloc_usable_size_r>
 8017c1e:	42a0      	cmp	r0, r4
 8017c20:	d20f      	bcs.n	8017c42 <_realloc_r+0x48>
 8017c22:	4621      	mov	r1, r4
 8017c24:	4638      	mov	r0, r7
 8017c26:	f7ff f84d 	bl	8016cc4 <_malloc_r>
 8017c2a:	4605      	mov	r5, r0
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d0f2      	beq.n	8017c16 <_realloc_r+0x1c>
 8017c30:	4631      	mov	r1, r6
 8017c32:	4622      	mov	r2, r4
 8017c34:	f7fb f8f0 	bl	8012e18 <memcpy>
 8017c38:	4631      	mov	r1, r6
 8017c3a:	4638      	mov	r0, r7
 8017c3c:	f7fe fff4 	bl	8016c28 <_free_r>
 8017c40:	e7e9      	b.n	8017c16 <_realloc_r+0x1c>
 8017c42:	4635      	mov	r5, r6
 8017c44:	e7e7      	b.n	8017c16 <_realloc_r+0x1c>

08017c46 <_malloc_usable_size_r>:
 8017c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c4a:	1f18      	subs	r0, r3, #4
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	bfbc      	itt	lt
 8017c50:	580b      	ldrlt	r3, [r1, r0]
 8017c52:	18c0      	addlt	r0, r0, r3
 8017c54:	4770      	bx	lr
	...

08017c58 <_init>:
 8017c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c5a:	bf00      	nop
 8017c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c5e:	bc08      	pop	{r3}
 8017c60:	469e      	mov	lr, r3
 8017c62:	4770      	bx	lr

08017c64 <_fini>:
 8017c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c66:	bf00      	nop
 8017c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c6a:	bc08      	pop	{r3}
 8017c6c:	469e      	mov	lr, r3
 8017c6e:	4770      	bx	lr
