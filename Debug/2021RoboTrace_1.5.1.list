
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017384  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08017548  08017548  00027548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017e7c  08017e7c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017e7c  08017e7c  00027e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017e84  08017e84  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017e84  08017e84  00027e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017e8c  08017e8c  00027e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017e90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bae0  200001e0  0801806c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003bcc0  0801806c  0003bcc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037393  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a3b  00000000  00000000  0006759f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021b0  00000000  00000000  0006efe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee0  00000000  00000000  00071190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000376fc  00000000  00000000  00073070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b02  00000000  00000000  000aa76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001106f4  00000000  00000000  000d026e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a360  00000000  00000000  001e09e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801752c 	.word	0x0801752c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801752c 	.word	0x0801752c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fa44 	bl	8008464 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200397b8 	.word	0x200397b8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fa2c 	bl	8008464 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200397b8 	.word	0x200397b8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 f8b5 	bl	8008190 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fe1c 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fe16 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fe10 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fe0a 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fe04 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fdfe 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 fdf8 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fdf2 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fdec 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fde6 	bl	8006c64 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fdda 	bl	8006c64 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fdd4 	bl	8006c64 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f98d 	bl	8014448 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00a fff4 	bl	800c194 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00a fff0 	bl	800c194 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039a0c 	.word	0x20039a0c
 80011d0:	200396f0 	.word	0x200396f0
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZN7Encoder8clearCntEv+0x3c>)
 8001432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_ZN7Encoder8clearCntEv+0x40>)
 800143a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010000 	.word	0x40010000
 8001458:	40010400 	.word	0x40010400

0800145c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f993 	bl	80017c4 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800149e:	f000 f9a7 	bl	80017f0 <fopen_folder_and_file>

	return ret;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <user_fclose+0x1c>)
 80014b8:	f00f fbc6 	bl	8010c48 <f_close>

	return ret;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200385fc 	.word	0x200385fc

080014cc <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
 80014e4:	e030      	b.n	8001548 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <sd_write_float+0x94>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <sd_write_float+0x98>)
 8001506:	f012 f80f 	bl	8013528 <sniprintf>

		if(state == ADD_WRITE){
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <sd_write_float+0x9c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <sd_write_float+0x9c>)
 8001518:	f00f fc0a 	bl	8010d30 <f_lseek>
 800151c:	e003      	b.n	8001526 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800151e:	2100      	movs	r1, #0
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <sd_write_float+0x9c>)
 8001522:	f00f fc05 	bl	8010d30 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <sd_write_float+0x98>)
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <sd_write_float+0xa0>)
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <sd_write_float+0x98>)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <sd_write_float+0x9c>)
 8001534:	f00f f973 	bl	801081e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001538:	f000 f974 	bl	8001824 <bufclear>
	for(short i = 0 ; i < size; i++){
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbc8      	blt.n	80014e6 <sd_write_float+0x1a>
	}
	return ret;
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	08017548 	.word	0x08017548
 8001564:	2003856c 	.word	0x2003856c
 8001568:	200385fc 	.word	0x200385fc
 800156c:	200385ec 	.word	0x200385ec

08001570 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f91c 	bl	80017c4 <create_path>

	if(state == OVER_WRITE){
 800158c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <sd_write_array_float+0xb0>)
 8001596:	f00f fb81 	bl	8010c9c <f_chdir>
		f_unlink(filepath);	//	一回消す
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <sd_write_array_float+0xb4>)
 800159c:	f00f fdec 	bl	8011178 <f_unlink>
		f_chdir("..");
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <sd_write_array_float+0xb8>)
 80015a2:	f00f fb7b 	bl	8010c9c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015a6:	f000 f923 	bl	80017f0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	e028      	b.n	8001602 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <sd_write_array_float+0xbc>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <sd_write_array_float+0xc0>)
 80015d0:	f011 ffaa 	bl	8013528 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_float+0xc4>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <sd_write_array_float+0xc4>)
 80015dc:	f00f fba8 	bl	8010d30 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_float+0xc0>)
 80015e2:	f7fe fe0d 	bl	8000200 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_float+0xc8>)
 80015ea:	4911      	ldr	r1, [pc, #68]	; (8001630 <sd_write_array_float+0xc0>)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_float+0xc4>)
 80015ee:	f00f f916 	bl	801081e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015f2:	f000 f917 	bl	8001824 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd0      	blt.n	80015b0 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <sd_write_array_float+0xc4>)
 8001610:	f00f fb1a 	bl	8010c48 <f_close>

	return ret;
 8001614:	7d7b      	ldrb	r3, [r7, #21]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	2003846c 	.word	0x2003846c
 8001624:	2003732c 	.word	0x2003732c
 8001628:	08017564 	.word	0x08017564
 800162c:	08017548 	.word	0x08017548
 8001630:	2003856c 	.word	0x2003856c
 8001634:	200385fc 	.word	0x200385fc
 8001638:	200385ec 	.word	0x200385ec

0800163c <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f8b6 	bl	80017c4 <create_path>

	if(state == OVER_WRITE){
 8001658:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d108      	bne.n	8001672 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001660:	4820      	ldr	r0, [pc, #128]	; (80016e4 <sd_write_array_double+0xa8>)
 8001662:	f00f fb1b 	bl	8010c9c <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <sd_write_array_double+0xac>)
 8001668:	f00f fd86 	bl	8011178 <f_unlink>
		f_chdir("..");
 800166c:	481f      	ldr	r0, [pc, #124]	; (80016ec <sd_write_array_double+0xb0>)
 800166e:	f00f fb15 	bl	8010c9c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001672:	f000 f8bd 	bl	80017f0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	e024      	b.n	80016c6 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%lf\n", *(data + i));	//doubleをstringに変換
 800167c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800168a:	e9cd 3400 	strd	r3, r4, [sp]
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <sd_write_array_double+0xb4>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <sd_write_array_double+0xb8>)
 8001694:	f011 ff48 	bl	8013528 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <sd_write_array_double+0xbc>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4619      	mov	r1, r3
 800169e:	4816      	ldr	r0, [pc, #88]	; (80016f8 <sd_write_array_double+0xbc>)
 80016a0:	f00f fb46 	bl	8010d30 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80016a4:	4813      	ldr	r0, [pc, #76]	; (80016f4 <sd_write_array_double+0xb8>)
 80016a6:	f7fe fdab 	bl	8000200 <strlen>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <sd_write_array_double+0xc0>)
 80016ae:	4911      	ldr	r1, [pc, #68]	; (80016f4 <sd_write_array_double+0xb8>)
 80016b0:	4811      	ldr	r0, [pc, #68]	; (80016f8 <sd_write_array_double+0xbc>)
 80016b2:	f00f f8b4 	bl	801081e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80016b6:	f000 f8b5 	bl	8001824 <bufclear>
	for(short i = 0 ; i < size; i++){
 80016ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	82fb      	strh	r3, [r7, #22]
 80016c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbd4      	blt.n	800167c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <sd_write_array_double+0xbc>)
 80016d4:	f00f fab8 	bl	8010c48 <f_close>

	return ret;
 80016d8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2003846c 	.word	0x2003846c
 80016e8:	2003732c 	.word	0x2003732c
 80016ec:	08017564 	.word	0x08017564
 80016f0:	08017558 	.word	0x08017558
 80016f4:	2003856c 	.word	0x2003856c
 80016f8:	200385fc 	.word	0x200385fc
 80016fc:	200385ec 	.word	0x200385ec

08001700 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f852 	bl	80017c4 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001720:	f000 f866 	bl	80017f0 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001724:	e019      	b.n	800175a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001726:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4913      	ldr	r1, [pc, #76]	; (8001780 <sd_read_array_double+0x80>)
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <sd_read_array_double+0x84>)
 8001736:	f011 ff4b 	bl	80135d0 <siscanf>
		i++;
 800173a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173e:	b29b      	uxth	r3, r3
 8001740:	3301      	adds	r3, #1
 8001742:	b29b      	uxth	r3, r3
 8001744:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800174a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174e:	429a      	cmp	r2, r3
 8001750:	db03      	blt.n	800175a <sd_read_array_double+0x5a>
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	3b01      	subs	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <sd_read_array_double+0x88>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <sd_read_array_double+0x84>)
 8001760:	f00f fee8 	bl	8011534 <f_gets>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1dd      	bne.n	8001726 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800176a:	f000 f85b 	bl	8001824 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <sd_read_array_double+0x88>)
 8001770:	f00f fa6a 	bl	8010c48 <f_close>

	return ret;
 8001774:	7d7b      	ldrb	r3, [r7, #21]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08017560 	.word	0x08017560
 8001784:	2003856c 	.word	0x2003856c
 8001788:	200385fc 	.word	0x200385fc

0800178c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001796:	2201      	movs	r2, #1
 8001798:	4908      	ldr	r1, [pc, #32]	; (80017bc <sd_mount+0x30>)
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <sd_mount+0x34>)
 800179c:	f00e fccc 	bl	8010138 <f_mount>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <sd_mount+0x20>
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <sd_mount+0x24>
	else ret = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08017570 	.word	0x08017570
 80017c0:	2003742c 	.word	0x2003742c

080017c4 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <create_path+0x24>)
 80017d2:	f011 ff6c 	bl	80136ae <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <create_path+0x28>)
 80017da:	f011 ff68 	bl	80136ae <strcpy>

}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2003846c 	.word	0x2003846c
 80017ec:	2003732c 	.word	0x2003732c

080017f0 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <fopen_folder_and_file+0x24>)
 80017f6:	f00f fd81 	bl	80112fc <f_mkdir>

	f_chdir(dirpath);
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <fopen_folder_and_file+0x24>)
 80017fc:	f00f fa4e 	bl	8010c9c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001800:	2213      	movs	r2, #19
 8001802:	4905      	ldr	r1, [pc, #20]	; (8001818 <fopen_folder_and_file+0x28>)
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <fopen_folder_and_file+0x2c>)
 8001806:	f00e fcdd 	bl	80101c4 <f_open>

	f_chdir("..");
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <fopen_folder_and_file+0x30>)
 800180c:	f00f fa46 	bl	8010c9c <f_chdir>


}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2003846c 	.word	0x2003846c
 8001818:	2003732c 	.word	0x2003732c
 800181c:	200385fc 	.word	0x200385fc
 8001820:	08017564 	.word	0x08017564

08001824 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e007      	b.n	8001840 <bufclear+0x1c>
		buffer[i] = '\0';
 8001830:	4a08      	ldr	r2, [pc, #32]	; (8001854 <bufclear+0x30>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3301      	adds	r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b7f      	cmp	r3, #127	; 0x7f
 8001844:	ddf4      	ble.n	8001830 <bufclear+0xc>
	}
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2003856c 	.word	0x2003856c

08001858 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <read_byte+0x54>)
 8001874:	f006 fc8c 	bl	8008190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001878:	f107 010f 	add.w	r1, r7, #15
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	2201      	movs	r2, #1
 8001880:	480b      	ldr	r0, [pc, #44]	; (80018b0 <read_byte+0x58>)
 8001882:	f009 fe4d 	bl	800b520 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001886:	f107 010e 	add.w	r1, r7, #14
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	2201      	movs	r2, #1
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <read_byte+0x58>)
 8001890:	f009 ff7a 	bl	800b788 <HAL_SPI_Receive>
	CS_SET;
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <read_byte+0x54>)
 800189c:	f006 fc78 	bl	8008190 <HAL_GPIO_WritePin>

	return val;
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40020400 	.word	0x40020400
 80018b0:	20039698 	.word	0x20039698

080018b4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	4613      	mov	r3, r2
 80018c2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <write_byte+0x54>)
 80018d6:	f006 fc5b 	bl	8008190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018da:	f107 010f 	add.w	r1, r7, #15
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	2201      	movs	r2, #1
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <write_byte+0x58>)
 80018e4:	f009 fe1c 	bl	800b520 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018e8:	1db9      	adds	r1, r7, #6
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2201      	movs	r2, #1
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <write_byte+0x58>)
 80018f0:	f009 fe16 	bl	800b520 <HAL_SPI_Transmit>
	CS_SET;
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <write_byte+0x54>)
 80018fc:	f006 fc48 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40020400 	.word	0x40020400
 800190c:	20039698 	.word	0x20039698

08001910 <IMU_init>:

uint16_t IMU_init() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff ff9c 	bl	8001858 <read_byte>
 8001920:	4603      	mov	r3, r0
 8001922:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	2be0      	cmp	r3, #224	; 0xe0
 8001928:	d119      	bne.n	800195e <IMU_init+0x4e>
		ret = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800192e:	2101      	movs	r1, #1
 8001930:	2006      	movs	r0, #6
 8001932:	f7ff ffbf 	bl	80018b4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001936:	2110      	movs	r1, #16
 8001938:	2003      	movs	r0, #3
 800193a:	f7ff ffbb 	bl	80018b4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800193e:	2120      	movs	r1, #32
 8001940:	207f      	movs	r0, #127	; 0x7f
 8001942:	f7ff ffb7 	bl	80018b4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001946:	2106      	movs	r1, #6
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff ffb3 	bl	80018b4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800194e:	2106      	movs	r1, #6
 8001950:	2014      	movs	r0, #20
 8001952:	f7ff ffaf 	bl	80018b4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001956:	2100      	movs	r1, #0
 8001958:	207f      	movs	r0, #127	; 0x7f
 800195a:	f7ff ffab 	bl	80018b4 <write_byte>
	}
	return ret;
 800195e:	88fb      	ldrh	r3, [r7, #6]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <read_gyro_data>:

void read_gyro_data() {
 8001968:	b598      	push	{r3, r4, r7, lr}
 800196a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800196c:	2033      	movs	r0, #51	; 0x33
 800196e:	f7ff ff73 	bl	8001858 <read_byte>
 8001972:	4603      	mov	r3, r0
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b21c      	sxth	r4, r3
 8001978:	2034      	movs	r0, #52	; 0x34
 800197a:	f7ff ff6d 	bl	8001858 <read_byte>
 800197e:	4603      	mov	r3, r0
 8001980:	b21b      	sxth	r3, r3
 8001982:	4323      	orrs	r3, r4
 8001984:	b21a      	sxth	r2, r3
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <read_gyro_data+0x64>)
 8001988:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800198a:	2035      	movs	r0, #53	; 0x35
 800198c:	f7ff ff64 	bl	8001858 <read_byte>
 8001990:	4603      	mov	r3, r0
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21c      	sxth	r4, r3
 8001996:	2036      	movs	r0, #54	; 0x36
 8001998:	f7ff ff5e 	bl	8001858 <read_byte>
 800199c:	4603      	mov	r3, r0
 800199e:	b21b      	sxth	r3, r3
 80019a0:	4323      	orrs	r3, r4
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <read_gyro_data+0x68>)
 80019a6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019a8:	2037      	movs	r0, #55	; 0x37
 80019aa:	f7ff ff55 	bl	8001858 <read_byte>
 80019ae:	4603      	mov	r3, r0
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21c      	sxth	r4, r3
 80019b4:	2038      	movs	r0, #56	; 0x38
 80019b6:	f7ff ff4f 	bl	8001858 <read_byte>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4323      	orrs	r3, r4
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <read_gyro_data+0x6c>)
 80019c4:	801a      	strh	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	bd98      	pop	{r3, r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20039634 	.word	0x20039634
 80019d0:	20039632 	.word	0x20039632
 80019d4:	2003962c 	.word	0x2003962c

080019d8 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	801a      	strh	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	805a      	strh	r2, [r3, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	809a      	strh	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	80da      	strh	r2, [r3, #6]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	811a      	strh	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	815a      	strh	r2, [r3, #10]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
{

}
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a24:	f7ff ff74 	bl	8001910 <IMU_init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480e      	ldr	r0, [pc, #56]	; (8001a6c <_ZN3IMU4initEv+0x50>)
 8001a32:	f011 fcf7 	bl	8013424 <iprintf>

	lcd_clear();
 8001a36:	f7ff fb33 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fb3f 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <_ZN3IMU4initEv+0x54>)
 8001a44:	f7ff fb66 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fb38 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <_ZN3IMU4initEv+0x58>)
 8001a56:	f7ff fb5d 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5e:	f005 f901 	bl	8006c64 <HAL_Delay>

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08017574 	.word	0x08017574
 8001a70:	08017584 	.word	0x08017584
 8001a74:	08017590 	.word	0x08017590

08001a78 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a80:	f7ff ff72 	bl	8001968 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <_ZN3IMU12updateValuesEv+0xa4>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd53 	bl	8000554 <__aeabi_i2d>
 8001aae:	a316      	add	r3, pc, #88	; (adr r3, 8001b08 <_ZN3IMU12updateValuesEv+0x90>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fdb8 	bl	8000628 <__aeabi_dmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4625      	mov	r5, r4
 8001abe:	461c      	mov	r4, r3
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <_ZN3IMU12updateValuesEv+0xac>)
 8001ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd44 	bl	8000554 <__aeabi_i2d>
 8001acc:	a310      	add	r3, pc, #64	; (adr r3, 8001b10 <_ZN3IMU12updateValuesEv+0x98>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fda9 	bl	8000628 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbed 	bl	80002bc <__adddf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4621      	mov	r1, r4
 8001aea:	f7ff f84d 	bl	8000b88 <__aeabi_d2iz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <_ZN3IMU12updateValuesEv+0xac>)
 8001afe:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdb0      	pop	{r4, r5, r7, pc}
 8001b08:	eb851eb8 	.word	0xeb851eb8
 8001b0c:	3f9eb851 	.word	0x3f9eb851
 8001b10:	70a3d70a 	.word	0x70a3d70a
 8001b14:	3fef0a3d 	.word	0x3fef0a3d
 8001b18:	20039634 	.word	0x20039634
 8001b1c:	20039632 	.word	0x20039632
 8001b20:	2003962c 	.word	0x2003962c
 8001b24:	20000210 	.word	0x20000210

08001b28 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7fe fd13 	bl	8000578 <__aeabi_f2d>
 8001b52:	a316      	add	r3, pc, #88	; (adr r3, 8001bac <_ZN3IMU8getOmegaEv+0x84>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fe90 	bl	800087c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4614      	mov	r4, r2
 8001b62:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b66:	a313      	add	r3, pc, #76	; (adr r3, 8001bb4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fd5a 	bl	8000628 <__aeabi_dmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	460c      	mov	r4, r1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <_ZN3IMU8getOmegaEv+0x80>)
 8001b82:	f7fe fe7b 	bl	800087c <__aeabi_ddiv>
 8001b86:	4603      	mov	r3, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	f7ff f843 	bl	8000c18 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	ee07 3a90 	vmov	s15, r3
}
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	40668000 	.word	0x40668000
 8001bac:	66666666 	.word	0x66666666
 8001bb0:	40306666 	.word	0x40306666
 8001bb4:	54411744 	.word	0x54411744
 8001bb8:	400921fb 	.word	0x400921fb

08001bbc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbe:	b08b      	sub	sp, #44	; 0x2c
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bc4:	466b      	mov	r3, sp
 8001bc6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bcc:	f005 f84a 	bl	8006c64 <HAL_Delay>
	int16_t num = 2000;
 8001bd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bd4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bda:	1e5d      	subs	r5, r3, #1
 8001bdc:	61bd      	str	r5, [r7, #24]
 8001bde:	462b      	mov	r3, r5
 8001be0:	3301      	adds	r3, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	0154      	lsls	r4, r2, #5
 8001bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf6:	014b      	lsls	r3, r1, #5
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	f04f 0400 	mov.w	r4, #0
 8001c0a:	0154      	lsls	r4, r2, #5
 8001c0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c10:	014b      	lsls	r3, r1, #5
 8001c12:	462b      	mov	r3, r5
 8001c14:	3301      	adds	r3, #1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3303      	adds	r3, #3
 8001c1a:	3307      	adds	r3, #7
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	ebad 0d03 	sub.w	sp, sp, r3
 8001c24:	466b      	mov	r3, sp
 8001c26:	3303      	adds	r3, #3
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c2e:	2300      	movs	r3, #0
 8001c30:	83fb      	strh	r3, [r7, #30]
 8001c32:	8bfa      	ldrh	r2, [r7, #30]
 8001c34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	da13      	bge.n	8001c64 <_ZN3IMU11calibrationEv+0xa8>
		zg_vals[i] = float(zg_);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c42:	8bfb      	ldrh	r3, [r7, #30]
 8001c44:	ee07 2a90 	vmov	s15, r2
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c56:	2002      	movs	r0, #2
 8001c58:	f005 f804 	bl	8006c64 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c5c:	8bfb      	ldrh	r3, [r7, #30]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	83fb      	strh	r3, [r7, #30]
 8001c62:	e7e6      	b.n	8001c32 <_ZN3IMU11calibrationEv+0x76>
	for(const auto &v : zg_vals){
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d00e      	beq.n	8001c9a <_ZN3IMU11calibrationEv+0xde>
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	3304      	adds	r3, #4
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e7ec      	b.n	8001c74 <_ZN3IMU11calibrationEv+0xb8>
	offset_ = sum / num;
 8001c9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001cb4:	46b5      	mov	sp, r6
}
 8001cb6:	bf00      	nop
 8001cb8:	372c      	adds	r7, #44	; 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cbe <_ZN3IMU12getOffsetValEv>:

float IMU::getOffsetVal()
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return offset_;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	ee07 3a90 	vmov	s15, r3
}
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	1dfa      	adds	r2, r7, #7
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <INA260_read+0x50>)
 8001cfa:	f006 fbb3 	bl	8008464 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cfe:	79bb      	ldrb	r3, [r7, #6]
 8001d00:	b299      	uxth	r1, r3
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	2364      	movs	r3, #100	; 0x64
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	4807      	ldr	r0, [pc, #28]	; (8001d2c <INA260_read+0x50>)
 8001d0e:	f006 fca7 	bl	8008660 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d12:	7b3b      	ldrb	r3, [r7, #12]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	7b7b      	ldrb	r3, [r7, #13]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d22:	89fb      	ldrh	r3, [r7, #14]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2003984c 	.word	0x2003984c

08001d30 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	4604      	mov	r4, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	4603      	mov	r3, r0
 8001d44:	71bb      	strb	r3, [r7, #6]
 8001d46:	460b      	mov	r3, r1
 8001d48:	717b      	strb	r3, [r7, #5]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	733b      	strb	r3, [r7, #12]
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	737b      	strb	r3, [r7, #13]
 8001d56:	797b      	ldrb	r3, [r7, #5]
 8001d58:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d5a:	793b      	ldrb	r3, [r7, #4]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2303      	movs	r3, #3
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <INA260_write+0x48>)
 8001d6a:	f006 fb7b 	bl	8008464 <HAL_I2C_Master_Transmit>
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2003984c 	.word	0x2003984c

08001d7c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	460b      	mov	r3, r1
 8001d88:	71bb      	strb	r3, [r7, #6]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	79ba      	ldrb	r2, [r7, #6]
 8001d92:	79f9      	ldrb	r1, [r7, #7]
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ffcb 	bl	8001d30 <INA260_write>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	461a      	mov	r2, r3
 8001db0:	21df      	movs	r1, #223	; 0xdf
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff ffe2 	bl	8001d7c <setConfig>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
{

}
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de8:	482a      	ldr	r0, [pc, #168]	; (8001e94 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dea:	f006 f9b9 	bl	8008160 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <_ZN8JoyStick8getValueEv+0x2e>
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e06:	2101      	movs	r1, #1
 8001e08:	4823      	ldr	r0, [pc, #140]	; (8001e98 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e0a:	f006 f9a9 	bl	8008160 <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <_ZN8JoyStick8getValueEv+0x4e>
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2a:	481a      	ldr	r0, [pc, #104]	; (8001e94 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e2c:	f006 f998 	bl	8008160 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <_ZN8JoyStick8getValueEv+0x70>
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e48:	2104      	movs	r1, #4
 8001e4a:	4814      	ldr	r0, [pc, #80]	; (8001e9c <_ZN8JoyStick8getValueEv+0xc4>)
 8001e4c:	f006 f988 	bl	8008160 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <_ZN8JoyStick8getValueEv+0x90>
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e6c:	f006 f978 	bl	8008160 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <_ZN8JoyStick8getValueEv+0xb0>
 8001e80:	89fb      	ldrh	r3, [r7, #14]
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e88:	89fb      	ldrh	r3, [r7, #14]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b52      	cmp	r3, #82	; 0x52
 8001eb0:	d112      	bne.n	8001ed8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4856      	ldr	r0, [pc, #344]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 f969 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec4:	4853      	ldr	r0, [pc, #332]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 f963 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	4850      	ldr	r0, [pc, #320]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f006 f95d 	bl	8008190 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001ed6:	e098      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b47      	cmp	r3, #71	; 0x47
 8001edc:	d112      	bne.n	8001f04 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	484b      	ldr	r0, [pc, #300]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 f953 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	4848      	ldr	r0, [pc, #288]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 f94d 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efc:	4845      	ldr	r0, [pc, #276]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f006 f947 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001f02:	e082      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b42      	cmp	r3, #66	; 0x42
 8001f08:	d112      	bne.n	8001f30 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	4840      	ldr	r0, [pc, #256]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 f93d 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	483d      	ldr	r0, [pc, #244]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 f937 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	483a      	ldr	r0, [pc, #232]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f006 f931 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001f2e:	e06c      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b43      	cmp	r3, #67	; 0x43
 8001f34:	d112      	bne.n	8001f5c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3c:	4835      	ldr	r0, [pc, #212]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 f927 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f48:	4832      	ldr	r0, [pc, #200]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 f921 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	482f      	ldr	r0, [pc, #188]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f006 f91b 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001f5a:	e056      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b4d      	cmp	r3, #77	; 0x4d
 8001f60:	d112      	bne.n	8001f88 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	482a      	ldr	r0, [pc, #168]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 f911 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f74:	4827      	ldr	r0, [pc, #156]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 f90b 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f80:	4824      	ldr	r0, [pc, #144]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f006 f905 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001f86:	e040      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b59      	cmp	r3, #89	; 0x59
 8001f8c:	d112      	bne.n	8001fb4 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f94:	481f      	ldr	r0, [pc, #124]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 f8fb 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa0:	481c      	ldr	r0, [pc, #112]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 f8f5 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fac:	4819      	ldr	r0, [pc, #100]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001fae:	f006 f8ef 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001fb2:	e02a      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b57      	cmp	r3, #87	; 0x57
 8001fb8:	d112      	bne.n	8001fe0 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc0:	4814      	ldr	r0, [pc, #80]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 f8e5 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fcc:	4811      	ldr	r0, [pc, #68]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 f8df 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	480e      	ldr	r0, [pc, #56]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f006 f8d9 	bl	8008190 <HAL_GPIO_WritePin>
}
 8001fde:	e014      	b.n	800200a <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b7e      	cmp	r3, #126	; 0x7e
 8001fe4:	d111      	bne.n	800200a <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 f8cf 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 f8c9 	bl	8008190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002004:	4803      	ldr	r0, [pc, #12]	; (8002014 <_ZN3LED9fullColorEc+0x174>)
 8002006:	f006 f8c3 	bl	8008190 <HAL_GPIO_WritePin>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40020000 	.word	0x40020000

08002018 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	4613      	mov	r3, r2
 8002026:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002036:	4813      	ldr	r0, [pc, #76]	; (8002084 <_ZN3LED2LREaa+0x6c>)
 8002038:	f006 f8aa 	bl	8008190 <HAL_GPIO_WritePin>
 800203c:	e009      	b.n	8002052 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800203e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <_ZN3LED2LREaa+0x6c>)
 800204e:	f006 f89f 	bl	8008190 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002052:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d106      	bne.n	8002068 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002060:	4808      	ldr	r0, [pc, #32]	; (8002084 <_ZN3LED2LREaa+0x6c>)
 8002062:	f006 f895 	bl	8008190 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002066:	e009      	b.n	800207c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <_ZN3LED2LREaa+0x6c>)
 8002078:	f006 f88a 	bl	8008190 <HAL_GPIO_WritePin>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40020000 	.word	0x40020000

08002088 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002088:	b580      	push	{r7, lr}
 800208a:	b092      	sub	sp, #72	; 0x48
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fe92 	bl	8001dc0 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	647b      	str	r3, [r7, #68]	; 0x44
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	331c      	adds	r3, #28
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
 80020aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d008      	beq.n	80020c4 <_ZN10LineSensorC1Ev+0x3c>
 80020b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	2200      	movs	r2, #0
 80020ba:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020be:	3302      	adds	r3, #2
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
 80020c2:	e7f2      	b.n	80020aa <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	643b      	str	r3, [r7, #64]	; 0x40
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	3338      	adds	r3, #56	; 0x38
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	429a      	cmp	r2, r3
 80020dc:	d009      	beq.n	80020f2 <_ZN10LineSensorC1Ev+0x6a>
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	623b      	str	r3, [r7, #32]
		s = 0;
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ec:	3304      	adds	r3, #4
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
 80020f0:	e7f1      	b.n	80020d6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3338      	adds	r3, #56	; 0x38
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	429a      	cmp	r2, r3
 800210a:	d009      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x98>
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	617b      	str	r3, [r7, #20]
		m = 0;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211a:	3304      	adds	r3, #4
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211e:	e7f1      	b.n	8002104 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0xc6>
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	60bb      	str	r3, [r7, #8]
		s = 1;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	3304      	adds	r3, #4
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	3748      	adds	r7, #72	; 0x48
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	220e      	movs	r2, #14
 8002164:	4619      	mov	r1, r3
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002168:	f004 fde2 	bl	8006d30 <HAL_ADC_Start_DMA>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20039770 	.word	0x20039770

08002178 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b0d      	cmp	r3, #13
 8002188:	dc2f      	bgt.n	80021ea <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3392      	adds	r3, #146	; 0x92
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	33a0      	adds	r3, #160	; 0xa0
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	1a5b      	subs	r3, r3, r1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	440b      	add	r3, r1
 80021d6:	3306      	adds	r3, #6
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e7cc      	b.n	8002184 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f4:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b09      	cmp	r3, #9
 80021fc:	d902      	bls.n	8002204 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]


}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20000212 	.word	0x20000212

08002214 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002214:	b490      	push	{r4, r7}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002226:	2b0d      	cmp	r3, #13
 8002228:	f200 8087 	bhi.w	800233a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800222c:	2300      	movs	r3, #0
 800222e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002232:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002236:	2b09      	cmp	r3, #9
 8002238:	d81c      	bhi.n	8002274 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800223a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800223e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002242:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4423      	add	r3, r4
 8002252:	3306      	adds	r3, #6
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3304      	adds	r3, #4
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	008b      	lsls	r3, r1, #2
 800225e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002262:	440b      	add	r3, r1
 8002264:	3b30      	subs	r3, #48	; 0x30
 8002266:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002268:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800226c:	3301      	adds	r3, #1
 800226e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002272:	e7de      	b.n	8002232 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800227a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227e:	2b09      	cmp	r3, #9
 8002280:	d84d      	bhi.n	800231e <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002282:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002286:	3301      	adds	r3, #1
 8002288:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800228c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002290:	2b09      	cmp	r3, #9
 8002292:	d83e      	bhi.n	8002312 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002294:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800229e:	4413      	add	r3, r2
 80022a0:	3b30      	subs	r3, #48	; 0x30
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022b0:	4413      	add	r3, r2
 80022b2:	3b30      	subs	r3, #48	; 0x30
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	d521      	bpl.n	8002306 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022cc:	4413      	add	r3, r2
 80022ce:	3b30      	subs	r3, #48	; 0x30
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022d4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e2:	440a      	add	r2, r1
 80022e4:	3a30      	subs	r2, #48	; 0x30
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ee:	440b      	add	r3, r1
 80022f0:	3b30      	subs	r3, #48	; 0x30
 80022f2:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fe:	4413      	add	r3, r2
 8002300:	3b30      	subs	r3, #48	; 0x30
 8002302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002304:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002306:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800230a:	3301      	adds	r3, #1
 800230c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002310:	e7bc      	b.n	800228c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002312:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002316:	3301      	adds	r3, #1
 8002318:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800231c:	e7ad      	b.n	800227a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 800231e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	33b0      	adds	r3, #176	; 0xb0
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800232e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002332:	3301      	adds	r3, #1
 8002334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002338:	e773      	b.n	8002222 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800233a:	bf00      	nop
 800233c:	3738      	adds	r7, #56	; 0x38
 800233e:	46bd      	mov	sp, r7
 8002340:	bc90      	pop	{r4, r7}
 8002342:	4770      	bx	lr

08002344 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	3338      	adds	r3, #56	; 0x38
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	429a      	cmp	r2, r3
 8002368:	d012      	beq.n	8002390 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80023b0 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	db02      	blt.n	8002388 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	3301      	adds	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3304      	adds	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e7e8      	b.n	8002362 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	2b0d      	cmp	r3, #13
 8002394:	d902      	bls.n	800239c <_ZN10LineSensor13emergencyStopEv+0x58>
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
 800239a:	e001      	b.n	80023a0 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]

	return flag;
 80023a0:	7dfb      	ldrb	r3, [r7, #23]

}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	44160000 	.word	0x44160000

080023b4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
	motor_ = motor;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	609a      	str	r2, [r3, #8]
}
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 800243a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800245e:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002472:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800247e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 800248a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002496:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80024a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80024ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80024b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b6:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	ee07 3a90 	vmov	s15, r3

}
 80024c0:	eeb0 0a67 	vmov.f32	s0, s15
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <_ZN9LineTrace23pidAngularVelocityTraceEv>:
	pre_diff = diff;

}

void LineTrace::pidAngularVelocityTrace()
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff96 	bl	800240a <_ZN9LineTrace9calcErrorEv>
 80024de:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;
	float target_omega = 0;
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]

	p = kp_velo_ * diff;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80024ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a03 	vstr	s15, [r7, #12]
	d = kd_velo_ * (diff - pre_diff) / DELTA_T;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	ed93 7a08 	vldr	s14, [r3, #32]
 8002500:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	edd7 6a05 	vldr	s13, [r7, #20]
 800250a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	ee17 0a90 	vmov	r0, s15
 8002516:	f7fe f82f 	bl	8000578 <__aeabi_f2d>
 800251a:	a329      	add	r3, pc, #164	; (adr r3, 80025c0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fe f9ac 	bl	800087c <__aeabi_ddiv>
 8002524:	4603      	mov	r3, r0
 8002526:	460c      	mov	r4, r1
 8002528:	4618      	mov	r0, r3
 800252a:	4621      	mov	r1, r4
 800252c:	f7fe fb74 	bl	8000c18 <__aeabi_d2f>
 8002530:	4603      	mov	r3, r0
 8002532:	60bb      	str	r3, [r7, #8]
	i += ki_velo_ * diff * DELTA_T;
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe f81d 	bl	8000578 <__aeabi_f2d>
 800253e:	4604      	mov	r4, r0
 8002540:	460d      	mov	r5, r1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002548:	edd7 7a05 	vldr	s15, [r7, #20]
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	ee17 0a90 	vmov	r0, s15
 8002554:	f7fe f810 	bl	8000578 <__aeabi_f2d>
 8002558:	a319      	add	r3, pc, #100	; (adr r3, 80025c0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f863 	bl	8000628 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4620      	mov	r0, r4
 8002568:	4629      	mov	r1, r5
 800256a:	f7fd fea7 	bl	80002bc <__adddf3>
 800256e:	4603      	mov	r3, r0
 8002570:	460c      	mov	r4, r1
 8002572:	4618      	mov	r0, r3
 8002574:	4621      	mov	r1, r4
 8002576:	f7fe fb4f 	bl	8000c18 <__aeabi_d2f>
 800257a:	4602      	mov	r2, r0
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 800257e:	601a      	str	r2, [r3, #0]

	target_omega = p + d + i;
 8002580:	ed97 7a03 	vldr	s14, [r7, #12]
 8002584:	edd7 7a02 	vldr	s15, [r7, #8]
 8002588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002596:	edc7 7a04 	vstr	s15, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80025a4:	edd7 0a04 	vldr	s1, [r7, #16]
 80025a8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ac:	4610      	mov	r0, r2
 80025ae:	f001 f973 	bl	8003898 <_ZN12VelocityCtrl11setVelocityEff>

	pre_diff = diff;
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	6013      	str	r3, [r2, #0]

}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bdb0      	pop	{r4, r5, r7, pc}
 80025c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80025c4:	3f50624d 	.word	0x3f50624d
 80025c8:	20000214 	.word	0x20000214
 80025cc:	20000218 	.word	0x20000218

080025d0 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	double temp_kp_v, temp_ki_v, temp_kd_v;
	sd_read_array_double("Params", "kp_v.txt", 1, &temp_kp_v);
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2201      	movs	r2, #1
 80025de:	491a      	ldr	r1, [pc, #104]	; (8002648 <_ZN9LineTrace4initEv+0x78>)
 80025e0:	481a      	ldr	r0, [pc, #104]	; (800264c <_ZN9LineTrace4initEv+0x7c>)
 80025e2:	f7ff f88d 	bl	8001700 <sd_read_array_double>
	sd_read_array_double("Params", "ki_v.txt", 1, &temp_ki_v);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2201      	movs	r2, #1
 80025ec:	4918      	ldr	r1, [pc, #96]	; (8002650 <_ZN9LineTrace4initEv+0x80>)
 80025ee:	4817      	ldr	r0, [pc, #92]	; (800264c <_ZN9LineTrace4initEv+0x7c>)
 80025f0:	f7ff f886 	bl	8001700 <sd_read_array_double>
	sd_read_array_double("Params", "kd_v.txt", 1, &temp_kd_v);
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	2201      	movs	r2, #1
 80025fa:	4916      	ldr	r1, [pc, #88]	; (8002654 <_ZN9LineTrace4initEv+0x84>)
 80025fc:	4813      	ldr	r0, [pc, #76]	; (800264c <_ZN9LineTrace4initEv+0x7c>)
 80025fe:	f7ff f87f 	bl	8001700 <sd_read_array_double>
	setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 8002602:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002606:	4618      	mov	r0, r3
 8002608:	4621      	mov	r1, r4
 800260a:	f7fe fb05 	bl	8000c18 <__aeabi_d2f>
 800260e:	4605      	mov	r5, r0
 8002610:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002614:	4618      	mov	r0, r3
 8002616:	4621      	mov	r1, r4
 8002618:	f7fe fafe 	bl	8000c18 <__aeabi_d2f>
 800261c:	4606      	mov	r6, r0
 800261e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002622:	4618      	mov	r0, r3
 8002624:	4621      	mov	r1, r4
 8002626:	f7fe faf7 	bl	8000c18 <__aeabi_d2f>
 800262a:	4603      	mov	r3, r0
 800262c:	ee01 3a10 	vmov	s2, r3
 8002630:	ee00 6a90 	vmov	s1, r6
 8002634:	ee00 5a10 	vmov	s0, r5
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f826 	bl	800268a <_ZN9LineTrace11setVeloGainEfff>

}
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002646:	bf00      	nop
 8002648:	08017594 	.word	0x08017594
 800264c:	080175a0 	.word	0x080175a0
 8002650:	080175a8 	.word	0x080175a8
 8002654:	080175b4 	.word	0x080175b4

08002658 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	ed87 0a02 	vstr	s0, [r7, #8]
 8002664:	edc7 0a01 	vstr	s1, [r7, #4]
 8002668:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
	kd_ = kd;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	615a      	str	r2, [r3, #20]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_ZN9LineTrace11setVeloGainEfff>:


void LineTrace::setVeloGain(float kp, float ki, float kd)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	ed87 0a02 	vstr	s0, [r7, #8]
 8002696:	edc7 0a01 	vstr	s1, [r7, #4]
 800269a:	ed87 1a00 	vstr	s2, [r7]
	kp_velo_ = kp;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	61da      	str	r2, [r3, #28]
	ki_velo_ = ki;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
	kd_velo_ = kd;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN9LineTrace6getKpVEv>:
{
	return kd_;
}

float LineTrace::getKpV()
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	return kp_velo_;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	ee07 3a90 	vmov	s15, r3
}
 80026cc:	eeb0 0a67 	vmov.f32	s0, s15
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_ZN9LineTrace6getKiVEv>:
float LineTrace::getKiV()
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	return ki_velo_;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	ee07 3a90 	vmov	s15, r3
}
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZN9LineTrace6getKdVEv>:
float LineTrace::getKdV()
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	return kd_velo_;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	ee07 3a90 	vmov	s15, r3
}
 8002708:	eeb0 0a67 	vmov.f32	s0, s15
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	0000      	movs	r0, r0
 8002754:	0000      	movs	r0, r0
	...

08002758 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d024      	beq.n	80027b4 <_ZN9LineTrace4flipEv+0x5c>
		//pidTrace();
		pidAngularVelocityTrace();
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff feb0 	bl	80024d0 <_ZN9LineTrace23pidAngularVelocityTraceEv>
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fde5 	bl	8002344 <_ZN10LineSensor13emergencyStopEv>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d011      	beq.n	80027a4 <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80027c0 <_ZN9LineTrace4flipEv+0x68>
 8002788:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80027c0 <_ZN9LineTrace4flipEv+0x68>
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fa0b 	bl	8002ba8 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	330c      	adds	r3, #12
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fc3b 	bl	8002018 <_ZN3LED2LREaa>
			led_.LR(0, -1);

		}
	}

}
 80027a2:	e007      	b.n	80027b4 <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	330c      	adds	r3, #12
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fc32 	bl	8002018 <_ZN3LED2LREaa>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	f3af 8000 	nop.w
	...

080027c8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	0000      	movs	r0, r0
	...

080027e8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002818 <_ZN9LineTrace4stopEv+0x30>
 8002800:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002818 <_ZN9LineTrace4stopEv+0x30>
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f9cf 	bl	8002ba8 <_ZN5Motor8setRatioEdd>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
	...

08002820 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002838:	3302      	adds	r3, #2
 800283a:	2200      	movs	r2, #0
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002844:	3304      	adds	r3, #4
 8002846:	2200      	movs	r2, #0
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002850:	3306      	adds	r3, #6
 8002852:	2200      	movs	r2, #0
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002870:	f7fe ff8c 	bl	800178c <sd_mount>
 8002874:	4603      	mov	r3, r0
 8002876:	2b01      	cmp	r3, #1
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d019      	beq.n	80028b8 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002884:	481b      	ldr	r0, [pc, #108]	; (80028f4 <_ZN6Logger10sdCardInitEv+0x90>)
 8002886:	f010 fe41 	bl	801350c <puts>

	  lcd_clear();
 800288a:	f7fe fc09 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800288e:	2100      	movs	r1, #0
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe fc15 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002896:	4818      	ldr	r0, [pc, #96]	; (80028f8 <_ZN6Logger10sdCardInitEv+0x94>)
 8002898:	f7fe fc3c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800289c:	2101      	movs	r1, #1
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe fc0e 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80028a4:	4815      	ldr	r0, [pc, #84]	; (80028fc <_ZN6Logger10sdCardInitEv+0x98>)
 80028a6:	f7fe fc35 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80028aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ae:	f004 f9d9 	bl	8006c64 <HAL_Delay>

	  ret = true;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e018      	b.n	80028ea <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <_ZN6Logger10sdCardInitEv+0x9c>)
 80028ba:	f010 fe27 	bl	801350c <puts>

	  lcd_clear();
 80028be:	f7fe fbef 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80028c2:	2100      	movs	r1, #0
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fbfb 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80028ca:	480b      	ldr	r0, [pc, #44]	; (80028f8 <_ZN6Logger10sdCardInitEv+0x94>)
 80028cc:	f7fe fc22 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80028d0:	2101      	movs	r1, #1
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe fbf4 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80028d8:	480a      	ldr	r0, [pc, #40]	; (8002904 <_ZN6Logger10sdCardInitEv+0xa0>)
 80028da:	f7fe fc1b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80028de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e2:	f004 f9bf 	bl	8006c64 <HAL_Delay>

	  ret = false;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	080175c0 	.word	0x080175c0
 80028f8:	080175d0 	.word	0x080175d0
 80028fc:	080175dc 	.word	0x080175dc
 8002900:	080175e4 	.word	0x080175e4
 8002904:	080175f4 	.word	0x080175f4

08002908 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d024      	beq.n	800296a <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002926:	3302      	adds	r3, #2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800293a:	3302      	adds	r3, #2
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002948:	3302      	adds	r3, #2
 800294a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002952:	3302      	adds	r3, #2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f242 720f 	movw	r2, #9999	; 0x270f
 800295a:	4293      	cmp	r3, r2
 800295c:	d905      	bls.n	800296a <_ZN6Logger8storeLogEf+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002964:	3302      	adds	r3, #2
 8002966:	2200      	movs	r2, #0
 8002968:	801a      	strh	r2, [r3, #0]
	}
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d027      	beq.n	80029de <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002994:	3304      	adds	r3, #4
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800299e:	3310      	adds	r3, #16
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80029ae:	3304      	adds	r3, #4
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80029bc:	3304      	adds	r3, #4
 80029be:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80029c6:	3304      	adds	r3, #4
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d905      	bls.n	80029de <_ZN6Logger9storeLog2Ef+0x68>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80029d8:	3304      	adds	r3, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
	}
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68b8      	ldr	r0, [r7, #8]
 8002a06:	f7fe fdb3 	bl	8001570 <sd_write_array_float>
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8002a24:	3340      	adds	r3, #64	; 0x40
 8002a26:	2200      	movs	r2, #0
 8002a28:	9200      	str	r2, [sp, #0]
 8002a2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f7fe fd9d 	bl	8001570 <sd_write_array_float>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002a52:	3380      	adds	r3, #128	; 0x80
 8002a54:	2200      	movs	r2, #0
 8002a56:	9200      	str	r2, [sp, #0]
 8002a58:	f241 7270 	movw	r2, #6000	; 0x1770
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68b8      	ldr	r0, [r7, #8]
 8002a60:	f7fe fd86 	bl	8001570 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 8002a6a:	3340      	adds	r3, #64	; 0x40
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	f241 7270 	movw	r2, #6000	; 0x1770
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	f7fe fd7a 	bl	8001570 <sd_write_array_float>
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	805a      	strh	r2, [r3, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002aec:	2108      	movs	r1, #8
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <_ZN5Motor4initEv+0x20>)
 8002af0:	f009 fa80 	bl	800bff4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002af4:	210c      	movs	r1, #12
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <_ZN5Motor4initEv+0x20>)
 8002af8:	f009 fa7c 	bl	800bff4 <HAL_TIM_PWM_Start>

}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20039730 	.word	0x20039730

08002b08 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da0d      	bge.n	8002b36 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b20:	481f      	ldr	r0, [pc, #124]	; (8002ba0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002b22:	f005 fb35 	bl	8008190 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	425b      	negs	r3, r3
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	81fb      	strh	r3, [r7, #14]
 8002b34:	e00a      	b.n	8002b4c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b3c:	4818      	ldr	r0, [pc, #96]	; (8002ba0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002b3e:	f005 fb27 	bl	8008190 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da0d      	bge.n	8002b72 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002b56:	2201      	movs	r2, #1
 8002b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b5c:	4810      	ldr	r0, [pc, #64]	; (8002ba0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002b5e:	f005 fb17 	bl	8008190 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	81bb      	strh	r3, [r7, #12]
 8002b70:	e00a      	b.n	8002b88 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b78:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002b7a:	f005 fb09 	bl	8008190 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002b88:	89fa      	ldrh	r2, [r7, #14]
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002b90:	89ba      	ldrh	r2, [r7, #12]
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	20039730 	.word	0x20039730

08002ba8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6178      	str	r0, [r7, #20]
 8002bb0:	ed87 0b02 	vstr	d0, [r7, #8]
 8002bb4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <_ZN5Motor8setRatioEdd+0xd8>)
 8002bbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bc2:	f7fd ffc1 	bl	8000b48 <__aeabi_dcmpgt>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <_ZN5Motor8setRatioEdd+0x30>
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	4c2b      	ldr	r4, [pc, #172]	; (8002c80 <_ZN5Motor8setRatioEdd+0xd8>)
 8002bd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002bd6:	e00e      	b.n	8002bf6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <_ZN5Motor8setRatioEdd+0xdc>)
 8002bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be2:	f7fd ff93 	bl	8000b0c <__aeabi_dcmplt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <_ZN5Motor8setRatioEdd+0x4e>
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	4c24      	ldr	r4, [pc, #144]	; (8002c84 <_ZN5Motor8setRatioEdd+0xdc>)
 8002bf2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <_ZN5Motor8setRatioEdd+0xd8>)
 8002bfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c00:	f7fd ffa2 	bl	8000b48 <__aeabi_dcmpgt>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <_ZN5Motor8setRatioEdd+0x6e>
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	4c1c      	ldr	r4, [pc, #112]	; (8002c80 <_ZN5Motor8setRatioEdd+0xd8>)
 8002c10:	e9c7 3400 	strd	r3, r4, [r7]
 8002c14:	e00e      	b.n	8002c34 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <_ZN5Motor8setRatioEdd+0xdc>)
 8002c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c20:	f7fd ff74 	bl	8000b0c <__aeabi_dcmplt>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <_ZN5Motor8setRatioEdd+0x8c>
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	4c15      	ldr	r4, [pc, #84]	; (8002c84 <_ZN5Motor8setRatioEdd+0xdc>)
 8002c30:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_ZN5Motor8setRatioEdd+0xe0>)
 8002c3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c3e:	f7fd fcf3 	bl	8000628 <__aeabi_dmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	4618      	mov	r0, r3
 8002c48:	4621      	mov	r1, r4
 8002c4a:	f7fd ff9d 	bl	8000b88 <__aeabi_d2iz>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	b21a      	sxth	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <_ZN5Motor8setRatioEdd+0xe0>)
 8002c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c60:	f7fd fce2 	bl	8000628 <__aeabi_dmul>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f7fd ff8c 	bl	8000b88 <__aeabi_d2iz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	805a      	strh	r2, [r3, #2]

}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	3ff00000 	.word	0x3ff00000
 8002c84:	bff00000 	.word	0xbff00000
 8002c88:	409c2000 	.word	0x409c2000

08002c8c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002c8c:	b490      	push	{r4, r7}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	f04f 0400 	mov.w	r4, #0
 8002cc0:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc90      	pop	{r4, r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	0000      	movs	r0, r0
 8002ce4:	0000      	movs	r0, r0
	...

08002ce8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe ff16 	bl	8001b28 <_ZN3IMU8getOmegaEv>
 8002cfc:	ee10 3a10 	vmov	r3, s0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc39 	bl	8000578 <__aeabi_f2d>
 8002d06:	4603      	mov	r3, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fb62 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8002d18:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002d1c:	a357      	add	r3, pc, #348	; (adr r3, 8002e7c <_ZN8Odometry12calcPotitionEv+0x194>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d26:	f7fd fc7f 	bl	8000628 <__aeabi_dmul>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7fd fc1c 	bl	8000578 <__aeabi_f2d>
 8002d40:	4682      	mov	sl, r0
 8002d42:	468b      	mov	fp, r1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d58:	f7fd fd90 	bl	800087c <__aeabi_ddiv>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4640      	mov	r0, r8
 8002d62:	4649      	mov	r1, r9
 8002d64:	f7fd faaa 	bl	80002bc <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	ec43 2b17 	vmov	d7, r2, r3
 8002d70:	eeb0 0a47 	vmov.f32	s0, s14
 8002d74:	eef0 0a67 	vmov.f32	s1, s15
 8002d78:	f00e fc82 	bl	8011680 <cos>
 8002d7c:	ec53 2b10 	vmov	r2, r3, d0
 8002d80:	4650      	mov	r0, sl
 8002d82:	4659      	mov	r1, fp
 8002d84:	f7fd fc50 	bl	8000628 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fa94 	bl	80002bc <__adddf3>
 8002d94:	4603      	mov	r3, r0
 8002d96:	460c      	mov	r4, r1
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fd fbe7 	bl	8000578 <__aeabi_f2d>
 8002daa:	4682      	mov	sl, r0
 8002dac:	468b      	mov	fp, r1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc2:	f7fd fd5b 	bl	800087c <__aeabi_ddiv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4640      	mov	r0, r8
 8002dcc:	4649      	mov	r1, r9
 8002dce:	f7fd fa75 	bl	80002bc <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	ec43 2b17 	vmov	d7, r2, r3
 8002dda:	eeb0 0a47 	vmov.f32	s0, s14
 8002dde:	eef0 0a67 	vmov.f32	s1, s15
 8002de2:	f00e fc91 	bl	8011708 <sin>
 8002de6:	ec53 2b10 	vmov	r2, r3, d0
 8002dea:	4650      	mov	r0, sl
 8002dec:	4659      	mov	r1, fp
 8002dee:	f7fd fc1b 	bl	8000628 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7fd fa5f 	bl	80002bc <__adddf3>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460c      	mov	r4, r1
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002e14:	461a      	mov	r2, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	f7fd fa50 	bl	80002bc <__adddf3>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	4621      	mov	r1, r4
 8002e30:	f7fd fef2 	bl	8000c18 <__aeabi_d2f>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002e38:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002e40:	4618      	mov	r0, r3
 8002e42:	4621      	mov	r1, r4
 8002e44:	f7fd fee8 	bl	8000c18 <__aeabi_d2f>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002e4c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002e54:	4618      	mov	r0, r3
 8002e56:	4621      	mov	r1, r4
 8002e58:	f7fd fede 	bl	8000c18 <__aeabi_d2f>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002e60:	601a      	str	r2, [r3, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6c:	f3af 8000 	nop.w
 8002e70:	2000021c 	.word	0x2000021c
 8002e74:	20000220 	.word	0x20000220
 8002e78:	20000224 	.word	0x20000224
 8002e7c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e80:	3f50624d 	.word	0x3f50624d

08002e84 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff2b 	bl	8002ce8 <_ZN8Odometry12calcPotitionEv>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002e9a:	b490      	push	{r4, r7}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	f04f 0400 	mov.w	r4, #0
 8002eac:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	f04f 0400 	mov.w	r4, #0
 8002eba:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	f04f 0400 	mov.w	r4, #0
 8002ec8:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc90      	pop	{r4, r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002ed8:	b490      	push	{r4, r7}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f04f 0400 	mov.w	r4, #0
 8002efe:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002f16:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002f1e:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <_ZN13PathFollowingC1Ev+0xec>)
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	f04f 0400 	mov.w	r4, #0
 8002f28:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002f2c:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <_ZN13PathFollowingC1Ev+0xec>)
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f04f 0400 	mov.w	r4, #0
 8002f36:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <_ZN13PathFollowingC1Ev+0xec>)
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f04f 0400 	mov.w	r4, #0
 8002f44:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	f04f 0400 	mov.w	r4, #0
 8002f52:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002f72:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f04f 0400 	mov.w	r4, #0
 8002f7c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002f80:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	f04f 0400 	mov.w	r4, #0
 8002f8a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002f8e:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f04f 0400 	mov.w	r4, #0
 8002f98:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002f9c:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <_ZN13PathFollowingC1Ev+0xf4>)
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <_ZN13PathFollowingC1Ev+0xf4>)
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f04f 0400 	mov.w	r4, #0
 8002fb4:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc90      	pop	{r4, r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	20039c30 	.word	0x20039c30
 8002fc8:	20039bc0 	.word	0x20039bc0
 8002fcc:	20039c20 	.word	0x20039c20

08002fd0 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8002fd8:	f001 fcd0 	bl	800497c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 8002fdc:	f107 0318 	add.w	r3, r7, #24
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4915      	ldr	r1, [pc, #84]	; (8003038 <_ZN13PathFollowing4initEv+0x68>)
 8002fe4:	4815      	ldr	r0, [pc, #84]	; (800303c <_ZN13PathFollowing4initEv+0x6c>)
 8002fe6:	f7fe fb8b 	bl	8001700 <sd_read_array_double>
	sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4913      	ldr	r1, [pc, #76]	; (8003040 <_ZN13PathFollowing4initEv+0x70>)
 8002ff2:	4812      	ldr	r0, [pc, #72]	; (800303c <_ZN13PathFollowing4initEv+0x6c>)
 8002ff4:	f7fe fb84 	bl	8001700 <sd_read_array_double>
	sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 8002ff8:	f107 0308 	add.w	r3, r7, #8
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4911      	ldr	r1, [pc, #68]	; (8003044 <_ZN13PathFollowing4initEv+0x74>)
 8003000:	480e      	ldr	r0, [pc, #56]	; (800303c <_ZN13PathFollowing4initEv+0x6c>)
 8003002:	f7fe fb7d 	bl	8001700 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003006:	ed97 7b06 	vldr	d7, [r7, #24]
 800300a:	ed97 6b04 	vldr	d6, [r7, #16]
 800300e:	ed97 5b02 	vldr	d5, [r7, #8]
 8003012:	eeb0 2a45 	vmov.f32	s4, s10
 8003016:	eef0 2a65 	vmov.f32	s5, s11
 800301a:	eeb0 1a46 	vmov.f32	s2, s12
 800301e:	eef0 1a66 	vmov.f32	s3, s13
 8003022:	eeb0 0a47 	vmov.f32	s0, s14
 8003026:	eef0 0a67 	vmov.f32	s1, s15
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f80c 	bl	8003048 <_ZN13PathFollowing7setGainEddd>
}
 8003030:	bf00      	nop
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	080175fc 	.word	0x080175fc
 800303c:	08017604 	.word	0x08017604
 8003040:	0801760c 	.word	0x0801760c
 8003044:	08017614 	.word	0x08017614

08003048 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003048:	b490      	push	{r4, r7}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	61f8      	str	r0, [r7, #28]
 8003050:	ed87 0b04 	vstr	d0, [r7, #16]
 8003054:	ed87 1b02 	vstr	d1, [r7, #8]
 8003058:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 800305c:	4a09      	ldr	r2, [pc, #36]	; (8003084 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800305e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003062:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003068:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800306c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003072:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003076:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800307a:	bf00      	nop
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bc90      	pop	{r4, r7}
 8003082:	4770      	bx	lr
 8003084:	20039c30 	.word	0x20039c30

08003088 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003088:	b490      	push	{r4, r7}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <_ZN13PathFollowing8getKxValEv+0x24>)
 8003092:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003096:	ec44 3b17 	vmov	d7, r3, r4
}
 800309a:	eeb0 0a47 	vmov.f32	s0, s14
 800309e:	eef0 0a67 	vmov.f32	s1, s15
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc90      	pop	{r4, r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20039c30 	.word	0x20039c30

080030b0 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 80030b0:	b490      	push	{r4, r7}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <_ZN13PathFollowing8getKyValEv+0x24>)
 80030ba:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80030be:	ec44 3b17 	vmov	d7, r3, r4
}
 80030c2:	eeb0 0a47 	vmov.f32	s0, s14
 80030c6:	eef0 0a67 	vmov.f32	s1, s15
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc90      	pop	{r4, r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20039c30 	.word	0x20039c30

080030d8 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 80030d8:	b490      	push	{r4, r7}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <_ZN13PathFollowing8getKtValEv+0x24>)
 80030e2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80030e6:	ec44 3b17 	vmov	d7, r3, r4
}
 80030ea:	eeb0 0a47 	vmov.f32	s0, s14
 80030ee:	eef0 0a67 	vmov.f32	s1, s15
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc90      	pop	{r4, r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20039c30 	.word	0x20039c30

08003100 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003108:	2088      	movs	r0, #136	; 0x88
 800310a:	f7fe fe4a 	bl	8001da2 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800310e:	2080      	movs	r0, #128	; 0x80
 8003110:	f7fe fe47 	bl	8001da2 <INA260_init>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	0000      	movs	r0, r0
	...

08003120 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003128:	2188      	movs	r1, #136	; 0x88
 800312a:	2002      	movs	r0, #2
 800312c:	f7fe fdd6 	bl	8001cdc <INA260_read>
 8003130:	4603      	mov	r3, r0
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fa0e 	bl	8000554 <__aeabi_i2d>
 8003138:	a30c      	add	r3, pc, #48	; (adr r3, 800316c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f7fd fa73 	bl	8000628 <__aeabi_dmul>
 8003142:	4603      	mov	r3, r0
 8003144:	460c      	mov	r4, r1
 8003146:	4618      	mov	r0, r3
 8003148:	4621      	mov	r1, r4
 800314a:	f7fd fd65 	bl	8000c18 <__aeabi_d2f>
 800314e:	4602      	mov	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	f3af 8000 	nop.w
 8003168:	20000228 	.word	0x20000228
 800316c:	47ae147b 	.word	0x47ae147b
 8003170:	3f547ae1 	.word	0x3f547ae1

08003174 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	ee07 3a90 	vmov	s15, r3

}
 8003184:	eeb0 0a67 	vmov.f32	s0, s15
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	0000      	movs	r0, r0
 8003194:	0000      	movs	r0, r0
	...

08003198 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f9e5 	bl	8000578 <__aeabi_f2d>
 80031ae:	a311      	add	r3, pc, #68	; (adr r3, 80031f4 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd fcaa 	bl	8000b0c <__aeabi_dcmplt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <_ZN11PowerSensor12butteryCheckEv+0x34>
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	e002      	b.n	80031d2 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2000022c 	.word	0x2000022c
 80031f4:	9999999a 	.word	0x9999999a
 80031f8:	401d9999 	.word	0x401d9999

080031fc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003208:	2102      	movs	r1, #2
 800320a:	4822      	ldr	r0, [pc, #136]	; (8003294 <_ZN12RotarySwitch8getValueEv+0x98>)
 800320c:	f004 ffa8 	bl	8008160 <HAL_GPIO_ReadPin>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf0c      	ite	eq
 8003216:	2301      	moveq	r3, #1
 8003218:	2300      	movne	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003228:	2108      	movs	r1, #8
 800322a:	481a      	ldr	r0, [pc, #104]	; (8003294 <_ZN12RotarySwitch8getValueEv+0x98>)
 800322c:	f004 ff98 	bl	8008160 <HAL_GPIO_ReadPin>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003248:	2110      	movs	r1, #16
 800324a:	4812      	ldr	r0, [pc, #72]	; (8003294 <_ZN12RotarySwitch8getValueEv+0x98>)
 800324c:	f004 ff88 	bl	8008160 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	480a      	ldr	r0, [pc, #40]	; (8003294 <_ZN12RotarySwitch8getValueEv+0x98>)
 800326c:	f004 ff78 	bl	8008160 <HAL_GPIO_ReadPin>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003288:	89fb      	ldrh	r3, [r7, #14]

}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40020c00 	.word	0x40020c00

08003298 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
{

}
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d111      	bne.n	80032e6 <_ZN10SideSensor12updateStatusEt+0x36>
 80032c2:	4b28      	ldr	r3, [pc, #160]	; (8003364 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	f083 0301 	eor.w	r3, r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e010      	b.n	8003308 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d10d      	bne.n	8003308 <_ZN10SideSensor12updateStatusEt+0x58>
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f083 0301 	eor.w	r3, r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8003302:	4b18      	ldr	r3, [pc, #96]	; (8003364 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330e:	d111      	bne.n	8003334 <_ZN10SideSensor12updateStatusEt+0x84>
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8003332:	e011      	b.n	8003358 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333a:	d10d      	bne.n	8003358 <_ZN10SideSensor12updateStatusEt+0xa8>
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	f083 0302 	eor.w	r3, r3, #2
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	2000022e 	.word	0x2000022e
 8003368:	2000022f 	.word	0x2000022f

0800336c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x4c>)
 800337c:	3308      	adds	r3, #8
 800337e:	4611      	mov	r1, r2
 8003380:	22c8      	movs	r2, #200	; 0xc8
 8003382:	4618      	mov	r0, r3
 8003384:	f00f f9fc 	bl	8012780 <memcpy>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
{
	logger_ = logger;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	08017638 	.word	0x08017638

080033bc <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	ed97 0a00 	vldr	s0, [r7]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fa94 	bl	8002908 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7ff fac1 	bl	8002976 <_ZN6Logger9storeLog2Ef>
	}

}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff faec 	bl	80029ea <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a06      	ldr	r2, [pc, #24]	; (8003430 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003418:	4904      	ldr	r1, [pc, #16]	; (800342c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff faf9 	bl	8002a12 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08017700 	.word	0x08017700
 800342c:	0801770c 	.word	0x0801770c
 8003430:	08017718 	.word	0x08017718

08003434 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003442:	2b00      	cmp	r3, #0
 8003444:	d042      	beq.n	80034cc <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3204      	adds	r2, #4
 8003458:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		msigArrayIdx_++;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8003474:	3301      	adds	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		mon_msig = inputVal_;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003484:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8003486:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800348e:	2b63      	cmp	r3, #99	; 0x63
 8003490:	d903      	bls.n	800349a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2264      	movs	r2, #100	; 0x64
 8003496:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

		motor_->setRatio(inputVal_, inputVal_);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685c      	ldr	r4, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd f867 	bl	8000578 <__aeabi_f2d>
 80034aa:	4605      	mov	r5, r0
 80034ac:	460e      	mov	r6, r1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd f85f 	bl	8000578 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ec43 2b11 	vmov	d1, r2, r3
 80034c2:	ec46 5b10 	vmov	d0, r5, r6
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff fb6e 	bl	8002ba8 <_ZN5Motor8setRatioEdd>

	}

}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d4:	20000230 	.word	0x20000230

080034d8 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fabd 	bl	8002a84 <_ZN6Logger5startEv>
	processing_flag_ = true;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	0000      	movs	r0, r0
 800351c:	0000      	movs	r0, r0
	...

08003520 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fab8 	bl	8002aa2 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	msigArrayIdx_ = 0;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
	motor_->setRatio(0, 0);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003560 <_ZN20SystemIdentification4stopEv+0x40>
 800354a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003560 <_ZN20SystemIdentification4stopEv+0x40>
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fb2a 	bl	8002ba8 <_ZN5Motor8setRatioEdd>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	f3af 8000 	nop.w
	...

08003568 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	621a      	str	r2, [r3, #32]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	635a      	str	r2, [r3, #52]	; 0x34

}
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f107 020c 	add.w	r2, r7, #12
 8003600:	f107 0110 	add.w	r1, r7, #16
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fed5 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800360a:	ed97 7a04 	vldr	s14, [r7, #16]
 800360e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003616:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800361a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800361e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7fc ffa8 	bl	8000578 <__aeabi_f2d>
 8003628:	a30b      	add	r3, pc, #44	; (adr r3, 8003658 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fc fffb 	bl	8000628 <__aeabi_dmul>
 8003632:	4603      	mov	r3, r0
 8003634:	460c      	mov	r4, r1
 8003636:	4618      	mov	r0, r3
 8003638:	4621      	mov	r1, r4
 800363a:	f7fd faed 	bl	8000c18 <__aeabi_d2f>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	ee07 3a90 	vmov	s15, r3
}
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	bf00      	nop
 8003658:	1ab1d998 	.word	0x1ab1d998
 800365c:	3f7830b5 	.word	0x3f7830b5

08003660 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	ed2d 8b02 	vpush	{d8}
 8003666:	b08d      	sub	sp, #52	; 0x34
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	ed93 7a00 	vldr	s14, [r3]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	edd3 7a02 	vldr	s15, [r3, #8]
 8003678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	ed93 8a01 	vldr	s16, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fa4c 	bl	8001b28 <_ZN3IMU8getOmegaEv>
 8003690:	eef0 7a40 	vmov.f32	s15, s0
 8003694:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003698:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	edd3 7a04 	vldr	s15, [r3, #16]
 80036a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <_ZN12VelocityCtrl3pidEv+0x228>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc ff60 	bl	8000578 <__aeabi_f2d>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	ed93 7a06 	vldr	s14, [r3, #24]
 80036c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ca:	ee17 0a90 	vmov	r0, s15
 80036ce:	f7fc ff53 	bl	8000578 <__aeabi_f2d>
 80036d2:	a36b      	add	r3, pc, #428	; (adr r3, 8003880 <_ZN12VelocityCtrl3pidEv+0x220>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fc ffa6 	bl	8000628 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc fdea 	bl	80002bc <__adddf3>
 80036e8:	4603      	mov	r3, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	4618      	mov	r0, r3
 80036ee:	4621      	mov	r1, r4
 80036f0:	f7fd fa92 	bl	8000c18 <__aeabi_d2f>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b64      	ldr	r3, [pc, #400]	; (8003888 <_ZN12VelocityCtrl3pidEv+0x228>)
 80036f8:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8003700:	4b62      	ldr	r3, [pc, #392]	; (800388c <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800370a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	ee17 0a90 	vmov	r0, s15
 8003716:	f7fc ff2f 	bl	8000578 <__aeabi_f2d>
 800371a:	a359      	add	r3, pc, #356	; (adr r3, 8003880 <_ZN12VelocityCtrl3pidEv+0x220>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f7fc ff82 	bl	8000628 <__aeabi_dmul>
 8003724:	4603      	mov	r3, r0
 8003726:	460c      	mov	r4, r1
 8003728:	4618      	mov	r0, r3
 800372a:	4621      	mov	r1, r4
 800372c:	f7fd fa74 	bl	8000c18 <__aeabi_d2f>
 8003730:	4603      	mov	r3, r0
 8003732:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	edd3 7a07 	vldr	s15, [r3, #28]
 800373a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003742:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003746:	4b52      	ldr	r3, [pc, #328]	; (8003890 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff14 	bl	8000578 <__aeabi_f2d>
 8003750:	4604      	mov	r4, r0
 8003752:	460d      	mov	r5, r1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800375a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	ee17 0a90 	vmov	r0, s15
 8003766:	f7fc ff07 	bl	8000578 <__aeabi_f2d>
 800376a:	a345      	add	r3, pc, #276	; (adr r3, 8003880 <_ZN12VelocityCtrl3pidEv+0x220>)
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc ff5a 	bl	8000628 <__aeabi_dmul>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4620      	mov	r0, r4
 800377a:	4629      	mov	r1, r5
 800377c:	f7fc fd9e 	bl	80002bc <__adddf3>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	4618      	mov	r0, r3
 8003786:	4621      	mov	r1, r4
 8003788:	f7fd fa46 	bl	8000c18 <__aeabi_d2f>
 800378c:	4602      	mov	r2, r0
 800378e:	4b40      	ldr	r3, [pc, #256]	; (8003890 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003790:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	ed93 7a08 	vldr	s14, [r3, #32]
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <_ZN12VelocityCtrl3pidEv+0x234>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80037a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	ee17 0a90 	vmov	r0, s15
 80037ae:	f7fc fee3 	bl	8000578 <__aeabi_f2d>
 80037b2:	a333      	add	r3, pc, #204	; (adr r3, 8003880 <_ZN12VelocityCtrl3pidEv+0x220>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc ff36 	bl	8000628 <__aeabi_dmul>
 80037bc:	4603      	mov	r3, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	4618      	mov	r0, r3
 80037c2:	4621      	mov	r1, r4
 80037c4:	f7fd fa28 	bl	8000c18 <__aeabi_d2f>
 80037c8:	4603      	mov	r3, r0
 80037ca:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 80037cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80037d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80037d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <_ZN12VelocityCtrl3pidEv+0x228>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	edc7 7a05 	vstr	s15, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80037ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80037ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80037f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003800:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003804:	ed97 7a07 	vldr	s14, [r7, #28]
 8003808:	edd7 7a06 	vldr	s15, [r7, #24]
 800380c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381a:	eef1 7a67 	vneg.f32	s15, s15
 800381e:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003826:	ed97 7a04 	vldr	s14, [r7, #16]
 800382a:	edd7 7a03 	vldr	s15, [r7, #12]
 800382e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003832:	ee17 0a90 	vmov	r0, s15
 8003836:	f7fc fe9f 	bl	8000578 <__aeabi_f2d>
 800383a:	4605      	mov	r5, r0
 800383c:	460e      	mov	r6, r1
 800383e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003842:	edd7 7a02 	vldr	s15, [r7, #8]
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	ee17 0a90 	vmov	r0, s15
 800384e:	f7fc fe93 	bl	8000578 <__aeabi_f2d>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	ec43 2b11 	vmov	d1, r2, r3
 800385a:	ec46 5b10 	vmov	d0, r5, r6
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff f9a2 	bl	8002ba8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003864:	4a09      	ldr	r2, [pc, #36]	; (800388c <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <_ZN12VelocityCtrl3pidEv+0x234>)
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	3734      	adds	r7, #52	; 0x34
 8003874:	46bd      	mov	sp, r7
 8003876:	ecbd 8b02 	vpop	{d8}
 800387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800387c:	f3af 8000 	nop.w
 8003880:	d2f1a9fc 	.word	0xd2f1a9fc
 8003884:	3f50624d 	.word	0x3f50624d
 8003888:	2000023c 	.word	0x2000023c
 800388c:	20000234 	.word	0x20000234
 8003890:	20000240 	.word	0x20000240
 8003894:	20000238 	.word	0x20000238

08003898 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80038a4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	605a      	str	r2, [r3, #4]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80038d0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	615a      	str	r2, [r3, #20]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80038fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8003902:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fe5f 	bl	80035f0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fe8f 	bl	8003660 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003998 <_ZN12VelocityCtrl4stopEv+0x30>
 8003980:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003998 <_ZN12VelocityCtrl4stopEv+0x30>
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f90f 	bl	8002ba8 <_ZN5Motor8setRatioEdd>

}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	f3af 8000 	nop.w
	...

080039a0 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	ee07 3a90 	vmov	s15, r3
}
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80039c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d013      	beq.n	80039fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80039d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80039de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80039e6:	e000      	b.n	80039ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80039e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80039ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f9      	beq.n	80039e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80039f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039fe:	687b      	ldr	r3, [r7, #4]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e009      	b.n	8003a32 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	60ba      	str	r2, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ffc9 	bl	80039be <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	dbf1      	blt.n	8003a1e <_write+0x12>
  }
  return len;
 8003a3a:	687b      	ldr	r3, [r7, #4]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 ff41 	bl	80058d8 <cppExit>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003a72:	f001 fea3 	bl	80057bc <cppFlip1ms>

		tim6_timer++;
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a7e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d902      	bls.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003a9a:	f001 fef5 	bl	8005888 <cppFlip100ns>

		tim7_timer++;
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003aa6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d902      	bls.n	8003ab8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003ac2:	f001 feeb 	bl	800589c <cppFlip10ms>

		tim13_timer++;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ace:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d902      	bls.n	8003ae0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
	}

}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40001000 	.word	0x40001000
 8003aec:	200398a0 	.word	0x200398a0
 8003af0:	0001869f 	.word	0x0001869f
 8003af4:	40001400 	.word	0x40001400
 8003af8:	200398e4 	.word	0x200398e4
 8003afc:	40001c00 	.word	0x40001c00
 8003b00:	200398e8 	.word	0x200398e8

08003b04 <init>:

void init()
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b0e:	4808      	ldr	r0, [pc, #32]	; (8003b30 <init+0x2c>)
 8003b10:	f004 fb3e 	bl	8008190 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003b14:	4807      	ldr	r0, [pc, #28]	; (8003b34 <init+0x30>)
 8003b16:	f008 fa1e 	bl	800bf56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003b1a:	4807      	ldr	r0, [pc, #28]	; (8003b38 <init+0x34>)
 8003b1c:	f008 fa1b 	bl	800bf56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003b20:	4806      	ldr	r0, [pc, #24]	; (8003b3c <init+0x38>)
 8003b22:	f008 fa18 	bl	800bf56 <HAL_TIM_Base_Start_IT>

	cppInit();
 8003b26:	f001 fd93 	bl	8005650 <cppInit>

	//path_following_initialize();

}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	200399cc 	.word	0x200399cc
 8003b38:	20039b70 	.word	0x20039b70
 8003b3c:	200398ec 	.word	0x200398ec

08003b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b44:	f003 f81c 	bl	8006b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b48:	f000 f82a 	bl	8003ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b4c:	f000 fdbc 	bl	80046c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b50:	f000 fd8a 	bl	8004668 <MX_DMA_Init>
  MX_I2C2_Init();
 8003b54:	f000 f9e8 	bl	8003f28 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003b58:	f000 fa14 	bl	8003f84 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003b5c:	f000 fa32 	bl	8003fc4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003b60:	f000 fa66 	bl	8004030 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003b64:	f000 fb70 	bl	8004248 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003b68:	f000 fc3c 	bl	80043e4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003b6c:	f000 fd52 	bl	8004614 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003b70:	f00a f9c4 	bl	800defc <MX_FATFS_Init>
  MX_TIM6_Init();
 8003b74:	f000 fbcc 	bl	8004310 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003b78:	f000 f9a8 	bl	8003ecc <MX_I2C1_Init>
  MX_TIM3_Init();
 8003b7c:	f000 fb00 	bl	8004180 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003b80:	f000 fc88 	bl	8004494 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003b84:	f000 fcd4 	bl	8004530 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003b88:	f000 f898 	bl	8003cbc <MX_ADC2_Init>
  MX_TIM7_Init();
 8003b8c:	f000 fbf6 	bl	800437c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003b90:	f000 fd1c 	bl	80045cc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003b94:	f7ff ffb6 	bl	8003b04 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003b98:	f001 feae 	bl	80058f8 <cppLoop>
 8003b9c:	e7fc      	b.n	8003b98 <main+0x58>
	...

08003ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b0a4      	sub	sp, #144	; 0x90
 8003ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ba6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003baa:	2234      	movs	r2, #52	; 0x34
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f00e fdf1 	bl	8012796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bc4:	f107 030c 	add.w	r3, r7, #12
 8003bc8:	223c      	movs	r2, #60	; 0x3c
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f00e fde2 	bl	8012796 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <SystemClock_Config+0x114>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a36      	ldr	r2, [pc, #216]	; (8003cb4 <SystemClock_Config+0x114>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <SystemClock_Config+0x114>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <SystemClock_Config+0x118>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <SystemClock_Config+0x118>)
 8003bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <SystemClock_Config+0x118>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c14:	2302      	movs	r3, #2
 8003c16:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c1c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003c22:	23b4      	movs	r3, #180	; 0xb4
 8003c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003c2e:	2308      	movs	r3, #8
 8003c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f005 fee0 	bl	8009a04 <HAL_RCC_OscConfig>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003c4a:	f000 fe93 	bl	8004974 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c4e:	f005 fa5b 	bl	8009108 <HAL_PWREx_EnableOverDrive>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003c58:	f000 fe8c 	bl	8004974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c60:	2302      	movs	r3, #2
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c64:	2300      	movs	r3, #0
 8003c66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c72:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c78:	2105      	movs	r1, #5
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f005 fa94 	bl	80091a8 <HAL_RCC_ClockConfig>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003c86:	f000 fe75 	bl	8004974 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003c8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003c90:	2300      	movs	r3, #0
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003c94:	2300      	movs	r3, #0
 8003c96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f005 fc73 	bl	8009588 <HAL_RCCEx_PeriphCLKConfig>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003ca8:	f000 fe64 	bl	8004974 <Error_Handler>
  }
}
 8003cac:	bf00      	nop
 8003cae:	3790      	adds	r7, #144	; 0x90
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000

08003cbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003cce:	4b7c      	ldr	r3, [pc, #496]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cd0:	4a7c      	ldr	r2, [pc, #496]	; (8003ec4 <MX_ADC2_Init+0x208>)
 8003cd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003cd4:	4b7a      	ldr	r3, [pc, #488]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003cdc:	4b78      	ldr	r3, [pc, #480]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003ce2:	4b77      	ldr	r3, [pc, #476]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003ce8:	4b75      	ldr	r3, [pc, #468]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003cee:	4b74      	ldr	r3, [pc, #464]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cf6:	4b72      	ldr	r3, [pc, #456]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cfc:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003cfe:	4a72      	ldr	r2, [pc, #456]	; (8003ec8 <MX_ADC2_Init+0x20c>)
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003d08:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d0a:	220e      	movs	r2, #14
 8003d0c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003d1c:	4868      	ldr	r0, [pc, #416]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d1e:	f002 ffc3 	bl	8006ca8 <HAL_ADC_Init>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003d28:	f000 fe24 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003d2c:	230a      	movs	r3, #10
 8003d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003d34:	2306      	movs	r3, #6
 8003d36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d38:	463b      	mov	r3, r7
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4860      	ldr	r0, [pc, #384]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d3e:	f003 f907 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003d48:	f000 fe14 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003d4c:	230b      	movs	r3, #11
 8003d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003d50:	2302      	movs	r3, #2
 8003d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d54:	463b      	mov	r3, r7
 8003d56:	4619      	mov	r1, r3
 8003d58:	4859      	ldr	r0, [pc, #356]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d5a:	f003 f8f9 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003d64:	f000 fe06 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d68:	230c      	movs	r3, #12
 8003d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d70:	463b      	mov	r3, r7
 8003d72:	4619      	mov	r1, r3
 8003d74:	4852      	ldr	r0, [pc, #328]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d76:	f003 f8eb 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003d80:	f000 fdf8 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d84:	230d      	movs	r3, #13
 8003d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003d88:	2304      	movs	r3, #4
 8003d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	4619      	mov	r1, r3
 8003d90:	484b      	ldr	r0, [pc, #300]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003d92:	f003 f8dd 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003d9c:	f000 fdea 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003da4:	2305      	movs	r3, #5
 8003da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003da8:	463b      	mov	r3, r7
 8003daa:	4619      	mov	r1, r3
 8003dac:	4844      	ldr	r0, [pc, #272]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003dae:	f003 f8cf 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003db8:	f000 fddc 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003dc0:	2306      	movs	r3, #6
 8003dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	483d      	ldr	r0, [pc, #244]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003dca:	f003 f8c1 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003dd4:	f000 fdce 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003ddc:	2307      	movs	r3, #7
 8003dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003de0:	463b      	mov	r3, r7
 8003de2:	4619      	mov	r1, r3
 8003de4:	4836      	ldr	r0, [pc, #216]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003de6:	f003 f8b3 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003df0:	f000 fdc0 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003df4:	2303      	movs	r3, #3
 8003df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4619      	mov	r1, r3
 8003e00:	482f      	ldr	r0, [pc, #188]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003e02:	f003 f8a5 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003e0c:	f000 fdb2 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003e10:	2304      	movs	r3, #4
 8003e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003e14:	2309      	movs	r3, #9
 8003e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e18:	463b      	mov	r3, r7
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4828      	ldr	r0, [pc, #160]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003e1e:	f003 f897 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003e28:	f000 fda4 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003e2c:	2305      	movs	r3, #5
 8003e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003e30:	230a      	movs	r3, #10
 8003e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e34:	463b      	mov	r3, r7
 8003e36:	4619      	mov	r1, r3
 8003e38:	4821      	ldr	r0, [pc, #132]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003e3a:	f003 f889 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003e44:	f000 fd96 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003e48:	2306      	movs	r3, #6
 8003e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003e4c:	230b      	movs	r3, #11
 8003e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e50:	463b      	mov	r3, r7
 8003e52:	4619      	mov	r1, r3
 8003e54:	481a      	ldr	r0, [pc, #104]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003e56:	f003 f87b 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003e60:	f000 fd88 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e64:	2307      	movs	r3, #7
 8003e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003e68:	230c      	movs	r3, #12
 8003e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4813      	ldr	r0, [pc, #76]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003e72:	f003 f86d 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003e7c:	f000 fd7a 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e80:	2308      	movs	r3, #8
 8003e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003e84:	230d      	movs	r3, #13
 8003e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e88:	463b      	mov	r3, r7
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003e8e:	f003 f85f 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003e98:	f000 fd6c 	bl	8004974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003e9c:	2309      	movs	r3, #9
 8003e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003ea0:	230e      	movs	r3, #14
 8003ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <MX_ADC2_Init+0x204>)
 8003eaa:	f003 f851 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003eb4:	f000 fd5e 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20039770 	.word	0x20039770
 8003ec4:	40012100 	.word	0x40012100
 8003ec8:	0f000001 	.word	0x0f000001

08003ecc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003ed2:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <MX_I2C1_Init+0x54>)
 8003ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003ed8:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <MX_I2C1_Init+0x58>)
 8003eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003eea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f08:	4804      	ldr	r0, [pc, #16]	; (8003f1c <MX_I2C1_Init+0x50>)
 8003f0a:	f004 f973 	bl	80081f4 <HAL_I2C_Init>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f14:	f000 fd2e 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200397b8 	.word	0x200397b8
 8003f20:	40005400 	.word	0x40005400
 8003f24:	000186a0 	.word	0x000186a0

08003f28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <MX_I2C2_Init+0x54>)
 8003f30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <MX_I2C2_Init+0x58>)
 8003f36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f64:	4804      	ldr	r0, [pc, #16]	; (8003f78 <MX_I2C2_Init+0x50>)
 8003f66:	f004 f945 	bl	80081f4 <HAL_I2C_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f70:	f000 fd00 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2003984c 	.word	0x2003984c
 8003f7c:	40005800 	.word	0x40005800
 8003f80:	000186a0 	.word	0x000186a0

08003f84 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003f8a:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <MX_SDIO_SD_Init+0x3c>)
 8003f8c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <MX_SDIO_SD_Init+0x38>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20039a4c 	.word	0x20039a4c
 8003fc0:	40012c00 	.word	0x40012c00

08003fc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <MX_SPI2_Init+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <MX_SPI2_Init+0x64>)
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <MX_SPI2_Init+0x64>)
 8003ff8:	2228      	movs	r2, #40	; 0x28
 8003ffa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <MX_SPI2_Init+0x64>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <MX_SPI2_Init+0x64>)
 8004004:	2200      	movs	r2, #0
 8004006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <MX_SPI2_Init+0x64>)
 800400a:	2200      	movs	r2, #0
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_SPI2_Init+0x64>)
 8004010:	220a      	movs	r2, #10
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004014:	4804      	ldr	r0, [pc, #16]	; (8004028 <MX_SPI2_Init+0x64>)
 8004016:	f007 fa1f 	bl	800b458 <HAL_SPI_Init>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004020:	f000 fca8 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20039698 	.word	0x20039698
 800402c:	40003800 	.word	0x40003800

08004030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b09a      	sub	sp, #104	; 0x68
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004036:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f00e fba9 	bl	8012796 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004044:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800404e:	f107 0320 	add.w	r3, r7, #32
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	611a      	str	r2, [r3, #16]
 800405e:	615a      	str	r2, [r3, #20]
 8004060:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004062:	463b      	mov	r3, r7
 8004064:	2220      	movs	r2, #32
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f00e fb94 	bl	8012796 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <MX_TIM1_Init+0x148>)
 8004070:	4a42      	ldr	r2, [pc, #264]	; (800417c <MX_TIM1_Init+0x14c>)
 8004072:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <MX_TIM1_Init+0x148>)
 8004076:	2200      	movs	r2, #0
 8004078:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407a:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <MX_TIM1_Init+0x148>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004080:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <MX_TIM1_Init+0x148>)
 8004082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <MX_TIM1_Init+0x148>)
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800408e:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <MX_TIM1_Init+0x148>)
 8004090:	2200      	movs	r2, #0
 8004092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004094:	4b38      	ldr	r3, [pc, #224]	; (8004178 <MX_TIM1_Init+0x148>)
 8004096:	2200      	movs	r2, #0
 8004098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800409a:	4837      	ldr	r0, [pc, #220]	; (8004178 <MX_TIM1_Init+0x148>)
 800409c:	f007 ff7f 	bl	800bf9e <HAL_TIM_PWM_Init>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80040a6:	f000 fc65 	bl	8004974 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040aa:	2303      	movs	r3, #3
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040ae:	2300      	movs	r3, #0
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040b2:	2301      	movs	r3, #1
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040b6:	2300      	movs	r3, #0
 80040b8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040be:	2300      	movs	r3, #0
 80040c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040c2:	2301      	movs	r3, #1
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040c6:	2300      	movs	r3, #0
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80040ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040d2:	4619      	mov	r1, r3
 80040d4:	4828      	ldr	r0, [pc, #160]	; (8004178 <MX_TIM1_Init+0x148>)
 80040d6:	f007 ffcb 	bl	800c070 <HAL_TIM_Encoder_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80040e0:	f000 fc48 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040f0:	4619      	mov	r1, r3
 80040f2:	4821      	ldr	r0, [pc, #132]	; (8004178 <MX_TIM1_Init+0x148>)
 80040f4:	f008 fcf2 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80040fe:	f000 fc39 	bl	8004974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004102:	2360      	movs	r3, #96	; 0x60
 8004104:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800410a:	2300      	movs	r3, #0
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800410e:	2300      	movs	r3, #0
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004112:	2300      	movs	r3, #0
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800411e:	f107 0320 	add.w	r3, r7, #32
 8004122:	2208      	movs	r2, #8
 8004124:	4619      	mov	r1, r3
 8004126:	4814      	ldr	r0, [pc, #80]	; (8004178 <MX_TIM1_Init+0x148>)
 8004128:	f008 f974 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004132:	f000 fc1f 	bl	8004974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800414a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800414e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004154:	463b      	mov	r3, r7
 8004156:	4619      	mov	r1, r3
 8004158:	4807      	ldr	r0, [pc, #28]	; (8004178 <MX_TIM1_Init+0x148>)
 800415a:	f008 fd3b 	bl	800cbd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004164:	f000 fc06 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004168:	4803      	ldr	r0, [pc, #12]	; (8004178 <MX_TIM1_Init+0x148>)
 800416a:	f000 fff3 	bl	8005154 <HAL_TIM_MspPostInit>

}
 800416e:	bf00      	nop
 8004170:	3768      	adds	r7, #104	; 0x68
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20039a0c 	.word	0x20039a0c
 800417c:	40010000 	.word	0x40010000

08004180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004186:	f107 0320 	add.w	r3, r7, #32
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	609a      	str	r2, [r3, #8]
 800419a:	60da      	str	r2, [r3, #12]
 800419c:	611a      	str	r2, [r3, #16]
 800419e:	615a      	str	r2, [r3, #20]
 80041a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041a2:	4b27      	ldr	r3, [pc, #156]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <MX_TIM3_Init+0xc4>)
 80041a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80041b4:	4b22      	ldr	r3, [pc, #136]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c2:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80041c8:	481d      	ldr	r0, [pc, #116]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041ca:	f007 fee8 	bl	800bf9e <HAL_TIM_PWM_Init>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80041d4:	f000 fbce 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d8:	2300      	movs	r3, #0
 80041da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041e0:	f107 0320 	add.w	r3, r7, #32
 80041e4:	4619      	mov	r1, r3
 80041e6:	4816      	ldr	r0, [pc, #88]	; (8004240 <MX_TIM3_Init+0xc0>)
 80041e8:	f008 fc78 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80041f2:	f000 fbbf 	bl	8004974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041f6:	2360      	movs	r3, #96	; 0x60
 80041f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	2200      	movs	r2, #0
 800420a:	4619      	mov	r1, r3
 800420c:	480c      	ldr	r0, [pc, #48]	; (8004240 <MX_TIM3_Init+0xc0>)
 800420e:	f008 f901 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004218:	f000 fbac 	bl	8004974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	2204      	movs	r2, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4807      	ldr	r0, [pc, #28]	; (8004240 <MX_TIM3_Init+0xc0>)
 8004224:	f008 f8f6 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800422e:	f000 fba1 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004232:	4803      	ldr	r0, [pc, #12]	; (8004240 <MX_TIM3_Init+0xc0>)
 8004234:	f000 ff8e 	bl	8005154 <HAL_TIM_MspPostInit>

}
 8004238:	bf00      	nop
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	200398a4 	.word	0x200398a4
 8004244:	40000400 	.word	0x40000400

08004248 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424e:	f107 0320 	add.w	r3, r7, #32
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	611a      	str	r2, [r3, #16]
 8004266:	615a      	str	r2, [r3, #20]
 8004268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <MX_TIM4_Init+0xc0>)
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <MX_TIM4_Init+0xc4>)
 800426e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <MX_TIM4_Init+0xc0>)
 8004272:	2200      	movs	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <MX_TIM4_Init+0xc0>)
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <MX_TIM4_Init+0xc0>)
 800427e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004282:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <MX_TIM4_Init+0xc0>)
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <MX_TIM4_Init+0xc0>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004290:	481d      	ldr	r0, [pc, #116]	; (8004308 <MX_TIM4_Init+0xc0>)
 8004292:	f007 fe84 	bl	800bf9e <HAL_TIM_PWM_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800429c:	f000 fb6a 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042a8:	f107 0320 	add.w	r3, r7, #32
 80042ac:	4619      	mov	r1, r3
 80042ae:	4816      	ldr	r0, [pc, #88]	; (8004308 <MX_TIM4_Init+0xc0>)
 80042b0:	f008 fc14 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80042ba:	f000 fb5b 	bl	8004974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042be:	2360      	movs	r3, #96	; 0x60
 80042c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	2208      	movs	r2, #8
 80042d2:	4619      	mov	r1, r3
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <MX_TIM4_Init+0xc0>)
 80042d6:	f008 f89d 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80042e0:	f000 fb48 	bl	8004974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	220c      	movs	r2, #12
 80042e8:	4619      	mov	r1, r3
 80042ea:	4807      	ldr	r0, [pc, #28]	; (8004308 <MX_TIM4_Init+0xc0>)
 80042ec:	f008 f892 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80042f6:	f000 fb3d 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042fa:	4803      	ldr	r0, [pc, #12]	; (8004308 <MX_TIM4_Init+0xc0>)
 80042fc:	f000 ff2a 	bl	8005154 <HAL_TIM_MspPostInit>

}
 8004300:	bf00      	nop
 8004302:	3728      	adds	r7, #40	; 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20039730 	.word	0x20039730
 800430c:	40000800 	.word	0x40000800

08004310 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004316:	463b      	mov	r3, r7
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <MX_TIM6_Init+0x64>)
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <MX_TIM6_Init+0x68>)
 8004322:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <MX_TIM6_Init+0x64>)
 8004326:	2259      	movs	r2, #89	; 0x59
 8004328:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <MX_TIM6_Init+0x64>)
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <MX_TIM6_Init+0x64>)
 8004332:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004336:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <MX_TIM6_Init+0x64>)
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800433e:	480d      	ldr	r0, [pc, #52]	; (8004374 <MX_TIM6_Init+0x64>)
 8004340:	f007 fdde 	bl	800bf00 <HAL_TIM_Base_Init>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800434a:	f000 fb13 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004356:	463b      	mov	r3, r7
 8004358:	4619      	mov	r1, r3
 800435a:	4806      	ldr	r0, [pc, #24]	; (8004374 <MX_TIM6_Init+0x64>)
 800435c:	f008 fbbe 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004366:	f000 fb05 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200399cc 	.word	0x200399cc
 8004378:	40001000 	.word	0x40001000

0800437c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004382:	463b      	mov	r3, r7
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <MX_TIM7_Init+0x60>)
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <MX_TIM7_Init+0x64>)
 800438e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <MX_TIM7_Init+0x60>)
 8004392:	22b3      	movs	r2, #179	; 0xb3
 8004394:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <MX_TIM7_Init+0x60>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <MX_TIM7_Init+0x60>)
 800439e:	2231      	movs	r2, #49	; 0x31
 80043a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <MX_TIM7_Init+0x60>)
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043a8:	480c      	ldr	r0, [pc, #48]	; (80043dc <MX_TIM7_Init+0x60>)
 80043aa:	f007 fda9 	bl	800bf00 <HAL_TIM_Base_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80043b4:	f000 fade 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b8:	2300      	movs	r3, #0
 80043ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043bc:	2300      	movs	r3, #0
 80043be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043c0:	463b      	mov	r3, r7
 80043c2:	4619      	mov	r1, r3
 80043c4:	4805      	ldr	r0, [pc, #20]	; (80043dc <MX_TIM7_Init+0x60>)
 80043c6:	f008 fb89 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80043d0:	f000 fad0 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20039b70 	.word	0x20039b70
 80043e0:	40001400 	.word	0x40001400

080043e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	; 0x30
 80043e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f00e f9cf 	bl	8012796 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004400:	4b22      	ldr	r3, [pc, #136]	; (800448c <MX_TIM8_Init+0xa8>)
 8004402:	4a23      	ldr	r2, [pc, #140]	; (8004490 <MX_TIM8_Init+0xac>)
 8004404:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <MX_TIM8_Init+0xa8>)
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800440c:	4b1f      	ldr	r3, [pc, #124]	; (800448c <MX_TIM8_Init+0xa8>)
 800440e:	2210      	movs	r2, #16
 8004410:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <MX_TIM8_Init+0xa8>)
 8004414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004418:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <MX_TIM8_Init+0xa8>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <MX_TIM8_Init+0xa8>)
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004426:	4b19      	ldr	r3, [pc, #100]	; (800448c <MX_TIM8_Init+0xa8>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800442c:	2303      	movs	r3, #3
 800442e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004440:	2300      	movs	r3, #0
 8004442:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004444:	2301      	movs	r3, #1
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004448:	2300      	movs	r3, #0
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	4619      	mov	r1, r3
 8004456:	480d      	ldr	r0, [pc, #52]	; (800448c <MX_TIM8_Init+0xa8>)
 8004458:	f007 fe0a 	bl	800c070 <HAL_TIM_Encoder_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004462:	f000 fa87 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4806      	ldr	r0, [pc, #24]	; (800448c <MX_TIM8_Init+0xa8>)
 8004474:	f008 fb32 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800447e:	f000 fa79 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	3730      	adds	r7, #48	; 0x30
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200396f0 	.word	0x200396f0
 8004490:	40010400 	.word	0x40010400

08004494 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	615a      	str	r2, [r3, #20]
 80044aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <MX_TIM10_Init+0x94>)
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <MX_TIM10_Init+0x98>)
 80044b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <MX_TIM10_Init+0x94>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <MX_TIM10_Init+0x94>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80044be:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <MX_TIM10_Init+0x94>)
 80044c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <MX_TIM10_Init+0x94>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044cc:	4b16      	ldr	r3, [pc, #88]	; (8004528 <MX_TIM10_Init+0x94>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80044d2:	4815      	ldr	r0, [pc, #84]	; (8004528 <MX_TIM10_Init+0x94>)
 80044d4:	f007 fd14 	bl	800bf00 <HAL_TIM_Base_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80044de:	f000 fa49 	bl	8004974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80044e2:	4811      	ldr	r0, [pc, #68]	; (8004528 <MX_TIM10_Init+0x94>)
 80044e4:	f007 fd5b 	bl	800bf9e <HAL_TIM_PWM_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80044ee:	f000 fa41 	bl	8004974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044f2:	2360      	movs	r3, #96	; 0x60
 80044f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	2200      	movs	r2, #0
 8004506:	4619      	mov	r1, r3
 8004508:	4807      	ldr	r0, [pc, #28]	; (8004528 <MX_TIM10_Init+0x94>)
 800450a:	f007 ff83 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004514:	f000 fa2e 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004518:	4803      	ldr	r0, [pc, #12]	; (8004528 <MX_TIM10_Init+0x94>)
 800451a:	f000 fe1b 	bl	8005154 <HAL_TIM_MspPostInit>

}
 800451e:	bf00      	nop
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2003980c 	.word	0x2003980c
 800452c:	40014400 	.word	0x40014400

08004530 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]
 8004544:	615a      	str	r2, [r3, #20]
 8004546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <MX_TIM11_Init+0x94>)
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <MX_TIM11_Init+0x98>)
 800454c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <MX_TIM11_Init+0x94>)
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <MX_TIM11_Init+0x94>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <MX_TIM11_Init+0x94>)
 800455c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004560:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <MX_TIM11_Init+0x94>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <MX_TIM11_Init+0x94>)
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800456e:	4815      	ldr	r0, [pc, #84]	; (80045c4 <MX_TIM11_Init+0x94>)
 8004570:	f007 fcc6 	bl	800bf00 <HAL_TIM_Base_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800457a:	f000 f9fb 	bl	8004974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800457e:	4811      	ldr	r0, [pc, #68]	; (80045c4 <MX_TIM11_Init+0x94>)
 8004580:	f007 fd0d 	bl	800bf9e <HAL_TIM_PWM_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800458a:	f000 f9f3 	bl	8004974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800458e:	2360      	movs	r3, #96	; 0x60
 8004590:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	2200      	movs	r2, #0
 80045a2:	4619      	mov	r1, r3
 80045a4:	4807      	ldr	r0, [pc, #28]	; (80045c4 <MX_TIM11_Init+0x94>)
 80045a6:	f007 ff35 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80045b0:	f000 f9e0 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80045b4:	4803      	ldr	r0, [pc, #12]	; (80045c4 <MX_TIM11_Init+0x94>)
 80045b6:	f000 fdcd 	bl	8005154 <HAL_TIM_MspPostInit>

}
 80045ba:	bf00      	nop
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2003992c 	.word	0x2003992c
 80045c8:	40014800 	.word	0x40014800

080045cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <MX_TIM13_Init+0x40>)
 80045d2:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <MX_TIM13_Init+0x44>)
 80045d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80045d6:	4b0d      	ldr	r3, [pc, #52]	; (800460c <MX_TIM13_Init+0x40>)
 80045d8:	2259      	movs	r2, #89	; 0x59
 80045da:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <MX_TIM13_Init+0x40>)
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <MX_TIM13_Init+0x40>)
 80045e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80045e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <MX_TIM13_Init+0x40>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <MX_TIM13_Init+0x40>)
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80045f6:	4805      	ldr	r0, [pc, #20]	; (800460c <MX_TIM13_Init+0x40>)
 80045f8:	f007 fc82 	bl	800bf00 <HAL_TIM_Base_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004602:	f000 f9b7 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	200398ec 	.word	0x200398ec
 8004610:	40001c00 	.word	0x40001c00

08004614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <MX_USART2_UART_Init+0x50>)
 800461c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 8004620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 8004628:	2200      	movs	r2, #0
 800462a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 800462e:	2200      	movs	r2, #0
 8004630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 8004634:	2200      	movs	r2, #0
 8004636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 800463a:	220c      	movs	r2, #12
 800463c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 8004640:	2200      	movs	r2, #0
 8004642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 8004646:	2200      	movs	r2, #0
 8004648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800464a:	4805      	ldr	r0, [pc, #20]	; (8004660 <MX_USART2_UART_Init+0x4c>)
 800464c:	f008 fb28 	bl	800cca0 <HAL_UART_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004656:	f000 f98d 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20039ad0 	.word	0x20039ad0
 8004664:	40004400 	.word	0x40004400

08004668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <MX_DMA_Init+0x5c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <MX_DMA_Init+0x5c>)
 8004678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <MX_DMA_Init+0x5c>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	607b      	str	r3, [r7, #4]
 8004688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	203a      	movs	r0, #58	; 0x3a
 8004690:	f002 ffe9 	bl	8007666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004694:	203a      	movs	r0, #58	; 0x3a
 8004696:	f003 f802 	bl	800769e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800469a:	2200      	movs	r2, #0
 800469c:	2100      	movs	r1, #0
 800469e:	203b      	movs	r0, #59	; 0x3b
 80046a0:	f002 ffe1 	bl	8007666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80046a4:	203b      	movs	r0, #59	; 0x3b
 80046a6:	f002 fffa 	bl	800769e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80046aa:	2200      	movs	r2, #0
 80046ac:	2100      	movs	r1, #0
 80046ae:	2045      	movs	r0, #69	; 0x45
 80046b0:	f002 ffd9 	bl	8007666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80046b4:	2045      	movs	r0, #69	; 0x45
 80046b6:	f002 fff2 	bl	800769e <HAL_NVIC_EnableIRQ>

}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ce:	f107 031c 	add.w	r3, r7, #28
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	4b9c      	ldr	r3, [pc, #624]	; (8004954 <MX_GPIO_Init+0x28c>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a9b      	ldr	r2, [pc, #620]	; (8004954 <MX_GPIO_Init+0x28c>)
 80046e8:	f043 0310 	orr.w	r3, r3, #16
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b99      	ldr	r3, [pc, #612]	; (8004954 <MX_GPIO_Init+0x28c>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	4b95      	ldr	r3, [pc, #596]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	4a94      	ldr	r2, [pc, #592]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
 800470a:	4b92      	ldr	r3, [pc, #584]	; (8004954 <MX_GPIO_Init+0x28c>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	4b8e      	ldr	r3, [pc, #568]	; (8004954 <MX_GPIO_Init+0x28c>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4a8d      	ldr	r2, [pc, #564]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004720:	f043 0304 	orr.w	r3, r3, #4
 8004724:	6313      	str	r3, [r2, #48]	; 0x30
 8004726:	4b8b      	ldr	r3, [pc, #556]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b87      	ldr	r3, [pc, #540]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a86      	ldr	r2, [pc, #536]	; (8004954 <MX_GPIO_Init+0x28c>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
 8004742:	4b84      	ldr	r3, [pc, #528]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	4b80      	ldr	r3, [pc, #512]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a7f      	ldr	r2, [pc, #508]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b7d      	ldr	r3, [pc, #500]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	4b79      	ldr	r3, [pc, #484]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	4a78      	ldr	r2, [pc, #480]	; (8004954 <MX_GPIO_Init+0x28c>)
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	6313      	str	r3, [r2, #48]	; 0x30
 800477a:	4b76      	ldr	r3, [pc, #472]	; (8004954 <MX_GPIO_Init+0x28c>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004786:	2200      	movs	r2, #0
 8004788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800478c:	4872      	ldr	r0, [pc, #456]	; (8004958 <MX_GPIO_Init+0x290>)
 800478e:	f003 fcff 	bl	8008190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004792:	2200      	movs	r2, #0
 8004794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004798:	4870      	ldr	r0, [pc, #448]	; (800495c <MX_GPIO_Init+0x294>)
 800479a:	f003 fcf9 	bl	8008190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800479e:	2200      	movs	r2, #0
 80047a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047a4:	486e      	ldr	r0, [pc, #440]	; (8004960 <MX_GPIO_Init+0x298>)
 80047a6:	f003 fcf3 	bl	8008190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80047aa:	2200      	movs	r2, #0
 80047ac:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80047b0:	486c      	ldr	r0, [pc, #432]	; (8004964 <MX_GPIO_Init+0x29c>)
 80047b2:	f003 fced 	bl	8008190 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047b6:	2304      	movs	r3, #4
 80047b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80047ba:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <MX_GPIO_Init+0x2a0>)
 80047bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047c2:	f107 031c 	add.w	r3, r7, #28
 80047c6:	4619      	mov	r1, r3
 80047c8:	4863      	ldr	r0, [pc, #396]	; (8004958 <MX_GPIO_Init+0x290>)
 80047ca:	f003 fb1f 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80047ce:	230f      	movs	r3, #15
 80047d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047d2:	2303      	movs	r3, #3
 80047d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047da:	f107 031c 	add.w	r3, r7, #28
 80047de:	4619      	mov	r1, r3
 80047e0:	4862      	ldr	r0, [pc, #392]	; (800496c <MX_GPIO_Init+0x2a4>)
 80047e2:	f003 fb13 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047e6:	23e1      	movs	r3, #225	; 0xe1
 80047e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ea:	2303      	movs	r3, #3
 80047ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f2:	f107 031c 	add.w	r3, r7, #28
 80047f6:	4619      	mov	r1, r3
 80047f8:	485a      	ldr	r0, [pc, #360]	; (8004964 <MX_GPIO_Init+0x29c>)
 80047fa:	f003 fb07 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047fe:	2303      	movs	r3, #3
 8004800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004802:	2303      	movs	r3, #3
 8004804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480a:	f107 031c 	add.w	r3, r7, #28
 800480e:	4619      	mov	r1, r3
 8004810:	4852      	ldr	r0, [pc, #328]	; (800495c <MX_GPIO_Init+0x294>)
 8004812:	f003 fafb 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004816:	2304      	movs	r3, #4
 8004818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800481e:	2301      	movs	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004822:	f107 031c 	add.w	r3, r7, #28
 8004826:	4619      	mov	r1, r3
 8004828:	484c      	ldr	r0, [pc, #304]	; (800495c <MX_GPIO_Init+0x294>)
 800482a:	f003 faef 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800482e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004834:	2300      	movs	r3, #0
 8004836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004838:	2301      	movs	r3, #1
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800483c:	f107 031c 	add.w	r3, r7, #28
 8004840:	4619      	mov	r1, r3
 8004842:	4845      	ldr	r0, [pc, #276]	; (8004958 <MX_GPIO_Init+0x290>)
 8004844:	f003 fae2 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800484c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484e:	2301      	movs	r3, #1
 8004850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800485a:	f107 031c 	add.w	r3, r7, #28
 800485e:	4619      	mov	r1, r3
 8004860:	483d      	ldr	r0, [pc, #244]	; (8004958 <MX_GPIO_Init+0x290>)
 8004862:	f003 fad3 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800486a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486c:	2301      	movs	r3, #1
 800486e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004874:	2300      	movs	r3, #0
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004878:	f107 031c 	add.w	r3, r7, #28
 800487c:	4619      	mov	r1, r3
 800487e:	4837      	ldr	r0, [pc, #220]	; (800495c <MX_GPIO_Init+0x294>)
 8004880:	f003 fac4 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <MX_GPIO_Init+0x2a8>)
 800488c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004892:	f107 031c 	add.w	r3, r7, #28
 8004896:	4619      	mov	r1, r3
 8004898:	4831      	ldr	r0, [pc, #196]	; (8004960 <MX_GPIO_Init+0x298>)
 800489a:	f003 fab7 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800489e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a4:	2301      	movs	r3, #1
 80048a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b0:	f107 031c 	add.w	r3, r7, #28
 80048b4:	4619      	mov	r1, r3
 80048b6:	482a      	ldr	r0, [pc, #168]	; (8004960 <MX_GPIO_Init+0x298>)
 80048b8:	f003 faa8 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c2:	2301      	movs	r3, #1
 80048c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048c6:	2301      	movs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048ce:	f107 031c 	add.w	r3, r7, #28
 80048d2:	4619      	mov	r1, r3
 80048d4:	4822      	ldr	r0, [pc, #136]	; (8004960 <MX_GPIO_Init+0x298>)
 80048d6:	f003 fa99 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80048da:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80048de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e0:	2301      	movs	r3, #1
 80048e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	4619      	mov	r1, r3
 80048f2:	481c      	ldr	r0, [pc, #112]	; (8004964 <MX_GPIO_Init+0x29c>)
 80048f4:	f003 fa8a 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004906:	f107 031c 	add.w	r3, r7, #28
 800490a:	4619      	mov	r1, r3
 800490c:	4815      	ldr	r0, [pc, #84]	; (8004964 <MX_GPIO_Init+0x29c>)
 800490e:	f003 fa7d 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004912:	239b      	movs	r3, #155	; 0x9b
 8004914:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800491a:	2301      	movs	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800491e:	f107 031c 	add.w	r3, r7, #28
 8004922:	4619      	mov	r1, r3
 8004924:	480e      	ldr	r0, [pc, #56]	; (8004960 <MX_GPIO_Init+0x298>)
 8004926:	f003 fa71 	bl	8007e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2008      	movs	r0, #8
 8004930:	f002 fe99 	bl	8007666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004934:	2008      	movs	r0, #8
 8004936:	f002 feb2 	bl	800769e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	2100      	movs	r1, #0
 800493e:	2017      	movs	r0, #23
 8004940:	f002 fe91 	bl	8007666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004944:	2017      	movs	r0, #23
 8004946:	f002 feaa 	bl	800769e <HAL_NVIC_EnableIRQ>

}
 800494a:	bf00      	nop
 800494c:	3730      	adds	r7, #48	; 0x30
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40021000 	.word	0x40021000
 800495c:	40020400 	.word	0x40020400
 8004960:	40020c00 	.word	0x40020c00
 8004964:	40020000 	.word	0x40020000
 8004968:	10310000 	.word	0x10310000
 800496c:	40020800 	.word	0x40020800
 8004970:	10110000 	.word	0x10110000

08004974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004978:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800497a:	e7fe      	b.n	800497a <Error_Handler+0x6>

0800497c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_MspInit+0x4c>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	4a0f      	ldr	r2, [pc, #60]	; (80049d8 <HAL_MspInit+0x4c>)
 800499c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a0:	6453      	str	r3, [r2, #68]	; 0x44
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_MspInit+0x4c>)
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_MspInit+0x4c>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <HAL_MspInit+0x4c>)
 80049b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6413      	str	r3, [r2, #64]	; 0x40
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_MspInit+0x4c>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800

080049dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_ADC_MspInit+0x148>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f040 808e 	bne.w	8004b1c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8004a10:	4b45      	ldr	r3, [pc, #276]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	4a40      	ldr	r2, [pc, #256]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a26:	f043 0304 	orr.w	r3, r3, #4
 8004a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2c:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	4a39      	ldr	r2, [pc, #228]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6313      	str	r3, [r2, #48]	; 0x30
 8004a48:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	4b33      	ldr	r3, [pc, #204]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a5e:	f043 0302 	orr.w	r3, r3, #2
 8004a62:	6313      	str	r3, [r2, #48]	; 0x30
 8004a64:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <HAL_ADC_MspInit+0x14c>)
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004a70:	230f      	movs	r3, #15
 8004a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a74:	2303      	movs	r3, #3
 8004a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7c:	f107 031c 	add.w	r3, r7, #28
 8004a80:	4619      	mov	r1, r3
 8004a82:	482a      	ldr	r0, [pc, #168]	; (8004b2c <HAL_ADC_MspInit+0x150>)
 8004a84:	f003 f9c2 	bl	8007e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004a88:	23ff      	movs	r3, #255	; 0xff
 8004a8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4825      	ldr	r0, [pc, #148]	; (8004b30 <HAL_ADC_MspInit+0x154>)
 8004a9c:	f003 f9b6 	bl	8007e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	f107 031c 	add.w	r3, r7, #28
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4820      	ldr	r0, [pc, #128]	; (8004b34 <HAL_ADC_MspInit+0x158>)
 8004ab4:	f003 f9aa 	bl	8007e0c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004aba:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <HAL_ADC_MspInit+0x160>)
 8004abc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ac4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004acc:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004ad2:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ad8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ada:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ae8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004af0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004af4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004af8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004b00:	480d      	ldr	r0, [pc, #52]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004b02:	f002 fde7 	bl	80076d4 <HAL_DMA_Init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004b0c:	f7ff ff32 	bl	8004974 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
 8004b16:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <HAL_ADC_MspInit+0x15c>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004b1c:	bf00      	nop
 8004b1e:	3730      	adds	r7, #48	; 0x30
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40012100 	.word	0x40012100
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	40020000 	.word	0x40020000
 8004b34:	40020400 	.word	0x40020400
 8004b38:	20039b10 	.word	0x20039b10
 8004b3c:	40026440 	.word	0x40026440

08004b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	f107 031c 	add.w	r3, r7, #28
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a32      	ldr	r2, [pc, #200]	; (8004c28 <HAL_I2C_MspInit+0xe8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d12c      	bne.n	8004bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	4a30      	ldr	r2, [pc, #192]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004b6c:	f043 0302 	orr.w	r3, r3, #2
 8004b70:	6313      	str	r3, [r2, #48]	; 0x30
 8004b72:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b7e:	23c0      	movs	r3, #192	; 0xc0
 8004b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b82:	2312      	movs	r3, #18
 8004b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b86:	2301      	movs	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b8e:	2304      	movs	r3, #4
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b92:	f107 031c 	add.w	r3, r7, #28
 8004b96:	4619      	mov	r1, r3
 8004b98:	4825      	ldr	r0, [pc, #148]	; (8004c30 <HAL_I2C_MspInit+0xf0>)
 8004b9a:	f003 f937 	bl	8007e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004bba:	e031      	b.n	8004c20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <HAL_I2C_MspInit+0xf4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d12c      	bne.n	8004c20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004be2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004be8:	2312      	movs	r3, #18
 8004bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bec:	2301      	movs	r3, #1
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf8:	f107 031c 	add.w	r3, r7, #28
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	480c      	ldr	r0, [pc, #48]	; (8004c30 <HAL_I2C_MspInit+0xf0>)
 8004c00:	f003 f904 	bl	8007e0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004c0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c12:	6413      	str	r3, [r2, #64]	; 0x40
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_I2C_MspInit+0xec>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3730      	adds	r7, #48	; 0x30
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40005400 	.word	0x40005400
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020400 	.word	0x40020400
 8004c34:	40005800 	.word	0x40005800

08004c38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a69      	ldr	r2, [pc, #420]	; (8004dfc <HAL_SD_MspInit+0x1c4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f040 80cb 	bne.w	8004df2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	4a66      	ldr	r2, [pc, #408]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6c:	4b64      	ldr	r3, [pc, #400]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	4b60      	ldr	r3, [pc, #384]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	4a5f      	ldr	r2, [pc, #380]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	6313      	str	r3, [r2, #48]	; 0x30
 8004c88:	4b5d      	ldr	r3, [pc, #372]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c94:	2300      	movs	r3, #0
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	4a58      	ldr	r2, [pc, #352]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004c9e:	f043 0308 	orr.w	r3, r3, #8
 8004ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca4:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <HAL_SD_MspInit+0x1c8>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004cb0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004cb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cc6:	f107 0314 	add.w	r3, r7, #20
 8004cca:	4619      	mov	r1, r3
 8004ccc:	484d      	ldr	r0, [pc, #308]	; (8004e04 <HAL_SD_MspInit+0x1cc>)
 8004cce:	f003 f89d 	bl	8007e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4619      	mov	r1, r3
 8004cec:	4846      	ldr	r0, [pc, #280]	; (8004e08 <HAL_SD_MspInit+0x1d0>)
 8004cee:	f003 f88d 	bl	8007e0c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004cf2:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004cf4:	4a46      	ldr	r2, [pc, #280]	; (8004e10 <HAL_SD_MspInit+0x1d8>)
 8004cf6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004cf8:	4b44      	ldr	r3, [pc, #272]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cfe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d00:	4b42      	ldr	r3, [pc, #264]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d06:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d12:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d14:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d1a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d1c:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d22:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004d24:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d26:	2220      	movs	r2, #32
 8004d28:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d2a:	4b38      	ldr	r3, [pc, #224]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d30:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d34:	2204      	movs	r2, #4
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d38:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004d3e:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004d46:	4b31      	ldr	r3, [pc, #196]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004d4e:	482f      	ldr	r0, [pc, #188]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d50:	f002 fcc0 	bl	80076d4 <HAL_DMA_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004d5a:	f7ff fe0b 	bl	8004974 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_SD_MspInit+0x1d4>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d6c:	4a2a      	ldr	r2, [pc, #168]	; (8004e18 <HAL_SD_MspInit+0x1e0>)
 8004d6e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d76:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d78:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d7a:	2240      	movs	r2, #64	; 0x40
 8004d7c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d7e:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d84:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d8a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d8c:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d92:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d94:	4b1f      	ldr	r3, [pc, #124]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d9a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004d9e:	2220      	movs	r2, #32
 8004da0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004daa:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004dac:	2204      	movs	r2, #4
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004db0:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004db2:	2203      	movs	r2, #3
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004db8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004dc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004dc6:	4813      	ldr	r0, [pc, #76]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004dc8:	f002 fc84 	bl	80076d4 <HAL_DMA_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004dd2:	f7ff fdcf 	bl	8004974 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a0e      	ldr	r2, [pc, #56]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ddc:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <HAL_SD_MspInit+0x1dc>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004de2:	2200      	movs	r2, #0
 8004de4:	2100      	movs	r1, #0
 8004de6:	2031      	movs	r0, #49	; 0x31
 8004de8:	f002 fc3d 	bl	8007666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004dec:	2031      	movs	r0, #49	; 0x31
 8004dee:	f002 fc56 	bl	800769e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004df2:	bf00      	nop
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40020800 	.word	0x40020800
 8004e08:	40020c00 	.word	0x40020c00
 8004e0c:	20039638 	.word	0x20039638
 8004e10:	40026458 	.word	0x40026458
 8004e14:	2003996c 	.word	0x2003996c
 8004e18:	400264a0 	.word	0x400264a0

08004e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_SPI_MspInit+0x84>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d12c      	bne.n	8004e98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <HAL_SPI_MspInit+0x88>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_SPI_MspInit+0x88>)
 8004e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_SPI_MspInit+0x88>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_SPI_MspInit+0x88>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <HAL_SPI_MspInit+0x88>)
 8004e64:	f043 0302 	orr.w	r3, r3, #2
 8004e68:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_SPI_MspInit+0x88>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004e76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e84:	2303      	movs	r3, #3
 8004e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e88:	2305      	movs	r3, #5
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	4619      	mov	r1, r3
 8004e92:	4805      	ldr	r0, [pc, #20]	; (8004ea8 <HAL_SPI_MspInit+0x8c>)
 8004e94:	f002 ffba 	bl	8007e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e98:	bf00      	nop
 8004e9a:	3728      	adds	r7, #40	; 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40003800 	.word	0x40003800
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40020400 	.word	0x40020400

08004eac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb4:	f107 031c 	add.w	r3, r7, #28
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	; (8004f80 <HAL_TIM_PWM_MspInit+0xd4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d12d      	bne.n	8004f2a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ede:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004f06:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f1c:	f107 031c 	add.w	r3, r7, #28
 8004f20:	4619      	mov	r1, r3
 8004f22:	4819      	ldr	r0, [pc, #100]	; (8004f88 <HAL_TIM_PWM_MspInit+0xdc>)
 8004f24:	f002 ff72 	bl	8007e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f28:	e026      	b.n	8004f78 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_TIM_PWM_MspInit+0xe0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f3e:	f043 0302 	orr.w	r3, r3, #2
 8004f42:	6413      	str	r3, [r2, #64]	; 0x40
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]
}
 8004f50:	e012      	b.n	8004f78 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <HAL_TIM_PWM_MspInit+0xe4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10d      	bne.n	8004f78 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	bf00      	nop
 8004f7a:	3730      	adds	r7, #48	; 0x30
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800

08004f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a3e      	ldr	r2, [pc, #248]	; (800509c <HAL_TIM_Base_MspInit+0x108>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d116      	bne.n	8004fd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8004fb0:	f043 0310 	orr.w	r3, r3, #16
 8004fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	2036      	movs	r0, #54	; 0x36
 8004fc8:	f002 fb4d 	bl	8007666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004fcc:	2036      	movs	r0, #54	; 0x36
 8004fce:	f002 fb66 	bl	800769e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004fd2:	e05e      	b.n	8005092 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_TIM_Base_MspInit+0x110>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d116      	bne.n	800500c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8004fe8:	f043 0320 	orr.w	r3, r3, #32
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2037      	movs	r0, #55	; 0x37
 8005000:	f002 fb31 	bl	8007666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005004:	2037      	movs	r0, #55	; 0x37
 8005006:	f002 fb4a 	bl	800769e <HAL_NVIC_EnableIRQ>
}
 800500a:	e042      	b.n	8005092 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <HAL_TIM_Base_MspInit+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10e      	bne.n	8005034 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	6453      	str	r3, [r2, #68]	; 0x44
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	697b      	ldr	r3, [r7, #20]
}
 8005032:	e02e      	b.n	8005092 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <HAL_TIM_Base_MspInit+0x118>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10e      	bne.n	800505c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800504c:	6453      	str	r3, [r2, #68]	; 0x44
 800504e:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
}
 800505a:	e01a      	b.n	8005092 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <HAL_TIM_Base_MspInit+0x11c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d115      	bne.n	8005092 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	6413      	str	r3, [r2, #64]	; 0x40
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	202c      	movs	r0, #44	; 0x2c
 8005088:	f002 faed 	bl	8007666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800508c:	202c      	movs	r0, #44	; 0x2c
 800508e:	f002 fb06 	bl	800769e <HAL_NVIC_EnableIRQ>
}
 8005092:	bf00      	nop
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40001000 	.word	0x40001000
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40001400 	.word	0x40001400
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800
 80050b0:	40001c00 	.word	0x40001c00

080050b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_TIM_Encoder_MspInit+0x94>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d133      	bne.n	800513e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <HAL_TIM_Encoder_MspInit+0x98>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIM_Encoder_MspInit+0x98>)
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	6453      	str	r3, [r2, #68]	; 0x44
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <HAL_TIM_Encoder_MspInit+0x98>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <HAL_TIM_Encoder_MspInit+0x98>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	4a14      	ldr	r2, [pc, #80]	; (800514c <HAL_TIM_Encoder_MspInit+0x98>)
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	6313      	str	r3, [r2, #48]	; 0x30
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <HAL_TIM_Encoder_MspInit+0x98>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800510e:	23c0      	movs	r3, #192	; 0xc0
 8005110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005112:	2302      	movs	r3, #2
 8005114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800511e:	2303      	movs	r3, #3
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	4619      	mov	r1, r3
 8005128:	4809      	ldr	r0, [pc, #36]	; (8005150 <HAL_TIM_Encoder_MspInit+0x9c>)
 800512a:	f002 fe6f 	bl	8007e0c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	202c      	movs	r0, #44	; 0x2c
 8005134:	f002 fa97 	bl	8007666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005138:	202c      	movs	r0, #44	; 0x2c
 800513a:	f002 fab0 	bl	800769e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800513e:	bf00      	nop
 8005140:	3728      	adds	r7, #40	; 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40010400 	.word	0x40010400
 800514c:	40023800 	.word	0x40023800
 8005150:	40020800 	.word	0x40020800

08005154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 031c 	add.w	r3, r7, #28
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5c      	ldr	r2, [pc, #368]	; (80052e4 <HAL_TIM_MspPostInit+0x190>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d11f      	bne.n	80051b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	4a5a      	ldr	r2, [pc, #360]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 8005180:	f043 0310 	orr.w	r3, r3, #16
 8005184:	6313      	str	r3, [r2, #48]	; 0x30
 8005186:	4b58      	ldr	r3, [pc, #352]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	61bb      	str	r3, [r7, #24]
 8005190:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005198:	2302      	movs	r3, #2
 800519a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051a8:	f107 031c 	add.w	r3, r7, #28
 80051ac:	4619      	mov	r1, r3
 80051ae:	484f      	ldr	r0, [pc, #316]	; (80052ec <HAL_TIM_MspPostInit+0x198>)
 80051b0:	f002 fe2c 	bl	8007e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80051b4:	e091      	b.n	80052da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a4d      	ldr	r2, [pc, #308]	; (80052f0 <HAL_TIM_MspPostInit+0x19c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d11e      	bne.n	80051fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	4a47      	ldr	r2, [pc, #284]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 80051ca:	f043 0302 	orr.w	r3, r3, #2
 80051ce:	6313      	str	r3, [r2, #48]	; 0x30
 80051d0:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051ec:	2302      	movs	r3, #2
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f0:	f107 031c 	add.w	r3, r7, #28
 80051f4:	4619      	mov	r1, r3
 80051f6:	483f      	ldr	r0, [pc, #252]	; (80052f4 <HAL_TIM_MspPostInit+0x1a0>)
 80051f8:	f002 fe08 	bl	8007e0c <HAL_GPIO_Init>
}
 80051fc:	e06d      	b.n	80052da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a3d      	ldr	r2, [pc, #244]	; (80052f8 <HAL_TIM_MspPostInit+0x1a4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d11f      	bne.n	8005248 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	4a35      	ldr	r2, [pc, #212]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 8005212:	f043 0308 	orr.w	r3, r3, #8
 8005216:	6313      	str	r3, [r2, #48]	; 0x30
 8005218:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005224:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522a:	2302      	movs	r3, #2
 800522c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005236:	2302      	movs	r3, #2
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800523a:	f107 031c 	add.w	r3, r7, #28
 800523e:	4619      	mov	r1, r3
 8005240:	482e      	ldr	r0, [pc, #184]	; (80052fc <HAL_TIM_MspPostInit+0x1a8>)
 8005242:	f002 fde3 	bl	8007e0c <HAL_GPIO_Init>
}
 8005246:	e048      	b.n	80052da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2c      	ldr	r2, [pc, #176]	; (8005300 <HAL_TIM_MspPostInit+0x1ac>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d11f      	bne.n	8005292 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	4a23      	ldr	r2, [pc, #140]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	6313      	str	r3, [r2, #48]	; 0x30
 8005262:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800526e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005280:	2303      	movs	r3, #3
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005284:	f107 031c 	add.w	r3, r7, #28
 8005288:	4619      	mov	r1, r3
 800528a:	481a      	ldr	r0, [pc, #104]	; (80052f4 <HAL_TIM_MspPostInit+0x1a0>)
 800528c:	f002 fdbe 	bl	8007e0c <HAL_GPIO_Init>
}
 8005290:	e023      	b.n	80052da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_TIM_MspPostInit+0x1b0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d11e      	bne.n	80052da <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 80052a6:	f043 0302 	orr.w	r3, r3, #2
 80052aa:	6313      	str	r3, [r2, #48]	; 0x30
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <HAL_TIM_MspPostInit+0x194>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80052ca:	2303      	movs	r3, #3
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ce:	f107 031c 	add.w	r3, r7, #28
 80052d2:	4619      	mov	r1, r3
 80052d4:	4807      	ldr	r0, [pc, #28]	; (80052f4 <HAL_TIM_MspPostInit+0x1a0>)
 80052d6:	f002 fd99 	bl	8007e0c <HAL_GPIO_Init>
}
 80052da:	bf00      	nop
 80052dc:	3730      	adds	r7, #48	; 0x30
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40020400 	.word	0x40020400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40020c00 	.word	0x40020c00
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005310:	f107 0314 	add.w	r3, r7, #20
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	60da      	str	r2, [r3, #12]
 800531e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a19      	ldr	r2, [pc, #100]	; (800538c <HAL_UART_MspInit+0x84>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d12b      	bne.n	8005382 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_UART_MspInit+0x88>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	4a17      	ldr	r2, [pc, #92]	; (8005390 <HAL_UART_MspInit+0x88>)
 8005334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005338:	6413      	str	r3, [r2, #64]	; 0x40
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_UART_MspInit+0x88>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <HAL_UART_MspInit+0x88>)
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	4a10      	ldr	r2, [pc, #64]	; (8005390 <HAL_UART_MspInit+0x88>)
 8005350:	f043 0308 	orr.w	r3, r3, #8
 8005354:	6313      	str	r3, [r2, #48]	; 0x30
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <HAL_UART_MspInit+0x88>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005362:	2360      	movs	r3, #96	; 0x60
 8005364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005366:	2302      	movs	r3, #2
 8005368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536e:	2303      	movs	r3, #3
 8005370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005372:	2307      	movs	r3, #7
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	4619      	mov	r1, r3
 800537c:	4805      	ldr	r0, [pc, #20]	; (8005394 <HAL_UART_MspInit+0x8c>)
 800537e:	f002 fd45 	bl	8007e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005382:	bf00      	nop
 8005384:	3728      	adds	r7, #40	; 0x28
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40004400 	.word	0x40004400
 8005390:	40023800 	.word	0x40023800
 8005394:	40020c00 	.word	0x40020c00

08005398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800539c:	e7fe      	b.n	800539c <NMI_Handler+0x4>

0800539e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800539e:	b480      	push	{r7}
 80053a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053a2:	e7fe      	b.n	80053a2 <HardFault_Handler+0x4>

080053a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053a8:	e7fe      	b.n	80053a8 <MemManage_Handler+0x4>

080053aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053ae:	e7fe      	b.n	80053ae <BusFault_Handler+0x4>

080053b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053b4:	e7fe      	b.n	80053b4 <UsageFault_Handler+0x4>

080053b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053b6:	b480      	push	{r7}
 80053b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053e4:	f001 fc1e 	bl	8006c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}

080053ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80053f0:	2004      	movs	r0, #4
 80053f2:	f002 fee7 	bl	80081c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}

080053fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80053fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005402:	f002 fedf 	bl	80081c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005410:	4803      	ldr	r0, [pc, #12]	; (8005420 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005412:	f006 fef6 	bl	800c202 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005416:	4803      	ldr	r0, [pc, #12]	; (8005424 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005418:	f006 fef3 	bl	800c202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800541c:	bf00      	nop
 800541e:	bd80      	pop	{r7, pc}
 8005420:	200396f0 	.word	0x200396f0
 8005424:	200398ec 	.word	0x200398ec

08005428 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800542c:	4802      	ldr	r0, [pc, #8]	; (8005438 <SDIO_IRQHandler+0x10>)
 800542e:	f004 ff8f 	bl	800a350 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20039a4c 	.word	0x20039a4c

0800543c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005440:	4802      	ldr	r0, [pc, #8]	; (800544c <TIM6_DAC_IRQHandler+0x10>)
 8005442:	f006 fede 	bl	800c202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200399cc 	.word	0x200399cc

08005450 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005454:	4802      	ldr	r0, [pc, #8]	; (8005460 <TIM7_IRQHandler+0x10>)
 8005456:	f006 fed4 	bl	800c202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20039b70 	.word	0x20039b70

08005464 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005468:	4802      	ldr	r0, [pc, #8]	; (8005474 <DMA2_Stream2_IRQHandler+0x10>)
 800546a:	f002 fa5b 	bl	8007924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20039b10 	.word	0x20039b10

08005478 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800547c:	4802      	ldr	r0, [pc, #8]	; (8005488 <DMA2_Stream3_IRQHandler+0x10>)
 800547e:	f002 fa51 	bl	8007924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20039638 	.word	0x20039638

0800548c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005490:	4802      	ldr	r0, [pc, #8]	; (800549c <DMA2_Stream6_IRQHandler+0x10>)
 8005492:	f002 fa47 	bl	8007924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	2003996c 	.word	0x2003996c

080054a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e00a      	b.n	80054c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054b2:	f3af 8000 	nop.w
 80054b6:	4601      	mov	r1, r0
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	60ba      	str	r2, [r7, #8]
 80054be:	b2ca      	uxtb	r2, r1
 80054c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	3301      	adds	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	dbf0      	blt.n	80054b2 <_read+0x12>
	}

return len;
 80054d0:	687b      	ldr	r3, [r7, #4]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <_close>:
	}
	return len;
}

int _close(int file)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	return -1;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005502:	605a      	str	r2, [r3, #4]
	return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <_isatty>:

int _isatty(int file)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
	return 1;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
	return 0;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <_sbrk+0x5c>)
 800554e:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <_sbrk+0x60>)
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <_sbrk+0x64>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <_sbrk+0x64>)
 8005562:	4a12      	ldr	r2, [pc, #72]	; (80055ac <_sbrk+0x68>)
 8005564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <_sbrk+0x64>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	d207      	bcs.n	8005584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005574:	f00d f8da 	bl	801272c <__errno>
 8005578:	4602      	mov	r2, r0
 800557a:	230c      	movs	r3, #12
 800557c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	e009      	b.n	8005598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005584:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <_sbrk+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <_sbrk+0x64>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <_sbrk+0x64>)
 8005594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20050000 	.word	0x20050000
 80055a4:	00000800 	.word	0x00000800
 80055a8:	20000244 	.word	0x20000244
 80055ac:	2003bcc0 	.word	0x2003bcc0

080055b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <SystemInit+0x28>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <SystemInit+0x28>)
 80055bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <SystemInit+0x28>)
 80055c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055ca:	609a      	str	r2, [r3, #8]
#endif
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
	lcd_clear();
 80055e0:	f7fb fd5e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80055e4:	2100      	movs	r1, #0
 80055e6:	2000      	movs	r0, #0
 80055e8:	f7fb fd6a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80055ec:	4814      	ldr	r0, [pc, #80]	; (8005640 <batteryLowMode+0x64>)
 80055ee:	f7fb fd91 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80055f2:	2101      	movs	r1, #1
 80055f4:	2000      	movs	r0, #0
 80055f6:	f7fb fd63 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80055fa:	4812      	ldr	r0, [pc, #72]	; (8005644 <batteryLowMode+0x68>)
 80055fc:	f7fb fd8a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005600:	2152      	movs	r1, #82	; 0x52
 8005602:	4811      	ldr	r0, [pc, #68]	; (8005648 <batteryLowMode+0x6c>)
 8005604:	f7fc fc4c 	bl	8001ea0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005608:	2064      	movs	r0, #100	; 0x64
 800560a:	f001 fb2b 	bl	8006c64 <HAL_Delay>
		led.fullColor('Y');
 800560e:	2159      	movs	r1, #89	; 0x59
 8005610:	480d      	ldr	r0, [pc, #52]	; (8005648 <batteryLowMode+0x6c>)
 8005612:	f7fc fc45 	bl	8001ea0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005616:	2064      	movs	r0, #100	; 0x64
 8005618:	f001 fb24 	bl	8006c64 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 800561c:	480b      	ldr	r0, [pc, #44]	; (800564c <batteryLowMode+0x70>)
 800561e:	f7fc fbdb 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005622:	4603      	mov	r3, r0
 8005624:	2b02      	cmp	r3, #2
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0e6      	beq.n	8005600 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005636:	f001 fb15 	bl	8006c64 <HAL_Delay>
			break;
 800563a:	bf00      	nop
		}
	}
}
 800563c:	bf00      	nop
 800563e:	bd80      	pop	{r7, pc}
 8005640:	08017724 	.word	0x08017724
 8005644:	0801772c 	.word	0x0801772c
 8005648:	20000550 	.word	0x20000550
 800564c:	20000544 	.word	0x20000544

08005650 <cppInit>:

void cppInit(void)
{
 8005650:	b598      	push	{r3, r4, r7, lr}
 8005652:	af00      	add	r7, sp, #0
	lcd_init();
 8005654:	f7fb fce0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005658:	4842      	ldr	r0, [pc, #264]	; (8005764 <cppInit+0x114>)
 800565a:	f7fd fd51 	bl	8003100 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800565e:	2064      	movs	r0, #100	; 0x64
 8005660:	f001 fb00 	bl	8006c64 <HAL_Delay>
	power_sensor.updateValues();
 8005664:	483f      	ldr	r0, [pc, #252]	; (8005764 <cppInit+0x114>)
 8005666:	f7fd fd5b 	bl	8003120 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800566a:	f7fb fd19 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800566e:	2100      	movs	r1, #0
 8005670:	2000      	movs	r0, #0
 8005672:	f7fb fd25 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005676:	483c      	ldr	r0, [pc, #240]	; (8005768 <cppInit+0x118>)
 8005678:	f7fb fd4c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800567c:	2101      	movs	r1, #1
 800567e:	2000      	movs	r0, #0
 8005680:	f7fb fd1e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005684:	4837      	ldr	r0, [pc, #220]	; (8005764 <cppInit+0x114>)
 8005686:	f7fd fd75 	bl	8003174 <_ZN11PowerSensor17getButteryVoltageEv>
 800568a:	ee10 3a10 	vmov	r3, s0
 800568e:	4618      	mov	r0, r3
 8005690:	f7fa ff72 	bl	8000578 <__aeabi_f2d>
 8005694:	4603      	mov	r3, r0
 8005696:	460c      	mov	r4, r1
 8005698:	461a      	mov	r2, r3
 800569a:	4623      	mov	r3, r4
 800569c:	4833      	ldr	r0, [pc, #204]	; (800576c <cppInit+0x11c>)
 800569e:	f7fb fd39 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80056a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056a6:	f001 fadd 	bl	8006c64 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80056aa:	482e      	ldr	r0, [pc, #184]	; (8005764 <cppInit+0x114>)
 80056ac:	f7fd fd74 	bl	8003198 <_ZN11PowerSensor12butteryCheckEv>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <cppInit+0x6a>
 80056b6:	f7ff ff91 	bl	80055dc <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80056ba:	482d      	ldr	r0, [pc, #180]	; (8005770 <cppInit+0x120>)
 80056bc:	f7fd f8d2 	bl	8002864 <_ZN6Logger10sdCardInitEv>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <cppInit+0x86>
		led.fullColor('G');
 80056c6:	2147      	movs	r1, #71	; 0x47
 80056c8:	482a      	ldr	r0, [pc, #168]	; (8005774 <cppInit+0x124>)
 80056ca:	f7fc fbe9 	bl	8001ea0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80056ce:	2064      	movs	r0, #100	; 0x64
 80056d0:	f001 fac8 	bl	8006c64 <HAL_Delay>
 80056d4:	e006      	b.n	80056e4 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80056d6:	2152      	movs	r1, #82	; 0x52
 80056d8:	4826      	ldr	r0, [pc, #152]	; (8005774 <cppInit+0x124>)
 80056da:	f7fc fbe1 	bl	8001ea0 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80056de:	2064      	movs	r0, #100	; 0x64
 80056e0:	f001 fac0 	bl	8006c64 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80056e4:	4824      	ldr	r0, [pc, #144]	; (8005778 <cppInit+0x128>)
 80056e6:	f7fc fd37 	bl	8002158 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80056ea:	4824      	ldr	r0, [pc, #144]	; (800577c <cppInit+0x12c>)
 80056ec:	f7fd f9fa 	bl	8002ae4 <_ZN5Motor4initEv>
	encoder.init();
 80056f0:	4823      	ldr	r0, [pc, #140]	; (8005780 <cppInit+0x130>)
 80056f2:	f7fb fd53 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 80056f6:	4823      	ldr	r0, [pc, #140]	; (8005784 <cppInit+0x134>)
 80056f8:	f7fc f990 	bl	8001a1c <_ZN3IMU4initEv>
	line_trace.init();
 80056fc:	4822      	ldr	r0, [pc, #136]	; (8005788 <cppInit+0x138>)
 80056fe:	f7fc ff67 	bl	80025d0 <_ZN9LineTrace4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 8005702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005706:	f001 faad 	bl	8006c64 <HAL_Delay>

	led.fullColor('M');
 800570a:	214d      	movs	r1, #77	; 0x4d
 800570c:	4819      	ldr	r0, [pc, #100]	; (8005774 <cppInit+0x124>)
 800570e:	f7fc fbc7 	bl	8001ea0 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005712:	481c      	ldr	r0, [pc, #112]	; (8005784 <cppInit+0x134>)
 8005714:	f7fc fa52 	bl	8001bbc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005718:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800578c <cppInit+0x13c>
 800571c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005790 <cppInit+0x140>
 8005720:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005794 <cppInit+0x144>
 8005724:	4818      	ldr	r0, [pc, #96]	; (8005788 <cppInit+0x138>)
 8005726:	f7fc ff97 	bl	8002658 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
 800572a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8005798 <cppInit+0x148>
 800572e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800579c <cppInit+0x14c>
 8005732:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80057a0 <cppInit+0x150>
 8005736:	481b      	ldr	r0, [pc, #108]	; (80057a4 <cppInit+0x154>)
 8005738:	f7fe f8c2 	bl	80038c0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
 800573c:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80057a8 <cppInit+0x158>
 8005740:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80057ac <cppInit+0x15c>
 8005744:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80057b0 <cppInit+0x160>
 8005748:	4816      	ldr	r0, [pc, #88]	; (80057a4 <cppInit+0x154>)
 800574a:	f7fe f8d2 	bl	80038f2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 800574e:	480c      	ldr	r0, [pc, #48]	; (8005780 <cppInit+0x130>)
 8005750:	f7fb fe53 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005754:	4817      	ldr	r0, [pc, #92]	; (80057b4 <cppInit+0x164>)
 8005756:	f7fd fba0 	bl	8002e9a <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800575a:	4817      	ldr	r0, [pc, #92]	; (80057b8 <cppInit+0x168>)
 800575c:	f7fd fc38 	bl	8002fd0 <_ZN13PathFollowing4initEv>

}
 8005760:	bf00      	nop
 8005762:	bd98      	pop	{r3, r4, r7, pc}
 8005764:	20000554 	.word	0x20000554
 8005768:	08017730 	.word	0x08017730
 800576c:	08017738 	.word	0x08017738
 8005770:	20000574 	.word	0x20000574
 8005774:	20000550 	.word	0x20000550
 8005778:	20000248 	.word	0x20000248
 800577c:	2000054c 	.word	0x2000054c
 8005780:	2001f97c 	.word	0x2001f97c
 8005784:	20000560 	.word	0x20000560
 8005788:	2001f9cc 	.word	0x2001f9cc
 800578c:	00000000 	.word	0x00000000
 8005790:	360637bd 	.word	0x360637bd
 8005794:	3a03126f 	.word	0x3a03126f
 8005798:	3caa4fca 	.word	0x3caa4fca
 800579c:	41b7432d 	.word	0x41b7432d
 80057a0:	3ffdfa44 	.word	0x3ffdfa44
 80057a4:	2001f994 	.word	0x2001f994
 80057a8:	3b2b4fa5 	.word	0x3b2b4fa5
 80057ac:	3f87bb30 	.word	0x3f87bb30
 80057b0:	3df95810 	.word	0x3df95810
 80057b4:	2001fa38 	.word	0x2001fa38
 80057b8:	2001fb48 	.word	0x2001fb48

080057bc <cppFlip1ms>:

void cppFlip1ms(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80057c0:	4825      	ldr	r0, [pc, #148]	; (8005858 <cppFlip1ms+0x9c>)
 80057c2:	f7fc fd27 	bl	8002214 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80057c6:	4825      	ldr	r0, [pc, #148]	; (800585c <cppFlip1ms+0xa0>)
 80057c8:	f7fc f956 	bl	8001a78 <_ZN3IMU12updateValuesEv>
	mon_zg = imu.getOmega();
 80057cc:	4823      	ldr	r0, [pc, #140]	; (800585c <cppFlip1ms+0xa0>)
 80057ce:	f7fc f9ab 	bl	8001b28 <_ZN3IMU8getOmegaEv>
 80057d2:	eef0 7a40 	vmov.f32	s15, s0
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <cppFlip1ms+0xa4>)
 80057d8:	edc3 7a00 	vstr	s15, [r3]
	mon_offset = imu.getOffsetVal();
 80057dc:	481f      	ldr	r0, [pc, #124]	; (800585c <cppFlip1ms+0xa0>)
 80057de:	f7fc fa6e 	bl	8001cbe <_ZN3IMU12getOffsetValEv>
 80057e2:	eef0 7a40 	vmov.f32	s15, s0
 80057e6:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <cppFlip1ms+0xa8>)
 80057e8:	edc3 7a00 	vstr	s15, [r3]
	encoder.updateCnt();
 80057ec:	481e      	ldr	r0, [pc, #120]	; (8005868 <cppFlip1ms+0xac>)
 80057ee:	f7fb fcf7 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80057f2:	481e      	ldr	r0, [pc, #120]	; (800586c <cppFlip1ms+0xb0>)
 80057f4:	f7fc ffb0 	bl	8002758 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80057f8:	481d      	ldr	r0, [pc, #116]	; (8005870 <cppFlip1ms+0xb4>)
 80057fa:	f7fe f893 	bl	8003924 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80057fe:	481d      	ldr	r0, [pc, #116]	; (8005874 <cppFlip1ms+0xb8>)
 8005800:	f7fd fb40 	bl	8002e84 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005804:	481c      	ldr	r0, [pc, #112]	; (8005878 <cppFlip1ms+0xbc>)
 8005806:	f7fd f97f 	bl	8002b08 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(velocity_ctrl.getCurrentVelocity());
 800580a:	4819      	ldr	r0, [pc, #100]	; (8005870 <cppFlip1ms+0xb4>)
 800580c:	f7fe f8c8 	bl	80039a0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8005810:	eef0 7a40 	vmov.f32	s15, s0
 8005814:	eeb0 0a67 	vmov.f32	s0, s15
 8005818:	4818      	ldr	r0, [pc, #96]	; (800587c <cppFlip1ms+0xc0>)
 800581a:	f7fd f875 	bl	8002908 <_ZN6Logger8storeLogEf>

	static uint16_t twice_cnt;
	twice_cnt++;
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <cppFlip1ms+0xc4>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	4b16      	ldr	r3, [pc, #88]	; (8005880 <cppFlip1ms+0xc4>)
 8005828:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 3){ //3ms
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <cppFlip1ms+0xc4>)
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d90c      	bls.n	800584c <cppFlip1ms+0x90>
		sys_ident.inOutputStore(velocity_ctrl.getCurrentVelocity());
 8005832:	480f      	ldr	r0, [pc, #60]	; (8005870 <cppFlip1ms+0xb4>)
 8005834:	f7fe f8b4 	bl	80039a0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8005838:	eef0 7a40 	vmov.f32	s15, s0
 800583c:	eeb0 0a67 	vmov.f32	s0, s15
 8005840:	4810      	ldr	r0, [pc, #64]	; (8005884 <cppFlip1ms+0xc8>)
 8005842:	f7fd fdbb 	bl	80033bc <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8005846:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <cppFlip1ms+0xc4>)
 8005848:	2200      	movs	r2, #0
 800584a:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 800584c:	4806      	ldr	r0, [pc, #24]	; (8005868 <cppFlip1ms+0xac>)
 800584e:	f7fb fde3 	bl	8001418 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000248 	.word	0x20000248
 800585c:	20000560 	.word	0x20000560
 8005860:	20037274 	.word	0x20037274
 8005864:	20037278 	.word	0x20037278
 8005868:	2001f97c 	.word	0x2001f97c
 800586c:	2001f9cc 	.word	0x2001f9cc
 8005870:	2001f994 	.word	0x2001f994
 8005874:	2001fa38 	.word	0x2001fa38
 8005878:	2000054c 	.word	0x2000054c
 800587c:	20000574 	.word	0x20000574
 8005880:	2003727c 	.word	0x2003727c
 8005884:	2001fa68 	.word	0x2001fa68

08005888 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800588c:	4802      	ldr	r0, [pc, #8]	; (8005898 <cppFlip100ns+0x10>)
 800588e:	f7fc fc73 	bl	8002178 <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000248 	.word	0x20000248

0800589c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <cppFlip10ms+0x30>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <cppFlip10ms+0x30>)
 80058aa:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 15){ //150ms
 80058ac:	4b07      	ldr	r3, [pc, #28]	; (80058cc <cppFlip10ms+0x30>)
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	2b0e      	cmp	r3, #14
 80058b2:	d905      	bls.n	80058c0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80058b4:	4806      	ldr	r0, [pc, #24]	; (80058d0 <cppFlip10ms+0x34>)
 80058b6:	f7fd fdbd 	bl	8003434 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80058ba:	4b04      	ldr	r3, [pc, #16]	; (80058cc <cppFlip10ms+0x30>)
 80058bc:	2200      	movs	r2, #0
 80058be:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80058c0:	4b02      	ldr	r3, [pc, #8]	; (80058cc <cppFlip10ms+0x30>)
 80058c2:	881a      	ldrh	r2, [r3, #0]
 80058c4:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <cppFlip10ms+0x38>)
 80058c6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80058c8:	bf00      	nop
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2003727e 	.word	0x2003727e
 80058d0:	2001fa68 	.word	0x2001fa68
 80058d4:	20037270 	.word	0x20037270

080058d8 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4803      	ldr	r0, [pc, #12]	; (80058f4 <cppExit+0x1c>)
 80058e8:	f7fd fce2 	bl	80032b0 <_ZN10SideSensor12updateStatusEt>
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000540 	.word	0x20000540

080058f8 <cppLoop>:

void cppLoop(void)
{
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	b091      	sub	sp, #68	; 0x44
 80058fc:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80058fe:	48b8      	ldr	r0, [pc, #736]	; (8005be0 <cppLoop+0x2e8>)
 8005900:	f7fd fc7c 	bl	80031fc <_ZN12RotarySwitch8getValueEv>
 8005904:	4603      	mov	r3, r0
 8005906:	2b0f      	cmp	r3, #15
 8005908:	f201 8076 	bhi.w	80069f8 <cppLoop+0x1100>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <cppLoop+0x1c>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005955 	.word	0x08005955
 8005918:	08005e2d 	.word	0x08005e2d
 800591c:	08005f01 	.word	0x08005f01
 8005920:	08005f81 	.word	0x08005f81
 8005924:	0800603b 	.word	0x0800603b
 8005928:	080060c9 	.word	0x080060c9
 800592c:	0800618f 	.word	0x0800618f
 8005930:	080062b5 	.word	0x080062b5
 8005934:	08006355 	.word	0x08006355
 8005938:	080067f1 	.word	0x080067f1
 800593c:	080068e5 	.word	0x080068e5
 8005940:	08006977 	.word	0x08006977
 8005944:	080069f9 	.word	0x080069f9
 8005948:	080069f9 	.word	0x080069f9
 800594c:	080069f9 	.word	0x080069f9
 8005950:	080069f9 	.word	0x080069f9
	static int16_t selector;

	case 0:
		lcd_clear();
 8005954:	f7fb fba4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005958:	2100      	movs	r1, #0
 800595a:	2000      	movs	r0, #0
 800595c:	f7fb fbb0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKpV()*1000);
 8005960:	48a0      	ldr	r0, [pc, #640]	; (8005be4 <cppLoop+0x2ec>)
 8005962:	f7fc feab 	bl	80026bc <_ZN9LineTrace6getKpVEv>
 8005966:	eeb0 7a40 	vmov.f32	s14, s0
 800596a:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8005be8 <cppLoop+0x2f0>
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	ee17 0a90 	vmov	r0, s15
 8005976:	f7fa fdff 	bl	8000578 <__aeabi_f2d>
 800597a:	4603      	mov	r3, r0
 800597c:	460c      	mov	r4, r1
 800597e:	461a      	mov	r2, r3
 8005980:	4623      	mov	r3, r4
 8005982:	489a      	ldr	r0, [pc, #616]	; (8005bec <cppLoop+0x2f4>)
 8005984:	f7fb fbc6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005988:	2101      	movs	r1, #1
 800598a:	2000      	movs	r0, #0
 800598c:	f7fb fb98 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiV()*1000, line_trace.getKdV()*1000);
 8005990:	4894      	ldr	r0, [pc, #592]	; (8005be4 <cppLoop+0x2ec>)
 8005992:	f7fc fea2 	bl	80026da <_ZN9LineTrace6getKiVEv>
 8005996:	eeb0 7a40 	vmov.f32	s14, s0
 800599a:	eddf 7a93 	vldr	s15, [pc, #588]	; 8005be8 <cppLoop+0x2f0>
 800599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a2:	ee17 0a90 	vmov	r0, s15
 80059a6:	f7fa fde7 	bl	8000578 <__aeabi_f2d>
 80059aa:	4605      	mov	r5, r0
 80059ac:	460e      	mov	r6, r1
 80059ae:	488d      	ldr	r0, [pc, #564]	; (8005be4 <cppLoop+0x2ec>)
 80059b0:	f7fc fea2 	bl	80026f8 <_ZN9LineTrace6getKdVEv>
 80059b4:	eeb0 7a40 	vmov.f32	s14, s0
 80059b8:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8005be8 <cppLoop+0x2f0>
 80059bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c0:	ee17 0a90 	vmov	r0, s15
 80059c4:	f7fa fdd8 	bl	8000578 <__aeabi_f2d>
 80059c8:	4603      	mov	r3, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	e9cd 3400 	strd	r3, r4, [sp]
 80059d0:	462a      	mov	r2, r5
 80059d2:	4633      	mov	r3, r6
 80059d4:	4886      	ldr	r0, [pc, #536]	; (8005bf0 <cppLoop+0x2f8>)
 80059d6:	f7fb fb9d 	bl	8001114 <lcd_printf>

		static double adj_kp_v = line_trace.getKpV();
 80059da:	4b86      	ldr	r3, [pc, #536]	; (8005bf4 <cppLoop+0x2fc>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f3bf 8f5b 	dmb	ish
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01a      	beq.n	8005a2c <cppLoop+0x134>
 80059f6:	487f      	ldr	r0, [pc, #508]	; (8005bf4 <cppLoop+0x2fc>)
 80059f8:	f00b fe31 	bl	801165e <__cxa_guard_acquire>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00f      	beq.n	8005a2c <cppLoop+0x134>
 8005a0c:	4875      	ldr	r0, [pc, #468]	; (8005be4 <cppLoop+0x2ec>)
 8005a0e:	f7fc fe55 	bl	80026bc <_ZN9LineTrace6getKpVEv>
 8005a12:	ee10 3a10 	vmov	r3, s0
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fa fdae 	bl	8000578 <__aeabi_f2d>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4a75      	ldr	r2, [pc, #468]	; (8005bf8 <cppLoop+0x300>)
 8005a22:	e9c2 3400 	strd	r3, r4, [r2]
 8005a26:	4873      	ldr	r0, [pc, #460]	; (8005bf4 <cppLoop+0x2fc>)
 8005a28:	f00b fe25 	bl	8011676 <__cxa_guard_release>
		static double adj_ki_v = line_trace.getKiV();
 8005a2c:	4b73      	ldr	r3, [pc, #460]	; (8005bfc <cppLoop+0x304>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f3bf 8f5b 	dmb	ish
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2301      	moveq	r3, #1
 8005a40:	2300      	movne	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01a      	beq.n	8005a7e <cppLoop+0x186>
 8005a48:	486c      	ldr	r0, [pc, #432]	; (8005bfc <cppLoop+0x304>)
 8005a4a:	f00b fe08 	bl	801165e <__cxa_guard_acquire>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <cppLoop+0x186>
 8005a5e:	4861      	ldr	r0, [pc, #388]	; (8005be4 <cppLoop+0x2ec>)
 8005a60:	f7fc fe3b 	bl	80026da <_ZN9LineTrace6getKiVEv>
 8005a64:	ee10 3a10 	vmov	r3, s0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fa fd85 	bl	8000578 <__aeabi_f2d>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	4a63      	ldr	r2, [pc, #396]	; (8005c00 <cppLoop+0x308>)
 8005a74:	e9c2 3400 	strd	r3, r4, [r2]
 8005a78:	4860      	ldr	r0, [pc, #384]	; (8005bfc <cppLoop+0x304>)
 8005a7a:	f00b fdfc 	bl	8011676 <__cxa_guard_release>
		static double adj_kd_v = line_trace.getKdV();
 8005a7e:	4b61      	ldr	r3, [pc, #388]	; (8005c04 <cppLoop+0x30c>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f3bf 8f5b 	dmb	ish
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01a      	beq.n	8005ad0 <cppLoop+0x1d8>
 8005a9a:	485a      	ldr	r0, [pc, #360]	; (8005c04 <cppLoop+0x30c>)
 8005a9c:	f00b fddf 	bl	801165e <__cxa_guard_acquire>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	2300      	moveq	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00f      	beq.n	8005ad0 <cppLoop+0x1d8>
 8005ab0:	484c      	ldr	r0, [pc, #304]	; (8005be4 <cppLoop+0x2ec>)
 8005ab2:	f7fc fe21 	bl	80026f8 <_ZN9LineTrace6getKdVEv>
 8005ab6:	ee10 3a10 	vmov	r3, s0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fa fd5c 	bl	8000578 <__aeabi_f2d>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	4a50      	ldr	r2, [pc, #320]	; (8005c08 <cppLoop+0x310>)
 8005ac6:	e9c2 3400 	strd	r3, r4, [r2]
 8005aca:	484e      	ldr	r0, [pc, #312]	; (8005c04 <cppLoop+0x30c>)
 8005acc:	f00b fdd3 	bl	8011676 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005ad0:	484e      	ldr	r0, [pc, #312]	; (8005c0c <cppLoop+0x314>)
 8005ad2:	f7fc f981 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d022      	beq.n	8005b2c <cppLoop+0x234>
			led.LR(-1, 1);
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8005aec:	4848      	ldr	r0, [pc, #288]	; (8005c10 <cppLoop+0x318>)
 8005aee:	f7fc fa93 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005af2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005af6:	f001 f8b5 	bl	8006c64 <HAL_Delay>

			selector++;
 8005afa:	4b46      	ldr	r3, [pc, #280]	; (8005c14 <cppLoop+0x31c>)
 8005afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3301      	adds	r3, #1
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b21a      	sxth	r2, r3
 8005b08:	4b42      	ldr	r3, [pc, #264]	; (8005c14 <cppLoop+0x31c>)
 8005b0a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005b0c:	4b41      	ldr	r3, [pc, #260]	; (8005c14 <cppLoop+0x31c>)
 8005b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	dd02      	ble.n	8005b1c <cppLoop+0x224>
 8005b16:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <cppLoop+0x31c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8005b22:	483b      	ldr	r0, [pc, #236]	; (8005c10 <cppLoop+0x318>)
 8005b24:	f7fc fa78 	bl	8002018 <_ZN3LED2LREaa>
			sd_write_array_double("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);

			led.LR(-1, 0);
		}
		break;
 8005b28:	f000 bf68 	b.w	80069fc <cppLoop+0x1104>
		else if(joy_stick.getValue() == JOY_R){
 8005b2c:	4837      	ldr	r0, [pc, #220]	; (8005c0c <cppLoop+0x314>)
 8005b2e:	f7fc f953 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d06a      	beq.n	8005c18 <cppLoop+0x320>
			led.LR(-1, 1);
 8005b42:	2201      	movs	r2, #1
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295
 8005b48:	4831      	ldr	r0, [pc, #196]	; (8005c10 <cppLoop+0x318>)
 8005b4a:	f7fc fa65 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005b4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b52:	f001 f887 	bl	8006c64 <HAL_Delay>
			if(selector == 0){
 8005b56:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <cppLoop+0x31c>)
 8005b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <cppLoop+0x284>
				adj_kp_v = adj_kp_v + 0.00001;
 8005b60:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <cppLoop+0x300>)
 8005b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b66:	a31c      	add	r3, pc, #112	; (adr r3, 8005bd8 <cppLoop+0x2e0>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fba6 	bl	80002bc <__adddf3>
 8005b70:	4603      	mov	r3, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <cppLoop+0x300>)
 8005b76:	e9c2 3400 	strd	r3, r4, [r2]
 8005b7a:	e01f      	b.n	8005bbc <cppLoop+0x2c4>
			else if(selector == 1){
 8005b7c:	4b25      	ldr	r3, [pc, #148]	; (8005c14 <cppLoop+0x31c>)
 8005b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10d      	bne.n	8005ba2 <cppLoop+0x2aa>
				adj_ki_v = adj_ki_v + 0.00001;
 8005b86:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <cppLoop+0x308>)
 8005b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b8c:	a312      	add	r3, pc, #72	; (adr r3, 8005bd8 <cppLoop+0x2e0>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fb93 	bl	80002bc <__adddf3>
 8005b96:	4603      	mov	r3, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <cppLoop+0x308>)
 8005b9c:	e9c2 3400 	strd	r3, r4, [r2]
 8005ba0:	e00c      	b.n	8005bbc <cppLoop+0x2c4>
				adj_kd_v = adj_kd_v + 0.00001;
 8005ba2:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <cppLoop+0x310>)
 8005ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ba8:	a30b      	add	r3, pc, #44	; (adr r3, 8005bd8 <cppLoop+0x2e0>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f7fa fb85 	bl	80002bc <__adddf3>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <cppLoop+0x310>)
 8005bb8:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8005bbc:	2152      	movs	r1, #82	; 0x52
 8005bbe:	4814      	ldr	r0, [pc, #80]	; (8005c10 <cppLoop+0x318>)
 8005bc0:	f7fc f96e 	bl	8001ea0 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005bca:	4811      	ldr	r0, [pc, #68]	; (8005c10 <cppLoop+0x318>)
 8005bcc:	f7fc fa24 	bl	8002018 <_ZN3LED2LREaa>
		break;
 8005bd0:	f000 bf14 	b.w	80069fc <cppLoop+0x1104>
 8005bd4:	f3af 8000 	nop.w
 8005bd8:	88e368f1 	.word	0x88e368f1
 8005bdc:	3ee4f8b5 	.word	0x3ee4f8b5
 8005be0:	20000548 	.word	0x20000548
 8005be4:	2001f9cc 	.word	0x2001f9cc
 8005be8:	447a0000 	.word	0x447a0000
 8005bec:	0801773c 	.word	0x0801773c
 8005bf0:	08017748 	.word	0x08017748
 8005bf4:	20037290 	.word	0x20037290
 8005bf8:	20037288 	.word	0x20037288
 8005bfc:	200372a0 	.word	0x200372a0
 8005c00:	20037298 	.word	0x20037298
 8005c04:	200372b0 	.word	0x200372b0
 8005c08:	200372a8 	.word	0x200372a8
 8005c0c:	20000544 	.word	0x20000544
 8005c10:	20000550 	.word	0x20000550
 8005c14:	20037280 	.word	0x20037280
		else if(joy_stick.getValue() == JOY_L){
 8005c18:	48a9      	ldr	r0, [pc, #676]	; (8005ec0 <cppLoop+0x5c8>)
 8005c1a:	f7fc f8dd 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d048      	beq.n	8005cc0 <cppLoop+0x3c8>
			led.LR(-1, 1);
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f04f 31ff 	mov.w	r1, #4294967295
 8005c34:	48a3      	ldr	r0, [pc, #652]	; (8005ec4 <cppLoop+0x5cc>)
 8005c36:	f7fc f9ef 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005c3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c3e:	f001 f811 	bl	8006c64 <HAL_Delay>
			if(selector == 0){
 8005c42:	4ba1      	ldr	r3, [pc, #644]	; (8005ec8 <cppLoop+0x5d0>)
 8005c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10d      	bne.n	8005c68 <cppLoop+0x370>
				adj_kp_v = adj_kp_v - 0.00001;
 8005c4c:	4b9f      	ldr	r3, [pc, #636]	; (8005ecc <cppLoop+0x5d4>)
 8005c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c52:	a399      	add	r3, pc, #612	; (adr r3, 8005eb8 <cppLoop+0x5c0>)
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f7fa fb2e 	bl	80002b8 <__aeabi_dsub>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	4a9a      	ldr	r2, [pc, #616]	; (8005ecc <cppLoop+0x5d4>)
 8005c62:	e9c2 3400 	strd	r3, r4, [r2]
 8005c66:	e01f      	b.n	8005ca8 <cppLoop+0x3b0>
			else if(selector == 1){
 8005c68:	4b97      	ldr	r3, [pc, #604]	; (8005ec8 <cppLoop+0x5d0>)
 8005c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10d      	bne.n	8005c8e <cppLoop+0x396>
				adj_ki_v = adj_ki_v - 0.00001;
 8005c72:	4b97      	ldr	r3, [pc, #604]	; (8005ed0 <cppLoop+0x5d8>)
 8005c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c78:	a38f      	add	r3, pc, #572	; (adr r3, 8005eb8 <cppLoop+0x5c0>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fb1b 	bl	80002b8 <__aeabi_dsub>
 8005c82:	4603      	mov	r3, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	4a92      	ldr	r2, [pc, #584]	; (8005ed0 <cppLoop+0x5d8>)
 8005c88:	e9c2 3400 	strd	r3, r4, [r2]
 8005c8c:	e00c      	b.n	8005ca8 <cppLoop+0x3b0>
				adj_kd_v = adj_kd_v - 0.00001;
 8005c8e:	4b91      	ldr	r3, [pc, #580]	; (8005ed4 <cppLoop+0x5dc>)
 8005c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c94:	a388      	add	r3, pc, #544	; (adr r3, 8005eb8 <cppLoop+0x5c0>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa fb0d 	bl	80002b8 <__aeabi_dsub>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	4a8c      	ldr	r2, [pc, #560]	; (8005ed4 <cppLoop+0x5dc>)
 8005ca4:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8005ca8:	2152      	movs	r1, #82	; 0x52
 8005caa:	4886      	ldr	r0, [pc, #536]	; (8005ec4 <cppLoop+0x5cc>)
 8005cac:	f7fc f8f8 	bl	8001ea0 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8005cb6:	4883      	ldr	r0, [pc, #524]	; (8005ec4 <cppLoop+0x5cc>)
 8005cb8:	f7fc f9ae 	bl	8002018 <_ZN3LED2LREaa>
		break;
 8005cbc:	f000 be9e 	b.w	80069fc <cppLoop+0x1104>
		else if(joy_stick.getValue() == JOY_D){
 8005cc0:	487f      	ldr	r0, [pc, #508]	; (8005ec0 <cppLoop+0x5c8>)
 8005cc2:	f7fc f889 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d053      	beq.n	8005d7e <cppLoop+0x486>
			led.LR(-1, 1);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cdc:	4879      	ldr	r0, [pc, #484]	; (8005ec4 <cppLoop+0x5cc>)
 8005cde:	f7fc f99b 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005ce2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ce6:	f000 ffbd 	bl	8006c64 <HAL_Delay>
			sd_read_array_double("Params", "kp_v.txt", 1, &temp_kp_v);
 8005cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4979      	ldr	r1, [pc, #484]	; (8005ed8 <cppLoop+0x5e0>)
 8005cf2:	487a      	ldr	r0, [pc, #488]	; (8005edc <cppLoop+0x5e4>)
 8005cf4:	f7fb fd04 	bl	8001700 <sd_read_array_double>
			sd_read_array_double("Params", "ki_v.txt", 1, &temp_ki_v);
 8005cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4978      	ldr	r1, [pc, #480]	; (8005ee0 <cppLoop+0x5e8>)
 8005d00:	4876      	ldr	r0, [pc, #472]	; (8005edc <cppLoop+0x5e4>)
 8005d02:	f7fb fcfd 	bl	8001700 <sd_read_array_double>
			sd_read_array_double("Params", "kd_v.txt", 1, &temp_kd_v);
 8005d06:	f107 0320 	add.w	r3, r7, #32
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4975      	ldr	r1, [pc, #468]	; (8005ee4 <cppLoop+0x5ec>)
 8005d0e:	4873      	ldr	r0, [pc, #460]	; (8005edc <cppLoop+0x5e4>)
 8005d10:	f7fb fcf6 	bl	8001700 <sd_read_array_double>
			line_trace.setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 8005d14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005d18:	4618      	mov	r0, r3
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	f7fa ff7c 	bl	8000c18 <__aeabi_d2f>
 8005d20:	4605      	mov	r5, r0
 8005d22:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005d26:	4618      	mov	r0, r3
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7fa ff75 	bl	8000c18 <__aeabi_d2f>
 8005d2e:	4606      	mov	r6, r0
 8005d30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005d34:	4618      	mov	r0, r3
 8005d36:	4621      	mov	r1, r4
 8005d38:	f7fa ff6e 	bl	8000c18 <__aeabi_d2f>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	ee01 3a10 	vmov	s2, r3
 8005d42:	ee00 6a90 	vmov	s1, r6
 8005d46:	ee00 5a10 	vmov	s0, r5
 8005d4a:	4867      	ldr	r0, [pc, #412]	; (8005ee8 <cppLoop+0x5f0>)
 8005d4c:	f7fc fc9d 	bl	800268a <_ZN9LineTrace11setVeloGainEfff>
			adj_kp_v = temp_kp_v;
 8005d50:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005d54:	4a5d      	ldr	r2, [pc, #372]	; (8005ecc <cppLoop+0x5d4>)
 8005d56:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ki_v = temp_kp_v;
 8005d5a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005d5e:	4a5c      	ldr	r2, [pc, #368]	; (8005ed0 <cppLoop+0x5d8>)
 8005d60:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kd_v = temp_kp_v;
 8005d64:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005d68:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <cppLoop+0x5dc>)
 8005d6a:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f04f 31ff 	mov.w	r1, #4294967295
 8005d74:	4853      	ldr	r0, [pc, #332]	; (8005ec4 <cppLoop+0x5cc>)
 8005d76:	f7fc f94f 	bl	8002018 <_ZN3LED2LREaa>
		break;
 8005d7a:	f000 be3f 	b.w	80069fc <cppLoop+0x1104>
		else if(joy_stick.getValue() == JOY_C){
 8005d7e:	4850      	ldr	r0, [pc, #320]	; (8005ec0 <cppLoop+0x5c8>)
 8005d80:	f7fc f82a 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8633 	beq.w	80069fc <cppLoop+0x1104>
			led.LR(-1, 1);
 8005d96:	2201      	movs	r2, #1
 8005d98:	f04f 31ff 	mov.w	r1, #4294967295
 8005d9c:	4849      	ldr	r0, [pc, #292]	; (8005ec4 <cppLoop+0x5cc>)
 8005d9e:	f7fc f93b 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005da2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005da6:	f000 ff5d 	bl	8006c64 <HAL_Delay>
			sd_write_array_double("Params", "kp_v.txt", 1, &adj_kp_v, OVER_WRITE);
 8005daa:	2300      	movs	r3, #0
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	4b47      	ldr	r3, [pc, #284]	; (8005ecc <cppLoop+0x5d4>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	4949      	ldr	r1, [pc, #292]	; (8005ed8 <cppLoop+0x5e0>)
 8005db4:	4849      	ldr	r0, [pc, #292]	; (8005edc <cppLoop+0x5e4>)
 8005db6:	f7fb fc41 	bl	800163c <sd_write_array_double>
			sd_write_array_double("Params", "ki_v.txt", 1, &adj_ki_v, OVER_WRITE);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	4b44      	ldr	r3, [pc, #272]	; (8005ed0 <cppLoop+0x5d8>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4947      	ldr	r1, [pc, #284]	; (8005ee0 <cppLoop+0x5e8>)
 8005dc4:	4845      	ldr	r0, [pc, #276]	; (8005edc <cppLoop+0x5e4>)
 8005dc6:	f7fb fc39 	bl	800163c <sd_write_array_double>
			sd_write_array_double("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <cppLoop+0x5dc>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4944      	ldr	r1, [pc, #272]	; (8005ee4 <cppLoop+0x5ec>)
 8005dd4:	4841      	ldr	r0, [pc, #260]	; (8005edc <cppLoop+0x5e4>)
 8005dd6:	f7fb fc31 	bl	800163c <sd_write_array_double>
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);
 8005dda:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <cppLoop+0x5d4>)
 8005ddc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de0:	4618      	mov	r0, r3
 8005de2:	4621      	mov	r1, r4
 8005de4:	f7fa ff18 	bl	8000c18 <__aeabi_d2f>
 8005de8:	4605      	mov	r5, r0
 8005dea:	4b39      	ldr	r3, [pc, #228]	; (8005ed0 <cppLoop+0x5d8>)
 8005dec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005df0:	4618      	mov	r0, r3
 8005df2:	4621      	mov	r1, r4
 8005df4:	f7fa ff10 	bl	8000c18 <__aeabi_d2f>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <cppLoop+0x5dc>)
 8005dfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e00:	4618      	mov	r0, r3
 8005e02:	4621      	mov	r1, r4
 8005e04:	f7fa ff08 	bl	8000c18 <__aeabi_d2f>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	ee01 3a10 	vmov	s2, r3
 8005e0e:	ee00 6a90 	vmov	s1, r6
 8005e12:	ee00 5a10 	vmov	s0, r5
 8005e16:	4834      	ldr	r0, [pc, #208]	; (8005ee8 <cppLoop+0x5f0>)
 8005e18:	f7fc fc37 	bl	800268a <_ZN9LineTrace11setVeloGainEfff>
			led.LR(-1, 0);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e22:	4828      	ldr	r0, [pc, #160]	; (8005ec4 <cppLoop+0x5cc>)
 8005e24:	f7fc f8f8 	bl	8002018 <_ZN3LED2LREaa>
		break;
 8005e28:	f000 bde8 	b.w	80069fc <cppLoop+0x1104>

	case 1:
		lcd_clear();
 8005e2c:	f7fb f938 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e30:	2100      	movs	r1, #0
 8005e32:	2000      	movs	r0, #0
 8005e34:	f7fb f944 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005e38:	482c      	ldr	r0, [pc, #176]	; (8005eec <cppLoop+0x5f4>)
 8005e3a:	f7fb f96b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e3e:	2101      	movs	r1, #1
 8005e40:	2000      	movs	r0, #0
 8005e42:	f7fb f93d 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8005e46:	482a      	ldr	r0, [pc, #168]	; (8005ef0 <cppLoop+0x5f8>)
 8005e48:	f7fb f964 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005e4c:	481c      	ldr	r0, [pc, #112]	; (8005ec0 <cppLoop+0x5c8>)
 8005e4e:	f7fb ffc3 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	bf0c      	ite	eq
 8005e58:	2301      	moveq	r3, #1
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 85ce 	beq.w	8006a00 <cppLoop+0x1108>
			HAL_Delay(500);
 8005e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e68:	f000 fefc 	bl	8006c64 <HAL_Delay>

			velocity_ctrl.start();
 8005e6c:	4821      	ldr	r0, [pc, #132]	; (8005ef4 <cppLoop+0x5fc>)
 8005e6e:	f7fd fd6c 	bl	800394a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005e72:	481d      	ldr	r0, [pc, #116]	; (8005ee8 <cppLoop+0x5f0>)
 8005e74:	f7fc fca8 	bl	80027c8 <_ZN9LineTrace5startEv>
			line_trace.setTargetVelocity(0.8);
 8005e78:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8005ef8 <cppLoop+0x600>
 8005e7c:	481a      	ldr	r0, [pc, #104]	; (8005ee8 <cppLoop+0x5f0>)
 8005e7e:	f7fc fc59 	bl	8002734 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295
 8005e86:	2101      	movs	r1, #1
 8005e88:	480e      	ldr	r0, [pc, #56]	; (8005ec4 <cppLoop+0x5cc>)
 8005e8a:	f7fc f8c5 	bl	8002018 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005e8e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005e92:	f000 fee7 	bl	8006c64 <HAL_Delay>

			velocity_ctrl.stop();
 8005e96:	4817      	ldr	r0, [pc, #92]	; (8005ef4 <cppLoop+0x5fc>)
 8005e98:	f7fd fd66 	bl	8003968 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4808      	ldr	r0, [pc, #32]	; (8005ec4 <cppLoop+0x5cc>)
 8005ea4:	f7fc f8b8 	bl	8002018 <_ZN3LED2LREaa>

			logger.stop();
 8005ea8:	4814      	ldr	r0, [pc, #80]	; (8005efc <cppLoop+0x604>)
 8005eaa:	f7fc fdfa 	bl	8002aa2 <_ZN6Logger4stopEv>
		}

		break;
 8005eae:	f000 bda7 	b.w	8006a00 <cppLoop+0x1108>
 8005eb2:	bf00      	nop
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	88e368f1 	.word	0x88e368f1
 8005ebc:	3ee4f8b5 	.word	0x3ee4f8b5
 8005ec0:	20000544 	.word	0x20000544
 8005ec4:	20000550 	.word	0x20000550
 8005ec8:	20037280 	.word	0x20037280
 8005ecc:	20037288 	.word	0x20037288
 8005ed0:	20037298 	.word	0x20037298
 8005ed4:	200372a8 	.word	0x200372a8
 8005ed8:	08017758 	.word	0x08017758
 8005edc:	08017764 	.word	0x08017764
 8005ee0:	0801776c 	.word	0x0801776c
 8005ee4:	08017778 	.word	0x08017778
 8005ee8:	2001f9cc 	.word	0x2001f9cc
 8005eec:	08017784 	.word	0x08017784
 8005ef0:	08017790 	.word	0x08017790
 8005ef4:	2001f994 	.word	0x2001f994
 8005ef8:	3f4ccccd 	.word	0x3f4ccccd
 8005efc:	20000574 	.word	0x20000574

	case 2:
		lcd_clear();
 8005f00:	f7fb f8ce 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f04:	2100      	movs	r1, #0
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fb f8da 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8005f0c:	48ce      	ldr	r0, [pc, #824]	; (8006248 <cppLoop+0x950>)
 8005f0e:	f7fb f901 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f12:	2101      	movs	r1, #1
 8005f14:	2000      	movs	r0, #0
 8005f16:	f7fb f8d3 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8005f1a:	48cc      	ldr	r0, [pc, #816]	; (800624c <cppLoop+0x954>)
 8005f1c:	f7fb f8fa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f20:	48cb      	ldr	r0, [pc, #812]	; (8006250 <cppLoop+0x958>)
 8005f22:	f7fb ff59 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8566 	beq.w	8006a04 <cppLoop+0x110c>
			led.LR(-1, 1);
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f3e:	48c5      	ldr	r0, [pc, #788]	; (8006254 <cppLoop+0x95c>)
 8005f40:	f7fc f86a 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8005f44:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005f48:	f000 fe8c 	bl	8006c64 <HAL_Delay>

			sys_ident.setInputRatio(0.2);
 8005f4c:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8006258 <cppLoop+0x960>
 8005f50:	48c2      	ldr	r0, [pc, #776]	; (800625c <cppLoop+0x964>)
 8005f52:	f7fd fac1 	bl	80034d8 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8005f56:	48c1      	ldr	r0, [pc, #772]	; (800625c <cppLoop+0x964>)
 8005f58:	f7fd face 	bl	80034f8 <_ZN20SystemIdentification5startEv>
			HAL_Delay(15000);
 8005f5c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005f60:	f000 fe80 	bl	8006c64 <HAL_Delay>
			sys_ident.stop();
 8005f64:	48bd      	ldr	r0, [pc, #756]	; (800625c <cppLoop+0x964>)
 8005f66:	f7fd fadb 	bl	8003520 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8005f6a:	48bc      	ldr	r0, [pc, #752]	; (800625c <cppLoop+0x964>)
 8005f6c:	f7fd fa46 	bl	80033fc <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8005f70:	2200      	movs	r2, #0
 8005f72:	f04f 31ff 	mov.w	r1, #4294967295
 8005f76:	48b7      	ldr	r0, [pc, #732]	; (8006254 <cppLoop+0x95c>)
 8005f78:	f7fc f84e 	bl	8002018 <_ZN3LED2LREaa>
		}
		break;
 8005f7c:	f000 bd42 	b.w	8006a04 <cppLoop+0x110c>

	case 3:
		led.fullColor('C');
 8005f80:	2143      	movs	r1, #67	; 0x43
 8005f82:	48b4      	ldr	r0, [pc, #720]	; (8006254 <cppLoop+0x95c>)
 8005f84:	f7fb ff8c 	bl	8001ea0 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f88:	f7fb f88a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fb f896 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005f94:	48b2      	ldr	r0, [pc, #712]	; (8006260 <cppLoop+0x968>)
 8005f96:	f7fb f8bd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f7fb f88f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005fa2:	48b0      	ldr	r0, [pc, #704]	; (8006264 <cppLoop+0x96c>)
 8005fa4:	f7fb f8b6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005fa8:	48a9      	ldr	r0, [pc, #676]	; (8006250 <cppLoop+0x958>)
 8005faa:	f7fb ff15 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8524 	beq.w	8006a08 <cppLoop+0x1110>
			led.LR(-1, 1);
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc6:	48a3      	ldr	r0, [pc, #652]	; (8006254 <cppLoop+0x95c>)
 8005fc8:	f7fc f826 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005fcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fd0:	f000 fe48 	bl	8006c64 <HAL_Delay>

			logger.start();
 8005fd4:	48a4      	ldr	r0, [pc, #656]	; (8006268 <cppLoop+0x970>)
 8005fd6:	f7fc fd55 	bl	8002a84 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005fda:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 800626c <cppLoop+0x974>
 8005fde:	48a4      	ldr	r0, [pc, #656]	; (8006270 <cppLoop+0x978>)
 8005fe0:	f7fc fb99 	bl	8002716 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005fe4:	48a2      	ldr	r0, [pc, #648]	; (8006270 <cppLoop+0x978>)
 8005fe6:	f7fc fbef 	bl	80027c8 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005fea:	f241 3088 	movw	r0, #5000	; 0x1388
 8005fee:	f000 fe39 	bl	8006c64 <HAL_Delay>

			logger.stop();
 8005ff2:	489d      	ldr	r0, [pc, #628]	; (8006268 <cppLoop+0x970>)
 8005ff4:	f7fc fd55 	bl	8002aa2 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005ff8:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 800626c <cppLoop+0x974>
 8005ffc:	489c      	ldr	r0, [pc, #624]	; (8006270 <cppLoop+0x978>)
 8005ffe:	f7fc fb8a 	bl	8002716 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006002:	489b      	ldr	r0, [pc, #620]	; (8006270 <cppLoop+0x978>)
 8006004:	f7fc fbf0 	bl	80027e8 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006008:	f04f 32ff 	mov.w	r2, #4294967295
 800600c:	2101      	movs	r1, #1
 800600e:	4891      	ldr	r0, [pc, #580]	; (8006254 <cppLoop+0x95c>)
 8006010:	f7fc f802 	bl	8002018 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8006014:	4a97      	ldr	r2, [pc, #604]	; (8006274 <cppLoop+0x97c>)
 8006016:	4998      	ldr	r1, [pc, #608]	; (8006278 <cppLoop+0x980>)
 8006018:	4893      	ldr	r0, [pc, #588]	; (8006268 <cppLoop+0x970>)
 800601a:	f7fc fce6 	bl	80029ea <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 800601e:	f04f 32ff 	mov.w	r2, #4294967295
 8006022:	2100      	movs	r1, #0
 8006024:	488b      	ldr	r0, [pc, #556]	; (8006254 <cppLoop+0x95c>)
 8006026:	f7fb fff7 	bl	8002018 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 800602a:	2200      	movs	r2, #0
 800602c:	f04f 31ff 	mov.w	r1, #4294967295
 8006030:	4888      	ldr	r0, [pc, #544]	; (8006254 <cppLoop+0x95c>)
 8006032:	f7fb fff1 	bl	8002018 <_ZN3LED2LREaa>
		}

		break;
 8006036:	f000 bce7 	b.w	8006a08 <cppLoop+0x1110>

	case 4:
		led.fullColor('M');
 800603a:	214d      	movs	r1, #77	; 0x4d
 800603c:	4885      	ldr	r0, [pc, #532]	; (8006254 <cppLoop+0x95c>)
 800603e:	f7fb ff2f 	bl	8001ea0 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006042:	f7fb f82d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006046:	2100      	movs	r1, #0
 8006048:	2000      	movs	r0, #0
 800604a:	f7fb f839 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 800604e:	488b      	ldr	r0, [pc, #556]	; (800627c <cppLoop+0x984>)
 8006050:	f7fb f860 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006054:	2101      	movs	r1, #1
 8006056:	2000      	movs	r0, #0
 8006058:	f7fb f832 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800605c:	4881      	ldr	r0, [pc, #516]	; (8006264 <cppLoop+0x96c>)
 800605e:	f7fb f859 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006062:	487b      	ldr	r0, [pc, #492]	; (8006250 <cppLoop+0x958>)
 8006064:	f7fb feb8 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8006068:	4603      	mov	r3, r0
 800606a:	2b02      	cmp	r3, #2
 800606c:	bf0c      	ite	eq
 800606e:	2301      	moveq	r3, #1
 8006070:	2300      	movne	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 84c9 	beq.w	8006a0c <cppLoop+0x1114>
			led.LR(-1, 1);
 800607a:	2201      	movs	r2, #1
 800607c:	f04f 31ff 	mov.w	r1, #4294967295
 8006080:	4874      	ldr	r0, [pc, #464]	; (8006254 <cppLoop+0x95c>)
 8006082:	f7fb ffc9 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800608a:	f000 fdeb 	bl	8006c64 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 800608e:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800626c <cppLoop+0x974>
 8006092:	4877      	ldr	r0, [pc, #476]	; (8006270 <cppLoop+0x978>)
 8006094:	f7fc fb4e 	bl	8002734 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006098:	4879      	ldr	r0, [pc, #484]	; (8006280 <cppLoop+0x988>)
 800609a:	f7fd fc56 	bl	800394a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 800609e:	4874      	ldr	r0, [pc, #464]	; (8006270 <cppLoop+0x978>)
 80060a0:	f7fc fb92 	bl	80027c8 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80060a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80060a8:	f000 fddc 	bl	8006c64 <HAL_Delay>

			line_trace.stop();
 80060ac:	4870      	ldr	r0, [pc, #448]	; (8006270 <cppLoop+0x978>)
 80060ae:	f7fc fb9b 	bl	80027e8 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 80060b2:	4873      	ldr	r0, [pc, #460]	; (8006280 <cppLoop+0x988>)
 80060b4:	f7fd fc58 	bl	8003968 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 80060b8:	2200      	movs	r2, #0
 80060ba:	f04f 31ff 	mov.w	r1, #4294967295
 80060be:	4865      	ldr	r0, [pc, #404]	; (8006254 <cppLoop+0x95c>)
 80060c0:	f7fb ffaa 	bl	8002018 <_ZN3LED2LREaa>
		}
		break;
 80060c4:	f000 bca2 	b.w	8006a0c <cppLoop+0x1114>

	case 5:
		led.fullColor('Y');
 80060c8:	2159      	movs	r1, #89	; 0x59
 80060ca:	4862      	ldr	r0, [pc, #392]	; (8006254 <cppLoop+0x95c>)
 80060cc:	f7fb fee8 	bl	8001ea0 <_ZN3LED9fullColorEc>

		lcd_clear();
 80060d0:	f7fa ffe6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80060d4:	2100      	movs	r1, #0
 80060d6:	2000      	movs	r0, #0
 80060d8:	f7fa fff2 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80060dc:	4869      	ldr	r0, [pc, #420]	; (8006284 <cppLoop+0x98c>)
 80060de:	f7fb f819 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80060e2:	2101      	movs	r1, #1
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7fa ffeb 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80060ea:	4867      	ldr	r0, [pc, #412]	; (8006288 <cppLoop+0x990>)
 80060ec:	f7fb f812 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80060f0:	4857      	ldr	r0, [pc, #348]	; (8006250 <cppLoop+0x958>)
 80060f2:	f7fb fe71 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	bf0c      	ite	eq
 80060fc:	2301      	moveq	r3, #1
 80060fe:	2300      	movne	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8484 	beq.w	8006a10 <cppLoop+0x1118>
			led.LR(-1, 1);
 8006108:	2201      	movs	r2, #1
 800610a:	f04f 31ff 	mov.w	r1, #4294967295
 800610e:	4851      	ldr	r0, [pc, #324]	; (8006254 <cppLoop+0x95c>)
 8006110:	f7fb ff82 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006118:	f000 fda4 	bl	8006c64 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800611c:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800628c <cppLoop+0x994>
 8006120:	4853      	ldr	r0, [pc, #332]	; (8006270 <cppLoop+0x978>)
 8006122:	f7fc faf8 	bl	8002716 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006126:	4852      	ldr	r0, [pc, #328]	; (8006270 <cppLoop+0x978>)
 8006128:	f7fc fb4e 	bl	80027c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800612c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006130:	f000 fd98 	bl	8006c64 <HAL_Delay>

			led.fullColor('R');
 8006134:	2152      	movs	r1, #82	; 0x52
 8006136:	4847      	ldr	r0, [pc, #284]	; (8006254 <cppLoop+0x95c>)
 8006138:	f7fb feb2 	bl	8001ea0 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 800613c:	4854      	ldr	r0, [pc, #336]	; (8006290 <cppLoop+0x998>)
 800613e:	f7fb f98d 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006142:	4853      	ldr	r0, [pc, #332]	; (8006290 <cppLoop+0x998>)
 8006144:	f7fb f959 	bl	80013fa <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006148:	f242 7010 	movw	r0, #10000	; 0x2710
 800614c:	f000 fd8a 	bl	8006c64 <HAL_Delay>

			line_trace.stop();
 8006150:	4847      	ldr	r0, [pc, #284]	; (8006270 <cppLoop+0x978>)
 8006152:	f7fc fb49 	bl	80027e8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006156:	494f      	ldr	r1, [pc, #316]	; (8006294 <cppLoop+0x99c>)
 8006158:	484f      	ldr	r0, [pc, #316]	; (8006298 <cppLoop+0x9a0>)
 800615a:	f7fb f995 	bl	8001488 <user_fopen>
			float d = encoder.getDistance();
 800615e:	484c      	ldr	r0, [pc, #304]	; (8006290 <cppLoop+0x998>)
 8006160:	f7fb f93c 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8006164:	eef0 7a40 	vmov.f32	s15, s0
 8006168:	edc7 7a07 	vstr	s15, [r7, #28]
			sd_write_float(1, &d, ADD_WRITE);
 800616c:	f107 031c 	add.w	r3, r7, #28
 8006170:	2201      	movs	r2, #1
 8006172:	4619      	mov	r1, r3
 8006174:	2001      	movs	r0, #1
 8006176:	f7fb f9a9 	bl	80014cc <sd_write_float>
			user_fclose();
 800617a:	f7fb f997 	bl	80014ac <user_fclose>

			led.LR(-1, 0);
 800617e:	2200      	movs	r2, #0
 8006180:	f04f 31ff 	mov.w	r1, #4294967295
 8006184:	4833      	ldr	r0, [pc, #204]	; (8006254 <cppLoop+0x95c>)
 8006186:	f7fb ff47 	bl	8002018 <_ZN3LED2LREaa>
		}

		break;
 800618a:	f000 bc41 	b.w	8006a10 <cppLoop+0x1118>

	case 6:
		led.fullColor('C');
 800618e:	2143      	movs	r1, #67	; 0x43
 8006190:	4830      	ldr	r0, [pc, #192]	; (8006254 <cppLoop+0x95c>)
 8006192:	f7fb fe85 	bl	8001ea0 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006196:	f7fa ff83 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800619a:	2100      	movs	r1, #0
 800619c:	2000      	movs	r0, #0
 800619e:	f7fa ff8f 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 80061a2:	483e      	ldr	r0, [pc, #248]	; (800629c <cppLoop+0x9a4>)
 80061a4:	f7fa ffb6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061a8:	2101      	movs	r1, #1
 80061aa:	2000      	movs	r0, #0
 80061ac:	f7fa ff88 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80061b0:	4826      	ldr	r0, [pc, #152]	; (800624c <cppLoop+0x954>)
 80061b2:	f7fa ffaf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80061b6:	4826      	ldr	r0, [pc, #152]	; (8006250 <cppLoop+0x958>)
 80061b8:	f7fb fe0e 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b02      	cmp	r3, #2
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8423 	beq.w	8006a14 <cppLoop+0x111c>
			HAL_Delay(500);
 80061ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061d2:	f000 fd47 	bl	8006c64 <HAL_Delay>
			led.LR(-1, 1);
 80061d6:	2201      	movs	r2, #1
 80061d8:	f04f 31ff 	mov.w	r1, #4294967295
 80061dc:	481d      	ldr	r0, [pc, #116]	; (8006254 <cppLoop+0x95c>)
 80061de:	f7fb ff1b 	bl	8002018 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 80061e2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80062a0 <cppLoop+0x9a8>
 80061e6:	4822      	ldr	r0, [pc, #136]	; (8006270 <cppLoop+0x978>)
 80061e8:	f7fc fa95 	bl	8002716 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80061ec:	4820      	ldr	r0, [pc, #128]	; (8006270 <cppLoop+0x978>)
 80061ee:	f7fc faeb 	bl	80027c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80061f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061f6:	f000 fd35 	bl	8006c64 <HAL_Delay>

			led.fullColor('R');
 80061fa:	2152      	movs	r1, #82	; 0x52
 80061fc:	4815      	ldr	r0, [pc, #84]	; (8006254 <cppLoop+0x95c>)
 80061fe:	f7fb fe4f 	bl	8001ea0 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006202:	4823      	ldr	r0, [pc, #140]	; (8006290 <cppLoop+0x998>)
 8006204:	f7fb f92a 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006208:	4821      	ldr	r0, [pc, #132]	; (8006290 <cppLoop+0x998>)
 800620a:	f7fb f8f6 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 800620e:	4825      	ldr	r0, [pc, #148]	; (80062a4 <cppLoop+0x9ac>)
 8006210:	f7fc fe43 	bl	8002e9a <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006214:	4814      	ldr	r0, [pc, #80]	; (8006268 <cppLoop+0x970>)
 8006216:	f7fc fc35 	bl	8002a84 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 800621a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800621e:	f000 fd21 	bl	8006c64 <HAL_Delay>

			line_trace.stop();
 8006222:	4813      	ldr	r0, [pc, #76]	; (8006270 <cppLoop+0x978>)
 8006224:	f7fc fae0 	bl	80027e8 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006228:	480f      	ldr	r0, [pc, #60]	; (8006268 <cppLoop+0x970>)
 800622a:	f7fc fc3a 	bl	8002aa2 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <cppLoop+0x9b0>)
 8006230:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <cppLoop+0x9b4>)
 8006232:	491f      	ldr	r1, [pc, #124]	; (80062b0 <cppLoop+0x9b8>)
 8006234:	480c      	ldr	r0, [pc, #48]	; (8006268 <cppLoop+0x970>)
 8006236:	f7fc fc02 	bl	8002a3e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 800623a:	2200      	movs	r2, #0
 800623c:	f04f 31ff 	mov.w	r1, #4294967295
 8006240:	4804      	ldr	r0, [pc, #16]	; (8006254 <cppLoop+0x95c>)
 8006242:	f7fb fee9 	bl	8002018 <_ZN3LED2LREaa>
		}

		break;
 8006246:	e3e5      	b.n	8006a14 <cppLoop+0x111c>
 8006248:	08017798 	.word	0x08017798
 800624c:	080177a0 	.word	0x080177a0
 8006250:	20000544 	.word	0x20000544
 8006254:	20000550 	.word	0x20000550
 8006258:	3e4ccccd 	.word	0x3e4ccccd
 800625c:	2001fa68 	.word	0x2001fa68
 8006260:	080177a8 	.word	0x080177a8
 8006264:	080177b0 	.word	0x080177b0
 8006268:	20000574 	.word	0x20000574
 800626c:	3dcccccd 	.word	0x3dcccccd
 8006270:	2001f9cc 	.word	0x2001f9cc
 8006274:	080177b8 	.word	0x080177b8
 8006278:	080177c4 	.word	0x080177c4
 800627c:	080177d4 	.word	0x080177d4
 8006280:	2001f994 	.word	0x2001f994
 8006284:	080177e0 	.word	0x080177e0
 8006288:	080177e8 	.word	0x080177e8
 800628c:	00000000 	.word	0x00000000
 8006290:	2001f97c 	.word	0x2001f97c
 8006294:	080177f4 	.word	0x080177f4
 8006298:	080177fc 	.word	0x080177fc
 800629c:	08017808 	.word	0x08017808
 80062a0:	3d8f5c29 	.word	0x3d8f5c29
 80062a4:	2001fa38 	.word	0x2001fa38
 80062a8:	08017814 	.word	0x08017814
 80062ac:	08017820 	.word	0x08017820
 80062b0:	0801782c 	.word	0x0801782c

	case 7:
		led.fullColor('M');
 80062b4:	214d      	movs	r1, #77	; 0x4d
 80062b6:	48b6      	ldr	r0, [pc, #728]	; (8006590 <cppLoop+0xc98>)
 80062b8:	f7fb fdf2 	bl	8001ea0 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062bc:	f7fa fef0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062c0:	2100      	movs	r1, #0
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fa fefc 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 80062c8:	48b2      	ldr	r0, [pc, #712]	; (8006594 <cppLoop+0xc9c>)
 80062ca:	f7fa ff23 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062ce:	2101      	movs	r1, #1
 80062d0:	2000      	movs	r0, #0
 80062d2:	f7fa fef5 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 80062d6:	48b0      	ldr	r0, [pc, #704]	; (8006598 <cppLoop+0xca0>)
 80062d8:	f7fa ff1c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80062dc:	48af      	ldr	r0, [pc, #700]	; (800659c <cppLoop+0xca4>)
 80062de:	f7fb fd7b 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8392 	beq.w	8006a18 <cppLoop+0x1120>
			led.LR(-1, 1);
 80062f4:	2201      	movs	r2, #1
 80062f6:	f04f 31ff 	mov.w	r1, #4294967295
 80062fa:	48a5      	ldr	r0, [pc, #660]	; (8006590 <cppLoop+0xc98>)
 80062fc:	f7fb fe8c 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006304:	f000 fcae 	bl	8006c64 <HAL_Delay>

			led.fullColor('R');
 8006308:	2152      	movs	r1, #82	; 0x52
 800630a:	48a1      	ldr	r0, [pc, #644]	; (8006590 <cppLoop+0xc98>)
 800630c:	f7fb fdc8 	bl	8001ea0 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006310:	eddf 0aa3 	vldr	s1, [pc, #652]	; 80065a0 <cppLoop+0xca8>
 8006314:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80065a4 <cppLoop+0xcac>
 8006318:	48a3      	ldr	r0, [pc, #652]	; (80065a8 <cppLoop+0xcb0>)
 800631a:	f7fd fabd 	bl	8003898 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 800631e:	48a2      	ldr	r0, [pc, #648]	; (80065a8 <cppLoop+0xcb0>)
 8006320:	f7fd fb13 	bl	800394a <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006328:	f000 fc9c 	bl	8006c64 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 800632c:	eddf 0a9d 	vldr	s1, [pc, #628]	; 80065a4 <cppLoop+0xcac>
 8006330:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 80065a4 <cppLoop+0xcac>
 8006334:	489c      	ldr	r0, [pc, #624]	; (80065a8 <cppLoop+0xcb0>)
 8006336:	f7fd faaf 	bl	8003898 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 800633a:	2064      	movs	r0, #100	; 0x64
 800633c:	f000 fc92 	bl	8006c64 <HAL_Delay>
			velocity_ctrl.stop();
 8006340:	4899      	ldr	r0, [pc, #612]	; (80065a8 <cppLoop+0xcb0>)
 8006342:	f7fd fb11 	bl	8003968 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006346:	2200      	movs	r2, #0
 8006348:	f04f 31ff 	mov.w	r1, #4294967295
 800634c:	4890      	ldr	r0, [pc, #576]	; (8006590 <cppLoop+0xc98>)
 800634e:	f7fb fe63 	bl	8002018 <_ZN3LED2LREaa>
		}
		break;
 8006352:	e361      	b.n	8006a18 <cppLoop+0x1120>

	case 8:
		led.fullColor('M');
 8006354:	214d      	movs	r1, #77	; 0x4d
 8006356:	488e      	ldr	r0, [pc, #568]	; (8006590 <cppLoop+0xc98>)
 8006358:	f7fb fda2 	bl	8001ea0 <_ZN3LED9fullColorEc>

		lcd_clear();
 800635c:	f7fa fea0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006360:	2100      	movs	r1, #0
 8006362:	2000      	movs	r0, #0
 8006364:	f7fa feac 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006368:	4890      	ldr	r0, [pc, #576]	; (80065ac <cppLoop+0xcb4>)
 800636a:	f7fc fe8d 	bl	8003088 <_ZN13PathFollowing8getKxValEv>
 800636e:	ec51 0b10 	vmov	r0, r1, d0
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	4b8e      	ldr	r3, [pc, #568]	; (80065b0 <cppLoop+0xcb8>)
 8006378:	f7fa f956 	bl	8000628 <__aeabi_dmul>
 800637c:	4603      	mov	r3, r0
 800637e:	460c      	mov	r4, r1
 8006380:	461a      	mov	r2, r3
 8006382:	4623      	mov	r3, r4
 8006384:	488b      	ldr	r0, [pc, #556]	; (80065b4 <cppLoop+0xcbc>)
 8006386:	f7fa fec5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800638a:	2101      	movs	r1, #1
 800638c:	2000      	movs	r0, #0
 800638e:	f7fa fe97 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006392:	4886      	ldr	r0, [pc, #536]	; (80065ac <cppLoop+0xcb4>)
 8006394:	f7fc fe8c 	bl	80030b0 <_ZN13PathFollowing8getKyValEv>
 8006398:	ec51 0b10 	vmov	r0, r1, d0
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	4b83      	ldr	r3, [pc, #524]	; (80065b0 <cppLoop+0xcb8>)
 80063a2:	f7fa f941 	bl	8000628 <__aeabi_dmul>
 80063a6:	4603      	mov	r3, r0
 80063a8:	460c      	mov	r4, r1
 80063aa:	461d      	mov	r5, r3
 80063ac:	4626      	mov	r6, r4
 80063ae:	487f      	ldr	r0, [pc, #508]	; (80065ac <cppLoop+0xcb4>)
 80063b0:	f7fc fe92 	bl	80030d8 <_ZN13PathFollowing8getKtValEv>
 80063b4:	ec51 0b10 	vmov	r0, r1, d0
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	4b7c      	ldr	r3, [pc, #496]	; (80065b0 <cppLoop+0xcb8>)
 80063be:	f7fa f933 	bl	8000628 <__aeabi_dmul>
 80063c2:	4603      	mov	r3, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	e9cd 3400 	strd	r3, r4, [sp]
 80063ca:	462a      	mov	r2, r5
 80063cc:	4633      	mov	r3, r6
 80063ce:	487a      	ldr	r0, [pc, #488]	; (80065b8 <cppLoop+0xcc0>)
 80063d0:	f7fa fea0 	bl	8001114 <lcd_printf>

		static double adj_kx = path_following.getKxVal();
 80063d4:	4b79      	ldr	r3, [pc, #484]	; (80065bc <cppLoop+0xcc4>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f3bf 8f5b 	dmb	ish
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d017      	beq.n	8006420 <cppLoop+0xb28>
 80063f0:	4872      	ldr	r0, [pc, #456]	; (80065bc <cppLoop+0xcc4>)
 80063f2:	f00b f934 	bl	801165e <__cxa_guard_acquire>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <cppLoop+0xb28>
 8006406:	4869      	ldr	r0, [pc, #420]	; (80065ac <cppLoop+0xcb4>)
 8006408:	f7fc fe3e 	bl	8003088 <_ZN13PathFollowing8getKxValEv>
 800640c:	eeb0 7a40 	vmov.f32	s14, s0
 8006410:	eef0 7a60 	vmov.f32	s15, s1
 8006414:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <cppLoop+0xcc8>)
 8006416:	ed83 7b00 	vstr	d7, [r3]
 800641a:	4868      	ldr	r0, [pc, #416]	; (80065bc <cppLoop+0xcc4>)
 800641c:	f00b f92b 	bl	8011676 <__cxa_guard_release>
		static double adj_ky = path_following.getKyVal();
 8006420:	4b68      	ldr	r3, [pc, #416]	; (80065c4 <cppLoop+0xccc>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f3bf 8f5b 	dmb	ish
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf0c      	ite	eq
 8006432:	2301      	moveq	r3, #1
 8006434:	2300      	movne	r3, #0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d017      	beq.n	800646c <cppLoop+0xb74>
 800643c:	4861      	ldr	r0, [pc, #388]	; (80065c4 <cppLoop+0xccc>)
 800643e:	f00b f90e 	bl	801165e <__cxa_guard_acquire>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf14      	ite	ne
 8006448:	2301      	movne	r3, #1
 800644a:	2300      	moveq	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <cppLoop+0xb74>
 8006452:	4856      	ldr	r0, [pc, #344]	; (80065ac <cppLoop+0xcb4>)
 8006454:	f7fc fe2c 	bl	80030b0 <_ZN13PathFollowing8getKyValEv>
 8006458:	eeb0 7a40 	vmov.f32	s14, s0
 800645c:	eef0 7a60 	vmov.f32	s15, s1
 8006460:	4b59      	ldr	r3, [pc, #356]	; (80065c8 <cppLoop+0xcd0>)
 8006462:	ed83 7b00 	vstr	d7, [r3]
 8006466:	4857      	ldr	r0, [pc, #348]	; (80065c4 <cppLoop+0xccc>)
 8006468:	f00b f905 	bl	8011676 <__cxa_guard_release>
		static double adj_kt = path_following.getKtVal();
 800646c:	4b57      	ldr	r3, [pc, #348]	; (80065cc <cppLoop+0xcd4>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f3bf 8f5b 	dmb	ish
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d017      	beq.n	80064b8 <cppLoop+0xbc0>
 8006488:	4850      	ldr	r0, [pc, #320]	; (80065cc <cppLoop+0xcd4>)
 800648a:	f00b f8e8 	bl	801165e <__cxa_guard_acquire>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00c      	beq.n	80064b8 <cppLoop+0xbc0>
 800649e:	4843      	ldr	r0, [pc, #268]	; (80065ac <cppLoop+0xcb4>)
 80064a0:	f7fc fe1a 	bl	80030d8 <_ZN13PathFollowing8getKtValEv>
 80064a4:	eeb0 7a40 	vmov.f32	s14, s0
 80064a8:	eef0 7a60 	vmov.f32	s15, s1
 80064ac:	4b48      	ldr	r3, [pc, #288]	; (80065d0 <cppLoop+0xcd8>)
 80064ae:	ed83 7b00 	vstr	d7, [r3]
 80064b2:	4846      	ldr	r0, [pc, #280]	; (80065cc <cppLoop+0xcd4>)
 80064b4:	f00b f8df 	bl	8011676 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80064b8:	4838      	ldr	r0, [pc, #224]	; (800659c <cppLoop+0xca4>)
 80064ba:	f7fb fc8d 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d021      	beq.n	8006512 <cppLoop+0xc1a>
			led.LR(-1, 1);
 80064ce:	2201      	movs	r2, #1
 80064d0:	f04f 31ff 	mov.w	r1, #4294967295
 80064d4:	482e      	ldr	r0, [pc, #184]	; (8006590 <cppLoop+0xc98>)
 80064d6:	f7fb fd9f 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80064da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80064de:	f000 fbc1 	bl	8006c64 <HAL_Delay>

			selector++;
 80064e2:	4b3c      	ldr	r3, [pc, #240]	; (80065d4 <cppLoop+0xcdc>)
 80064e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3301      	adds	r3, #1
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b21a      	sxth	r2, r3
 80064f0:	4b38      	ldr	r3, [pc, #224]	; (80065d4 <cppLoop+0xcdc>)
 80064f2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80064f4:	4b37      	ldr	r3, [pc, #220]	; (80065d4 <cppLoop+0xcdc>)
 80064f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	dd02      	ble.n	8006504 <cppLoop+0xc0c>
 80064fe:	4b35      	ldr	r3, [pc, #212]	; (80065d4 <cppLoop+0xcdc>)
 8006500:	2200      	movs	r2, #0
 8006502:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006504:	2200      	movs	r2, #0
 8006506:	f04f 31ff 	mov.w	r1, #4294967295
 800650a:	4821      	ldr	r0, [pc, #132]	; (8006590 <cppLoop+0xc98>)
 800650c:	f7fb fd84 	bl	8002018 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006510:	e284      	b.n	8006a1c <cppLoop+0x1124>
		else if(joy_stick.getValue() == JOY_R){
 8006512:	4822      	ldr	r0, [pc, #136]	; (800659c <cppLoop+0xca4>)
 8006514:	f7fb fc60 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8006518:	4603      	mov	r3, r0
 800651a:	2b10      	cmp	r3, #16
 800651c:	bf0c      	ite	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	2300      	movne	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d06f      	beq.n	8006608 <cppLoop+0xd10>
			led.LR(-1, 1);
 8006528:	2201      	movs	r2, #1
 800652a:	f04f 31ff 	mov.w	r1, #4294967295
 800652e:	4818      	ldr	r0, [pc, #96]	; (8006590 <cppLoop+0xc98>)
 8006530:	f7fb fd72 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006534:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006538:	f000 fb94 	bl	8006c64 <HAL_Delay>
			if(selector == 0){
 800653c:	4b25      	ldr	r3, [pc, #148]	; (80065d4 <cppLoop+0xcdc>)
 800653e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10d      	bne.n	8006562 <cppLoop+0xc6a>
				adj_kx = adj_kx + 0.00001;
 8006546:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <cppLoop+0xcc8>)
 8006548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800654c:	a30e      	add	r3, pc, #56	; (adr r3, 8006588 <cppLoop+0xc90>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7f9 feb3 	bl	80002bc <__adddf3>
 8006556:	4603      	mov	r3, r0
 8006558:	460c      	mov	r4, r1
 800655a:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <cppLoop+0xcc8>)
 800655c:	e9c2 3400 	strd	r3, r4, [r2]
 8006560:	e047      	b.n	80065f2 <cppLoop+0xcfa>
			else if(selector == 1){
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <cppLoop+0xcdc>)
 8006564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d135      	bne.n	80065d8 <cppLoop+0xce0>
				adj_ky = adj_ky + 0.00001;
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <cppLoop+0xcd0>)
 800656e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006572:	a305      	add	r3, pc, #20	; (adr r3, 8006588 <cppLoop+0xc90>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7f9 fea0 	bl	80002bc <__adddf3>
 800657c:	4603      	mov	r3, r0
 800657e:	460c      	mov	r4, r1
 8006580:	4a11      	ldr	r2, [pc, #68]	; (80065c8 <cppLoop+0xcd0>)
 8006582:	e9c2 3400 	strd	r3, r4, [r2]
 8006586:	e034      	b.n	80065f2 <cppLoop+0xcfa>
 8006588:	88e368f1 	.word	0x88e368f1
 800658c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006590:	20000550 	.word	0x20000550
 8006594:	08017830 	.word	0x08017830
 8006598:	0801783c 	.word	0x0801783c
 800659c:	20000544 	.word	0x20000544
 80065a0:	3fc8f5c3 	.word	0x3fc8f5c3
 80065a4:	00000000 	.word	0x00000000
 80065a8:	2001f994 	.word	0x2001f994
 80065ac:	2001fb48 	.word	0x2001fb48
 80065b0:	408f4000 	.word	0x408f4000
 80065b4:	0801773c 	.word	0x0801773c
 80065b8:	08017748 	.word	0x08017748
 80065bc:	200372c0 	.word	0x200372c0
 80065c0:	200372b8 	.word	0x200372b8
 80065c4:	200372d0 	.word	0x200372d0
 80065c8:	200372c8 	.word	0x200372c8
 80065cc:	200372e0 	.word	0x200372e0
 80065d0:	200372d8 	.word	0x200372d8
 80065d4:	20037280 	.word	0x20037280
				adj_kt = adj_kt + 0.00001;
 80065d8:	4bb1      	ldr	r3, [pc, #708]	; (80068a0 <cppLoop+0xfa8>)
 80065da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065de:	a3aa      	add	r3, pc, #680	; (adr r3, 8006888 <cppLoop+0xf90>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7f9 fe6a 	bl	80002bc <__adddf3>
 80065e8:	4603      	mov	r3, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	4aac      	ldr	r2, [pc, #688]	; (80068a0 <cppLoop+0xfa8>)
 80065ee:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 80065f2:	2152      	movs	r1, #82	; 0x52
 80065f4:	48ab      	ldr	r0, [pc, #684]	; (80068a4 <cppLoop+0xfac>)
 80065f6:	f7fb fc53 	bl	8001ea0 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80065fa:	2200      	movs	r2, #0
 80065fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006600:	48a8      	ldr	r0, [pc, #672]	; (80068a4 <cppLoop+0xfac>)
 8006602:	f7fb fd09 	bl	8002018 <_ZN3LED2LREaa>
		break;
 8006606:	e209      	b.n	8006a1c <cppLoop+0x1124>
		else if(joy_stick.getValue() == JOY_L){
 8006608:	48a7      	ldr	r0, [pc, #668]	; (80068a8 <cppLoop+0xfb0>)
 800660a:	f7fb fbe5 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 800660e:	4603      	mov	r3, r0
 8006610:	2b01      	cmp	r3, #1
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d047      	beq.n	80066ae <cppLoop+0xdb6>
			led.LR(-1, 1);
 800661e:	2201      	movs	r2, #1
 8006620:	f04f 31ff 	mov.w	r1, #4294967295
 8006624:	489f      	ldr	r0, [pc, #636]	; (80068a4 <cppLoop+0xfac>)
 8006626:	f7fb fcf7 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800662a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800662e:	f000 fb19 	bl	8006c64 <HAL_Delay>
			if(selector == 0){
 8006632:	4b9e      	ldr	r3, [pc, #632]	; (80068ac <cppLoop+0xfb4>)
 8006634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10d      	bne.n	8006658 <cppLoop+0xd60>
				adj_kx = adj_kx - 0.00001;
 800663c:	4b9c      	ldr	r3, [pc, #624]	; (80068b0 <cppLoop+0xfb8>)
 800663e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006642:	a391      	add	r3, pc, #580	; (adr r3, 8006888 <cppLoop+0xf90>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 fe36 	bl	80002b8 <__aeabi_dsub>
 800664c:	4603      	mov	r3, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4a97      	ldr	r2, [pc, #604]	; (80068b0 <cppLoop+0xfb8>)
 8006652:	e9c2 3400 	strd	r3, r4, [r2]
 8006656:	e01f      	b.n	8006698 <cppLoop+0xda0>
			else if(selector == 1){
 8006658:	4b94      	ldr	r3, [pc, #592]	; (80068ac <cppLoop+0xfb4>)
 800665a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d10d      	bne.n	800667e <cppLoop+0xd86>
				adj_ky = adj_ky - 0.00001;
 8006662:	4b94      	ldr	r3, [pc, #592]	; (80068b4 <cppLoop+0xfbc>)
 8006664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006668:	a387      	add	r3, pc, #540	; (adr r3, 8006888 <cppLoop+0xf90>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f7f9 fe23 	bl	80002b8 <__aeabi_dsub>
 8006672:	4603      	mov	r3, r0
 8006674:	460c      	mov	r4, r1
 8006676:	4a8f      	ldr	r2, [pc, #572]	; (80068b4 <cppLoop+0xfbc>)
 8006678:	e9c2 3400 	strd	r3, r4, [r2]
 800667c:	e00c      	b.n	8006698 <cppLoop+0xda0>
				adj_kt = adj_kt - 0.00001;
 800667e:	4b88      	ldr	r3, [pc, #544]	; (80068a0 <cppLoop+0xfa8>)
 8006680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006684:	a380      	add	r3, pc, #512	; (adr r3, 8006888 <cppLoop+0xf90>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 fe15 	bl	80002b8 <__aeabi_dsub>
 800668e:	4603      	mov	r3, r0
 8006690:	460c      	mov	r4, r1
 8006692:	4a83      	ldr	r2, [pc, #524]	; (80068a0 <cppLoop+0xfa8>)
 8006694:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8006698:	2152      	movs	r1, #82	; 0x52
 800669a:	4882      	ldr	r0, [pc, #520]	; (80068a4 <cppLoop+0xfac>)
 800669c:	f7fb fc00 	bl	8001ea0 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80066a0:	2200      	movs	r2, #0
 80066a2:	f04f 31ff 	mov.w	r1, #4294967295
 80066a6:	487f      	ldr	r0, [pc, #508]	; (80068a4 <cppLoop+0xfac>)
 80066a8:	f7fb fcb6 	bl	8002018 <_ZN3LED2LREaa>
		break;
 80066ac:	e1b6      	b.n	8006a1c <cppLoop+0x1124>
		else if(joy_stick.getValue() == JOY_D){
 80066ae:	487e      	ldr	r0, [pc, #504]	; (80068a8 <cppLoop+0xfb0>)
 80066b0:	f7fb fb92 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d048      	beq.n	8006756 <cppLoop+0xe5e>
			led.LR(-1, 1);
 80066c4:	2201      	movs	r2, #1
 80066c6:	f04f 31ff 	mov.w	r1, #4294967295
 80066ca:	4876      	ldr	r0, [pc, #472]	; (80068a4 <cppLoop+0xfac>)
 80066cc:	f7fb fca4 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80066d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066d4:	f000 fac6 	bl	8006c64 <HAL_Delay>
			sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 80066d8:	f107 0310 	add.w	r3, r7, #16
 80066dc:	2201      	movs	r2, #1
 80066de:	4976      	ldr	r1, [pc, #472]	; (80068b8 <cppLoop+0xfc0>)
 80066e0:	4876      	ldr	r0, [pc, #472]	; (80068bc <cppLoop+0xfc4>)
 80066e2:	f7fb f80d 	bl	8001700 <sd_read_array_double>
			sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 80066e6:	f107 0308 	add.w	r3, r7, #8
 80066ea:	2201      	movs	r2, #1
 80066ec:	4974      	ldr	r1, [pc, #464]	; (80068c0 <cppLoop+0xfc8>)
 80066ee:	4873      	ldr	r0, [pc, #460]	; (80068bc <cppLoop+0xfc4>)
 80066f0:	f7fb f806 	bl	8001700 <sd_read_array_double>
			sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 80066f4:	463b      	mov	r3, r7
 80066f6:	2201      	movs	r2, #1
 80066f8:	4972      	ldr	r1, [pc, #456]	; (80068c4 <cppLoop+0xfcc>)
 80066fa:	4870      	ldr	r0, [pc, #448]	; (80068bc <cppLoop+0xfc4>)
 80066fc:	f7fb f800 	bl	8001700 <sd_read_array_double>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006700:	ed97 7b04 	vldr	d7, [r7, #16]
 8006704:	ed97 6b02 	vldr	d6, [r7, #8]
 8006708:	ed97 5b00 	vldr	d5, [r7]
 800670c:	eeb0 2a45 	vmov.f32	s4, s10
 8006710:	eef0 2a65 	vmov.f32	s5, s11
 8006714:	eeb0 1a46 	vmov.f32	s2, s12
 8006718:	eef0 1a66 	vmov.f32	s3, s13
 800671c:	eeb0 0a47 	vmov.f32	s0, s14
 8006720:	eef0 0a67 	vmov.f32	s1, s15
 8006724:	4868      	ldr	r0, [pc, #416]	; (80068c8 <cppLoop+0xfd0>)
 8006726:	f7fc fc8f 	bl	8003048 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800672a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800672e:	4a60      	ldr	r2, [pc, #384]	; (80068b0 <cppLoop+0xfb8>)
 8006730:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ky = temp_ky;
 8006734:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006738:	4a5e      	ldr	r2, [pc, #376]	; (80068b4 <cppLoop+0xfbc>)
 800673a:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kt = temp_kt;
 800673e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006742:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <cppLoop+0xfa8>)
 8006744:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8006748:	2200      	movs	r2, #0
 800674a:	f04f 31ff 	mov.w	r1, #4294967295
 800674e:	4855      	ldr	r0, [pc, #340]	; (80068a4 <cppLoop+0xfac>)
 8006750:	f7fb fc62 	bl	8002018 <_ZN3LED2LREaa>
		break;
 8006754:	e162      	b.n	8006a1c <cppLoop+0x1124>
		else if(joy_stick.getValue() == JOY_C){
 8006756:	4854      	ldr	r0, [pc, #336]	; (80068a8 <cppLoop+0xfb0>)
 8006758:	f7fb fb3e 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 800675c:	4603      	mov	r3, r0
 800675e:	2b02      	cmp	r3, #2
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8157 	beq.w	8006a1c <cppLoop+0x1124>
			led.LR(-1, 1);
 800676e:	2201      	movs	r2, #1
 8006770:	f04f 31ff 	mov.w	r1, #4294967295
 8006774:	484b      	ldr	r0, [pc, #300]	; (80068a4 <cppLoop+0xfac>)
 8006776:	f7fb fc4f 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800677a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800677e:	f000 fa71 	bl	8006c64 <HAL_Delay>
			sd_write_array_double("Params", "kx.txt", 1, &adj_kx, OVER_WRITE);
 8006782:	2300      	movs	r3, #0
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4b4a      	ldr	r3, [pc, #296]	; (80068b0 <cppLoop+0xfb8>)
 8006788:	2201      	movs	r2, #1
 800678a:	494b      	ldr	r1, [pc, #300]	; (80068b8 <cppLoop+0xfc0>)
 800678c:	484b      	ldr	r0, [pc, #300]	; (80068bc <cppLoop+0xfc4>)
 800678e:	f7fa ff55 	bl	800163c <sd_write_array_double>
			sd_write_array_double("Params", "ky.txt", 1, &adj_ky, OVER_WRITE);
 8006792:	2300      	movs	r3, #0
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4b47      	ldr	r3, [pc, #284]	; (80068b4 <cppLoop+0xfbc>)
 8006798:	2201      	movs	r2, #1
 800679a:	4949      	ldr	r1, [pc, #292]	; (80068c0 <cppLoop+0xfc8>)
 800679c:	4847      	ldr	r0, [pc, #284]	; (80068bc <cppLoop+0xfc4>)
 800679e:	f7fa ff4d 	bl	800163c <sd_write_array_double>
			sd_write_array_double("Params", "kt.txt", 1, &adj_kt, OVER_WRITE);
 80067a2:	2300      	movs	r3, #0
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <cppLoop+0xfa8>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	4946      	ldr	r1, [pc, #280]	; (80068c4 <cppLoop+0xfcc>)
 80067ac:	4843      	ldr	r0, [pc, #268]	; (80068bc <cppLoop+0xfc4>)
 80067ae:	f7fa ff45 	bl	800163c <sd_write_array_double>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80067b2:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <cppLoop+0xfb8>)
 80067b4:	ed93 7b00 	vldr	d7, [r3]
 80067b8:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <cppLoop+0xfbc>)
 80067ba:	ed93 6b00 	vldr	d6, [r3]
 80067be:	4b38      	ldr	r3, [pc, #224]	; (80068a0 <cppLoop+0xfa8>)
 80067c0:	ed93 5b00 	vldr	d5, [r3]
 80067c4:	eeb0 2a45 	vmov.f32	s4, s10
 80067c8:	eef0 2a65 	vmov.f32	s5, s11
 80067cc:	eeb0 1a46 	vmov.f32	s2, s12
 80067d0:	eef0 1a66 	vmov.f32	s3, s13
 80067d4:	eeb0 0a47 	vmov.f32	s0, s14
 80067d8:	eef0 0a67 	vmov.f32	s1, s15
 80067dc:	483a      	ldr	r0, [pc, #232]	; (80068c8 <cppLoop+0xfd0>)
 80067de:	f7fc fc33 	bl	8003048 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	f04f 31ff 	mov.w	r1, #4294967295
 80067e8:	482e      	ldr	r0, [pc, #184]	; (80068a4 <cppLoop+0xfac>)
 80067ea:	f7fb fc15 	bl	8002018 <_ZN3LED2LREaa>
		break;
 80067ee:	e115      	b.n	8006a1c <cppLoop+0x1124>

	case 9:
		lcd_clear();
 80067f0:	f7fa fc56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80067f4:	2100      	movs	r1, #0
 80067f6:	2000      	movs	r0, #0
 80067f8:	f7fa fc62 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80067fc:	4833      	ldr	r0, [pc, #204]	; (80068cc <cppLoop+0xfd4>)
 80067fe:	f7fa fc89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006802:	2101      	movs	r1, #1
 8006804:	2000      	movs	r0, #0
 8006806:	f7fa fc5b 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800680a:	4831      	ldr	r0, [pc, #196]	; (80068d0 <cppLoop+0xfd8>)
 800680c:	f7fa fc82 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006810:	4825      	ldr	r0, [pc, #148]	; (80068a8 <cppLoop+0xfb0>)
 8006812:	f7fb fae1 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 8006816:	4603      	mov	r3, r0
 8006818:	2b02      	cmp	r3, #2
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80fc 	beq.w	8006a20 <cppLoop+0x1128>
			HAL_Delay(1500);
 8006828:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800682c:	f000 fa1a 	bl	8006c64 <HAL_Delay>
			led.LR(-1, 1);
 8006830:	2201      	movs	r2, #1
 8006832:	f04f 31ff 	mov.w	r1, #4294967295
 8006836:	481b      	ldr	r0, [pc, #108]	; (80068a4 <cppLoop+0xfac>)
 8006838:	f7fb fbee 	bl	8002018 <_ZN3LED2LREaa>

			logger.start();
 800683c:	4825      	ldr	r0, [pc, #148]	; (80068d4 <cppLoop+0xfdc>)
 800683e:	f7fc f921 	bl	8002a84 <_ZN6Logger5startEv>
			motor.setRatio(0.2, 0.2);
 8006842:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8006890 <cppLoop+0xf98>
 8006846:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8006890 <cppLoop+0xf98>
 800684a:	4823      	ldr	r0, [pc, #140]	; (80068d8 <cppLoop+0xfe0>)
 800684c:	f7fc f9ac 	bl	8002ba8 <_ZN5Motor8setRatioEdd>

			HAL_Delay(3000);
 8006850:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006854:	f000 fa06 	bl	8006c64 <HAL_Delay>

			logger.stop();
 8006858:	481e      	ldr	r0, [pc, #120]	; (80068d4 <cppLoop+0xfdc>)
 800685a:	f7fc f922 	bl	8002aa2 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800685e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8006898 <cppLoop+0xfa0>
 8006862:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8006898 <cppLoop+0xfa0>
 8006866:	481c      	ldr	r0, [pc, #112]	; (80068d8 <cppLoop+0xfe0>)
 8006868:	f7fc f99e 	bl	8002ba8 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 800686c:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <cppLoop+0xfe4>)
 800686e:	491c      	ldr	r1, [pc, #112]	; (80068e0 <cppLoop+0xfe8>)
 8006870:	4818      	ldr	r0, [pc, #96]	; (80068d4 <cppLoop+0xfdc>)
 8006872:	f7fc f8ba 	bl	80029ea <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006876:	2200      	movs	r2, #0
 8006878:	f04f 31ff 	mov.w	r1, #4294967295
 800687c:	4809      	ldr	r0, [pc, #36]	; (80068a4 <cppLoop+0xfac>)
 800687e:	f7fb fbcb 	bl	8002018 <_ZN3LED2LREaa>
		}
		break;
 8006882:	e0cd      	b.n	8006a20 <cppLoop+0x1128>
 8006884:	f3af 8000 	nop.w
 8006888:	88e368f1 	.word	0x88e368f1
 800688c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006890:	9999999a 	.word	0x9999999a
 8006894:	3fc99999 	.word	0x3fc99999
	...
 80068a0:	200372d8 	.word	0x200372d8
 80068a4:	20000550 	.word	0x20000550
 80068a8:	20000544 	.word	0x20000544
 80068ac:	20037280 	.word	0x20037280
 80068b0:	200372b8 	.word	0x200372b8
 80068b4:	200372c8 	.word	0x200372c8
 80068b8:	08017844 	.word	0x08017844
 80068bc:	08017764 	.word	0x08017764
 80068c0:	0801784c 	.word	0x0801784c
 80068c4:	08017854 	.word	0x08017854
 80068c8:	2001fb48 	.word	0x2001fb48
 80068cc:	0801785c 	.word	0x0801785c
 80068d0:	080177a0 	.word	0x080177a0
 80068d4:	20000574 	.word	0x20000574
 80068d8:	2000054c 	.word	0x2000054c
 80068dc:	08017864 	.word	0x08017864
 80068e0:	08017870 	.word	0x08017870

	case 10:
		lcd_clear();
 80068e4:	f7fa fbdc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80068e8:	2100      	movs	r1, #0
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7fa fbe8 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80068f0:	4851      	ldr	r0, [pc, #324]	; (8006a38 <cppLoop+0x1140>)
 80068f2:	f7fa fc0f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80068f6:	2101      	movs	r1, #1
 80068f8:	2000      	movs	r0, #0
 80068fa:	f7fa fbe1 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80068fe:	484f      	ldr	r0, [pc, #316]	; (8006a3c <cppLoop+0x1144>)
 8006900:	f7fa fc08 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006904:	484e      	ldr	r0, [pc, #312]	; (8006a40 <cppLoop+0x1148>)
 8006906:	f7fb fa67 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 800690a:	4603      	mov	r3, r0
 800690c:	2b02      	cmp	r3, #2
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8084 	beq.w	8006a24 <cppLoop+0x112c>
			HAL_Delay(1500);
 800691c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006920:	f000 f9a0 	bl	8006c64 <HAL_Delay>
			led.LR(-1, 1);
 8006924:	2201      	movs	r2, #1
 8006926:	f04f 31ff 	mov.w	r1, #4294967295
 800692a:	4846      	ldr	r0, [pc, #280]	; (8006a44 <cppLoop+0x114c>)
 800692c:	f7fb fb74 	bl	8002018 <_ZN3LED2LREaa>

			logger.start();
 8006930:	4845      	ldr	r0, [pc, #276]	; (8006a48 <cppLoop+0x1150>)
 8006932:	f7fc f8a7 	bl	8002a84 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006936:	4845      	ldr	r0, [pc, #276]	; (8006a4c <cppLoop+0x1154>)
 8006938:	f7fd f807 	bl	800394a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.8, 0);
 800693c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8006a50 <cppLoop+0x1158>
 8006940:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8006a54 <cppLoop+0x115c>
 8006944:	4841      	ldr	r0, [pc, #260]	; (8006a4c <cppLoop+0x1154>)
 8006946:	f7fc ffa7 	bl	8003898 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800694a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800694e:	f000 f989 	bl	8006c64 <HAL_Delay>

			logger.stop();
 8006952:	483d      	ldr	r0, [pc, #244]	; (8006a48 <cppLoop+0x1150>)
 8006954:	f7fc f8a5 	bl	8002aa2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006958:	483c      	ldr	r0, [pc, #240]	; (8006a4c <cppLoop+0x1154>)
 800695a:	f7fd f805 	bl	8003968 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800695e:	4a3e      	ldr	r2, [pc, #248]	; (8006a58 <cppLoop+0x1160>)
 8006960:	493e      	ldr	r1, [pc, #248]	; (8006a5c <cppLoop+0x1164>)
 8006962:	4839      	ldr	r0, [pc, #228]	; (8006a48 <cppLoop+0x1150>)
 8006964:	f7fc f841 	bl	80029ea <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006968:	2200      	movs	r2, #0
 800696a:	f04f 31ff 	mov.w	r1, #4294967295
 800696e:	4835      	ldr	r0, [pc, #212]	; (8006a44 <cppLoop+0x114c>)
 8006970:	f7fb fb52 	bl	8002018 <_ZN3LED2LREaa>
		}

		break;
 8006974:	e056      	b.n	8006a24 <cppLoop+0x112c>

	case 11:
		lcd_clear();
 8006976:	f7fa fb93 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800697a:	2100      	movs	r1, #0
 800697c:	2000      	movs	r0, #0
 800697e:	f7fa fb9f 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006982:	4837      	ldr	r0, [pc, #220]	; (8006a60 <cppLoop+0x1168>)
 8006984:	f7fa fbc6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006988:	2101      	movs	r1, #1
 800698a:	2000      	movs	r0, #0
 800698c:	f7fa fb98 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006990:	4834      	ldr	r0, [pc, #208]	; (8006a64 <cppLoop+0x116c>)
 8006992:	f7fa fbbf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006996:	482a      	ldr	r0, [pc, #168]	; (8006a40 <cppLoop+0x1148>)
 8006998:	f7fb fa1e 	bl	8001dd8 <_ZN8JoyStick8getValueEv>
 800699c:	4603      	mov	r3, r0
 800699e:	2b02      	cmp	r3, #2
 80069a0:	bf0c      	ite	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	2300      	movne	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d03d      	beq.n	8006a28 <cppLoop+0x1130>
			led.LR(-1, 1);
 80069ac:	2201      	movs	r2, #1
 80069ae:	f04f 31ff 	mov.w	r1, #4294967295
 80069b2:	4824      	ldr	r0, [pc, #144]	; (8006a44 <cppLoop+0x114c>)
 80069b4:	f7fb fb30 	bl	8002018 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80069b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069bc:	f000 f952 	bl	8006c64 <HAL_Delay>

			led.fullColor('R');
 80069c0:	2152      	movs	r1, #82	; 0x52
 80069c2:	4820      	ldr	r0, [pc, #128]	; (8006a44 <cppLoop+0x114c>)
 80069c4:	f7fb fa6c 	bl	8001ea0 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 80069c8:	eddf 0a27 	vldr	s1, [pc, #156]	; 8006a68 <cppLoop+0x1170>
 80069cc:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8006a50 <cppLoop+0x1158>
 80069d0:	481e      	ldr	r0, [pc, #120]	; (8006a4c <cppLoop+0x1154>)
 80069d2:	f7fc ff61 	bl	8003898 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 80069d6:	481d      	ldr	r0, [pc, #116]	; (8006a4c <cppLoop+0x1154>)
 80069d8:	f7fc ffb7 	bl	800394a <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 80069dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069e0:	f000 f940 	bl	8006c64 <HAL_Delay>

			velocity_ctrl.stop();
 80069e4:	4819      	ldr	r0, [pc, #100]	; (8006a4c <cppLoop+0x1154>)
 80069e6:	f7fc ffbf 	bl	8003968 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 80069ea:	2200      	movs	r2, #0
 80069ec:	f04f 31ff 	mov.w	r1, #4294967295
 80069f0:	4814      	ldr	r0, [pc, #80]	; (8006a44 <cppLoop+0x114c>)
 80069f2:	f7fb fb11 	bl	8002018 <_ZN3LED2LREaa>
		}
		break;
 80069f6:	e017      	b.n	8006a28 <cppLoop+0x1130>
	case 15:

		break;

	default:
		break;
 80069f8:	bf00      	nop
 80069fa:	e016      	b.n	8006a2a <cppLoop+0x1132>
		break;
 80069fc:	bf00      	nop
 80069fe:	e014      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a00:	bf00      	nop
 8006a02:	e012      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a04:	bf00      	nop
 8006a06:	e010      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a08:	bf00      	nop
 8006a0a:	e00e      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a0c:	bf00      	nop
 8006a0e:	e00c      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a10:	bf00      	nop
 8006a12:	e00a      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a14:	bf00      	nop
 8006a16:	e008      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a18:	bf00      	nop
 8006a1a:	e006      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a1c:	bf00      	nop
 8006a1e:	e004      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a20:	bf00      	nop
 8006a22:	e002      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <cppLoop+0x1132>
		break;
 8006a28:	bf00      	nop

	}

	HAL_Delay(30);
 8006a2a:	201e      	movs	r0, #30
 8006a2c:	f000 f91a 	bl	8006c64 <HAL_Delay>

}
 8006a30:	bf00      	nop
 8006a32:	373c      	adds	r7, #60	; 0x3c
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a38:	0801787c 	.word	0x0801787c
 8006a3c:	08017880 	.word	0x08017880
 8006a40:	20000544 	.word	0x20000544
 8006a44:	20000550 	.word	0x20000550
 8006a48:	20000574 	.word	0x20000574
 8006a4c:	2001f994 	.word	0x2001f994
 8006a50:	00000000 	.word	0x00000000
 8006a54:	3f4ccccd 	.word	0x3f4ccccd
 8006a58:	0801788c 	.word	0x0801788c
 8006a5c:	08017870 	.word	0x08017870
 8006a60:	08017830 	.word	0x08017830
 8006a64:	0801783c 	.word	0x0801783c
 8006a68:	3fc8f5c3 	.word	0x3fc8f5c3

08006a6c <_Z41__static_initialization_and_destruction_0ii>:
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d133      	bne.n	8006ae4 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d12e      	bne.n	8006ae4 <_Z41__static_initialization_and_destruction_0ii+0x78>
LineSensor line_sensor;
 8006a86:	4819      	ldr	r0, [pc, #100]	; (8006aec <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006a88:	f7fb fafe 	bl	8002088 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006a8c:	4818      	ldr	r0, [pc, #96]	; (8006af0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006a8e:	f7fc fc03 	bl	8003298 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006a92:	4818      	ldr	r0, [pc, #96]	; (8006af4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006a94:	f7fb f994 	bl	8001dc0 <_ZN8JoyStickC1Ev>
Motor motor;
 8006a98:	4817      	ldr	r0, [pc, #92]	; (8006af8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006a9a:	f7fc f811 	bl	8002ac0 <_ZN5MotorC1Ev>
IMU imu;
 8006a9e:	4817      	ldr	r0, [pc, #92]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006aa0:	f7fa ff9a 	bl	80019d8 <_ZN3IMUC1Ev>
Logger logger;
 8006aa4:	4816      	ldr	r0, [pc, #88]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006aa6:	f7fb febb 	bl	8002820 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006aaa:	4816      	ldr	r0, [pc, #88]	; (8006b04 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006aac:	f7fa fb52 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006ab0:	4b12      	ldr	r3, [pc, #72]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006ab2:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006ab4:	4910      	ldr	r1, [pc, #64]	; (8006af8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ab6:	4814      	ldr	r0, [pc, #80]	; (8006b08 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006ab8:	f7fc fd56 	bl	8003568 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8006abc:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006abe:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006ac0:	490d      	ldr	r1, [pc, #52]	; (8006af8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ac2:	4812      	ldr	r0, [pc, #72]	; (8006b0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006ac4:	f7fb fc76 	bl	80023b4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006aca:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006acc:	490d      	ldr	r1, [pc, #52]	; (8006b04 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006ace:	4810      	ldr	r0, [pc, #64]	; (8006b10 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006ad0:	f7fc f8dc 	bl	8002c8c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006ad4:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ad6:	490a      	ldr	r1, [pc, #40]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006ad8:	480e      	ldr	r0, [pc, #56]	; (8006b14 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006ada:	f7fc fc47 	bl	800336c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006ade:	480e      	ldr	r0, [pc, #56]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006ae0:	f7fc f9fa 	bl	8002ed8 <_ZN13PathFollowingC1Ev>
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000248 	.word	0x20000248
 8006af0:	20000540 	.word	0x20000540
 8006af4:	20000544 	.word	0x20000544
 8006af8:	2000054c 	.word	0x2000054c
 8006afc:	20000560 	.word	0x20000560
 8006b00:	20000574 	.word	0x20000574
 8006b04:	2001f97c 	.word	0x2001f97c
 8006b08:	2001f994 	.word	0x2001f994
 8006b0c:	2001f9cc 	.word	0x2001f9cc
 8006b10:	2001fa38 	.word	0x2001fa38
 8006b14:	2001fa68 	.word	0x2001fa68
 8006b18:	2001fb48 	.word	0x2001fb48

08006b1c <_GLOBAL__sub_I_line_sensor>:
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b24:	2001      	movs	r0, #1
 8006b26:	f7ff ffa1 	bl	8006a6c <_Z41__static_initialization_and_destruction_0ii>
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b32:	e003      	b.n	8006b3c <LoopCopyDataInit>

08006b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b3a:	3104      	adds	r1, #4

08006b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b44:	d3f6      	bcc.n	8006b34 <CopyDataInit>
  ldr  r2, =_sbss
 8006b46:	4a0b      	ldr	r2, [pc, #44]	; (8006b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b48:	e002      	b.n	8006b50 <LoopFillZerobss>

08006b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b4c:	f842 3b04 	str.w	r3, [r2], #4

08006b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b54:	d3f9      	bcc.n	8006b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b56:	f7fe fd2b 	bl	80055b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b5a:	f00b fded 	bl	8012738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b5e:	f7fc ffef 	bl	8003b40 <main>
  bx  lr    
 8006b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b64:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006b68:	08017e90 	.word	0x08017e90
  ldr  r0, =_sdata
 8006b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b70:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006b74:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006b78:	2003bcc0 	.word	0x2003bcc0

08006b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b7c:	e7fe      	b.n	8006b7c <ADC_IRQHandler>
	...

08006b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b84:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <HAL_Init+0x40>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <HAL_Init+0x40>)
 8006b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <HAL_Init+0x40>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <HAL_Init+0x40>)
 8006b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b9c:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <HAL_Init+0x40>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a07      	ldr	r2, [pc, #28]	; (8006bc0 <HAL_Init+0x40>)
 8006ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ba8:	2003      	movs	r0, #3
 8006baa:	f000 fd51 	bl	8007650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f000 f808 	bl	8006bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bb4:	f7fd feea 	bl	800498c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40023c00 	.word	0x40023c00

08006bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bcc:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <HAL_InitTick+0x54>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <HAL_InitTick+0x58>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fd69 	bl	80076ba <HAL_SYSTICK_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e00e      	b.n	8006c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b0f      	cmp	r3, #15
 8006bf6:	d80a      	bhi.n	8006c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	f000 fd31 	bl	8007666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c04:	4a06      	ldr	r2, [pc, #24]	; (8006c20 <HAL_InitTick+0x5c>)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e000      	b.n	8006c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	20000008 	.word	0x20000008
 8006c20:	20000004 	.word	0x20000004

08006c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <HAL_IncTick+0x20>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <HAL_IncTick+0x24>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4413      	add	r3, r2
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <HAL_IncTick+0x24>)
 8006c36:	6013      	str	r3, [r2, #0]
}
 8006c38:	bf00      	nop
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000008 	.word	0x20000008
 8006c48:	20039c48 	.word	0x20039c48

08006c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006c50:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <HAL_GetTick+0x14>)
 8006c52:	681b      	ldr	r3, [r3, #0]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20039c48 	.word	0x20039c48

08006c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c6c:	f7ff ffee 	bl	8006c4c <HAL_GetTick>
 8006c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d005      	beq.n	8006c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_Delay+0x40>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c8a:	bf00      	nop
 8006c8c:	f7ff ffde 	bl	8006c4c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d8f7      	bhi.n	8006c8c <HAL_Delay+0x28>
  {
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000008 	.word	0x20000008

08006ca8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e033      	b.n	8006d26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fd fe88 	bl	80049dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006cee:	f023 0302 	bic.w	r3, r3, #2
 8006cf2:	f043 0202 	orr.w	r2, r3, #2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa5a 	bl	80071b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	f043 0201 	orr.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	641a      	str	r2, [r3, #64]	; 0x40
 8006d16:	e001      	b.n	8006d1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_ADC_Start_DMA+0x1e>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e0cc      	b.n	8006ee8 <HAL_ADC_Start_DMA+0x1b8>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d018      	beq.n	8006d96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d74:	4b5e      	ldr	r3, [pc, #376]	; (8006ef0 <HAL_ADC_Start_DMA+0x1c0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a5e      	ldr	r2, [pc, #376]	; (8006ef4 <HAL_ADC_Start_DMA+0x1c4>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	0c9a      	lsrs	r2, r3, #18
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006d88:	e002      	b.n	8006d90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f9      	bne.n	8006d8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	f040 80a0 	bne.w	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006dd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d106      	bne.n	8006df4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	f023 0206 	bic.w	r2, r3, #6
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	645a      	str	r2, [r3, #68]	; 0x44
 8006df2:	e002      	b.n	8006dfa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e02:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <HAL_ADC_Start_DMA+0x1c8>)
 8006e04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	4a3c      	ldr	r2, [pc, #240]	; (8006efc <HAL_ADC_Start_DMA+0x1cc>)
 8006e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	4a3b      	ldr	r2, [pc, #236]	; (8006f00 <HAL_ADC_Start_DMA+0x1d0>)
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	4a3a      	ldr	r2, [pc, #232]	; (8006f04 <HAL_ADC_Start_DMA+0x1d4>)
 8006e1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	334c      	adds	r3, #76	; 0x4c
 8006e52:	4619      	mov	r1, r3
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f000 fcea 	bl	8007830 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d12a      	bne.n	8006ebe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <HAL_ADC_Start_DMA+0x1d8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d015      	beq.n	8006e9e <HAL_ADC_Start_DMA+0x16e>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <HAL_ADC_Start_DMA+0x1dc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d105      	bne.n	8006e88 <HAL_ADC_Start_DMA+0x158>
 8006e7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <HAL_ADC_Start_DMA+0x1c8>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_ADC_Start_DMA+0x1e0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d129      	bne.n	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
 8006e92:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <HAL_ADC_Start_DMA+0x1c8>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d823      	bhi.n	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d11c      	bne.n	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006eba:	609a      	str	r2, [r3, #8]
 8006ebc:	e013      	b.n	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a11      	ldr	r2, [pc, #68]	; (8006f08 <HAL_ADC_Start_DMA+0x1d8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d10e      	bne.n	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ee4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000000 	.word	0x20000000
 8006ef4:	431bde83 	.word	0x431bde83
 8006ef8:	40012300 	.word	0x40012300
 8006efc:	080073ad 	.word	0x080073ad
 8006f00:	08007467 	.word	0x08007467
 8006f04:	08007483 	.word	0x08007483
 8006f08:	40012000 	.word	0x40012000
 8006f0c:	40012100 	.word	0x40012100
 8006f10:	40012200 	.word	0x40012200

08006f14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x1c>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e113      	b.n	8007194 <HAL_ADC_ConfigChannel+0x244>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d925      	bls.n	8006fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68d9      	ldr	r1, [r3, #12]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	3b1e      	subs	r3, #30
 8006f92:	2207      	movs	r2, #7
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43da      	mvns	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	400a      	ands	r2, r1
 8006fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68d9      	ldr	r1, [r3, #12]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	4403      	add	r3, r0
 8006fba:	3b1e      	subs	r3, #30
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e022      	b.n	800700e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6919      	ldr	r1, [r3, #16]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	4413      	add	r3, r2
 8006fdc:	2207      	movs	r2, #7
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	43da      	mvns	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	400a      	ands	r2, r1
 8006fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6919      	ldr	r1, [r3, #16]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4403      	add	r3, r0
 8007004:	409a      	lsls	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b06      	cmp	r3, #6
 8007014:	d824      	bhi.n	8007060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	3b05      	subs	r3, #5
 8007028:	221f      	movs	r2, #31
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	43da      	mvns	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	400a      	ands	r2, r1
 8007036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	4618      	mov	r0, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	3b05      	subs	r3, #5
 8007052:	fa00 f203 	lsl.w	r2, r0, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	635a      	str	r2, [r3, #52]	; 0x34
 800705e:	e04c      	b.n	80070fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d824      	bhi.n	80070b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	3b23      	subs	r3, #35	; 0x23
 800707a:	221f      	movs	r2, #31
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	43da      	mvns	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	400a      	ands	r2, r1
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	4618      	mov	r0, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	3b23      	subs	r3, #35	; 0x23
 80070a4:	fa00 f203 	lsl.w	r2, r0, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
 80070b0:	e023      	b.n	80070fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	3b41      	subs	r3, #65	; 0x41
 80070c4:	221f      	movs	r2, #31
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	43da      	mvns	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	400a      	ands	r2, r1
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	4618      	mov	r0, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	3b41      	subs	r3, #65	; 0x41
 80070ee:	fa00 f203 	lsl.w	r2, r0, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070fa:	4b29      	ldr	r3, [pc, #164]	; (80071a0 <HAL_ADC_ConfigChannel+0x250>)
 80070fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a28      	ldr	r2, [pc, #160]	; (80071a4 <HAL_ADC_ConfigChannel+0x254>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10f      	bne.n	8007128 <HAL_ADC_ConfigChannel+0x1d8>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b12      	cmp	r3, #18
 800710e:	d10b      	bne.n	8007128 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <HAL_ADC_ConfigChannel+0x254>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d12b      	bne.n	800718a <HAL_ADC_ConfigChannel+0x23a>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <HAL_ADC_ConfigChannel+0x258>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <HAL_ADC_ConfigChannel+0x1f4>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b11      	cmp	r3, #17
 8007142:	d122      	bne.n	800718a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a11      	ldr	r2, [pc, #68]	; (80071a8 <HAL_ADC_ConfigChannel+0x258>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d111      	bne.n	800718a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <HAL_ADC_ConfigChannel+0x25c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <HAL_ADC_ConfigChannel+0x260>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	0c9a      	lsrs	r2, r3, #18
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800717c:	e002      	b.n	8007184 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	3b01      	subs	r3, #1
 8007182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f9      	bne.n	800717e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40012300 	.word	0x40012300
 80071a4:	40012000 	.word	0x40012000
 80071a8:	10000012 	.word	0x10000012
 80071ac:	20000000 	.word	0x20000000
 80071b0:	431bde83 	.word	0x431bde83

080071b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071bc:	4b79      	ldr	r3, [pc, #484]	; (80073a4 <ADC_Init+0x1f0>)
 80071be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	021a      	lsls	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800720c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800722e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6899      	ldr	r1, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	4a58      	ldr	r2, [pc, #352]	; (80073a8 <ADC_Init+0x1f4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d022      	beq.n	8007292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800725a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6899      	ldr	r1, [r3, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800727c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6899      	ldr	r1, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	e00f      	b.n	80072b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0202 	bic.w	r2, r2, #2
 80072c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6899      	ldr	r1, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7e1b      	ldrb	r3, [r3, #24]
 80072cc:	005a      	lsls	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01b      	beq.n	8007318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80072fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6859      	ldr	r1, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	3b01      	subs	r3, #1
 800730c:	035a      	lsls	r2, r3, #13
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	e007      	b.n	8007328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	3b01      	subs	r3, #1
 8007344:	051a      	lsls	r2, r3, #20
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800735c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6899      	ldr	r1, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800736a:	025a      	lsls	r2, r3, #9
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6899      	ldr	r1, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	029a      	lsls	r2, r3, #10
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40012300 	.word	0x40012300
 80073a8:	0f000001 	.word	0x0f000001

080073ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d13c      	bne.n	8007440 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d12b      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d127      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007400:	2b00      	cmp	r3, #0
 8007402:	d119      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0220 	bic.w	r2, r2, #32
 8007412:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fd6b 	bl	8006f14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800743e:	e00e      	b.n	800745e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff fd75 	bl	8006f3c <HAL_ADC_ErrorCallback>
}
 8007452:	e004      	b.n	800745e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fd57 	bl	8006f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2240      	movs	r2, #64	; 0x40
 8007494:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fd4a 	bl	8006f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <__NVIC_SetPriorityGrouping>:
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074c0:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <__NVIC_SetPriorityGrouping+0x44>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074cc:	4013      	ands	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074e2:	4a04      	ldr	r2, [pc, #16]	; (80074f4 <__NVIC_SetPriorityGrouping+0x44>)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	60d3      	str	r3, [r2, #12]
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	e000ed00 	.word	0xe000ed00

080074f8 <__NVIC_GetPriorityGrouping>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <__NVIC_GetPriorityGrouping+0x18>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f003 0307 	and.w	r3, r3, #7
}
 8007506:	4618      	mov	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000ed00 	.word	0xe000ed00

08007514 <__NVIC_EnableIRQ>:
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	2b00      	cmp	r3, #0
 8007524:	db0b      	blt.n	800753e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	f003 021f 	and.w	r2, r3, #31
 800752c:	4907      	ldr	r1, [pc, #28]	; (800754c <__NVIC_EnableIRQ+0x38>)
 800752e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	2001      	movs	r0, #1
 8007536:	fa00 f202 	lsl.w	r2, r0, r2
 800753a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	e000e100 	.word	0xe000e100

08007550 <__NVIC_SetPriority>:
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	6039      	str	r1, [r7, #0]
 800755a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800755c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007560:	2b00      	cmp	r3, #0
 8007562:	db0a      	blt.n	800757a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	b2da      	uxtb	r2, r3
 8007568:	490c      	ldr	r1, [pc, #48]	; (800759c <__NVIC_SetPriority+0x4c>)
 800756a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756e:	0112      	lsls	r2, r2, #4
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	440b      	add	r3, r1
 8007574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007578:	e00a      	b.n	8007590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4908      	ldr	r1, [pc, #32]	; (80075a0 <__NVIC_SetPriority+0x50>)
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	3b04      	subs	r3, #4
 8007588:	0112      	lsls	r2, r2, #4
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	440b      	add	r3, r1
 800758e:	761a      	strb	r2, [r3, #24]
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	e000e100 	.word	0xe000e100
 80075a0:	e000ed00 	.word	0xe000ed00

080075a4 <NVIC_EncodePriority>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	b089      	sub	sp, #36	; 0x24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f1c3 0307 	rsb	r3, r3, #7
 80075be:	2b04      	cmp	r3, #4
 80075c0:	bf28      	it	cs
 80075c2:	2304      	movcs	r3, #4
 80075c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3304      	adds	r3, #4
 80075ca:	2b06      	cmp	r3, #6
 80075cc:	d902      	bls.n	80075d4 <NVIC_EncodePriority+0x30>
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	3b03      	subs	r3, #3
 80075d2:	e000      	b.n	80075d6 <NVIC_EncodePriority+0x32>
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43da      	mvns	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	401a      	ands	r2, r3
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075ec:	f04f 31ff 	mov.w	r1, #4294967295
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	fa01 f303 	lsl.w	r3, r1, r3
 80075f6:	43d9      	mvns	r1, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075fc:	4313      	orrs	r3, r2
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3724      	adds	r7, #36	; 0x24
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <SysTick_Config>:
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3b01      	subs	r3, #1
 8007618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800761c:	d301      	bcc.n	8007622 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800761e:	2301      	movs	r3, #1
 8007620:	e00f      	b.n	8007642 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007622:	4a0a      	ldr	r2, [pc, #40]	; (800764c <SysTick_Config+0x40>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3b01      	subs	r3, #1
 8007628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800762a:	210f      	movs	r1, #15
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	f7ff ff8e 	bl	8007550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <SysTick_Config+0x40>)
 8007636:	2200      	movs	r2, #0
 8007638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800763a:	4b04      	ldr	r3, [pc, #16]	; (800764c <SysTick_Config+0x40>)
 800763c:	2207      	movs	r2, #7
 800763e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	e000e010 	.word	0xe000e010

08007650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff29 	bl	80074b0 <__NVIC_SetPriorityGrouping>
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	4603      	mov	r3, r0
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007678:	f7ff ff3e 	bl	80074f8 <__NVIC_GetPriorityGrouping>
 800767c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	6978      	ldr	r0, [r7, #20]
 8007684:	f7ff ff8e 	bl	80075a4 <NVIC_EncodePriority>
 8007688:	4602      	mov	r2, r0
 800768a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff ff5d 	bl	8007550 <__NVIC_SetPriority>
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	4603      	mov	r3, r0
 80076a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ff31 	bl	8007514 <__NVIC_EnableIRQ>
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff ffa2 	bl	800760c <SysTick_Config>
 80076c8:	4603      	mov	r3, r0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076e0:	f7ff fab4 	bl	8006c4c <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e099      	b.n	8007824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0201 	bic.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007710:	e00f      	b.n	8007732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007712:	f7ff fa9b 	bl	8006c4c <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b05      	cmp	r3, #5
 800771e:	d908      	bls.n	8007732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2203      	movs	r2, #3
 800772a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e078      	b.n	8007824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e8      	bne.n	8007712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4b38      	ldr	r3, [pc, #224]	; (800782c <HAL_DMA_Init+0x158>)
 800774c:	4013      	ands	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800775e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800776a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b04      	cmp	r3, #4
 800778a:	d107      	bne.n	800779c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	4313      	orrs	r3, r2
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0307 	bic.w	r3, r3, #7
 80077b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d117      	bne.n	80077f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00e      	beq.n	80077f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fa9d 	bl	8007d18 <DMA_CheckFifoParam>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2240      	movs	r2, #64	; 0x40
 80077e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80077f2:	2301      	movs	r3, #1
 80077f4:	e016      	b.n	8007824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa54 	bl	8007cac <DMA_CalcBaseAndBitshift>
 8007804:	4603      	mov	r3, r0
 8007806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780c:	223f      	movs	r2, #63	; 0x3f
 800780e:	409a      	lsls	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	f010803f 	.word	0xf010803f

08007830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007846:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_DMA_Start_IT+0x26>
 8007852:	2302      	movs	r3, #2
 8007854:	e040      	b.n	80078d8 <HAL_DMA_Start_IT+0xa8>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d12f      	bne.n	80078ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f9e6 	bl	8007c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007888:	223f      	movs	r2, #63	; 0x3f
 800788a:	409a      	lsls	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0216 	orr.w	r2, r2, #22
 800789e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e005      	b.n	80078d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
 80078d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d004      	beq.n	80078fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e00c      	b.n	8007918 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2205      	movs	r2, #5
 8007902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007930:	4b92      	ldr	r3, [pc, #584]	; (8007b7c <HAL_DMA_IRQHandler+0x258>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a92      	ldr	r2, [pc, #584]	; (8007b80 <HAL_DMA_IRQHandler+0x25c>)
 8007936:	fba2 2303 	umull	r2, r3, r2, r3
 800793a:	0a9b      	lsrs	r3, r3, #10
 800793c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794e:	2208      	movs	r2, #8
 8007950:	409a      	lsls	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01a      	beq.n	8007990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d013      	beq.n	8007990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0204 	bic.w	r2, r2, #4
 8007976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797c:	2208      	movs	r2, #8
 800797e:	409a      	lsls	r2, r3
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007988:	f043 0201 	orr.w	r2, r3, #1
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007994:	2201      	movs	r2, #1
 8007996:	409a      	lsls	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4013      	ands	r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d012      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	2201      	movs	r2, #1
 80079b4:	409a      	lsls	r2, r3
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079be:	f043 0202 	orr.w	r2, r3, #2
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ca:	2204      	movs	r2, #4
 80079cc:	409a      	lsls	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d012      	beq.n	80079fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e8:	2204      	movs	r2, #4
 80079ea:	409a      	lsls	r2, r3
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f4:	f043 0204 	orr.w	r2, r3, #4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a00:	2210      	movs	r2, #16
 8007a02:	409a      	lsls	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d043      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d03c      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1e:	2210      	movs	r2, #16
 8007a20:	409a      	lsls	r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d018      	beq.n	8007a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d108      	bne.n	8007a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d024      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
 8007a52:	e01f      	b.n	8007a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01b      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
 8007a64:	e016      	b.n	8007a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d107      	bne.n	8007a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0208 	bic.w	r2, r2, #8
 8007a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a98:	2220      	movs	r2, #32
 8007a9a:	409a      	lsls	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 808e 	beq.w	8007bc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8086 	beq.w	8007bc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aba:	2220      	movs	r2, #32
 8007abc:	409a      	lsls	r2, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d136      	bne.n	8007b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0216 	bic.w	r2, r2, #22
 8007adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <HAL_DMA_IRQHandler+0x1da>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d007      	beq.n	8007b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0208 	bic.w	r2, r2, #8
 8007b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b12:	223f      	movs	r2, #63	; 0x3f
 8007b14:	409a      	lsls	r2, r3
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d07d      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
        }
        return;
 8007b3a:	e078      	b.n	8007c2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01c      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d108      	bne.n	8007b6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d030      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
 8007b68:	e02b      	b.n	8007bc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d027      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	e022      	b.n	8007bc2 <HAL_DMA_IRQHandler+0x29e>
 8007b7c:	20000000 	.word	0x20000000
 8007b80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10f      	bne.n	8007bb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0210 	bic.w	r2, r2, #16
 8007ba0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d032      	beq.n	8007c30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d022      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2205      	movs	r2, #5
 8007bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d307      	bcc.n	8007c0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f2      	bne.n	8007bee <HAL_DMA_IRQHandler+0x2ca>
 8007c08:	e000      	b.n	8007c0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007c0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
 8007c2c:	e000      	b.n	8007c30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007c2e:	bf00      	nop
    }
  }
}
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d108      	bne.n	8007c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c8e:	e007      	b.n	8007ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	60da      	str	r2, [r3, #12]
}
 8007ca0:	bf00      	nop
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	3b10      	subs	r3, #16
 8007cbc:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <DMA_CalcBaseAndBitshift+0x64>)
 8007cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007cc6:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <DMA_CalcBaseAndBitshift+0x68>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d909      	bls.n	8007cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ce2:	f023 0303 	bic.w	r3, r3, #3
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	659a      	str	r2, [r3, #88]	; 0x58
 8007cec:	e007      	b.n	8007cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	aaaaaaab 	.word	0xaaaaaaab
 8007d14:	080178cc 	.word	0x080178cc

08007d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d11f      	bne.n	8007d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d855      	bhi.n	8007de4 <DMA_CheckFifoParam+0xcc>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <DMA_CheckFifoParam+0x28>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d63 	.word	0x08007d63
 8007d48:	08007d51 	.word	0x08007d51
 8007d4c:	08007de5 	.word	0x08007de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d045      	beq.n	8007de8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d60:	e042      	b.n	8007de8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d6a:	d13f      	bne.n	8007dec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d70:	e03c      	b.n	8007dec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7a:	d121      	bne.n	8007dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d836      	bhi.n	8007df0 <DMA_CheckFifoParam+0xd8>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <DMA_CheckFifoParam+0x70>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007d99 	.word	0x08007d99
 8007d8c:	08007d9f 	.word	0x08007d9f
 8007d90:	08007d99 	.word	0x08007d99
 8007d94:	08007db1 	.word	0x08007db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9c:	e02f      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d024      	beq.n	8007df4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dae:	e021      	b.n	8007df4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007db8:	d11e      	bne.n	8007df8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007dbe:	e01b      	b.n	8007df8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d902      	bls.n	8007dcc <DMA_CheckFifoParam+0xb4>
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d003      	beq.n	8007dd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007dca:	e018      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd0:	e015      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00e      	beq.n	8007dfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
      break;
 8007de2:	e00b      	b.n	8007dfc <DMA_CheckFifoParam+0xe4>
      break;
 8007de4:	bf00      	nop
 8007de6:	e00a      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      break;
 8007de8:	bf00      	nop
 8007dea:	e008      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      break;
 8007dec:	bf00      	nop
 8007dee:	e006      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      break;
 8007df0:	bf00      	nop
 8007df2:	e004      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      break;
 8007df4:	bf00      	nop
 8007df6:	e002      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      break;   
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <DMA_CheckFifoParam+0xe6>
      break;
 8007dfc:	bf00      	nop
    }
  } 
  
  return status; 
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b089      	sub	sp, #36	; 0x24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e177      	b.n	8008118 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e28:	2201      	movs	r2, #1
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f040 8166 	bne.w	8008112 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d00b      	beq.n	8007e66 <HAL_GPIO_Init+0x5a>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d007      	beq.n	8007e66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e5a:	2b11      	cmp	r3, #17
 8007e5c:	d003      	beq.n	8007e66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2b12      	cmp	r3, #18
 8007e64:	d130      	bne.n	8007ec8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	2203      	movs	r2, #3
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43db      	mvns	r3, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	43db      	mvns	r3, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	091b      	lsrs	r3, r3, #4
 8007eb2:	f003 0201 	and.w	r2, r3, #1
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	43db      	mvns	r3, r3
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4013      	ands	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d003      	beq.n	8007f08 <HAL_GPIO_Init+0xfc>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2b12      	cmp	r3, #18
 8007f06:	d123      	bne.n	8007f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	08da      	lsrs	r2, r3, #3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3208      	adds	r2, #8
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	220f      	movs	r2, #15
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	43db      	mvns	r3, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	08da      	lsrs	r2, r3, #3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3208      	adds	r2, #8
 8007f4a:	69b9      	ldr	r1, [r7, #24]
 8007f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	43db      	mvns	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f003 0203 	and.w	r2, r3, #3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	fa02 f303 	lsl.w	r3, r2, r3
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80c0 	beq.w	8008112 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	4b65      	ldr	r3, [pc, #404]	; (800812c <HAL_GPIO_Init+0x320>)
 8007f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9a:	4a64      	ldr	r2, [pc, #400]	; (800812c <HAL_GPIO_Init+0x320>)
 8007f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8007fa2:	4b62      	ldr	r3, [pc, #392]	; (800812c <HAL_GPIO_Init+0x320>)
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fae:	4a60      	ldr	r2, [pc, #384]	; (8008130 <HAL_GPIO_Init+0x324>)
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	089b      	lsrs	r3, r3, #2
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	220f      	movs	r2, #15
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a57      	ldr	r2, [pc, #348]	; (8008134 <HAL_GPIO_Init+0x328>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d037      	beq.n	800804a <HAL_GPIO_Init+0x23e>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a56      	ldr	r2, [pc, #344]	; (8008138 <HAL_GPIO_Init+0x32c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d031      	beq.n	8008046 <HAL_GPIO_Init+0x23a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a55      	ldr	r2, [pc, #340]	; (800813c <HAL_GPIO_Init+0x330>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d02b      	beq.n	8008042 <HAL_GPIO_Init+0x236>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a54      	ldr	r2, [pc, #336]	; (8008140 <HAL_GPIO_Init+0x334>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d025      	beq.n	800803e <HAL_GPIO_Init+0x232>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a53      	ldr	r2, [pc, #332]	; (8008144 <HAL_GPIO_Init+0x338>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d01f      	beq.n	800803a <HAL_GPIO_Init+0x22e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a52      	ldr	r2, [pc, #328]	; (8008148 <HAL_GPIO_Init+0x33c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d019      	beq.n	8008036 <HAL_GPIO_Init+0x22a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a51      	ldr	r2, [pc, #324]	; (800814c <HAL_GPIO_Init+0x340>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <HAL_GPIO_Init+0x226>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a50      	ldr	r2, [pc, #320]	; (8008150 <HAL_GPIO_Init+0x344>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00d      	beq.n	800802e <HAL_GPIO_Init+0x222>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a4f      	ldr	r2, [pc, #316]	; (8008154 <HAL_GPIO_Init+0x348>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d007      	beq.n	800802a <HAL_GPIO_Init+0x21e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a4e      	ldr	r2, [pc, #312]	; (8008158 <HAL_GPIO_Init+0x34c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d101      	bne.n	8008026 <HAL_GPIO_Init+0x21a>
 8008022:	2309      	movs	r3, #9
 8008024:	e012      	b.n	800804c <HAL_GPIO_Init+0x240>
 8008026:	230a      	movs	r3, #10
 8008028:	e010      	b.n	800804c <HAL_GPIO_Init+0x240>
 800802a:	2308      	movs	r3, #8
 800802c:	e00e      	b.n	800804c <HAL_GPIO_Init+0x240>
 800802e:	2307      	movs	r3, #7
 8008030:	e00c      	b.n	800804c <HAL_GPIO_Init+0x240>
 8008032:	2306      	movs	r3, #6
 8008034:	e00a      	b.n	800804c <HAL_GPIO_Init+0x240>
 8008036:	2305      	movs	r3, #5
 8008038:	e008      	b.n	800804c <HAL_GPIO_Init+0x240>
 800803a:	2304      	movs	r3, #4
 800803c:	e006      	b.n	800804c <HAL_GPIO_Init+0x240>
 800803e:	2303      	movs	r3, #3
 8008040:	e004      	b.n	800804c <HAL_GPIO_Init+0x240>
 8008042:	2302      	movs	r3, #2
 8008044:	e002      	b.n	800804c <HAL_GPIO_Init+0x240>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <HAL_GPIO_Init+0x240>
 800804a:	2300      	movs	r3, #0
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	f002 0203 	and.w	r2, r2, #3
 8008052:	0092      	lsls	r2, r2, #2
 8008054:	4093      	lsls	r3, r2
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	4313      	orrs	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800805c:	4934      	ldr	r1, [pc, #208]	; (8008130 <HAL_GPIO_Init+0x324>)
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	089b      	lsrs	r3, r3, #2
 8008062:	3302      	adds	r3, #2
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800806a:	4b3c      	ldr	r3, [pc, #240]	; (800815c <HAL_GPIO_Init+0x350>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	43db      	mvns	r3, r3
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4013      	ands	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800808e:	4a33      	ldr	r2, [pc, #204]	; (800815c <HAL_GPIO_Init+0x350>)
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008094:	4b31      	ldr	r3, [pc, #196]	; (800815c <HAL_GPIO_Init+0x350>)
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	43db      	mvns	r3, r3
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	4013      	ands	r3, r2
 80080a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080b8:	4a28      	ldr	r2, [pc, #160]	; (800815c <HAL_GPIO_Init+0x350>)
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80080be:	4b27      	ldr	r3, [pc, #156]	; (800815c <HAL_GPIO_Init+0x350>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	43db      	mvns	r3, r3
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	4013      	ands	r3, r2
 80080cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <HAL_GPIO_Init+0x350>)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080e8:	4b1c      	ldr	r3, [pc, #112]	; (800815c <HAL_GPIO_Init+0x350>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	43db      	mvns	r3, r3
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	4013      	ands	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800810c:	4a13      	ldr	r2, [pc, #76]	; (800815c <HAL_GPIO_Init+0x350>)
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	3301      	adds	r3, #1
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	2b0f      	cmp	r3, #15
 800811c:	f67f ae84 	bls.w	8007e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008120:	bf00      	nop
 8008122:	3724      	adds	r7, #36	; 0x24
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	40023800 	.word	0x40023800
 8008130:	40013800 	.word	0x40013800
 8008134:	40020000 	.word	0x40020000
 8008138:	40020400 	.word	0x40020400
 800813c:	40020800 	.word	0x40020800
 8008140:	40020c00 	.word	0x40020c00
 8008144:	40021000 	.word	0x40021000
 8008148:	40021400 	.word	0x40021400
 800814c:	40021800 	.word	0x40021800
 8008150:	40021c00 	.word	0x40021c00
 8008154:	40022000 	.word	0x40022000
 8008158:	40022400 	.word	0x40022400
 800815c:	40013c00 	.word	0x40013c00

08008160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	887b      	ldrh	r3, [r7, #2]
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
 800817c:	e001      	b.n	8008182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	807b      	strh	r3, [r7, #2]
 800819c:	4613      	mov	r3, r2
 800819e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081a0:	787b      	ldrb	r3, [r7, #1]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081a6:	887a      	ldrh	r2, [r7, #2]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80081ac:	e003      	b.n	80081b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80081ae:	887b      	ldrh	r3, [r7, #2]
 80081b0:	041a      	lsls	r2, r3, #16
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	619a      	str	r2, [r3, #24]
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
	...

080081c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80081ce:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d006      	beq.n	80081e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081da:	4a05      	ldr	r2, [pc, #20]	; (80081f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fb fc2e 	bl	8003a44 <HAL_GPIO_EXTI_Callback>
  }
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40013c00 	.word	0x40013c00

080081f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e11f      	b.n	8008446 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fc fc90 	bl	8004b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2224      	movs	r2, #36	; 0x24
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008258:	f001 f96e 	bl	8009538 <HAL_RCC_GetPCLK1Freq>
 800825c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	4a7b      	ldr	r2, [pc, #492]	; (8008450 <HAL_I2C_Init+0x25c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d807      	bhi.n	8008278 <HAL_I2C_Init+0x84>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a7a      	ldr	r2, [pc, #488]	; (8008454 <HAL_I2C_Init+0x260>)
 800826c:	4293      	cmp	r3, r2
 800826e:	bf94      	ite	ls
 8008270:	2301      	movls	r3, #1
 8008272:	2300      	movhi	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	e006      	b.n	8008286 <HAL_I2C_Init+0x92>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4a77      	ldr	r2, [pc, #476]	; (8008458 <HAL_I2C_Init+0x264>)
 800827c:	4293      	cmp	r3, r2
 800827e:	bf94      	ite	ls
 8008280:	2301      	movls	r3, #1
 8008282:	2300      	movhi	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e0db      	b.n	8008446 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a72      	ldr	r2, [pc, #456]	; (800845c <HAL_I2C_Init+0x268>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	0c9b      	lsrs	r3, r3, #18
 8008298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4a64      	ldr	r2, [pc, #400]	; (8008450 <HAL_I2C_Init+0x25c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d802      	bhi.n	80082c8 <HAL_I2C_Init+0xd4>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3301      	adds	r3, #1
 80082c6:	e009      	b.n	80082dc <HAL_I2C_Init+0xe8>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	4a63      	ldr	r2, [pc, #396]	; (8008460 <HAL_I2C_Init+0x26c>)
 80082d4:	fba2 2303 	umull	r2, r3, r2, r3
 80082d8:	099b      	lsrs	r3, r3, #6
 80082da:	3301      	adds	r3, #1
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80082ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4956      	ldr	r1, [pc, #344]	; (8008450 <HAL_I2C_Init+0x25c>)
 80082f8:	428b      	cmp	r3, r1
 80082fa:	d80d      	bhi.n	8008318 <HAL_I2C_Init+0x124>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	1e59      	subs	r1, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	fbb1 f3f3 	udiv	r3, r1, r3
 800830a:	3301      	adds	r3, #1
 800830c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008310:	2b04      	cmp	r3, #4
 8008312:	bf38      	it	cc
 8008314:	2304      	movcc	r3, #4
 8008316:	e04f      	b.n	80083b8 <HAL_I2C_Init+0x1c4>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d111      	bne.n	8008344 <HAL_I2C_Init+0x150>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	1e58      	subs	r0, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6859      	ldr	r1, [r3, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	440b      	add	r3, r1
 800832e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008332:	3301      	adds	r3, #1
 8008334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008338:	2b00      	cmp	r3, #0
 800833a:	bf0c      	ite	eq
 800833c:	2301      	moveq	r3, #1
 800833e:	2300      	movne	r3, #0
 8008340:	b2db      	uxtb	r3, r3
 8008342:	e012      	b.n	800836a <HAL_I2C_Init+0x176>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	1e58      	subs	r0, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6859      	ldr	r1, [r3, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	0099      	lsls	r1, r3, #2
 8008354:	440b      	add	r3, r1
 8008356:	fbb0 f3f3 	udiv	r3, r0, r3
 800835a:	3301      	adds	r3, #1
 800835c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <HAL_I2C_Init+0x17e>
 800836e:	2301      	movs	r3, #1
 8008370:	e022      	b.n	80083b8 <HAL_I2C_Init+0x1c4>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10e      	bne.n	8008398 <HAL_I2C_Init+0x1a4>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1e58      	subs	r0, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6859      	ldr	r1, [r3, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	440b      	add	r3, r1
 8008388:	fbb0 f3f3 	udiv	r3, r0, r3
 800838c:	3301      	adds	r3, #1
 800838e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008396:	e00f      	b.n	80083b8 <HAL_I2C_Init+0x1c4>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	1e58      	subs	r0, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6859      	ldr	r1, [r3, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	0099      	lsls	r1, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ae:	3301      	adds	r3, #1
 80083b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	6809      	ldr	r1, [r1, #0]
 80083bc:	4313      	orrs	r3, r2
 80083be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	69da      	ldr	r2, [r3, #28]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80083e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6911      	ldr	r1, [r2, #16]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68d2      	ldr	r2, [r2, #12]
 80083f2:	4311      	orrs	r1, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	430b      	orrs	r3, r1
 80083fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	000186a0 	.word	0x000186a0
 8008454:	001e847f 	.word	0x001e847f
 8008458:	003d08ff 	.word	0x003d08ff
 800845c:	431bde83 	.word	0x431bde83
 8008460:	10624dd3 	.word	0x10624dd3

08008464 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af02      	add	r7, sp, #8
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	461a      	mov	r2, r3
 8008470:	460b      	mov	r3, r1
 8008472:	817b      	strh	r3, [r7, #10]
 8008474:	4613      	mov	r3, r2
 8008476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008478:	f7fe fbe8 	bl	8006c4c <HAL_GetTick>
 800847c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b20      	cmp	r3, #32
 8008488:	f040 80e0 	bne.w	800864c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	2319      	movs	r3, #25
 8008492:	2201      	movs	r2, #1
 8008494:	4970      	ldr	r1, [pc, #448]	; (8008658 <HAL_I2C_Master_Transmit+0x1f4>)
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fc58 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80084a2:	2302      	movs	r3, #2
 80084a4:	e0d3      	b.n	800864e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_I2C_Master_Transmit+0x50>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e0cc      	b.n	800864e <HAL_I2C_Master_Transmit+0x1ea>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d007      	beq.n	80084da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f042 0201 	orr.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2221      	movs	r2, #33	; 0x21
 80084ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2210      	movs	r2, #16
 80084f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	893a      	ldrh	r2, [r7, #8]
 800850a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a50      	ldr	r2, [pc, #320]	; (800865c <HAL_I2C_Master_Transmit+0x1f8>)
 800851a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800851c:	8979      	ldrh	r1, [r7, #10]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fac2 	bl	8008aac <I2C_MasterRequestWrite>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e08d      	b.n	800864e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008548:	e066      	b.n	8008618 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	6a39      	ldr	r1, [r7, #32]
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fcd2 	bl	8008ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	2b04      	cmp	r3, #4
 8008560:	d107      	bne.n	8008572 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e06b      	b.n	800864e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	781a      	ldrb	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d11b      	bne.n	80085ec <HAL_I2C_Master_Transmit+0x188>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d017      	beq.n	80085ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	781a      	ldrb	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	6a39      	ldr	r1, [r7, #32]
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fcc2 	bl	8008f7a <I2C_WaitOnBTFFlagUntilTimeout>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00d      	beq.n	8008618 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008600:	2b04      	cmp	r3, #4
 8008602:	d107      	bne.n	8008614 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008612:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e01a      	b.n	800864e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861c:	2b00      	cmp	r3, #0
 800861e:	d194      	bne.n	800854a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800862e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	00100002 	.word	0x00100002
 800865c:	ffff0000 	.word	0xffff0000

08008660 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08c      	sub	sp, #48	; 0x30
 8008664:	af02      	add	r7, sp, #8
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	461a      	mov	r2, r3
 800866c:	460b      	mov	r3, r1
 800866e:	817b      	strh	r3, [r7, #10]
 8008670:	4613      	mov	r3, r2
 8008672:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008674:	f7fe faea 	bl	8006c4c <HAL_GetTick>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b20      	cmp	r3, #32
 8008684:	f040 820b 	bne.w	8008a9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2319      	movs	r3, #25
 800868e:	2201      	movs	r2, #1
 8008690:	497c      	ldr	r1, [pc, #496]	; (8008884 <HAL_I2C_Master_Receive+0x224>)
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 fb5a 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800869e:	2302      	movs	r3, #2
 80086a0:	e1fe      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_I2C_Master_Receive+0x50>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e1f7      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d007      	beq.n	80086d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0201 	orr.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2222      	movs	r2, #34	; 0x22
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2210      	movs	r2, #16
 80086f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	893a      	ldrh	r2, [r7, #8]
 8008706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4a5c      	ldr	r2, [pc, #368]	; (8008888 <HAL_I2C_Master_Receive+0x228>)
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008718:	8979      	ldrh	r1, [r7, #10]
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fa46 	bl	8008bb0 <I2C_MasterRequestRead>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e1b8      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d113      	bne.n	800875e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008736:	2300      	movs	r3, #0
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	623b      	str	r3, [r7, #32]
 800874a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e18c      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008762:	2b01      	cmp	r3, #1
 8008764:	d11b      	bne.n	800879e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008776:	2300      	movs	r3, #0
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	61fb      	str	r3, [r7, #28]
 800878a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	e16c      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d11b      	bne.n	80087de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087c6:	2300      	movs	r3, #0
 80087c8:	61bb      	str	r3, [r7, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	e14c      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008804:	e138      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880a:	2b03      	cmp	r3, #3
 800880c:	f200 80f1 	bhi.w	80089f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008814:	2b01      	cmp	r3, #1
 8008816:	d123      	bne.n	8008860 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fbed 	bl	8008ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e139      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691a      	ldr	r2, [r3, #16]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800885e:	e10b      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008864:	2b02      	cmp	r3, #2
 8008866:	d14e      	bne.n	8008906 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	2200      	movs	r2, #0
 8008870:	4906      	ldr	r1, [pc, #24]	; (800888c <HAL_I2C_Master_Receive+0x22c>)
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fa6a 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e10e      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
 8008882:	bf00      	nop
 8008884:	00100002 	.word	0x00100002
 8008888:	ffff0000 	.word	0xffff0000
 800888c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800889e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008904:	e0b8      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	2200      	movs	r2, #0
 800890e:	4966      	ldr	r1, [pc, #408]	; (8008aa8 <HAL_I2C_Master_Receive+0x448>)
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fa1b 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0bf      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800892e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2200      	movs	r2, #0
 800896a:	494f      	ldr	r1, [pc, #316]	; (8008aa8 <HAL_I2C_Master_Receive+0x448>)
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f9ed 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e091      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800898a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089f0:	e042      	b.n	8008a78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 fb00 	bl	8008ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e04c      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	3b01      	subs	r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d118      	bne.n	8008a78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	b2d2      	uxtb	r2, r2
 8008a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a62:	3b01      	subs	r3, #1
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f47f aec2 	bne.w	8008806 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e000      	b.n	8008aa0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008a9e:	2302      	movs	r3, #2
  }
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3728      	adds	r7, #40	; 0x28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	00010004 	.word	0x00010004

08008aac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d006      	beq.n	8008ad6 <I2C_MasterRequestWrite+0x2a>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d003      	beq.n	8008ad6 <I2C_MasterRequestWrite+0x2a>
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ad4:	d108      	bne.n	8008ae8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	e00b      	b.n	8008b00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	2b12      	cmp	r3, #18
 8008aee:	d107      	bne.n	8008b00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008afe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 f91d 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00d      	beq.n	8008b34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b26:	d103      	bne.n	8008b30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e035      	b.n	8008ba0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b3c:	d108      	bne.n	8008b50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b3e:	897b      	ldrh	r3, [r7, #10]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b4c:	611a      	str	r2, [r3, #16]
 8008b4e:	e01b      	b.n	8008b88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b50:	897b      	ldrh	r3, [r7, #10]
 8008b52:	11db      	asrs	r3, r3, #7
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0306 	and.w	r3, r3, #6
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f063 030f 	orn	r3, r3, #15
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	490e      	ldr	r1, [pc, #56]	; (8008ba8 <I2C_MasterRequestWrite+0xfc>)
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 f943 	bl	8008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e010      	b.n	8008ba0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008b7e:	897b      	ldrh	r3, [r7, #10]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	4907      	ldr	r1, [pc, #28]	; (8008bac <I2C_MasterRequestWrite+0x100>)
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f933 	bl	8008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	00010008 	.word	0x00010008
 8008bac:	00010002 	.word	0x00010002

08008bb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d006      	beq.n	8008bea <I2C_MasterRequestRead+0x3a>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d003      	beq.n	8008bea <I2C_MasterRequestRead+0x3a>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008be8:	d108      	bne.n	8008bfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e00b      	b.n	8008c14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	2b11      	cmp	r3, #17
 8008c02:	d107      	bne.n	8008c14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f893 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00d      	beq.n	8008c48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3a:	d103      	bne.n	8008c44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e079      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c50:	d108      	bne.n	8008c64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c52:	897b      	ldrh	r3, [r7, #10]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	611a      	str	r2, [r3, #16]
 8008c62:	e05f      	b.n	8008d24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c64:	897b      	ldrh	r3, [r7, #10]
 8008c66:	11db      	asrs	r3, r3, #7
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0306 	and.w	r3, r3, #6
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f063 030f 	orn	r3, r3, #15
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4930      	ldr	r1, [pc, #192]	; (8008d44 <I2C_MasterRequestRead+0x194>)
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f8b9 	bl	8008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e054      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c92:	897b      	ldrh	r3, [r7, #10]
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	4929      	ldr	r1, [pc, #164]	; (8008d48 <I2C_MasterRequestRead+0x198>)
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f8a9 	bl	8008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e044      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 f831 	bl	8008d4c <I2C_WaitOnFlagUntilTimeout>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00d      	beq.n	8008d0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cfe:	d103      	bne.n	8008d08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e017      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008d0c:	897b      	ldrh	r3, [r7, #10]
 8008d0e:	11db      	asrs	r3, r3, #7
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 0306 	and.w	r3, r3, #6
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f063 030e 	orn	r3, r3, #14
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	4907      	ldr	r1, [pc, #28]	; (8008d48 <I2C_MasterRequestRead+0x198>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 f865 	bl	8008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	00010008 	.word	0x00010008
 8008d48:	00010002 	.word	0x00010002

08008d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d5c:	e025      	b.n	8008daa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d021      	beq.n	8008daa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d66:	f7fd ff71 	bl	8006c4c <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d302      	bcc.n	8008d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d116      	bne.n	8008daa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	f043 0220 	orr.w	r2, r3, #32
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e023      	b.n	8008df2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	0c1b      	lsrs	r3, r3, #16
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d10d      	bne.n	8008dd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	43da      	mvns	r2, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bf0c      	ite	eq
 8008dc6:	2301      	moveq	r3, #1
 8008dc8:	2300      	movne	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	e00c      	b.n	8008dea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	43da      	mvns	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bf0c      	ite	eq
 8008de2:	2301      	moveq	r3, #1
 8008de4:	2300      	movne	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d0b6      	beq.n	8008d5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
 8008e06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e08:	e051      	b.n	8008eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e18:	d123      	bne.n	8008e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f043 0204 	orr.w	r2, r3, #4
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e046      	b.n	8008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d021      	beq.n	8008eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6a:	f7fd feef 	bl	8006c4c <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d302      	bcc.n	8008e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d116      	bne.n	8008eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	f043 0220 	orr.w	r2, r3, #32
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e020      	b.n	8008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d10c      	bne.n	8008ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	43da      	mvns	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bf14      	ite	ne
 8008eca:	2301      	movne	r3, #1
 8008ecc:	2300      	moveq	r3, #0
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	e00b      	b.n	8008eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	43da      	mvns	r2, r3
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	4013      	ands	r3, r2
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bf14      	ite	ne
 8008ee4:	2301      	movne	r3, #1
 8008ee6:	2300      	moveq	r3, #0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d18d      	bne.n	8008e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f04:	e02d      	b.n	8008f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f8ce 	bl	80090a8 <I2C_IsAcknowledgeFailed>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e02d      	b.n	8008f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1c:	d021      	beq.n	8008f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f1e:	f7fd fe95 	bl	8006c4c <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d302      	bcc.n	8008f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d116      	bne.n	8008f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f043 0220 	orr.w	r2, r3, #32
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e007      	b.n	8008f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d1ca      	bne.n	8008f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f86:	e02d      	b.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f88d 	bl	80090a8 <I2C_IsAcknowledgeFailed>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e02d      	b.n	8008ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d021      	beq.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa0:	f7fd fe54 	bl	8006c4c <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d302      	bcc.n	8008fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d116      	bne.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e007      	b.n	8008ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d1ca      	bne.n	8008f88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009008:	e042      	b.n	8009090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b10      	cmp	r3, #16
 8009016:	d119      	bne.n	800904c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f06f 0210 	mvn.w	r2, #16
 8009020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e029      	b.n	80090a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800904c:	f7fd fdfe 	bl	8006c4c <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	429a      	cmp	r2, r3
 800905a:	d302      	bcc.n	8009062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d116      	bne.n	8009090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e007      	b.n	80090a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	d1b5      	bne.n	800900a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090be:	d11b      	bne.n	80090f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	f043 0204 	orr.w	r2, r3, #4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e000      	b.n	80090fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
	...

08009108 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009112:	2300      	movs	r3, #0
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	4b20      	ldr	r3, [pc, #128]	; (8009198 <HAL_PWREx_EnableOverDrive+0x90>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	4a1f      	ldr	r2, [pc, #124]	; (8009198 <HAL_PWREx_EnableOverDrive+0x90>)
 800911c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009120:	6413      	str	r3, [r2, #64]	; 0x40
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <HAL_PWREx_EnableOverDrive+0x90>)
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800912e:	4b1b      	ldr	r3, [pc, #108]	; (800919c <HAL_PWREx_EnableOverDrive+0x94>)
 8009130:	2201      	movs	r2, #1
 8009132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009134:	f7fd fd8a 	bl	8006c4c <HAL_GetTick>
 8009138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800913a:	e009      	b.n	8009150 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800913c:	f7fd fd86 	bl	8006c4c <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800914a:	d901      	bls.n	8009150 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e01f      	b.n	8009190 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009150:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d1ee      	bne.n	800913c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800915e:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009160:	2201      	movs	r2, #1
 8009162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009164:	f7fd fd72 	bl	8006c4c <HAL_GetTick>
 8009168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800916a:	e009      	b.n	8009180 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800916c:	f7fd fd6e 	bl	8006c4c <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800917a:	d901      	bls.n	8009180 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e007      	b.n	8009190 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800918c:	d1ee      	bne.n	800916c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	40023800 	.word	0x40023800
 800919c:	420e0040 	.word	0x420e0040
 80091a0:	40007000 	.word	0x40007000
 80091a4:	420e0044 	.word	0x420e0044

080091a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e0cc      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091bc:	4b68      	ldr	r3, [pc, #416]	; (8009360 <HAL_RCC_ClockConfig+0x1b8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 030f 	and.w	r3, r3, #15
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d90c      	bls.n	80091e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ca:	4b65      	ldr	r3, [pc, #404]	; (8009360 <HAL_RCC_ClockConfig+0x1b8>)
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	b2d2      	uxtb	r2, r2
 80091d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091d2:	4b63      	ldr	r3, [pc, #396]	; (8009360 <HAL_RCC_ClockConfig+0x1b8>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 030f 	and.w	r3, r3, #15
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d001      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e0b8      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d020      	beq.n	8009232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091fc:	4b59      	ldr	r3, [pc, #356]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	4a58      	ldr	r2, [pc, #352]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0308 	and.w	r3, r3, #8
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009214:	4b53      	ldr	r3, [pc, #332]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	4a52      	ldr	r2, [pc, #328]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 800921a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800921e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009220:	4b50      	ldr	r3, [pc, #320]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	494d      	ldr	r1, [pc, #308]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 800922e:	4313      	orrs	r3, r2
 8009230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d044      	beq.n	80092c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d107      	bne.n	8009256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009246:	4b47      	ldr	r3, [pc, #284]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d119      	bne.n	8009286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e07f      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d003      	beq.n	8009266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009262:	2b03      	cmp	r3, #3
 8009264:	d107      	bne.n	8009276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009266:	4b3f      	ldr	r3, [pc, #252]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e06f      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009276:	4b3b      	ldr	r3, [pc, #236]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e067      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009286:	4b37      	ldr	r3, [pc, #220]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f023 0203 	bic.w	r2, r3, #3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	4934      	ldr	r1, [pc, #208]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009294:	4313      	orrs	r3, r2
 8009296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009298:	f7fd fcd8 	bl	8006c4c <HAL_GetTick>
 800929c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800929e:	e00a      	b.n	80092b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092a0:	f7fd fcd4 	bl	8006c4c <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e04f      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f003 020c 	and.w	r2, r3, #12
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d1eb      	bne.n	80092a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092c8:	4b25      	ldr	r3, [pc, #148]	; (8009360 <HAL_RCC_ClockConfig+0x1b8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d20c      	bcs.n	80092f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092d6:	4b22      	ldr	r3, [pc, #136]	; (8009360 <HAL_RCC_ClockConfig+0x1b8>)
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	b2d2      	uxtb	r2, r2
 80092dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092de:	4b20      	ldr	r3, [pc, #128]	; (8009360 <HAL_RCC_ClockConfig+0x1b8>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d001      	beq.n	80092f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e032      	b.n	8009356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d008      	beq.n	800930e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092fc:	4b19      	ldr	r3, [pc, #100]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4916      	ldr	r1, [pc, #88]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 800930a:	4313      	orrs	r3, r2
 800930c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0308 	and.w	r3, r3, #8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	490e      	ldr	r1, [pc, #56]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 800932a:	4313      	orrs	r3, r2
 800932c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800932e:	f000 f821 	bl	8009374 <HAL_RCC_GetSysClockFreq>
 8009332:	4601      	mov	r1, r0
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <HAL_RCC_ClockConfig+0x1bc>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	091b      	lsrs	r3, r3, #4
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <HAL_RCC_ClockConfig+0x1c0>)
 8009340:	5cd3      	ldrb	r3, [r2, r3]
 8009342:	fa21 f303 	lsr.w	r3, r1, r3
 8009346:	4a09      	ldr	r2, [pc, #36]	; (800936c <HAL_RCC_ClockConfig+0x1c4>)
 8009348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <HAL_RCC_ClockConfig+0x1c8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7fd fc38 	bl	8006bc4 <HAL_InitTick>

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40023c00 	.word	0x40023c00
 8009364:	40023800 	.word	0x40023800
 8009368:	080178b4 	.word	0x080178b4
 800936c:	20000000 	.word	0x20000000
 8009370:	20000004 	.word	0x20000004

08009374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	607b      	str	r3, [r7, #4]
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800938a:	4b63      	ldr	r3, [pc, #396]	; (8009518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b04      	cmp	r3, #4
 8009394:	d007      	beq.n	80093a6 <HAL_RCC_GetSysClockFreq+0x32>
 8009396:	2b08      	cmp	r3, #8
 8009398:	d008      	beq.n	80093ac <HAL_RCC_GetSysClockFreq+0x38>
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 80b4 	bne.w	8009508 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093a0:	4b5e      	ldr	r3, [pc, #376]	; (800951c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80093a2:	60bb      	str	r3, [r7, #8]
       break;
 80093a4:	e0b3      	b.n	800950e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093a6:	4b5d      	ldr	r3, [pc, #372]	; (800951c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80093a8:	60bb      	str	r3, [r7, #8]
      break;
 80093aa:	e0b0      	b.n	800950e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093ac:	4b5a      	ldr	r3, [pc, #360]	; (8009518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093b6:	4b58      	ldr	r3, [pc, #352]	; (8009518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d04a      	beq.n	8009458 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093c2:	4b55      	ldr	r3, [pc, #340]	; (8009518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	099b      	lsrs	r3, r3, #6
 80093c8:	f04f 0400 	mov.w	r4, #0
 80093cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	ea03 0501 	and.w	r5, r3, r1
 80093d8:	ea04 0602 	and.w	r6, r4, r2
 80093dc:	4629      	mov	r1, r5
 80093de:	4632      	mov	r2, r6
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	f04f 0400 	mov.w	r4, #0
 80093e8:	0154      	lsls	r4, r2, #5
 80093ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80093ee:	014b      	lsls	r3, r1, #5
 80093f0:	4619      	mov	r1, r3
 80093f2:	4622      	mov	r2, r4
 80093f4:	1b49      	subs	r1, r1, r5
 80093f6:	eb62 0206 	sbc.w	r2, r2, r6
 80093fa:	f04f 0300 	mov.w	r3, #0
 80093fe:	f04f 0400 	mov.w	r4, #0
 8009402:	0194      	lsls	r4, r2, #6
 8009404:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009408:	018b      	lsls	r3, r1, #6
 800940a:	1a5b      	subs	r3, r3, r1
 800940c:	eb64 0402 	sbc.w	r4, r4, r2
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	00e2      	lsls	r2, r4, #3
 800941a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800941e:	00d9      	lsls	r1, r3, #3
 8009420:	460b      	mov	r3, r1
 8009422:	4614      	mov	r4, r2
 8009424:	195b      	adds	r3, r3, r5
 8009426:	eb44 0406 	adc.w	r4, r4, r6
 800942a:	f04f 0100 	mov.w	r1, #0
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	02a2      	lsls	r2, r4, #10
 8009434:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009438:	0299      	lsls	r1, r3, #10
 800943a:	460b      	mov	r3, r1
 800943c:	4614      	mov	r4, r2
 800943e:	4618      	mov	r0, r3
 8009440:	4621      	mov	r1, r4
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f04f 0400 	mov.w	r4, #0
 8009448:	461a      	mov	r2, r3
 800944a:	4623      	mov	r3, r4
 800944c:	f7f7 fc34 	bl	8000cb8 <__aeabi_uldivmod>
 8009450:	4603      	mov	r3, r0
 8009452:	460c      	mov	r4, r1
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e049      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009458:	4b2f      	ldr	r3, [pc, #188]	; (8009518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	099b      	lsrs	r3, r3, #6
 800945e:	f04f 0400 	mov.w	r4, #0
 8009462:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	ea03 0501 	and.w	r5, r3, r1
 800946e:	ea04 0602 	and.w	r6, r4, r2
 8009472:	4629      	mov	r1, r5
 8009474:	4632      	mov	r2, r6
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	f04f 0400 	mov.w	r4, #0
 800947e:	0154      	lsls	r4, r2, #5
 8009480:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009484:	014b      	lsls	r3, r1, #5
 8009486:	4619      	mov	r1, r3
 8009488:	4622      	mov	r2, r4
 800948a:	1b49      	subs	r1, r1, r5
 800948c:	eb62 0206 	sbc.w	r2, r2, r6
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	f04f 0400 	mov.w	r4, #0
 8009498:	0194      	lsls	r4, r2, #6
 800949a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800949e:	018b      	lsls	r3, r1, #6
 80094a0:	1a5b      	subs	r3, r3, r1
 80094a2:	eb64 0402 	sbc.w	r4, r4, r2
 80094a6:	f04f 0100 	mov.w	r1, #0
 80094aa:	f04f 0200 	mov.w	r2, #0
 80094ae:	00e2      	lsls	r2, r4, #3
 80094b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80094b4:	00d9      	lsls	r1, r3, #3
 80094b6:	460b      	mov	r3, r1
 80094b8:	4614      	mov	r4, r2
 80094ba:	195b      	adds	r3, r3, r5
 80094bc:	eb44 0406 	adc.w	r4, r4, r6
 80094c0:	f04f 0100 	mov.w	r1, #0
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	02a2      	lsls	r2, r4, #10
 80094ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80094ce:	0299      	lsls	r1, r3, #10
 80094d0:	460b      	mov	r3, r1
 80094d2:	4614      	mov	r4, r2
 80094d4:	4618      	mov	r0, r3
 80094d6:	4621      	mov	r1, r4
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f04f 0400 	mov.w	r4, #0
 80094de:	461a      	mov	r2, r3
 80094e0:	4623      	mov	r3, r4
 80094e2:	f7f7 fbe9 	bl	8000cb8 <__aeabi_uldivmod>
 80094e6:	4603      	mov	r3, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	0c1b      	lsrs	r3, r3, #16
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	3301      	adds	r3, #1
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	fbb2 f3f3 	udiv	r3, r2, r3
 8009504:	60bb      	str	r3, [r7, #8]
      break;
 8009506:	e002      	b.n	800950e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009508:	4b04      	ldr	r3, [pc, #16]	; (800951c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800950a:	60bb      	str	r3, [r7, #8]
      break;
 800950c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800950e:	68bb      	ldr	r3, [r7, #8]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	40023800 	.word	0x40023800
 800951c:	00f42400 	.word	0x00f42400

08009520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009524:	4b03      	ldr	r3, [pc, #12]	; (8009534 <HAL_RCC_GetHCLKFreq+0x14>)
 8009526:	681b      	ldr	r3, [r3, #0]
}
 8009528:	4618      	mov	r0, r3
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000000 	.word	0x20000000

08009538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800953c:	f7ff fff0 	bl	8009520 <HAL_RCC_GetHCLKFreq>
 8009540:	4601      	mov	r1, r0
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	0a9b      	lsrs	r3, r3, #10
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	4a03      	ldr	r2, [pc, #12]	; (800955c <HAL_RCC_GetPCLK1Freq+0x24>)
 800954e:	5cd3      	ldrb	r3, [r2, r3]
 8009550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009554:	4618      	mov	r0, r3
 8009556:	bd80      	pop	{r7, pc}
 8009558:	40023800 	.word	0x40023800
 800955c:	080178c4 	.word	0x080178c4

08009560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009564:	f7ff ffdc 	bl	8009520 <HAL_RCC_GetHCLKFreq>
 8009568:	4601      	mov	r1, r0
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	0b5b      	lsrs	r3, r3, #13
 8009570:	f003 0307 	and.w	r3, r3, #7
 8009574:	4a03      	ldr	r2, [pc, #12]	; (8009584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009576:	5cd3      	ldrb	r3, [r2, r3]
 8009578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800957c:	4618      	mov	r0, r3
 800957e:	bd80      	pop	{r7, pc}
 8009580:	40023800 	.word	0x40023800
 8009584:	080178c4 	.word	0x080178c4

08009588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b088      	sub	sp, #32
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00a      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80095b0:	4b66      	ldr	r3, [pc, #408]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095be:	4963      	ldr	r1, [pc, #396]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80095d2:	4b5e      	ldr	r3, [pc, #376]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	495a      	ldr	r1, [pc, #360]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10b      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d105      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009608:	2b00      	cmp	r3, #0
 800960a:	d075      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800960c:	4b50      	ldr	r3, [pc, #320]	; (8009750 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009612:	f7fd fb1b 	bl	8006c4c <HAL_GetTick>
 8009616:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009618:	e008      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800961a:	f7fd fb17 	bl	8006c4c <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d901      	bls.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e1dc      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800962c:	4b47      	ldr	r3, [pc, #284]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f0      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	019a      	lsls	r2, r3, #6
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	071b      	lsls	r3, r3, #28
 8009650:	493e      	ldr	r1, [pc, #248]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009652:	4313      	orrs	r3, r2
 8009654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01f      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009664:	4b39      	ldr	r3, [pc, #228]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800966a:	0f1b      	lsrs	r3, r3, #28
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	019a      	lsls	r2, r3, #6
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	061b      	lsls	r3, r3, #24
 800967e:	431a      	orrs	r2, r3
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	071b      	lsls	r3, r3, #28
 8009684:	4931      	ldr	r1, [pc, #196]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009686:	4313      	orrs	r3, r2
 8009688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800968c:	4b2f      	ldr	r3, [pc, #188]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800968e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009692:	f023 021f 	bic.w	r2, r3, #31
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	3b01      	subs	r3, #1
 800969c:	492b      	ldr	r1, [pc, #172]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00d      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	019a      	lsls	r2, r3, #6
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	061b      	lsls	r3, r3, #24
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	071b      	lsls	r3, r3, #28
 80096c4:	4921      	ldr	r1, [pc, #132]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80096cc:	4b20      	ldr	r3, [pc, #128]	; (8009750 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80096d2:	f7fd fabb 	bl	8006c4c <HAL_GetTick>
 80096d6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80096d8:	e008      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80096da:	f7fd fab7 	bl	8006c4c <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d901      	bls.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e17c      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80096ec:	4b17      	ldr	r3, [pc, #92]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0f0      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d112      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10c      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80ce 	beq.w	80098ba <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009726:	f040 80c8 	bne.w	80098ba <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800972c:	2200      	movs	r2, #0
 800972e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009730:	f7fd fa8c 	bl	8006c4c <HAL_GetTick>
 8009734:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009736:	e00f      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009738:	f7fd fa88 	bl	8006c4c <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d908      	bls.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e14d      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800974a:	bf00      	nop
 800974c:	40023800 	.word	0x40023800
 8009750:	42470068 	.word	0x42470068
 8009754:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009758:	4ba5      	ldr	r3, [pc, #660]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009764:	d0e8      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0304 	and.w	r3, r3, #4
 800976e:	2b00      	cmp	r3, #0
 8009770:	d02e      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009772:	4b9f      	ldr	r3, [pc, #636]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009778:	0c1b      	lsrs	r3, r3, #16
 800977a:	f003 0303 	and.w	r3, r3, #3
 800977e:	3301      	adds	r3, #1
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009784:	4b9a      	ldr	r3, [pc, #616]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	0f1b      	lsrs	r3, r3, #28
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	019a      	lsls	r2, r3, #6
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	085b      	lsrs	r3, r3, #1
 800979c:	3b01      	subs	r3, #1
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	061b      	lsls	r3, r3, #24
 80097a8:	431a      	orrs	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	071b      	lsls	r3, r3, #28
 80097ae:	4990      	ldr	r1, [pc, #576]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80097b6:	4b8e      	ldr	r3, [pc, #568]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	3b01      	subs	r3, #1
 80097c6:	021b      	lsls	r3, r3, #8
 80097c8:	4989      	ldr	r1, [pc, #548]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d02c      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80097dc:	4b84      	ldr	r3, [pc, #528]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e2:	0c1b      	lsrs	r3, r3, #16
 80097e4:	f003 0303 	and.w	r3, r3, #3
 80097e8:	3301      	adds	r3, #1
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80097ee:	4b80      	ldr	r3, [pc, #512]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f4:	0e1b      	lsrs	r3, r3, #24
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	019a      	lsls	r2, r3, #6
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	3b01      	subs	r3, #1
 8009808:	041b      	lsls	r3, r3, #16
 800980a:	431a      	orrs	r2, r3
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	061b      	lsls	r3, r3, #24
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	071b      	lsls	r3, r3, #28
 8009818:	4975      	ldr	r1, [pc, #468]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800981a:	4313      	orrs	r3, r2
 800981c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009820:	4b73      	ldr	r3, [pc, #460]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009826:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	4970      	ldr	r1, [pc, #448]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009830:	4313      	orrs	r3, r2
 8009832:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983e:	2b00      	cmp	r3, #0
 8009840:	d024      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800984a:	d11f      	bne.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800984c:	4b68      	ldr	r3, [pc, #416]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009852:	0e1b      	lsrs	r3, r3, #24
 8009854:	f003 030f 	and.w	r3, r3, #15
 8009858:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800985a:	4b65      	ldr	r3, [pc, #404]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009860:	0f1b      	lsrs	r3, r3, #28
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	019a      	lsls	r2, r3, #6
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	3b01      	subs	r3, #1
 8009876:	041b      	lsls	r3, r3, #16
 8009878:	431a      	orrs	r2, r3
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	431a      	orrs	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	071b      	lsls	r3, r3, #28
 8009884:	495a      	ldr	r1, [pc, #360]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009886:	4313      	orrs	r3, r2
 8009888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800988c:	4b59      	ldr	r3, [pc, #356]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009892:	f7fd f9db 	bl	8006c4c <HAL_GetTick>
 8009896:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009898:	e008      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800989a:	f7fd f9d7 	bl	8006c4c <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d901      	bls.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e09c      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098ac:	4b50      	ldr	r3, [pc, #320]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b8:	d1ef      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 8083 	beq.w	80099ce <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80098c8:	2300      	movs	r3, #0
 80098ca:	60bb      	str	r3, [r7, #8]
 80098cc:	4b48      	ldr	r3, [pc, #288]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	4a47      	ldr	r2, [pc, #284]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098d6:	6413      	str	r3, [r2, #64]	; 0x40
 80098d8:	4b45      	ldr	r3, [pc, #276]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098e0:	60bb      	str	r3, [r7, #8]
 80098e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80098e4:	4b44      	ldr	r3, [pc, #272]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a43      	ldr	r2, [pc, #268]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80098ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80098f0:	f7fd f9ac 	bl	8006c4c <HAL_GetTick>
 80098f4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80098f8:	f7fd f9a8 	bl	8006c4c <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e06d      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800990a:	4b3b      	ldr	r3, [pc, #236]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f0      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009916:	4b36      	ldr	r3, [pc, #216]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800991e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d02f      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	429a      	cmp	r2, r3
 8009932:	d028      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009934:	4b2e      	ldr	r3, [pc, #184]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800993c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800993e:	4b2f      	ldr	r3, [pc, #188]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009940:	2201      	movs	r2, #1
 8009942:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009944:	4b2d      	ldr	r3, [pc, #180]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009946:	2200      	movs	r2, #0
 8009948:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800994a:	4a29      	ldr	r2, [pc, #164]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009950:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b01      	cmp	r3, #1
 800995a:	d114      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800995c:	f7fd f976 	bl	8006c4c <HAL_GetTick>
 8009960:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009962:	e00a      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009964:	f7fd f972 	bl	8006c4c <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009972:	4293      	cmp	r3, r2
 8009974:	d901      	bls.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e035      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800997a:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0ee      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009992:	d10d      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009994:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a8:	4911      	ldr	r1, [pc, #68]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	608b      	str	r3, [r1, #8]
 80099ae:	e005      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	4a0e      	ldr	r2, [pc, #56]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80099ba:	6093      	str	r3, [r2, #8]
 80099bc:	4b0c      	ldr	r3, [pc, #48]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c8:	4909      	ldr	r1, [pc, #36]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0310 	and.w	r3, r3, #16
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80099e2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40023800 	.word	0x40023800
 80099f4:	42470070 	.word	0x42470070
 80099f8:	40007000 	.word	0x40007000
 80099fc:	42470e40 	.word	0x42470e40
 8009a00:	424711e0 	.word	0x424711e0

08009a04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d075      	beq.n	8009b08 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009a1c:	4ba2      	ldr	r3, [pc, #648]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f003 030c 	and.w	r3, r3, #12
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d00c      	beq.n	8009a42 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a28:	4b9f      	ldr	r3, [pc, #636]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d112      	bne.n	8009a5a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a34:	4b9c      	ldr	r3, [pc, #624]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a40:	d10b      	bne.n	8009a5a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a42:	4b99      	ldr	r3, [pc, #612]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d05b      	beq.n	8009b06 <HAL_RCC_OscConfig+0x102>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d157      	bne.n	8009b06 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e20b      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a62:	d106      	bne.n	8009a72 <HAL_RCC_OscConfig+0x6e>
 8009a64:	4b90      	ldr	r3, [pc, #576]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a8f      	ldr	r2, [pc, #572]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	e01d      	b.n	8009aae <HAL_RCC_OscConfig+0xaa>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a7a:	d10c      	bne.n	8009a96 <HAL_RCC_OscConfig+0x92>
 8009a7c:	4b8a      	ldr	r3, [pc, #552]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a89      	ldr	r2, [pc, #548]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	4b87      	ldr	r3, [pc, #540]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a86      	ldr	r2, [pc, #536]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	e00b      	b.n	8009aae <HAL_RCC_OscConfig+0xaa>
 8009a96:	4b84      	ldr	r3, [pc, #528]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a83      	ldr	r2, [pc, #524]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	4b81      	ldr	r3, [pc, #516]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a80      	ldr	r2, [pc, #512]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d013      	beq.n	8009ade <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab6:	f7fd f8c9 	bl	8006c4c <HAL_GetTick>
 8009aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009abc:	e008      	b.n	8009ad0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009abe:	f7fd f8c5 	bl	8006c4c <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	2b64      	cmp	r3, #100	; 0x64
 8009aca:	d901      	bls.n	8009ad0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e1d0      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ad0:	4b75      	ldr	r3, [pc, #468]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f0      	beq.n	8009abe <HAL_RCC_OscConfig+0xba>
 8009adc:	e014      	b.n	8009b08 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ade:	f7fd f8b5 	bl	8006c4c <HAL_GetTick>
 8009ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ae6:	f7fd f8b1 	bl	8006c4c <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b64      	cmp	r3, #100	; 0x64
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e1bc      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009af8:	4b6b      	ldr	r3, [pc, #428]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1f0      	bne.n	8009ae6 <HAL_RCC_OscConfig+0xe2>
 8009b04:	e000      	b.n	8009b08 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d063      	beq.n	8009bdc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009b14:	4b64      	ldr	r3, [pc, #400]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f003 030c 	and.w	r3, r3, #12
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b20:	4b61      	ldr	r3, [pc, #388]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d11c      	bne.n	8009b66 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b2c:	4b5e      	ldr	r3, [pc, #376]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d116      	bne.n	8009b66 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b38:	4b5b      	ldr	r3, [pc, #364]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <HAL_RCC_OscConfig+0x14c>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d001      	beq.n	8009b50 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e190      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b50:	4b55      	ldr	r3, [pc, #340]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	4952      	ldr	r1, [pc, #328]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b64:	e03a      	b.n	8009bdc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d020      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b6e:	4b4f      	ldr	r3, [pc, #316]	; (8009cac <HAL_RCC_OscConfig+0x2a8>)
 8009b70:	2201      	movs	r2, #1
 8009b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7fd f86a 	bl	8006c4c <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b7c:	f7fd f866 	bl	8006c4c <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e171      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b8e:	4b46      	ldr	r3, [pc, #280]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0f0      	beq.n	8009b7c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b9a:	4b43      	ldr	r3, [pc, #268]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	493f      	ldr	r1, [pc, #252]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	600b      	str	r3, [r1, #0]
 8009bae:	e015      	b.n	8009bdc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <HAL_RCC_OscConfig+0x2a8>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb6:	f7fd f849 	bl	8006c4c <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bbc:	e008      	b.n	8009bd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bbe:	f7fd f845 	bl	8006c4c <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e150      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bd0:	4b35      	ldr	r3, [pc, #212]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f0      	bne.n	8009bbe <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d030      	beq.n	8009c4a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d016      	beq.n	8009c1e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bf0:	4b2f      	ldr	r3, [pc, #188]	; (8009cb0 <HAL_RCC_OscConfig+0x2ac>)
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf6:	f7fd f829 	bl	8006c4c <HAL_GetTick>
 8009bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bfc:	e008      	b.n	8009c10 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bfe:	f7fd f825 	bl	8006c4c <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d901      	bls.n	8009c10 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e130      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c10:	4b25      	ldr	r3, [pc, #148]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0f0      	beq.n	8009bfe <HAL_RCC_OscConfig+0x1fa>
 8009c1c:	e015      	b.n	8009c4a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c1e:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <HAL_RCC_OscConfig+0x2ac>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c24:	f7fd f812 	bl	8006c4c <HAL_GetTick>
 8009c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c2c:	f7fd f80e 	bl	8006c4c <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e119      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c3e:	4b1a      	ldr	r3, [pc, #104]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1f0      	bne.n	8009c2c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0304 	and.w	r3, r3, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 809f 	beq.w	8009d96 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c5c:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10f      	bne.n	8009c88 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	4a0d      	ldr	r2, [pc, #52]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c76:	6413      	str	r3, [r2, #64]	; 0x40
 8009c78:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <HAL_RCC_OscConfig+0x2a4>)
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <HAL_RCC_OscConfig+0x2b0>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d120      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c94:	4b07      	ldr	r3, [pc, #28]	; (8009cb4 <HAL_RCC_OscConfig+0x2b0>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a06      	ldr	r2, [pc, #24]	; (8009cb4 <HAL_RCC_OscConfig+0x2b0>)
 8009c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ca0:	f7fc ffd4 	bl	8006c4c <HAL_GetTick>
 8009ca4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ca6:	e010      	b.n	8009cca <HAL_RCC_OscConfig+0x2c6>
 8009ca8:	40023800 	.word	0x40023800
 8009cac:	42470000 	.word	0x42470000
 8009cb0:	42470e80 	.word	0x42470e80
 8009cb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cb8:	f7fc ffc8 	bl	8006c4c <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d901      	bls.n	8009cca <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e0d3      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cca:	4b6c      	ldr	r3, [pc, #432]	; (8009e7c <HAL_RCC_OscConfig+0x478>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0f0      	beq.n	8009cb8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d106      	bne.n	8009cec <HAL_RCC_OscConfig+0x2e8>
 8009cde:	4b68      	ldr	r3, [pc, #416]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce2:	4a67      	ldr	r2, [pc, #412]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009ce4:	f043 0301 	orr.w	r3, r3, #1
 8009ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8009cea:	e01c      	b.n	8009d26 <HAL_RCC_OscConfig+0x322>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2b05      	cmp	r3, #5
 8009cf2:	d10c      	bne.n	8009d0e <HAL_RCC_OscConfig+0x30a>
 8009cf4:	4b62      	ldr	r3, [pc, #392]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf8:	4a61      	ldr	r2, [pc, #388]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009cfa:	f043 0304 	orr.w	r3, r3, #4
 8009cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8009d00:	4b5f      	ldr	r3, [pc, #380]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d04:	4a5e      	ldr	r2, [pc, #376]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d0c:	e00b      	b.n	8009d26 <HAL_RCC_OscConfig+0x322>
 8009d0e:	4b5c      	ldr	r3, [pc, #368]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d12:	4a5b      	ldr	r2, [pc, #364]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d14:	f023 0301 	bic.w	r3, r3, #1
 8009d18:	6713      	str	r3, [r2, #112]	; 0x70
 8009d1a:	4b59      	ldr	r3, [pc, #356]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1e:	4a58      	ldr	r2, [pc, #352]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d20:	f023 0304 	bic.w	r3, r3, #4
 8009d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d015      	beq.n	8009d5a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2e:	f7fc ff8d 	bl	8006c4c <HAL_GetTick>
 8009d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d34:	e00a      	b.n	8009d4c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d36:	f7fc ff89 	bl	8006c4c <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e092      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d4c:	4b4c      	ldr	r3, [pc, #304]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0ee      	beq.n	8009d36 <HAL_RCC_OscConfig+0x332>
 8009d58:	e014      	b.n	8009d84 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d5a:	f7fc ff77 	bl	8006c4c <HAL_GetTick>
 8009d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d60:	e00a      	b.n	8009d78 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d62:	f7fc ff73 	bl	8006c4c <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d901      	bls.n	8009d78 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e07c      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d78:	4b41      	ldr	r3, [pc, #260]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1ee      	bne.n	8009d62 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d105      	bne.n	8009d96 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d8a:	4b3d      	ldr	r3, [pc, #244]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	4a3c      	ldr	r2, [pc, #240]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d068      	beq.n	8009e70 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d9e:	4b38      	ldr	r3, [pc, #224]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f003 030c 	and.w	r3, r3, #12
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	d060      	beq.n	8009e6c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d145      	bne.n	8009e3e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009db2:	4b34      	ldr	r3, [pc, #208]	; (8009e84 <HAL_RCC_OscConfig+0x480>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db8:	f7fc ff48 	bl	8006c4c <HAL_GetTick>
 8009dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dbe:	e008      	b.n	8009dd2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dc0:	f7fc ff44 	bl	8006c4c <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d901      	bls.n	8009dd2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	e04f      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dd2:	4b2b      	ldr	r3, [pc, #172]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f0      	bne.n	8009dc0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	69da      	ldr	r2, [r3, #28]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	019b      	lsls	r3, r3, #6
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	3b01      	subs	r3, #1
 8009df8:	041b      	lsls	r3, r3, #16
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	061b      	lsls	r3, r3, #24
 8009e02:	431a      	orrs	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e08:	071b      	lsls	r3, r3, #28
 8009e0a:	491d      	ldr	r1, [pc, #116]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e10:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <HAL_RCC_OscConfig+0x480>)
 8009e12:	2201      	movs	r2, #1
 8009e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e16:	f7fc ff19 	bl	8006c4c <HAL_GetTick>
 8009e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e1c:	e008      	b.n	8009e30 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e1e:	f7fc ff15 	bl	8006c4c <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d901      	bls.n	8009e30 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e020      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e30:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0f0      	beq.n	8009e1e <HAL_RCC_OscConfig+0x41a>
 8009e3c:	e018      	b.n	8009e70 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e3e:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <HAL_RCC_OscConfig+0x480>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e44:	f7fc ff02 	bl	8006c4c <HAL_GetTick>
 8009e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e4c:	f7fc fefe 	bl	8006c4c <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e009      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e5e:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <HAL_RCC_OscConfig+0x47c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1f0      	bne.n	8009e4c <HAL_RCC_OscConfig+0x448>
 8009e6a:	e001      	b.n	8009e70 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40007000 	.word	0x40007000
 8009e80:	40023800 	.word	0x40023800
 8009e84:	42470060 	.word	0x42470060

08009e88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e022      	b.n	8009ee0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d105      	bne.n	8009eb2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7fa fec3 	bl	8004c38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f814 	bl	8009ee8 <HAL_SD_InitCard>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e00a      	b.n	8009ee0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ee8:	b5b0      	push	{r4, r5, r7, lr}
 8009eea:	b08e      	sub	sp, #56	; 0x38
 8009eec:	af04      	add	r7, sp, #16
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009efc:	2300      	movs	r3, #0
 8009efe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009f04:	2376      	movs	r3, #118	; 0x76
 8009f06:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681d      	ldr	r5, [r3, #0]
 8009f0c:	466c      	mov	r4, sp
 8009f0e:	f107 0314 	add.w	r3, r7, #20
 8009f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f20:	4628      	mov	r0, r5
 8009f22:	f003 fa87 	bl	800d434 <SDIO_Init>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e031      	b.n	8009f9c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009f38:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <HAL_SD_InitCard+0xbc>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f003 fabf 	bl	800d4c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009f48:	4b16      	ldr	r3, [pc, #88]	; (8009fa4 <HAL_SD_InitCard+0xbc>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 ffc6 	bl	800aee0 <SD_PowerON>
 8009f54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e013      	b.n	8009f9c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fee5 	bl	800ad44 <SD_InitCard>
 8009f7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00b      	beq.n	8009f9a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3728      	adds	r7, #40	; 0x28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8009fa4:	422580a0 	.word	0x422580a0

08009fa8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08c      	sub	sp, #48	; 0x30
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d107      	bne.n	8009fd0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e0c7      	b.n	800a160 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	f040 80c0 	bne.w	800a15e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	441a      	add	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d907      	bls.n	800a002 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e0ae      	b.n	800a160 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2203      	movs	r2, #3
 800a006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2200      	movs	r2, #0
 800a010:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a020:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	4a50      	ldr	r2, [pc, #320]	; (800a168 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	4a4f      	ldr	r2, [pc, #316]	; (800a16c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	2200      	movs	r2, #0
 800a038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3380      	adds	r3, #128	; 0x80
 800a044:	4619      	mov	r1, r3
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	025b      	lsls	r3, r3, #9
 800a04c:	089b      	lsrs	r3, r3, #2
 800a04e:	f7fd fbef 	bl	8007830 <HAL_DMA_Start_IT>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d017      	beq.n	800a088 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a066:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a40      	ldr	r2, [pc, #256]	; (800a170 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a074:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e06b      	b.n	800a160 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a088:	4b3a      	ldr	r3, [pc, #232]	; (800a174 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a092:	2b01      	cmp	r3, #1
 800a094:	d002      	beq.n	800a09c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	025b      	lsls	r3, r3, #9
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f003 faa1 	bl	800d5ec <SDMMC_CmdBlockLength>
 800a0aa:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00f      	beq.n	800a0d2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a2e      	ldr	r2, [pc, #184]	; (800a170 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e046      	b.n	800a160 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	025b      	lsls	r3, r3, #9
 800a0dc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a0de:	2390      	movs	r3, #144	; 0x90
 800a0e0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f107 0210 	add.w	r2, r7, #16
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f003 fa4b 	bl	800d594 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d90a      	bls.n	800a11a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2282      	movs	r2, #130	; 0x82
 800a108:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a110:	4618      	mov	r0, r3
 800a112:	f003 faaf 	bl	800d674 <SDMMC_CmdReadMultiBlock>
 800a116:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a118:	e009      	b.n	800a12e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2281      	movs	r2, #129	; 0x81
 800a11e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a126:	4618      	mov	r0, r3
 800a128:	f003 fa82 	bl	800d630 <SDMMC_CmdReadSingleBlock>
 800a12c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d012      	beq.n	800a15a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a0d      	ldr	r2, [pc, #52]	; (800a170 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	431a      	orrs	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e002      	b.n	800a160 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	e000      	b.n	800a160 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a15e:	2302      	movs	r3, #2
  }
}
 800a160:	4618      	mov	r0, r3
 800a162:	3730      	adds	r7, #48	; 0x30
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	0800ab53 	.word	0x0800ab53
 800a16c:	0800abc5 	.word	0x0800abc5
 800a170:	004005ff 	.word	0x004005ff
 800a174:	4225858c 	.word	0x4225858c

0800a178 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08c      	sub	sp, #48	; 0x30
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d107      	bne.n	800a1a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a194:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e0ca      	b.n	800a336 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	f040 80c3 	bne.w	800a334 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	441a      	add	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d907      	bls.n	800a1d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e0b1      	b.n	800a336 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f042 021a 	orr.w	r2, r2, #26
 800a1f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f6:	4a52      	ldr	r2, [pc, #328]	; (800a340 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a1f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fe:	4a51      	ldr	r2, [pc, #324]	; (800a344 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a200:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	2200      	movs	r2, #0
 800a208:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d002      	beq.n	800a218 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	025b      	lsls	r3, r3, #9
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a220:	4618      	mov	r0, r3
 800a222:	f003 f9e3 	bl	800d5ec <SDMMC_CmdBlockLength>
 800a226:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00f      	beq.n	800a24e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a45      	ldr	r2, [pc, #276]	; (800a348 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	431a      	orrs	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e073      	b.n	800a336 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d90a      	bls.n	800a26a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	22a0      	movs	r2, #160	; 0xa0
 800a258:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a260:	4618      	mov	r0, r3
 800a262:	f003 fa4b 	bl	800d6fc <SDMMC_CmdWriteMultiBlock>
 800a266:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a268:	e009      	b.n	800a27e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2290      	movs	r2, #144	; 0x90
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a276:	4618      	mov	r0, r3
 800a278:	f003 fa1e 	bl	800d6b8 <SDMMC_CmdWriteSingleBlock>
 800a27c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d012      	beq.n	800a2aa <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a2f      	ldr	r2, [pc, #188]	; (800a348 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a28a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	431a      	orrs	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e045      	b.n	800a336 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a2aa:	4b28      	ldr	r3, [pc, #160]	; (800a34c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3380      	adds	r3, #128	; 0x80
 800a2bc:	461a      	mov	r2, r3
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	025b      	lsls	r3, r3, #9
 800a2c2:	089b      	lsrs	r3, r3, #2
 800a2c4:	f7fd fab4 	bl	8007830 <HAL_DMA_Start_IT>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01a      	beq.n	800a304 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 021a 	bic.w	r2, r2, #26
 800a2dc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a19      	ldr	r2, [pc, #100]	; (800a348 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a2e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e018      	b.n	800a336 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a304:	f04f 33ff 	mov.w	r3, #4294967295
 800a308:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	025b      	lsls	r3, r3, #9
 800a30e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a310:	2390      	movs	r3, #144	; 0x90
 800a312:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a314:	2300      	movs	r3, #0
 800a316:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a318:	2300      	movs	r3, #0
 800a31a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a31c:	2301      	movs	r3, #1
 800a31e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f107 0210 	add.w	r2, r7, #16
 800a328:	4611      	mov	r1, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f003 f932 	bl	800d594 <SDIO_ConfigData>

      return HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	e000      	b.n	800a336 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3730      	adds	r7, #48	; 0x30
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	0800ab29 	.word	0x0800ab29
 800a344:	0800abc5 	.word	0x0800abc5
 800a348:	004005ff 	.word	0x004005ff
 800a34c:	4225858c 	.word	0x4225858c

0800a350 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d008      	beq.n	800a37e <HAL_SD_IRQHandler+0x2e>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f003 0308 	and.w	r3, r3, #8
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 ffc8 	bl	800b30c <SD_Read_IT>
 800a37c:	e155      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 808f 	beq.w	800a4ac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a396:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	6812      	ldr	r2, [r2, #0]
 800a3a2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a3a6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a3aa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f022 0201 	bic.w	r2, r2, #1
 800a3ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d039      	beq.n	800a43a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d104      	bne.n	800a3da <HAL_SD_IRQHandler+0x8a>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d011      	beq.n	800a3fe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f003 f9ae 	bl	800d740 <SDMMC_CmdStopTransfer>
 800a3e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f91f 	bl	800a63c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f240 523a 	movw	r2, #1338	; 0x53a
 800a406:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <HAL_SD_IRQHandler+0xda>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f003 fe04 	bl	800e038 <HAL_SD_RxCpltCallback>
 800a430:	e0fb      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f003 fdf6 	bl	800e024 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a438:	e0f7      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80f2 	beq.w	800a62a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f003 0320 	and.w	r3, r3, #32
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d011      	beq.n	800a474 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f003 f973 	bl	800d740 <SDMMC_CmdStopTransfer>
 800a45a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d008      	beq.n	800a474 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f8e4 	bl	800a63c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f040 80d5 	bne.w	800a62a <HAL_SD_IRQHandler+0x2da>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	f040 80cf 	bne.w	800a62a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0208 	bic.w	r2, r2, #8
 800a49a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f003 fdbd 	bl	800e024 <HAL_SD_TxCpltCallback>
}
 800a4aa:	e0be      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d008      	beq.n	800a4cc <HAL_SD_IRQHandler+0x17c>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f003 0308 	and.w	r3, r3, #8
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 ff72 	bl	800b3ae <SD_Write_IT>
 800a4ca:	e0ae      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 80a7 	beq.w	800a62a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d005      	beq.n	800a4f6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ee:	f043 0202 	orr.w	r2, r3, #2
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d005      	beq.n	800a510 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a508:	f043 0208 	orr.w	r2, r3, #8
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	f043 0220 	orr.w	r2, r3, #32
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a530:	f003 0310 	and.w	r3, r3, #16
 800a534:	2b00      	cmp	r3, #0
 800a536:	d005      	beq.n	800a544 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53c:	f043 0210 	orr.w	r2, r3, #16
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f240 523a 	movw	r2, #1338	; 0x53a
 800a54c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a55c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f003 f8ec 	bl	800d740 <SDMMC_CmdStopTransfer>
 800a568:	4602      	mov	r2, r0
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0308 	and.w	r3, r3, #8
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f855 	bl	800a63c <HAL_SD_ErrorCallback>
}
 800a592:	e04a      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d045      	beq.n	800a62a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d104      	bne.n	800a5b2 <HAL_SD_IRQHandler+0x262>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f003 0320 	and.w	r3, r3, #32
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d011      	beq.n	800a5d6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b6:	4a1f      	ldr	r2, [pc, #124]	; (800a634 <HAL_SD_IRQHandler+0x2e4>)
 800a5b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fd f98e 	bl	80078e0 <HAL_DMA_Abort_IT>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d02f      	beq.n	800a62a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fb4a 	bl	800ac68 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a5d4:	e029      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d104      	bne.n	800a5ea <HAL_SD_IRQHandler+0x29a>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d011      	beq.n	800a60e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	4a12      	ldr	r2, [pc, #72]	; (800a638 <HAL_SD_IRQHandler+0x2e8>)
 800a5f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fd f972 	bl	80078e0 <HAL_DMA_Abort_IT>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d013      	beq.n	800a62a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fb65 	bl	800acd6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a60c:	e00d      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f003 fcf4 	bl	800e010 <HAL_SD_AbortCallback>
}
 800a628:	e7ff      	b.n	800a62a <HAL_SD_IRQHandler+0x2da>
 800a62a:	bf00      	nop
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	0800ac69 	.word	0x0800ac69
 800a638:	0800acd7 	.word	0x0800acd7

0800a63c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65e:	0f9b      	lsrs	r3, r3, #30
 800a660:	b2da      	uxtb	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a66a:	0e9b      	lsrs	r3, r3, #26
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	b2da      	uxtb	r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a67c:	0e1b      	lsrs	r3, r3, #24
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	f003 0303 	and.w	r3, r3, #3
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a68e:	0c1b      	lsrs	r3, r3, #16
 800a690:	b2da      	uxtb	r2, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6b0:	0d1b      	lsrs	r3, r3, #20
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6bc:	0c1b      	lsrs	r3, r3, #16
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ce:	0bdb      	lsrs	r3, r3, #15
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6e0:	0b9b      	lsrs	r3, r3, #14
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6f2:	0b5b      	lsrs	r3, r3, #13
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a704:	0b1b      	lsrs	r3, r3, #12
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d163      	bne.n	800a7e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a724:	009a      	lsls	r2, r3, #2
 800a726:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a72a:	4013      	ands	r3, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a730:	0f92      	lsrs	r2, r2, #30
 800a732:	431a      	orrs	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a73c:	0edb      	lsrs	r3, r3, #27
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	b2da      	uxtb	r2, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74e:	0e1b      	lsrs	r3, r3, #24
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	b2da      	uxtb	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a760:	0d5b      	lsrs	r3, r3, #21
 800a762:	b2db      	uxtb	r3, r3
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a772:	0c9b      	lsrs	r3, r3, #18
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a784:	0bdb      	lsrs	r3, r3, #15
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	7e1b      	ldrb	r3, [r3, #24]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	3302      	adds	r3, #2
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a7b2:	fb02 f203 	mul.w	r2, r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	7a1b      	ldrb	r3, [r3, #8]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	409a      	lsls	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a7d4:	0a52      	lsrs	r2, r2, #9
 800a7d6:	fb02 f203 	mul.w	r2, r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7e4:	661a      	str	r2, [r3, #96]	; 0x60
 800a7e6:	e031      	b.n	800a84c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d11d      	bne.n	800a82c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f4:	041b      	lsls	r3, r3, #16
 800a7f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fe:	0c1b      	lsrs	r3, r3, #16
 800a800:	431a      	orrs	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	3301      	adds	r3, #1
 800a80c:	029a      	lsls	r2, r3, #10
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a820:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	661a      	str	r2, [r3, #96]	; 0x60
 800a82a:	e00f      	b.n	800a84c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a58      	ldr	r2, [pc, #352]	; (800a994 <HAL_SD_GetCardCSD+0x344>)
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e09d      	b.n	800a988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a850:	0b9b      	lsrs	r3, r3, #14
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a862:	09db      	lsrs	r3, r3, #7
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a874:	b2db      	uxtb	r3, r3
 800a876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a884:	0fdb      	lsrs	r3, r3, #31
 800a886:	b2da      	uxtb	r2, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a890:	0f5b      	lsrs	r3, r3, #29
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a2:	0e9b      	lsrs	r3, r3, #26
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0307 	and.w	r3, r3, #7
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b4:	0d9b      	lsrs	r3, r3, #22
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c6:	0d5b      	lsrs	r3, r3, #21
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f6:	0bdb      	lsrs	r3, r3, #15
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a90a:	0b9b      	lsrs	r3, r3, #14
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	b2da      	uxtb	r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91e:	0b5b      	lsrs	r3, r3, #13
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a932:	0b1b      	lsrs	r3, r3, #12
 800a934:	b2db      	uxtb	r3, r3
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a946:	0a9b      	lsrs	r3, r3, #10
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	b2da      	uxtb	r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96e:	085b      	lsrs	r3, r3, #1
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	b2da      	uxtb	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	004005ff 	.word	0x004005ff

0800a998 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a9f0:	b5b0      	push	{r4, r5, r7, lr}
 800a9f2:	b08e      	sub	sp, #56	; 0x38
 800a9f4:	af04      	add	r7, sp, #16
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d02e      	beq.n	800aa68 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa10:	d106      	bne.n	800aa20 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38
 800aa1e:	e029      	b.n	800aa74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa26:	d10a      	bne.n	800aa3e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fb0f 	bl	800b04c <SD_WideBus_Enable>
 800aa2e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	431a      	orrs	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa3c:	e01a      	b.n	800aa74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fb4c 	bl	800b0e2 <SD_WideBus_Disable>
 800aa4a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	431a      	orrs	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	639a      	str	r2, [r3, #56]	; 0x38
 800aa58:	e00c      	b.n	800aa74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	639a      	str	r2, [r3, #56]	; 0x38
 800aa66:	e005      	b.n	800aa74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d009      	beq.n	800aa90 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a18      	ldr	r2, [pc, #96]	; (800aae4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e024      	b.n	800aada <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681d      	ldr	r5, [r3, #0]
 800aab6:	466c      	mov	r4, sp
 800aab8:	f107 0318 	add.w	r3, r7, #24
 800aabc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aac4:	f107 030c 	add.w	r3, r7, #12
 800aac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aaca:	4628      	mov	r0, r5
 800aacc:	f002 fcb2 	bl	800d434 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3728      	adds	r7, #40	; 0x28
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdb0      	pop	{r4, r5, r7, pc}
 800aae2:	bf00      	nop
 800aae4:	004005ff 	.word	0x004005ff

0800aae8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fa7e 	bl	800affc <SD_SendStatus>
 800ab00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	0a5b      	lsrs	r3, r3, #9
 800ab18:	f003 030f 	and.w	r3, r3, #15
 800ab1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab1e:	693b      	ldr	r3, [r7, #16]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab46:	bf00      	nop
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	2b82      	cmp	r3, #130	; 0x82
 800ab66:	d111      	bne.n	800ab8c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 fde7 	bl	800d740 <SDMMC_CmdStopTransfer>
 800ab72:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d008      	beq.n	800ab8c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff fd58 	bl	800a63c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0208 	bic.w	r2, r2, #8
 800ab9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f240 523a 	movw	r2, #1338	; 0x53a
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f003 fa3f 	bl	800e038 <HAL_SD_RxCpltCallback>
#endif
}
 800abba:	bf00      	nop
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7fd f830 	bl	8007c38 <HAL_DMA_GetError>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d03e      	beq.n	800ac5c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d002      	beq.n	800abfa <SD_DMAError+0x36>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d12d      	bne.n	800ac56 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a19      	ldr	r2, [pc, #100]	; (800ac64 <SD_DMAError+0xa0>)
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ac10:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ac1e:	6978      	ldr	r0, [r7, #20]
 800ac20:	f7ff ff62 	bl	800aae8 <HAL_SD_GetCardState>
 800ac24:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b06      	cmp	r3, #6
 800ac2a:	d002      	beq.n	800ac32 <SD_DMAError+0x6e>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b05      	cmp	r3, #5
 800ac30:	d10a      	bne.n	800ac48 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 fd82 	bl	800d740 <SDMMC_CmdStopTransfer>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac42:	431a      	orrs	r2, r3
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2200      	movs	r2, #0
 800ac54:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f7ff fcf0 	bl	800a63c <HAL_SD_ErrorCallback>
#endif
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	004005ff 	.word	0x004005ff

0800ac68 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac74:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac7e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7ff ff31 	bl	800aae8 <HAL_SD_GetCardState>
 800ac86:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b06      	cmp	r3, #6
 800ac9a:	d002      	beq.n	800aca2 <SD_DMATxAbort+0x3a>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	d10a      	bne.n	800acb8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 fd4a 	bl	800d740 <SDMMC_CmdStopTransfer>
 800acac:	4602      	mov	r2, r0
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	431a      	orrs	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d103      	bne.n	800acc8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f003 f9a5 	bl	800e010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800acc6:	e002      	b.n	800acce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff fcb7 	bl	800a63c <HAL_SD_ErrorCallback>
}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f240 523a 	movw	r2, #1338	; 0x53a
 800acec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7ff fefa 	bl	800aae8 <HAL_SD_GetCardState>
 800acf4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b06      	cmp	r3, #6
 800ad08:	d002      	beq.n	800ad10 <SD_DMARxAbort+0x3a>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b05      	cmp	r3, #5
 800ad0e:	d10a      	bne.n	800ad26 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 fd13 	bl	800d740 <SDMMC_CmdStopTransfer>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	431a      	orrs	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d103      	bne.n	800ad36 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f003 f96e 	bl	800e010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ad34:	e002      	b.n	800ad3c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7ff fc80 	bl	800a63c <HAL_SD_ErrorCallback>
}
 800ad3c:	bf00      	nop
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad44:	b5b0      	push	{r4, r5, r7, lr}
 800ad46:	b094      	sub	sp, #80	; 0x50
 800ad48:	af04      	add	r7, sp, #16
 800ad4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f002 fbc5 	bl	800d4e4 <SDIO_GetPowerState>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d102      	bne.n	800ad66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad64:	e0b7      	b.n	800aed6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d02f      	beq.n	800adce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 fdee 	bl	800d954 <SDMMC_CmdSendCID>
 800ad78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad82:	e0a8      	b.n	800aed6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f002 fbef 	bl	800d56e <SDIO_GetResponse>
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2104      	movs	r1, #4
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 fbe6 	bl	800d56e <SDIO_GetResponse>
 800ada2:	4602      	mov	r2, r0
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2108      	movs	r1, #8
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 fbdd 	bl	800d56e <SDIO_GetResponse>
 800adb4:	4602      	mov	r2, r0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	210c      	movs	r1, #12
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 fbd4 	bl	800d56e <SDIO_GetResponse>
 800adc6:	4602      	mov	r2, r0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add2:	2b03      	cmp	r3, #3
 800add4:	d00d      	beq.n	800adf2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f107 020e 	add.w	r2, r7, #14
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f002 fdf4 	bl	800d9ce <SDMMC_CmdSetRelAdd>
 800ade6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <SD_InitCard+0xae>
    {
      return errorstate;
 800adee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf0:	e071      	b.n	800aed6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d036      	beq.n	800ae68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adfa:	89fb      	ldrh	r3, [r7, #14]
 800adfc:	461a      	mov	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0a:	041b      	lsls	r3, r3, #16
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f002 fdbe 	bl	800d990 <SDMMC_CmdSendCSD>
 800ae14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	e05a      	b.n	800aed6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2100      	movs	r1, #0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f002 fba1 	bl	800d56e <SDIO_GetResponse>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2104      	movs	r1, #4
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f002 fb98 	bl	800d56e <SDIO_GetResponse>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2108      	movs	r1, #8
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f002 fb8f 	bl	800d56e <SDIO_GetResponse>
 800ae50:	4602      	mov	r2, r0
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	210c      	movs	r1, #12
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f002 fb86 	bl	800d56e <SDIO_GetResponse>
 800ae62:	4602      	mov	r2, r0
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2104      	movs	r1, #4
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f002 fb7d 	bl	800d56e <SDIO_GetResponse>
 800ae74:	4603      	mov	r3, r0
 800ae76:	0d1a      	lsrs	r2, r3, #20
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae7c:	f107 0310 	add.w	r3, r7, #16
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fbe4 	bl	800a650 <HAL_SD_GetCardCSD>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae92:	e020      	b.n	800aed6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6819      	ldr	r1, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	f04f 0400 	mov.w	r4, #0
 800aea2:	461a      	mov	r2, r3
 800aea4:	4623      	mov	r3, r4
 800aea6:	4608      	mov	r0, r1
 800aea8:	f002 fc6c 	bl	800d784 <SDMMC_CmdSelDesel>
 800aeac:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <SD_InitCard+0x174>
  {
    return errorstate;
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb6:	e00e      	b.n	800aed6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681d      	ldr	r5, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	466c      	mov	r4, sp
 800aec0:	f103 0210 	add.w	r2, r3, #16
 800aec4:	ca07      	ldmia	r2, {r0, r1, r2}
 800aec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aeca:	3304      	adds	r3, #4
 800aecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aece:	4628      	mov	r0, r5
 800aed0:	f002 fab0 	bl	800d434 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3740      	adds	r7, #64	; 0x40
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aee0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	2300      	movs	r3, #0
 800aef2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f002 fc66 	bl	800d7ca <SDMMC_CmdGoIdleState>
 800aefe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <SD_PowerON+0x2a>
  {
    return errorstate;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	e072      	b.n	800aff0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4618      	mov	r0, r3
 800af10:	f002 fc79 	bl	800d806 <SDMMC_CmdOperCond>
 800af14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00d      	beq.n	800af38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f002 fc4f 	bl	800d7ca <SDMMC_CmdGoIdleState>
 800af2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <SD_PowerON+0x5e>
    {
      return errorstate;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	e05b      	b.n	800aff0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af42:	2b01      	cmp	r3, #1
 800af44:	d137      	bne.n	800afb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f002 fc79 	bl	800d844 <SDMMC_CmdAppCommand>
 800af52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d02d      	beq.n	800afb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af5e:	e047      	b.n	800aff0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2100      	movs	r1, #0
 800af66:	4618      	mov	r0, r3
 800af68:	f002 fc6c 	bl	800d844 <SDMMC_CmdAppCommand>
 800af6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <SD_PowerON+0x98>
    {
      return errorstate;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	e03b      	b.n	800aff0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	491e      	ldr	r1, [pc, #120]	; (800aff8 <SD_PowerON+0x118>)
 800af7e:	4618      	mov	r0, r3
 800af80:	f002 fc82 	bl	800d888 <SDMMC_CmdAppOperCommand>
 800af84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af90:	e02e      	b.n	800aff0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2100      	movs	r1, #0
 800af98:	4618      	mov	r0, r3
 800af9a:	f002 fae8 	bl	800d56e <SDIO_GetResponse>
 800af9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	0fdb      	lsrs	r3, r3, #31
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <SD_PowerON+0xcc>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e000      	b.n	800afae <SD_PowerON+0xce>
 800afac:	2300      	movs	r3, #0
 800afae:	613b      	str	r3, [r7, #16]

    count++;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	3301      	adds	r3, #1
 800afb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d802      	bhi.n	800afc6 <SD_PowerON+0xe6>
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0cc      	beq.n	800af60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afcc:	4293      	cmp	r3, r2
 800afce:	d902      	bls.n	800afd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afd4:	e00c      	b.n	800aff0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	645a      	str	r2, [r3, #68]	; 0x44
 800afe6:	e002      	b.n	800afee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	c1100000 	.word	0xc1100000

0800affc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b00c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b010:	e018      	b.n	800b044 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b01a:	041b      	lsls	r3, r3, #16
 800b01c:	4619      	mov	r1, r3
 800b01e:	4610      	mov	r0, r2
 800b020:	f002 fcf6 	bl	800da10 <SDMMC_CmdSendStatus>
 800b024:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	e009      	b.n	800b044 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f002 fa99 	bl	800d56e <SDIO_GetResponse>
 800b03c:	4602      	mov	r2, r0
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	2300      	movs	r3, #0
 800b05a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f002 fa83 	bl	800d56e <SDIO_GetResponse>
 800b068:	4603      	mov	r3, r0
 800b06a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b06e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b072:	d102      	bne.n	800b07a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b078:	e02f      	b.n	800b0da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b07a:	f107 030c 	add.w	r3, r7, #12
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f879 	bl	800b178 <SD_FindSCR>
 800b086:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	e023      	b.n	800b0da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01c      	beq.n	800b0d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a4:	041b      	lsls	r3, r3, #16
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f002 fbcb 	bl	800d844 <SDMMC_CmdAppCommand>
 800b0ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	e00f      	b.n	800b0da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2102      	movs	r1, #2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f002 fc04 	bl	800d8ce <SDMMC_CmdBusWidth>
 800b0c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	e003      	b.n	800b0da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e001      	b.n	800b0da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b086      	sub	sp, #24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 fa38 	bl	800d56e <SDIO_GetResponse>
 800b0fe:	4603      	mov	r3, r0
 800b100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b108:	d102      	bne.n	800b110 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b10a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b10e:	e02f      	b.n	800b170 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b110:	f107 030c 	add.w	r3, r7, #12
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f82e 	bl	800b178 <SD_FindSCR>
 800b11c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	e023      	b.n	800b170 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d01c      	beq.n	800b16c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13a:	041b      	lsls	r3, r3, #16
 800b13c:	4619      	mov	r1, r3
 800b13e:	4610      	mov	r0, r2
 800b140:	f002 fb80 	bl	800d844 <SDMMC_CmdAppCommand>
 800b144:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	e00f      	b.n	800b170 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2100      	movs	r1, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f002 fbb9 	bl	800d8ce <SDMMC_CmdBusWidth>
 800b15c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	e003      	b.n	800b170 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b168:	2300      	movs	r3, #0
 800b16a:	e001      	b.n	800b170 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b16c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b178:	b590      	push	{r4, r7, lr}
 800b17a:	b08f      	sub	sp, #60	; 0x3c
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b182:	f7fb fd63 	bl	8006c4c <HAL_GetTick>
 800b186:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b18c:	2300      	movs	r3, #0
 800b18e:	60bb      	str	r3, [r7, #8]
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2108      	movs	r1, #8
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 fa24 	bl	800d5ec <SDMMC_CmdBlockLength>
 800b1a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	e0a9      	b.n	800b304 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b8:	041b      	lsls	r3, r3, #16
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4610      	mov	r0, r2
 800b1be:	f002 fb41 	bl	800d844 <SDMMC_CmdAppCommand>
 800b1c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	e09a      	b.n	800b304 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b1d8:	2330      	movs	r3, #48	; 0x30
 800b1da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b1dc:	2302      	movs	r3, #2
 800b1de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f107 0210 	add.w	r2, r7, #16
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f002 f9ce 	bl	800d594 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fb88 	bl	800d912 <SDMMC_CmdSendSCR>
 800b202:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	2b00      	cmp	r3, #0
 800b208:	d022      	beq.n	800b250 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20c:	e07a      	b.n	800b304 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00e      	beq.n	800b23a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6819      	ldr	r1, [r3, #0]
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	f107 0208 	add.w	r2, r7, #8
 800b228:	18d4      	adds	r4, r2, r3
 800b22a:	4608      	mov	r0, r1
 800b22c:	f002 f92d 	bl	800d48a <SDIO_ReadFIFO>
 800b230:	4603      	mov	r3, r0
 800b232:	6023      	str	r3, [r4, #0]
      index++;
 800b234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b236:	3301      	adds	r3, #1
 800b238:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b23a:	f7fb fd07 	bl	8006c4c <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b248:	d102      	bne.n	800b250 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b24a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b24e:	e059      	b.n	800b304 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b256:	f240 432a 	movw	r3, #1066	; 0x42a
 800b25a:	4013      	ands	r3, r2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d0d6      	beq.n	800b20e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2208      	movs	r2, #8
 800b274:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b276:	2308      	movs	r3, #8
 800b278:	e044      	b.n	800b304 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2202      	movs	r2, #2
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b290:	2302      	movs	r3, #2
 800b292:	e037      	b.n	800b304 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	f003 0320 	and.w	r3, r3, #32
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	e02a      	b.n	800b304 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2b6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	061a      	lsls	r2, r3, #24
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	021b      	lsls	r3, r3, #8
 800b2c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	0a1b      	lsrs	r3, r3, #8
 800b2ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2ce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	0e1b      	lsrs	r3, r3, #24
 800b2d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	601a      	str	r2, [r3, #0]
    scr++;
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	3304      	adds	r3, #4
 800b2de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	061a      	lsls	r2, r3, #24
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	0a1b      	lsrs	r3, r3, #8
 800b2f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b2f6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	0e1b      	lsrs	r3, r3, #24
 800b2fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	373c      	adds	r7, #60	; 0x3c
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd90      	pop	{r4, r7, pc}

0800b30c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b318:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d03f      	beq.n	800b3a6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	e033      	b.n	800b394 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4618      	mov	r0, r3
 800b332:	f002 f8aa 	bl	800d48a <SDIO_ReadFIFO>
 800b336:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3301      	adds	r3, #1
 800b344:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3b01      	subs	r3, #1
 800b34a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	0a1b      	lsrs	r3, r3, #8
 800b350:	b2da      	uxtb	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3301      	adds	r3, #1
 800b35a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	3b01      	subs	r3, #1
 800b360:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	0c1b      	lsrs	r3, r3, #16
 800b366:	b2da      	uxtb	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3301      	adds	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	3b01      	subs	r3, #1
 800b376:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	0e1b      	lsrs	r3, r3, #24
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	3301      	adds	r3, #1
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b07      	cmp	r3, #7
 800b398:	d9c8      	bls.n	800b32c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b3a6:	bf00      	nop
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b086      	sub	sp, #24
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d043      	beq.n	800b450 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	e037      	b.n	800b43e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	021a      	lsls	r2, r3, #8
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	041a      	lsls	r2, r3, #16
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4313      	orrs	r3, r2
 800b402:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3301      	adds	r3, #1
 800b408:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	061a      	lsls	r2, r3, #24
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3b01      	subs	r3, #1
 800b426:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f107 0208 	add.w	r2, r7, #8
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f002 f836 	bl	800d4a4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	3301      	adds	r3, #1
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b07      	cmp	r3, #7
 800b442:	d9c4      	bls.n	800b3ce <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b450:	bf00      	nop
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e056      	b.n	800b518 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d106      	bne.n	800b48a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7f9 fcc9 	bl	8004e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2202      	movs	r2, #2
 800b48e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	ea42 0103 	orr.w	r1, r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	0c1b      	lsrs	r3, r3, #16
 800b4e8:	f003 0104 	and.w	r1, r3, #4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69da      	ldr	r2, [r3, #28]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b506:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	4613      	mov	r3, r2
 800b52e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d101      	bne.n	800b542 <HAL_SPI_Transmit+0x22>
 800b53e:	2302      	movs	r3, #2
 800b540:	e11e      	b.n	800b780 <HAL_SPI_Transmit+0x260>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b54a:	f7fb fb7f 	bl	8006c4c <HAL_GetTick>
 800b54e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b550:	88fb      	ldrh	r3, [r7, #6]
 800b552:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d002      	beq.n	800b566 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b560:	2302      	movs	r3, #2
 800b562:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b564:	e103      	b.n	800b76e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <HAL_SPI_Transmit+0x52>
 800b56c:	88fb      	ldrh	r3, [r7, #6]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d102      	bne.n	800b578 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b576:	e0fa      	b.n	800b76e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2203      	movs	r2, #3
 800b57c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	88fa      	ldrh	r2, [r7, #6]
 800b590:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	88fa      	ldrh	r2, [r7, #6]
 800b596:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5be:	d107      	bne.n	800b5d0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	d007      	beq.n	800b5ee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5f6:	d14b      	bne.n	800b690 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <HAL_SPI_Transmit+0xe6>
 800b600:	8afb      	ldrh	r3, [r7, #22]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d13e      	bne.n	800b684 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60a:	881a      	ldrh	r2, [r3, #0]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	1c9a      	adds	r2, r3, #2
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b620:	b29b      	uxth	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b62a:	e02b      	b.n	800b684 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b02      	cmp	r3, #2
 800b638:	d112      	bne.n	800b660 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	881a      	ldrh	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b64a:	1c9a      	adds	r2, r3, #2
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b654:	b29b      	uxth	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	86da      	strh	r2, [r3, #54]	; 0x36
 800b65e:	e011      	b.n	800b684 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b660:	f7fb faf4 	bl	8006c4c <HAL_GetTick>
 800b664:	4602      	mov	r2, r0
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d803      	bhi.n	800b678 <HAL_SPI_Transmit+0x158>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b676:	d102      	bne.n	800b67e <HAL_SPI_Transmit+0x15e>
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b682:	e074      	b.n	800b76e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b688:	b29b      	uxth	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1ce      	bne.n	800b62c <HAL_SPI_Transmit+0x10c>
 800b68e:	e04c      	b.n	800b72a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_SPI_Transmit+0x17e>
 800b698:	8afb      	ldrh	r3, [r7, #22]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d140      	bne.n	800b720 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	330c      	adds	r3, #12
 800b6a8:	7812      	ldrb	r2, [r2, #0]
 800b6aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b6c4:	e02c      	b.n	800b720 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f003 0302 	and.w	r3, r3, #2
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d113      	bne.n	800b6fc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	330c      	adds	r3, #12
 800b6de:	7812      	ldrb	r2, [r2, #0]
 800b6e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	86da      	strh	r2, [r3, #54]	; 0x36
 800b6fa:	e011      	b.n	800b720 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6fc:	f7fb faa6 	bl	8006c4c <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d803      	bhi.n	800b714 <HAL_SPI_Transmit+0x1f4>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d102      	bne.n	800b71a <HAL_SPI_Transmit+0x1fa>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b71e:	e026      	b.n	800b76e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b724:	b29b      	uxth	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1cd      	bne.n	800b6c6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 fba4 	bl	800be7c <SPI_EndRxTxTransaction>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2220      	movs	r2, #32
 800b73e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10a      	bne.n	800b75e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b748:	2300      	movs	r3, #0
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	613b      	str	r3, [r7, #16]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	613b      	str	r3, [r7, #16]
 800b75c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b762:	2b00      	cmp	r3, #0
 800b764:	d002      	beq.n	800b76c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	77fb      	strb	r3, [r7, #31]
 800b76a:	e000      	b.n	800b76e <HAL_SPI_Transmit+0x24e>
  }

error:
 800b76c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b77e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	4613      	mov	r3, r2
 800b796:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7a4:	d112      	bne.n	800b7cc <HAL_SPI_Receive+0x44>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10e      	bne.n	800b7cc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2204      	movs	r2, #4
 800b7b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b7b6:	88fa      	ldrh	r2, [r7, #6]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	68b9      	ldr	r1, [r7, #8]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 f8e9 	bl	800b99a <HAL_SPI_TransmitReceive>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	e0e2      	b.n	800b992 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d101      	bne.n	800b7da <HAL_SPI_Receive+0x52>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e0db      	b.n	800b992 <HAL_SPI_Receive+0x20a>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7e2:	f7fb fa33 	bl	8006c4c <HAL_GetTick>
 800b7e6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d002      	beq.n	800b7fa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b7f8:	e0c2      	b.n	800b980 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <HAL_SPI_Receive+0x7e>
 800b800:	88fb      	ldrh	r3, [r7, #6]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b80a:	e0b9      	b.n	800b980 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2204      	movs	r2, #4
 800b810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	88fa      	ldrh	r2, [r7, #6]
 800b824:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	88fa      	ldrh	r2, [r7, #6]
 800b82a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b852:	d107      	bne.n	800b864 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b862:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86e:	2b40      	cmp	r3, #64	; 0x40
 800b870:	d007      	beq.n	800b882 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b880:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d162      	bne.n	800b950 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b88a:	e02e      	b.n	800b8ea <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b01      	cmp	r3, #1
 800b898:	d115      	bne.n	800b8c6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f103 020c 	add.w	r2, r3, #12
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	b2d2      	uxtb	r2, r2
 800b8aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b0:	1c5a      	adds	r2, r3, #1
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8c4:	e011      	b.n	800b8ea <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8c6:	f7fb f9c1 	bl	8006c4c <HAL_GetTick>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d803      	bhi.n	800b8de <HAL_SPI_Receive+0x156>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d102      	bne.n	800b8e4 <HAL_SPI_Receive+0x15c>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b8e8:	e04a      	b.n	800b980 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1cb      	bne.n	800b88c <HAL_SPI_Receive+0x104>
 800b8f4:	e031      	b.n	800b95a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b01      	cmp	r3, #1
 800b902:	d113      	bne.n	800b92c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90e:	b292      	uxth	r2, r2
 800b910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b916:	1c9a      	adds	r2, r3, #2
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b920:	b29b      	uxth	r3, r3
 800b922:	3b01      	subs	r3, #1
 800b924:	b29a      	uxth	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b92a:	e011      	b.n	800b950 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b92c:	f7fb f98e 	bl	8006c4c <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d803      	bhi.n	800b944 <HAL_SPI_Receive+0x1bc>
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b942:	d102      	bne.n	800b94a <HAL_SPI_Receive+0x1c2>
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b94e:	e017      	b.n	800b980 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b954:	b29b      	uxth	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1cd      	bne.n	800b8f6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 fa27 	bl	800bdb2 <SPI_EndRxTransaction>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2220      	movs	r2, #32
 800b96e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	75fb      	strb	r3, [r7, #23]
 800b97c:	e000      	b.n	800b980 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b97e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b990:	7dfb      	ldrb	r3, [r7, #23]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b08c      	sub	sp, #48	; 0x30
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	60f8      	str	r0, [r7, #12]
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <HAL_SPI_TransmitReceive+0x26>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e18a      	b.n	800bcd6 <HAL_SPI_TransmitReceive+0x33c>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9c8:	f7fb f940 	bl	8006c4c <HAL_GetTick>
 800b9cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b9de:	887b      	ldrh	r3, [r7, #2]
 800b9e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b9e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d00f      	beq.n	800ba0a <HAL_SPI_TransmitReceive+0x70>
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9f0:	d107      	bne.n	800ba02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <HAL_SPI_TransmitReceive+0x68>
 800b9fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d003      	beq.n	800ba0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ba02:	2302      	movs	r3, #2
 800ba04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ba08:	e15b      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <HAL_SPI_TransmitReceive+0x82>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <HAL_SPI_TransmitReceive+0x82>
 800ba16:	887b      	ldrh	r3, [r7, #2]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ba22:	e14e      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b04      	cmp	r3, #4
 800ba2e:	d003      	beq.n	800ba38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2205      	movs	r2, #5
 800ba34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	887a      	ldrh	r2, [r7, #2]
 800ba48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	887a      	ldrh	r2, [r7, #2]
 800ba4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	887a      	ldrh	r2, [r7, #2]
 800ba5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	887a      	ldrh	r2, [r7, #2]
 800ba60:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba78:	2b40      	cmp	r3, #64	; 0x40
 800ba7a:	d007      	beq.n	800ba8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba94:	d178      	bne.n	800bb88 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <HAL_SPI_TransmitReceive+0x10a>
 800ba9e:	8b7b      	ldrh	r3, [r7, #26]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d166      	bne.n	800bb72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa8:	881a      	ldrh	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	1c9a      	adds	r2, r3, #2
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800babe:	b29b      	uxth	r3, r3
 800bac0:	3b01      	subs	r3, #1
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bac8:	e053      	b.n	800bb72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d11b      	bne.n	800bb10 <HAL_SPI_TransmitReceive+0x176>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d016      	beq.n	800bb10 <HAL_SPI_TransmitReceive+0x176>
 800bae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d113      	bne.n	800bb10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	881a      	ldrh	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf8:	1c9a      	adds	r2, r3, #2
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	3b01      	subs	r3, #1
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d119      	bne.n	800bb52 <HAL_SPI_TransmitReceive+0x1b8>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d014      	beq.n	800bb52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68da      	ldr	r2, [r3, #12]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb32:	b292      	uxth	r2, r2
 800bb34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	1c9a      	adds	r2, r3, #2
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bb52:	f7fb f87b 	bl	8006c4c <HAL_GetTick>
 800bb56:	4602      	mov	r2, r0
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d807      	bhi.n	800bb72 <HAL_SPI_TransmitReceive+0x1d8>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d003      	beq.n	800bb72 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb70:	e0a7      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1a6      	bne.n	800baca <HAL_SPI_TransmitReceive+0x130>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1a1      	bne.n	800baca <HAL_SPI_TransmitReceive+0x130>
 800bb86:	e07c      	b.n	800bc82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <HAL_SPI_TransmitReceive+0x1fc>
 800bb90:	8b7b      	ldrh	r3, [r7, #26]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d16b      	bne.n	800bc6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	330c      	adds	r3, #12
 800bba0:	7812      	ldrb	r2, [r2, #0]
 800bba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba8:	1c5a      	adds	r2, r3, #1
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbbc:	e057      	b.n	800bc6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d11c      	bne.n	800bc06 <HAL_SPI_TransmitReceive+0x26c>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d017      	beq.n	800bc06 <HAL_SPI_TransmitReceive+0x26c>
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d114      	bne.n	800bc06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	330c      	adds	r3, #12
 800bbe6:	7812      	ldrb	r2, [r2, #0]
 800bbe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d119      	bne.n	800bc48 <HAL_SPI_TransmitReceive+0x2ae>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d014      	beq.n	800bc48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68da      	ldr	r2, [r3, #12]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc44:	2301      	movs	r3, #1
 800bc46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bc48:	f7fb f800 	bl	8006c4c <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d803      	bhi.n	800bc60 <HAL_SPI_TransmitReceive+0x2c6>
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5e:	d102      	bne.n	800bc66 <HAL_SPI_TransmitReceive+0x2cc>
 800bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d103      	bne.n	800bc6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bc6c:	e029      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1a2      	bne.n	800bbbe <HAL_SPI_TransmitReceive+0x224>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d19d      	bne.n	800bbbe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 f8f8 	bl	800be7c <SPI_EndRxTxTransaction>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bc9e:	e010      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10b      	bne.n	800bcc0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bca8:	2300      	movs	r3, #0
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	e000      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bcc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bcd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3730      	adds	r7, #48	; 0x30
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	60f8      	str	r0, [r7, #12]
 800bce6:	60b9      	str	r1, [r7, #8]
 800bce8:	603b      	str	r3, [r7, #0]
 800bcea:	4613      	mov	r3, r2
 800bcec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcee:	e04c      	b.n	800bd8a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf6:	d048      	beq.n	800bd8a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bcf8:	f7fa ffa8 	bl	8006c4c <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d902      	bls.n	800bd0e <SPI_WaitFlagStateUntilTimeout+0x30>
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d13d      	bne.n	800bd8a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd26:	d111      	bne.n	800bd4c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd30:	d004      	beq.n	800bd3c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd3a:	d107      	bne.n	800bd4c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd54:	d10f      	bne.n	800bd76 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e00f      	b.n	800bdaa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	4013      	ands	r3, r2
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	bf0c      	ite	eq
 800bd9a:	2301      	moveq	r3, #1
 800bd9c:	2300      	movne	r3, #0
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d1a3      	bne.n	800bcf0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af02      	add	r7, sp, #8
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdc6:	d111      	bne.n	800bdec <SPI_EndRxTransaction+0x3a>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdd0:	d004      	beq.n	800bddc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdda:	d107      	bne.n	800bdec <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdf4:	d12a      	bne.n	800be4c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdfe:	d012      	beq.n	800be26 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2200      	movs	r2, #0
 800be08:	2180      	movs	r1, #128	; 0x80
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f7ff ff67 	bl	800bcde <SPI_WaitFlagStateUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d02d      	beq.n	800be72 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1a:	f043 0220 	orr.w	r2, r3, #32
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e026      	b.n	800be74 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2200      	movs	r2, #0
 800be2e:	2101      	movs	r1, #1
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff ff54 	bl	800bcde <SPI_WaitFlagStateUntilTimeout>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01a      	beq.n	800be72 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be40:	f043 0220 	orr.w	r2, r3, #32
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e013      	b.n	800be74 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2200      	movs	r2, #0
 800be54:	2101      	movs	r1, #1
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff ff41 	bl	800bcde <SPI_WaitFlagStateUntilTimeout>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d007      	beq.n	800be72 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be66:	f043 0220 	orr.w	r2, r3, #32
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e000      	b.n	800be74 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af02      	add	r7, sp, #8
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be88:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <SPI_EndRxTxTransaction+0x7c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a1b      	ldr	r2, [pc, #108]	; (800befc <SPI_EndRxTxTransaction+0x80>)
 800be8e:	fba2 2303 	umull	r2, r3, r2, r3
 800be92:	0d5b      	lsrs	r3, r3, #21
 800be94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be98:	fb02 f303 	mul.w	r3, r2, r3
 800be9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bea6:	d112      	bne.n	800bece <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2200      	movs	r2, #0
 800beb0:	2180      	movs	r1, #128	; 0x80
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff ff13 	bl	800bcde <SPI_WaitFlagStateUntilTimeout>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d016      	beq.n	800beec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec2:	f043 0220 	orr.w	r2, r3, #32
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e00f      	b.n	800beee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	3b01      	subs	r3, #1
 800bed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee4:	2b80      	cmp	r3, #128	; 0x80
 800bee6:	d0f2      	beq.n	800bece <SPI_EndRxTxTransaction+0x52>
 800bee8:	e000      	b.n	800beec <SPI_EndRxTxTransaction+0x70>
        break;
 800beea:	bf00      	nop
  }

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20000000 	.word	0x20000000
 800befc:	165e9f81 	.word	0x165e9f81

0800bf00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e01d      	b.n	800bf4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d106      	bne.n	800bf2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7f9 f834 	bl	8004f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2202      	movs	r2, #2
 800bf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	4610      	mov	r0, r2
 800bf40:	f000 fb56 	bl	800c5f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f042 0201 	orr.w	r2, r2, #1
 800bf6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f003 0307 	and.w	r3, r3, #7
 800bf78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b06      	cmp	r3, #6
 800bf7e:	d007      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 0201 	orr.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d101      	bne.n	800bfb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e01d      	b.n	800bfec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d106      	bne.n	800bfca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7f8 ff71 	bl	8004eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2202      	movs	r2, #2
 800bfce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3304      	adds	r3, #4
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4610      	mov	r0, r2
 800bfde:	f000 fb07 	bl	800c5f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2201      	movs	r2, #1
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fd42 	bl	800ca90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a15      	ldr	r2, [pc, #84]	; (800c068 <HAL_TIM_PWM_Start+0x74>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d004      	beq.n	800c020 <HAL_TIM_PWM_Start+0x2c>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a14      	ldr	r2, [pc, #80]	; (800c06c <HAL_TIM_PWM_Start+0x78>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d101      	bne.n	800c024 <HAL_TIM_PWM_Start+0x30>
 800c020:	2301      	movs	r3, #1
 800c022:	e000      	b.n	800c026 <HAL_TIM_PWM_Start+0x32>
 800c024:	2300      	movs	r3, #0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d007      	beq.n	800c03a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	f003 0307 	and.w	r3, r3, #7
 800c044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2b06      	cmp	r3, #6
 800c04a:	d007      	beq.n	800c05c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f042 0201 	orr.w	r2, r2, #1
 800c05a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	40010000 	.word	0x40010000
 800c06c:	40010400 	.word	0x40010400

0800c070 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e083      	b.n	800c18c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d106      	bne.n	800c09e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7f9 f80b 	bl	80050b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6812      	ldr	r2, [r2, #0]
 800c0b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0b4:	f023 0307 	bic.w	r3, r3, #7
 800c0b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	f000 fa93 	bl	800c5f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
 800c0f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	4313      	orrs	r3, r2
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	4313      	orrs	r3, r2
 800c108:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c110:	f023 030c 	bic.w	r3, r3, #12
 800c114:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c11c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	021b      	lsls	r3, r3, #8
 800c12c:	4313      	orrs	r3, r2
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	4313      	orrs	r3, r2
 800c132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	011a      	lsls	r2, r3, #4
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	031b      	lsls	r3, r3, #12
 800c140:	4313      	orrs	r3, r2
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	4313      	orrs	r3, r2
 800c146:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c14e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c156:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	011b      	lsls	r3, r3, #4
 800c162:	4313      	orrs	r3, r2
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3718      	adds	r7, #24
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <HAL_TIM_Encoder_Start+0x16>
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d008      	beq.n	800c1ba <HAL_TIM_Encoder_Start+0x26>
 800c1a8:	e00f      	b.n	800c1ca <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 fc6c 	bl	800ca90 <TIM_CCxChannelCmd>
      break;
 800c1b8:	e016      	b.n	800c1e8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	2104      	movs	r1, #4
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fc64 	bl	800ca90 <TIM_CCxChannelCmd>
      break;
 800c1c8:	e00e      	b.n	800c1e8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 fc5c 	bl	800ca90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	2104      	movs	r1, #4
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 fc55 	bl	800ca90 <TIM_CCxChannelCmd>
      break;
 800c1e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f042 0201 	orr.w	r2, r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	f003 0302 	and.w	r3, r3, #2
 800c214:	2b02      	cmp	r3, #2
 800c216:	d122      	bne.n	800c25e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b02      	cmp	r3, #2
 800c224:	d11b      	bne.n	800c25e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f06f 0202 	mvn.w	r2, #2
 800c22e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f9b5 	bl	800c5b4 <HAL_TIM_IC_CaptureCallback>
 800c24a:	e005      	b.n	800c258 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f9a7 	bl	800c5a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f9b8 	bl	800c5c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f003 0304 	and.w	r3, r3, #4
 800c268:	2b04      	cmp	r3, #4
 800c26a:	d122      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b04      	cmp	r3, #4
 800c278:	d11b      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f06f 0204 	mvn.w	r2, #4
 800c282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f98b 	bl	800c5b4 <HAL_TIM_IC_CaptureCallback>
 800c29e:	e005      	b.n	800c2ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f97d 	bl	800c5a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f98e 	bl	800c5c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d122      	bne.n	800c306 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f003 0308 	and.w	r3, r3, #8
 800c2ca:	2b08      	cmp	r3, #8
 800c2cc:	d11b      	bne.n	800c306 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f06f 0208 	mvn.w	r2, #8
 800c2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2204      	movs	r2, #4
 800c2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	f003 0303 	and.w	r3, r3, #3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f961 	bl	800c5b4 <HAL_TIM_IC_CaptureCallback>
 800c2f2:	e005      	b.n	800c300 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f953 	bl	800c5a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f964 	bl	800c5c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	f003 0310 	and.w	r3, r3, #16
 800c310:	2b10      	cmp	r3, #16
 800c312:	d122      	bne.n	800c35a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b10      	cmp	r3, #16
 800c320:	d11b      	bne.n	800c35a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f06f 0210 	mvn.w	r2, #16
 800c32a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2208      	movs	r2, #8
 800c330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f937 	bl	800c5b4 <HAL_TIM_IC_CaptureCallback>
 800c346:	e005      	b.n	800c354 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f929 	bl	800c5a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f93a 	bl	800c5c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b01      	cmp	r3, #1
 800c366:	d10e      	bne.n	800c386 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	2b01      	cmp	r3, #1
 800c374:	d107      	bne.n	800c386 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f06f 0201 	mvn.w	r2, #1
 800c37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7f7 fb6d 	bl	8003a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c390:	2b80      	cmp	r3, #128	; 0x80
 800c392:	d10e      	bne.n	800c3b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c39e:	2b80      	cmp	r3, #128	; 0x80
 800c3a0:	d107      	bne.n	800c3b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fc6d 	bl	800cc8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3bc:	2b40      	cmp	r3, #64	; 0x40
 800c3be:	d10e      	bne.n	800c3de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ca:	2b40      	cmp	r3, #64	; 0x40
 800c3cc:	d107      	bne.n	800c3de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f8ff 	bl	800c5dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	f003 0320 	and.w	r3, r3, #32
 800c3e8:	2b20      	cmp	r3, #32
 800c3ea:	d10e      	bne.n	800c40a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b20      	cmp	r3, #32
 800c3f8:	d107      	bne.n	800c40a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f06f 0220 	mvn.w	r2, #32
 800c402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fc37 	bl	800cc78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c40a:	bf00      	nop
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c426:	2b01      	cmp	r3, #1
 800c428:	d101      	bne.n	800c42e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c42a:	2302      	movs	r3, #2
 800c42c:	e0b4      	b.n	800c598 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2202      	movs	r2, #2
 800c43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b0c      	cmp	r3, #12
 800c442:	f200 809f 	bhi.w	800c584 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c446:	a201      	add	r2, pc, #4	; (adr r2, 800c44c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c44c:	0800c481 	.word	0x0800c481
 800c450:	0800c585 	.word	0x0800c585
 800c454:	0800c585 	.word	0x0800c585
 800c458:	0800c585 	.word	0x0800c585
 800c45c:	0800c4c1 	.word	0x0800c4c1
 800c460:	0800c585 	.word	0x0800c585
 800c464:	0800c585 	.word	0x0800c585
 800c468:	0800c585 	.word	0x0800c585
 800c46c:	0800c503 	.word	0x0800c503
 800c470:	0800c585 	.word	0x0800c585
 800c474:	0800c585 	.word	0x0800c585
 800c478:	0800c585 	.word	0x0800c585
 800c47c:	0800c543 	.word	0x0800c543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68b9      	ldr	r1, [r7, #8]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f952 	bl	800c730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	699a      	ldr	r2, [r3, #24]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0208 	orr.w	r2, r2, #8
 800c49a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	699a      	ldr	r2, [r3, #24]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f022 0204 	bic.w	r2, r2, #4
 800c4aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6999      	ldr	r1, [r3, #24]
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	691a      	ldr	r2, [r3, #16]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	619a      	str	r2, [r3, #24]
      break;
 800c4be:	e062      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68b9      	ldr	r1, [r7, #8]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 f9a2 	bl	800c810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	699a      	ldr	r2, [r3, #24]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6999      	ldr	r1, [r3, #24]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	021a      	lsls	r2, r3, #8
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	619a      	str	r2, [r3, #24]
      break;
 800c500:	e041      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68b9      	ldr	r1, [r7, #8]
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 f9f7 	bl	800c8fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	69da      	ldr	r2, [r3, #28]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f042 0208 	orr.w	r2, r2, #8
 800c51c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69da      	ldr	r2, [r3, #28]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 0204 	bic.w	r2, r2, #4
 800c52c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	69d9      	ldr	r1, [r3, #28]
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	691a      	ldr	r2, [r3, #16]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	430a      	orrs	r2, r1
 800c53e:	61da      	str	r2, [r3, #28]
      break;
 800c540:	e021      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68b9      	ldr	r1, [r7, #8]
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 fa4b 	bl	800c9e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	69da      	ldr	r2, [r3, #28]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c55c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	69da      	ldr	r2, [r3, #28]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c56c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	69d9      	ldr	r1, [r3, #28]
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	021a      	lsls	r2, r3, #8
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	430a      	orrs	r2, r1
 800c580:	61da      	str	r2, [r3, #28]
      break;
 800c582:	e000      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c584:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a40      	ldr	r2, [pc, #256]	; (800c704 <TIM_Base_SetConfig+0x114>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d013      	beq.n	800c630 <TIM_Base_SetConfig+0x40>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60e:	d00f      	beq.n	800c630 <TIM_Base_SetConfig+0x40>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a3d      	ldr	r2, [pc, #244]	; (800c708 <TIM_Base_SetConfig+0x118>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d00b      	beq.n	800c630 <TIM_Base_SetConfig+0x40>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a3c      	ldr	r2, [pc, #240]	; (800c70c <TIM_Base_SetConfig+0x11c>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d007      	beq.n	800c630 <TIM_Base_SetConfig+0x40>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a3b      	ldr	r2, [pc, #236]	; (800c710 <TIM_Base_SetConfig+0x120>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d003      	beq.n	800c630 <TIM_Base_SetConfig+0x40>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a3a      	ldr	r2, [pc, #232]	; (800c714 <TIM_Base_SetConfig+0x124>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d108      	bne.n	800c642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a2f      	ldr	r2, [pc, #188]	; (800c704 <TIM_Base_SetConfig+0x114>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d02b      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c650:	d027      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a2c      	ldr	r2, [pc, #176]	; (800c708 <TIM_Base_SetConfig+0x118>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d023      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a2b      	ldr	r2, [pc, #172]	; (800c70c <TIM_Base_SetConfig+0x11c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d01f      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a2a      	ldr	r2, [pc, #168]	; (800c710 <TIM_Base_SetConfig+0x120>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d01b      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a29      	ldr	r2, [pc, #164]	; (800c714 <TIM_Base_SetConfig+0x124>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d017      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a28      	ldr	r2, [pc, #160]	; (800c718 <TIM_Base_SetConfig+0x128>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d013      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a27      	ldr	r2, [pc, #156]	; (800c71c <TIM_Base_SetConfig+0x12c>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d00f      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a26      	ldr	r2, [pc, #152]	; (800c720 <TIM_Base_SetConfig+0x130>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00b      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a25      	ldr	r2, [pc, #148]	; (800c724 <TIM_Base_SetConfig+0x134>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d007      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a24      	ldr	r2, [pc, #144]	; (800c728 <TIM_Base_SetConfig+0x138>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d003      	beq.n	800c6a2 <TIM_Base_SetConfig+0xb2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a23      	ldr	r2, [pc, #140]	; (800c72c <TIM_Base_SetConfig+0x13c>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d108      	bne.n	800c6b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a0a      	ldr	r2, [pc, #40]	; (800c704 <TIM_Base_SetConfig+0x114>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d003      	beq.n	800c6e8 <TIM_Base_SetConfig+0xf8>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a0c      	ldr	r2, [pc, #48]	; (800c714 <TIM_Base_SetConfig+0x124>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d103      	bne.n	800c6f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	691a      	ldr	r2, [r3, #16]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	615a      	str	r2, [r3, #20]
}
 800c6f6:	bf00      	nop
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40010000 	.word	0x40010000
 800c708:	40000400 	.word	0x40000400
 800c70c:	40000800 	.word	0x40000800
 800c710:	40000c00 	.word	0x40000c00
 800c714:	40010400 	.word	0x40010400
 800c718:	40014000 	.word	0x40014000
 800c71c:	40014400 	.word	0x40014400
 800c720:	40014800 	.word	0x40014800
 800c724:	40001800 	.word	0x40001800
 800c728:	40001c00 	.word	0x40001c00
 800c72c:	40002000 	.word	0x40002000

0800c730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	f023 0201 	bic.w	r2, r3, #1
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	4313      	orrs	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f023 0302 	bic.w	r3, r3, #2
 800c778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	4313      	orrs	r3, r2
 800c782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a20      	ldr	r2, [pc, #128]	; (800c808 <TIM_OC1_SetConfig+0xd8>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d003      	beq.n	800c794 <TIM_OC1_SetConfig+0x64>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a1f      	ldr	r2, [pc, #124]	; (800c80c <TIM_OC1_SetConfig+0xdc>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d10c      	bne.n	800c7ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	f023 0308 	bic.w	r3, r3, #8
 800c79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f023 0304 	bic.w	r3, r3, #4
 800c7ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a15      	ldr	r2, [pc, #84]	; (800c808 <TIM_OC1_SetConfig+0xd8>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d003      	beq.n	800c7be <TIM_OC1_SetConfig+0x8e>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a14      	ldr	r2, [pc, #80]	; (800c80c <TIM_OC1_SetConfig+0xdc>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d111      	bne.n	800c7e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	699b      	ldr	r3, [r3, #24]
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	693a      	ldr	r2, [r7, #16]
 800c7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	621a      	str	r2, [r3, #32]
}
 800c7fc:	bf00      	nop
 800c7fe:	371c      	adds	r7, #28
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	40010000 	.word	0x40010000
 800c80c:	40010400 	.word	0x40010400

0800c810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	f023 0210 	bic.w	r2, r3, #16
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	021b      	lsls	r3, r3, #8
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	4313      	orrs	r3, r2
 800c852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f023 0320 	bic.w	r3, r3, #32
 800c85a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	4313      	orrs	r3, r2
 800c866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a22      	ldr	r2, [pc, #136]	; (800c8f4 <TIM_OC2_SetConfig+0xe4>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d003      	beq.n	800c878 <TIM_OC2_SetConfig+0x68>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a21      	ldr	r2, [pc, #132]	; (800c8f8 <TIM_OC2_SetConfig+0xe8>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d10d      	bne.n	800c894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	011b      	lsls	r3, r3, #4
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	4313      	orrs	r3, r2
 800c88a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a17      	ldr	r2, [pc, #92]	; (800c8f4 <TIM_OC2_SetConfig+0xe4>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d003      	beq.n	800c8a4 <TIM_OC2_SetConfig+0x94>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a16      	ldr	r2, [pc, #88]	; (800c8f8 <TIM_OC2_SetConfig+0xe8>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d113      	bne.n	800c8cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	621a      	str	r2, [r3, #32]
}
 800c8e6:	bf00      	nop
 800c8e8:	371c      	adds	r7, #28
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	40010000 	.word	0x40010000
 800c8f8:	40010400 	.word	0x40010400

0800c8fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b087      	sub	sp, #28
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c92a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0303 	bic.w	r3, r3, #3
 800c932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	021b      	lsls	r3, r3, #8
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	4313      	orrs	r3, r2
 800c950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a21      	ldr	r2, [pc, #132]	; (800c9dc <TIM_OC3_SetConfig+0xe0>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d003      	beq.n	800c962 <TIM_OC3_SetConfig+0x66>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a20      	ldr	r2, [pc, #128]	; (800c9e0 <TIM_OC3_SetConfig+0xe4>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d10d      	bne.n	800c97e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	021b      	lsls	r3, r3, #8
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	4313      	orrs	r3, r2
 800c974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c97c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a16      	ldr	r2, [pc, #88]	; (800c9dc <TIM_OC3_SetConfig+0xe0>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d003      	beq.n	800c98e <TIM_OC3_SetConfig+0x92>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a15      	ldr	r2, [pc, #84]	; (800c9e0 <TIM_OC3_SetConfig+0xe4>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d113      	bne.n	800c9b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c99c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	011b      	lsls	r3, r3, #4
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	699b      	ldr	r3, [r3, #24]
 800c9ae:	011b      	lsls	r3, r3, #4
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	693a      	ldr	r2, [r7, #16]
 800c9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	697a      	ldr	r2, [r7, #20]
 800c9ce:	621a      	str	r2, [r3, #32]
}
 800c9d0:	bf00      	nop
 800c9d2:	371c      	adds	r7, #28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	40010000 	.word	0x40010000
 800c9e0:	40010400 	.word	0x40010400

0800c9e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	021b      	lsls	r3, r3, #8
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	031b      	lsls	r3, r3, #12
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a12      	ldr	r2, [pc, #72]	; (800ca88 <TIM_OC4_SetConfig+0xa4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d003      	beq.n	800ca4c <TIM_OC4_SetConfig+0x68>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <TIM_OC4_SetConfig+0xa8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d109      	bne.n	800ca60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	695b      	ldr	r3, [r3, #20]
 800ca58:	019b      	lsls	r3, r3, #6
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	697a      	ldr	r2, [r7, #20]
 800ca64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	693a      	ldr	r2, [r7, #16]
 800ca78:	621a      	str	r2, [r3, #32]
}
 800ca7a:	bf00      	nop
 800ca7c:	371c      	adds	r7, #28
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	40010000 	.word	0x40010000
 800ca8c:	40010400 	.word	0x40010400

0800ca90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f003 031f 	and.w	r3, r3, #31
 800caa2:	2201      	movs	r2, #1
 800caa4:	fa02 f303 	lsl.w	r3, r2, r3
 800caa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6a1a      	ldr	r2, [r3, #32]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	43db      	mvns	r3, r3
 800cab2:	401a      	ands	r2, r3
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6a1a      	ldr	r2, [r3, #32]
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	f003 031f 	and.w	r3, r3, #31
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	fa01 f303 	lsl.w	r3, r1, r3
 800cac8:	431a      	orrs	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	621a      	str	r2, [r3, #32]
}
 800cace:	bf00      	nop
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
	...

0800cadc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cadc:	b480      	push	{r7}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caec:	2b01      	cmp	r3, #1
 800caee:	d101      	bne.n	800caf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caf0:	2302      	movs	r3, #2
 800caf2:	e05a      	b.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a21      	ldr	r2, [pc, #132]	; (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d022      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb40:	d01d      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a1d      	ldr	r2, [pc, #116]	; (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d018      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d013      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a1a      	ldr	r2, [pc, #104]	; (800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d00e      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d009      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a17      	ldr	r2, [pc, #92]	; (800cbcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d004      	beq.n	800cb7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a15      	ldr	r2, [pc, #84]	; (800cbd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d10c      	bne.n	800cb98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	40010000 	.word	0x40010000
 800cbbc:	40000400 	.word	0x40000400
 800cbc0:	40000800 	.word	0x40000800
 800cbc4:	40000c00 	.word	0x40000c00
 800cbc8:	40010400 	.word	0x40010400
 800cbcc:	40014000 	.word	0x40014000
 800cbd0:	40001800 	.word	0x40001800

0800cbd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d101      	bne.n	800cbf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbec:	2302      	movs	r3, #2
 800cbee:	e03d      	b.n	800cc6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	69db      	ldr	r3, [r3, #28]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e03f      	b.n	800cd32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d106      	bne.n	800cccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7f8 fb1e 	bl	8005308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2224      	movs	r2, #36	; 0x24
 800ccd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68da      	ldr	r2, [r3, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f829 	bl	800cd3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	691a      	ldr	r2, [r3, #16]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	695a      	ldr	r2, [r3, #20]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2220      	movs	r2, #32
 800cd24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	b085      	sub	sp, #20
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68da      	ldr	r2, [r3, #12]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cd7e:	f023 030c 	bic.w	r3, r3, #12
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	6812      	ldr	r2, [r2, #0]
 800cd86:	68f9      	ldr	r1, [r7, #12]
 800cd88:	430b      	orrs	r3, r1
 800cd8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	699a      	ldr	r2, [r3, #24]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	69db      	ldr	r3, [r3, #28]
 800cda6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdaa:	f040 818b 	bne.w	800d0c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4ac1      	ldr	r2, [pc, #772]	; (800d0b8 <UART_SetConfig+0x37c>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d005      	beq.n	800cdc4 <UART_SetConfig+0x88>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4abf      	ldr	r2, [pc, #764]	; (800d0bc <UART_SetConfig+0x380>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	f040 80bd 	bne.w	800cf3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cdc4:	f7fc fbcc 	bl	8009560 <HAL_RCC_GetPCLK2Freq>
 800cdc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	461d      	mov	r5, r3
 800cdce:	f04f 0600 	mov.w	r6, #0
 800cdd2:	46a8      	mov	r8, r5
 800cdd4:	46b1      	mov	r9, r6
 800cdd6:	eb18 0308 	adds.w	r3, r8, r8
 800cdda:	eb49 0409 	adc.w	r4, r9, r9
 800cdde:	4698      	mov	r8, r3
 800cde0:	46a1      	mov	r9, r4
 800cde2:	eb18 0805 	adds.w	r8, r8, r5
 800cde6:	eb49 0906 	adc.w	r9, r9, r6
 800cdea:	f04f 0100 	mov.w	r1, #0
 800cdee:	f04f 0200 	mov.w	r2, #0
 800cdf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cdf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cdfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cdfe:	4688      	mov	r8, r1
 800ce00:	4691      	mov	r9, r2
 800ce02:	eb18 0005 	adds.w	r0, r8, r5
 800ce06:	eb49 0106 	adc.w	r1, r9, r6
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	461d      	mov	r5, r3
 800ce10:	f04f 0600 	mov.w	r6, #0
 800ce14:	196b      	adds	r3, r5, r5
 800ce16:	eb46 0406 	adc.w	r4, r6, r6
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	f7f3 ff4b 	bl	8000cb8 <__aeabi_uldivmod>
 800ce22:	4603      	mov	r3, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	461a      	mov	r2, r3
 800ce28:	4ba5      	ldr	r3, [pc, #660]	; (800d0c0 <UART_SetConfig+0x384>)
 800ce2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ce2e:	095b      	lsrs	r3, r3, #5
 800ce30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	461d      	mov	r5, r3
 800ce38:	f04f 0600 	mov.w	r6, #0
 800ce3c:	46a9      	mov	r9, r5
 800ce3e:	46b2      	mov	sl, r6
 800ce40:	eb19 0309 	adds.w	r3, r9, r9
 800ce44:	eb4a 040a 	adc.w	r4, sl, sl
 800ce48:	4699      	mov	r9, r3
 800ce4a:	46a2      	mov	sl, r4
 800ce4c:	eb19 0905 	adds.w	r9, r9, r5
 800ce50:	eb4a 0a06 	adc.w	sl, sl, r6
 800ce54:	f04f 0100 	mov.w	r1, #0
 800ce58:	f04f 0200 	mov.w	r2, #0
 800ce5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ce64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ce68:	4689      	mov	r9, r1
 800ce6a:	4692      	mov	sl, r2
 800ce6c:	eb19 0005 	adds.w	r0, r9, r5
 800ce70:	eb4a 0106 	adc.w	r1, sl, r6
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	461d      	mov	r5, r3
 800ce7a:	f04f 0600 	mov.w	r6, #0
 800ce7e:	196b      	adds	r3, r5, r5
 800ce80:	eb46 0406 	adc.w	r4, r6, r6
 800ce84:	461a      	mov	r2, r3
 800ce86:	4623      	mov	r3, r4
 800ce88:	f7f3 ff16 	bl	8000cb8 <__aeabi_uldivmod>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	461a      	mov	r2, r3
 800ce92:	4b8b      	ldr	r3, [pc, #556]	; (800d0c0 <UART_SetConfig+0x384>)
 800ce94:	fba3 1302 	umull	r1, r3, r3, r2
 800ce98:	095b      	lsrs	r3, r3, #5
 800ce9a:	2164      	movs	r1, #100	; 0x64
 800ce9c:	fb01 f303 	mul.w	r3, r1, r3
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	3332      	adds	r3, #50	; 0x32
 800cea6:	4a86      	ldr	r2, [pc, #536]	; (800d0c0 <UART_SetConfig+0x384>)
 800cea8:	fba2 2303 	umull	r2, r3, r2, r3
 800ceac:	095b      	lsrs	r3, r3, #5
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ceb4:	4498      	add	r8, r3
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	461d      	mov	r5, r3
 800ceba:	f04f 0600 	mov.w	r6, #0
 800cebe:	46a9      	mov	r9, r5
 800cec0:	46b2      	mov	sl, r6
 800cec2:	eb19 0309 	adds.w	r3, r9, r9
 800cec6:	eb4a 040a 	adc.w	r4, sl, sl
 800ceca:	4699      	mov	r9, r3
 800cecc:	46a2      	mov	sl, r4
 800cece:	eb19 0905 	adds.w	r9, r9, r5
 800ced2:	eb4a 0a06 	adc.w	sl, sl, r6
 800ced6:	f04f 0100 	mov.w	r1, #0
 800ceda:	f04f 0200 	mov.w	r2, #0
 800cede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ceea:	4689      	mov	r9, r1
 800ceec:	4692      	mov	sl, r2
 800ceee:	eb19 0005 	adds.w	r0, r9, r5
 800cef2:	eb4a 0106 	adc.w	r1, sl, r6
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	461d      	mov	r5, r3
 800cefc:	f04f 0600 	mov.w	r6, #0
 800cf00:	196b      	adds	r3, r5, r5
 800cf02:	eb46 0406 	adc.w	r4, r6, r6
 800cf06:	461a      	mov	r2, r3
 800cf08:	4623      	mov	r3, r4
 800cf0a:	f7f3 fed5 	bl	8000cb8 <__aeabi_uldivmod>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	460c      	mov	r4, r1
 800cf12:	461a      	mov	r2, r3
 800cf14:	4b6a      	ldr	r3, [pc, #424]	; (800d0c0 <UART_SetConfig+0x384>)
 800cf16:	fba3 1302 	umull	r1, r3, r3, r2
 800cf1a:	095b      	lsrs	r3, r3, #5
 800cf1c:	2164      	movs	r1, #100	; 0x64
 800cf1e:	fb01 f303 	mul.w	r3, r1, r3
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	3332      	adds	r3, #50	; 0x32
 800cf28:	4a65      	ldr	r2, [pc, #404]	; (800d0c0 <UART_SetConfig+0x384>)
 800cf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf2e:	095b      	lsrs	r3, r3, #5
 800cf30:	f003 0207 	and.w	r2, r3, #7
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4442      	add	r2, r8
 800cf3a:	609a      	str	r2, [r3, #8]
 800cf3c:	e26f      	b.n	800d41e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf3e:	f7fc fafb 	bl	8009538 <HAL_RCC_GetPCLK1Freq>
 800cf42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	461d      	mov	r5, r3
 800cf48:	f04f 0600 	mov.w	r6, #0
 800cf4c:	46a8      	mov	r8, r5
 800cf4e:	46b1      	mov	r9, r6
 800cf50:	eb18 0308 	adds.w	r3, r8, r8
 800cf54:	eb49 0409 	adc.w	r4, r9, r9
 800cf58:	4698      	mov	r8, r3
 800cf5a:	46a1      	mov	r9, r4
 800cf5c:	eb18 0805 	adds.w	r8, r8, r5
 800cf60:	eb49 0906 	adc.w	r9, r9, r6
 800cf64:	f04f 0100 	mov.w	r1, #0
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cf70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cf74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cf78:	4688      	mov	r8, r1
 800cf7a:	4691      	mov	r9, r2
 800cf7c:	eb18 0005 	adds.w	r0, r8, r5
 800cf80:	eb49 0106 	adc.w	r1, r9, r6
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	461d      	mov	r5, r3
 800cf8a:	f04f 0600 	mov.w	r6, #0
 800cf8e:	196b      	adds	r3, r5, r5
 800cf90:	eb46 0406 	adc.w	r4, r6, r6
 800cf94:	461a      	mov	r2, r3
 800cf96:	4623      	mov	r3, r4
 800cf98:	f7f3 fe8e 	bl	8000cb8 <__aeabi_uldivmod>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	4b47      	ldr	r3, [pc, #284]	; (800d0c0 <UART_SetConfig+0x384>)
 800cfa4:	fba3 2302 	umull	r2, r3, r3, r2
 800cfa8:	095b      	lsrs	r3, r3, #5
 800cfaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	461d      	mov	r5, r3
 800cfb2:	f04f 0600 	mov.w	r6, #0
 800cfb6:	46a9      	mov	r9, r5
 800cfb8:	46b2      	mov	sl, r6
 800cfba:	eb19 0309 	adds.w	r3, r9, r9
 800cfbe:	eb4a 040a 	adc.w	r4, sl, sl
 800cfc2:	4699      	mov	r9, r3
 800cfc4:	46a2      	mov	sl, r4
 800cfc6:	eb19 0905 	adds.w	r9, r9, r5
 800cfca:	eb4a 0a06 	adc.w	sl, sl, r6
 800cfce:	f04f 0100 	mov.w	r1, #0
 800cfd2:	f04f 0200 	mov.w	r2, #0
 800cfd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cfde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cfe2:	4689      	mov	r9, r1
 800cfe4:	4692      	mov	sl, r2
 800cfe6:	eb19 0005 	adds.w	r0, r9, r5
 800cfea:	eb4a 0106 	adc.w	r1, sl, r6
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	461d      	mov	r5, r3
 800cff4:	f04f 0600 	mov.w	r6, #0
 800cff8:	196b      	adds	r3, r5, r5
 800cffa:	eb46 0406 	adc.w	r4, r6, r6
 800cffe:	461a      	mov	r2, r3
 800d000:	4623      	mov	r3, r4
 800d002:	f7f3 fe59 	bl	8000cb8 <__aeabi_uldivmod>
 800d006:	4603      	mov	r3, r0
 800d008:	460c      	mov	r4, r1
 800d00a:	461a      	mov	r2, r3
 800d00c:	4b2c      	ldr	r3, [pc, #176]	; (800d0c0 <UART_SetConfig+0x384>)
 800d00e:	fba3 1302 	umull	r1, r3, r3, r2
 800d012:	095b      	lsrs	r3, r3, #5
 800d014:	2164      	movs	r1, #100	; 0x64
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	3332      	adds	r3, #50	; 0x32
 800d020:	4a27      	ldr	r2, [pc, #156]	; (800d0c0 <UART_SetConfig+0x384>)
 800d022:	fba2 2303 	umull	r2, r3, r2, r3
 800d026:	095b      	lsrs	r3, r3, #5
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d02e:	4498      	add	r8, r3
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	461d      	mov	r5, r3
 800d034:	f04f 0600 	mov.w	r6, #0
 800d038:	46a9      	mov	r9, r5
 800d03a:	46b2      	mov	sl, r6
 800d03c:	eb19 0309 	adds.w	r3, r9, r9
 800d040:	eb4a 040a 	adc.w	r4, sl, sl
 800d044:	4699      	mov	r9, r3
 800d046:	46a2      	mov	sl, r4
 800d048:	eb19 0905 	adds.w	r9, r9, r5
 800d04c:	eb4a 0a06 	adc.w	sl, sl, r6
 800d050:	f04f 0100 	mov.w	r1, #0
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d05c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d064:	4689      	mov	r9, r1
 800d066:	4692      	mov	sl, r2
 800d068:	eb19 0005 	adds.w	r0, r9, r5
 800d06c:	eb4a 0106 	adc.w	r1, sl, r6
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	461d      	mov	r5, r3
 800d076:	f04f 0600 	mov.w	r6, #0
 800d07a:	196b      	adds	r3, r5, r5
 800d07c:	eb46 0406 	adc.w	r4, r6, r6
 800d080:	461a      	mov	r2, r3
 800d082:	4623      	mov	r3, r4
 800d084:	f7f3 fe18 	bl	8000cb8 <__aeabi_uldivmod>
 800d088:	4603      	mov	r3, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	461a      	mov	r2, r3
 800d08e:	4b0c      	ldr	r3, [pc, #48]	; (800d0c0 <UART_SetConfig+0x384>)
 800d090:	fba3 1302 	umull	r1, r3, r3, r2
 800d094:	095b      	lsrs	r3, r3, #5
 800d096:	2164      	movs	r1, #100	; 0x64
 800d098:	fb01 f303 	mul.w	r3, r1, r3
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	3332      	adds	r3, #50	; 0x32
 800d0a2:	4a07      	ldr	r2, [pc, #28]	; (800d0c0 <UART_SetConfig+0x384>)
 800d0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	f003 0207 	and.w	r2, r3, #7
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4442      	add	r2, r8
 800d0b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d0b6:	e1b2      	b.n	800d41e <UART_SetConfig+0x6e2>
 800d0b8:	40011000 	.word	0x40011000
 800d0bc:	40011400 	.word	0x40011400
 800d0c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4ad7      	ldr	r2, [pc, #860]	; (800d428 <UART_SetConfig+0x6ec>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d005      	beq.n	800d0da <UART_SetConfig+0x39e>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4ad6      	ldr	r2, [pc, #856]	; (800d42c <UART_SetConfig+0x6f0>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	f040 80d1 	bne.w	800d27c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d0da:	f7fc fa41 	bl	8009560 <HAL_RCC_GetPCLK2Freq>
 800d0de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	469a      	mov	sl, r3
 800d0e4:	f04f 0b00 	mov.w	fp, #0
 800d0e8:	46d0      	mov	r8, sl
 800d0ea:	46d9      	mov	r9, fp
 800d0ec:	eb18 0308 	adds.w	r3, r8, r8
 800d0f0:	eb49 0409 	adc.w	r4, r9, r9
 800d0f4:	4698      	mov	r8, r3
 800d0f6:	46a1      	mov	r9, r4
 800d0f8:	eb18 080a 	adds.w	r8, r8, sl
 800d0fc:	eb49 090b 	adc.w	r9, r9, fp
 800d100:	f04f 0100 	mov.w	r1, #0
 800d104:	f04f 0200 	mov.w	r2, #0
 800d108:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d10c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d110:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d114:	4688      	mov	r8, r1
 800d116:	4691      	mov	r9, r2
 800d118:	eb1a 0508 	adds.w	r5, sl, r8
 800d11c:	eb4b 0609 	adc.w	r6, fp, r9
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	4619      	mov	r1, r3
 800d126:	f04f 0200 	mov.w	r2, #0
 800d12a:	f04f 0300 	mov.w	r3, #0
 800d12e:	f04f 0400 	mov.w	r4, #0
 800d132:	0094      	lsls	r4, r2, #2
 800d134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d138:	008b      	lsls	r3, r1, #2
 800d13a:	461a      	mov	r2, r3
 800d13c:	4623      	mov	r3, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	4631      	mov	r1, r6
 800d142:	f7f3 fdb9 	bl	8000cb8 <__aeabi_uldivmod>
 800d146:	4603      	mov	r3, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	461a      	mov	r2, r3
 800d14c:	4bb8      	ldr	r3, [pc, #736]	; (800d430 <UART_SetConfig+0x6f4>)
 800d14e:	fba3 2302 	umull	r2, r3, r3, r2
 800d152:	095b      	lsrs	r3, r3, #5
 800d154:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	469b      	mov	fp, r3
 800d15c:	f04f 0c00 	mov.w	ip, #0
 800d160:	46d9      	mov	r9, fp
 800d162:	46e2      	mov	sl, ip
 800d164:	eb19 0309 	adds.w	r3, r9, r9
 800d168:	eb4a 040a 	adc.w	r4, sl, sl
 800d16c:	4699      	mov	r9, r3
 800d16e:	46a2      	mov	sl, r4
 800d170:	eb19 090b 	adds.w	r9, r9, fp
 800d174:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d178:	f04f 0100 	mov.w	r1, #0
 800d17c:	f04f 0200 	mov.w	r2, #0
 800d180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d184:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d188:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d18c:	4689      	mov	r9, r1
 800d18e:	4692      	mov	sl, r2
 800d190:	eb1b 0509 	adds.w	r5, fp, r9
 800d194:	eb4c 060a 	adc.w	r6, ip, sl
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	4619      	mov	r1, r3
 800d19e:	f04f 0200 	mov.w	r2, #0
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	f04f 0400 	mov.w	r4, #0
 800d1aa:	0094      	lsls	r4, r2, #2
 800d1ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d1b0:	008b      	lsls	r3, r1, #2
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	4623      	mov	r3, r4
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	f7f3 fd7d 	bl	8000cb8 <__aeabi_uldivmod>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	4b9a      	ldr	r3, [pc, #616]	; (800d430 <UART_SetConfig+0x6f4>)
 800d1c6:	fba3 1302 	umull	r1, r3, r3, r2
 800d1ca:	095b      	lsrs	r3, r3, #5
 800d1cc:	2164      	movs	r1, #100	; 0x64
 800d1ce:	fb01 f303 	mul.w	r3, r1, r3
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	011b      	lsls	r3, r3, #4
 800d1d6:	3332      	adds	r3, #50	; 0x32
 800d1d8:	4a95      	ldr	r2, [pc, #596]	; (800d430 <UART_SetConfig+0x6f4>)
 800d1da:	fba2 2303 	umull	r2, r3, r2, r3
 800d1de:	095b      	lsrs	r3, r3, #5
 800d1e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1e4:	4498      	add	r8, r3
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	469b      	mov	fp, r3
 800d1ea:	f04f 0c00 	mov.w	ip, #0
 800d1ee:	46d9      	mov	r9, fp
 800d1f0:	46e2      	mov	sl, ip
 800d1f2:	eb19 0309 	adds.w	r3, r9, r9
 800d1f6:	eb4a 040a 	adc.w	r4, sl, sl
 800d1fa:	4699      	mov	r9, r3
 800d1fc:	46a2      	mov	sl, r4
 800d1fe:	eb19 090b 	adds.w	r9, r9, fp
 800d202:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d206:	f04f 0100 	mov.w	r1, #0
 800d20a:	f04f 0200 	mov.w	r2, #0
 800d20e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d212:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d216:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d21a:	4689      	mov	r9, r1
 800d21c:	4692      	mov	sl, r2
 800d21e:	eb1b 0509 	adds.w	r5, fp, r9
 800d222:	eb4c 060a 	adc.w	r6, ip, sl
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	4619      	mov	r1, r3
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	f04f 0400 	mov.w	r4, #0
 800d238:	0094      	lsls	r4, r2, #2
 800d23a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d23e:	008b      	lsls	r3, r1, #2
 800d240:	461a      	mov	r2, r3
 800d242:	4623      	mov	r3, r4
 800d244:	4628      	mov	r0, r5
 800d246:	4631      	mov	r1, r6
 800d248:	f7f3 fd36 	bl	8000cb8 <__aeabi_uldivmod>
 800d24c:	4603      	mov	r3, r0
 800d24e:	460c      	mov	r4, r1
 800d250:	461a      	mov	r2, r3
 800d252:	4b77      	ldr	r3, [pc, #476]	; (800d430 <UART_SetConfig+0x6f4>)
 800d254:	fba3 1302 	umull	r1, r3, r3, r2
 800d258:	095b      	lsrs	r3, r3, #5
 800d25a:	2164      	movs	r1, #100	; 0x64
 800d25c:	fb01 f303 	mul.w	r3, r1, r3
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	011b      	lsls	r3, r3, #4
 800d264:	3332      	adds	r3, #50	; 0x32
 800d266:	4a72      	ldr	r2, [pc, #456]	; (800d430 <UART_SetConfig+0x6f4>)
 800d268:	fba2 2303 	umull	r2, r3, r2, r3
 800d26c:	095b      	lsrs	r3, r3, #5
 800d26e:	f003 020f 	and.w	r2, r3, #15
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4442      	add	r2, r8
 800d278:	609a      	str	r2, [r3, #8]
 800d27a:	e0d0      	b.n	800d41e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d27c:	f7fc f95c 	bl	8009538 <HAL_RCC_GetPCLK1Freq>
 800d280:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	469a      	mov	sl, r3
 800d286:	f04f 0b00 	mov.w	fp, #0
 800d28a:	46d0      	mov	r8, sl
 800d28c:	46d9      	mov	r9, fp
 800d28e:	eb18 0308 	adds.w	r3, r8, r8
 800d292:	eb49 0409 	adc.w	r4, r9, r9
 800d296:	4698      	mov	r8, r3
 800d298:	46a1      	mov	r9, r4
 800d29a:	eb18 080a 	adds.w	r8, r8, sl
 800d29e:	eb49 090b 	adc.w	r9, r9, fp
 800d2a2:	f04f 0100 	mov.w	r1, #0
 800d2a6:	f04f 0200 	mov.w	r2, #0
 800d2aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d2ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d2b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d2b6:	4688      	mov	r8, r1
 800d2b8:	4691      	mov	r9, r2
 800d2ba:	eb1a 0508 	adds.w	r5, sl, r8
 800d2be:	eb4b 0609 	adc.w	r6, fp, r9
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	f04f 0200 	mov.w	r2, #0
 800d2cc:	f04f 0300 	mov.w	r3, #0
 800d2d0:	f04f 0400 	mov.w	r4, #0
 800d2d4:	0094      	lsls	r4, r2, #2
 800d2d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d2da:	008b      	lsls	r3, r1, #2
 800d2dc:	461a      	mov	r2, r3
 800d2de:	4623      	mov	r3, r4
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	f7f3 fce8 	bl	8000cb8 <__aeabi_uldivmod>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	4b50      	ldr	r3, [pc, #320]	; (800d430 <UART_SetConfig+0x6f4>)
 800d2f0:	fba3 2302 	umull	r2, r3, r3, r2
 800d2f4:	095b      	lsrs	r3, r3, #5
 800d2f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	469b      	mov	fp, r3
 800d2fe:	f04f 0c00 	mov.w	ip, #0
 800d302:	46d9      	mov	r9, fp
 800d304:	46e2      	mov	sl, ip
 800d306:	eb19 0309 	adds.w	r3, r9, r9
 800d30a:	eb4a 040a 	adc.w	r4, sl, sl
 800d30e:	4699      	mov	r9, r3
 800d310:	46a2      	mov	sl, r4
 800d312:	eb19 090b 	adds.w	r9, r9, fp
 800d316:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d31a:	f04f 0100 	mov.w	r1, #0
 800d31e:	f04f 0200 	mov.w	r2, #0
 800d322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d32a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d32e:	4689      	mov	r9, r1
 800d330:	4692      	mov	sl, r2
 800d332:	eb1b 0509 	adds.w	r5, fp, r9
 800d336:	eb4c 060a 	adc.w	r6, ip, sl
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	4619      	mov	r1, r3
 800d340:	f04f 0200 	mov.w	r2, #0
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	f04f 0400 	mov.w	r4, #0
 800d34c:	0094      	lsls	r4, r2, #2
 800d34e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d352:	008b      	lsls	r3, r1, #2
 800d354:	461a      	mov	r2, r3
 800d356:	4623      	mov	r3, r4
 800d358:	4628      	mov	r0, r5
 800d35a:	4631      	mov	r1, r6
 800d35c:	f7f3 fcac 	bl	8000cb8 <__aeabi_uldivmod>
 800d360:	4603      	mov	r3, r0
 800d362:	460c      	mov	r4, r1
 800d364:	461a      	mov	r2, r3
 800d366:	4b32      	ldr	r3, [pc, #200]	; (800d430 <UART_SetConfig+0x6f4>)
 800d368:	fba3 1302 	umull	r1, r3, r3, r2
 800d36c:	095b      	lsrs	r3, r3, #5
 800d36e:	2164      	movs	r1, #100	; 0x64
 800d370:	fb01 f303 	mul.w	r3, r1, r3
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	3332      	adds	r3, #50	; 0x32
 800d37a:	4a2d      	ldr	r2, [pc, #180]	; (800d430 <UART_SetConfig+0x6f4>)
 800d37c:	fba2 2303 	umull	r2, r3, r2, r3
 800d380:	095b      	lsrs	r3, r3, #5
 800d382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d386:	4498      	add	r8, r3
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	469b      	mov	fp, r3
 800d38c:	f04f 0c00 	mov.w	ip, #0
 800d390:	46d9      	mov	r9, fp
 800d392:	46e2      	mov	sl, ip
 800d394:	eb19 0309 	adds.w	r3, r9, r9
 800d398:	eb4a 040a 	adc.w	r4, sl, sl
 800d39c:	4699      	mov	r9, r3
 800d39e:	46a2      	mov	sl, r4
 800d3a0:	eb19 090b 	adds.w	r9, r9, fp
 800d3a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d3a8:	f04f 0100 	mov.w	r1, #0
 800d3ac:	f04f 0200 	mov.w	r2, #0
 800d3b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d3b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d3bc:	4689      	mov	r9, r1
 800d3be:	4692      	mov	sl, r2
 800d3c0:	eb1b 0509 	adds.w	r5, fp, r9
 800d3c4:	eb4c 060a 	adc.w	r6, ip, sl
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	f04f 0300 	mov.w	r3, #0
 800d3d6:	f04f 0400 	mov.w	r4, #0
 800d3da:	0094      	lsls	r4, r2, #2
 800d3dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d3e0:	008b      	lsls	r3, r1, #2
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	4623      	mov	r3, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	f7f3 fc65 	bl	8000cb8 <__aeabi_uldivmod>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	4b0e      	ldr	r3, [pc, #56]	; (800d430 <UART_SetConfig+0x6f4>)
 800d3f6:	fba3 1302 	umull	r1, r3, r3, r2
 800d3fa:	095b      	lsrs	r3, r3, #5
 800d3fc:	2164      	movs	r1, #100	; 0x64
 800d3fe:	fb01 f303 	mul.w	r3, r1, r3
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	011b      	lsls	r3, r3, #4
 800d406:	3332      	adds	r3, #50	; 0x32
 800d408:	4a09      	ldr	r2, [pc, #36]	; (800d430 <UART_SetConfig+0x6f4>)
 800d40a:	fba2 2303 	umull	r2, r3, r2, r3
 800d40e:	095b      	lsrs	r3, r3, #5
 800d410:	f003 020f 	and.w	r2, r3, #15
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4442      	add	r2, r8
 800d41a:	609a      	str	r2, [r3, #8]
}
 800d41c:	e7ff      	b.n	800d41e <UART_SetConfig+0x6e2>
 800d41e:	bf00      	nop
 800d420:	3714      	adds	r7, #20
 800d422:	46bd      	mov	sp, r7
 800d424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d428:	40011000 	.word	0x40011000
 800d42c:	40011400 	.word	0x40011400
 800d430:	51eb851f 	.word	0x51eb851f

0800d434 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d434:	b084      	sub	sp, #16
 800d436:	b480      	push	{r7}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	f107 001c 	add.w	r0, r7, #28
 800d442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d44a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d44c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d44e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d452:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d456:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d45a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d45e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4313      	orrs	r3, r2
 800d464:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d46e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	431a      	orrs	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	b004      	add	sp, #16
 800d488:	4770      	bx	lr

0800d48a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2203      	movs	r2, #3
 800d4d2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d4d4:	2002      	movs	r0, #2
 800d4d6:	f7f9 fbc5 	bl	8006c64 <HAL_Delay>
  
  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 0303 	and.w	r3, r3, #3
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d51e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d524:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d52a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d53a:	f023 030f 	bic.w	r3, r3, #15
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	431a      	orrs	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	b2db      	uxtb	r3, r3
}
 800d562:	4618      	mov	r0, r3
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d56e:	b480      	push	{r7}
 800d570:	b085      	sub	sp, #20
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	3314      	adds	r3, #20
 800d57c:	461a      	mov	r2, r3
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	4413      	add	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
}  
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d5c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d5c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0

}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d5fa:	2310      	movs	r3, #16
 800d5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5fe:	2340      	movs	r3, #64	; 0x40
 800d600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d602:	2300      	movs	r3, #0
 800d604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d60a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d60c:	f107 0308 	add.w	r3, r7, #8
 800d610:	4619      	mov	r1, r3
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff ff74 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d618:	f241 3288 	movw	r2, #5000	; 0x1388
 800d61c:	2110      	movs	r1, #16
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa40 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d626:	69fb      	ldr	r3, [r7, #28]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3720      	adds	r7, #32
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d63e:	2311      	movs	r3, #17
 800d640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d642:	2340      	movs	r3, #64	; 0x40
 800d644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d646:	2300      	movs	r3, #0
 800d648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d64a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d64e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d650:	f107 0308 	add.w	r3, r7, #8
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff ff52 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d65c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d660:	2111      	movs	r1, #17
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa1e 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d66a:	69fb      	ldr	r3, [r7, #28]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3720      	adds	r7, #32
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b088      	sub	sp, #32
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d682:	2312      	movs	r3, #18
 800d684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d686:	2340      	movs	r3, #64	; 0x40
 800d688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d68a:	2300      	movs	r3, #0
 800d68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d694:	f107 0308 	add.w	r3, r7, #8
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7ff ff30 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a4:	2112      	movs	r1, #18
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f9fc 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d6c6:	2318      	movs	r3, #24
 800d6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6d8:	f107 0308 	add.w	r3, r7, #8
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff ff0e 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6e8:	2118      	movs	r1, #24
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f9da 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d6f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b088      	sub	sp, #32
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d70a:	2319      	movs	r3, #25
 800d70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d71a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d71c:	f107 0308 	add.w	r3, r7, #8
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff feec 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d728:	f241 3288 	movw	r2, #5000	; 0x1388
 800d72c:	2119      	movs	r1, #25
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f9b8 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d736:	69fb      	ldr	r3, [r7, #28]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3720      	adds	r7, #32
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b088      	sub	sp, #32
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d748:	2300      	movs	r3, #0
 800d74a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d74c:	230c      	movs	r3, #12
 800d74e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d750:	2340      	movs	r3, #64	; 0x40
 800d752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d754:	2300      	movs	r3, #0
 800d756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d75c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d75e:	f107 0308 	add.w	r3, r7, #8
 800d762:	4619      	mov	r1, r3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7ff fecb 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d76a:	4a05      	ldr	r2, [pc, #20]	; (800d780 <SDMMC_CmdStopTransfer+0x40>)
 800d76c:	210c      	movs	r1, #12
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 f998 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d776:	69fb      	ldr	r3, [r7, #28]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	05f5e100 	.word	0x05f5e100

0800d784 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08a      	sub	sp, #40	; 0x28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d794:	2307      	movs	r3, #7
 800d796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d798:	2340      	movs	r3, #64	; 0x40
 800d79a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d79c:	2300      	movs	r3, #0
 800d79e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7a6:	f107 0310 	add.w	r3, r7, #16
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff fea7 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7b6:	2107      	movs	r1, #7
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 f973 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d7be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3728      	adds	r7, #40	; 0x28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b088      	sub	sp, #32
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7e8:	f107 0308 	add.w	r3, r7, #8
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fe86 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f92d 	bl	800da54 <SDMMC_GetCmdError>
 800d7fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3720      	adds	r7, #32
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b088      	sub	sp, #32
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d80e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d814:	2308      	movs	r3, #8
 800d816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d818:	2340      	movs	r3, #64	; 0x40
 800d81a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d81c:	2300      	movs	r3, #0
 800d81e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d824:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d826:	f107 0308 	add.w	r3, r7, #8
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff fe67 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 fb16 	bl	800de64 <SDMMC_GetCmdResp7>
 800d838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d83a:	69fb      	ldr	r3, [r7, #28]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3720      	adds	r7, #32
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d852:	2337      	movs	r3, #55	; 0x37
 800d854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d856:	2340      	movs	r3, #64	; 0x40
 800d858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d864:	f107 0308 	add.w	r3, r7, #8
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fe48 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d870:	f241 3288 	movw	r2, #5000	; 0x1388
 800d874:	2137      	movs	r1, #55	; 0x37
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f914 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d87c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d87e:	69fb      	ldr	r3, [r7, #28]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3720      	adds	r7, #32
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b088      	sub	sp, #32
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d89e:	2329      	movs	r3, #41	; 0x29
 800d8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8a2:	2340      	movs	r3, #64	; 0x40
 800d8a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8b0:	f107 0308 	add.w	r3, r7, #8
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff fe22 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fa23 	bl	800dd08 <SDMMC_GetCmdResp3>
 800d8c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3720      	adds	r7, #32
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b088      	sub	sp, #32
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d8dc:	2306      	movs	r3, #6
 800d8de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8e0:	2340      	movs	r3, #64	; 0x40
 800d8e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8ee:	f107 0308 	add.w	r3, r7, #8
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff fe03 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d8fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8fe:	2106      	movs	r1, #6
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f8cf 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d908:	69fb      	ldr	r3, [r7, #28]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3720      	adds	r7, #32
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b088      	sub	sp, #32
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d91e:	2333      	movs	r3, #51	; 0x33
 800d920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d922:	2340      	movs	r3, #64	; 0x40
 800d924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d926:	2300      	movs	r3, #0
 800d928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d92e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d930:	f107 0308 	add.w	r3, r7, #8
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff fde2 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d940:	2133      	movs	r1, #51	; 0x33
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 f8ae 	bl	800daa4 <SDMMC_GetCmdResp1>
 800d948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d94a:	69fb      	ldr	r3, [r7, #28]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3720      	adds	r7, #32
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d95c:	2300      	movs	r3, #0
 800d95e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d960:	2302      	movs	r3, #2
 800d962:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d964:	23c0      	movs	r3, #192	; 0xc0
 800d966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d968:	2300      	movs	r3, #0
 800d96a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d96c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d970:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d972:	f107 0308 	add.w	r3, r7, #8
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff fdc1 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 f97c 	bl	800dc7c <SDMMC_GetCmdResp2>
 800d984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d986:	69fb      	ldr	r3, [r7, #28]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3720      	adds	r7, #32
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d99e:	2309      	movs	r3, #9
 800d9a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d9a2:	23c0      	movs	r3, #192	; 0xc0
 800d9a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9b0:	f107 0308 	add.w	r3, r7, #8
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff fda2 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f95d 	bl	800dc7c <SDMMC_GetCmdResp2>
 800d9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3720      	adds	r7, #32
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b088      	sub	sp, #32
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9e0:	2340      	movs	r3, #64	; 0x40
 800d9e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9ee:	f107 0308 	add.w	r3, r7, #8
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7ff fd83 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	2103      	movs	r1, #3
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f9bc 	bl	800dd7c <SDMMC_GetCmdResp6>
 800da04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da06:	69fb      	ldr	r3, [r7, #28]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3720      	adds	r7, #32
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b088      	sub	sp, #32
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800da1e:	230d      	movs	r3, #13
 800da20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da22:	2340      	movs	r3, #64	; 0x40
 800da24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da26:	2300      	movs	r3, #0
 800da28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da30:	f107 0308 	add.w	r3, r7, #8
 800da34:	4619      	mov	r1, r3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff fd62 	bl	800d500 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800da3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da40:	210d      	movs	r1, #13
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f82e 	bl	800daa4 <SDMMC_GetCmdResp1>
 800da48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da4a:	69fb      	ldr	r3, [r7, #28]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3720      	adds	r7, #32
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800da54:	b490      	push	{r4, r7}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da5c:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <SDMMC_GetCmdError+0x48>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a0f      	ldr	r2, [pc, #60]	; (800daa0 <SDMMC_GetCmdError+0x4c>)
 800da62:	fba2 2303 	umull	r2, r3, r2, r3
 800da66:	0a5b      	lsrs	r3, r3, #9
 800da68:	f241 3288 	movw	r2, #5000	; 0x1388
 800da6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800da70:	4623      	mov	r3, r4
 800da72:	1e5c      	subs	r4, r3, #1
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da7c:	e009      	b.n	800da92 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0f2      	beq.n	800da70 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	22c5      	movs	r2, #197	; 0xc5
 800da8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bc90      	pop	{r4, r7}
 800da9a:	4770      	bx	lr
 800da9c:	20000000 	.word	0x20000000
 800daa0:	10624dd3 	.word	0x10624dd3

0800daa4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800daa4:	b590      	push	{r4, r7, lr}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	460b      	mov	r3, r1
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dab2:	4b6f      	ldr	r3, [pc, #444]	; (800dc70 <SDMMC_GetCmdResp1+0x1cc>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a6f      	ldr	r2, [pc, #444]	; (800dc74 <SDMMC_GetCmdResp1+0x1d0>)
 800dab8:	fba2 2303 	umull	r2, r3, r2, r3
 800dabc:	0a5b      	lsrs	r3, r3, #9
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dac4:	4623      	mov	r3, r4
 800dac6:	1e5c      	subs	r4, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d102      	bne.n	800dad2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dacc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dad0:	e0c9      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d0f0      	beq.n	800dac4 <SDMMC_GetCmdResp1+0x20>
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1eb      	bne.n	800dac4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf0:	f003 0304 	and.w	r3, r3, #4
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2204      	movs	r2, #4
 800dafc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dafe:	2304      	movs	r3, #4
 800db00:	e0b1      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d004      	beq.n	800db18 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2201      	movs	r2, #1
 800db12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db14:	2301      	movs	r3, #1
 800db16:	e0a6      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	22c5      	movs	r2, #197	; 0xc5
 800db1c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff fd18 	bl	800d554 <SDIO_GetCommandResponse>
 800db24:	4603      	mov	r3, r0
 800db26:	461a      	mov	r2, r3
 800db28:	7afb      	ldrb	r3, [r7, #11]
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d001      	beq.n	800db32 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db2e:	2301      	movs	r3, #1
 800db30:	e099      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800db32:	2100      	movs	r1, #0
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f7ff fd1a 	bl	800d56e <SDIO_GetResponse>
 800db3a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	4b4e      	ldr	r3, [pc, #312]	; (800dc78 <SDMMC_GetCmdResp1+0x1d4>)
 800db40:	4013      	ands	r3, r2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800db46:	2300      	movs	r3, #0
 800db48:	e08d      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	da02      	bge.n	800db56 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800db50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db54:	e087      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800db60:	2340      	movs	r3, #64	; 0x40
 800db62:	e080      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800db6e:	2380      	movs	r3, #128	; 0x80
 800db70:	e079      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d002      	beq.n	800db82 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800db7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db80:	e071      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d002      	beq.n	800db92 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800db8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db90:	e069      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800db9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dba0:	e061      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dbac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbb0:	e059      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbc0:	e051      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dbcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbd0:	e049      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dbdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dbe0:	e041      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800dbec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbf0:	e039      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dbfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dc00:	e031      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dc10:	e029      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dc20:	e021      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dc2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dc30:	e019      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d002      	beq.n	800dc42 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dc40:	e011      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dc4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dc50:	e009      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	f003 0308 	and.w	r3, r3, #8
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dc5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dc60:	e001      	b.n	800dc66 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	371c      	adds	r7, #28
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd90      	pop	{r4, r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20000000 	.word	0x20000000
 800dc74:	10624dd3 	.word	0x10624dd3
 800dc78:	fdffe008 	.word	0xfdffe008

0800dc7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dc7c:	b490      	push	{r4, r7}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc84:	4b1e      	ldr	r3, [pc, #120]	; (800dd00 <SDMMC_GetCmdResp2+0x84>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a1e      	ldr	r2, [pc, #120]	; (800dd04 <SDMMC_GetCmdResp2+0x88>)
 800dc8a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc8e:	0a5b      	lsrs	r3, r3, #9
 800dc90:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dc98:	4623      	mov	r3, r4
 800dc9a:	1e5c      	subs	r4, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dca4:	e026      	b.n	800dcf4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0f0      	beq.n	800dc98 <SDMMC_GetCmdResp2+0x1c>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1eb      	bne.n	800dc98 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d004      	beq.n	800dcd6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2204      	movs	r2, #4
 800dcd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcd2:	2304      	movs	r3, #4
 800dcd4:	e00e      	b.n	800dcf4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d004      	beq.n	800dcec <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e003      	b.n	800dcf4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	22c5      	movs	r2, #197	; 0xc5
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bc90      	pop	{r4, r7}
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	20000000 	.word	0x20000000
 800dd04:	10624dd3 	.word	0x10624dd3

0800dd08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dd08:	b490      	push	{r4, r7}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd10:	4b18      	ldr	r3, [pc, #96]	; (800dd74 <SDMMC_GetCmdResp3+0x6c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a18      	ldr	r2, [pc, #96]	; (800dd78 <SDMMC_GetCmdResp3+0x70>)
 800dd16:	fba2 2303 	umull	r2, r3, r2, r3
 800dd1a:	0a5b      	lsrs	r3, r3, #9
 800dd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd24:	4623      	mov	r3, r4
 800dd26:	1e5c      	subs	r4, r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d102      	bne.n	800dd32 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd30:	e01b      	b.n	800dd6a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0f0      	beq.n	800dd24 <SDMMC_GetCmdResp3+0x1c>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1eb      	bne.n	800dd24 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd50:	f003 0304 	and.w	r3, r3, #4
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2204      	movs	r2, #4
 800dd5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd5e:	2304      	movs	r3, #4
 800dd60:	e003      	b.n	800dd6a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	22c5      	movs	r2, #197	; 0xc5
 800dd66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bc90      	pop	{r4, r7}
 800dd72:	4770      	bx	lr
 800dd74:	20000000 	.word	0x20000000
 800dd78:	10624dd3 	.word	0x10624dd3

0800dd7c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dd7c:	b590      	push	{r4, r7, lr}
 800dd7e:	b087      	sub	sp, #28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	460b      	mov	r3, r1
 800dd86:	607a      	str	r2, [r7, #4]
 800dd88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd8a:	4b34      	ldr	r3, [pc, #208]	; (800de5c <SDMMC_GetCmdResp6+0xe0>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a34      	ldr	r2, [pc, #208]	; (800de60 <SDMMC_GetCmdResp6+0xe4>)
 800dd90:	fba2 2303 	umull	r2, r3, r2, r3
 800dd94:	0a5b      	lsrs	r3, r3, #9
 800dd96:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd9a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd9e:	4623      	mov	r3, r4
 800dda0:	1e5c      	subs	r4, r3, #1
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d102      	bne.n	800ddac <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dda6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddaa:	e052      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d0f0      	beq.n	800dd9e <SDMMC_GetCmdResp6+0x22>
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1eb      	bne.n	800dd9e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddca:	f003 0304 	and.w	r3, r3, #4
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d004      	beq.n	800dddc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2204      	movs	r2, #4
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddd8:	2304      	movs	r3, #4
 800ddda:	e03a      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde0:	f003 0301 	and.w	r3, r3, #1
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2201      	movs	r2, #1
 800ddec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e02f      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7ff fbae 	bl	800d554 <SDIO_GetCommandResponse>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	7afb      	ldrb	r3, [r7, #11]
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d001      	beq.n	800de06 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de02:	2301      	movs	r3, #1
 800de04:	e025      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	22c5      	movs	r2, #197	; 0xc5
 800de0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800de0c:	2100      	movs	r1, #0
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff fbad 	bl	800d56e <SDIO_GetResponse>
 800de14:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	0c1b      	lsrs	r3, r3, #16
 800de24:	b29a      	uxth	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	e011      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de3c:	e009      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de4c:	e001      	b.n	800de52 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800de4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800de52:	4618      	mov	r0, r3
 800de54:	371c      	adds	r7, #28
 800de56:	46bd      	mov	sp, r7
 800de58:	bd90      	pop	{r4, r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20000000 	.word	0x20000000
 800de60:	10624dd3 	.word	0x10624dd3

0800de64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800de64:	b490      	push	{r4, r7}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de6c:	4b21      	ldr	r3, [pc, #132]	; (800def4 <SDMMC_GetCmdResp7+0x90>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a21      	ldr	r2, [pc, #132]	; (800def8 <SDMMC_GetCmdResp7+0x94>)
 800de72:	fba2 2303 	umull	r2, r3, r2, r3
 800de76:	0a5b      	lsrs	r3, r3, #9
 800de78:	f241 3288 	movw	r2, #5000	; 0x1388
 800de7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800de80:	4623      	mov	r3, r4
 800de82:	1e5c      	subs	r4, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d102      	bne.n	800de8e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de8c:	e02c      	b.n	800dee8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d0f0      	beq.n	800de80 <SDMMC_GetCmdResp7+0x1c>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1eb      	bne.n	800de80 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deac:	f003 0304 	and.w	r3, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d004      	beq.n	800debe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2204      	movs	r2, #4
 800deb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800deba:	2304      	movs	r3, #4
 800debc:	e014      	b.n	800dee8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d004      	beq.n	800ded4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e009      	b.n	800dee8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2240      	movs	r2, #64	; 0x40
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dee6:	2300      	movs	r3, #0
  
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bc90      	pop	{r4, r7}
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	20000000 	.word	0x20000000
 800def8:	10624dd3 	.word	0x10624dd3

0800defc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800df00:	4904      	ldr	r1, [pc, #16]	; (800df14 <MX_FATFS_Init+0x18>)
 800df02:	4805      	ldr	r0, [pc, #20]	; (800df18 <MX_FATFS_Init+0x1c>)
 800df04:	f003 fb9c 	bl	8011640 <FATFS_LinkDriver>
 800df08:	4603      	mov	r3, r0
 800df0a:	461a      	mov	r2, r3
 800df0c:	4b03      	ldr	r3, [pc, #12]	; (800df1c <MX_FATFS_Init+0x20>)
 800df0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800df10:	bf00      	nop
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20039c50 	.word	0x20039c50
 800df18:	080178d4 	.word	0x080178d4
 800df1c:	20039c4c 	.word	0x20039c4c

0800df20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800df2a:	f000 f896 	bl	800e05a <BSP_SD_IsDetected>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b01      	cmp	r3, #1
 800df32:	d001      	beq.n	800df38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	e012      	b.n	800df5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800df38:	480b      	ldr	r0, [pc, #44]	; (800df68 <BSP_SD_Init+0x48>)
 800df3a:	f7fb ffa5 	bl	8009e88 <HAL_SD_Init>
 800df3e:	4603      	mov	r3, r0
 800df40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d109      	bne.n	800df5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800df48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800df4c:	4806      	ldr	r0, [pc, #24]	; (800df68 <BSP_SD_Init+0x48>)
 800df4e:	f7fc fd4f 	bl	800a9f0 <HAL_SD_ConfigWideBusOperation>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800df5c:	79fb      	ldrb	r3, [r7, #7]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20039a4c 	.word	0x20039a4c

0800df6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	68f9      	ldr	r1, [r7, #12]
 800df82:	4806      	ldr	r0, [pc, #24]	; (800df9c <BSP_SD_ReadBlocks_DMA+0x30>)
 800df84:	f7fc f810 	bl	8009fa8 <HAL_SD_ReadBlocks_DMA>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df92:	7dfb      	ldrb	r3, [r7, #23]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	20039a4c 	.word	0x20039a4c

0800dfa0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	68f9      	ldr	r1, [r7, #12]
 800dfb6:	4806      	ldr	r0, [pc, #24]	; (800dfd0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dfb8:	f7fc f8de 	bl	800a178 <HAL_SD_WriteBlocks_DMA>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	20039a4c 	.word	0x20039a4c

0800dfd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dfd8:	4805      	ldr	r0, [pc, #20]	; (800dff0 <BSP_SD_GetCardState+0x1c>)
 800dfda:	f7fc fd85 	bl	800aae8 <HAL_SD_GetCardState>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b04      	cmp	r3, #4
 800dfe2:	bf14      	ite	ne
 800dfe4:	2301      	movne	r3, #1
 800dfe6:	2300      	moveq	r3, #0
 800dfe8:	b2db      	uxtb	r3, r3
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20039a4c 	.word	0x20039a4c

0800dff4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	4803      	ldr	r0, [pc, #12]	; (800e00c <BSP_SD_GetCardInfo+0x18>)
 800e000:	f7fc fcca 	bl	800a998 <HAL_SD_GetCardInfo>
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	20039a4c 	.word	0x20039a4c

0800e010 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e018:	f000 f818 	bl	800e04c <BSP_SD_AbortCallback>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e02c:	f000 f9a8 	bl	800e380 <BSP_SD_WriteCpltCallback>
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e040:	f000 f9aa 	bl	800e398 <BSP_SD_ReadCpltCallback>
}
 800e044:	bf00      	nop
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0

}
 800e050:	bf00      	nop
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e060:	2301      	movs	r3, #1
 800e062:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e064:	f000 f80c 	bl	800e080 <BSP_PlatformIsDetected>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d101      	bne.n	800e072 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e06e:	2300      	movs	r3, #0
 800e070:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e072:	79fb      	ldrb	r3, [r7, #7]
 800e074:	b2db      	uxtb	r3, r3
}
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
	...

0800e080 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e086:	2301      	movs	r3, #1
 800e088:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e08a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e08e:	4806      	ldr	r0, [pc, #24]	; (800e0a8 <BSP_PlatformIsDetected+0x28>)
 800e090:	f7fa f866 	bl	8008160 <HAL_GPIO_ReadPin>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e09a:	2300      	movs	r3, #0
 800e09c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e09e:	79fb      	ldrb	r3, [r7, #7]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	40020000 	.word	0x40020000

0800e0ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e0b4:	f7f8 fdca 	bl	8006c4c <HAL_GetTick>
 800e0b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e0ba:	e006      	b.n	800e0ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0bc:	f7ff ff8a 	bl	800dfd4 <BSP_SD_GetCardState>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d101      	bne.n	800e0ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	e009      	b.n	800e0de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e0ca:	f7f8 fdbf 	bl	8006c4c <HAL_GetTick>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d8f0      	bhi.n	800e0bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e0da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e0f2:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <SD_CheckStatus+0x38>)
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e0f8:	f7ff ff6c 	bl	800dfd4 <BSP_SD_GetCardState>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d107      	bne.n	800e112 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e102:	4b07      	ldr	r3, [pc, #28]	; (800e120 <SD_CheckStatus+0x38>)
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	f023 0301 	bic.w	r3, r3, #1
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <SD_CheckStatus+0x38>)
 800e110:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e112:	4b03      	ldr	r3, [pc, #12]	; (800e120 <SD_CheckStatus+0x38>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	b2db      	uxtb	r3, r3
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20000009 	.word	0x20000009

0800e124 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e12e:	f7ff fef7 	bl	800df20 <BSP_SD_Init>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d107      	bne.n	800e148 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff ffd4 	bl	800e0e8 <SD_CheckStatus>
 800e140:	4603      	mov	r3, r0
 800e142:	461a      	mov	r2, r3
 800e144:	4b04      	ldr	r3, [pc, #16]	; (800e158 <SD_initialize+0x34>)
 800e146:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e148:	4b03      	ldr	r3, [pc, #12]	; (800e158 <SD_initialize+0x34>)
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	b2db      	uxtb	r3, r3
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20000009 	.word	0x20000009

0800e15c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff ffbd 	bl	800e0e8 <SD_CheckStatus>
 800e16e:	4603      	mov	r3, r0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	4603      	mov	r3, r0
 800e186:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e18c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e190:	f7ff ff8c 	bl	800e0ac <SD_CheckStatusWithTimeout>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	da01      	bge.n	800e19e <SD_read+0x26>
  {
    return res;
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	e03b      	b.n	800e216 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e19e:	683a      	ldr	r2, [r7, #0]
 800e1a0:	6879      	ldr	r1, [r7, #4]
 800e1a2:	68b8      	ldr	r0, [r7, #8]
 800e1a4:	f7ff fee2 	bl	800df6c <BSP_SD_ReadBlocks_DMA>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d132      	bne.n	800e214 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e1ae:	4b1c      	ldr	r3, [pc, #112]	; (800e220 <SD_read+0xa8>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e1b4:	f7f8 fd4a 	bl	8006c4c <HAL_GetTick>
 800e1b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e1ba:	bf00      	nop
 800e1bc:	4b18      	ldr	r3, [pc, #96]	; (800e220 <SD_read+0xa8>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d108      	bne.n	800e1d6 <SD_read+0x5e>
 800e1c4:	f7f8 fd42 	bl	8006c4c <HAL_GetTick>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	f247 522f 	movw	r2, #29999	; 0x752f
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d9f2      	bls.n	800e1bc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e1d6:	4b12      	ldr	r3, [pc, #72]	; (800e220 <SD_read+0xa8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d102      	bne.n	800e1e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	75fb      	strb	r3, [r7, #23]
 800e1e2:	e017      	b.n	800e214 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e1e4:	4b0e      	ldr	r3, [pc, #56]	; (800e220 <SD_read+0xa8>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e1ea:	f7f8 fd2f 	bl	8006c4c <HAL_GetTick>
 800e1ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e1f0:	e007      	b.n	800e202 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e1f2:	f7ff feef 	bl	800dfd4 <BSP_SD_GetCardState>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d102      	bne.n	800e202 <SD_read+0x8a>
          {
            res = RES_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e200:	e008      	b.n	800e214 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e202:	f7f8 fd23 	bl	8006c4c <HAL_GetTick>
 800e206:	4602      	mov	r2, r0
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e210:	4293      	cmp	r3, r2
 800e212:	d9ee      	bls.n	800e1f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e214:	7dfb      	ldrb	r3, [r7, #23]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	200372e8 	.word	0x200372e8

0800e224 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60b9      	str	r1, [r7, #8]
 800e22c:	607a      	str	r2, [r7, #4]
 800e22e:	603b      	str	r3, [r7, #0]
 800e230:	4603      	mov	r3, r0
 800e232:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e238:	4b24      	ldr	r3, [pc, #144]	; (800e2cc <SD_write+0xa8>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e23e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e242:	f7ff ff33 	bl	800e0ac <SD_CheckStatusWithTimeout>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	da01      	bge.n	800e250 <SD_write+0x2c>
  {
    return res;
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
 800e24e:	e038      	b.n	800e2c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	6879      	ldr	r1, [r7, #4]
 800e254:	68b8      	ldr	r0, [r7, #8]
 800e256:	f7ff fea3 	bl	800dfa0 <BSP_SD_WriteBlocks_DMA>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d12f      	bne.n	800e2c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e260:	f7f8 fcf4 	bl	8006c4c <HAL_GetTick>
 800e264:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e266:	bf00      	nop
 800e268:	4b18      	ldr	r3, [pc, #96]	; (800e2cc <SD_write+0xa8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d108      	bne.n	800e282 <SD_write+0x5e>
 800e270:	f7f8 fcec 	bl	8006c4c <HAL_GetTick>
 800e274:	4602      	mov	r2, r0
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e27e:	4293      	cmp	r3, r2
 800e280:	d9f2      	bls.n	800e268 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e282:	4b12      	ldr	r3, [pc, #72]	; (800e2cc <SD_write+0xa8>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	75fb      	strb	r3, [r7, #23]
 800e28e:	e017      	b.n	800e2c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e290:	4b0e      	ldr	r3, [pc, #56]	; (800e2cc <SD_write+0xa8>)
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e296:	f7f8 fcd9 	bl	8006c4c <HAL_GetTick>
 800e29a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e29c:	e007      	b.n	800e2ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e29e:	f7ff fe99 	bl	800dfd4 <BSP_SD_GetCardState>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d102      	bne.n	800e2ae <SD_write+0x8a>
          {
            res = RES_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	75fb      	strb	r3, [r7, #23]
            break;
 800e2ac:	e008      	b.n	800e2c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e2ae:	f7f8 fccd 	bl	8006c4c <HAL_GetTick>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d9ee      	bls.n	800e29e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	200372e4 	.word	0x200372e4

0800e2d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08c      	sub	sp, #48	; 0x30
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	603a      	str	r2, [r7, #0]
 800e2da:	71fb      	strb	r3, [r7, #7]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e2e6:	4b25      	ldr	r3, [pc, #148]	; (800e37c <SD_ioctl+0xac>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <SD_ioctl+0x28>
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e03c      	b.n	800e372 <SD_ioctl+0xa2>

  switch (cmd)
 800e2f8:	79bb      	ldrb	r3, [r7, #6]
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d834      	bhi.n	800e368 <SD_ioctl+0x98>
 800e2fe:	a201      	add	r2, pc, #4	; (adr r2, 800e304 <SD_ioctl+0x34>)
 800e300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e304:	0800e315 	.word	0x0800e315
 800e308:	0800e31d 	.word	0x0800e31d
 800e30c:	0800e335 	.word	0x0800e335
 800e310:	0800e34f 	.word	0x0800e34f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e314:	2300      	movs	r3, #0
 800e316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e31a:	e028      	b.n	800e36e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e31c:	f107 030c 	add.w	r3, r7, #12
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fe67 	bl	800dff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e332:	e01c      	b.n	800e36e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e334:	f107 030c 	add.w	r3, r7, #12
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff fe5b 	bl	800dff4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	b29a      	uxth	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e346:	2300      	movs	r3, #0
 800e348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e34c:	e00f      	b.n	800e36e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e34e:	f107 030c 	add.w	r3, r7, #12
 800e352:	4618      	mov	r0, r3
 800e354:	f7ff fe4e 	bl	800dff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	0a5a      	lsrs	r2, r3, #9
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e360:	2300      	movs	r3, #0
 800e362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e366:	e002      	b.n	800e36e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e368:	2304      	movs	r3, #4
 800e36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e372:	4618      	mov	r0, r3
 800e374:	3730      	adds	r7, #48	; 0x30
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	20000009 	.word	0x20000009

0800e380 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e380:	b480      	push	{r7}
 800e382:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e384:	4b03      	ldr	r3, [pc, #12]	; (800e394 <BSP_SD_WriteCpltCallback+0x14>)
 800e386:	2201      	movs	r2, #1
 800e388:	601a      	str	r2, [r3, #0]
}
 800e38a:	bf00      	nop
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	200372e4 	.word	0x200372e4

0800e398 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e398:	b480      	push	{r7}
 800e39a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e39c:	4b03      	ldr	r3, [pc, #12]	; (800e3ac <BSP_SD_ReadCpltCallback+0x14>)
 800e39e:	2201      	movs	r2, #1
 800e3a0:	601a      	str	r2, [r3, #0]
}
 800e3a2:	bf00      	nop
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	200372e8 	.word	0x200372e8

0800e3b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	4a08      	ldr	r2, [pc, #32]	; (800e3e0 <disk_status+0x30>)
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	79fa      	ldrb	r2, [r7, #7]
 800e3c8:	4905      	ldr	r1, [pc, #20]	; (800e3e0 <disk_status+0x30>)
 800e3ca:	440a      	add	r2, r1
 800e3cc:	7a12      	ldrb	r2, [r2, #8]
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	4798      	blx	r3
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20037314 	.word	0x20037314

0800e3e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	4a0d      	ldr	r2, [pc, #52]	; (800e42c <disk_initialize+0x48>)
 800e3f6:	5cd3      	ldrb	r3, [r2, r3]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d111      	bne.n	800e420 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e3fc:	79fb      	ldrb	r3, [r7, #7]
 800e3fe:	4a0b      	ldr	r2, [pc, #44]	; (800e42c <disk_initialize+0x48>)
 800e400:	2101      	movs	r1, #1
 800e402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	4a09      	ldr	r2, [pc, #36]	; (800e42c <disk_initialize+0x48>)
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	79fa      	ldrb	r2, [r7, #7]
 800e412:	4906      	ldr	r1, [pc, #24]	; (800e42c <disk_initialize+0x48>)
 800e414:	440a      	add	r2, r1
 800e416:	7a12      	ldrb	r2, [r2, #8]
 800e418:	4610      	mov	r0, r2
 800e41a:	4798      	blx	r3
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e420:	7bfb      	ldrb	r3, [r7, #15]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20037314 	.word	0x20037314

0800e430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	607a      	str	r2, [r7, #4]
 800e43a:	603b      	str	r3, [r7, #0]
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4a0a      	ldr	r2, [pc, #40]	; (800e46c <disk_read+0x3c>)
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	689c      	ldr	r4, [r3, #8]
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	4a07      	ldr	r2, [pc, #28]	; (800e46c <disk_read+0x3c>)
 800e450:	4413      	add	r3, r2
 800e452:	7a18      	ldrb	r0, [r3, #8]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	47a0      	blx	r4
 800e45c:	4603      	mov	r3, r0
 800e45e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20037314 	.word	0x20037314

0800e470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b087      	sub	sp, #28
 800e474:	af00      	add	r7, sp, #0
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	4603      	mov	r3, r0
 800e47e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e480:	7bfb      	ldrb	r3, [r7, #15]
 800e482:	4a0a      	ldr	r2, [pc, #40]	; (800e4ac <disk_write+0x3c>)
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	68dc      	ldr	r4, [r3, #12]
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	4a07      	ldr	r2, [pc, #28]	; (800e4ac <disk_write+0x3c>)
 800e490:	4413      	add	r3, r2
 800e492:	7a18      	ldrb	r0, [r3, #8]
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	68b9      	ldr	r1, [r7, #8]
 800e49a:	47a0      	blx	r4
 800e49c:	4603      	mov	r3, r0
 800e49e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	371c      	adds	r7, #28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd90      	pop	{r4, r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20037314 	.word	0x20037314

0800e4b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	603a      	str	r2, [r7, #0]
 800e4ba:	71fb      	strb	r3, [r7, #7]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	4a09      	ldr	r2, [pc, #36]	; (800e4e8 <disk_ioctl+0x38>)
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	691b      	ldr	r3, [r3, #16]
 800e4cc:	79fa      	ldrb	r2, [r7, #7]
 800e4ce:	4906      	ldr	r1, [pc, #24]	; (800e4e8 <disk_ioctl+0x38>)
 800e4d0:	440a      	add	r2, r1
 800e4d2:	7a10      	ldrb	r0, [r2, #8]
 800e4d4:	79b9      	ldrb	r1, [r7, #6]
 800e4d6:	683a      	ldr	r2, [r7, #0]
 800e4d8:	4798      	blx	r3
 800e4da:	4603      	mov	r3, r0
 800e4dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	20037314 	.word	0x20037314

0800e4ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
 800e4fe:	021b      	lsls	r3, r3, #8
 800e500:	b21a      	sxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	b21b      	sxth	r3, r3
 800e508:	4313      	orrs	r3, r2
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e50e:	89fb      	ldrh	r3, [r7, #14]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	3303      	adds	r3, #3
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	021b      	lsls	r3, r3, #8
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	3202      	adds	r2, #2
 800e534:	7812      	ldrb	r2, [r2, #0]
 800e536:	4313      	orrs	r3, r2
 800e538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	3201      	adds	r2, #1
 800e542:	7812      	ldrb	r2, [r2, #0]
 800e544:	4313      	orrs	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	7812      	ldrb	r2, [r2, #0]
 800e550:	4313      	orrs	r3, r2
 800e552:	60fb      	str	r3, [r7, #12]
	return rv;
 800e554:	68fb      	ldr	r3, [r7, #12]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	460b      	mov	r3, r1
 800e56c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	607a      	str	r2, [r7, #4]
 800e574:	887a      	ldrh	r2, [r7, #2]
 800e576:	b2d2      	uxtb	r2, r2
 800e578:	701a      	strb	r2, [r3, #0]
 800e57a:	887b      	ldrh	r3, [r7, #2]
 800e57c:	0a1b      	lsrs	r3, r3, #8
 800e57e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	1c5a      	adds	r2, r3, #1
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	887a      	ldrh	r2, [r7, #2]
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	701a      	strb	r2, [r3, #0]
}
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	b2d2      	uxtb	r2, r2
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	0a1b      	lsrs	r3, r3, #8
 800e5b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	607a      	str	r2, [r7, #4]
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	b2d2      	uxtb	r2, r2
 800e5be:	701a      	strb	r2, [r3, #0]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	0a1b      	lsrs	r3, r3, #8
 800e5c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	1c5a      	adds	r2, r3, #1
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	b2d2      	uxtb	r2, r2
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	0a1b      	lsrs	r3, r3, #8
 800e5d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	1c5a      	adds	r2, r3, #1
 800e5dc:	607a      	str	r2, [r7, #4]
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]
}
 800e5e4:	bf00      	nop
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e5f0:	b480      	push	{r7}
 800e5f2:	b087      	sub	sp, #28
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e60a:	693a      	ldr	r2, [r7, #16]
 800e60c:	1c53      	adds	r3, r2, #1
 800e60e:	613b      	str	r3, [r7, #16]
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	1c59      	adds	r1, r3, #1
 800e614:	6179      	str	r1, [r7, #20]
 800e616:	7812      	ldrb	r2, [r2, #0]
 800e618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	607b      	str	r3, [r7, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1f1      	bne.n	800e60a <mem_cpy+0x1a>
	}
}
 800e626:	bf00      	nop
 800e628:	371c      	adds	r7, #28
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e632:	b480      	push	{r7}
 800e634:	b087      	sub	sp, #28
 800e636:	af00      	add	r7, sp, #0
 800e638:	60f8      	str	r0, [r7, #12]
 800e63a:	60b9      	str	r1, [r7, #8]
 800e63c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	617a      	str	r2, [r7, #20]
 800e648:	68ba      	ldr	r2, [r7, #8]
 800e64a:	b2d2      	uxtb	r2, r2
 800e64c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3b01      	subs	r3, #1
 800e652:	607b      	str	r3, [r7, #4]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f3      	bne.n	800e642 <mem_set+0x10>
}
 800e65a:	bf00      	nop
 800e65c:	371c      	adds	r7, #28
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr

0800e666 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e666:	b480      	push	{r7}
 800e668:	b089      	sub	sp, #36	; 0x24
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	60f8      	str	r0, [r7, #12]
 800e66e:	60b9      	str	r1, [r7, #8]
 800e670:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	1c5a      	adds	r2, r3, #1
 800e682:	61fa      	str	r2, [r7, #28]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	4619      	mov	r1, r3
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	61ba      	str	r2, [r7, #24]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	1acb      	subs	r3, r1, r3
 800e692:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	3b01      	subs	r3, #1
 800e698:	607b      	str	r3, [r7, #4]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <mem_cmp+0x40>
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d0eb      	beq.n	800e67e <mem_cmp+0x18>

	return r;
 800e6a6:	697b      	ldr	r3, [r7, #20]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3724      	adds	r7, #36	; 0x24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e6be:	e002      	b.n	800e6c6 <chk_chr+0x12>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	607b      	str	r3, [r7, #4]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d005      	beq.n	800e6da <chk_chr+0x26>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d1f2      	bne.n	800e6c0 <chk_chr+0xc>
	return *str;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
	...

0800e6ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	60bb      	str	r3, [r7, #8]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	e029      	b.n	800e754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e700:	4a27      	ldr	r2, [pc, #156]	; (800e7a0 <chk_lock+0xb4>)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	011b      	lsls	r3, r3, #4
 800e706:	4413      	add	r3, r2
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d01d      	beq.n	800e74a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e70e:	4a24      	ldr	r2, [pc, #144]	; (800e7a0 <chk_lock+0xb4>)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	011b      	lsls	r3, r3, #4
 800e714:	4413      	add	r3, r2
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d116      	bne.n	800e74e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e720:	4a1f      	ldr	r2, [pc, #124]	; (800e7a0 <chk_lock+0xb4>)
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	011b      	lsls	r3, r3, #4
 800e726:	4413      	add	r3, r2
 800e728:	3304      	adds	r3, #4
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e730:	429a      	cmp	r2, r3
 800e732:	d10c      	bne.n	800e74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e734:	4a1a      	ldr	r2, [pc, #104]	; (800e7a0 <chk_lock+0xb4>)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	011b      	lsls	r3, r3, #4
 800e73a:	4413      	add	r3, r2
 800e73c:	3308      	adds	r3, #8
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e744:	429a      	cmp	r2, r3
 800e746:	d102      	bne.n	800e74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e748:	e007      	b.n	800e75a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e74a:	2301      	movs	r3, #1
 800e74c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3301      	adds	r3, #1
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d9d2      	bls.n	800e700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d109      	bne.n	800e774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d102      	bne.n	800e76c <chk_lock+0x80>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b02      	cmp	r3, #2
 800e76a:	d101      	bne.n	800e770 <chk_lock+0x84>
 800e76c:	2300      	movs	r3, #0
 800e76e:	e010      	b.n	800e792 <chk_lock+0xa6>
 800e770:	2312      	movs	r3, #18
 800e772:	e00e      	b.n	800e792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d108      	bne.n	800e78c <chk_lock+0xa0>
 800e77a:	4a09      	ldr	r2, [pc, #36]	; (800e7a0 <chk_lock+0xb4>)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	011b      	lsls	r3, r3, #4
 800e780:	4413      	add	r3, r2
 800e782:	330c      	adds	r3, #12
 800e784:	881b      	ldrh	r3, [r3, #0]
 800e786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e78a:	d101      	bne.n	800e790 <chk_lock+0xa4>
 800e78c:	2310      	movs	r3, #16
 800e78e:	e000      	b.n	800e792 <chk_lock+0xa6>
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	200372f4 	.word	0x200372f4

0800e7a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	607b      	str	r3, [r7, #4]
 800e7ae:	e002      	b.n	800e7b6 <enq_lock+0x12>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d806      	bhi.n	800e7ca <enq_lock+0x26>
 800e7bc:	4a09      	ldr	r2, [pc, #36]	; (800e7e4 <enq_lock+0x40>)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	011b      	lsls	r3, r3, #4
 800e7c2:	4413      	add	r3, r2
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1f2      	bne.n	800e7b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	bf14      	ite	ne
 800e7d0:	2301      	movne	r3, #1
 800e7d2:	2300      	moveq	r3, #0
 800e7d4:	b2db      	uxtb	r3, r3
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	200372f4 	.word	0x200372f4

0800e7e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	e01f      	b.n	800e838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e7f8:	4a41      	ldr	r2, [pc, #260]	; (800e900 <inc_lock+0x118>)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	011b      	lsls	r3, r3, #4
 800e7fe:	4413      	add	r3, r2
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	d113      	bne.n	800e832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e80a:	4a3d      	ldr	r2, [pc, #244]	; (800e900 <inc_lock+0x118>)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	011b      	lsls	r3, r3, #4
 800e810:	4413      	add	r3, r2
 800e812:	3304      	adds	r3, #4
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d109      	bne.n	800e832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e81e:	4a38      	ldr	r2, [pc, #224]	; (800e900 <inc_lock+0x118>)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4413      	add	r3, r2
 800e826:	3308      	adds	r3, #8
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e82e:	429a      	cmp	r2, r3
 800e830:	d006      	beq.n	800e840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3301      	adds	r3, #1
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d9dc      	bls.n	800e7f8 <inc_lock+0x10>
 800e83e:	e000      	b.n	800e842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d132      	bne.n	800e8ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e848:	2300      	movs	r3, #0
 800e84a:	60fb      	str	r3, [r7, #12]
 800e84c:	e002      	b.n	800e854 <inc_lock+0x6c>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	3301      	adds	r3, #1
 800e852:	60fb      	str	r3, [r7, #12]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d806      	bhi.n	800e868 <inc_lock+0x80>
 800e85a:	4a29      	ldr	r2, [pc, #164]	; (800e900 <inc_lock+0x118>)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	4413      	add	r3, r2
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1f2      	bne.n	800e84e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d101      	bne.n	800e872 <inc_lock+0x8a>
 800e86e:	2300      	movs	r3, #0
 800e870:	e040      	b.n	800e8f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4922      	ldr	r1, [pc, #136]	; (800e900 <inc_lock+0x118>)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	011b      	lsls	r3, r3, #4
 800e87c:	440b      	add	r3, r1
 800e87e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	491e      	ldr	r1, [pc, #120]	; (800e900 <inc_lock+0x118>)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	011b      	lsls	r3, r3, #4
 800e88a:	440b      	add	r3, r1
 800e88c:	3304      	adds	r3, #4
 800e88e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	695a      	ldr	r2, [r3, #20]
 800e894:	491a      	ldr	r1, [pc, #104]	; (800e900 <inc_lock+0x118>)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	011b      	lsls	r3, r3, #4
 800e89a:	440b      	add	r3, r1
 800e89c:	3308      	adds	r3, #8
 800e89e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e8a0:	4a17      	ldr	r2, [pc, #92]	; (800e900 <inc_lock+0x118>)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	011b      	lsls	r3, r3, #4
 800e8a6:	4413      	add	r3, r2
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d009      	beq.n	800e8c8 <inc_lock+0xe0>
 800e8b4:	4a12      	ldr	r2, [pc, #72]	; (800e900 <inc_lock+0x118>)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	011b      	lsls	r3, r3, #4
 800e8ba:	4413      	add	r3, r2
 800e8bc:	330c      	adds	r3, #12
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d001      	beq.n	800e8c8 <inc_lock+0xe0>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	e015      	b.n	800e8f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d108      	bne.n	800e8e0 <inc_lock+0xf8>
 800e8ce:	4a0c      	ldr	r2, [pc, #48]	; (800e900 <inc_lock+0x118>)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	011b      	lsls	r3, r3, #4
 800e8d4:	4413      	add	r3, r2
 800e8d6:	330c      	adds	r3, #12
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	e001      	b.n	800e8e4 <inc_lock+0xfc>
 800e8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8e4:	4906      	ldr	r1, [pc, #24]	; (800e900 <inc_lock+0x118>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	440b      	add	r3, r1
 800e8ec:	330c      	adds	r3, #12
 800e8ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	3301      	adds	r3, #1
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	200372f4 	.word	0x200372f4

0800e904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	3b01      	subs	r3, #1
 800e910:	607b      	str	r3, [r7, #4]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d825      	bhi.n	800e964 <dec_lock+0x60>
		n = Files[i].ctr;
 800e918:	4a17      	ldr	r2, [pc, #92]	; (800e978 <dec_lock+0x74>)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	4413      	add	r3, r2
 800e920:	330c      	adds	r3, #12
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e926:	89fb      	ldrh	r3, [r7, #14]
 800e928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e92c:	d101      	bne.n	800e932 <dec_lock+0x2e>
 800e92e:	2300      	movs	r3, #0
 800e930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e932:	89fb      	ldrh	r3, [r7, #14]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d002      	beq.n	800e93e <dec_lock+0x3a>
 800e938:	89fb      	ldrh	r3, [r7, #14]
 800e93a:	3b01      	subs	r3, #1
 800e93c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e93e:	4a0e      	ldr	r2, [pc, #56]	; (800e978 <dec_lock+0x74>)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	011b      	lsls	r3, r3, #4
 800e944:	4413      	add	r3, r2
 800e946:	330c      	adds	r3, #12
 800e948:	89fa      	ldrh	r2, [r7, #14]
 800e94a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e94c:	89fb      	ldrh	r3, [r7, #14]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d105      	bne.n	800e95e <dec_lock+0x5a>
 800e952:	4a09      	ldr	r2, [pc, #36]	; (800e978 <dec_lock+0x74>)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	011b      	lsls	r3, r3, #4
 800e958:	4413      	add	r3, r2
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	737b      	strb	r3, [r7, #13]
 800e962:	e001      	b.n	800e968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e964:	2302      	movs	r3, #2
 800e966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e968:	7b7b      	ldrb	r3, [r7, #13]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	200372f4 	.word	0x200372f4

0800e97c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e984:	2300      	movs	r3, #0
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	e010      	b.n	800e9ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e98a:	4a0d      	ldr	r2, [pc, #52]	; (800e9c0 <clear_lock+0x44>)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	4413      	add	r3, r2
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	429a      	cmp	r2, r3
 800e998:	d105      	bne.n	800e9a6 <clear_lock+0x2a>
 800e99a:	4a09      	ldr	r2, [pc, #36]	; (800e9c0 <clear_lock+0x44>)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	011b      	lsls	r3, r3, #4
 800e9a0:	4413      	add	r3, r2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	60fb      	str	r3, [r7, #12]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d9eb      	bls.n	800e98a <clear_lock+0xe>
	}
}
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	200372f4 	.word	0x200372f4

0800e9c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	78db      	ldrb	r3, [r3, #3]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d034      	beq.n	800ea42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7858      	ldrb	r0, [r3, #1]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	f7ff fd40 	bl	800e470 <disk_write>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	73fb      	strb	r3, [r7, #15]
 800e9fa:	e022      	b.n	800ea42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	1ad2      	subs	r2, r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d217      	bcs.n	800ea42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	789b      	ldrb	r3, [r3, #2]
 800ea16:	613b      	str	r3, [r7, #16]
 800ea18:	e010      	b.n	800ea3c <sync_window+0x78>
					wsect += fs->fsize;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	4413      	add	r3, r2
 800ea22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7858      	ldrb	r0, [r3, #1]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea2e:	2301      	movs	r3, #1
 800ea30:	697a      	ldr	r2, [r7, #20]
 800ea32:	f7ff fd1d 	bl	800e470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	613b      	str	r3, [r7, #16]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d8eb      	bhi.n	800ea1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d01b      	beq.n	800ea9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7ff ffad 	bl	800e9c4 <sync_window>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ea6e:	7bfb      	ldrb	r3, [r7, #15]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d113      	bne.n	800ea9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	7858      	ldrb	r0, [r3, #1]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea7e:	2301      	movs	r3, #1
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	f7ff fcd5 	bl	800e430 <disk_read>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d004      	beq.n	800ea96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ea9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
	...

0800eaa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff ff87 	bl	800e9c4 <sync_window>
 800eab6:	4603      	mov	r3, r0
 800eab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d159      	bne.n	800eb74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d149      	bne.n	800eb5c <sync_fs+0xb4>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	791b      	ldrb	r3, [r3, #4]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d145      	bne.n	800eb5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	899b      	ldrh	r3, [r3, #12]
 800eada:	461a      	mov	r2, r3
 800eadc:	2100      	movs	r1, #0
 800eade:	f7ff fda8 	bl	800e632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3338      	adds	r3, #56	; 0x38
 800eae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eaea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff fd37 	bl	800e562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	3338      	adds	r3, #56	; 0x38
 800eaf8:	4921      	ldr	r1, [pc, #132]	; (800eb80 <sync_fs+0xd8>)
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fd4c 	bl	800e598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3338      	adds	r3, #56	; 0x38
 800eb04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb08:	491e      	ldr	r1, [pc, #120]	; (800eb84 <sync_fs+0xdc>)
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff fd44 	bl	800e598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3338      	adds	r3, #56	; 0x38
 800eb14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	695b      	ldr	r3, [r3, #20]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7ff fd3a 	bl	800e598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3338      	adds	r3, #56	; 0x38
 800eb28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	4619      	mov	r1, r3
 800eb32:	4610      	mov	r0, r2
 800eb34:	f7ff fd30 	bl	800e598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	7858      	ldrb	r0, [r3, #1]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb50:	2301      	movs	r3, #1
 800eb52:	f7ff fc8d 	bl	800e470 <disk_write>
			fs->fsi_flag = 0;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	785b      	ldrb	r3, [r3, #1]
 800eb60:	2200      	movs	r2, #0
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fca3 	bl	800e4b0 <disk_ioctl>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <sync_fs+0xcc>
 800eb70:	2301      	movs	r3, #1
 800eb72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	41615252 	.word	0x41615252
 800eb84:	61417272 	.word	0x61417272

0800eb88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	3b02      	subs	r3, #2
 800eb96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	69db      	ldr	r3, [r3, #28]
 800eb9c:	3b02      	subs	r3, #2
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d301      	bcc.n	800eba8 <clust2sect+0x20>
 800eba4:	2300      	movs	r3, #0
 800eba6:	e008      	b.n	800ebba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	895b      	ldrh	r3, [r3, #10]
 800ebac:	461a      	mov	r2, r3
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	fb03 f202 	mul.w	r2, r3, r2
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb8:	4413      	add	r3, r2
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr

0800ebc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b086      	sub	sp, #24
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d904      	bls.n	800ebe6 <get_fat+0x20>
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	69db      	ldr	r3, [r3, #28]
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d302      	bcc.n	800ebec <get_fat+0x26>
		val = 1;	/* Internal error */
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	e0b7      	b.n	800ed5c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ebec:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d05a      	beq.n	800ecb0 <get_fat+0xea>
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d07d      	beq.n	800ecfa <get_fat+0x134>
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	f040 80a2 	bne.w	800ed48 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	085b      	lsrs	r3, r3, #1
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	4413      	add	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	899b      	ldrh	r3, [r3, #12]
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec22:	4413      	add	r3, r2
 800ec24:	4619      	mov	r1, r3
 800ec26:	6938      	ldr	r0, [r7, #16]
 800ec28:	f7ff ff10 	bl	800ea4c <move_window>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f040 808d 	bne.w	800ed4e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	1c5a      	adds	r2, r3, #1
 800ec38:	60fa      	str	r2, [r7, #12]
 800ec3a:	693a      	ldr	r2, [r7, #16]
 800ec3c:	8992      	ldrh	r2, [r2, #12]
 800ec3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec42:	fb02 f201 	mul.w	r2, r2, r1
 800ec46:	1a9b      	subs	r3, r3, r2
 800ec48:	693a      	ldr	r2, [r7, #16]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	899b      	ldrh	r3, [r3, #12]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec62:	4413      	add	r3, r2
 800ec64:	4619      	mov	r1, r3
 800ec66:	6938      	ldr	r0, [r7, #16]
 800ec68:	f7ff fef0 	bl	800ea4c <move_window>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d16f      	bne.n	800ed52 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	461a      	mov	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec7e:	fb02 f201 	mul.w	r2, r2, r1
 800ec82:	1a9b      	subs	r3, r3, r2
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	4413      	add	r3, r2
 800ec88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec8c:	021b      	lsls	r3, r3, #8
 800ec8e:	461a      	mov	r2, r3
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d002      	beq.n	800eca6 <get_fat+0xe0>
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	091b      	lsrs	r3, r3, #4
 800eca4:	e002      	b.n	800ecac <get_fat+0xe6>
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecac:	617b      	str	r3, [r7, #20]
			break;
 800ecae:	e055      	b.n	800ed5c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	899b      	ldrh	r3, [r3, #12]
 800ecb8:	085b      	lsrs	r3, r3, #1
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecc4:	4413      	add	r3, r2
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	6938      	ldr	r0, [r7, #16]
 800ecca:	f7ff febf 	bl	800ea4c <move_window>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d140      	bne.n	800ed56 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	005b      	lsls	r3, r3, #1
 800ecde:	693a      	ldr	r2, [r7, #16]
 800ece0:	8992      	ldrh	r2, [r2, #12]
 800ece2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ece6:	fb02 f200 	mul.w	r2, r2, r0
 800ecea:	1a9b      	subs	r3, r3, r2
 800ecec:	440b      	add	r3, r1
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7ff fbfc 	bl	800e4ec <ld_word>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	617b      	str	r3, [r7, #20]
			break;
 800ecf8:	e030      	b.n	800ed5c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	899b      	ldrh	r3, [r3, #12]
 800ed02:	089b      	lsrs	r3, r3, #2
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	4619      	mov	r1, r3
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed0e:	4413      	add	r3, r2
 800ed10:	4619      	mov	r1, r3
 800ed12:	6938      	ldr	r0, [r7, #16]
 800ed14:	f7ff fe9a 	bl	800ea4c <move_window>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d11d      	bne.n	800ed5a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	8992      	ldrh	r2, [r2, #12]
 800ed2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed30:	fb02 f200 	mul.w	r2, r2, r0
 800ed34:	1a9b      	subs	r3, r3, r2
 800ed36:	440b      	add	r3, r1
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff fbef 	bl	800e51c <ld_dword>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ed44:	617b      	str	r3, [r7, #20]
			break;
 800ed46:	e009      	b.n	800ed5c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed48:	2301      	movs	r3, #1
 800ed4a:	617b      	str	r3, [r7, #20]
 800ed4c:	e006      	b.n	800ed5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed4e:	bf00      	nop
 800ed50:	e004      	b.n	800ed5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed52:	bf00      	nop
 800ed54:	e002      	b.n	800ed5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed56:	bf00      	nop
 800ed58:	e000      	b.n	800ed5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed5a:	bf00      	nop
		}
	}

	return val;
 800ed5c:	697b      	ldr	r3, [r7, #20]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3718      	adds	r7, #24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ed66:	b590      	push	{r4, r7, lr}
 800ed68:	b089      	sub	sp, #36	; 0x24
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	60f8      	str	r0, [r7, #12]
 800ed6e:	60b9      	str	r1, [r7, #8]
 800ed70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ed72:	2302      	movs	r3, #2
 800ed74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	f240 8106 	bls.w	800ef8a <put_fat+0x224>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	f080 8100 	bcs.w	800ef8a <put_fat+0x224>
		switch (fs->fs_type) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	f000 8088 	beq.w	800eea4 <put_fat+0x13e>
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	f000 80b0 	beq.w	800eefa <put_fat+0x194>
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	f040 80f5 	bne.w	800ef8a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	61bb      	str	r3, [r7, #24]
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	085b      	lsrs	r3, r3, #1
 800eda8:	69ba      	ldr	r2, [r7, #24]
 800edaa:	4413      	add	r3, r2
 800edac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	899b      	ldrh	r3, [r3, #12]
 800edb6:	4619      	mov	r1, r3
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	fbb3 f3f1 	udiv	r3, r3, r1
 800edbe:	4413      	add	r3, r2
 800edc0:	4619      	mov	r1, r3
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff fe42 	bl	800ea4c <move_window>
 800edc8:	4603      	mov	r3, r0
 800edca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edcc:	7ffb      	ldrb	r3, [r7, #31]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f040 80d4 	bne.w	800ef7c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	1c5a      	adds	r2, r3, #1
 800edde:	61ba      	str	r2, [r7, #24]
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	8992      	ldrh	r2, [r2, #12]
 800ede4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ede8:	fb02 f200 	mul.w	r2, r2, r0
 800edec:	1a9b      	subs	r3, r3, r2
 800edee:	440b      	add	r3, r1
 800edf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	f003 0301 	and.w	r3, r3, #1
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00d      	beq.n	800ee18 <put_fat+0xb2>
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	b25b      	sxtb	r3, r3
 800ee02:	f003 030f 	and.w	r3, r3, #15
 800ee06:	b25a      	sxtb	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	011b      	lsls	r3, r3, #4
 800ee0e:	b25b      	sxtb	r3, r3
 800ee10:	4313      	orrs	r3, r2
 800ee12:	b25b      	sxtb	r3, r3
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	e001      	b.n	800ee1c <put_fat+0xb6>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2201      	movs	r2, #1
 800ee24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	4619      	mov	r1, r3
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee36:	4413      	add	r3, r2
 800ee38:	4619      	mov	r1, r3
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7ff fe06 	bl	800ea4c <move_window>
 800ee40:	4603      	mov	r3, r0
 800ee42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee44:	7ffb      	ldrb	r3, [r7, #31]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f040 809a 	bne.w	800ef80 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	899b      	ldrh	r3, [r3, #12]
 800ee56:	461a      	mov	r2, r3
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee5e:	fb02 f200 	mul.w	r2, r2, r0
 800ee62:	1a9b      	subs	r3, r3, r2
 800ee64:	440b      	add	r3, r1
 800ee66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	f003 0301 	and.w	r3, r3, #1
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d003      	beq.n	800ee7a <put_fat+0x114>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	091b      	lsrs	r3, r3, #4
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	e00e      	b.n	800ee98 <put_fat+0x132>
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	b25b      	sxtb	r3, r3
 800ee80:	f023 030f 	bic.w	r3, r3, #15
 800ee84:	b25a      	sxtb	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	0a1b      	lsrs	r3, r3, #8
 800ee8a:	b25b      	sxtb	r3, r3
 800ee8c:	f003 030f 	and.w	r3, r3, #15
 800ee90:	b25b      	sxtb	r3, r3
 800ee92:	4313      	orrs	r3, r2
 800ee94:	b25b      	sxtb	r3, r3
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	70da      	strb	r2, [r3, #3]
			break;
 800eea2:	e072      	b.n	800ef8a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	899b      	ldrh	r3, [r3, #12]
 800eeac:	085b      	lsrs	r3, r3, #1
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeb8:	4413      	add	r3, r2
 800eeba:	4619      	mov	r1, r3
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f7ff fdc5 	bl	800ea4c <move_window>
 800eec2:	4603      	mov	r3, r0
 800eec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eec6:	7ffb      	ldrb	r3, [r7, #31]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d15b      	bne.n	800ef84 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	005b      	lsls	r3, r3, #1
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	8992      	ldrh	r2, [r2, #12]
 800eeda:	fbb3 f0f2 	udiv	r0, r3, r2
 800eede:	fb02 f200 	mul.w	r2, r2, r0
 800eee2:	1a9b      	subs	r3, r3, r2
 800eee4:	440b      	add	r3, r1
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	b292      	uxth	r2, r2
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff fb38 	bl	800e562 <st_word>
			fs->wflag = 1;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	70da      	strb	r2, [r3, #3]
			break;
 800eef8:	e047      	b.n	800ef8a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	899b      	ldrh	r3, [r3, #12]
 800ef02:	089b      	lsrs	r3, r3, #2
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	4619      	mov	r1, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef0e:	4413      	add	r3, r2
 800ef10:	4619      	mov	r1, r3
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f7ff fd9a 	bl	800ea4c <move_window>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef1c:	7ffb      	ldrb	r3, [r7, #31]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d132      	bne.n	800ef88 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	8992      	ldrh	r2, [r2, #12]
 800ef36:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef3a:	fb02 f200 	mul.w	r2, r2, r0
 800ef3e:	1a9b      	subs	r3, r3, r2
 800ef40:	440b      	add	r3, r1
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7ff faea 	bl	800e51c <ld_dword>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ef4e:	4323      	orrs	r3, r4
 800ef50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	8992      	ldrh	r2, [r2, #12]
 800ef60:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef64:	fb02 f200 	mul.w	r2, r2, r0
 800ef68:	1a9b      	subs	r3, r3, r2
 800ef6a:	440b      	add	r3, r1
 800ef6c:	6879      	ldr	r1, [r7, #4]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fb12 	bl	800e598 <st_dword>
			fs->wflag = 1;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2201      	movs	r2, #1
 800ef78:	70da      	strb	r2, [r3, #3]
			break;
 800ef7a:	e006      	b.n	800ef8a <put_fat+0x224>
			if (res != FR_OK) break;
 800ef7c:	bf00      	nop
 800ef7e:	e004      	b.n	800ef8a <put_fat+0x224>
			if (res != FR_OK) break;
 800ef80:	bf00      	nop
 800ef82:	e002      	b.n	800ef8a <put_fat+0x224>
			if (res != FR_OK) break;
 800ef84:	bf00      	nop
 800ef86:	e000      	b.n	800ef8a <put_fat+0x224>
			if (res != FR_OK) break;
 800ef88:	bf00      	nop
		}
	}
	return res;
 800ef8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3724      	adds	r7, #36	; 0x24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd90      	pop	{r4, r7, pc}

0800ef94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800efa0:	2300      	movs	r3, #0
 800efa2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d904      	bls.n	800efba <remove_chain+0x26>
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d301      	bcc.n	800efbe <remove_chain+0x2a>
 800efba:	2302      	movs	r3, #2
 800efbc:	e04b      	b.n	800f056 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00c      	beq.n	800efde <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800efc4:	f04f 32ff 	mov.w	r2, #4294967295
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	69b8      	ldr	r0, [r7, #24]
 800efcc:	f7ff fecb 	bl	800ed66 <put_fat>
 800efd0:	4603      	mov	r3, r0
 800efd2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800efd4:	7ffb      	ldrb	r3, [r7, #31]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <remove_chain+0x4a>
 800efda:	7ffb      	ldrb	r3, [r7, #31]
 800efdc:	e03b      	b.n	800f056 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800efde:	68b9      	ldr	r1, [r7, #8]
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f7ff fdf0 	bl	800ebc6 <get_fat>
 800efe6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d031      	beq.n	800f052 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <remove_chain+0x64>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e02e      	b.n	800f056 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effe:	d101      	bne.n	800f004 <remove_chain+0x70>
 800f000:	2301      	movs	r3, #1
 800f002:	e028      	b.n	800f056 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f004:	2200      	movs	r2, #0
 800f006:	68b9      	ldr	r1, [r7, #8]
 800f008:	69b8      	ldr	r0, [r7, #24]
 800f00a:	f7ff feac 	bl	800ed66 <put_fat>
 800f00e:	4603      	mov	r3, r0
 800f010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f012:	7ffb      	ldrb	r3, [r7, #31]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <remove_chain+0x88>
 800f018:	7ffb      	ldrb	r3, [r7, #31]
 800f01a:	e01c      	b.n	800f056 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	695a      	ldr	r2, [r3, #20]
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	69db      	ldr	r3, [r3, #28]
 800f024:	3b02      	subs	r3, #2
 800f026:	429a      	cmp	r2, r3
 800f028:	d20b      	bcs.n	800f042 <remove_chain+0xae>
			fs->free_clst++;
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	791b      	ldrb	r3, [r3, #4]
 800f038:	f043 0301 	orr.w	r3, r3, #1
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	69db      	ldr	r3, [r3, #28]
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d3c6      	bcc.n	800efde <remove_chain+0x4a>
 800f050:	e000      	b.n	800f054 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f052:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3720      	adds	r7, #32
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b088      	sub	sp, #32
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
 800f066:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d10d      	bne.n	800f090 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d004      	beq.n	800f08a <create_chain+0x2c>
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	69db      	ldr	r3, [r3, #28]
 800f084:	69ba      	ldr	r2, [r7, #24]
 800f086:	429a      	cmp	r2, r3
 800f088:	d31b      	bcc.n	800f0c2 <create_chain+0x64>
 800f08a:	2301      	movs	r3, #1
 800f08c:	61bb      	str	r3, [r7, #24]
 800f08e:	e018      	b.n	800f0c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f090:	6839      	ldr	r1, [r7, #0]
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f7ff fd97 	bl	800ebc6 <get_fat>
 800f098:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d801      	bhi.n	800f0a4 <create_chain+0x46>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e070      	b.n	800f186 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0aa:	d101      	bne.n	800f0b0 <create_chain+0x52>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	e06a      	b.n	800f186 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	69db      	ldr	r3, [r3, #28]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d201      	bcs.n	800f0be <create_chain+0x60>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	e063      	b.n	800f186 <create_chain+0x128>
		scl = clst;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	69fa      	ldr	r2, [r7, #28]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d307      	bcc.n	800f0e6 <create_chain+0x88>
				ncl = 2;
 800f0d6:	2302      	movs	r3, #2
 800f0d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f0da:	69fa      	ldr	r2, [r7, #28]
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d901      	bls.n	800f0e6 <create_chain+0x88>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e04f      	b.n	800f186 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f0e6:	69f9      	ldr	r1, [r7, #28]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff fd6c 	bl	800ebc6 <get_fat>
 800f0ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00e      	beq.n	800f114 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d003      	beq.n	800f104 <create_chain+0xa6>
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f102:	d101      	bne.n	800f108 <create_chain+0xaa>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	e03e      	b.n	800f186 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f108:	69fa      	ldr	r2, [r7, #28]
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d1da      	bne.n	800f0c6 <create_chain+0x68>
 800f110:	2300      	movs	r3, #0
 800f112:	e038      	b.n	800f186 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f114:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f116:	f04f 32ff 	mov.w	r2, #4294967295
 800f11a:	69f9      	ldr	r1, [r7, #28]
 800f11c:	6938      	ldr	r0, [r7, #16]
 800f11e:	f7ff fe22 	bl	800ed66 <put_fat>
 800f122:	4603      	mov	r3, r0
 800f124:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f126:	7dfb      	ldrb	r3, [r7, #23]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <create_chain+0xe2>
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d006      	beq.n	800f140 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f132:	69fa      	ldr	r2, [r7, #28]
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6938      	ldr	r0, [r7, #16]
 800f138:	f7ff fe15 	bl	800ed66 <put_fat>
 800f13c:	4603      	mov	r3, r0
 800f13e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d116      	bne.n	800f174 <create_chain+0x116>
		fs->last_clst = ncl;
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	69fa      	ldr	r2, [r7, #28]
 800f14a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	695a      	ldr	r2, [r3, #20]
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	3b02      	subs	r3, #2
 800f156:	429a      	cmp	r2, r3
 800f158:	d804      	bhi.n	800f164 <create_chain+0x106>
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	695b      	ldr	r3, [r3, #20]
 800f15e:	1e5a      	subs	r2, r3, #1
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	791b      	ldrb	r3, [r3, #4]
 800f168:	f043 0301 	orr.w	r3, r3, #1
 800f16c:	b2da      	uxtb	r2, r3
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	711a      	strb	r2, [r3, #4]
 800f172:	e007      	b.n	800f184 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f174:	7dfb      	ldrb	r3, [r7, #23]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d102      	bne.n	800f180 <create_chain+0x122>
 800f17a:	f04f 33ff 	mov.w	r3, #4294967295
 800f17e:	e000      	b.n	800f182 <create_chain+0x124>
 800f180:	2301      	movs	r3, #1
 800f182:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f184:	69fb      	ldr	r3, [r7, #28]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3720      	adds	r7, #32
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f18e:	b480      	push	{r7}
 800f190:	b087      	sub	sp, #28
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
 800f196:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a2:	3304      	adds	r3, #4
 800f1a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	899b      	ldrh	r3, [r3, #12]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	8952      	ldrh	r2, [r2, #10]
 800f1b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	1d1a      	adds	r2, r3, #4
 800f1c0:	613a      	str	r2, [r7, #16]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d101      	bne.n	800f1d0 <clmt_clust+0x42>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	e010      	b.n	800f1f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f1d0:	697a      	ldr	r2, [r7, #20]
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d307      	bcc.n	800f1e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	617b      	str	r3, [r7, #20]
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f1e6:	e7e9      	b.n	800f1bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f1e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	4413      	add	r3, r2
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	371c      	adds	r7, #28
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b086      	sub	sp, #24
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f214:	d204      	bcs.n	800f220 <dir_sdi+0x22>
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	f003 031f 	and.w	r3, r3, #31
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d001      	beq.n	800f224 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f220:	2302      	movs	r3, #2
 800f222:	e071      	b.n	800f308 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <dir_sdi+0x46>
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	d902      	bls.n	800f244 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f242:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10c      	bne.n	800f264 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	095b      	lsrs	r3, r3, #5
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	8912      	ldrh	r2, [r2, #8]
 800f252:	4293      	cmp	r3, r2
 800f254:	d301      	bcc.n	800f25a <dir_sdi+0x5c>
 800f256:	2302      	movs	r3, #2
 800f258:	e056      	b.n	800f308 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	61da      	str	r2, [r3, #28]
 800f262:	e02d      	b.n	800f2c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	895b      	ldrh	r3, [r3, #10]
 800f268:	461a      	mov	r2, r3
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	899b      	ldrh	r3, [r3, #12]
 800f26e:	fb03 f302 	mul.w	r3, r3, r2
 800f272:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f274:	e019      	b.n	800f2aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6979      	ldr	r1, [r7, #20]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7ff fca3 	bl	800ebc6 <get_fat>
 800f280:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f288:	d101      	bne.n	800f28e <dir_sdi+0x90>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e03c      	b.n	800f308 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	2b01      	cmp	r3, #1
 800f292:	d904      	bls.n	800f29e <dir_sdi+0xa0>
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	697a      	ldr	r2, [r7, #20]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d301      	bcc.n	800f2a2 <dir_sdi+0xa4>
 800f29e:	2302      	movs	r3, #2
 800f2a0:	e032      	b.n	800f308 <dir_sdi+0x10a>
			ofs -= csz;
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2aa:	683a      	ldr	r2, [r7, #0]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d2e1      	bcs.n	800f276 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f2b2:	6979      	ldr	r1, [r7, #20]
 800f2b4:	6938      	ldr	r0, [r7, #16]
 800f2b6:	f7ff fc67 	bl	800eb88 <clust2sect>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d101      	bne.n	800f2d2 <dir_sdi+0xd4>
 800f2ce:	2302      	movs	r3, #2
 800f2d0:	e01a      	b.n	800f308 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	69da      	ldr	r2, [r3, #28]
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	899b      	ldrh	r3, [r3, #12]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2e2:	441a      	add	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	899b      	ldrh	r3, [r3, #12]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2fa:	fb02 f200 	mul.w	r2, r2, r0
 800f2fe:	1a9b      	subs	r3, r3, r2
 800f300:	18ca      	adds	r2, r1, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3718      	adds	r7, #24
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b086      	sub	sp, #24
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	695b      	ldr	r3, [r3, #20]
 800f324:	3320      	adds	r3, #32
 800f326:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	69db      	ldr	r3, [r3, #28]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <dir_next+0x28>
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f336:	d301      	bcc.n	800f33c <dir_next+0x2c>
 800f338:	2304      	movs	r3, #4
 800f33a:	e0bb      	b.n	800f4b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	899b      	ldrh	r3, [r3, #12]
 800f340:	461a      	mov	r2, r3
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	fbb3 f1f2 	udiv	r1, r3, r2
 800f348:	fb02 f201 	mul.w	r2, r2, r1
 800f34c:	1a9b      	subs	r3, r3, r2
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 809d 	bne.w	800f48e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	69db      	ldr	r3, [r3, #28]
 800f358:	1c5a      	adds	r2, r3, #1
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	699b      	ldr	r3, [r3, #24]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10b      	bne.n	800f37e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	095b      	lsrs	r3, r3, #5
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	8912      	ldrh	r2, [r2, #8]
 800f36e:	4293      	cmp	r3, r2
 800f370:	f0c0 808d 	bcc.w	800f48e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	61da      	str	r2, [r3, #28]
 800f37a:	2304      	movs	r3, #4
 800f37c:	e09a      	b.n	800f4b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	899b      	ldrh	r3, [r3, #12]
 800f382:	461a      	mov	r2, r3
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	fbb3 f3f2 	udiv	r3, r3, r2
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	8952      	ldrh	r2, [r2, #10]
 800f38e:	3a01      	subs	r2, #1
 800f390:	4013      	ands	r3, r2
 800f392:	2b00      	cmp	r3, #0
 800f394:	d17b      	bne.n	800f48e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	699b      	ldr	r3, [r3, #24]
 800f39c:	4619      	mov	r1, r3
 800f39e:	4610      	mov	r0, r2
 800f3a0:	f7ff fc11 	bl	800ebc6 <get_fat>
 800f3a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d801      	bhi.n	800f3b0 <dir_next+0xa0>
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	e081      	b.n	800f4b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b6:	d101      	bne.n	800f3bc <dir_next+0xac>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e07b      	b.n	800f4b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	69db      	ldr	r3, [r3, #28]
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d359      	bcc.n	800f47a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d104      	bne.n	800f3d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	61da      	str	r2, [r3, #28]
 800f3d2:	2304      	movs	r3, #4
 800f3d4:	e06e      	b.n	800f4b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	699b      	ldr	r3, [r3, #24]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4610      	mov	r0, r2
 800f3e0:	f7ff fe3d 	bl	800f05e <create_chain>
 800f3e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <dir_next+0xe0>
 800f3ec:	2307      	movs	r3, #7
 800f3ee:	e061      	b.n	800f4b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d101      	bne.n	800f3fa <dir_next+0xea>
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	e05c      	b.n	800f4b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f400:	d101      	bne.n	800f406 <dir_next+0xf6>
 800f402:	2301      	movs	r3, #1
 800f404:	e056      	b.n	800f4b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f406:	68f8      	ldr	r0, [r7, #12]
 800f408:	f7ff fadc 	bl	800e9c4 <sync_window>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <dir_next+0x106>
 800f412:	2301      	movs	r3, #1
 800f414:	e04e      	b.n	800f4b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	899b      	ldrh	r3, [r3, #12]
 800f420:	461a      	mov	r2, r3
 800f422:	2100      	movs	r1, #0
 800f424:	f7ff f905 	bl	800e632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f428:	2300      	movs	r3, #0
 800f42a:	613b      	str	r3, [r7, #16]
 800f42c:	6979      	ldr	r1, [r7, #20]
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f7ff fbaa 	bl	800eb88 <clust2sect>
 800f434:	4602      	mov	r2, r0
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	635a      	str	r2, [r3, #52]	; 0x34
 800f43a:	e012      	b.n	800f462 <dir_next+0x152>
						fs->wflag = 1;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2201      	movs	r2, #1
 800f440:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f7ff fabe 	bl	800e9c4 <sync_window>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <dir_next+0x142>
 800f44e:	2301      	movs	r3, #1
 800f450:	e030      	b.n	800f4b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	3301      	adds	r3, #1
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	635a      	str	r2, [r3, #52]	; 0x34
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	895b      	ldrh	r3, [r3, #10]
 800f466:	461a      	mov	r2, r3
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d3e6      	bcc.n	800f43c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	1ad2      	subs	r2, r2, r3
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	697a      	ldr	r2, [r7, #20]
 800f47e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f480:	6979      	ldr	r1, [r7, #20]
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff fb80 	bl	800eb88 <clust2sect>
 800f488:	4602      	mov	r2, r0
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	899b      	ldrh	r3, [r3, #12]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f4a6:	fb02 f200 	mul.w	r2, r2, r0
 800f4aa:	1a9b      	subs	r3, r3, r2
 800f4ac:	18ca      	adds	r2, r1, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3718      	adds	r7, #24
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff fe95 	bl	800f1fe <dir_sdi>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d12b      	bne.n	800f536 <dir_alloc+0x7a>
		n = 0;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	69db      	ldr	r3, [r3, #28]
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f7ff faaf 	bl	800ea4c <move_window>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d11d      	bne.n	800f534 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a1b      	ldr	r3, [r3, #32]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2be5      	cmp	r3, #229	; 0xe5
 800f500:	d004      	beq.n	800f50c <dir_alloc+0x50>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a1b      	ldr	r3, [r3, #32]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d107      	bne.n	800f51c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	3301      	adds	r3, #1
 800f510:	613b      	str	r3, [r7, #16]
 800f512:	693a      	ldr	r2, [r7, #16]
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	429a      	cmp	r2, r3
 800f518:	d102      	bne.n	800f520 <dir_alloc+0x64>
 800f51a:	e00c      	b.n	800f536 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f51c:	2300      	movs	r3, #0
 800f51e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f520:	2101      	movs	r1, #1
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff fef4 	bl	800f310 <dir_next>
 800f528:	4603      	mov	r3, r0
 800f52a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0d7      	beq.n	800f4e2 <dir_alloc+0x26>
 800f532:	e000      	b.n	800f536 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f534:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f536:	7dfb      	ldrb	r3, [r7, #23]
 800f538:	2b04      	cmp	r3, #4
 800f53a:	d101      	bne.n	800f540 <dir_alloc+0x84>
 800f53c:	2307      	movs	r3, #7
 800f53e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f540:	7dfb      	ldrb	r3, [r7, #23]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3718      	adds	r7, #24
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b084      	sub	sp, #16
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	331a      	adds	r3, #26
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fe ffc7 	bl	800e4ec <ld_word>
 800f55e:	4603      	mov	r3, r0
 800f560:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b03      	cmp	r3, #3
 800f568:	d109      	bne.n	800f57e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	3314      	adds	r3, #20
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe ffbc 	bl	800e4ec <ld_word>
 800f574:	4603      	mov	r3, r0
 800f576:	041b      	lsls	r3, r3, #16
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f57e:	68fb      	ldr	r3, [r7, #12]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3710      	adds	r7, #16
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	331a      	adds	r3, #26
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	b292      	uxth	r2, r2
 800f59c:	4611      	mov	r1, r2
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fe ffdf 	bl	800e562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d109      	bne.n	800f5c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f103 0214 	add.w	r2, r3, #20
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	0c1b      	lsrs	r3, r3, #16
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	f7fe ffd1 	bl	800e562 <st_word>
	}
}
 800f5c0:	bf00      	nop
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f5d2:	2304      	movs	r3, #4
 800f5d4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f5dc:	e03c      	b.n	800f658 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	69db      	ldr	r3, [r3, #28]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	6938      	ldr	r0, [r7, #16]
 800f5e6:	f7ff fa31 	bl	800ea4c <move_window>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d136      	bne.n	800f662 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d102      	bne.n	800f608 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f602:	2304      	movs	r3, #4
 800f604:	75fb      	strb	r3, [r7, #23]
 800f606:	e031      	b.n	800f66c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6a1b      	ldr	r3, [r3, #32]
 800f60c:	330b      	adds	r3, #11
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f614:	73bb      	strb	r3, [r7, #14]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	7bba      	ldrb	r2, [r7, #14]
 800f61a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f61c:	7bfb      	ldrb	r3, [r7, #15]
 800f61e:	2be5      	cmp	r3, #229	; 0xe5
 800f620:	d011      	beq.n	800f646 <dir_read+0x7e>
 800f622:	7bfb      	ldrb	r3, [r7, #15]
 800f624:	2b2e      	cmp	r3, #46	; 0x2e
 800f626:	d00e      	beq.n	800f646 <dir_read+0x7e>
 800f628:	7bbb      	ldrb	r3, [r7, #14]
 800f62a:	2b0f      	cmp	r3, #15
 800f62c:	d00b      	beq.n	800f646 <dir_read+0x7e>
 800f62e:	7bbb      	ldrb	r3, [r7, #14]
 800f630:	f023 0320 	bic.w	r3, r3, #32
 800f634:	2b08      	cmp	r3, #8
 800f636:	bf0c      	ite	eq
 800f638:	2301      	moveq	r3, #1
 800f63a:	2300      	movne	r3, #0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	461a      	mov	r2, r3
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	4293      	cmp	r3, r2
 800f644:	d00f      	beq.n	800f666 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f646:	2100      	movs	r1, #0
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7ff fe61 	bl	800f310 <dir_next>
 800f64e:	4603      	mov	r3, r0
 800f650:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f652:	7dfb      	ldrb	r3, [r7, #23]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d108      	bne.n	800f66a <dir_read+0xa2>
	while (dp->sect) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	69db      	ldr	r3, [r3, #28]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1be      	bne.n	800f5de <dir_read+0x16>
 800f660:	e004      	b.n	800f66c <dir_read+0xa4>
		if (res != FR_OK) break;
 800f662:	bf00      	nop
 800f664:	e002      	b.n	800f66c <dir_read+0xa4>
				break;
 800f666:	bf00      	nop
 800f668:	e000      	b.n	800f66c <dir_read+0xa4>
		if (res != FR_OK) break;
 800f66a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <dir_read+0xb0>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	61da      	str	r2, [r3, #28]
	return res;
 800f678:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b086      	sub	sp, #24
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f690:	2100      	movs	r1, #0
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7ff fdb3 	bl	800f1fe <dir_sdi>
 800f698:	4603      	mov	r3, r0
 800f69a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <dir_find+0x24>
 800f6a2:	7dfb      	ldrb	r3, [r7, #23]
 800f6a4:	e03e      	b.n	800f724 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	6938      	ldr	r0, [r7, #16]
 800f6ae:	f7ff f9cd 	bl	800ea4c <move_window>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f6b6:	7dfb      	ldrb	r3, [r7, #23]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d12f      	bne.n	800f71c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a1b      	ldr	r3, [r3, #32]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d102      	bne.n	800f6d0 <dir_find+0x4e>
 800f6ca:	2304      	movs	r3, #4
 800f6cc:	75fb      	strb	r3, [r7, #23]
 800f6ce:	e028      	b.n	800f722 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6a1b      	ldr	r3, [r3, #32]
 800f6d4:	330b      	adds	r3, #11
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6dc:	b2da      	uxtb	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6a1b      	ldr	r3, [r3, #32]
 800f6e6:	330b      	adds	r3, #11
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	f003 0308 	and.w	r3, r3, #8
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d10a      	bne.n	800f708 <dir_find+0x86>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a18      	ldr	r0, [r3, #32]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	3324      	adds	r3, #36	; 0x24
 800f6fa:	220b      	movs	r2, #11
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	f7fe ffb2 	bl	800e666 <mem_cmp>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00b      	beq.n	800f720 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f708:	2100      	movs	r1, #0
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7ff fe00 	bl	800f310 <dir_next>
 800f710:	4603      	mov	r3, r0
 800f712:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f714:	7dfb      	ldrb	r3, [r7, #23]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d0c5      	beq.n	800f6a6 <dir_find+0x24>
 800f71a:	e002      	b.n	800f722 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f71c:	bf00      	nop
 800f71e:	e000      	b.n	800f722 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f720:	bf00      	nop

	return res;
 800f722:	7dfb      	ldrb	r3, [r7, #23]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f73a:	2101      	movs	r1, #1
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff febd 	bl	800f4bc <dir_alloc>
 800f742:	4603      	mov	r3, r0
 800f744:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f746:	7bfb      	ldrb	r3, [r7, #15]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d11c      	bne.n	800f786 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	69db      	ldr	r3, [r3, #28]
 800f750:	4619      	mov	r1, r3
 800f752:	68b8      	ldr	r0, [r7, #8]
 800f754:	f7ff f97a 	bl	800ea4c <move_window>
 800f758:	4603      	mov	r3, r0
 800f75a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f75c:	7bfb      	ldrb	r3, [r7, #15]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d111      	bne.n	800f786 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	2220      	movs	r2, #32
 800f768:	2100      	movs	r1, #0
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe ff61 	bl	800e632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a18      	ldr	r0, [r3, #32]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3324      	adds	r3, #36	; 0x24
 800f778:	220b      	movs	r2, #11
 800f77a:	4619      	mov	r1, r3
 800f77c:	f7fe ff38 	bl	800e5f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2201      	movs	r2, #1
 800f784:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f786:	7bfb      	ldrb	r3, [r7, #15]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3710      	adds	r7, #16
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	69db      	ldr	r3, [r3, #28]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f7ff f951 	bl	800ea4c <move_window>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f7ae:	7afb      	ldrb	r3, [r7, #11]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d106      	bne.n	800f7c2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a1b      	ldr	r3, [r3, #32]
 800f7b8:	22e5      	movs	r2, #229	; 0xe5
 800f7ba:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3710      	adds	r7, #16
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b088      	sub	sp, #32
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3324      	adds	r3, #36	; 0x24
 800f7e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f7e2:	220b      	movs	r2, #11
 800f7e4:	2120      	movs	r1, #32
 800f7e6:	68b8      	ldr	r0, [r7, #8]
 800f7e8:	f7fe ff23 	bl	800e632 <mem_set>
	si = i = 0; ni = 8;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	613b      	str	r3, [r7, #16]
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	617b      	str	r3, [r7, #20]
 800f7f4:	2308      	movs	r3, #8
 800f7f6:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b2e      	cmp	r3, #46	; 0x2e
 800f802:	d12f      	bne.n	800f864 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	617a      	str	r2, [r7, #20]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	4413      	add	r3, r2
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800f812:	7ffb      	ldrb	r3, [r7, #31]
 800f814:	2b2e      	cmp	r3, #46	; 0x2e
 800f816:	d10a      	bne.n	800f82e <create_name+0x62>
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	d807      	bhi.n	800f82e <create_name+0x62>
			sfn[i++] = c;
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	613a      	str	r2, [r7, #16]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	4413      	add	r3, r2
 800f828:	7ffa      	ldrb	r2, [r7, #31]
 800f82a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800f82c:	e7ea      	b.n	800f804 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800f82e:	7ffb      	ldrb	r3, [r7, #31]
 800f830:	2b2f      	cmp	r3, #47	; 0x2f
 800f832:	d007      	beq.n	800f844 <create_name+0x78>
 800f834:	7ffb      	ldrb	r3, [r7, #31]
 800f836:	2b5c      	cmp	r3, #92	; 0x5c
 800f838:	d004      	beq.n	800f844 <create_name+0x78>
 800f83a:	7ffb      	ldrb	r3, [r7, #31]
 800f83c:	2b20      	cmp	r3, #32
 800f83e:	d901      	bls.n	800f844 <create_name+0x78>
 800f840:	2306      	movs	r3, #6
 800f842:	e084      	b.n	800f94e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	441a      	add	r2, r3
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800f84e:	7ffb      	ldrb	r3, [r7, #31]
 800f850:	2b20      	cmp	r3, #32
 800f852:	d801      	bhi.n	800f858 <create_name+0x8c>
 800f854:	2224      	movs	r2, #36	; 0x24
 800f856:	e000      	b.n	800f85a <create_name+0x8e>
 800f858:	2220      	movs	r2, #32
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	330b      	adds	r3, #11
 800f85e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	e074      	b.n	800f94e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	617a      	str	r2, [r7, #20]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	4413      	add	r3, r2
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f872:	7ffb      	ldrb	r3, [r7, #31]
 800f874:	2b20      	cmp	r3, #32
 800f876:	d94e      	bls.n	800f916 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f878:	7ffb      	ldrb	r3, [r7, #31]
 800f87a:	2b2f      	cmp	r3, #47	; 0x2f
 800f87c:	d006      	beq.n	800f88c <create_name+0xc0>
 800f87e:	7ffb      	ldrb	r3, [r7, #31]
 800f880:	2b5c      	cmp	r3, #92	; 0x5c
 800f882:	d110      	bne.n	800f8a6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f884:	e002      	b.n	800f88c <create_name+0xc0>
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	3301      	adds	r3, #1
 800f88a:	617b      	str	r3, [r7, #20]
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	4413      	add	r3, r2
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b2f      	cmp	r3, #47	; 0x2f
 800f896:	d0f6      	beq.n	800f886 <create_name+0xba>
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	4413      	add	r3, r2
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f8a2:	d0f0      	beq.n	800f886 <create_name+0xba>
			break;
 800f8a4:	e038      	b.n	800f918 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f8a6:	7ffb      	ldrb	r3, [r7, #31]
 800f8a8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8aa:	d003      	beq.n	800f8b4 <create_name+0xe8>
 800f8ac:	693a      	ldr	r2, [r7, #16]
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d30c      	bcc.n	800f8ce <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	2b0b      	cmp	r3, #11
 800f8b8:	d002      	beq.n	800f8c0 <create_name+0xf4>
 800f8ba:	7ffb      	ldrb	r3, [r7, #31]
 800f8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f8be:	d001      	beq.n	800f8c4 <create_name+0xf8>
 800f8c0:	2306      	movs	r3, #6
 800f8c2:	e044      	b.n	800f94e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800f8c4:	2308      	movs	r3, #8
 800f8c6:	613b      	str	r3, [r7, #16]
 800f8c8:	230b      	movs	r3, #11
 800f8ca:	61bb      	str	r3, [r7, #24]
			continue;
 800f8cc:	e022      	b.n	800f914 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f8ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	da04      	bge.n	800f8e0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f8d6:	7ffb      	ldrb	r3, [r7, #31]
 800f8d8:	3b80      	subs	r3, #128	; 0x80
 800f8da:	4a1f      	ldr	r2, [pc, #124]	; (800f958 <create_name+0x18c>)
 800f8dc:	5cd3      	ldrb	r3, [r2, r3]
 800f8de:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f8e0:	7ffb      	ldrb	r3, [r7, #31]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	481d      	ldr	r0, [pc, #116]	; (800f95c <create_name+0x190>)
 800f8e6:	f7fe fee5 	bl	800e6b4 <chk_chr>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <create_name+0x128>
 800f8f0:	2306      	movs	r3, #6
 800f8f2:	e02c      	b.n	800f94e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f8f4:	7ffb      	ldrb	r3, [r7, #31]
 800f8f6:	2b60      	cmp	r3, #96	; 0x60
 800f8f8:	d905      	bls.n	800f906 <create_name+0x13a>
 800f8fa:	7ffb      	ldrb	r3, [r7, #31]
 800f8fc:	2b7a      	cmp	r3, #122	; 0x7a
 800f8fe:	d802      	bhi.n	800f906 <create_name+0x13a>
 800f900:	7ffb      	ldrb	r3, [r7, #31]
 800f902:	3b20      	subs	r3, #32
 800f904:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	613a      	str	r2, [r7, #16]
 800f90c:	68ba      	ldr	r2, [r7, #8]
 800f90e:	4413      	add	r3, r2
 800f910:	7ffa      	ldrb	r2, [r7, #31]
 800f912:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f914:	e7a6      	b.n	800f864 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f916:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	441a      	add	r2, r3
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <create_name+0x160>
 800f928:	2306      	movs	r3, #6
 800f92a:	e010      	b.n	800f94e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	2be5      	cmp	r3, #229	; 0xe5
 800f932:	d102      	bne.n	800f93a <create_name+0x16e>
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	2205      	movs	r2, #5
 800f938:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f93a:	7ffb      	ldrb	r3, [r7, #31]
 800f93c:	2b20      	cmp	r3, #32
 800f93e:	d801      	bhi.n	800f944 <create_name+0x178>
 800f940:	2204      	movs	r2, #4
 800f942:	e000      	b.n	800f946 <create_name+0x17a>
 800f944:	2200      	movs	r2, #0
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	330b      	adds	r3, #11
 800f94a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f94c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3720      	adds	r7, #32
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	080178e8 	.word	0x080178e8
 800f95c:	08017898 	.word	0x08017898

0800f960 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b086      	sub	sp, #24
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2b2f      	cmp	r3, #47	; 0x2f
 800f97a:	d00b      	beq.n	800f994 <follow_path+0x34>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	2b5c      	cmp	r3, #92	; 0x5c
 800f982:	d007      	beq.n	800f994 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	699a      	ldr	r2, [r3, #24]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	609a      	str	r2, [r3, #8]
 800f98c:	e00d      	b.n	800f9aa <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	3301      	adds	r3, #1
 800f992:	603b      	str	r3, [r7, #0]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b2f      	cmp	r3, #47	; 0x2f
 800f99a:	d0f8      	beq.n	800f98e <follow_path+0x2e>
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f9a2:	d0f4      	beq.n	800f98e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	2b1f      	cmp	r3, #31
 800f9b0:	d80a      	bhi.n	800f9c8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2280      	movs	r2, #128	; 0x80
 800f9b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff fc1e 	bl	800f1fe <dir_sdi>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	75fb      	strb	r3, [r7, #23]
 800f9c6:	e05b      	b.n	800fa80 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9c8:	463b      	mov	r3, r7
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff fefd 	bl	800f7cc <create_name>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d14c      	bne.n	800fa76 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff fe50 	bl	800f682 <dir_find>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f9ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f9ee:	7dfb      	ldrb	r3, [r7, #23]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d01b      	beq.n	800fa2c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f9f4:	7dfb      	ldrb	r3, [r7, #23]
 800f9f6:	2b04      	cmp	r3, #4
 800f9f8:	d13f      	bne.n	800fa7a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f9fa:	7afb      	ldrb	r3, [r7, #11]
 800f9fc:	f003 0320 	and.w	r3, r3, #32
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00b      	beq.n	800fa1c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fa04:	7afb      	ldrb	r3, [r7, #11]
 800fa06:	f003 0304 	and.w	r3, r3, #4
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d031      	beq.n	800fa72 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2280      	movs	r2, #128	; 0x80
 800fa12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fa16:	2300      	movs	r3, #0
 800fa18:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fa1a:	e02e      	b.n	800fa7a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fa1c:	7afb      	ldrb	r3, [r7, #11]
 800fa1e:	f003 0304 	and.w	r3, r3, #4
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d129      	bne.n	800fa7a <follow_path+0x11a>
 800fa26:	2305      	movs	r3, #5
 800fa28:	75fb      	strb	r3, [r7, #23]
				break;
 800fa2a:	e026      	b.n	800fa7a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa2c:	7afb      	ldrb	r3, [r7, #11]
 800fa2e:	f003 0304 	and.w	r3, r3, #4
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d123      	bne.n	800fa7e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	799b      	ldrb	r3, [r3, #6]
 800fa3a:	f003 0310 	and.w	r3, r3, #16
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d102      	bne.n	800fa48 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fa42:	2305      	movs	r3, #5
 800fa44:	75fb      	strb	r3, [r7, #23]
 800fa46:	e01b      	b.n	800fa80 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	695b      	ldr	r3, [r3, #20]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	8992      	ldrh	r2, [r2, #12]
 800fa56:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa5a:	fb02 f200 	mul.w	r2, r2, r0
 800fa5e:	1a9b      	subs	r3, r3, r2
 800fa60:	440b      	add	r3, r1
 800fa62:	4619      	mov	r1, r3
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7ff fd70 	bl	800f54a <ld_clust>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	609a      	str	r2, [r3, #8]
 800fa70:	e7aa      	b.n	800f9c8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fa72:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa74:	e7a8      	b.n	800f9c8 <follow_path+0x68>
			if (res != FR_OK) break;
 800fa76:	bf00      	nop
 800fa78:	e002      	b.n	800fa80 <follow_path+0x120>
				break;
 800fa7a:	bf00      	nop
 800fa7c:	e000      	b.n	800fa80 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa7e:	bf00      	nop
			}
		}
	}

	return res;
 800fa80:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3718      	adds	r7, #24
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa8a:	b480      	push	{r7}
 800fa8c:	b087      	sub	sp, #28
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa92:	f04f 33ff 	mov.w	r3, #4294967295
 800fa96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d031      	beq.n	800fb04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	617b      	str	r3, [r7, #20]
 800faa6:	e002      	b.n	800faae <get_ldnumber+0x24>
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	3301      	adds	r3, #1
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	2b20      	cmp	r3, #32
 800fab4:	d903      	bls.n	800fabe <get_ldnumber+0x34>
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	2b3a      	cmp	r3, #58	; 0x3a
 800fabc:	d1f4      	bne.n	800faa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	2b3a      	cmp	r3, #58	; 0x3a
 800fac4:	d11c      	bne.n	800fb00 <get_ldnumber+0x76>
			tp = *path;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	60fa      	str	r2, [r7, #12]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	3b30      	subs	r3, #48	; 0x30
 800fad6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	2b09      	cmp	r3, #9
 800fadc:	d80e      	bhi.n	800fafc <get_ldnumber+0x72>
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d10a      	bne.n	800fafc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d107      	bne.n	800fafc <get_ldnumber+0x72>
					vol = (int)i;
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	3301      	adds	r3, #1
 800faf4:	617b      	str	r3, [r7, #20]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	697a      	ldr	r2, [r7, #20]
 800fafa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	e002      	b.n	800fb06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb00:	2300      	movs	r3, #0
 800fb02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb04:	693b      	ldr	r3, [r7, #16]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	371c      	adds	r7, #28
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
	...

0800fb14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	70da      	strb	r2, [r3, #3]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fb2c:	6839      	ldr	r1, [r7, #0]
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7fe ff8c 	bl	800ea4c <move_window>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <check_fs+0x2a>
 800fb3a:	2304      	movs	r3, #4
 800fb3c:	e038      	b.n	800fbb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	3338      	adds	r3, #56	; 0x38
 800fb42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fe fcd0 	bl	800e4ec <ld_word>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d001      	beq.n	800fb5c <check_fs+0x48>
 800fb58:	2303      	movs	r3, #3
 800fb5a:	e029      	b.n	800fbb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fb62:	2be9      	cmp	r3, #233	; 0xe9
 800fb64:	d009      	beq.n	800fb7a <check_fs+0x66>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fb6c:	2beb      	cmp	r3, #235	; 0xeb
 800fb6e:	d11e      	bne.n	800fbae <check_fs+0x9a>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fb76:	2b90      	cmp	r3, #144	; 0x90
 800fb78:	d119      	bne.n	800fbae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	3338      	adds	r3, #56	; 0x38
 800fb7e:	3336      	adds	r3, #54	; 0x36
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe fccb 	bl	800e51c <ld_dword>
 800fb86:	4603      	mov	r3, r0
 800fb88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb8c:	4a0a      	ldr	r2, [pc, #40]	; (800fbb8 <check_fs+0xa4>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d101      	bne.n	800fb96 <check_fs+0x82>
 800fb92:	2300      	movs	r3, #0
 800fb94:	e00c      	b.n	800fbb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3338      	adds	r3, #56	; 0x38
 800fb9a:	3352      	adds	r3, #82	; 0x52
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fcbd 	bl	800e51c <ld_dword>
 800fba2:	4602      	mov	r2, r0
 800fba4:	4b05      	ldr	r3, [pc, #20]	; (800fbbc <check_fs+0xa8>)
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d101      	bne.n	800fbae <check_fs+0x9a>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	e000      	b.n	800fbb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fbae:	2302      	movs	r3, #2
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	00544146 	.word	0x00544146
 800fbbc:	33544146 	.word	0x33544146

0800fbc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b096      	sub	sp, #88	; 0x58
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f7ff ff58 	bl	800fa8a <get_ldnumber>
 800fbda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	da01      	bge.n	800fbe6 <find_volume+0x26>
 800fbe2:	230b      	movs	r3, #11
 800fbe4:	e268      	b.n	80100b8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fbe6:	4ab0      	ldr	r2, [pc, #704]	; (800fea8 <find_volume+0x2e8>)
 800fbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d101      	bne.n	800fbfa <find_volume+0x3a>
 800fbf6:	230c      	movs	r3, #12
 800fbf8:	e25e      	b.n	80100b8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fc00:	79fb      	ldrb	r3, [r7, #7]
 800fc02:	f023 0301 	bic.w	r3, r3, #1
 800fc06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d01a      	beq.n	800fc46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc12:	785b      	ldrb	r3, [r3, #1]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fe fbcb 	bl	800e3b0 <disk_status>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fc20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc24:	f003 0301 	and.w	r3, r3, #1
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10c      	bne.n	800fc46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d007      	beq.n	800fc42 <find_volume+0x82>
 800fc32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc36:	f003 0304 	and.w	r3, r3, #4
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fc3e:	230a      	movs	r3, #10
 800fc40:	e23a      	b.n	80100b8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800fc42:	2300      	movs	r3, #0
 800fc44:	e238      	b.n	80100b8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	785b      	ldrb	r3, [r3, #1]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fe fbc3 	bl	800e3e4 <disk_initialize>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fc64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc68:	f003 0301 	and.w	r3, r3, #1
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d001      	beq.n	800fc74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fc70:	2303      	movs	r3, #3
 800fc72:	e221      	b.n	80100b8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d007      	beq.n	800fc8a <find_volume+0xca>
 800fc7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc7e:	f003 0304 	and.w	r3, r3, #4
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d001      	beq.n	800fc8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fc86:	230a      	movs	r3, #10
 800fc88:	e216      	b.n	80100b8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8c:	7858      	ldrb	r0, [r3, #1]
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	330c      	adds	r3, #12
 800fc92:	461a      	mov	r2, r3
 800fc94:	2102      	movs	r1, #2
 800fc96:	f7fe fc0b 	bl	800e4b0 <disk_ioctl>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <find_volume+0xe4>
 800fca0:	2301      	movs	r3, #1
 800fca2:	e209      	b.n	80100b8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca6:	899b      	ldrh	r3, [r3, #12]
 800fca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcac:	d80d      	bhi.n	800fcca <find_volume+0x10a>
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	899b      	ldrh	r3, [r3, #12]
 800fcb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcb6:	d308      	bcc.n	800fcca <find_volume+0x10a>
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcba:	899b      	ldrh	r3, [r3, #12]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc0:	899b      	ldrh	r3, [r3, #12]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	4013      	ands	r3, r2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d001      	beq.n	800fcce <find_volume+0x10e>
 800fcca:	2301      	movs	r3, #1
 800fccc:	e1f4      	b.n	80100b8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fcd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcd6:	f7ff ff1d 	bl	800fb14 <check_fs>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fce4:	2b02      	cmp	r3, #2
 800fce6:	d14b      	bne.n	800fd80 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fce8:	2300      	movs	r3, #0
 800fcea:	643b      	str	r3, [r7, #64]	; 0x40
 800fcec:	e01f      	b.n	800fd2e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fcf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcf6:	011b      	lsls	r3, r3, #4
 800fcf8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fcfc:	4413      	add	r3, r2
 800fcfe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd02:	3304      	adds	r3, #4
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d006      	beq.n	800fd18 <find_volume+0x158>
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0c:	3308      	adds	r3, #8
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fe fc04 	bl	800e51c <ld_dword>
 800fd14:	4602      	mov	r2, r0
 800fd16:	e000      	b.n	800fd1a <find_volume+0x15a>
 800fd18:	2200      	movs	r2, #0
 800fd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fd22:	440b      	add	r3, r1
 800fd24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	643b      	str	r3, [r7, #64]	; 0x40
 800fd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd30:	2b03      	cmp	r3, #3
 800fd32:	d9dc      	bls.n	800fcee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fd34:	2300      	movs	r3, #0
 800fd36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d002      	beq.n	800fd44 <find_volume+0x184>
 800fd3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd40:	3b01      	subs	r3, #1
 800fd42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fd44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fd52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d005      	beq.n	800fd66 <find_volume+0x1a6>
 800fd5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd5e:	f7ff fed9 	bl	800fb14 <check_fs>
 800fd62:	4603      	mov	r3, r0
 800fd64:	e000      	b.n	800fd68 <find_volume+0x1a8>
 800fd66:	2303      	movs	r3, #3
 800fd68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fd6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d905      	bls.n	800fd80 <find_volume+0x1c0>
 800fd74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd76:	3301      	adds	r3, #1
 800fd78:	643b      	str	r3, [r7, #64]	; 0x40
 800fd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7c:	2b03      	cmp	r3, #3
 800fd7e:	d9e1      	bls.n	800fd44 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fd80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd84:	2b04      	cmp	r3, #4
 800fd86:	d101      	bne.n	800fd8c <find_volume+0x1cc>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e195      	b.n	80100b8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fd8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d901      	bls.n	800fd98 <find_volume+0x1d8>
 800fd94:	230d      	movs	r3, #13
 800fd96:	e18f      	b.n	80100b8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9a:	3338      	adds	r3, #56	; 0x38
 800fd9c:	330b      	adds	r3, #11
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe fba4 	bl	800e4ec <ld_word>
 800fda4:	4603      	mov	r3, r0
 800fda6:	461a      	mov	r2, r3
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	899b      	ldrh	r3, [r3, #12]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d001      	beq.n	800fdb4 <find_volume+0x1f4>
 800fdb0:	230d      	movs	r3, #13
 800fdb2:	e181      	b.n	80100b8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb6:	3338      	adds	r3, #56	; 0x38
 800fdb8:	3316      	adds	r3, #22
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fb96 	bl	800e4ec <ld_word>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fdc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <find_volume+0x218>
 800fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdcc:	3338      	adds	r3, #56	; 0x38
 800fdce:	3324      	adds	r3, #36	; 0x24
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe fba3 	bl	800e51c <ld_dword>
 800fdd6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fddc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdea:	789b      	ldrb	r3, [r3, #2]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d005      	beq.n	800fdfc <find_volume+0x23c>
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	789b      	ldrb	r3, [r3, #2]
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	d001      	beq.n	800fdfc <find_volume+0x23c>
 800fdf8:	230d      	movs	r3, #13
 800fdfa:	e15d      	b.n	80100b8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfe:	789b      	ldrb	r3, [r3, #2]
 800fe00:	461a      	mov	r2, r3
 800fe02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe04:	fb02 f303 	mul.w	r3, r2, r3
 800fe08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fe0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe10:	b29a      	uxth	r2, r3
 800fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	895b      	ldrh	r3, [r3, #10]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d008      	beq.n	800fe30 <find_volume+0x270>
 800fe1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe20:	895b      	ldrh	r3, [r3, #10]
 800fe22:	461a      	mov	r2, r3
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	895b      	ldrh	r3, [r3, #10]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d001      	beq.n	800fe34 <find_volume+0x274>
 800fe30:	230d      	movs	r3, #13
 800fe32:	e141      	b.n	80100b8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fe34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe36:	3338      	adds	r3, #56	; 0x38
 800fe38:	3311      	adds	r3, #17
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fe fb56 	bl	800e4ec <ld_word>
 800fe40:	4603      	mov	r3, r0
 800fe42:	461a      	mov	r2, r3
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	891b      	ldrh	r3, [r3, #8]
 800fe4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe4e:	8992      	ldrh	r2, [r2, #12]
 800fe50:	0952      	lsrs	r2, r2, #5
 800fe52:	b292      	uxth	r2, r2
 800fe54:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe58:	fb02 f201 	mul.w	r2, r2, r1
 800fe5c:	1a9b      	subs	r3, r3, r2
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <find_volume+0x2a8>
 800fe64:	230d      	movs	r3, #13
 800fe66:	e127      	b.n	80100b8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	3338      	adds	r3, #56	; 0x38
 800fe6c:	3313      	adds	r3, #19
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe fb3c 	bl	800e4ec <ld_word>
 800fe74:	4603      	mov	r3, r0
 800fe76:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fe78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d106      	bne.n	800fe8c <find_volume+0x2cc>
 800fe7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe80:	3338      	adds	r3, #56	; 0x38
 800fe82:	3320      	adds	r3, #32
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe fb49 	bl	800e51c <ld_dword>
 800fe8a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8e:	3338      	adds	r3, #56	; 0x38
 800fe90:	330e      	adds	r3, #14
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fe fb2a 	bl	800e4ec <ld_word>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fe9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d104      	bne.n	800feac <find_volume+0x2ec>
 800fea2:	230d      	movs	r3, #13
 800fea4:	e108      	b.n	80100b8 <find_volume+0x4f8>
 800fea6:	bf00      	nop
 800fea8:	200372ec 	.word	0x200372ec

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800feac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800feae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feb0:	4413      	add	r3, r2
 800feb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feb4:	8911      	ldrh	r1, [r2, #8]
 800feb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feb8:	8992      	ldrh	r2, [r2, #12]
 800feba:	0952      	lsrs	r2, r2, #5
 800febc:	b292      	uxth	r2, r2
 800febe:	fbb1 f2f2 	udiv	r2, r1, r2
 800fec2:	b292      	uxth	r2, r2
 800fec4:	4413      	add	r3, r2
 800fec6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	429a      	cmp	r2, r3
 800fece:	d201      	bcs.n	800fed4 <find_volume+0x314>
 800fed0:	230d      	movs	r3, #13
 800fed2:	e0f1      	b.n	80100b8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fedc:	8952      	ldrh	r2, [r2, #10]
 800fede:	fbb3 f3f2 	udiv	r3, r3, r2
 800fee2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d101      	bne.n	800feee <find_volume+0x32e>
 800feea:	230d      	movs	r3, #13
 800feec:	e0e4      	b.n	80100b8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800feee:	2303      	movs	r3, #3
 800fef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d802      	bhi.n	800ff04 <find_volume+0x344>
 800fefe:	2302      	movs	r3, #2
 800ff00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ff04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff06:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d802      	bhi.n	800ff14 <find_volume+0x354>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ff14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff16:	1c9a      	adds	r2, r3, #2
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff20:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ff22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff26:	441a      	add	r2, r3
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ff2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	441a      	add	r2, r3
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ff36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	d11e      	bne.n	800ff7c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	3338      	adds	r3, #56	; 0x38
 800ff42:	332a      	adds	r3, #42	; 0x2a
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fe fad1 	bl	800e4ec <ld_word>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <find_volume+0x394>
 800ff50:	230d      	movs	r3, #13
 800ff52:	e0b1      	b.n	80100b8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	891b      	ldrh	r3, [r3, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <find_volume+0x3a0>
 800ff5c:	230d      	movs	r3, #13
 800ff5e:	e0ab      	b.n	80100b8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	3338      	adds	r3, #56	; 0x38
 800ff64:	332c      	adds	r3, #44	; 0x2c
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fe fad8 	bl	800e51c <ld_dword>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff70:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ff72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff74:	69db      	ldr	r3, [r3, #28]
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	647b      	str	r3, [r7, #68]	; 0x44
 800ff7a:	e01f      	b.n	800ffbc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ff7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7e:	891b      	ldrh	r3, [r3, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <find_volume+0x3c8>
 800ff84:	230d      	movs	r3, #13
 800ff86:	e097      	b.n	80100b8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ff88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff8e:	441a      	add	r2, r3
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d103      	bne.n	800ffa4 <find_volume+0x3e4>
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9e:	69db      	ldr	r3, [r3, #28]
 800ffa0:	005b      	lsls	r3, r3, #1
 800ffa2:	e00a      	b.n	800ffba <find_volume+0x3fa>
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa6:	69da      	ldr	r2, [r3, #28]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	4413      	add	r3, r2
 800ffae:	085a      	lsrs	r2, r3, #1
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb2:	69db      	ldr	r3, [r3, #28]
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ffba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbe:	6a1a      	ldr	r2, [r3, #32]
 800ffc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc2:	899b      	ldrh	r3, [r3, #12]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffc8:	440b      	add	r3, r1
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffce:	8989      	ldrh	r1, [r1, #12]
 800ffd0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d201      	bcs.n	800ffdc <find_volume+0x41c>
 800ffd8:	230d      	movs	r3, #13
 800ffda:	e06d      	b.n	80100b8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffde:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe2:	615a      	str	r2, [r3, #20]
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe6:	695a      	ldr	r2, [r3, #20]
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffea:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffee:	2280      	movs	r2, #128	; 0x80
 800fff0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fff6:	2b03      	cmp	r3, #3
 800fff8:	d149      	bne.n	801008e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	3338      	adds	r3, #56	; 0x38
 800fffe:	3330      	adds	r3, #48	; 0x30
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fa73 	bl	800e4ec <ld_word>
 8010006:	4603      	mov	r3, r0
 8010008:	2b01      	cmp	r3, #1
 801000a:	d140      	bne.n	801008e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801000c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801000e:	3301      	adds	r3, #1
 8010010:	4619      	mov	r1, r3
 8010012:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010014:	f7fe fd1a 	bl	800ea4c <move_window>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d137      	bne.n	801008e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801001e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010020:	2200      	movs	r2, #0
 8010022:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	3338      	adds	r3, #56	; 0x38
 8010028:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe fa5d 	bl	800e4ec <ld_word>
 8010032:	4603      	mov	r3, r0
 8010034:	461a      	mov	r2, r3
 8010036:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801003a:	429a      	cmp	r2, r3
 801003c:	d127      	bne.n	801008e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801003e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010040:	3338      	adds	r3, #56	; 0x38
 8010042:	4618      	mov	r0, r3
 8010044:	f7fe fa6a 	bl	800e51c <ld_dword>
 8010048:	4602      	mov	r2, r0
 801004a:	4b1d      	ldr	r3, [pc, #116]	; (80100c0 <find_volume+0x500>)
 801004c:	429a      	cmp	r2, r3
 801004e:	d11e      	bne.n	801008e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	3338      	adds	r3, #56	; 0x38
 8010054:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010058:	4618      	mov	r0, r3
 801005a:	f7fe fa5f 	bl	800e51c <ld_dword>
 801005e:	4602      	mov	r2, r0
 8010060:	4b18      	ldr	r3, [pc, #96]	; (80100c4 <find_volume+0x504>)
 8010062:	429a      	cmp	r2, r3
 8010064:	d113      	bne.n	801008e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	3338      	adds	r3, #56	; 0x38
 801006a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801006e:	4618      	mov	r0, r3
 8010070:	f7fe fa54 	bl	800e51c <ld_dword>
 8010074:	4602      	mov	r2, r0
 8010076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010078:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	3338      	adds	r3, #56	; 0x38
 801007e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fa4a 	bl	800e51c <ld_dword>
 8010088:	4602      	mov	r2, r0
 801008a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801008e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010090:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010094:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010096:	4b0c      	ldr	r3, [pc, #48]	; (80100c8 <find_volume+0x508>)
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	3301      	adds	r3, #1
 801009c:	b29a      	uxth	r2, r3
 801009e:	4b0a      	ldr	r3, [pc, #40]	; (80100c8 <find_volume+0x508>)
 80100a0:	801a      	strh	r2, [r3, #0]
 80100a2:	4b09      	ldr	r3, [pc, #36]	; (80100c8 <find_volume+0x508>)
 80100a4:	881a      	ldrh	r2, [r3, #0]
 80100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	2200      	movs	r2, #0
 80100ae:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80100b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100b2:	f7fe fc63 	bl	800e97c <clear_lock>
#endif
	return FR_OK;
 80100b6:	2300      	movs	r3, #0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3758      	adds	r7, #88	; 0x58
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	41615252 	.word	0x41615252
 80100c4:	61417272 	.word	0x61417272
 80100c8:	200372f0 	.word	0x200372f0

080100cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80100d6:	2309      	movs	r3, #9
 80100d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d01c      	beq.n	801011a <validate+0x4e>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d018      	beq.n	801011a <validate+0x4e>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d013      	beq.n	801011a <validate+0x4e>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	889a      	ldrh	r2, [r3, #4]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	88db      	ldrh	r3, [r3, #6]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d10c      	bne.n	801011a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	785b      	ldrb	r3, [r3, #1]
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe f952 	bl	800e3b0 <disk_status>
 801010c:	4603      	mov	r3, r0
 801010e:	f003 0301 	and.w	r3, r3, #1
 8010112:	2b00      	cmp	r3, #0
 8010114:	d101      	bne.n	801011a <validate+0x4e>
			res = FR_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d102      	bne.n	8010126 <validate+0x5a>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	e000      	b.n	8010128 <validate+0x5c>
 8010126:	2300      	movs	r3, #0
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	6013      	str	r3, [r2, #0]
	return res;
 801012c:	7bfb      	ldrb	r3, [r7, #15]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	4613      	mov	r3, r2
 8010144:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801014a:	f107 0310 	add.w	r3, r7, #16
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff fc9b 	bl	800fa8a <get_ldnumber>
 8010154:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	2b00      	cmp	r3, #0
 801015a:	da01      	bge.n	8010160 <f_mount+0x28>
 801015c:	230b      	movs	r3, #11
 801015e:	e02b      	b.n	80101b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010160:	4a17      	ldr	r2, [pc, #92]	; (80101c0 <f_mount+0x88>)
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010168:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d005      	beq.n	801017c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010170:	69b8      	ldr	r0, [r7, #24]
 8010172:	f7fe fc03 	bl	800e97c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	2200      	movs	r2, #0
 801017a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2200      	movs	r2, #0
 8010186:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	490d      	ldr	r1, [pc, #52]	; (80101c0 <f_mount+0x88>)
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <f_mount+0x66>
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	2b01      	cmp	r3, #1
 801019c:	d001      	beq.n	80101a2 <f_mount+0x6a>
 801019e:	2300      	movs	r3, #0
 80101a0:	e00a      	b.n	80101b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80101a2:	f107 010c 	add.w	r1, r7, #12
 80101a6:	f107 0308 	add.w	r3, r7, #8
 80101aa:	2200      	movs	r2, #0
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff fd07 	bl	800fbc0 <find_volume>
 80101b2:	4603      	mov	r3, r0
 80101b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80101b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3720      	adds	r7, #32
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	200372ec 	.word	0x200372ec

080101c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b098      	sub	sp, #96	; 0x60
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	4613      	mov	r3, r2
 80101d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d101      	bne.n	80101dc <f_open+0x18>
 80101d8:	2309      	movs	r3, #9
 80101da:	e1ba      	b.n	8010552 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80101dc:	79fb      	ldrb	r3, [r7, #7]
 80101de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80101e4:	79fa      	ldrb	r2, [r7, #7]
 80101e6:	f107 0110 	add.w	r1, r7, #16
 80101ea:	f107 0308 	add.w	r3, r7, #8
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff fce6 	bl	800fbc0 <find_volume>
 80101f4:	4603      	mov	r3, r0
 80101f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80101fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f040 819e 	bne.w	8010540 <f_open+0x37c>
		dj.obj.fs = fs;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	f107 0314 	add.w	r3, r7, #20
 801020e:	4611      	mov	r1, r2
 8010210:	4618      	mov	r0, r3
 8010212:	f7ff fba5 	bl	800f960 <follow_path>
 8010216:	4603      	mov	r3, r0
 8010218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801021c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010220:	2b00      	cmp	r3, #0
 8010222:	d11a      	bne.n	801025a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010224:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010228:	b25b      	sxtb	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	da03      	bge.n	8010236 <f_open+0x72>
				res = FR_INVALID_NAME;
 801022e:	2306      	movs	r3, #6
 8010230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010234:	e011      	b.n	801025a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	f023 0301 	bic.w	r3, r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	bf14      	ite	ne
 8010240:	2301      	movne	r3, #1
 8010242:	2300      	moveq	r3, #0
 8010244:	b2db      	uxtb	r3, r3
 8010246:	461a      	mov	r2, r3
 8010248:	f107 0314 	add.w	r3, r7, #20
 801024c:	4611      	mov	r1, r2
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe fa4c 	bl	800e6ec <chk_lock>
 8010254:	4603      	mov	r3, r0
 8010256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	f003 031c 	and.w	r3, r3, #28
 8010260:	2b00      	cmp	r3, #0
 8010262:	d07e      	beq.n	8010362 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010268:	2b00      	cmp	r3, #0
 801026a:	d017      	beq.n	801029c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801026c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010270:	2b04      	cmp	r3, #4
 8010272:	d10e      	bne.n	8010292 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010274:	f7fe fa96 	bl	800e7a4 <enq_lock>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d006      	beq.n	801028c <f_open+0xc8>
 801027e:	f107 0314 	add.w	r3, r7, #20
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff fa52 	bl	800f72c <dir_register>
 8010288:	4603      	mov	r3, r0
 801028a:	e000      	b.n	801028e <f_open+0xca>
 801028c:	2312      	movs	r3, #18
 801028e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010292:	79fb      	ldrb	r3, [r7, #7]
 8010294:	f043 0308 	orr.w	r3, r3, #8
 8010298:	71fb      	strb	r3, [r7, #7]
 801029a:	e010      	b.n	80102be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801029c:	7ebb      	ldrb	r3, [r7, #26]
 801029e:	f003 0311 	and.w	r3, r3, #17
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <f_open+0xea>
					res = FR_DENIED;
 80102a6:	2307      	movs	r3, #7
 80102a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80102ac:	e007      	b.n	80102be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	f003 0304 	and.w	r3, r3, #4
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <f_open+0xfa>
 80102b8:	2308      	movs	r3, #8
 80102ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80102be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d167      	bne.n	8010396 <f_open+0x1d2>
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	f003 0308 	and.w	r3, r3, #8
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d062      	beq.n	8010396 <f_open+0x1d2>
				dw = GET_FATTIME();
 80102d0:	4ba2      	ldr	r3, [pc, #648]	; (801055c <f_open+0x398>)
 80102d2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80102d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d6:	330e      	adds	r3, #14
 80102d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fe f95c 	bl	800e598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80102e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e2:	3316      	adds	r3, #22
 80102e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe f956 	bl	800e598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80102ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ee:	330b      	adds	r3, #11
 80102f0:	2220      	movs	r2, #32
 80102f2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102f8:	4611      	mov	r1, r2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff f925 	bl	800f54a <ld_clust>
 8010300:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010306:	2200      	movs	r2, #0
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff f93d 	bl	800f588 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010310:	331c      	adds	r3, #28
 8010312:	2100      	movs	r1, #0
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe f93f 	bl	800e598 <st_dword>
					fs->wflag = 1;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	2201      	movs	r2, #1
 801031e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010322:	2b00      	cmp	r3, #0
 8010324:	d037      	beq.n	8010396 <f_open+0x1d2>
						dw = fs->winsect;
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801032a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801032c:	f107 0314 	add.w	r3, r7, #20
 8010330:	2200      	movs	r2, #0
 8010332:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010334:	4618      	mov	r0, r3
 8010336:	f7fe fe2d 	bl	800ef94 <remove_chain>
 801033a:	4603      	mov	r3, r0
 801033c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010344:	2b00      	cmp	r3, #0
 8010346:	d126      	bne.n	8010396 <f_open+0x1d2>
							res = move_window(fs, dw);
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801034c:	4618      	mov	r0, r3
 801034e:	f7fe fb7d 	bl	800ea4c <move_window>
 8010352:	4603      	mov	r3, r0
 8010354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801035c:	3a01      	subs	r2, #1
 801035e:	611a      	str	r2, [r3, #16]
 8010360:	e019      	b.n	8010396 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010366:	2b00      	cmp	r3, #0
 8010368:	d115      	bne.n	8010396 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801036a:	7ebb      	ldrb	r3, [r7, #26]
 801036c:	f003 0310 	and.w	r3, r3, #16
 8010370:	2b00      	cmp	r3, #0
 8010372:	d003      	beq.n	801037c <f_open+0x1b8>
					res = FR_NO_FILE;
 8010374:	2304      	movs	r3, #4
 8010376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801037a:	e00c      	b.n	8010396 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801037c:	79fb      	ldrb	r3, [r7, #7]
 801037e:	f003 0302 	and.w	r3, r3, #2
 8010382:	2b00      	cmp	r3, #0
 8010384:	d007      	beq.n	8010396 <f_open+0x1d2>
 8010386:	7ebb      	ldrb	r3, [r7, #26]
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	2b00      	cmp	r3, #0
 801038e:	d002      	beq.n	8010396 <f_open+0x1d2>
						res = FR_DENIED;
 8010390:	2307      	movs	r3, #7
 8010392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801039a:	2b00      	cmp	r3, #0
 801039c:	d128      	bne.n	80103f0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	f003 0308 	and.w	r3, r3, #8
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d003      	beq.n	80103b0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80103a8:	79fb      	ldrb	r3, [r7, #7]
 80103aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ae:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80103b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103be:	79fb      	ldrb	r3, [r7, #7]
 80103c0:	f023 0301 	bic.w	r3, r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	bf14      	ite	ne
 80103c8:	2301      	movne	r3, #1
 80103ca:	2300      	moveq	r3, #0
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	461a      	mov	r2, r3
 80103d0:	f107 0314 	add.w	r3, r7, #20
 80103d4:	4611      	mov	r1, r2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fe fa06 	bl	800e7e8 <inc_lock>
 80103dc:	4602      	mov	r2, r0
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	691b      	ldr	r3, [r3, #16]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d102      	bne.n	80103f0 <f_open+0x22c>
 80103ea:	2302      	movs	r3, #2
 80103ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80103f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 80a3 	bne.w	8010540 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103fe:	4611      	mov	r1, r2
 8010400:	4618      	mov	r0, r3
 8010402:	f7ff f8a2 	bl	800f54a <ld_clust>
 8010406:	4602      	mov	r2, r0
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040e:	331c      	adds	r3, #28
 8010410:	4618      	mov	r0, r3
 8010412:	f7fe f883 	bl	800e51c <ld_dword>
 8010416:	4602      	mov	r2, r0
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2200      	movs	r2, #0
 8010420:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010422:	693a      	ldr	r2, [r7, #16]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	88da      	ldrh	r2, [r3, #6]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	79fa      	ldrb	r2, [r7, #7]
 8010434:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2200      	movs	r2, #0
 801043a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2200      	movs	r2, #0
 8010440:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2200      	movs	r2, #0
 8010446:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	3330      	adds	r3, #48	; 0x30
 801044c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010450:	2100      	movs	r1, #0
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe f8ed 	bl	800e632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010458:	79fb      	ldrb	r3, [r7, #7]
 801045a:	f003 0320 	and.w	r3, r3, #32
 801045e:	2b00      	cmp	r3, #0
 8010460:	d06e      	beq.n	8010540 <f_open+0x37c>
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d06a      	beq.n	8010540 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68da      	ldr	r2, [r3, #12]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	895b      	ldrh	r3, [r3, #10]
 8010476:	461a      	mov	r2, r3
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	899b      	ldrh	r3, [r3, #12]
 801047c:	fb03 f302 	mul.w	r3, r3, r2
 8010480:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	689b      	ldr	r3, [r3, #8]
 8010486:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	657b      	str	r3, [r7, #84]	; 0x54
 801048e:	e016      	b.n	80104be <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fb96 	bl	800ebc6 <get_fat>
 801049a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801049c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d802      	bhi.n	80104a8 <f_open+0x2e4>
 80104a2:	2302      	movs	r3, #2
 80104a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80104a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ae:	d102      	bne.n	80104b6 <f_open+0x2f2>
 80104b0:	2301      	movs	r3, #1
 80104b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80104b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	657b      	str	r3, [r7, #84]	; 0x54
 80104be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d103      	bne.n	80104ce <f_open+0x30a>
 80104c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d8e0      	bhi.n	8010490 <f_open+0x2cc>
				}
				fp->clust = clst;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104d2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80104d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d131      	bne.n	8010540 <f_open+0x37c>
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	899b      	ldrh	r3, [r3, #12]
 80104e0:	461a      	mov	r2, r3
 80104e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80104e8:	fb02 f201 	mul.w	r2, r2, r1
 80104ec:	1a9b      	subs	r3, r3, r2
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d026      	beq.n	8010540 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fe fb46 	bl	800eb88 <clust2sect>
 80104fc:	6478      	str	r0, [r7, #68]	; 0x44
 80104fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010500:	2b00      	cmp	r3, #0
 8010502:	d103      	bne.n	801050c <f_open+0x348>
						res = FR_INT_ERR;
 8010504:	2302      	movs	r3, #2
 8010506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801050a:	e019      	b.n	8010540 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	899b      	ldrh	r3, [r3, #12]
 8010510:	461a      	mov	r2, r3
 8010512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010514:	fbb3 f2f2 	udiv	r2, r3, r2
 8010518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801051a:	441a      	add	r2, r3
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	7858      	ldrb	r0, [r3, #1]
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	6a1a      	ldr	r2, [r3, #32]
 801052e:	2301      	movs	r3, #1
 8010530:	f7fd ff7e 	bl	800e430 <disk_read>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d002      	beq.n	8010540 <f_open+0x37c>
 801053a:	2301      	movs	r3, #1
 801053c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <f_open+0x38a>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801054e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010552:	4618      	mov	r0, r3
 8010554:	3760      	adds	r7, #96	; 0x60
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	274a0000 	.word	0x274a0000

08010560 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b08e      	sub	sp, #56	; 0x38
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f107 0214 	add.w	r2, r7, #20
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff fda3 	bl	80100cc <validate>
 8010586:	4603      	mov	r3, r0
 8010588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801058c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010590:	2b00      	cmp	r3, #0
 8010592:	d107      	bne.n	80105a4 <f_read+0x44>
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	7d5b      	ldrb	r3, [r3, #21]
 8010598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801059c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d002      	beq.n	80105aa <f_read+0x4a>
 80105a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105a8:	e135      	b.n	8010816 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	7d1b      	ldrb	r3, [r3, #20]
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <f_read+0x5a>
 80105b6:	2307      	movs	r3, #7
 80105b8:	e12d      	b.n	8010816 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	68da      	ldr	r2, [r3, #12]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	6a3b      	ldr	r3, [r7, #32]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	f240 811e 	bls.w	801080c <f_read+0x2ac>
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80105d4:	e11a      	b.n	801080c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	699b      	ldr	r3, [r3, #24]
 80105da:	697a      	ldr	r2, [r7, #20]
 80105dc:	8992      	ldrh	r2, [r2, #12]
 80105de:	fbb3 f1f2 	udiv	r1, r3, r2
 80105e2:	fb02 f201 	mul.w	r2, r2, r1
 80105e6:	1a9b      	subs	r3, r3, r2
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	f040 80d5 	bne.w	8010798 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	699b      	ldr	r3, [r3, #24]
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	8992      	ldrh	r2, [r2, #12]
 80105f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	8952      	ldrh	r2, [r2, #10]
 80105fe:	3a01      	subs	r2, #1
 8010600:	4013      	ands	r3, r2
 8010602:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d12f      	bne.n	801066a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d103      	bne.n	801061a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	633b      	str	r3, [r7, #48]	; 0x30
 8010618:	e013      	b.n	8010642 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	699b      	ldr	r3, [r3, #24]
 8010626:	4619      	mov	r1, r3
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	f7fe fdb0 	bl	800f18e <clmt_clust>
 801062e:	6338      	str	r0, [r7, #48]	; 0x30
 8010630:	e007      	b.n	8010642 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	69db      	ldr	r3, [r3, #28]
 8010638:	4619      	mov	r1, r3
 801063a:	4610      	mov	r0, r2
 801063c:	f7fe fac3 	bl	800ebc6 <get_fat>
 8010640:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010644:	2b01      	cmp	r3, #1
 8010646:	d804      	bhi.n	8010652 <f_read+0xf2>
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2202      	movs	r2, #2
 801064c:	755a      	strb	r2, [r3, #21]
 801064e:	2302      	movs	r3, #2
 8010650:	e0e1      	b.n	8010816 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010658:	d104      	bne.n	8010664 <f_read+0x104>
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2201      	movs	r2, #1
 801065e:	755a      	strb	r2, [r3, #21]
 8010660:	2301      	movs	r3, #1
 8010662:	e0d8      	b.n	8010816 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010668:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	69db      	ldr	r3, [r3, #28]
 8010670:	4619      	mov	r1, r3
 8010672:	4610      	mov	r0, r2
 8010674:	f7fe fa88 	bl	800eb88 <clust2sect>
 8010678:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d104      	bne.n	801068a <f_read+0x12a>
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2202      	movs	r2, #2
 8010684:	755a      	strb	r2, [r3, #21]
 8010686:	2302      	movs	r3, #2
 8010688:	e0c5      	b.n	8010816 <f_read+0x2b6>
			sect += csect;
 801068a:	69ba      	ldr	r2, [r7, #24]
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	4413      	add	r3, r2
 8010690:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	899b      	ldrh	r3, [r3, #12]
 8010696:	461a      	mov	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	fbb3 f3f2 	udiv	r3, r3, r2
 801069e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d041      	beq.n	801072a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80106a6:	69fa      	ldr	r2, [r7, #28]
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	4413      	add	r3, r2
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	8952      	ldrh	r2, [r2, #10]
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d905      	bls.n	80106c0 <f_read+0x160>
					cc = fs->csize - csect;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	895b      	ldrh	r3, [r3, #10]
 80106b8:	461a      	mov	r2, r3
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	1ad3      	subs	r3, r2, r3
 80106be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	7858      	ldrb	r0, [r3, #1]
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	69ba      	ldr	r2, [r7, #24]
 80106c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106ca:	f7fd feb1 	bl	800e430 <disk_read>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d004      	beq.n	80106de <f_read+0x17e>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2201      	movs	r2, #1
 80106d8:	755a      	strb	r2, [r3, #21]
 80106da:	2301      	movs	r3, #1
 80106dc:	e09b      	b.n	8010816 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	7d1b      	ldrb	r3, [r3, #20]
 80106e2:	b25b      	sxtb	r3, r3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	da18      	bge.n	801071a <f_read+0x1ba>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6a1a      	ldr	r2, [r3, #32]
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d911      	bls.n	801071a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6a1a      	ldr	r2, [r3, #32]
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	8992      	ldrh	r2, [r2, #12]
 8010702:	fb02 f303 	mul.w	r3, r2, r3
 8010706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010708:	18d0      	adds	r0, r2, r3
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	899b      	ldrh	r3, [r3, #12]
 8010714:	461a      	mov	r2, r3
 8010716:	f7fd ff6b 	bl	800e5f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	461a      	mov	r2, r3
 8010720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010722:	fb02 f303 	mul.w	r3, r2, r3
 8010726:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010728:	e05c      	b.n	80107e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	69ba      	ldr	r2, [r7, #24]
 8010730:	429a      	cmp	r2, r3
 8010732:	d02e      	beq.n	8010792 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	7d1b      	ldrb	r3, [r3, #20]
 8010738:	b25b      	sxtb	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	da18      	bge.n	8010770 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	7858      	ldrb	r0, [r3, #1]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6a1a      	ldr	r2, [r3, #32]
 801074c:	2301      	movs	r3, #1
 801074e:	f7fd fe8f 	bl	800e470 <disk_write>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <f_read+0x202>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2201      	movs	r2, #1
 801075c:	755a      	strb	r2, [r3, #21]
 801075e:	2301      	movs	r3, #1
 8010760:	e059      	b.n	8010816 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	7d1b      	ldrb	r3, [r3, #20]
 8010766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801076a:	b2da      	uxtb	r2, r3
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	7858      	ldrb	r0, [r3, #1]
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801077a:	2301      	movs	r3, #1
 801077c:	69ba      	ldr	r2, [r7, #24]
 801077e:	f7fd fe57 	bl	800e430 <disk_read>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d004      	beq.n	8010792 <f_read+0x232>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2201      	movs	r2, #1
 801078c:	755a      	strb	r2, [r3, #21]
 801078e:	2301      	movs	r3, #1
 8010790:	e041      	b.n	8010816 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	69ba      	ldr	r2, [r7, #24]
 8010796:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	899b      	ldrh	r3, [r3, #12]
 801079c:	4618      	mov	r0, r3
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	699b      	ldr	r3, [r3, #24]
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	8992      	ldrh	r2, [r2, #12]
 80107a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80107aa:	fb02 f201 	mul.w	r2, r2, r1
 80107ae:	1a9b      	subs	r3, r3, r2
 80107b0:	1ac3      	subs	r3, r0, r3
 80107b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80107b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d901      	bls.n	80107c0 <f_read+0x260>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	699b      	ldr	r3, [r3, #24]
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	8992      	ldrh	r2, [r2, #12]
 80107ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80107d2:	fb02 f200 	mul.w	r2, r2, r0
 80107d6:	1a9b      	subs	r3, r3, r2
 80107d8:	440b      	add	r3, r1
 80107da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107dc:	4619      	mov	r1, r3
 80107de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107e0:	f7fd ff06 	bl	800e5f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80107e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e8:	4413      	add	r3, r2
 80107ea:	627b      	str	r3, [r7, #36]	; 0x24
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	699a      	ldr	r2, [r3, #24]
 80107f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f2:	441a      	add	r2, r3
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	619a      	str	r2, [r3, #24]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fe:	441a      	add	r2, r3
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	601a      	str	r2, [r3, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	f47f aee1 	bne.w	80105d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3738      	adds	r7, #56	; 0x38
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b08c      	sub	sp, #48	; 0x30
 8010822:	af00      	add	r7, sp, #0
 8010824:	60f8      	str	r0, [r7, #12]
 8010826:	60b9      	str	r1, [r7, #8]
 8010828:	607a      	str	r2, [r7, #4]
 801082a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2200      	movs	r2, #0
 8010834:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f107 0210 	add.w	r2, r7, #16
 801083c:	4611      	mov	r1, r2
 801083e:	4618      	mov	r0, r3
 8010840:	f7ff fc44 	bl	80100cc <validate>
 8010844:	4603      	mov	r3, r0
 8010846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801084a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801084e:	2b00      	cmp	r3, #0
 8010850:	d107      	bne.n	8010862 <f_write+0x44>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	7d5b      	ldrb	r3, [r3, #21]
 8010856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801085a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801085e:	2b00      	cmp	r3, #0
 8010860:	d002      	beq.n	8010868 <f_write+0x4a>
 8010862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010866:	e16a      	b.n	8010b3e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	7d1b      	ldrb	r3, [r3, #20]
 801086c:	f003 0302 	and.w	r3, r3, #2
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <f_write+0x5a>
 8010874:	2307      	movs	r3, #7
 8010876:	e162      	b.n	8010b3e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	699a      	ldr	r2, [r3, #24]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	441a      	add	r2, r3
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	699b      	ldr	r3, [r3, #24]
 8010884:	429a      	cmp	r2, r3
 8010886:	f080 814c 	bcs.w	8010b22 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	699b      	ldr	r3, [r3, #24]
 801088e:	43db      	mvns	r3, r3
 8010890:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010892:	e146      	b.n	8010b22 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	699b      	ldr	r3, [r3, #24]
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	8992      	ldrh	r2, [r2, #12]
 801089c:	fbb3 f1f2 	udiv	r1, r3, r2
 80108a0:	fb02 f201 	mul.w	r2, r2, r1
 80108a4:	1a9b      	subs	r3, r3, r2
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f040 80f1 	bne.w	8010a8e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	699b      	ldr	r3, [r3, #24]
 80108b0:	693a      	ldr	r2, [r7, #16]
 80108b2:	8992      	ldrh	r2, [r2, #12]
 80108b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80108b8:	693a      	ldr	r2, [r7, #16]
 80108ba:	8952      	ldrh	r2, [r2, #10]
 80108bc:	3a01      	subs	r2, #1
 80108be:	4013      	ands	r3, r2
 80108c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d143      	bne.n	8010950 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d10c      	bne.n	80108ea <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80108d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d11a      	bne.n	8010912 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2100      	movs	r1, #0
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fbbc 	bl	800f05e <create_chain>
 80108e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80108e8:	e013      	b.n	8010912 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d007      	beq.n	8010902 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	699b      	ldr	r3, [r3, #24]
 80108f6:	4619      	mov	r1, r3
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f7fe fc48 	bl	800f18e <clmt_clust>
 80108fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8010900:	e007      	b.n	8010912 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	69db      	ldr	r3, [r3, #28]
 8010908:	4619      	mov	r1, r3
 801090a:	4610      	mov	r0, r2
 801090c:	f7fe fba7 	bl	800f05e <create_chain>
 8010910:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8109 	beq.w	8010b2c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091c:	2b01      	cmp	r3, #1
 801091e:	d104      	bne.n	801092a <f_write+0x10c>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2202      	movs	r2, #2
 8010924:	755a      	strb	r2, [r3, #21]
 8010926:	2302      	movs	r3, #2
 8010928:	e109      	b.n	8010b3e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010930:	d104      	bne.n	801093c <f_write+0x11e>
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2201      	movs	r2, #1
 8010936:	755a      	strb	r2, [r3, #21]
 8010938:	2301      	movs	r3, #1
 801093a:	e100      	b.n	8010b3e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010940:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	689b      	ldr	r3, [r3, #8]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d102      	bne.n	8010950 <f_write+0x132>
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	7d1b      	ldrb	r3, [r3, #20]
 8010954:	b25b      	sxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	da18      	bge.n	801098c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	7858      	ldrb	r0, [r3, #1]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6a1a      	ldr	r2, [r3, #32]
 8010968:	2301      	movs	r3, #1
 801096a:	f7fd fd81 	bl	800e470 <disk_write>
 801096e:	4603      	mov	r3, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	d004      	beq.n	801097e <f_write+0x160>
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2201      	movs	r2, #1
 8010978:	755a      	strb	r2, [r3, #21]
 801097a:	2301      	movs	r3, #1
 801097c:	e0df      	b.n	8010b3e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	7d1b      	ldrb	r3, [r3, #20]
 8010982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010986:	b2da      	uxtb	r2, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801098c:	693a      	ldr	r2, [r7, #16]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	69db      	ldr	r3, [r3, #28]
 8010992:	4619      	mov	r1, r3
 8010994:	4610      	mov	r0, r2
 8010996:	f7fe f8f7 	bl	800eb88 <clust2sect>
 801099a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d104      	bne.n	80109ac <f_write+0x18e>
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2202      	movs	r2, #2
 80109a6:	755a      	strb	r2, [r3, #21]
 80109a8:	2302      	movs	r3, #2
 80109aa:	e0c8      	b.n	8010b3e <f_write+0x320>
			sect += csect;
 80109ac:	697a      	ldr	r2, [r7, #20]
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	4413      	add	r3, r2
 80109b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	899b      	ldrh	r3, [r3, #12]
 80109b8:	461a      	mov	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80109c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d043      	beq.n	8010a50 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80109c8:	69ba      	ldr	r2, [r7, #24]
 80109ca:	6a3b      	ldr	r3, [r7, #32]
 80109cc:	4413      	add	r3, r2
 80109ce:	693a      	ldr	r2, [r7, #16]
 80109d0:	8952      	ldrh	r2, [r2, #10]
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d905      	bls.n	80109e2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	895b      	ldrh	r3, [r3, #10]
 80109da:	461a      	mov	r2, r3
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	1ad3      	subs	r3, r2, r3
 80109e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	7858      	ldrb	r0, [r3, #1]
 80109e6:	6a3b      	ldr	r3, [r7, #32]
 80109e8:	697a      	ldr	r2, [r7, #20]
 80109ea:	69f9      	ldr	r1, [r7, #28]
 80109ec:	f7fd fd40 	bl	800e470 <disk_write>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d004      	beq.n	8010a00 <f_write+0x1e2>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2201      	movs	r2, #1
 80109fa:	755a      	strb	r2, [r3, #21]
 80109fc:	2301      	movs	r3, #1
 80109fe:	e09e      	b.n	8010b3e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	6a1a      	ldr	r2, [r3, #32]
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	6a3a      	ldr	r2, [r7, #32]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d918      	bls.n	8010a40 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6a1a      	ldr	r2, [r3, #32]
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	8992      	ldrh	r2, [r2, #12]
 8010a20:	fb02 f303 	mul.w	r3, r2, r3
 8010a24:	69fa      	ldr	r2, [r7, #28]
 8010a26:	18d1      	adds	r1, r2, r3
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	899b      	ldrh	r3, [r3, #12]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	f7fd fddf 	bl	800e5f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	7d1b      	ldrb	r3, [r3, #20]
 8010a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	899b      	ldrh	r3, [r3, #12]
 8010a44:	461a      	mov	r2, r3
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	fb02 f303 	mul.w	r3, r2, r3
 8010a4c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010a4e:	e04b      	b.n	8010ae8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6a1b      	ldr	r3, [r3, #32]
 8010a54:	697a      	ldr	r2, [r7, #20]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d016      	beq.n	8010a88 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	699a      	ldr	r2, [r3, #24]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d210      	bcs.n	8010a88 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	7858      	ldrb	r0, [r3, #1]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a70:	2301      	movs	r3, #1
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	f7fd fcdc 	bl	800e430 <disk_read>
 8010a78:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d004      	beq.n	8010a88 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2201      	movs	r2, #1
 8010a82:	755a      	strb	r2, [r3, #21]
 8010a84:	2301      	movs	r3, #1
 8010a86:	e05a      	b.n	8010b3e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	697a      	ldr	r2, [r7, #20]
 8010a8c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	899b      	ldrh	r3, [r3, #12]
 8010a92:	4618      	mov	r0, r3
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	699b      	ldr	r3, [r3, #24]
 8010a98:	693a      	ldr	r2, [r7, #16]
 8010a9a:	8992      	ldrh	r2, [r2, #12]
 8010a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010aa0:	fb02 f201 	mul.w	r2, r2, r1
 8010aa4:	1a9b      	subs	r3, r3, r2
 8010aa6:	1ac3      	subs	r3, r0, r3
 8010aa8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d901      	bls.n	8010ab6 <f_write+0x298>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	693a      	ldr	r2, [r7, #16]
 8010ac2:	8992      	ldrh	r2, [r2, #12]
 8010ac4:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ac8:	fb02 f200 	mul.w	r2, r2, r0
 8010acc:	1a9b      	subs	r3, r3, r2
 8010ace:	440b      	add	r3, r1
 8010ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ad2:	69f9      	ldr	r1, [r7, #28]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fd fd8b 	bl	800e5f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	7d1b      	ldrb	r3, [r3, #20]
 8010ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010ae8:	69fa      	ldr	r2, [r7, #28]
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	4413      	add	r3, r2
 8010aee:	61fb      	str	r3, [r7, #28]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	699a      	ldr	r2, [r3, #24]
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af6:	441a      	add	r2, r3
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	619a      	str	r2, [r3, #24]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	68da      	ldr	r2, [r3, #12]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	699b      	ldr	r3, [r3, #24]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	bf38      	it	cc
 8010b08:	461a      	movcc	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	60da      	str	r2, [r3, #12]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	681a      	ldr	r2, [r3, #0]
 8010b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b14:	441a      	add	r2, r3
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	601a      	str	r2, [r3, #0]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1e:	1ad3      	subs	r3, r2, r3
 8010b20:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f47f aeb5 	bne.w	8010894 <f_write+0x76>
 8010b2a:	e000      	b.n	8010b2e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b2c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	7d1b      	ldrb	r3, [r3, #20]
 8010b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3730      	adds	r7, #48	; 0x30
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
	...

08010b48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b086      	sub	sp, #24
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f107 0208 	add.w	r2, r7, #8
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fab7 	bl	80100cc <validate>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b62:	7dfb      	ldrb	r3, [r7, #23]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d167      	bne.n	8010c38 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7d1b      	ldrb	r3, [r3, #20]
 8010b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d061      	beq.n	8010c38 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	7d1b      	ldrb	r3, [r3, #20]
 8010b78:	b25b      	sxtb	r3, r3
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	da15      	bge.n	8010baa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	7858      	ldrb	r0, [r3, #1]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a1a      	ldr	r2, [r3, #32]
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	f7fd fc6f 	bl	800e470 <disk_write>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <f_sync+0x54>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e04e      	b.n	8010c3a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010baa:	4b26      	ldr	r3, [pc, #152]	; (8010c44 <f_sync+0xfc>)
 8010bac:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	4610      	mov	r0, r2
 8010bb8:	f7fd ff48 	bl	800ea4c <move_window>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010bc0:	7dfb      	ldrb	r3, [r7, #23]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d138      	bne.n	8010c38 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	330b      	adds	r3, #11
 8010bd0:	781a      	ldrb	r2, [r3, #0]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	330b      	adds	r3, #11
 8010bd6:	f042 0220 	orr.w	r2, r2, #32
 8010bda:	b2d2      	uxtb	r2, r2
 8010bdc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6818      	ldr	r0, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	689b      	ldr	r3, [r3, #8]
 8010be6:	461a      	mov	r2, r3
 8010be8:	68f9      	ldr	r1, [r7, #12]
 8010bea:	f7fe fccd 	bl	800f588 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f103 021c 	add.w	r2, r3, #28
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	f7fd fccc 	bl	800e598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3316      	adds	r3, #22
 8010c04:	6939      	ldr	r1, [r7, #16]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fd fcc6 	bl	800e598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3312      	adds	r3, #18
 8010c10:	2100      	movs	r1, #0
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fd fca5 	bl	800e562 <st_word>
					fs->wflag = 1;
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fd ff41 	bl	800eaa8 <sync_fs>
 8010c26:	4603      	mov	r3, r0
 8010c28:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	7d1b      	ldrb	r3, [r3, #20]
 8010c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	274a0000 	.word	0x274a0000

08010c48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f7ff ff79 	bl	8010b48 <f_sync>
 8010c56:	4603      	mov	r3, r0
 8010c58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010c5a:	7bfb      	ldrb	r3, [r7, #15]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d118      	bne.n	8010c92 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f107 0208 	add.w	r2, r7, #8
 8010c66:	4611      	mov	r1, r2
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7ff fa2f 	bl	80100cc <validate>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010c72:	7bfb      	ldrb	r3, [r7, #15]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d10c      	bne.n	8010c92 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	691b      	ldr	r3, [r3, #16]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7fd fe41 	bl	800e904 <dec_lock>
 8010c82:	4603      	mov	r3, r0
 8010c84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b091      	sub	sp, #68	; 0x44
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010ca4:	f107 0108 	add.w	r1, r7, #8
 8010ca8:	1d3b      	adds	r3, r7, #4
 8010caa:	2200      	movs	r2, #0
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fe ff87 	bl	800fbc0 <find_volume>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d131      	bne.n	8010d24 <f_chdir+0x88>
		dj.obj.fs = fs;
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	f107 030c 	add.w	r3, r7, #12
 8010cca:	4611      	mov	r1, r2
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fe fe47 	bl	800f960 <follow_path>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8010cd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d11a      	bne.n	8010d16 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010ce0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010ce4:	b25b      	sxtb	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	da03      	bge.n	8010cf2 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	697a      	ldr	r2, [r7, #20]
 8010cee:	619a      	str	r2, [r3, #24]
 8010cf0:	e011      	b.n	8010d16 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010cf2:	7cbb      	ldrb	r3, [r7, #18]
 8010cf4:	f003 0310 	and.w	r3, r3, #16
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d009      	beq.n	8010d10 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d00:	68bc      	ldr	r4, [r7, #8]
 8010d02:	4611      	mov	r1, r2
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe fc20 	bl	800f54a <ld_clust>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	61a3      	str	r3, [r4, #24]
 8010d0e:	e002      	b.n	8010d16 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010d10:	2305      	movs	r3, #5
 8010d12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010d16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d1a:	2b04      	cmp	r3, #4
 8010d1c:	d102      	bne.n	8010d24 <f_chdir+0x88>
 8010d1e:	2305      	movs	r3, #5
 8010d20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8010d24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3744      	adds	r7, #68	; 0x44
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd90      	pop	{r4, r7, pc}

08010d30 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b090      	sub	sp, #64	; 0x40
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f107 0208 	add.w	r2, r7, #8
 8010d40:	4611      	mov	r1, r2
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7ff f9c2 	bl	80100cc <validate>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010d4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d103      	bne.n	8010d5e <f_lseek+0x2e>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	7d5b      	ldrb	r3, [r3, #21]
 8010d5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010d5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d002      	beq.n	8010d6c <f_lseek+0x3c>
 8010d66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d6a:	e201      	b.n	8011170 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	f000 80d9 	beq.w	8010f28 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d7c:	d15a      	bne.n	8010e34 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d82:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d86:	1d1a      	adds	r2, r3, #4
 8010d88:	627a      	str	r2, [r7, #36]	; 0x24
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	617b      	str	r3, [r7, #20]
 8010d8e:	2302      	movs	r3, #2
 8010d90:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d03a      	beq.n	8010e14 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da0:	613b      	str	r3, [r7, #16]
 8010da2:	2300      	movs	r3, #0
 8010da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da8:	3302      	adds	r3, #2
 8010daa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db2:	3301      	adds	r3, #1
 8010db4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fd ff03 	bl	800ebc6 <get_fat>
 8010dc0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d804      	bhi.n	8010dd2 <f_lseek+0xa2>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2202      	movs	r2, #2
 8010dcc:	755a      	strb	r2, [r3, #21]
 8010dce:	2302      	movs	r3, #2
 8010dd0:	e1ce      	b.n	8011170 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd8:	d104      	bne.n	8010de4 <f_lseek+0xb4>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	755a      	strb	r2, [r3, #21]
 8010de0:	2301      	movs	r3, #1
 8010de2:	e1c5      	b.n	8011170 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	3301      	adds	r3, #1
 8010de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d0de      	beq.n	8010dac <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d809      	bhi.n	8010e0a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	1d1a      	adds	r2, r3, #4
 8010dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8010dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dfe:	601a      	str	r2, [r3, #0]
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	1d1a      	adds	r2, r3, #4
 8010e04:	627a      	str	r2, [r7, #36]	; 0x24
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d3c4      	bcc.n	8010d9e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e1a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d803      	bhi.n	8010e2c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e26:	2200      	movs	r2, #0
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	e19f      	b.n	801116c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010e2c:	2311      	movs	r3, #17
 8010e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010e32:	e19b      	b.n	801116c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d902      	bls.n	8010e44 <f_lseek+0x114>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 818d 	beq.w	801116c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	4619      	mov	r1, r3
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7fe f998 	bl	800f18e <clmt_clust>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	69db      	ldr	r3, [r3, #28]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	f7fd fe8b 	bl	800eb88 <clust2sect>
 8010e72:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d104      	bne.n	8010e84 <f_lseek+0x154>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2202      	movs	r2, #2
 8010e7e:	755a      	strb	r2, [r3, #21]
 8010e80:	2302      	movs	r3, #2
 8010e82:	e175      	b.n	8011170 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	3b01      	subs	r3, #1
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	8992      	ldrh	r2, [r2, #12]
 8010e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	8952      	ldrh	r2, [r2, #10]
 8010e94:	3a01      	subs	r2, #1
 8010e96:	4013      	ands	r3, r2
 8010e98:	69ba      	ldr	r2, [r7, #24]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	699b      	ldr	r3, [r3, #24]
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	8992      	ldrh	r2, [r2, #12]
 8010ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010eaa:	fb02 f201 	mul.w	r2, r2, r1
 8010eae:	1a9b      	subs	r3, r3, r2
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f000 815b 	beq.w	801116c <f_lseek+0x43c>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6a1b      	ldr	r3, [r3, #32]
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	f000 8155 	beq.w	801116c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	7d1b      	ldrb	r3, [r3, #20]
 8010ec6:	b25b      	sxtb	r3, r3
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	da18      	bge.n	8010efe <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	7858      	ldrb	r0, [r3, #1]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a1a      	ldr	r2, [r3, #32]
 8010eda:	2301      	movs	r3, #1
 8010edc:	f7fd fac8 	bl	800e470 <disk_write>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d004      	beq.n	8010ef0 <f_lseek+0x1c0>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	755a      	strb	r2, [r3, #21]
 8010eec:	2301      	movs	r3, #1
 8010eee:	e13f      	b.n	8011170 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	7d1b      	ldrb	r3, [r3, #20]
 8010ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	7858      	ldrb	r0, [r3, #1]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f08:	2301      	movs	r3, #1
 8010f0a:	69ba      	ldr	r2, [r7, #24]
 8010f0c:	f7fd fa90 	bl	800e430 <disk_read>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d004      	beq.n	8010f20 <f_lseek+0x1f0>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	755a      	strb	r2, [r3, #21]
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	e127      	b.n	8011170 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	69ba      	ldr	r2, [r7, #24]
 8010f24:	621a      	str	r2, [r3, #32]
 8010f26:	e121      	b.n	801116c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	683a      	ldr	r2, [r7, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d908      	bls.n	8010f44 <f_lseek+0x214>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	7d1b      	ldrb	r3, [r3, #20]
 8010f36:	f003 0302 	and.w	r3, r3, #2
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d102      	bne.n	8010f44 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	699b      	ldr	r3, [r3, #24]
 8010f48:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f52:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 80b5 	beq.w	80110c6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	895b      	ldrh	r3, [r3, #10]
 8010f60:	461a      	mov	r2, r3
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	899b      	ldrh	r3, [r3, #12]
 8010f66:	fb03 f302 	mul.w	r3, r3, r2
 8010f6a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010f6c:	6a3b      	ldr	r3, [r7, #32]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d01b      	beq.n	8010faa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	1e5a      	subs	r2, r3, #1
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	1e59      	subs	r1, r3, #1
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d30f      	bcc.n	8010faa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010f8a:	6a3b      	ldr	r3, [r7, #32]
 8010f8c:	1e5a      	subs	r2, r3, #1
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	425b      	negs	r3, r3
 8010f92:	401a      	ands	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	699b      	ldr	r3, [r3, #24]
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	1ad3      	subs	r3, r2, r3
 8010fa0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	69db      	ldr	r3, [r3, #28]
 8010fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fa8:	e022      	b.n	8010ff0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d119      	bne.n	8010fea <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2100      	movs	r1, #0
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fe f84f 	bl	800f05e <create_chain>
 8010fc0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d104      	bne.n	8010fd2 <f_lseek+0x2a2>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2202      	movs	r2, #2
 8010fcc:	755a      	strb	r2, [r3, #21]
 8010fce:	2302      	movs	r3, #2
 8010fd0:	e0ce      	b.n	8011170 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd8:	d104      	bne.n	8010fe4 <f_lseek+0x2b4>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2201      	movs	r2, #1
 8010fde:	755a      	strb	r2, [r3, #21]
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	e0c5      	b.n	8011170 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fe8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d067      	beq.n	80110c6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010ff6:	e03a      	b.n	801106e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	603b      	str	r3, [r7, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	699a      	ldr	r2, [r3, #24]
 8011004:	69fb      	ldr	r3, [r7, #28]
 8011006:	441a      	add	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	7d1b      	ldrb	r3, [r3, #20]
 8011010:	f003 0302 	and.w	r3, r3, #2
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00b      	beq.n	8011030 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801101c:	4618      	mov	r0, r3
 801101e:	f7fe f81e 	bl	800f05e <create_chain>
 8011022:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	2b00      	cmp	r3, #0
 8011028:	d108      	bne.n	801103c <f_lseek+0x30c>
							ofs = 0; break;
 801102a:	2300      	movs	r3, #0
 801102c:	603b      	str	r3, [r7, #0]
 801102e:	e022      	b.n	8011076 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011034:	4618      	mov	r0, r3
 8011036:	f7fd fdc6 	bl	800ebc6 <get_fat>
 801103a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011042:	d104      	bne.n	801104e <f_lseek+0x31e>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2201      	movs	r2, #1
 8011048:	755a      	strb	r2, [r3, #21]
 801104a:	2301      	movs	r3, #1
 801104c:	e090      	b.n	8011170 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011050:	2b01      	cmp	r3, #1
 8011052:	d904      	bls.n	801105e <f_lseek+0x32e>
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	69db      	ldr	r3, [r3, #28]
 8011058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801105a:	429a      	cmp	r2, r3
 801105c:	d304      	bcc.n	8011068 <f_lseek+0x338>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2202      	movs	r2, #2
 8011062:	755a      	strb	r2, [r3, #21]
 8011064:	2302      	movs	r3, #2
 8011066:	e083      	b.n	8011170 <f_lseek+0x440>
					fp->clust = clst;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801106c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801106e:	683a      	ldr	r2, [r7, #0]
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	429a      	cmp	r2, r3
 8011074:	d8c0      	bhi.n	8010ff8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	699a      	ldr	r2, [r3, #24]
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	441a      	add	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	461a      	mov	r2, r3
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	fbb3 f1f2 	udiv	r1, r3, r2
 801108e:	fb02 f201 	mul.w	r2, r2, r1
 8011092:	1a9b      	subs	r3, r3, r2
 8011094:	2b00      	cmp	r3, #0
 8011096:	d016      	beq.n	80110c6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801109c:	4618      	mov	r0, r3
 801109e:	f7fd fd73 	bl	800eb88 <clust2sect>
 80110a2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d104      	bne.n	80110b4 <f_lseek+0x384>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2202      	movs	r2, #2
 80110ae:	755a      	strb	r2, [r3, #21]
 80110b0:	2302      	movs	r3, #2
 80110b2:	e05d      	b.n	8011170 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	899b      	ldrh	r3, [r3, #12]
 80110b8:	461a      	mov	r2, r3
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80110c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110c2:	4413      	add	r3, r2
 80110c4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	699a      	ldr	r2, [r3, #24]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d90a      	bls.n	80110e8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	699a      	ldr	r2, [r3, #24]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	7d1b      	ldrb	r3, [r3, #20]
 80110de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	699b      	ldr	r3, [r3, #24]
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	8992      	ldrh	r2, [r2, #12]
 80110f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80110f4:	fb02 f201 	mul.w	r2, r2, r1
 80110f8:	1a9b      	subs	r3, r3, r2
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d036      	beq.n	801116c <f_lseek+0x43c>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6a1b      	ldr	r3, [r3, #32]
 8011102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011104:	429a      	cmp	r2, r3
 8011106:	d031      	beq.n	801116c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	b25b      	sxtb	r3, r3
 801110e:	2b00      	cmp	r3, #0
 8011110:	da18      	bge.n	8011144 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	7858      	ldrb	r0, [r3, #1]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6a1a      	ldr	r2, [r3, #32]
 8011120:	2301      	movs	r3, #1
 8011122:	f7fd f9a5 	bl	800e470 <disk_write>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d004      	beq.n	8011136 <f_lseek+0x406>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2201      	movs	r2, #1
 8011130:	755a      	strb	r2, [r3, #21]
 8011132:	2301      	movs	r3, #1
 8011134:	e01c      	b.n	8011170 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	7d1b      	ldrb	r3, [r3, #20]
 801113a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801113e:	b2da      	uxtb	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	7858      	ldrb	r0, [r3, #1]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801114e:	2301      	movs	r3, #1
 8011150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011152:	f7fd f96d 	bl	800e430 <disk_read>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d004      	beq.n	8011166 <f_lseek+0x436>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2201      	movs	r2, #1
 8011160:	755a      	strb	r2, [r3, #21]
 8011162:	2301      	movs	r3, #1
 8011164:	e004      	b.n	8011170 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801116a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801116c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011170:	4618      	mov	r0, r3
 8011172:	3740      	adds	r7, #64	; 0x40
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b09e      	sub	sp, #120	; 0x78
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011180:	2300      	movs	r3, #0
 8011182:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011184:	f107 010c 	add.w	r1, r7, #12
 8011188:	1d3b      	adds	r3, r7, #4
 801118a:	2202      	movs	r2, #2
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fd17 	bl	800fbc0 <find_volume>
 8011192:	4603      	mov	r3, r0
 8011194:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801119c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f040 80a4 	bne.w	80112ee <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111ac:	4611      	mov	r1, r2
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fe fbd6 	bl	800f960 <follow_path>
 80111b4:	4603      	mov	r3, r0
 80111b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80111ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d108      	bne.n	80111d4 <f_unlink+0x5c>
 80111c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80111c6:	f003 0320 	and.w	r3, r3, #32
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d002      	beq.n	80111d4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80111ce:	2306      	movs	r3, #6
 80111d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80111d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d108      	bne.n	80111ee <f_unlink+0x76>
 80111dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111e0:	2102      	movs	r1, #2
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fd fa82 	bl	800e6ec <chk_lock>
 80111e8:	4603      	mov	r3, r0
 80111ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80111ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d17b      	bne.n	80112ee <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80111f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80111fa:	b25b      	sxtb	r3, r3
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	da03      	bge.n	8011208 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011200:	2306      	movs	r3, #6
 8011202:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011206:	e008      	b.n	801121a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011208:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011214:	2307      	movs	r3, #7
 8011216:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801121a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801121e:	2b00      	cmp	r3, #0
 8011220:	d13d      	bne.n	801129e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011226:	4611      	mov	r1, r2
 8011228:	4618      	mov	r0, r3
 801122a:	f7fe f98e 	bl	800f54a <ld_clust>
 801122e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011230:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011234:	f003 0310 	and.w	r3, r3, #16
 8011238:	2b00      	cmp	r3, #0
 801123a:	d030      	beq.n	801129e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	699b      	ldr	r3, [r3, #24]
 8011240:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011242:	429a      	cmp	r2, r3
 8011244:	d103      	bne.n	801124e <f_unlink+0xd6>
						res = FR_DENIED;
 8011246:	2307      	movs	r3, #7
 8011248:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801124c:	e027      	b.n	801129e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011254:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011256:	f107 0310 	add.w	r3, r7, #16
 801125a:	2100      	movs	r1, #0
 801125c:	4618      	mov	r0, r3
 801125e:	f7fd ffce 	bl	800f1fe <dir_sdi>
 8011262:	4603      	mov	r3, r0
 8011264:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011268:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801126c:	2b00      	cmp	r3, #0
 801126e:	d116      	bne.n	801129e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011270:	f107 0310 	add.w	r3, r7, #16
 8011274:	2100      	movs	r1, #0
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe f9a6 	bl	800f5c8 <dir_read>
 801127c:	4603      	mov	r3, r0
 801127e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011282:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011286:	2b00      	cmp	r3, #0
 8011288:	d102      	bne.n	8011290 <f_unlink+0x118>
 801128a:	2307      	movs	r3, #7
 801128c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011290:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011294:	2b04      	cmp	r3, #4
 8011296:	d102      	bne.n	801129e <f_unlink+0x126>
 8011298:	2300      	movs	r3, #0
 801129a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801129e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d123      	bne.n	80112ee <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80112a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fe fa70 	bl	800f790 <dir_remove>
 80112b0:	4603      	mov	r3, r0
 80112b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80112b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d10c      	bne.n	80112d8 <f_unlink+0x160>
 80112be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d009      	beq.n	80112d8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80112c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80112c8:	2200      	movs	r2, #0
 80112ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fd fe61 	bl	800ef94 <remove_chain>
 80112d2:	4603      	mov	r3, r0
 80112d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80112d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d106      	bne.n	80112ee <f_unlink+0x176>
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fd fbe0 	bl	800eaa8 <sync_fs>
 80112e8:	4603      	mov	r3, r0
 80112ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80112ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3778      	adds	r7, #120	; 0x78
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
	...

080112fc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b096      	sub	sp, #88	; 0x58
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011304:	f107 0108 	add.w	r1, r7, #8
 8011308:	1d3b      	adds	r3, r7, #4
 801130a:	2202      	movs	r2, #2
 801130c:	4618      	mov	r0, r3
 801130e:	f7fe fc57 	bl	800fbc0 <find_volume>
 8011312:	4603      	mov	r3, r0
 8011314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801131c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011320:	2b00      	cmp	r3, #0
 8011322:	f040 80fe 	bne.w	8011522 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	f107 030c 	add.w	r3, r7, #12
 801132c:	4611      	mov	r1, r2
 801132e:	4618      	mov	r0, r3
 8011330:	f7fe fb16 	bl	800f960 <follow_path>
 8011334:	4603      	mov	r3, r0
 8011336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801133a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801133e:	2b00      	cmp	r3, #0
 8011340:	d102      	bne.n	8011348 <f_mkdir+0x4c>
 8011342:	2308      	movs	r3, #8
 8011344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801134c:	2b04      	cmp	r3, #4
 801134e:	d108      	bne.n	8011362 <f_mkdir+0x66>
 8011350:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011354:	f003 0320 	and.w	r3, r3, #32
 8011358:	2b00      	cmp	r3, #0
 801135a:	d002      	beq.n	8011362 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801135c:	2306      	movs	r3, #6
 801135e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011366:	2b04      	cmp	r3, #4
 8011368:	f040 80db 	bne.w	8011522 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801136c:	f107 030c 	add.w	r3, r7, #12
 8011370:	2100      	movs	r1, #0
 8011372:	4618      	mov	r0, r3
 8011374:	f7fd fe73 	bl	800f05e <create_chain>
 8011378:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	895b      	ldrh	r3, [r3, #10]
 801137e:	461a      	mov	r2, r3
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	899b      	ldrh	r3, [r3, #12]
 8011384:	fb03 f302 	mul.w	r3, r3, r2
 8011388:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801138a:	2300      	movs	r3, #0
 801138c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011392:	2b00      	cmp	r3, #0
 8011394:	d102      	bne.n	801139c <f_mkdir+0xa0>
 8011396:	2307      	movs	r3, #7
 8011398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801139c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d102      	bne.n	80113a8 <f_mkdir+0xac>
 80113a2:	2302      	movs	r3, #2
 80113a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80113a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ae:	d102      	bne.n	80113b6 <f_mkdir+0xba>
 80113b0:	2301      	movs	r3, #1
 80113b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80113b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d106      	bne.n	80113cc <f_mkdir+0xd0>
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fd faff 	bl	800e9c4 <sync_window>
 80113c6:	4603      	mov	r3, r0
 80113c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80113cc:	4b58      	ldr	r3, [pc, #352]	; (8011530 <f_mkdir+0x234>)
 80113ce:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80113d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d16c      	bne.n	80114b2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fd fbd3 	bl	800eb88 <clust2sect>
 80113e2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	3338      	adds	r3, #56	; 0x38
 80113e8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	461a      	mov	r2, r3
 80113f0:	2100      	movs	r1, #0
 80113f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113f4:	f7fd f91d 	bl	800e632 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80113f8:	220b      	movs	r2, #11
 80113fa:	2120      	movs	r1, #32
 80113fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113fe:	f7fd f918 	bl	800e632 <mem_set>
					dir[DIR_Name] = '.';
 8011402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011404:	222e      	movs	r2, #46	; 0x2e
 8011406:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140a:	330b      	adds	r3, #11
 801140c:	2210      	movs	r2, #16
 801140e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011412:	3316      	adds	r3, #22
 8011414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011416:	4618      	mov	r0, r3
 8011418:	f7fd f8be 	bl	800e598 <st_dword>
					st_clust(fs, dir, dcl);
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011422:	4618      	mov	r0, r3
 8011424:	f7fe f8b0 	bl	800f588 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801142a:	3320      	adds	r3, #32
 801142c:	2220      	movs	r2, #32
 801142e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011430:	4618      	mov	r0, r3
 8011432:	f7fd f8dd 	bl	800e5f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011438:	3321      	adds	r3, #33	; 0x21
 801143a:	222e      	movs	r2, #46	; 0x2e
 801143c:	701a      	strb	r2, [r3, #0]
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	2b03      	cmp	r3, #3
 8011448:	d106      	bne.n	8011458 <f_mkdir+0x15c>
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011450:	429a      	cmp	r2, r3
 8011452:	d101      	bne.n	8011458 <f_mkdir+0x15c>
 8011454:	2300      	movs	r3, #0
 8011456:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011458:	68b8      	ldr	r0, [r7, #8]
 801145a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801145c:	3320      	adds	r3, #32
 801145e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011460:	4619      	mov	r1, r3
 8011462:	f7fe f891 	bl	800f588 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	895b      	ldrh	r3, [r3, #10]
 801146a:	653b      	str	r3, [r7, #80]	; 0x50
 801146c:	e01c      	b.n	80114a8 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801146e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011470:	1c5a      	adds	r2, r3, #1
 8011472:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011474:	68ba      	ldr	r2, [r7, #8]
 8011476:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	2201      	movs	r2, #1
 801147c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	4618      	mov	r0, r3
 8011482:	f7fd fa9f 	bl	800e9c4 <sync_window>
 8011486:	4603      	mov	r3, r0
 8011488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801148c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011490:	2b00      	cmp	r3, #0
 8011492:	d10d      	bne.n	80114b0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	899b      	ldrh	r3, [r3, #12]
 8011498:	461a      	mov	r2, r3
 801149a:	2100      	movs	r1, #0
 801149c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801149e:	f7fd f8c8 	bl	800e632 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80114a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114a4:	3b01      	subs	r3, #1
 80114a6:	653b      	str	r3, [r7, #80]	; 0x50
 80114a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1df      	bne.n	801146e <f_mkdir+0x172>
 80114ae:	e000      	b.n	80114b2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80114b0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80114b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d107      	bne.n	80114ca <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80114ba:	f107 030c 	add.w	r3, r7, #12
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fe f934 	bl	800f72c <dir_register>
 80114c4:	4603      	mov	r3, r0
 80114c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80114ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d120      	bne.n	8011514 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80114d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	3316      	adds	r3, #22
 80114da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fd f85b 	bl	800e598 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fe f84d 	bl	800f588 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80114ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f0:	330b      	adds	r3, #11
 80114f2:	2210      	movs	r2, #16
 80114f4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	2201      	movs	r2, #1
 80114fa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80114fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10e      	bne.n	8011522 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	4618      	mov	r0, r3
 8011508:	f7fd face 	bl	800eaa8 <sync_fs>
 801150c:	4603      	mov	r3, r0
 801150e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011512:	e006      	b.n	8011522 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011514:	f107 030c 	add.w	r3, r7, #12
 8011518:	2200      	movs	r2, #0
 801151a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801151c:	4618      	mov	r0, r3
 801151e:	f7fd fd39 	bl	800ef94 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011522:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011526:	4618      	mov	r0, r3
 8011528:	3758      	adds	r7, #88	; 0x58
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	274a0000 	.word	0x274a0000

08011534 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b088      	sub	sp, #32
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011540:	2300      	movs	r3, #0
 8011542:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011548:	e017      	b.n	801157a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801154a:	f107 0310 	add.w	r3, r7, #16
 801154e:	f107 0114 	add.w	r1, r7, #20
 8011552:	2201      	movs	r2, #1
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7ff f803 	bl	8010560 <f_read>
		if (rc != 1) break;
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	2b01      	cmp	r3, #1
 801155e:	d112      	bne.n	8011586 <f_gets+0x52>
		c = s[0];
 8011560:	7d3b      	ldrb	r3, [r7, #20]
 8011562:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011564:	69bb      	ldr	r3, [r7, #24]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	61ba      	str	r2, [r7, #24]
 801156a:	7dfa      	ldrb	r2, [r7, #23]
 801156c:	701a      	strb	r2, [r3, #0]
		n++;
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	3301      	adds	r3, #1
 8011572:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011574:	7dfb      	ldrb	r3, [r7, #23]
 8011576:	2b0a      	cmp	r3, #10
 8011578:	d007      	beq.n	801158a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	3b01      	subs	r3, #1
 801157e:	69fa      	ldr	r2, [r7, #28]
 8011580:	429a      	cmp	r2, r3
 8011582:	dbe2      	blt.n	801154a <f_gets+0x16>
 8011584:	e002      	b.n	801158c <f_gets+0x58>
		if (rc != 1) break;
 8011586:	bf00      	nop
 8011588:	e000      	b.n	801158c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801158a:	bf00      	nop
	}
	*p = 0;
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	2200      	movs	r2, #0
 8011590:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <f_gets+0x68>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	e000      	b.n	801159e <f_gets+0x6a>
 801159c:	2300      	movs	r3, #0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3720      	adds	r7, #32
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
	...

080115a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b087      	sub	sp, #28
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	4613      	mov	r3, r2
 80115b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80115b6:	2301      	movs	r3, #1
 80115b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80115be:	4b1f      	ldr	r3, [pc, #124]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115c0:	7a5b      	ldrb	r3, [r3, #9]
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d131      	bne.n	801162c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80115c8:	4b1c      	ldr	r3, [pc, #112]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115ca:	7a5b      	ldrb	r3, [r3, #9]
 80115cc:	b2db      	uxtb	r3, r3
 80115ce:	461a      	mov	r2, r3
 80115d0:	4b1a      	ldr	r3, [pc, #104]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115d2:	2100      	movs	r1, #0
 80115d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80115d6:	4b19      	ldr	r3, [pc, #100]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115d8:	7a5b      	ldrb	r3, [r3, #9]
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	4a17      	ldr	r2, [pc, #92]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4413      	add	r3, r2
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80115e6:	4b15      	ldr	r3, [pc, #84]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115e8:	7a5b      	ldrb	r3, [r3, #9]
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	461a      	mov	r2, r3
 80115ee:	4b13      	ldr	r3, [pc, #76]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115f0:	4413      	add	r3, r2
 80115f2:	79fa      	ldrb	r2, [r7, #7]
 80115f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80115f6:	4b11      	ldr	r3, [pc, #68]	; (801163c <FATFS_LinkDriverEx+0x94>)
 80115f8:	7a5b      	ldrb	r3, [r3, #9]
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	1c5a      	adds	r2, r3, #1
 80115fe:	b2d1      	uxtb	r1, r2
 8011600:	4a0e      	ldr	r2, [pc, #56]	; (801163c <FATFS_LinkDriverEx+0x94>)
 8011602:	7251      	strb	r1, [r2, #9]
 8011604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011606:	7dbb      	ldrb	r3, [r7, #22]
 8011608:	3330      	adds	r3, #48	; 0x30
 801160a:	b2da      	uxtb	r2, r3
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	3301      	adds	r3, #1
 8011614:	223a      	movs	r2, #58	; 0x3a
 8011616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	3302      	adds	r3, #2
 801161c:	222f      	movs	r2, #47	; 0x2f
 801161e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	3303      	adds	r3, #3
 8011624:	2200      	movs	r2, #0
 8011626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011628:	2300      	movs	r3, #0
 801162a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801162c:	7dfb      	ldrb	r3, [r7, #23]
}
 801162e:	4618      	mov	r0, r3
 8011630:	371c      	adds	r7, #28
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop
 801163c:	20037314 	.word	0x20037314

08011640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801164a:	2200      	movs	r2, #0
 801164c:	6839      	ldr	r1, [r7, #0]
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff ffaa 	bl	80115a8 <FATFS_LinkDriverEx>
 8011654:	4603      	mov	r3, r0
}
 8011656:	4618      	mov	r0, r3
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}

0801165e <__cxa_guard_acquire>:
 801165e:	6803      	ldr	r3, [r0, #0]
 8011660:	07db      	lsls	r3, r3, #31
 8011662:	d406      	bmi.n	8011672 <__cxa_guard_acquire+0x14>
 8011664:	7843      	ldrb	r3, [r0, #1]
 8011666:	b103      	cbz	r3, 801166a <__cxa_guard_acquire+0xc>
 8011668:	deff      	udf	#255	; 0xff
 801166a:	2301      	movs	r3, #1
 801166c:	7043      	strb	r3, [r0, #1]
 801166e:	4618      	mov	r0, r3
 8011670:	4770      	bx	lr
 8011672:	2000      	movs	r0, #0
 8011674:	4770      	bx	lr

08011676 <__cxa_guard_release>:
 8011676:	2301      	movs	r3, #1
 8011678:	6003      	str	r3, [r0, #0]
 801167a:	4770      	bx	lr
 801167c:	0000      	movs	r0, r0
	...

08011680 <cos>:
 8011680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011682:	ec51 0b10 	vmov	r0, r1, d0
 8011686:	4a1e      	ldr	r2, [pc, #120]	; (8011700 <cos+0x80>)
 8011688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801168c:	4293      	cmp	r3, r2
 801168e:	dc06      	bgt.n	801169e <cos+0x1e>
 8011690:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80116f8 <cos+0x78>
 8011694:	f000 fa74 	bl	8011b80 <__kernel_cos>
 8011698:	ec51 0b10 	vmov	r0, r1, d0
 801169c:	e007      	b.n	80116ae <cos+0x2e>
 801169e:	4a19      	ldr	r2, [pc, #100]	; (8011704 <cos+0x84>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	dd09      	ble.n	80116b8 <cos+0x38>
 80116a4:	ee10 2a10 	vmov	r2, s0
 80116a8:	460b      	mov	r3, r1
 80116aa:	f7ee fe05 	bl	80002b8 <__aeabi_dsub>
 80116ae:	ec41 0b10 	vmov	d0, r0, r1
 80116b2:	b005      	add	sp, #20
 80116b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80116b8:	4668      	mov	r0, sp
 80116ba:	f000 f86d 	bl	8011798 <__ieee754_rem_pio2>
 80116be:	f000 0003 	and.w	r0, r0, #3
 80116c2:	2801      	cmp	r0, #1
 80116c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116c8:	ed9d 0b00 	vldr	d0, [sp]
 80116cc:	d007      	beq.n	80116de <cos+0x5e>
 80116ce:	2802      	cmp	r0, #2
 80116d0:	d00e      	beq.n	80116f0 <cos+0x70>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d0de      	beq.n	8011694 <cos+0x14>
 80116d6:	2001      	movs	r0, #1
 80116d8:	f000 fe5a 	bl	8012390 <__kernel_sin>
 80116dc:	e7dc      	b.n	8011698 <cos+0x18>
 80116de:	f000 fe57 	bl	8012390 <__kernel_sin>
 80116e2:	ec53 2b10 	vmov	r2, r3, d0
 80116e6:	ee10 0a10 	vmov	r0, s0
 80116ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80116ee:	e7de      	b.n	80116ae <cos+0x2e>
 80116f0:	f000 fa46 	bl	8011b80 <__kernel_cos>
 80116f4:	e7f5      	b.n	80116e2 <cos+0x62>
 80116f6:	bf00      	nop
	...
 8011700:	3fe921fb 	.word	0x3fe921fb
 8011704:	7fefffff 	.word	0x7fefffff

08011708 <sin>:
 8011708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801170a:	ec51 0b10 	vmov	r0, r1, d0
 801170e:	4a20      	ldr	r2, [pc, #128]	; (8011790 <sin+0x88>)
 8011710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011714:	4293      	cmp	r3, r2
 8011716:	dc07      	bgt.n	8011728 <sin+0x20>
 8011718:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011788 <sin+0x80>
 801171c:	2000      	movs	r0, #0
 801171e:	f000 fe37 	bl	8012390 <__kernel_sin>
 8011722:	ec51 0b10 	vmov	r0, r1, d0
 8011726:	e007      	b.n	8011738 <sin+0x30>
 8011728:	4a1a      	ldr	r2, [pc, #104]	; (8011794 <sin+0x8c>)
 801172a:	4293      	cmp	r3, r2
 801172c:	dd09      	ble.n	8011742 <sin+0x3a>
 801172e:	ee10 2a10 	vmov	r2, s0
 8011732:	460b      	mov	r3, r1
 8011734:	f7ee fdc0 	bl	80002b8 <__aeabi_dsub>
 8011738:	ec41 0b10 	vmov	d0, r0, r1
 801173c:	b005      	add	sp, #20
 801173e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011742:	4668      	mov	r0, sp
 8011744:	f000 f828 	bl	8011798 <__ieee754_rem_pio2>
 8011748:	f000 0003 	and.w	r0, r0, #3
 801174c:	2801      	cmp	r0, #1
 801174e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011752:	ed9d 0b00 	vldr	d0, [sp]
 8011756:	d004      	beq.n	8011762 <sin+0x5a>
 8011758:	2802      	cmp	r0, #2
 801175a:	d005      	beq.n	8011768 <sin+0x60>
 801175c:	b970      	cbnz	r0, 801177c <sin+0x74>
 801175e:	2001      	movs	r0, #1
 8011760:	e7dd      	b.n	801171e <sin+0x16>
 8011762:	f000 fa0d 	bl	8011b80 <__kernel_cos>
 8011766:	e7dc      	b.n	8011722 <sin+0x1a>
 8011768:	2001      	movs	r0, #1
 801176a:	f000 fe11 	bl	8012390 <__kernel_sin>
 801176e:	ec53 2b10 	vmov	r2, r3, d0
 8011772:	ee10 0a10 	vmov	r0, s0
 8011776:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801177a:	e7dd      	b.n	8011738 <sin+0x30>
 801177c:	f000 fa00 	bl	8011b80 <__kernel_cos>
 8011780:	e7f5      	b.n	801176e <sin+0x66>
 8011782:	bf00      	nop
 8011784:	f3af 8000 	nop.w
	...
 8011790:	3fe921fb 	.word	0x3fe921fb
 8011794:	7fefffff 	.word	0x7fefffff

08011798 <__ieee754_rem_pio2>:
 8011798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179c:	ec57 6b10 	vmov	r6, r7, d0
 80117a0:	4bc3      	ldr	r3, [pc, #780]	; (8011ab0 <__ieee754_rem_pio2+0x318>)
 80117a2:	b08d      	sub	sp, #52	; 0x34
 80117a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80117a8:	4598      	cmp	r8, r3
 80117aa:	4604      	mov	r4, r0
 80117ac:	9704      	str	r7, [sp, #16]
 80117ae:	dc07      	bgt.n	80117c0 <__ieee754_rem_pio2+0x28>
 80117b0:	2200      	movs	r2, #0
 80117b2:	2300      	movs	r3, #0
 80117b4:	ed84 0b00 	vstr	d0, [r4]
 80117b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80117bc:	2500      	movs	r5, #0
 80117be:	e027      	b.n	8011810 <__ieee754_rem_pio2+0x78>
 80117c0:	4bbc      	ldr	r3, [pc, #752]	; (8011ab4 <__ieee754_rem_pio2+0x31c>)
 80117c2:	4598      	cmp	r8, r3
 80117c4:	dc75      	bgt.n	80118b2 <__ieee754_rem_pio2+0x11a>
 80117c6:	9b04      	ldr	r3, [sp, #16]
 80117c8:	4dbb      	ldr	r5, [pc, #748]	; (8011ab8 <__ieee754_rem_pio2+0x320>)
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	ee10 0a10 	vmov	r0, s0
 80117d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x2e0>)
 80117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d6:	4639      	mov	r1, r7
 80117d8:	dd36      	ble.n	8011848 <__ieee754_rem_pio2+0xb0>
 80117da:	f7ee fd6d 	bl	80002b8 <__aeabi_dsub>
 80117de:	45a8      	cmp	r8, r5
 80117e0:	4606      	mov	r6, r0
 80117e2:	460f      	mov	r7, r1
 80117e4:	d018      	beq.n	8011818 <__ieee754_rem_pio2+0x80>
 80117e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x2e8>)
 80117e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ec:	f7ee fd64 	bl	80002b8 <__aeabi_dsub>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	e9c4 2300 	strd	r2, r3, [r4]
 80117f8:	4630      	mov	r0, r6
 80117fa:	4639      	mov	r1, r7
 80117fc:	f7ee fd5c 	bl	80002b8 <__aeabi_dsub>
 8011800:	a39f      	add	r3, pc, #636	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x2e8>)
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	f7ee fd57 	bl	80002b8 <__aeabi_dsub>
 801180a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801180e:	2501      	movs	r5, #1
 8011810:	4628      	mov	r0, r5
 8011812:	b00d      	add	sp, #52	; 0x34
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011818:	a39b      	add	r3, pc, #620	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x2f0>)
 801181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181e:	f7ee fd4b 	bl	80002b8 <__aeabi_dsub>
 8011822:	a39b      	add	r3, pc, #620	; (adr r3, 8011a90 <__ieee754_rem_pio2+0x2f8>)
 8011824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011828:	4606      	mov	r6, r0
 801182a:	460f      	mov	r7, r1
 801182c:	f7ee fd44 	bl	80002b8 <__aeabi_dsub>
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	e9c4 2300 	strd	r2, r3, [r4]
 8011838:	4630      	mov	r0, r6
 801183a:	4639      	mov	r1, r7
 801183c:	f7ee fd3c 	bl	80002b8 <__aeabi_dsub>
 8011840:	a393      	add	r3, pc, #588	; (adr r3, 8011a90 <__ieee754_rem_pio2+0x2f8>)
 8011842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011846:	e7de      	b.n	8011806 <__ieee754_rem_pio2+0x6e>
 8011848:	f7ee fd38 	bl	80002bc <__adddf3>
 801184c:	45a8      	cmp	r8, r5
 801184e:	4606      	mov	r6, r0
 8011850:	460f      	mov	r7, r1
 8011852:	d016      	beq.n	8011882 <__ieee754_rem_pio2+0xea>
 8011854:	a38a      	add	r3, pc, #552	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x2e8>)
 8011856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185a:	f7ee fd2f 	bl	80002bc <__adddf3>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	e9c4 2300 	strd	r2, r3, [r4]
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ee fd25 	bl	80002b8 <__aeabi_dsub>
 801186e:	a384      	add	r3, pc, #528	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x2e8>)
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	f7ee fd22 	bl	80002bc <__adddf3>
 8011878:	f04f 35ff 	mov.w	r5, #4294967295
 801187c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011880:	e7c6      	b.n	8011810 <__ieee754_rem_pio2+0x78>
 8011882:	a381      	add	r3, pc, #516	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x2f0>)
 8011884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011888:	f7ee fd18 	bl	80002bc <__adddf3>
 801188c:	a380      	add	r3, pc, #512	; (adr r3, 8011a90 <__ieee754_rem_pio2+0x2f8>)
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	4606      	mov	r6, r0
 8011894:	460f      	mov	r7, r1
 8011896:	f7ee fd11 	bl	80002bc <__adddf3>
 801189a:	4602      	mov	r2, r0
 801189c:	460b      	mov	r3, r1
 801189e:	e9c4 2300 	strd	r2, r3, [r4]
 80118a2:	4630      	mov	r0, r6
 80118a4:	4639      	mov	r1, r7
 80118a6:	f7ee fd07 	bl	80002b8 <__aeabi_dsub>
 80118aa:	a379      	add	r3, pc, #484	; (adr r3, 8011a90 <__ieee754_rem_pio2+0x2f8>)
 80118ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b0:	e7e0      	b.n	8011874 <__ieee754_rem_pio2+0xdc>
 80118b2:	4b82      	ldr	r3, [pc, #520]	; (8011abc <__ieee754_rem_pio2+0x324>)
 80118b4:	4598      	cmp	r8, r3
 80118b6:	f300 80d0 	bgt.w	8011a5a <__ieee754_rem_pio2+0x2c2>
 80118ba:	f000 fe23 	bl	8012504 <fabs>
 80118be:	ec57 6b10 	vmov	r6, r7, d0
 80118c2:	ee10 0a10 	vmov	r0, s0
 80118c6:	a374      	add	r3, pc, #464	; (adr r3, 8011a98 <__ieee754_rem_pio2+0x300>)
 80118c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118cc:	4639      	mov	r1, r7
 80118ce:	f7ee feab 	bl	8000628 <__aeabi_dmul>
 80118d2:	2200      	movs	r2, #0
 80118d4:	4b7a      	ldr	r3, [pc, #488]	; (8011ac0 <__ieee754_rem_pio2+0x328>)
 80118d6:	f7ee fcf1 	bl	80002bc <__adddf3>
 80118da:	f7ef f955 	bl	8000b88 <__aeabi_d2iz>
 80118de:	4605      	mov	r5, r0
 80118e0:	f7ee fe38 	bl	8000554 <__aeabi_i2d>
 80118e4:	a364      	add	r3, pc, #400	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x2e0>)
 80118e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118ee:	f7ee fe9b 	bl	8000628 <__aeabi_dmul>
 80118f2:	4602      	mov	r2, r0
 80118f4:	460b      	mov	r3, r1
 80118f6:	4630      	mov	r0, r6
 80118f8:	4639      	mov	r1, r7
 80118fa:	f7ee fcdd 	bl	80002b8 <__aeabi_dsub>
 80118fe:	a360      	add	r3, pc, #384	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x2e8>)
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	4682      	mov	sl, r0
 8011906:	468b      	mov	fp, r1
 8011908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801190c:	f7ee fe8c 	bl	8000628 <__aeabi_dmul>
 8011910:	2d1f      	cmp	r5, #31
 8011912:	4606      	mov	r6, r0
 8011914:	460f      	mov	r7, r1
 8011916:	dc0c      	bgt.n	8011932 <__ieee754_rem_pio2+0x19a>
 8011918:	1e6a      	subs	r2, r5, #1
 801191a:	4b6a      	ldr	r3, [pc, #424]	; (8011ac4 <__ieee754_rem_pio2+0x32c>)
 801191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011920:	4543      	cmp	r3, r8
 8011922:	d006      	beq.n	8011932 <__ieee754_rem_pio2+0x19a>
 8011924:	4632      	mov	r2, r6
 8011926:	463b      	mov	r3, r7
 8011928:	4650      	mov	r0, sl
 801192a:	4659      	mov	r1, fp
 801192c:	f7ee fcc4 	bl	80002b8 <__aeabi_dsub>
 8011930:	e00e      	b.n	8011950 <__ieee754_rem_pio2+0x1b8>
 8011932:	4632      	mov	r2, r6
 8011934:	463b      	mov	r3, r7
 8011936:	4650      	mov	r0, sl
 8011938:	4659      	mov	r1, fp
 801193a:	f7ee fcbd 	bl	80002b8 <__aeabi_dsub>
 801193e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011942:	9305      	str	r3, [sp, #20]
 8011944:	9a05      	ldr	r2, [sp, #20]
 8011946:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	2b10      	cmp	r3, #16
 801194e:	dc02      	bgt.n	8011956 <__ieee754_rem_pio2+0x1be>
 8011950:	e9c4 0100 	strd	r0, r1, [r4]
 8011954:	e039      	b.n	80119ca <__ieee754_rem_pio2+0x232>
 8011956:	a34c      	add	r3, pc, #304	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x2f0>)
 8011958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011960:	f7ee fe62 	bl	8000628 <__aeabi_dmul>
 8011964:	4606      	mov	r6, r0
 8011966:	460f      	mov	r7, r1
 8011968:	4602      	mov	r2, r0
 801196a:	460b      	mov	r3, r1
 801196c:	4650      	mov	r0, sl
 801196e:	4659      	mov	r1, fp
 8011970:	f7ee fca2 	bl	80002b8 <__aeabi_dsub>
 8011974:	4602      	mov	r2, r0
 8011976:	460b      	mov	r3, r1
 8011978:	4680      	mov	r8, r0
 801197a:	4689      	mov	r9, r1
 801197c:	4650      	mov	r0, sl
 801197e:	4659      	mov	r1, fp
 8011980:	f7ee fc9a 	bl	80002b8 <__aeabi_dsub>
 8011984:	4632      	mov	r2, r6
 8011986:	463b      	mov	r3, r7
 8011988:	f7ee fc96 	bl	80002b8 <__aeabi_dsub>
 801198c:	a340      	add	r3, pc, #256	; (adr r3, 8011a90 <__ieee754_rem_pio2+0x2f8>)
 801198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011992:	4606      	mov	r6, r0
 8011994:	460f      	mov	r7, r1
 8011996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801199a:	f7ee fe45 	bl	8000628 <__aeabi_dmul>
 801199e:	4632      	mov	r2, r6
 80119a0:	463b      	mov	r3, r7
 80119a2:	f7ee fc89 	bl	80002b8 <__aeabi_dsub>
 80119a6:	4602      	mov	r2, r0
 80119a8:	460b      	mov	r3, r1
 80119aa:	4606      	mov	r6, r0
 80119ac:	460f      	mov	r7, r1
 80119ae:	4640      	mov	r0, r8
 80119b0:	4649      	mov	r1, r9
 80119b2:	f7ee fc81 	bl	80002b8 <__aeabi_dsub>
 80119b6:	9a05      	ldr	r2, [sp, #20]
 80119b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80119bc:	1ad3      	subs	r3, r2, r3
 80119be:	2b31      	cmp	r3, #49	; 0x31
 80119c0:	dc20      	bgt.n	8011a04 <__ieee754_rem_pio2+0x26c>
 80119c2:	e9c4 0100 	strd	r0, r1, [r4]
 80119c6:	46c2      	mov	sl, r8
 80119c8:	46cb      	mov	fp, r9
 80119ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80119ce:	4650      	mov	r0, sl
 80119d0:	4642      	mov	r2, r8
 80119d2:	464b      	mov	r3, r9
 80119d4:	4659      	mov	r1, fp
 80119d6:	f7ee fc6f 	bl	80002b8 <__aeabi_dsub>
 80119da:	463b      	mov	r3, r7
 80119dc:	4632      	mov	r2, r6
 80119de:	f7ee fc6b 	bl	80002b8 <__aeabi_dsub>
 80119e2:	9b04      	ldr	r3, [sp, #16]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80119ea:	f6bf af11 	bge.w	8011810 <__ieee754_rem_pio2+0x78>
 80119ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80119f2:	6063      	str	r3, [r4, #4]
 80119f4:	f8c4 8000 	str.w	r8, [r4]
 80119f8:	60a0      	str	r0, [r4, #8]
 80119fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119fe:	60e3      	str	r3, [r4, #12]
 8011a00:	426d      	negs	r5, r5
 8011a02:	e705      	b.n	8011810 <__ieee754_rem_pio2+0x78>
 8011a04:	a326      	add	r3, pc, #152	; (adr r3, 8011aa0 <__ieee754_rem_pio2+0x308>)
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a0e:	f7ee fe0b 	bl	8000628 <__aeabi_dmul>
 8011a12:	4606      	mov	r6, r0
 8011a14:	460f      	mov	r7, r1
 8011a16:	4602      	mov	r2, r0
 8011a18:	460b      	mov	r3, r1
 8011a1a:	4640      	mov	r0, r8
 8011a1c:	4649      	mov	r1, r9
 8011a1e:	f7ee fc4b 	bl	80002b8 <__aeabi_dsub>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	4682      	mov	sl, r0
 8011a28:	468b      	mov	fp, r1
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	4649      	mov	r1, r9
 8011a2e:	f7ee fc43 	bl	80002b8 <__aeabi_dsub>
 8011a32:	4632      	mov	r2, r6
 8011a34:	463b      	mov	r3, r7
 8011a36:	f7ee fc3f 	bl	80002b8 <__aeabi_dsub>
 8011a3a:	a31b      	add	r3, pc, #108	; (adr r3, 8011aa8 <__ieee754_rem_pio2+0x310>)
 8011a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a40:	4606      	mov	r6, r0
 8011a42:	460f      	mov	r7, r1
 8011a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a48:	f7ee fdee 	bl	8000628 <__aeabi_dmul>
 8011a4c:	4632      	mov	r2, r6
 8011a4e:	463b      	mov	r3, r7
 8011a50:	f7ee fc32 	bl	80002b8 <__aeabi_dsub>
 8011a54:	4606      	mov	r6, r0
 8011a56:	460f      	mov	r7, r1
 8011a58:	e764      	b.n	8011924 <__ieee754_rem_pio2+0x18c>
 8011a5a:	4b1b      	ldr	r3, [pc, #108]	; (8011ac8 <__ieee754_rem_pio2+0x330>)
 8011a5c:	4598      	cmp	r8, r3
 8011a5e:	dd35      	ble.n	8011acc <__ieee754_rem_pio2+0x334>
 8011a60:	ee10 2a10 	vmov	r2, s0
 8011a64:	463b      	mov	r3, r7
 8011a66:	4630      	mov	r0, r6
 8011a68:	4639      	mov	r1, r7
 8011a6a:	f7ee fc25 	bl	80002b8 <__aeabi_dsub>
 8011a6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a72:	e9c4 0100 	strd	r0, r1, [r4]
 8011a76:	e6a1      	b.n	80117bc <__ieee754_rem_pio2+0x24>
 8011a78:	54400000 	.word	0x54400000
 8011a7c:	3ff921fb 	.word	0x3ff921fb
 8011a80:	1a626331 	.word	0x1a626331
 8011a84:	3dd0b461 	.word	0x3dd0b461
 8011a88:	1a600000 	.word	0x1a600000
 8011a8c:	3dd0b461 	.word	0x3dd0b461
 8011a90:	2e037073 	.word	0x2e037073
 8011a94:	3ba3198a 	.word	0x3ba3198a
 8011a98:	6dc9c883 	.word	0x6dc9c883
 8011a9c:	3fe45f30 	.word	0x3fe45f30
 8011aa0:	2e000000 	.word	0x2e000000
 8011aa4:	3ba3198a 	.word	0x3ba3198a
 8011aa8:	252049c1 	.word	0x252049c1
 8011aac:	397b839a 	.word	0x397b839a
 8011ab0:	3fe921fb 	.word	0x3fe921fb
 8011ab4:	4002d97b 	.word	0x4002d97b
 8011ab8:	3ff921fb 	.word	0x3ff921fb
 8011abc:	413921fb 	.word	0x413921fb
 8011ac0:	3fe00000 	.word	0x3fe00000
 8011ac4:	08017968 	.word	0x08017968
 8011ac8:	7fefffff 	.word	0x7fefffff
 8011acc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011ad0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011ad4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011ad8:	4630      	mov	r0, r6
 8011ada:	460f      	mov	r7, r1
 8011adc:	f7ef f854 	bl	8000b88 <__aeabi_d2iz>
 8011ae0:	f7ee fd38 	bl	8000554 <__aeabi_i2d>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	4630      	mov	r0, r6
 8011aea:	4639      	mov	r1, r7
 8011aec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011af0:	f7ee fbe2 	bl	80002b8 <__aeabi_dsub>
 8011af4:	2200      	movs	r2, #0
 8011af6:	4b1f      	ldr	r3, [pc, #124]	; (8011b74 <__ieee754_rem_pio2+0x3dc>)
 8011af8:	f7ee fd96 	bl	8000628 <__aeabi_dmul>
 8011afc:	460f      	mov	r7, r1
 8011afe:	4606      	mov	r6, r0
 8011b00:	f7ef f842 	bl	8000b88 <__aeabi_d2iz>
 8011b04:	f7ee fd26 	bl	8000554 <__aeabi_i2d>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	460b      	mov	r3, r1
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	4639      	mov	r1, r7
 8011b10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b14:	f7ee fbd0 	bl	80002b8 <__aeabi_dsub>
 8011b18:	2200      	movs	r2, #0
 8011b1a:	4b16      	ldr	r3, [pc, #88]	; (8011b74 <__ieee754_rem_pio2+0x3dc>)
 8011b1c:	f7ee fd84 	bl	8000628 <__aeabi_dmul>
 8011b20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011b28:	f04f 0803 	mov.w	r8, #3
 8011b2c:	2600      	movs	r6, #0
 8011b2e:	2700      	movs	r7, #0
 8011b30:	4632      	mov	r2, r6
 8011b32:	463b      	mov	r3, r7
 8011b34:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8011b3c:	f7ee ffdc 	bl	8000af8 <__aeabi_dcmpeq>
 8011b40:	b9b0      	cbnz	r0, 8011b70 <__ieee754_rem_pio2+0x3d8>
 8011b42:	4b0d      	ldr	r3, [pc, #52]	; (8011b78 <__ieee754_rem_pio2+0x3e0>)
 8011b44:	9301      	str	r3, [sp, #4]
 8011b46:	2302      	movs	r3, #2
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	462a      	mov	r2, r5
 8011b4c:	4643      	mov	r3, r8
 8011b4e:	4621      	mov	r1, r4
 8011b50:	a806      	add	r0, sp, #24
 8011b52:	f000 f8dd 	bl	8011d10 <__kernel_rem_pio2>
 8011b56:	9b04      	ldr	r3, [sp, #16]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	f6bf ae58 	bge.w	8011810 <__ieee754_rem_pio2+0x78>
 8011b60:	6863      	ldr	r3, [r4, #4]
 8011b62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b66:	6063      	str	r3, [r4, #4]
 8011b68:	68e3      	ldr	r3, [r4, #12]
 8011b6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b6e:	e746      	b.n	80119fe <__ieee754_rem_pio2+0x266>
 8011b70:	46d0      	mov	r8, sl
 8011b72:	e7dd      	b.n	8011b30 <__ieee754_rem_pio2+0x398>
 8011b74:	41700000 	.word	0x41700000
 8011b78:	080179e8 	.word	0x080179e8
 8011b7c:	00000000 	.word	0x00000000

08011b80 <__kernel_cos>:
 8011b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	ec59 8b10 	vmov	r8, r9, d0
 8011b88:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011b8c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011b90:	ed2d 8b02 	vpush	{d8}
 8011b94:	eeb0 8a41 	vmov.f32	s16, s2
 8011b98:	eef0 8a61 	vmov.f32	s17, s3
 8011b9c:	da07      	bge.n	8011bae <__kernel_cos+0x2e>
 8011b9e:	ee10 0a10 	vmov	r0, s0
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	f7ee fff0 	bl	8000b88 <__aeabi_d2iz>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	f000 8089 	beq.w	8011cc0 <__kernel_cos+0x140>
 8011bae:	4642      	mov	r2, r8
 8011bb0:	464b      	mov	r3, r9
 8011bb2:	4640      	mov	r0, r8
 8011bb4:	4649      	mov	r1, r9
 8011bb6:	f7ee fd37 	bl	8000628 <__aeabi_dmul>
 8011bba:	2200      	movs	r2, #0
 8011bbc:	4b4e      	ldr	r3, [pc, #312]	; (8011cf8 <__kernel_cos+0x178>)
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	460d      	mov	r5, r1
 8011bc2:	f7ee fd31 	bl	8000628 <__aeabi_dmul>
 8011bc6:	a340      	add	r3, pc, #256	; (adr r3, 8011cc8 <__kernel_cos+0x148>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	4682      	mov	sl, r0
 8011bce:	468b      	mov	fp, r1
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	4629      	mov	r1, r5
 8011bd4:	f7ee fd28 	bl	8000628 <__aeabi_dmul>
 8011bd8:	a33d      	add	r3, pc, #244	; (adr r3, 8011cd0 <__kernel_cos+0x150>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb6d 	bl	80002bc <__adddf3>
 8011be2:	4622      	mov	r2, r4
 8011be4:	462b      	mov	r3, r5
 8011be6:	f7ee fd1f 	bl	8000628 <__aeabi_dmul>
 8011bea:	a33b      	add	r3, pc, #236	; (adr r3, 8011cd8 <__kernel_cos+0x158>)
 8011bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf0:	f7ee fb62 	bl	80002b8 <__aeabi_dsub>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	462b      	mov	r3, r5
 8011bf8:	f7ee fd16 	bl	8000628 <__aeabi_dmul>
 8011bfc:	a338      	add	r3, pc, #224	; (adr r3, 8011ce0 <__kernel_cos+0x160>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee fb5b 	bl	80002bc <__adddf3>
 8011c06:	4622      	mov	r2, r4
 8011c08:	462b      	mov	r3, r5
 8011c0a:	f7ee fd0d 	bl	8000628 <__aeabi_dmul>
 8011c0e:	a336      	add	r3, pc, #216	; (adr r3, 8011ce8 <__kernel_cos+0x168>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	f7ee fb50 	bl	80002b8 <__aeabi_dsub>
 8011c18:	4622      	mov	r2, r4
 8011c1a:	462b      	mov	r3, r5
 8011c1c:	f7ee fd04 	bl	8000628 <__aeabi_dmul>
 8011c20:	a333      	add	r3, pc, #204	; (adr r3, 8011cf0 <__kernel_cos+0x170>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fb49 	bl	80002bc <__adddf3>
 8011c2a:	4622      	mov	r2, r4
 8011c2c:	462b      	mov	r3, r5
 8011c2e:	f7ee fcfb 	bl	8000628 <__aeabi_dmul>
 8011c32:	4622      	mov	r2, r4
 8011c34:	462b      	mov	r3, r5
 8011c36:	f7ee fcf7 	bl	8000628 <__aeabi_dmul>
 8011c3a:	ec53 2b18 	vmov	r2, r3, d8
 8011c3e:	4604      	mov	r4, r0
 8011c40:	460d      	mov	r5, r1
 8011c42:	4640      	mov	r0, r8
 8011c44:	4649      	mov	r1, r9
 8011c46:	f7ee fcef 	bl	8000628 <__aeabi_dmul>
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	4629      	mov	r1, r5
 8011c50:	4620      	mov	r0, r4
 8011c52:	f7ee fb31 	bl	80002b8 <__aeabi_dsub>
 8011c56:	4b29      	ldr	r3, [pc, #164]	; (8011cfc <__kernel_cos+0x17c>)
 8011c58:	429e      	cmp	r6, r3
 8011c5a:	4680      	mov	r8, r0
 8011c5c:	4689      	mov	r9, r1
 8011c5e:	dc11      	bgt.n	8011c84 <__kernel_cos+0x104>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	4650      	mov	r0, sl
 8011c66:	4659      	mov	r1, fp
 8011c68:	f7ee fb26 	bl	80002b8 <__aeabi_dsub>
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	4924      	ldr	r1, [pc, #144]	; (8011d00 <__kernel_cos+0x180>)
 8011c70:	4602      	mov	r2, r0
 8011c72:	2000      	movs	r0, #0
 8011c74:	f7ee fb20 	bl	80002b8 <__aeabi_dsub>
 8011c78:	ecbd 8b02 	vpop	{d8}
 8011c7c:	ec41 0b10 	vmov	d0, r0, r1
 8011c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c84:	4b1f      	ldr	r3, [pc, #124]	; (8011d04 <__kernel_cos+0x184>)
 8011c86:	491e      	ldr	r1, [pc, #120]	; (8011d00 <__kernel_cos+0x180>)
 8011c88:	429e      	cmp	r6, r3
 8011c8a:	bfcc      	ite	gt
 8011c8c:	4d1e      	ldrgt	r5, [pc, #120]	; (8011d08 <__kernel_cos+0x188>)
 8011c8e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011c92:	2400      	movs	r4, #0
 8011c94:	4622      	mov	r2, r4
 8011c96:	462b      	mov	r3, r5
 8011c98:	2000      	movs	r0, #0
 8011c9a:	f7ee fb0d 	bl	80002b8 <__aeabi_dsub>
 8011c9e:	4622      	mov	r2, r4
 8011ca0:	4606      	mov	r6, r0
 8011ca2:	460f      	mov	r7, r1
 8011ca4:	462b      	mov	r3, r5
 8011ca6:	4650      	mov	r0, sl
 8011ca8:	4659      	mov	r1, fp
 8011caa:	f7ee fb05 	bl	80002b8 <__aeabi_dsub>
 8011cae:	4642      	mov	r2, r8
 8011cb0:	464b      	mov	r3, r9
 8011cb2:	f7ee fb01 	bl	80002b8 <__aeabi_dsub>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	460b      	mov	r3, r1
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	e7d9      	b.n	8011c74 <__kernel_cos+0xf4>
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	490f      	ldr	r1, [pc, #60]	; (8011d00 <__kernel_cos+0x180>)
 8011cc4:	e7d8      	b.n	8011c78 <__kernel_cos+0xf8>
 8011cc6:	bf00      	nop
 8011cc8:	be8838d4 	.word	0xbe8838d4
 8011ccc:	bda8fae9 	.word	0xbda8fae9
 8011cd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011cd4:	3e21ee9e 	.word	0x3e21ee9e
 8011cd8:	809c52ad 	.word	0x809c52ad
 8011cdc:	3e927e4f 	.word	0x3e927e4f
 8011ce0:	19cb1590 	.word	0x19cb1590
 8011ce4:	3efa01a0 	.word	0x3efa01a0
 8011ce8:	16c15177 	.word	0x16c15177
 8011cec:	3f56c16c 	.word	0x3f56c16c
 8011cf0:	5555554c 	.word	0x5555554c
 8011cf4:	3fa55555 	.word	0x3fa55555
 8011cf8:	3fe00000 	.word	0x3fe00000
 8011cfc:	3fd33332 	.word	0x3fd33332
 8011d00:	3ff00000 	.word	0x3ff00000
 8011d04:	3fe90000 	.word	0x3fe90000
 8011d08:	3fd20000 	.word	0x3fd20000
 8011d0c:	00000000 	.word	0x00000000

08011d10 <__kernel_rem_pio2>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	ed2d 8b02 	vpush	{d8}
 8011d18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011d1c:	1ed4      	subs	r4, r2, #3
 8011d1e:	9308      	str	r3, [sp, #32]
 8011d20:	9101      	str	r1, [sp, #4]
 8011d22:	4bc5      	ldr	r3, [pc, #788]	; (8012038 <__kernel_rem_pio2+0x328>)
 8011d24:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011d26:	9009      	str	r0, [sp, #36]	; 0x24
 8011d28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d2c:	9304      	str	r3, [sp, #16]
 8011d2e:	9b08      	ldr	r3, [sp, #32]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	9307      	str	r3, [sp, #28]
 8011d34:	2318      	movs	r3, #24
 8011d36:	fb94 f4f3 	sdiv	r4, r4, r3
 8011d3a:	f06f 0317 	mvn.w	r3, #23
 8011d3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011d42:	fb04 3303 	mla	r3, r4, r3, r3
 8011d46:	eb03 0a02 	add.w	sl, r3, r2
 8011d4a:	9b04      	ldr	r3, [sp, #16]
 8011d4c:	9a07      	ldr	r2, [sp, #28]
 8011d4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012028 <__kernel_rem_pio2+0x318>
 8011d52:	eb03 0802 	add.w	r8, r3, r2
 8011d56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011d58:	1aa7      	subs	r7, r4, r2
 8011d5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011d5e:	ae22      	add	r6, sp, #136	; 0x88
 8011d60:	2500      	movs	r5, #0
 8011d62:	4545      	cmp	r5, r8
 8011d64:	dd13      	ble.n	8011d8e <__kernel_rem_pio2+0x7e>
 8011d66:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012028 <__kernel_rem_pio2+0x318>
 8011d6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011d6e:	2600      	movs	r6, #0
 8011d70:	9b04      	ldr	r3, [sp, #16]
 8011d72:	429e      	cmp	r6, r3
 8011d74:	dc32      	bgt.n	8011ddc <__kernel_rem_pio2+0xcc>
 8011d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d78:	9302      	str	r3, [sp, #8]
 8011d7a:	9b08      	ldr	r3, [sp, #32]
 8011d7c:	199d      	adds	r5, r3, r6
 8011d7e:	ab22      	add	r3, sp, #136	; 0x88
 8011d80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011d84:	9306      	str	r3, [sp, #24]
 8011d86:	ec59 8b18 	vmov	r8, r9, d8
 8011d8a:	2700      	movs	r7, #0
 8011d8c:	e01f      	b.n	8011dce <__kernel_rem_pio2+0xbe>
 8011d8e:	42ef      	cmn	r7, r5
 8011d90:	d407      	bmi.n	8011da2 <__kernel_rem_pio2+0x92>
 8011d92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011d96:	f7ee fbdd 	bl	8000554 <__aeabi_i2d>
 8011d9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011d9e:	3501      	adds	r5, #1
 8011da0:	e7df      	b.n	8011d62 <__kernel_rem_pio2+0x52>
 8011da2:	ec51 0b18 	vmov	r0, r1, d8
 8011da6:	e7f8      	b.n	8011d9a <__kernel_rem_pio2+0x8a>
 8011da8:	9906      	ldr	r1, [sp, #24]
 8011daa:	9d02      	ldr	r5, [sp, #8]
 8011dac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011db0:	9106      	str	r1, [sp, #24]
 8011db2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011db6:	9502      	str	r5, [sp, #8]
 8011db8:	f7ee fc36 	bl	8000628 <__aeabi_dmul>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	4649      	mov	r1, r9
 8011dc4:	f7ee fa7a 	bl	80002bc <__adddf3>
 8011dc8:	3701      	adds	r7, #1
 8011dca:	4680      	mov	r8, r0
 8011dcc:	4689      	mov	r9, r1
 8011dce:	9b07      	ldr	r3, [sp, #28]
 8011dd0:	429f      	cmp	r7, r3
 8011dd2:	dde9      	ble.n	8011da8 <__kernel_rem_pio2+0x98>
 8011dd4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011dd8:	3601      	adds	r6, #1
 8011dda:	e7c9      	b.n	8011d70 <__kernel_rem_pio2+0x60>
 8011ddc:	9b04      	ldr	r3, [sp, #16]
 8011dde:	aa0e      	add	r2, sp, #56	; 0x38
 8011de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011de4:	930c      	str	r3, [sp, #48]	; 0x30
 8011de6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011de8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011dec:	9c04      	ldr	r4, [sp, #16]
 8011dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8011df0:	ab9a      	add	r3, sp, #616	; 0x268
 8011df2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011df6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011dfe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011e02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011e06:	ab9a      	add	r3, sp, #616	; 0x268
 8011e08:	445b      	add	r3, fp
 8011e0a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011e0e:	2500      	movs	r5, #0
 8011e10:	1b63      	subs	r3, r4, r5
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	dc78      	bgt.n	8011f08 <__kernel_rem_pio2+0x1f8>
 8011e16:	4650      	mov	r0, sl
 8011e18:	ec49 8b10 	vmov	d0, r8, r9
 8011e1c:	f000 fc00 	bl	8012620 <scalbn>
 8011e20:	ec57 6b10 	vmov	r6, r7, d0
 8011e24:	2200      	movs	r2, #0
 8011e26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011e2a:	ee10 0a10 	vmov	r0, s0
 8011e2e:	4639      	mov	r1, r7
 8011e30:	f7ee fbfa 	bl	8000628 <__aeabi_dmul>
 8011e34:	ec41 0b10 	vmov	d0, r0, r1
 8011e38:	f000 fb6e 	bl	8012518 <floor>
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	ec51 0b10 	vmov	r0, r1, d0
 8011e42:	4b7e      	ldr	r3, [pc, #504]	; (801203c <__kernel_rem_pio2+0x32c>)
 8011e44:	f7ee fbf0 	bl	8000628 <__aeabi_dmul>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	4639      	mov	r1, r7
 8011e50:	f7ee fa32 	bl	80002b8 <__aeabi_dsub>
 8011e54:	460f      	mov	r7, r1
 8011e56:	4606      	mov	r6, r0
 8011e58:	f7ee fe96 	bl	8000b88 <__aeabi_d2iz>
 8011e5c:	9006      	str	r0, [sp, #24]
 8011e5e:	f7ee fb79 	bl	8000554 <__aeabi_i2d>
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	4630      	mov	r0, r6
 8011e68:	4639      	mov	r1, r7
 8011e6a:	f7ee fa25 	bl	80002b8 <__aeabi_dsub>
 8011e6e:	f1ba 0f00 	cmp.w	sl, #0
 8011e72:	4606      	mov	r6, r0
 8011e74:	460f      	mov	r7, r1
 8011e76:	dd6c      	ble.n	8011f52 <__kernel_rem_pio2+0x242>
 8011e78:	1e62      	subs	r2, r4, #1
 8011e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8011e7c:	f1ca 0118 	rsb	r1, sl, #24
 8011e80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011e84:	9d06      	ldr	r5, [sp, #24]
 8011e86:	fa40 f301 	asr.w	r3, r0, r1
 8011e8a:	441d      	add	r5, r3
 8011e8c:	408b      	lsls	r3, r1
 8011e8e:	1ac0      	subs	r0, r0, r3
 8011e90:	ab0e      	add	r3, sp, #56	; 0x38
 8011e92:	9506      	str	r5, [sp, #24]
 8011e94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011e98:	f1ca 0317 	rsb	r3, sl, #23
 8011e9c:	fa40 f303 	asr.w	r3, r0, r3
 8011ea0:	9302      	str	r3, [sp, #8]
 8011ea2:	9b02      	ldr	r3, [sp, #8]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dd62      	ble.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	3301      	adds	r3, #1
 8011eae:	9306      	str	r3, [sp, #24]
 8011eb0:	4615      	mov	r5, r2
 8011eb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011eb6:	4294      	cmp	r4, r2
 8011eb8:	f300 8095 	bgt.w	8011fe6 <__kernel_rem_pio2+0x2d6>
 8011ebc:	f1ba 0f00 	cmp.w	sl, #0
 8011ec0:	dd07      	ble.n	8011ed2 <__kernel_rem_pio2+0x1c2>
 8011ec2:	f1ba 0f01 	cmp.w	sl, #1
 8011ec6:	f000 80a2 	beq.w	801200e <__kernel_rem_pio2+0x2fe>
 8011eca:	f1ba 0f02 	cmp.w	sl, #2
 8011ece:	f000 80c1 	beq.w	8012054 <__kernel_rem_pio2+0x344>
 8011ed2:	9b02      	ldr	r3, [sp, #8]
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d14a      	bne.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011ed8:	4632      	mov	r2, r6
 8011eda:	463b      	mov	r3, r7
 8011edc:	2000      	movs	r0, #0
 8011ede:	4958      	ldr	r1, [pc, #352]	; (8012040 <__kernel_rem_pio2+0x330>)
 8011ee0:	f7ee f9ea 	bl	80002b8 <__aeabi_dsub>
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460f      	mov	r7, r1
 8011ee8:	2d00      	cmp	r5, #0
 8011eea:	d040      	beq.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011eec:	4650      	mov	r0, sl
 8011eee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012030 <__kernel_rem_pio2+0x320>
 8011ef2:	f000 fb95 	bl	8012620 <scalbn>
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	4639      	mov	r1, r7
 8011efa:	ec53 2b10 	vmov	r2, r3, d0
 8011efe:	f7ee f9db 	bl	80002b8 <__aeabi_dsub>
 8011f02:	4606      	mov	r6, r0
 8011f04:	460f      	mov	r7, r1
 8011f06:	e032      	b.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011f08:	2200      	movs	r2, #0
 8011f0a:	4b4e      	ldr	r3, [pc, #312]	; (8012044 <__kernel_rem_pio2+0x334>)
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	4649      	mov	r1, r9
 8011f10:	f7ee fb8a 	bl	8000628 <__aeabi_dmul>
 8011f14:	f7ee fe38 	bl	8000b88 <__aeabi_d2iz>
 8011f18:	f7ee fb1c 	bl	8000554 <__aeabi_i2d>
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	4b4a      	ldr	r3, [pc, #296]	; (8012048 <__kernel_rem_pio2+0x338>)
 8011f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f24:	f7ee fb80 	bl	8000628 <__aeabi_dmul>
 8011f28:	4602      	mov	r2, r0
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	4640      	mov	r0, r8
 8011f2e:	4649      	mov	r1, r9
 8011f30:	f7ee f9c2 	bl	80002b8 <__aeabi_dsub>
 8011f34:	f7ee fe28 	bl	8000b88 <__aeabi_d2iz>
 8011f38:	ab0e      	add	r3, sp, #56	; 0x38
 8011f3a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011f3e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f46:	f7ee f9b9 	bl	80002bc <__adddf3>
 8011f4a:	3501      	adds	r5, #1
 8011f4c:	4680      	mov	r8, r0
 8011f4e:	4689      	mov	r9, r1
 8011f50:	e75e      	b.n	8011e10 <__kernel_rem_pio2+0x100>
 8011f52:	d105      	bne.n	8011f60 <__kernel_rem_pio2+0x250>
 8011f54:	1e63      	subs	r3, r4, #1
 8011f56:	aa0e      	add	r2, sp, #56	; 0x38
 8011f58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f5c:	15c3      	asrs	r3, r0, #23
 8011f5e:	e79f      	b.n	8011ea0 <__kernel_rem_pio2+0x190>
 8011f60:	2200      	movs	r2, #0
 8011f62:	4b3a      	ldr	r3, [pc, #232]	; (801204c <__kernel_rem_pio2+0x33c>)
 8011f64:	f7ee fde6 	bl	8000b34 <__aeabi_dcmpge>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d139      	bne.n	8011fe0 <__kernel_rem_pio2+0x2d0>
 8011f6c:	9002      	str	r0, [sp, #8]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	2300      	movs	r3, #0
 8011f72:	4630      	mov	r0, r6
 8011f74:	4639      	mov	r1, r7
 8011f76:	f7ee fdbf 	bl	8000af8 <__aeabi_dcmpeq>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f000 80c7 	beq.w	801210e <__kernel_rem_pio2+0x3fe>
 8011f80:	1e65      	subs	r5, r4, #1
 8011f82:	462b      	mov	r3, r5
 8011f84:	2200      	movs	r2, #0
 8011f86:	9904      	ldr	r1, [sp, #16]
 8011f88:	428b      	cmp	r3, r1
 8011f8a:	da6a      	bge.n	8012062 <__kernel_rem_pio2+0x352>
 8011f8c:	2a00      	cmp	r2, #0
 8011f8e:	f000 8088 	beq.w	80120a2 <__kernel_rem_pio2+0x392>
 8011f92:	ab0e      	add	r3, sp, #56	; 0x38
 8011f94:	f1aa 0a18 	sub.w	sl, sl, #24
 8011f98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f000 80b4 	beq.w	801210a <__kernel_rem_pio2+0x3fa>
 8011fa2:	4650      	mov	r0, sl
 8011fa4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012030 <__kernel_rem_pio2+0x320>
 8011fa8:	f000 fb3a 	bl	8012620 <scalbn>
 8011fac:	00ec      	lsls	r4, r5, #3
 8011fae:	ab72      	add	r3, sp, #456	; 0x1c8
 8011fb0:	191e      	adds	r6, r3, r4
 8011fb2:	ec59 8b10 	vmov	r8, r9, d0
 8011fb6:	f106 0a08 	add.w	sl, r6, #8
 8011fba:	462f      	mov	r7, r5
 8011fbc:	2f00      	cmp	r7, #0
 8011fbe:	f280 80df 	bge.w	8012180 <__kernel_rem_pio2+0x470>
 8011fc2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012028 <__kernel_rem_pio2+0x318>
 8011fc6:	f04f 0a00 	mov.w	sl, #0
 8011fca:	eba5 030a 	sub.w	r3, r5, sl
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	f2c0 810a 	blt.w	80121e8 <__kernel_rem_pio2+0x4d8>
 8011fd4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012050 <__kernel_rem_pio2+0x340>
 8011fd8:	ec59 8b18 	vmov	r8, r9, d8
 8011fdc:	2700      	movs	r7, #0
 8011fde:	e0f5      	b.n	80121cc <__kernel_rem_pio2+0x4bc>
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	9302      	str	r3, [sp, #8]
 8011fe4:	e760      	b.n	8011ea8 <__kernel_rem_pio2+0x198>
 8011fe6:	ab0e      	add	r3, sp, #56	; 0x38
 8011fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fec:	b94d      	cbnz	r5, 8012002 <__kernel_rem_pio2+0x2f2>
 8011fee:	b12b      	cbz	r3, 8011ffc <__kernel_rem_pio2+0x2ec>
 8011ff0:	a80e      	add	r0, sp, #56	; 0x38
 8011ff2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011ff6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	3201      	adds	r2, #1
 8011ffe:	461d      	mov	r5, r3
 8012000:	e759      	b.n	8011eb6 <__kernel_rem_pio2+0x1a6>
 8012002:	a80e      	add	r0, sp, #56	; 0x38
 8012004:	1acb      	subs	r3, r1, r3
 8012006:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801200a:	462b      	mov	r3, r5
 801200c:	e7f6      	b.n	8011ffc <__kernel_rem_pio2+0x2ec>
 801200e:	1e62      	subs	r2, r4, #1
 8012010:	ab0e      	add	r3, sp, #56	; 0x38
 8012012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012016:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801201a:	a90e      	add	r1, sp, #56	; 0x38
 801201c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012020:	e757      	b.n	8011ed2 <__kernel_rem_pio2+0x1c2>
 8012022:	bf00      	nop
 8012024:	f3af 8000 	nop.w
	...
 8012034:	3ff00000 	.word	0x3ff00000
 8012038:	08017b30 	.word	0x08017b30
 801203c:	40200000 	.word	0x40200000
 8012040:	3ff00000 	.word	0x3ff00000
 8012044:	3e700000 	.word	0x3e700000
 8012048:	41700000 	.word	0x41700000
 801204c:	3fe00000 	.word	0x3fe00000
 8012050:	08017af0 	.word	0x08017af0
 8012054:	1e62      	subs	r2, r4, #1
 8012056:	ab0e      	add	r3, sp, #56	; 0x38
 8012058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012060:	e7db      	b.n	801201a <__kernel_rem_pio2+0x30a>
 8012062:	a90e      	add	r1, sp, #56	; 0x38
 8012064:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012068:	3b01      	subs	r3, #1
 801206a:	430a      	orrs	r2, r1
 801206c:	e78b      	b.n	8011f86 <__kernel_rem_pio2+0x276>
 801206e:	3301      	adds	r3, #1
 8012070:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012074:	2900      	cmp	r1, #0
 8012076:	d0fa      	beq.n	801206e <__kernel_rem_pio2+0x35e>
 8012078:	9a08      	ldr	r2, [sp, #32]
 801207a:	4422      	add	r2, r4
 801207c:	00d2      	lsls	r2, r2, #3
 801207e:	a922      	add	r1, sp, #136	; 0x88
 8012080:	18e3      	adds	r3, r4, r3
 8012082:	9206      	str	r2, [sp, #24]
 8012084:	440a      	add	r2, r1
 8012086:	9302      	str	r3, [sp, #8]
 8012088:	f10b 0108 	add.w	r1, fp, #8
 801208c:	f102 0308 	add.w	r3, r2, #8
 8012090:	1c66      	adds	r6, r4, #1
 8012092:	910a      	str	r1, [sp, #40]	; 0x28
 8012094:	2500      	movs	r5, #0
 8012096:	930d      	str	r3, [sp, #52]	; 0x34
 8012098:	9b02      	ldr	r3, [sp, #8]
 801209a:	42b3      	cmp	r3, r6
 801209c:	da04      	bge.n	80120a8 <__kernel_rem_pio2+0x398>
 801209e:	461c      	mov	r4, r3
 80120a0:	e6a6      	b.n	8011df0 <__kernel_rem_pio2+0xe0>
 80120a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120a4:	2301      	movs	r3, #1
 80120a6:	e7e3      	b.n	8012070 <__kernel_rem_pio2+0x360>
 80120a8:	9b06      	ldr	r3, [sp, #24]
 80120aa:	18ef      	adds	r7, r5, r3
 80120ac:	ab22      	add	r3, sp, #136	; 0x88
 80120ae:	441f      	add	r7, r3
 80120b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80120b6:	f7ee fa4d 	bl	8000554 <__aeabi_i2d>
 80120ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120bc:	461c      	mov	r4, r3
 80120be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120c0:	e9c7 0100 	strd	r0, r1, [r7]
 80120c4:	eb03 0b05 	add.w	fp, r3, r5
 80120c8:	2700      	movs	r7, #0
 80120ca:	f04f 0800 	mov.w	r8, #0
 80120ce:	f04f 0900 	mov.w	r9, #0
 80120d2:	9b07      	ldr	r3, [sp, #28]
 80120d4:	429f      	cmp	r7, r3
 80120d6:	dd08      	ble.n	80120ea <__kernel_rem_pio2+0x3da>
 80120d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120da:	aa72      	add	r2, sp, #456	; 0x1c8
 80120dc:	18eb      	adds	r3, r5, r3
 80120de:	4413      	add	r3, r2
 80120e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80120e4:	3601      	adds	r6, #1
 80120e6:	3508      	adds	r5, #8
 80120e8:	e7d6      	b.n	8012098 <__kernel_rem_pio2+0x388>
 80120ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80120ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80120f2:	f7ee fa99 	bl	8000628 <__aeabi_dmul>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	4640      	mov	r0, r8
 80120fc:	4649      	mov	r1, r9
 80120fe:	f7ee f8dd 	bl	80002bc <__adddf3>
 8012102:	3701      	adds	r7, #1
 8012104:	4680      	mov	r8, r0
 8012106:	4689      	mov	r9, r1
 8012108:	e7e3      	b.n	80120d2 <__kernel_rem_pio2+0x3c2>
 801210a:	3d01      	subs	r5, #1
 801210c:	e741      	b.n	8011f92 <__kernel_rem_pio2+0x282>
 801210e:	f1ca 0000 	rsb	r0, sl, #0
 8012112:	ec47 6b10 	vmov	d0, r6, r7
 8012116:	f000 fa83 	bl	8012620 <scalbn>
 801211a:	ec57 6b10 	vmov	r6, r7, d0
 801211e:	2200      	movs	r2, #0
 8012120:	4b99      	ldr	r3, [pc, #612]	; (8012388 <__kernel_rem_pio2+0x678>)
 8012122:	ee10 0a10 	vmov	r0, s0
 8012126:	4639      	mov	r1, r7
 8012128:	f7ee fd04 	bl	8000b34 <__aeabi_dcmpge>
 801212c:	b1f8      	cbz	r0, 801216e <__kernel_rem_pio2+0x45e>
 801212e:	2200      	movs	r2, #0
 8012130:	4b96      	ldr	r3, [pc, #600]	; (801238c <__kernel_rem_pio2+0x67c>)
 8012132:	4630      	mov	r0, r6
 8012134:	4639      	mov	r1, r7
 8012136:	f7ee fa77 	bl	8000628 <__aeabi_dmul>
 801213a:	f7ee fd25 	bl	8000b88 <__aeabi_d2iz>
 801213e:	4680      	mov	r8, r0
 8012140:	f7ee fa08 	bl	8000554 <__aeabi_i2d>
 8012144:	2200      	movs	r2, #0
 8012146:	4b90      	ldr	r3, [pc, #576]	; (8012388 <__kernel_rem_pio2+0x678>)
 8012148:	f7ee fa6e 	bl	8000628 <__aeabi_dmul>
 801214c:	460b      	mov	r3, r1
 801214e:	4602      	mov	r2, r0
 8012150:	4639      	mov	r1, r7
 8012152:	4630      	mov	r0, r6
 8012154:	f7ee f8b0 	bl	80002b8 <__aeabi_dsub>
 8012158:	f7ee fd16 	bl	8000b88 <__aeabi_d2iz>
 801215c:	1c65      	adds	r5, r4, #1
 801215e:	ab0e      	add	r3, sp, #56	; 0x38
 8012160:	f10a 0a18 	add.w	sl, sl, #24
 8012164:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012168:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801216c:	e719      	b.n	8011fa2 <__kernel_rem_pio2+0x292>
 801216e:	4630      	mov	r0, r6
 8012170:	4639      	mov	r1, r7
 8012172:	f7ee fd09 	bl	8000b88 <__aeabi_d2iz>
 8012176:	ab0e      	add	r3, sp, #56	; 0x38
 8012178:	4625      	mov	r5, r4
 801217a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801217e:	e710      	b.n	8011fa2 <__kernel_rem_pio2+0x292>
 8012180:	ab0e      	add	r3, sp, #56	; 0x38
 8012182:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012186:	f7ee f9e5 	bl	8000554 <__aeabi_i2d>
 801218a:	4642      	mov	r2, r8
 801218c:	464b      	mov	r3, r9
 801218e:	f7ee fa4b 	bl	8000628 <__aeabi_dmul>
 8012192:	2200      	movs	r2, #0
 8012194:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012198:	4b7c      	ldr	r3, [pc, #496]	; (801238c <__kernel_rem_pio2+0x67c>)
 801219a:	4640      	mov	r0, r8
 801219c:	4649      	mov	r1, r9
 801219e:	f7ee fa43 	bl	8000628 <__aeabi_dmul>
 80121a2:	3f01      	subs	r7, #1
 80121a4:	4680      	mov	r8, r0
 80121a6:	4689      	mov	r9, r1
 80121a8:	e708      	b.n	8011fbc <__kernel_rem_pio2+0x2ac>
 80121aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80121ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80121b6:	f7ee fa37 	bl	8000628 <__aeabi_dmul>
 80121ba:	4602      	mov	r2, r0
 80121bc:	460b      	mov	r3, r1
 80121be:	4640      	mov	r0, r8
 80121c0:	4649      	mov	r1, r9
 80121c2:	f7ee f87b 	bl	80002bc <__adddf3>
 80121c6:	3701      	adds	r7, #1
 80121c8:	4680      	mov	r8, r0
 80121ca:	4689      	mov	r9, r1
 80121cc:	9b04      	ldr	r3, [sp, #16]
 80121ce:	429f      	cmp	r7, r3
 80121d0:	dc01      	bgt.n	80121d6 <__kernel_rem_pio2+0x4c6>
 80121d2:	45ba      	cmp	sl, r7
 80121d4:	dae9      	bge.n	80121aa <__kernel_rem_pio2+0x49a>
 80121d6:	ab4a      	add	r3, sp, #296	; 0x128
 80121d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121dc:	e9c3 8900 	strd	r8, r9, [r3]
 80121e0:	f10a 0a01 	add.w	sl, sl, #1
 80121e4:	3e08      	subs	r6, #8
 80121e6:	e6f0      	b.n	8011fca <__kernel_rem_pio2+0x2ba>
 80121e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80121ea:	2b03      	cmp	r3, #3
 80121ec:	d85b      	bhi.n	80122a6 <__kernel_rem_pio2+0x596>
 80121ee:	e8df f003 	tbb	[pc, r3]
 80121f2:	264a      	.short	0x264a
 80121f4:	0226      	.short	0x0226
 80121f6:	ab9a      	add	r3, sp, #616	; 0x268
 80121f8:	441c      	add	r4, r3
 80121fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80121fe:	46a2      	mov	sl, r4
 8012200:	46ab      	mov	fp, r5
 8012202:	f1bb 0f00 	cmp.w	fp, #0
 8012206:	dc6c      	bgt.n	80122e2 <__kernel_rem_pio2+0x5d2>
 8012208:	46a2      	mov	sl, r4
 801220a:	46ab      	mov	fp, r5
 801220c:	f1bb 0f01 	cmp.w	fp, #1
 8012210:	f300 8086 	bgt.w	8012320 <__kernel_rem_pio2+0x610>
 8012214:	2000      	movs	r0, #0
 8012216:	2100      	movs	r1, #0
 8012218:	2d01      	cmp	r5, #1
 801221a:	f300 80a0 	bgt.w	801235e <__kernel_rem_pio2+0x64e>
 801221e:	9b02      	ldr	r3, [sp, #8]
 8012220:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012224:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012228:	2b00      	cmp	r3, #0
 801222a:	f040 809e 	bne.w	801236a <__kernel_rem_pio2+0x65a>
 801222e:	9b01      	ldr	r3, [sp, #4]
 8012230:	e9c3 7800 	strd	r7, r8, [r3]
 8012234:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012238:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801223c:	e033      	b.n	80122a6 <__kernel_rem_pio2+0x596>
 801223e:	3408      	adds	r4, #8
 8012240:	ab4a      	add	r3, sp, #296	; 0x128
 8012242:	441c      	add	r4, r3
 8012244:	462e      	mov	r6, r5
 8012246:	2000      	movs	r0, #0
 8012248:	2100      	movs	r1, #0
 801224a:	2e00      	cmp	r6, #0
 801224c:	da3a      	bge.n	80122c4 <__kernel_rem_pio2+0x5b4>
 801224e:	9b02      	ldr	r3, [sp, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d03d      	beq.n	80122d0 <__kernel_rem_pio2+0x5c0>
 8012254:	4602      	mov	r2, r0
 8012256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801225a:	9c01      	ldr	r4, [sp, #4]
 801225c:	e9c4 2300 	strd	r2, r3, [r4]
 8012260:	4602      	mov	r2, r0
 8012262:	460b      	mov	r3, r1
 8012264:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012268:	f7ee f826 	bl	80002b8 <__aeabi_dsub>
 801226c:	ae4c      	add	r6, sp, #304	; 0x130
 801226e:	2401      	movs	r4, #1
 8012270:	42a5      	cmp	r5, r4
 8012272:	da30      	bge.n	80122d6 <__kernel_rem_pio2+0x5c6>
 8012274:	9b02      	ldr	r3, [sp, #8]
 8012276:	b113      	cbz	r3, 801227e <__kernel_rem_pio2+0x56e>
 8012278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801227c:	4619      	mov	r1, r3
 801227e:	9b01      	ldr	r3, [sp, #4]
 8012280:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012284:	e00f      	b.n	80122a6 <__kernel_rem_pio2+0x596>
 8012286:	ab9a      	add	r3, sp, #616	; 0x268
 8012288:	441c      	add	r4, r3
 801228a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801228e:	2000      	movs	r0, #0
 8012290:	2100      	movs	r1, #0
 8012292:	2d00      	cmp	r5, #0
 8012294:	da10      	bge.n	80122b8 <__kernel_rem_pio2+0x5a8>
 8012296:	9b02      	ldr	r3, [sp, #8]
 8012298:	b113      	cbz	r3, 80122a0 <__kernel_rem_pio2+0x590>
 801229a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801229e:	4619      	mov	r1, r3
 80122a0:	9b01      	ldr	r3, [sp, #4]
 80122a2:	e9c3 0100 	strd	r0, r1, [r3]
 80122a6:	9b06      	ldr	r3, [sp, #24]
 80122a8:	f003 0007 	and.w	r0, r3, #7
 80122ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80122b0:	ecbd 8b02 	vpop	{d8}
 80122b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122bc:	f7ed fffe 	bl	80002bc <__adddf3>
 80122c0:	3d01      	subs	r5, #1
 80122c2:	e7e6      	b.n	8012292 <__kernel_rem_pio2+0x582>
 80122c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122c8:	f7ed fff8 	bl	80002bc <__adddf3>
 80122cc:	3e01      	subs	r6, #1
 80122ce:	e7bc      	b.n	801224a <__kernel_rem_pio2+0x53a>
 80122d0:	4602      	mov	r2, r0
 80122d2:	460b      	mov	r3, r1
 80122d4:	e7c1      	b.n	801225a <__kernel_rem_pio2+0x54a>
 80122d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80122da:	f7ed ffef 	bl	80002bc <__adddf3>
 80122de:	3401      	adds	r4, #1
 80122e0:	e7c6      	b.n	8012270 <__kernel_rem_pio2+0x560>
 80122e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80122e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80122ea:	4640      	mov	r0, r8
 80122ec:	ec53 2b17 	vmov	r2, r3, d7
 80122f0:	4649      	mov	r1, r9
 80122f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80122f6:	f7ed ffe1 	bl	80002bc <__adddf3>
 80122fa:	4602      	mov	r2, r0
 80122fc:	460b      	mov	r3, r1
 80122fe:	4606      	mov	r6, r0
 8012300:	460f      	mov	r7, r1
 8012302:	4640      	mov	r0, r8
 8012304:	4649      	mov	r1, r9
 8012306:	f7ed ffd7 	bl	80002b8 <__aeabi_dsub>
 801230a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801230e:	f7ed ffd5 	bl	80002bc <__adddf3>
 8012312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012316:	e9ca 0100 	strd	r0, r1, [sl]
 801231a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801231e:	e770      	b.n	8012202 <__kernel_rem_pio2+0x4f2>
 8012320:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012324:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012328:	4630      	mov	r0, r6
 801232a:	ec53 2b17 	vmov	r2, r3, d7
 801232e:	4639      	mov	r1, r7
 8012330:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012334:	f7ed ffc2 	bl	80002bc <__adddf3>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4680      	mov	r8, r0
 801233e:	4689      	mov	r9, r1
 8012340:	4630      	mov	r0, r6
 8012342:	4639      	mov	r1, r7
 8012344:	f7ed ffb8 	bl	80002b8 <__aeabi_dsub>
 8012348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801234c:	f7ed ffb6 	bl	80002bc <__adddf3>
 8012350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012354:	e9ca 0100 	strd	r0, r1, [sl]
 8012358:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801235c:	e756      	b.n	801220c <__kernel_rem_pio2+0x4fc>
 801235e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012362:	f7ed ffab 	bl	80002bc <__adddf3>
 8012366:	3d01      	subs	r5, #1
 8012368:	e756      	b.n	8012218 <__kernel_rem_pio2+0x508>
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	9a01      	ldr	r2, [sp, #4]
 801236e:	601f      	str	r7, [r3, #0]
 8012370:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012374:	605c      	str	r4, [r3, #4]
 8012376:	609d      	str	r5, [r3, #8]
 8012378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801237c:	60d3      	str	r3, [r2, #12]
 801237e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012382:	6110      	str	r0, [r2, #16]
 8012384:	6153      	str	r3, [r2, #20]
 8012386:	e78e      	b.n	80122a6 <__kernel_rem_pio2+0x596>
 8012388:	41700000 	.word	0x41700000
 801238c:	3e700000 	.word	0x3e700000

08012390 <__kernel_sin>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	ec55 4b10 	vmov	r4, r5, d0
 8012398:	b085      	sub	sp, #20
 801239a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801239e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80123a2:	ed8d 1b00 	vstr	d1, [sp]
 80123a6:	9002      	str	r0, [sp, #8]
 80123a8:	da06      	bge.n	80123b8 <__kernel_sin+0x28>
 80123aa:	ee10 0a10 	vmov	r0, s0
 80123ae:	4629      	mov	r1, r5
 80123b0:	f7ee fbea 	bl	8000b88 <__aeabi_d2iz>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d051      	beq.n	801245c <__kernel_sin+0xcc>
 80123b8:	4622      	mov	r2, r4
 80123ba:	462b      	mov	r3, r5
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f7ee f932 	bl	8000628 <__aeabi_dmul>
 80123c4:	4682      	mov	sl, r0
 80123c6:	468b      	mov	fp, r1
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	4620      	mov	r0, r4
 80123ce:	4629      	mov	r1, r5
 80123d0:	f7ee f92a 	bl	8000628 <__aeabi_dmul>
 80123d4:	a341      	add	r3, pc, #260	; (adr r3, 80124dc <__kernel_sin+0x14c>)
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	4680      	mov	r8, r0
 80123dc:	4689      	mov	r9, r1
 80123de:	4650      	mov	r0, sl
 80123e0:	4659      	mov	r1, fp
 80123e2:	f7ee f921 	bl	8000628 <__aeabi_dmul>
 80123e6:	a33f      	add	r3, pc, #252	; (adr r3, 80124e4 <__kernel_sin+0x154>)
 80123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ec:	f7ed ff64 	bl	80002b8 <__aeabi_dsub>
 80123f0:	4652      	mov	r2, sl
 80123f2:	465b      	mov	r3, fp
 80123f4:	f7ee f918 	bl	8000628 <__aeabi_dmul>
 80123f8:	a33c      	add	r3, pc, #240	; (adr r3, 80124ec <__kernel_sin+0x15c>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	f7ed ff5d 	bl	80002bc <__adddf3>
 8012402:	4652      	mov	r2, sl
 8012404:	465b      	mov	r3, fp
 8012406:	f7ee f90f 	bl	8000628 <__aeabi_dmul>
 801240a:	a33a      	add	r3, pc, #232	; (adr r3, 80124f4 <__kernel_sin+0x164>)
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ed ff52 	bl	80002b8 <__aeabi_dsub>
 8012414:	4652      	mov	r2, sl
 8012416:	465b      	mov	r3, fp
 8012418:	f7ee f906 	bl	8000628 <__aeabi_dmul>
 801241c:	a337      	add	r3, pc, #220	; (adr r3, 80124fc <__kernel_sin+0x16c>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	f7ed ff4b 	bl	80002bc <__adddf3>
 8012426:	9b02      	ldr	r3, [sp, #8]
 8012428:	4606      	mov	r6, r0
 801242a:	460f      	mov	r7, r1
 801242c:	b9db      	cbnz	r3, 8012466 <__kernel_sin+0xd6>
 801242e:	4602      	mov	r2, r0
 8012430:	460b      	mov	r3, r1
 8012432:	4650      	mov	r0, sl
 8012434:	4659      	mov	r1, fp
 8012436:	f7ee f8f7 	bl	8000628 <__aeabi_dmul>
 801243a:	a325      	add	r3, pc, #148	; (adr r3, 80124d0 <__kernel_sin+0x140>)
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ed ff3a 	bl	80002b8 <__aeabi_dsub>
 8012444:	4642      	mov	r2, r8
 8012446:	464b      	mov	r3, r9
 8012448:	f7ee f8ee 	bl	8000628 <__aeabi_dmul>
 801244c:	4602      	mov	r2, r0
 801244e:	460b      	mov	r3, r1
 8012450:	4620      	mov	r0, r4
 8012452:	4629      	mov	r1, r5
 8012454:	f7ed ff32 	bl	80002bc <__adddf3>
 8012458:	4604      	mov	r4, r0
 801245a:	460d      	mov	r5, r1
 801245c:	ec45 4b10 	vmov	d0, r4, r5
 8012460:	b005      	add	sp, #20
 8012462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012466:	2200      	movs	r2, #0
 8012468:	4b1b      	ldr	r3, [pc, #108]	; (80124d8 <__kernel_sin+0x148>)
 801246a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801246e:	f7ee f8db 	bl	8000628 <__aeabi_dmul>
 8012472:	4632      	mov	r2, r6
 8012474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012478:	463b      	mov	r3, r7
 801247a:	4640      	mov	r0, r8
 801247c:	4649      	mov	r1, r9
 801247e:	f7ee f8d3 	bl	8000628 <__aeabi_dmul>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801248a:	f7ed ff15 	bl	80002b8 <__aeabi_dsub>
 801248e:	4652      	mov	r2, sl
 8012490:	465b      	mov	r3, fp
 8012492:	f7ee f8c9 	bl	8000628 <__aeabi_dmul>
 8012496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801249a:	f7ed ff0d 	bl	80002b8 <__aeabi_dsub>
 801249e:	a30c      	add	r3, pc, #48	; (adr r3, 80124d0 <__kernel_sin+0x140>)
 80124a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a4:	4606      	mov	r6, r0
 80124a6:	460f      	mov	r7, r1
 80124a8:	4640      	mov	r0, r8
 80124aa:	4649      	mov	r1, r9
 80124ac:	f7ee f8bc 	bl	8000628 <__aeabi_dmul>
 80124b0:	4602      	mov	r2, r0
 80124b2:	460b      	mov	r3, r1
 80124b4:	4630      	mov	r0, r6
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ed ff00 	bl	80002bc <__adddf3>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	4620      	mov	r0, r4
 80124c2:	4629      	mov	r1, r5
 80124c4:	f7ed fef8 	bl	80002b8 <__aeabi_dsub>
 80124c8:	e7c6      	b.n	8012458 <__kernel_sin+0xc8>
 80124ca:	bf00      	nop
 80124cc:	f3af 8000 	nop.w
 80124d0:	55555549 	.word	0x55555549
 80124d4:	3fc55555 	.word	0x3fc55555
 80124d8:	3fe00000 	.word	0x3fe00000
 80124dc:	5acfd57c 	.word	0x5acfd57c
 80124e0:	3de5d93a 	.word	0x3de5d93a
 80124e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80124e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80124ec:	57b1fe7d 	.word	0x57b1fe7d
 80124f0:	3ec71de3 	.word	0x3ec71de3
 80124f4:	19c161d5 	.word	0x19c161d5
 80124f8:	3f2a01a0 	.word	0x3f2a01a0
 80124fc:	1110f8a6 	.word	0x1110f8a6
 8012500:	3f811111 	.word	0x3f811111

08012504 <fabs>:
 8012504:	ec51 0b10 	vmov	r0, r1, d0
 8012508:	ee10 2a10 	vmov	r2, s0
 801250c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012510:	ec43 2b10 	vmov	d0, r2, r3
 8012514:	4770      	bx	lr
	...

08012518 <floor>:
 8012518:	ec51 0b10 	vmov	r0, r1, d0
 801251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012520:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012524:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012528:	2e13      	cmp	r6, #19
 801252a:	460c      	mov	r4, r1
 801252c:	ee10 5a10 	vmov	r5, s0
 8012530:	4680      	mov	r8, r0
 8012532:	dc34      	bgt.n	801259e <floor+0x86>
 8012534:	2e00      	cmp	r6, #0
 8012536:	da16      	bge.n	8012566 <floor+0x4e>
 8012538:	a335      	add	r3, pc, #212	; (adr r3, 8012610 <floor+0xf8>)
 801253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253e:	f7ed febd 	bl	80002bc <__adddf3>
 8012542:	2200      	movs	r2, #0
 8012544:	2300      	movs	r3, #0
 8012546:	f7ee faff 	bl	8000b48 <__aeabi_dcmpgt>
 801254a:	b148      	cbz	r0, 8012560 <floor+0x48>
 801254c:	2c00      	cmp	r4, #0
 801254e:	da59      	bge.n	8012604 <floor+0xec>
 8012550:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012554:	4a30      	ldr	r2, [pc, #192]	; (8012618 <floor+0x100>)
 8012556:	432b      	orrs	r3, r5
 8012558:	2500      	movs	r5, #0
 801255a:	42ab      	cmp	r3, r5
 801255c:	bf18      	it	ne
 801255e:	4614      	movne	r4, r2
 8012560:	4621      	mov	r1, r4
 8012562:	4628      	mov	r0, r5
 8012564:	e025      	b.n	80125b2 <floor+0x9a>
 8012566:	4f2d      	ldr	r7, [pc, #180]	; (801261c <floor+0x104>)
 8012568:	4137      	asrs	r7, r6
 801256a:	ea01 0307 	and.w	r3, r1, r7
 801256e:	4303      	orrs	r3, r0
 8012570:	d01f      	beq.n	80125b2 <floor+0x9a>
 8012572:	a327      	add	r3, pc, #156	; (adr r3, 8012610 <floor+0xf8>)
 8012574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012578:	f7ed fea0 	bl	80002bc <__adddf3>
 801257c:	2200      	movs	r2, #0
 801257e:	2300      	movs	r3, #0
 8012580:	f7ee fae2 	bl	8000b48 <__aeabi_dcmpgt>
 8012584:	2800      	cmp	r0, #0
 8012586:	d0eb      	beq.n	8012560 <floor+0x48>
 8012588:	2c00      	cmp	r4, #0
 801258a:	bfbe      	ittt	lt
 801258c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012590:	fa43 f606 	asrlt.w	r6, r3, r6
 8012594:	19a4      	addlt	r4, r4, r6
 8012596:	ea24 0407 	bic.w	r4, r4, r7
 801259a:	2500      	movs	r5, #0
 801259c:	e7e0      	b.n	8012560 <floor+0x48>
 801259e:	2e33      	cmp	r6, #51	; 0x33
 80125a0:	dd0b      	ble.n	80125ba <floor+0xa2>
 80125a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80125a6:	d104      	bne.n	80125b2 <floor+0x9a>
 80125a8:	ee10 2a10 	vmov	r2, s0
 80125ac:	460b      	mov	r3, r1
 80125ae:	f7ed fe85 	bl	80002bc <__adddf3>
 80125b2:	ec41 0b10 	vmov	d0, r0, r1
 80125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80125be:	f04f 33ff 	mov.w	r3, #4294967295
 80125c2:	fa23 f707 	lsr.w	r7, r3, r7
 80125c6:	4207      	tst	r7, r0
 80125c8:	d0f3      	beq.n	80125b2 <floor+0x9a>
 80125ca:	a311      	add	r3, pc, #68	; (adr r3, 8012610 <floor+0xf8>)
 80125cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d0:	f7ed fe74 	bl	80002bc <__adddf3>
 80125d4:	2200      	movs	r2, #0
 80125d6:	2300      	movs	r3, #0
 80125d8:	f7ee fab6 	bl	8000b48 <__aeabi_dcmpgt>
 80125dc:	2800      	cmp	r0, #0
 80125de:	d0bf      	beq.n	8012560 <floor+0x48>
 80125e0:	2c00      	cmp	r4, #0
 80125e2:	da02      	bge.n	80125ea <floor+0xd2>
 80125e4:	2e14      	cmp	r6, #20
 80125e6:	d103      	bne.n	80125f0 <floor+0xd8>
 80125e8:	3401      	adds	r4, #1
 80125ea:	ea25 0507 	bic.w	r5, r5, r7
 80125ee:	e7b7      	b.n	8012560 <floor+0x48>
 80125f0:	2301      	movs	r3, #1
 80125f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80125f6:	fa03 f606 	lsl.w	r6, r3, r6
 80125fa:	4435      	add	r5, r6
 80125fc:	4545      	cmp	r5, r8
 80125fe:	bf38      	it	cc
 8012600:	18e4      	addcc	r4, r4, r3
 8012602:	e7f2      	b.n	80125ea <floor+0xd2>
 8012604:	2500      	movs	r5, #0
 8012606:	462c      	mov	r4, r5
 8012608:	e7aa      	b.n	8012560 <floor+0x48>
 801260a:	bf00      	nop
 801260c:	f3af 8000 	nop.w
 8012610:	8800759c 	.word	0x8800759c
 8012614:	7e37e43c 	.word	0x7e37e43c
 8012618:	bff00000 	.word	0xbff00000
 801261c:	000fffff 	.word	0x000fffff

08012620 <scalbn>:
 8012620:	b570      	push	{r4, r5, r6, lr}
 8012622:	ec55 4b10 	vmov	r4, r5, d0
 8012626:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801262a:	4606      	mov	r6, r0
 801262c:	462b      	mov	r3, r5
 801262e:	b9aa      	cbnz	r2, 801265c <scalbn+0x3c>
 8012630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012634:	4323      	orrs	r3, r4
 8012636:	d03b      	beq.n	80126b0 <scalbn+0x90>
 8012638:	4b31      	ldr	r3, [pc, #196]	; (8012700 <scalbn+0xe0>)
 801263a:	4629      	mov	r1, r5
 801263c:	2200      	movs	r2, #0
 801263e:	ee10 0a10 	vmov	r0, s0
 8012642:	f7ed fff1 	bl	8000628 <__aeabi_dmul>
 8012646:	4b2f      	ldr	r3, [pc, #188]	; (8012704 <scalbn+0xe4>)
 8012648:	429e      	cmp	r6, r3
 801264a:	4604      	mov	r4, r0
 801264c:	460d      	mov	r5, r1
 801264e:	da12      	bge.n	8012676 <scalbn+0x56>
 8012650:	a327      	add	r3, pc, #156	; (adr r3, 80126f0 <scalbn+0xd0>)
 8012652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012656:	f7ed ffe7 	bl	8000628 <__aeabi_dmul>
 801265a:	e009      	b.n	8012670 <scalbn+0x50>
 801265c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012660:	428a      	cmp	r2, r1
 8012662:	d10c      	bne.n	801267e <scalbn+0x5e>
 8012664:	ee10 2a10 	vmov	r2, s0
 8012668:	4620      	mov	r0, r4
 801266a:	4629      	mov	r1, r5
 801266c:	f7ed fe26 	bl	80002bc <__adddf3>
 8012670:	4604      	mov	r4, r0
 8012672:	460d      	mov	r5, r1
 8012674:	e01c      	b.n	80126b0 <scalbn+0x90>
 8012676:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801267a:	460b      	mov	r3, r1
 801267c:	3a36      	subs	r2, #54	; 0x36
 801267e:	4432      	add	r2, r6
 8012680:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012684:	428a      	cmp	r2, r1
 8012686:	dd0b      	ble.n	80126a0 <scalbn+0x80>
 8012688:	ec45 4b11 	vmov	d1, r4, r5
 801268c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80126f8 <scalbn+0xd8>
 8012690:	f000 f83c 	bl	801270c <copysign>
 8012694:	a318      	add	r3, pc, #96	; (adr r3, 80126f8 <scalbn+0xd8>)
 8012696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269a:	ec51 0b10 	vmov	r0, r1, d0
 801269e:	e7da      	b.n	8012656 <scalbn+0x36>
 80126a0:	2a00      	cmp	r2, #0
 80126a2:	dd08      	ble.n	80126b6 <scalbn+0x96>
 80126a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80126a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80126ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80126b0:	ec45 4b10 	vmov	d0, r4, r5
 80126b4:	bd70      	pop	{r4, r5, r6, pc}
 80126b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80126ba:	da0d      	bge.n	80126d8 <scalbn+0xb8>
 80126bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80126c0:	429e      	cmp	r6, r3
 80126c2:	ec45 4b11 	vmov	d1, r4, r5
 80126c6:	dce1      	bgt.n	801268c <scalbn+0x6c>
 80126c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80126f0 <scalbn+0xd0>
 80126cc:	f000 f81e 	bl	801270c <copysign>
 80126d0:	a307      	add	r3, pc, #28	; (adr r3, 80126f0 <scalbn+0xd0>)
 80126d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d6:	e7e0      	b.n	801269a <scalbn+0x7a>
 80126d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80126dc:	3236      	adds	r2, #54	; 0x36
 80126de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80126e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80126e6:	4620      	mov	r0, r4
 80126e8:	4629      	mov	r1, r5
 80126ea:	2200      	movs	r2, #0
 80126ec:	4b06      	ldr	r3, [pc, #24]	; (8012708 <scalbn+0xe8>)
 80126ee:	e7b2      	b.n	8012656 <scalbn+0x36>
 80126f0:	c2f8f359 	.word	0xc2f8f359
 80126f4:	01a56e1f 	.word	0x01a56e1f
 80126f8:	8800759c 	.word	0x8800759c
 80126fc:	7e37e43c 	.word	0x7e37e43c
 8012700:	43500000 	.word	0x43500000
 8012704:	ffff3cb0 	.word	0xffff3cb0
 8012708:	3c900000 	.word	0x3c900000

0801270c <copysign>:
 801270c:	ec51 0b10 	vmov	r0, r1, d0
 8012710:	ee11 0a90 	vmov	r0, s3
 8012714:	ee10 2a10 	vmov	r2, s0
 8012718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801271c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012720:	ea41 0300 	orr.w	r3, r1, r0
 8012724:	ec43 2b10 	vmov	d0, r2, r3
 8012728:	4770      	bx	lr
	...

0801272c <__errno>:
 801272c:	4b01      	ldr	r3, [pc, #4]	; (8012734 <__errno+0x8>)
 801272e:	6818      	ldr	r0, [r3, #0]
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop
 8012734:	2000000c 	.word	0x2000000c

08012738 <__libc_init_array>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	4e0d      	ldr	r6, [pc, #52]	; (8012770 <__libc_init_array+0x38>)
 801273c:	4c0d      	ldr	r4, [pc, #52]	; (8012774 <__libc_init_array+0x3c>)
 801273e:	1ba4      	subs	r4, r4, r6
 8012740:	10a4      	asrs	r4, r4, #2
 8012742:	2500      	movs	r5, #0
 8012744:	42a5      	cmp	r5, r4
 8012746:	d109      	bne.n	801275c <__libc_init_array+0x24>
 8012748:	4e0b      	ldr	r6, [pc, #44]	; (8012778 <__libc_init_array+0x40>)
 801274a:	4c0c      	ldr	r4, [pc, #48]	; (801277c <__libc_init_array+0x44>)
 801274c:	f004 feee 	bl	801752c <_init>
 8012750:	1ba4      	subs	r4, r4, r6
 8012752:	10a4      	asrs	r4, r4, #2
 8012754:	2500      	movs	r5, #0
 8012756:	42a5      	cmp	r5, r4
 8012758:	d105      	bne.n	8012766 <__libc_init_array+0x2e>
 801275a:	bd70      	pop	{r4, r5, r6, pc}
 801275c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012760:	4798      	blx	r3
 8012762:	3501      	adds	r5, #1
 8012764:	e7ee      	b.n	8012744 <__libc_init_array+0xc>
 8012766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801276a:	4798      	blx	r3
 801276c:	3501      	adds	r5, #1
 801276e:	e7f2      	b.n	8012756 <__libc_init_array+0x1e>
 8012770:	08017e84 	.word	0x08017e84
 8012774:	08017e84 	.word	0x08017e84
 8012778:	08017e84 	.word	0x08017e84
 801277c:	08017e8c 	.word	0x08017e8c

08012780 <memcpy>:
 8012780:	b510      	push	{r4, lr}
 8012782:	1e43      	subs	r3, r0, #1
 8012784:	440a      	add	r2, r1
 8012786:	4291      	cmp	r1, r2
 8012788:	d100      	bne.n	801278c <memcpy+0xc>
 801278a:	bd10      	pop	{r4, pc}
 801278c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012794:	e7f7      	b.n	8012786 <memcpy+0x6>

08012796 <memset>:
 8012796:	4402      	add	r2, r0
 8012798:	4603      	mov	r3, r0
 801279a:	4293      	cmp	r3, r2
 801279c:	d100      	bne.n	80127a0 <memset+0xa>
 801279e:	4770      	bx	lr
 80127a0:	f803 1b01 	strb.w	r1, [r3], #1
 80127a4:	e7f9      	b.n	801279a <memset+0x4>

080127a6 <__cvt>:
 80127a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127aa:	ec55 4b10 	vmov	r4, r5, d0
 80127ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80127b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80127b4:	2d00      	cmp	r5, #0
 80127b6:	460e      	mov	r6, r1
 80127b8:	4691      	mov	r9, r2
 80127ba:	4619      	mov	r1, r3
 80127bc:	bfb8      	it	lt
 80127be:	4622      	movlt	r2, r4
 80127c0:	462b      	mov	r3, r5
 80127c2:	f027 0720 	bic.w	r7, r7, #32
 80127c6:	bfbb      	ittet	lt
 80127c8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80127cc:	461d      	movlt	r5, r3
 80127ce:	2300      	movge	r3, #0
 80127d0:	232d      	movlt	r3, #45	; 0x2d
 80127d2:	bfb8      	it	lt
 80127d4:	4614      	movlt	r4, r2
 80127d6:	2f46      	cmp	r7, #70	; 0x46
 80127d8:	700b      	strb	r3, [r1, #0]
 80127da:	d004      	beq.n	80127e6 <__cvt+0x40>
 80127dc:	2f45      	cmp	r7, #69	; 0x45
 80127de:	d100      	bne.n	80127e2 <__cvt+0x3c>
 80127e0:	3601      	adds	r6, #1
 80127e2:	2102      	movs	r1, #2
 80127e4:	e000      	b.n	80127e8 <__cvt+0x42>
 80127e6:	2103      	movs	r1, #3
 80127e8:	ab03      	add	r3, sp, #12
 80127ea:	9301      	str	r3, [sp, #4]
 80127ec:	ab02      	add	r3, sp, #8
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	4632      	mov	r2, r6
 80127f2:	4653      	mov	r3, sl
 80127f4:	ec45 4b10 	vmov	d0, r4, r5
 80127f8:	f001 ff9e 	bl	8014738 <_dtoa_r>
 80127fc:	2f47      	cmp	r7, #71	; 0x47
 80127fe:	4680      	mov	r8, r0
 8012800:	d102      	bne.n	8012808 <__cvt+0x62>
 8012802:	f019 0f01 	tst.w	r9, #1
 8012806:	d026      	beq.n	8012856 <__cvt+0xb0>
 8012808:	2f46      	cmp	r7, #70	; 0x46
 801280a:	eb08 0906 	add.w	r9, r8, r6
 801280e:	d111      	bne.n	8012834 <__cvt+0x8e>
 8012810:	f898 3000 	ldrb.w	r3, [r8]
 8012814:	2b30      	cmp	r3, #48	; 0x30
 8012816:	d10a      	bne.n	801282e <__cvt+0x88>
 8012818:	2200      	movs	r2, #0
 801281a:	2300      	movs	r3, #0
 801281c:	4620      	mov	r0, r4
 801281e:	4629      	mov	r1, r5
 8012820:	f7ee f96a 	bl	8000af8 <__aeabi_dcmpeq>
 8012824:	b918      	cbnz	r0, 801282e <__cvt+0x88>
 8012826:	f1c6 0601 	rsb	r6, r6, #1
 801282a:	f8ca 6000 	str.w	r6, [sl]
 801282e:	f8da 3000 	ldr.w	r3, [sl]
 8012832:	4499      	add	r9, r3
 8012834:	2200      	movs	r2, #0
 8012836:	2300      	movs	r3, #0
 8012838:	4620      	mov	r0, r4
 801283a:	4629      	mov	r1, r5
 801283c:	f7ee f95c 	bl	8000af8 <__aeabi_dcmpeq>
 8012840:	b938      	cbnz	r0, 8012852 <__cvt+0xac>
 8012842:	2230      	movs	r2, #48	; 0x30
 8012844:	9b03      	ldr	r3, [sp, #12]
 8012846:	454b      	cmp	r3, r9
 8012848:	d205      	bcs.n	8012856 <__cvt+0xb0>
 801284a:	1c59      	adds	r1, r3, #1
 801284c:	9103      	str	r1, [sp, #12]
 801284e:	701a      	strb	r2, [r3, #0]
 8012850:	e7f8      	b.n	8012844 <__cvt+0x9e>
 8012852:	f8cd 900c 	str.w	r9, [sp, #12]
 8012856:	9b03      	ldr	r3, [sp, #12]
 8012858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801285a:	eba3 0308 	sub.w	r3, r3, r8
 801285e:	4640      	mov	r0, r8
 8012860:	6013      	str	r3, [r2, #0]
 8012862:	b004      	add	sp, #16
 8012864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012868 <__exponent>:
 8012868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801286a:	2900      	cmp	r1, #0
 801286c:	4604      	mov	r4, r0
 801286e:	bfba      	itte	lt
 8012870:	4249      	neglt	r1, r1
 8012872:	232d      	movlt	r3, #45	; 0x2d
 8012874:	232b      	movge	r3, #43	; 0x2b
 8012876:	2909      	cmp	r1, #9
 8012878:	f804 2b02 	strb.w	r2, [r4], #2
 801287c:	7043      	strb	r3, [r0, #1]
 801287e:	dd20      	ble.n	80128c2 <__exponent+0x5a>
 8012880:	f10d 0307 	add.w	r3, sp, #7
 8012884:	461f      	mov	r7, r3
 8012886:	260a      	movs	r6, #10
 8012888:	fb91 f5f6 	sdiv	r5, r1, r6
 801288c:	fb06 1115 	mls	r1, r6, r5, r1
 8012890:	3130      	adds	r1, #48	; 0x30
 8012892:	2d09      	cmp	r5, #9
 8012894:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012898:	f103 32ff 	add.w	r2, r3, #4294967295
 801289c:	4629      	mov	r1, r5
 801289e:	dc09      	bgt.n	80128b4 <__exponent+0x4c>
 80128a0:	3130      	adds	r1, #48	; 0x30
 80128a2:	3b02      	subs	r3, #2
 80128a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80128a8:	42bb      	cmp	r3, r7
 80128aa:	4622      	mov	r2, r4
 80128ac:	d304      	bcc.n	80128b8 <__exponent+0x50>
 80128ae:	1a10      	subs	r0, r2, r0
 80128b0:	b003      	add	sp, #12
 80128b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b4:	4613      	mov	r3, r2
 80128b6:	e7e7      	b.n	8012888 <__exponent+0x20>
 80128b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128bc:	f804 2b01 	strb.w	r2, [r4], #1
 80128c0:	e7f2      	b.n	80128a8 <__exponent+0x40>
 80128c2:	2330      	movs	r3, #48	; 0x30
 80128c4:	4419      	add	r1, r3
 80128c6:	7083      	strb	r3, [r0, #2]
 80128c8:	1d02      	adds	r2, r0, #4
 80128ca:	70c1      	strb	r1, [r0, #3]
 80128cc:	e7ef      	b.n	80128ae <__exponent+0x46>
	...

080128d0 <_printf_float>:
 80128d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d4:	b08d      	sub	sp, #52	; 0x34
 80128d6:	460c      	mov	r4, r1
 80128d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80128dc:	4616      	mov	r6, r2
 80128de:	461f      	mov	r7, r3
 80128e0:	4605      	mov	r5, r0
 80128e2:	f003 f995 	bl	8015c10 <_localeconv_r>
 80128e6:	6803      	ldr	r3, [r0, #0]
 80128e8:	9304      	str	r3, [sp, #16]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7ed fc88 	bl	8000200 <strlen>
 80128f0:	2300      	movs	r3, #0
 80128f2:	930a      	str	r3, [sp, #40]	; 0x28
 80128f4:	f8d8 3000 	ldr.w	r3, [r8]
 80128f8:	9005      	str	r0, [sp, #20]
 80128fa:	3307      	adds	r3, #7
 80128fc:	f023 0307 	bic.w	r3, r3, #7
 8012900:	f103 0208 	add.w	r2, r3, #8
 8012904:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012908:	f8d4 b000 	ldr.w	fp, [r4]
 801290c:	f8c8 2000 	str.w	r2, [r8]
 8012910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012914:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012918:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801291c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012920:	9307      	str	r3, [sp, #28]
 8012922:	f8cd 8018 	str.w	r8, [sp, #24]
 8012926:	f04f 32ff 	mov.w	r2, #4294967295
 801292a:	4ba7      	ldr	r3, [pc, #668]	; (8012bc8 <_printf_float+0x2f8>)
 801292c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012930:	f7ee f914 	bl	8000b5c <__aeabi_dcmpun>
 8012934:	bb70      	cbnz	r0, 8012994 <_printf_float+0xc4>
 8012936:	f04f 32ff 	mov.w	r2, #4294967295
 801293a:	4ba3      	ldr	r3, [pc, #652]	; (8012bc8 <_printf_float+0x2f8>)
 801293c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012940:	f7ee f8ee 	bl	8000b20 <__aeabi_dcmple>
 8012944:	bb30      	cbnz	r0, 8012994 <_printf_float+0xc4>
 8012946:	2200      	movs	r2, #0
 8012948:	2300      	movs	r3, #0
 801294a:	4640      	mov	r0, r8
 801294c:	4649      	mov	r1, r9
 801294e:	f7ee f8dd 	bl	8000b0c <__aeabi_dcmplt>
 8012952:	b110      	cbz	r0, 801295a <_printf_float+0x8a>
 8012954:	232d      	movs	r3, #45	; 0x2d
 8012956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801295a:	4a9c      	ldr	r2, [pc, #624]	; (8012bcc <_printf_float+0x2fc>)
 801295c:	4b9c      	ldr	r3, [pc, #624]	; (8012bd0 <_printf_float+0x300>)
 801295e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012962:	bf8c      	ite	hi
 8012964:	4690      	movhi	r8, r2
 8012966:	4698      	movls	r8, r3
 8012968:	2303      	movs	r3, #3
 801296a:	f02b 0204 	bic.w	r2, fp, #4
 801296e:	6123      	str	r3, [r4, #16]
 8012970:	6022      	str	r2, [r4, #0]
 8012972:	f04f 0900 	mov.w	r9, #0
 8012976:	9700      	str	r7, [sp, #0]
 8012978:	4633      	mov	r3, r6
 801297a:	aa0b      	add	r2, sp, #44	; 0x2c
 801297c:	4621      	mov	r1, r4
 801297e:	4628      	mov	r0, r5
 8012980:	f000 f9e6 	bl	8012d50 <_printf_common>
 8012984:	3001      	adds	r0, #1
 8012986:	f040 808d 	bne.w	8012aa4 <_printf_float+0x1d4>
 801298a:	f04f 30ff 	mov.w	r0, #4294967295
 801298e:	b00d      	add	sp, #52	; 0x34
 8012990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012994:	4642      	mov	r2, r8
 8012996:	464b      	mov	r3, r9
 8012998:	4640      	mov	r0, r8
 801299a:	4649      	mov	r1, r9
 801299c:	f7ee f8de 	bl	8000b5c <__aeabi_dcmpun>
 80129a0:	b110      	cbz	r0, 80129a8 <_printf_float+0xd8>
 80129a2:	4a8c      	ldr	r2, [pc, #560]	; (8012bd4 <_printf_float+0x304>)
 80129a4:	4b8c      	ldr	r3, [pc, #560]	; (8012bd8 <_printf_float+0x308>)
 80129a6:	e7da      	b.n	801295e <_printf_float+0x8e>
 80129a8:	6861      	ldr	r1, [r4, #4]
 80129aa:	1c4b      	adds	r3, r1, #1
 80129ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80129b0:	a80a      	add	r0, sp, #40	; 0x28
 80129b2:	d13e      	bne.n	8012a32 <_printf_float+0x162>
 80129b4:	2306      	movs	r3, #6
 80129b6:	6063      	str	r3, [r4, #4]
 80129b8:	2300      	movs	r3, #0
 80129ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80129be:	ab09      	add	r3, sp, #36	; 0x24
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	ec49 8b10 	vmov	d0, r8, r9
 80129c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80129ca:	6022      	str	r2, [r4, #0]
 80129cc:	f8cd a004 	str.w	sl, [sp, #4]
 80129d0:	6861      	ldr	r1, [r4, #4]
 80129d2:	4628      	mov	r0, r5
 80129d4:	f7ff fee7 	bl	80127a6 <__cvt>
 80129d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80129dc:	2b47      	cmp	r3, #71	; 0x47
 80129de:	4680      	mov	r8, r0
 80129e0:	d109      	bne.n	80129f6 <_printf_float+0x126>
 80129e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e4:	1cd8      	adds	r0, r3, #3
 80129e6:	db02      	blt.n	80129ee <_printf_float+0x11e>
 80129e8:	6862      	ldr	r2, [r4, #4]
 80129ea:	4293      	cmp	r3, r2
 80129ec:	dd47      	ble.n	8012a7e <_printf_float+0x1ae>
 80129ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80129f2:	fa5f fa8a 	uxtb.w	sl, sl
 80129f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80129fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129fc:	d824      	bhi.n	8012a48 <_printf_float+0x178>
 80129fe:	3901      	subs	r1, #1
 8012a00:	4652      	mov	r2, sl
 8012a02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a06:	9109      	str	r1, [sp, #36]	; 0x24
 8012a08:	f7ff ff2e 	bl	8012868 <__exponent>
 8012a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a0e:	1813      	adds	r3, r2, r0
 8012a10:	2a01      	cmp	r2, #1
 8012a12:	4681      	mov	r9, r0
 8012a14:	6123      	str	r3, [r4, #16]
 8012a16:	dc02      	bgt.n	8012a1e <_printf_float+0x14e>
 8012a18:	6822      	ldr	r2, [r4, #0]
 8012a1a:	07d1      	lsls	r1, r2, #31
 8012a1c:	d501      	bpl.n	8012a22 <_printf_float+0x152>
 8012a1e:	3301      	adds	r3, #1
 8012a20:	6123      	str	r3, [r4, #16]
 8012a22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d0a5      	beq.n	8012976 <_printf_float+0xa6>
 8012a2a:	232d      	movs	r3, #45	; 0x2d
 8012a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a30:	e7a1      	b.n	8012976 <_printf_float+0xa6>
 8012a32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012a36:	f000 8177 	beq.w	8012d28 <_printf_float+0x458>
 8012a3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012a3e:	d1bb      	bne.n	80129b8 <_printf_float+0xe8>
 8012a40:	2900      	cmp	r1, #0
 8012a42:	d1b9      	bne.n	80129b8 <_printf_float+0xe8>
 8012a44:	2301      	movs	r3, #1
 8012a46:	e7b6      	b.n	80129b6 <_printf_float+0xe6>
 8012a48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012a4c:	d119      	bne.n	8012a82 <_printf_float+0x1b2>
 8012a4e:	2900      	cmp	r1, #0
 8012a50:	6863      	ldr	r3, [r4, #4]
 8012a52:	dd0c      	ble.n	8012a6e <_printf_float+0x19e>
 8012a54:	6121      	str	r1, [r4, #16]
 8012a56:	b913      	cbnz	r3, 8012a5e <_printf_float+0x18e>
 8012a58:	6822      	ldr	r2, [r4, #0]
 8012a5a:	07d2      	lsls	r2, r2, #31
 8012a5c:	d502      	bpl.n	8012a64 <_printf_float+0x194>
 8012a5e:	3301      	adds	r3, #1
 8012a60:	440b      	add	r3, r1
 8012a62:	6123      	str	r3, [r4, #16]
 8012a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a66:	65a3      	str	r3, [r4, #88]	; 0x58
 8012a68:	f04f 0900 	mov.w	r9, #0
 8012a6c:	e7d9      	b.n	8012a22 <_printf_float+0x152>
 8012a6e:	b913      	cbnz	r3, 8012a76 <_printf_float+0x1a6>
 8012a70:	6822      	ldr	r2, [r4, #0]
 8012a72:	07d0      	lsls	r0, r2, #31
 8012a74:	d501      	bpl.n	8012a7a <_printf_float+0x1aa>
 8012a76:	3302      	adds	r3, #2
 8012a78:	e7f3      	b.n	8012a62 <_printf_float+0x192>
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e7f1      	b.n	8012a62 <_printf_float+0x192>
 8012a7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012a82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012a86:	4293      	cmp	r3, r2
 8012a88:	db05      	blt.n	8012a96 <_printf_float+0x1c6>
 8012a8a:	6822      	ldr	r2, [r4, #0]
 8012a8c:	6123      	str	r3, [r4, #16]
 8012a8e:	07d1      	lsls	r1, r2, #31
 8012a90:	d5e8      	bpl.n	8012a64 <_printf_float+0x194>
 8012a92:	3301      	adds	r3, #1
 8012a94:	e7e5      	b.n	8012a62 <_printf_float+0x192>
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	bfd4      	ite	le
 8012a9a:	f1c3 0302 	rsble	r3, r3, #2
 8012a9e:	2301      	movgt	r3, #1
 8012aa0:	4413      	add	r3, r2
 8012aa2:	e7de      	b.n	8012a62 <_printf_float+0x192>
 8012aa4:	6823      	ldr	r3, [r4, #0]
 8012aa6:	055a      	lsls	r2, r3, #21
 8012aa8:	d407      	bmi.n	8012aba <_printf_float+0x1ea>
 8012aaa:	6923      	ldr	r3, [r4, #16]
 8012aac:	4642      	mov	r2, r8
 8012aae:	4631      	mov	r1, r6
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	47b8      	blx	r7
 8012ab4:	3001      	adds	r0, #1
 8012ab6:	d12b      	bne.n	8012b10 <_printf_float+0x240>
 8012ab8:	e767      	b.n	801298a <_printf_float+0xba>
 8012aba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012abe:	f240 80dc 	bls.w	8012c7a <_printf_float+0x3aa>
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012aca:	f7ee f815 	bl	8000af8 <__aeabi_dcmpeq>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d033      	beq.n	8012b3a <_printf_float+0x26a>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	4a41      	ldr	r2, [pc, #260]	; (8012bdc <_printf_float+0x30c>)
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	4628      	mov	r0, r5
 8012ada:	47b8      	blx	r7
 8012adc:	3001      	adds	r0, #1
 8012ade:	f43f af54 	beq.w	801298a <_printf_float+0xba>
 8012ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	db02      	blt.n	8012af0 <_printf_float+0x220>
 8012aea:	6823      	ldr	r3, [r4, #0]
 8012aec:	07d8      	lsls	r0, r3, #31
 8012aee:	d50f      	bpl.n	8012b10 <_printf_float+0x240>
 8012af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012af4:	4631      	mov	r1, r6
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b8      	blx	r7
 8012afa:	3001      	adds	r0, #1
 8012afc:	f43f af45 	beq.w	801298a <_printf_float+0xba>
 8012b00:	f04f 0800 	mov.w	r8, #0
 8012b04:	f104 091a 	add.w	r9, r4, #26
 8012b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	4543      	cmp	r3, r8
 8012b0e:	dc09      	bgt.n	8012b24 <_printf_float+0x254>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	079b      	lsls	r3, r3, #30
 8012b14:	f100 8103 	bmi.w	8012d1e <_printf_float+0x44e>
 8012b18:	68e0      	ldr	r0, [r4, #12]
 8012b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b1c:	4298      	cmp	r0, r3
 8012b1e:	bfb8      	it	lt
 8012b20:	4618      	movlt	r0, r3
 8012b22:	e734      	b.n	801298e <_printf_float+0xbe>
 8012b24:	2301      	movs	r3, #1
 8012b26:	464a      	mov	r2, r9
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	47b8      	blx	r7
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f43f af2b 	beq.w	801298a <_printf_float+0xba>
 8012b34:	f108 0801 	add.w	r8, r8, #1
 8012b38:	e7e6      	b.n	8012b08 <_printf_float+0x238>
 8012b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	dc2b      	bgt.n	8012b98 <_printf_float+0x2c8>
 8012b40:	2301      	movs	r3, #1
 8012b42:	4a26      	ldr	r2, [pc, #152]	; (8012bdc <_printf_float+0x30c>)
 8012b44:	4631      	mov	r1, r6
 8012b46:	4628      	mov	r0, r5
 8012b48:	47b8      	blx	r7
 8012b4a:	3001      	adds	r0, #1
 8012b4c:	f43f af1d 	beq.w	801298a <_printf_float+0xba>
 8012b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b52:	b923      	cbnz	r3, 8012b5e <_printf_float+0x28e>
 8012b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b56:	b913      	cbnz	r3, 8012b5e <_printf_float+0x28e>
 8012b58:	6823      	ldr	r3, [r4, #0]
 8012b5a:	07d9      	lsls	r1, r3, #31
 8012b5c:	d5d8      	bpl.n	8012b10 <_printf_float+0x240>
 8012b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b62:	4631      	mov	r1, r6
 8012b64:	4628      	mov	r0, r5
 8012b66:	47b8      	blx	r7
 8012b68:	3001      	adds	r0, #1
 8012b6a:	f43f af0e 	beq.w	801298a <_printf_float+0xba>
 8012b6e:	f04f 0900 	mov.w	r9, #0
 8012b72:	f104 0a1a 	add.w	sl, r4, #26
 8012b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b78:	425b      	negs	r3, r3
 8012b7a:	454b      	cmp	r3, r9
 8012b7c:	dc01      	bgt.n	8012b82 <_printf_float+0x2b2>
 8012b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b80:	e794      	b.n	8012aac <_printf_float+0x1dc>
 8012b82:	2301      	movs	r3, #1
 8012b84:	4652      	mov	r2, sl
 8012b86:	4631      	mov	r1, r6
 8012b88:	4628      	mov	r0, r5
 8012b8a:	47b8      	blx	r7
 8012b8c:	3001      	adds	r0, #1
 8012b8e:	f43f aefc 	beq.w	801298a <_printf_float+0xba>
 8012b92:	f109 0901 	add.w	r9, r9, #1
 8012b96:	e7ee      	b.n	8012b76 <_printf_float+0x2a6>
 8012b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	bfa8      	it	ge
 8012ba0:	461a      	movge	r2, r3
 8012ba2:	2a00      	cmp	r2, #0
 8012ba4:	4691      	mov	r9, r2
 8012ba6:	dd07      	ble.n	8012bb8 <_printf_float+0x2e8>
 8012ba8:	4613      	mov	r3, r2
 8012baa:	4631      	mov	r1, r6
 8012bac:	4642      	mov	r2, r8
 8012bae:	4628      	mov	r0, r5
 8012bb0:	47b8      	blx	r7
 8012bb2:	3001      	adds	r0, #1
 8012bb4:	f43f aee9 	beq.w	801298a <_printf_float+0xba>
 8012bb8:	f104 031a 	add.w	r3, r4, #26
 8012bbc:	f04f 0b00 	mov.w	fp, #0
 8012bc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012bc4:	9306      	str	r3, [sp, #24]
 8012bc6:	e015      	b.n	8012bf4 <_printf_float+0x324>
 8012bc8:	7fefffff 	.word	0x7fefffff
 8012bcc:	08017b48 	.word	0x08017b48
 8012bd0:	08017b44 	.word	0x08017b44
 8012bd4:	08017b50 	.word	0x08017b50
 8012bd8:	08017b4c 	.word	0x08017b4c
 8012bdc:	08017d73 	.word	0x08017d73
 8012be0:	2301      	movs	r3, #1
 8012be2:	9a06      	ldr	r2, [sp, #24]
 8012be4:	4631      	mov	r1, r6
 8012be6:	4628      	mov	r0, r5
 8012be8:	47b8      	blx	r7
 8012bea:	3001      	adds	r0, #1
 8012bec:	f43f aecd 	beq.w	801298a <_printf_float+0xba>
 8012bf0:	f10b 0b01 	add.w	fp, fp, #1
 8012bf4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012bf8:	ebaa 0309 	sub.w	r3, sl, r9
 8012bfc:	455b      	cmp	r3, fp
 8012bfe:	dcef      	bgt.n	8012be0 <_printf_float+0x310>
 8012c00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c04:	429a      	cmp	r2, r3
 8012c06:	44d0      	add	r8, sl
 8012c08:	db15      	blt.n	8012c36 <_printf_float+0x366>
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	07da      	lsls	r2, r3, #31
 8012c0e:	d412      	bmi.n	8012c36 <_printf_float+0x366>
 8012c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c14:	eba3 020a 	sub.w	r2, r3, sl
 8012c18:	eba3 0a01 	sub.w	sl, r3, r1
 8012c1c:	4592      	cmp	sl, r2
 8012c1e:	bfa8      	it	ge
 8012c20:	4692      	movge	sl, r2
 8012c22:	f1ba 0f00 	cmp.w	sl, #0
 8012c26:	dc0e      	bgt.n	8012c46 <_printf_float+0x376>
 8012c28:	f04f 0800 	mov.w	r8, #0
 8012c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c30:	f104 091a 	add.w	r9, r4, #26
 8012c34:	e019      	b.n	8012c6a <_printf_float+0x39a>
 8012c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c3a:	4631      	mov	r1, r6
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	47b8      	blx	r7
 8012c40:	3001      	adds	r0, #1
 8012c42:	d1e5      	bne.n	8012c10 <_printf_float+0x340>
 8012c44:	e6a1      	b.n	801298a <_printf_float+0xba>
 8012c46:	4653      	mov	r3, sl
 8012c48:	4642      	mov	r2, r8
 8012c4a:	4631      	mov	r1, r6
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	47b8      	blx	r7
 8012c50:	3001      	adds	r0, #1
 8012c52:	d1e9      	bne.n	8012c28 <_printf_float+0x358>
 8012c54:	e699      	b.n	801298a <_printf_float+0xba>
 8012c56:	2301      	movs	r3, #1
 8012c58:	464a      	mov	r2, r9
 8012c5a:	4631      	mov	r1, r6
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	47b8      	blx	r7
 8012c60:	3001      	adds	r0, #1
 8012c62:	f43f ae92 	beq.w	801298a <_printf_float+0xba>
 8012c66:	f108 0801 	add.w	r8, r8, #1
 8012c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c6e:	1a9b      	subs	r3, r3, r2
 8012c70:	eba3 030a 	sub.w	r3, r3, sl
 8012c74:	4543      	cmp	r3, r8
 8012c76:	dcee      	bgt.n	8012c56 <_printf_float+0x386>
 8012c78:	e74a      	b.n	8012b10 <_printf_float+0x240>
 8012c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c7c:	2a01      	cmp	r2, #1
 8012c7e:	dc01      	bgt.n	8012c84 <_printf_float+0x3b4>
 8012c80:	07db      	lsls	r3, r3, #31
 8012c82:	d53a      	bpl.n	8012cfa <_printf_float+0x42a>
 8012c84:	2301      	movs	r3, #1
 8012c86:	4642      	mov	r2, r8
 8012c88:	4631      	mov	r1, r6
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	47b8      	blx	r7
 8012c8e:	3001      	adds	r0, #1
 8012c90:	f43f ae7b 	beq.w	801298a <_printf_float+0xba>
 8012c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	47b8      	blx	r7
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	f108 0801 	add.w	r8, r8, #1
 8012ca4:	f43f ae71 	beq.w	801298a <_printf_float+0xba>
 8012ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012caa:	2200      	movs	r2, #0
 8012cac:	f103 3aff 	add.w	sl, r3, #4294967295
 8012cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	f7ed ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8012cba:	b9c8      	cbnz	r0, 8012cf0 <_printf_float+0x420>
 8012cbc:	4653      	mov	r3, sl
 8012cbe:	4642      	mov	r2, r8
 8012cc0:	4631      	mov	r1, r6
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	47b8      	blx	r7
 8012cc6:	3001      	adds	r0, #1
 8012cc8:	d10e      	bne.n	8012ce8 <_printf_float+0x418>
 8012cca:	e65e      	b.n	801298a <_printf_float+0xba>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	4652      	mov	r2, sl
 8012cd0:	4631      	mov	r1, r6
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	47b8      	blx	r7
 8012cd6:	3001      	adds	r0, #1
 8012cd8:	f43f ae57 	beq.w	801298a <_printf_float+0xba>
 8012cdc:	f108 0801 	add.w	r8, r8, #1
 8012ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ce2:	3b01      	subs	r3, #1
 8012ce4:	4543      	cmp	r3, r8
 8012ce6:	dcf1      	bgt.n	8012ccc <_printf_float+0x3fc>
 8012ce8:	464b      	mov	r3, r9
 8012cea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012cee:	e6de      	b.n	8012aae <_printf_float+0x1de>
 8012cf0:	f04f 0800 	mov.w	r8, #0
 8012cf4:	f104 0a1a 	add.w	sl, r4, #26
 8012cf8:	e7f2      	b.n	8012ce0 <_printf_float+0x410>
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e7df      	b.n	8012cbe <_printf_float+0x3ee>
 8012cfe:	2301      	movs	r3, #1
 8012d00:	464a      	mov	r2, r9
 8012d02:	4631      	mov	r1, r6
 8012d04:	4628      	mov	r0, r5
 8012d06:	47b8      	blx	r7
 8012d08:	3001      	adds	r0, #1
 8012d0a:	f43f ae3e 	beq.w	801298a <_printf_float+0xba>
 8012d0e:	f108 0801 	add.w	r8, r8, #1
 8012d12:	68e3      	ldr	r3, [r4, #12]
 8012d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d16:	1a9b      	subs	r3, r3, r2
 8012d18:	4543      	cmp	r3, r8
 8012d1a:	dcf0      	bgt.n	8012cfe <_printf_float+0x42e>
 8012d1c:	e6fc      	b.n	8012b18 <_printf_float+0x248>
 8012d1e:	f04f 0800 	mov.w	r8, #0
 8012d22:	f104 0919 	add.w	r9, r4, #25
 8012d26:	e7f4      	b.n	8012d12 <_printf_float+0x442>
 8012d28:	2900      	cmp	r1, #0
 8012d2a:	f43f ae8b 	beq.w	8012a44 <_printf_float+0x174>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012d34:	ab09      	add	r3, sp, #36	; 0x24
 8012d36:	9300      	str	r3, [sp, #0]
 8012d38:	ec49 8b10 	vmov	d0, r8, r9
 8012d3c:	6022      	str	r2, [r4, #0]
 8012d3e:	f8cd a004 	str.w	sl, [sp, #4]
 8012d42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012d46:	4628      	mov	r0, r5
 8012d48:	f7ff fd2d 	bl	80127a6 <__cvt>
 8012d4c:	4680      	mov	r8, r0
 8012d4e:	e648      	b.n	80129e2 <_printf_float+0x112>

08012d50 <_printf_common>:
 8012d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d54:	4691      	mov	r9, r2
 8012d56:	461f      	mov	r7, r3
 8012d58:	688a      	ldr	r2, [r1, #8]
 8012d5a:	690b      	ldr	r3, [r1, #16]
 8012d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d60:	4293      	cmp	r3, r2
 8012d62:	bfb8      	it	lt
 8012d64:	4613      	movlt	r3, r2
 8012d66:	f8c9 3000 	str.w	r3, [r9]
 8012d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d6e:	4606      	mov	r6, r0
 8012d70:	460c      	mov	r4, r1
 8012d72:	b112      	cbz	r2, 8012d7a <_printf_common+0x2a>
 8012d74:	3301      	adds	r3, #1
 8012d76:	f8c9 3000 	str.w	r3, [r9]
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	0699      	lsls	r1, r3, #26
 8012d7e:	bf42      	ittt	mi
 8012d80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012d84:	3302      	addmi	r3, #2
 8012d86:	f8c9 3000 	strmi.w	r3, [r9]
 8012d8a:	6825      	ldr	r5, [r4, #0]
 8012d8c:	f015 0506 	ands.w	r5, r5, #6
 8012d90:	d107      	bne.n	8012da2 <_printf_common+0x52>
 8012d92:	f104 0a19 	add.w	sl, r4, #25
 8012d96:	68e3      	ldr	r3, [r4, #12]
 8012d98:	f8d9 2000 	ldr.w	r2, [r9]
 8012d9c:	1a9b      	subs	r3, r3, r2
 8012d9e:	42ab      	cmp	r3, r5
 8012da0:	dc28      	bgt.n	8012df4 <_printf_common+0xa4>
 8012da2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012da6:	6822      	ldr	r2, [r4, #0]
 8012da8:	3300      	adds	r3, #0
 8012daa:	bf18      	it	ne
 8012dac:	2301      	movne	r3, #1
 8012dae:	0692      	lsls	r2, r2, #26
 8012db0:	d42d      	bmi.n	8012e0e <_printf_common+0xbe>
 8012db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012db6:	4639      	mov	r1, r7
 8012db8:	4630      	mov	r0, r6
 8012dba:	47c0      	blx	r8
 8012dbc:	3001      	adds	r0, #1
 8012dbe:	d020      	beq.n	8012e02 <_printf_common+0xb2>
 8012dc0:	6823      	ldr	r3, [r4, #0]
 8012dc2:	68e5      	ldr	r5, [r4, #12]
 8012dc4:	f8d9 2000 	ldr.w	r2, [r9]
 8012dc8:	f003 0306 	and.w	r3, r3, #6
 8012dcc:	2b04      	cmp	r3, #4
 8012dce:	bf08      	it	eq
 8012dd0:	1aad      	subeq	r5, r5, r2
 8012dd2:	68a3      	ldr	r3, [r4, #8]
 8012dd4:	6922      	ldr	r2, [r4, #16]
 8012dd6:	bf0c      	ite	eq
 8012dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ddc:	2500      	movne	r5, #0
 8012dde:	4293      	cmp	r3, r2
 8012de0:	bfc4      	itt	gt
 8012de2:	1a9b      	subgt	r3, r3, r2
 8012de4:	18ed      	addgt	r5, r5, r3
 8012de6:	f04f 0900 	mov.w	r9, #0
 8012dea:	341a      	adds	r4, #26
 8012dec:	454d      	cmp	r5, r9
 8012dee:	d11a      	bne.n	8012e26 <_printf_common+0xd6>
 8012df0:	2000      	movs	r0, #0
 8012df2:	e008      	b.n	8012e06 <_printf_common+0xb6>
 8012df4:	2301      	movs	r3, #1
 8012df6:	4652      	mov	r2, sl
 8012df8:	4639      	mov	r1, r7
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	47c0      	blx	r8
 8012dfe:	3001      	adds	r0, #1
 8012e00:	d103      	bne.n	8012e0a <_printf_common+0xba>
 8012e02:	f04f 30ff 	mov.w	r0, #4294967295
 8012e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e0a:	3501      	adds	r5, #1
 8012e0c:	e7c3      	b.n	8012d96 <_printf_common+0x46>
 8012e0e:	18e1      	adds	r1, r4, r3
 8012e10:	1c5a      	adds	r2, r3, #1
 8012e12:	2030      	movs	r0, #48	; 0x30
 8012e14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e18:	4422      	add	r2, r4
 8012e1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e22:	3302      	adds	r3, #2
 8012e24:	e7c5      	b.n	8012db2 <_printf_common+0x62>
 8012e26:	2301      	movs	r3, #1
 8012e28:	4622      	mov	r2, r4
 8012e2a:	4639      	mov	r1, r7
 8012e2c:	4630      	mov	r0, r6
 8012e2e:	47c0      	blx	r8
 8012e30:	3001      	adds	r0, #1
 8012e32:	d0e6      	beq.n	8012e02 <_printf_common+0xb2>
 8012e34:	f109 0901 	add.w	r9, r9, #1
 8012e38:	e7d8      	b.n	8012dec <_printf_common+0x9c>
	...

08012e3c <_printf_i>:
 8012e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012e44:	460c      	mov	r4, r1
 8012e46:	7e09      	ldrb	r1, [r1, #24]
 8012e48:	b085      	sub	sp, #20
 8012e4a:	296e      	cmp	r1, #110	; 0x6e
 8012e4c:	4617      	mov	r7, r2
 8012e4e:	4606      	mov	r6, r0
 8012e50:	4698      	mov	r8, r3
 8012e52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e54:	f000 80b3 	beq.w	8012fbe <_printf_i+0x182>
 8012e58:	d822      	bhi.n	8012ea0 <_printf_i+0x64>
 8012e5a:	2963      	cmp	r1, #99	; 0x63
 8012e5c:	d036      	beq.n	8012ecc <_printf_i+0x90>
 8012e5e:	d80a      	bhi.n	8012e76 <_printf_i+0x3a>
 8012e60:	2900      	cmp	r1, #0
 8012e62:	f000 80b9 	beq.w	8012fd8 <_printf_i+0x19c>
 8012e66:	2958      	cmp	r1, #88	; 0x58
 8012e68:	f000 8083 	beq.w	8012f72 <_printf_i+0x136>
 8012e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012e74:	e032      	b.n	8012edc <_printf_i+0xa0>
 8012e76:	2964      	cmp	r1, #100	; 0x64
 8012e78:	d001      	beq.n	8012e7e <_printf_i+0x42>
 8012e7a:	2969      	cmp	r1, #105	; 0x69
 8012e7c:	d1f6      	bne.n	8012e6c <_printf_i+0x30>
 8012e7e:	6820      	ldr	r0, [r4, #0]
 8012e80:	6813      	ldr	r3, [r2, #0]
 8012e82:	0605      	lsls	r5, r0, #24
 8012e84:	f103 0104 	add.w	r1, r3, #4
 8012e88:	d52a      	bpl.n	8012ee0 <_printf_i+0xa4>
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	6011      	str	r1, [r2, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	da03      	bge.n	8012e9a <_printf_i+0x5e>
 8012e92:	222d      	movs	r2, #45	; 0x2d
 8012e94:	425b      	negs	r3, r3
 8012e96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012e9a:	486f      	ldr	r0, [pc, #444]	; (8013058 <_printf_i+0x21c>)
 8012e9c:	220a      	movs	r2, #10
 8012e9e:	e039      	b.n	8012f14 <_printf_i+0xd8>
 8012ea0:	2973      	cmp	r1, #115	; 0x73
 8012ea2:	f000 809d 	beq.w	8012fe0 <_printf_i+0x1a4>
 8012ea6:	d808      	bhi.n	8012eba <_printf_i+0x7e>
 8012ea8:	296f      	cmp	r1, #111	; 0x6f
 8012eaa:	d020      	beq.n	8012eee <_printf_i+0xb2>
 8012eac:	2970      	cmp	r1, #112	; 0x70
 8012eae:	d1dd      	bne.n	8012e6c <_printf_i+0x30>
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	f043 0320 	orr.w	r3, r3, #32
 8012eb6:	6023      	str	r3, [r4, #0]
 8012eb8:	e003      	b.n	8012ec2 <_printf_i+0x86>
 8012eba:	2975      	cmp	r1, #117	; 0x75
 8012ebc:	d017      	beq.n	8012eee <_printf_i+0xb2>
 8012ebe:	2978      	cmp	r1, #120	; 0x78
 8012ec0:	d1d4      	bne.n	8012e6c <_printf_i+0x30>
 8012ec2:	2378      	movs	r3, #120	; 0x78
 8012ec4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ec8:	4864      	ldr	r0, [pc, #400]	; (801305c <_printf_i+0x220>)
 8012eca:	e055      	b.n	8012f78 <_printf_i+0x13c>
 8012ecc:	6813      	ldr	r3, [r2, #0]
 8012ece:	1d19      	adds	r1, r3, #4
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	6011      	str	r1, [r2, #0]
 8012ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012edc:	2301      	movs	r3, #1
 8012ede:	e08c      	b.n	8012ffa <_printf_i+0x1be>
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	6011      	str	r1, [r2, #0]
 8012ee4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ee8:	bf18      	it	ne
 8012eea:	b21b      	sxthne	r3, r3
 8012eec:	e7cf      	b.n	8012e8e <_printf_i+0x52>
 8012eee:	6813      	ldr	r3, [r2, #0]
 8012ef0:	6825      	ldr	r5, [r4, #0]
 8012ef2:	1d18      	adds	r0, r3, #4
 8012ef4:	6010      	str	r0, [r2, #0]
 8012ef6:	0628      	lsls	r0, r5, #24
 8012ef8:	d501      	bpl.n	8012efe <_printf_i+0xc2>
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	e002      	b.n	8012f04 <_printf_i+0xc8>
 8012efe:	0668      	lsls	r0, r5, #25
 8012f00:	d5fb      	bpl.n	8012efa <_printf_i+0xbe>
 8012f02:	881b      	ldrh	r3, [r3, #0]
 8012f04:	4854      	ldr	r0, [pc, #336]	; (8013058 <_printf_i+0x21c>)
 8012f06:	296f      	cmp	r1, #111	; 0x6f
 8012f08:	bf14      	ite	ne
 8012f0a:	220a      	movne	r2, #10
 8012f0c:	2208      	moveq	r2, #8
 8012f0e:	2100      	movs	r1, #0
 8012f10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f14:	6865      	ldr	r5, [r4, #4]
 8012f16:	60a5      	str	r5, [r4, #8]
 8012f18:	2d00      	cmp	r5, #0
 8012f1a:	f2c0 8095 	blt.w	8013048 <_printf_i+0x20c>
 8012f1e:	6821      	ldr	r1, [r4, #0]
 8012f20:	f021 0104 	bic.w	r1, r1, #4
 8012f24:	6021      	str	r1, [r4, #0]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d13d      	bne.n	8012fa6 <_printf_i+0x16a>
 8012f2a:	2d00      	cmp	r5, #0
 8012f2c:	f040 808e 	bne.w	801304c <_printf_i+0x210>
 8012f30:	4665      	mov	r5, ip
 8012f32:	2a08      	cmp	r2, #8
 8012f34:	d10b      	bne.n	8012f4e <_printf_i+0x112>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	07db      	lsls	r3, r3, #31
 8012f3a:	d508      	bpl.n	8012f4e <_printf_i+0x112>
 8012f3c:	6923      	ldr	r3, [r4, #16]
 8012f3e:	6862      	ldr	r2, [r4, #4]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	bfde      	ittt	le
 8012f44:	2330      	movle	r3, #48	; 0x30
 8012f46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012f4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012f4e:	ebac 0305 	sub.w	r3, ip, r5
 8012f52:	6123      	str	r3, [r4, #16]
 8012f54:	f8cd 8000 	str.w	r8, [sp]
 8012f58:	463b      	mov	r3, r7
 8012f5a:	aa03      	add	r2, sp, #12
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	4630      	mov	r0, r6
 8012f60:	f7ff fef6 	bl	8012d50 <_printf_common>
 8012f64:	3001      	adds	r0, #1
 8012f66:	d14d      	bne.n	8013004 <_printf_i+0x1c8>
 8012f68:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6c:	b005      	add	sp, #20
 8012f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f72:	4839      	ldr	r0, [pc, #228]	; (8013058 <_printf_i+0x21c>)
 8012f74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012f78:	6813      	ldr	r3, [r2, #0]
 8012f7a:	6821      	ldr	r1, [r4, #0]
 8012f7c:	1d1d      	adds	r5, r3, #4
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	6015      	str	r5, [r2, #0]
 8012f82:	060a      	lsls	r2, r1, #24
 8012f84:	d50b      	bpl.n	8012f9e <_printf_i+0x162>
 8012f86:	07ca      	lsls	r2, r1, #31
 8012f88:	bf44      	itt	mi
 8012f8a:	f041 0120 	orrmi.w	r1, r1, #32
 8012f8e:	6021      	strmi	r1, [r4, #0]
 8012f90:	b91b      	cbnz	r3, 8012f9a <_printf_i+0x15e>
 8012f92:	6822      	ldr	r2, [r4, #0]
 8012f94:	f022 0220 	bic.w	r2, r2, #32
 8012f98:	6022      	str	r2, [r4, #0]
 8012f9a:	2210      	movs	r2, #16
 8012f9c:	e7b7      	b.n	8012f0e <_printf_i+0xd2>
 8012f9e:	064d      	lsls	r5, r1, #25
 8012fa0:	bf48      	it	mi
 8012fa2:	b29b      	uxthmi	r3, r3
 8012fa4:	e7ef      	b.n	8012f86 <_printf_i+0x14a>
 8012fa6:	4665      	mov	r5, ip
 8012fa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fac:	fb02 3311 	mls	r3, r2, r1, r3
 8012fb0:	5cc3      	ldrb	r3, [r0, r3]
 8012fb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	2900      	cmp	r1, #0
 8012fba:	d1f5      	bne.n	8012fa8 <_printf_i+0x16c>
 8012fbc:	e7b9      	b.n	8012f32 <_printf_i+0xf6>
 8012fbe:	6813      	ldr	r3, [r2, #0]
 8012fc0:	6825      	ldr	r5, [r4, #0]
 8012fc2:	6961      	ldr	r1, [r4, #20]
 8012fc4:	1d18      	adds	r0, r3, #4
 8012fc6:	6010      	str	r0, [r2, #0]
 8012fc8:	0628      	lsls	r0, r5, #24
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	d501      	bpl.n	8012fd2 <_printf_i+0x196>
 8012fce:	6019      	str	r1, [r3, #0]
 8012fd0:	e002      	b.n	8012fd8 <_printf_i+0x19c>
 8012fd2:	066a      	lsls	r2, r5, #25
 8012fd4:	d5fb      	bpl.n	8012fce <_printf_i+0x192>
 8012fd6:	8019      	strh	r1, [r3, #0]
 8012fd8:	2300      	movs	r3, #0
 8012fda:	6123      	str	r3, [r4, #16]
 8012fdc:	4665      	mov	r5, ip
 8012fde:	e7b9      	b.n	8012f54 <_printf_i+0x118>
 8012fe0:	6813      	ldr	r3, [r2, #0]
 8012fe2:	1d19      	adds	r1, r3, #4
 8012fe4:	6011      	str	r1, [r2, #0]
 8012fe6:	681d      	ldr	r5, [r3, #0]
 8012fe8:	6862      	ldr	r2, [r4, #4]
 8012fea:	2100      	movs	r1, #0
 8012fec:	4628      	mov	r0, r5
 8012fee:	f7ed f90f 	bl	8000210 <memchr>
 8012ff2:	b108      	cbz	r0, 8012ff8 <_printf_i+0x1bc>
 8012ff4:	1b40      	subs	r0, r0, r5
 8012ff6:	6060      	str	r0, [r4, #4]
 8012ff8:	6863      	ldr	r3, [r4, #4]
 8012ffa:	6123      	str	r3, [r4, #16]
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013002:	e7a7      	b.n	8012f54 <_printf_i+0x118>
 8013004:	6923      	ldr	r3, [r4, #16]
 8013006:	462a      	mov	r2, r5
 8013008:	4639      	mov	r1, r7
 801300a:	4630      	mov	r0, r6
 801300c:	47c0      	blx	r8
 801300e:	3001      	adds	r0, #1
 8013010:	d0aa      	beq.n	8012f68 <_printf_i+0x12c>
 8013012:	6823      	ldr	r3, [r4, #0]
 8013014:	079b      	lsls	r3, r3, #30
 8013016:	d413      	bmi.n	8013040 <_printf_i+0x204>
 8013018:	68e0      	ldr	r0, [r4, #12]
 801301a:	9b03      	ldr	r3, [sp, #12]
 801301c:	4298      	cmp	r0, r3
 801301e:	bfb8      	it	lt
 8013020:	4618      	movlt	r0, r3
 8013022:	e7a3      	b.n	8012f6c <_printf_i+0x130>
 8013024:	2301      	movs	r3, #1
 8013026:	464a      	mov	r2, r9
 8013028:	4639      	mov	r1, r7
 801302a:	4630      	mov	r0, r6
 801302c:	47c0      	blx	r8
 801302e:	3001      	adds	r0, #1
 8013030:	d09a      	beq.n	8012f68 <_printf_i+0x12c>
 8013032:	3501      	adds	r5, #1
 8013034:	68e3      	ldr	r3, [r4, #12]
 8013036:	9a03      	ldr	r2, [sp, #12]
 8013038:	1a9b      	subs	r3, r3, r2
 801303a:	42ab      	cmp	r3, r5
 801303c:	dcf2      	bgt.n	8013024 <_printf_i+0x1e8>
 801303e:	e7eb      	b.n	8013018 <_printf_i+0x1dc>
 8013040:	2500      	movs	r5, #0
 8013042:	f104 0919 	add.w	r9, r4, #25
 8013046:	e7f5      	b.n	8013034 <_printf_i+0x1f8>
 8013048:	2b00      	cmp	r3, #0
 801304a:	d1ac      	bne.n	8012fa6 <_printf_i+0x16a>
 801304c:	7803      	ldrb	r3, [r0, #0]
 801304e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013052:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013056:	e76c      	b.n	8012f32 <_printf_i+0xf6>
 8013058:	08017b54 	.word	0x08017b54
 801305c:	08017b65 	.word	0x08017b65

08013060 <_scanf_float>:
 8013060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013064:	469a      	mov	sl, r3
 8013066:	688b      	ldr	r3, [r1, #8]
 8013068:	4616      	mov	r6, r2
 801306a:	1e5a      	subs	r2, r3, #1
 801306c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013070:	b087      	sub	sp, #28
 8013072:	bf83      	ittte	hi
 8013074:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013078:	189b      	addhi	r3, r3, r2
 801307a:	9301      	strhi	r3, [sp, #4]
 801307c:	2300      	movls	r3, #0
 801307e:	bf86      	itte	hi
 8013080:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013084:	608b      	strhi	r3, [r1, #8]
 8013086:	9301      	strls	r3, [sp, #4]
 8013088:	680b      	ldr	r3, [r1, #0]
 801308a:	4688      	mov	r8, r1
 801308c:	f04f 0b00 	mov.w	fp, #0
 8013090:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013094:	f848 3b1c 	str.w	r3, [r8], #28
 8013098:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801309c:	4607      	mov	r7, r0
 801309e:	460c      	mov	r4, r1
 80130a0:	4645      	mov	r5, r8
 80130a2:	465a      	mov	r2, fp
 80130a4:	46d9      	mov	r9, fp
 80130a6:	f8cd b008 	str.w	fp, [sp, #8]
 80130aa:	68a1      	ldr	r1, [r4, #8]
 80130ac:	b181      	cbz	r1, 80130d0 <_scanf_float+0x70>
 80130ae:	6833      	ldr	r3, [r6, #0]
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	2b49      	cmp	r3, #73	; 0x49
 80130b4:	d071      	beq.n	801319a <_scanf_float+0x13a>
 80130b6:	d84d      	bhi.n	8013154 <_scanf_float+0xf4>
 80130b8:	2b39      	cmp	r3, #57	; 0x39
 80130ba:	d840      	bhi.n	801313e <_scanf_float+0xde>
 80130bc:	2b31      	cmp	r3, #49	; 0x31
 80130be:	f080 8088 	bcs.w	80131d2 <_scanf_float+0x172>
 80130c2:	2b2d      	cmp	r3, #45	; 0x2d
 80130c4:	f000 8090 	beq.w	80131e8 <_scanf_float+0x188>
 80130c8:	d815      	bhi.n	80130f6 <_scanf_float+0x96>
 80130ca:	2b2b      	cmp	r3, #43	; 0x2b
 80130cc:	f000 808c 	beq.w	80131e8 <_scanf_float+0x188>
 80130d0:	f1b9 0f00 	cmp.w	r9, #0
 80130d4:	d003      	beq.n	80130de <_scanf_float+0x7e>
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130dc:	6023      	str	r3, [r4, #0]
 80130de:	3a01      	subs	r2, #1
 80130e0:	2a01      	cmp	r2, #1
 80130e2:	f200 80ea 	bhi.w	80132ba <_scanf_float+0x25a>
 80130e6:	4545      	cmp	r5, r8
 80130e8:	f200 80dc 	bhi.w	80132a4 <_scanf_float+0x244>
 80130ec:	2601      	movs	r6, #1
 80130ee:	4630      	mov	r0, r6
 80130f0:	b007      	add	sp, #28
 80130f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f6:	2b2e      	cmp	r3, #46	; 0x2e
 80130f8:	f000 809f 	beq.w	801323a <_scanf_float+0x1da>
 80130fc:	2b30      	cmp	r3, #48	; 0x30
 80130fe:	d1e7      	bne.n	80130d0 <_scanf_float+0x70>
 8013100:	6820      	ldr	r0, [r4, #0]
 8013102:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013106:	d064      	beq.n	80131d2 <_scanf_float+0x172>
 8013108:	9b01      	ldr	r3, [sp, #4]
 801310a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801310e:	6020      	str	r0, [r4, #0]
 8013110:	f109 0901 	add.w	r9, r9, #1
 8013114:	b11b      	cbz	r3, 801311e <_scanf_float+0xbe>
 8013116:	3b01      	subs	r3, #1
 8013118:	3101      	adds	r1, #1
 801311a:	9301      	str	r3, [sp, #4]
 801311c:	60a1      	str	r1, [r4, #8]
 801311e:	68a3      	ldr	r3, [r4, #8]
 8013120:	3b01      	subs	r3, #1
 8013122:	60a3      	str	r3, [r4, #8]
 8013124:	6923      	ldr	r3, [r4, #16]
 8013126:	3301      	adds	r3, #1
 8013128:	6123      	str	r3, [r4, #16]
 801312a:	6873      	ldr	r3, [r6, #4]
 801312c:	3b01      	subs	r3, #1
 801312e:	2b00      	cmp	r3, #0
 8013130:	6073      	str	r3, [r6, #4]
 8013132:	f340 80ac 	ble.w	801328e <_scanf_float+0x22e>
 8013136:	6833      	ldr	r3, [r6, #0]
 8013138:	3301      	adds	r3, #1
 801313a:	6033      	str	r3, [r6, #0]
 801313c:	e7b5      	b.n	80130aa <_scanf_float+0x4a>
 801313e:	2b45      	cmp	r3, #69	; 0x45
 8013140:	f000 8085 	beq.w	801324e <_scanf_float+0x1ee>
 8013144:	2b46      	cmp	r3, #70	; 0x46
 8013146:	d06a      	beq.n	801321e <_scanf_float+0x1be>
 8013148:	2b41      	cmp	r3, #65	; 0x41
 801314a:	d1c1      	bne.n	80130d0 <_scanf_float+0x70>
 801314c:	2a01      	cmp	r2, #1
 801314e:	d1bf      	bne.n	80130d0 <_scanf_float+0x70>
 8013150:	2202      	movs	r2, #2
 8013152:	e046      	b.n	80131e2 <_scanf_float+0x182>
 8013154:	2b65      	cmp	r3, #101	; 0x65
 8013156:	d07a      	beq.n	801324e <_scanf_float+0x1ee>
 8013158:	d818      	bhi.n	801318c <_scanf_float+0x12c>
 801315a:	2b54      	cmp	r3, #84	; 0x54
 801315c:	d066      	beq.n	801322c <_scanf_float+0x1cc>
 801315e:	d811      	bhi.n	8013184 <_scanf_float+0x124>
 8013160:	2b4e      	cmp	r3, #78	; 0x4e
 8013162:	d1b5      	bne.n	80130d0 <_scanf_float+0x70>
 8013164:	2a00      	cmp	r2, #0
 8013166:	d146      	bne.n	80131f6 <_scanf_float+0x196>
 8013168:	f1b9 0f00 	cmp.w	r9, #0
 801316c:	d145      	bne.n	80131fa <_scanf_float+0x19a>
 801316e:	6821      	ldr	r1, [r4, #0]
 8013170:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013174:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013178:	d13f      	bne.n	80131fa <_scanf_float+0x19a>
 801317a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801317e:	6021      	str	r1, [r4, #0]
 8013180:	2201      	movs	r2, #1
 8013182:	e02e      	b.n	80131e2 <_scanf_float+0x182>
 8013184:	2b59      	cmp	r3, #89	; 0x59
 8013186:	d01e      	beq.n	80131c6 <_scanf_float+0x166>
 8013188:	2b61      	cmp	r3, #97	; 0x61
 801318a:	e7de      	b.n	801314a <_scanf_float+0xea>
 801318c:	2b6e      	cmp	r3, #110	; 0x6e
 801318e:	d0e9      	beq.n	8013164 <_scanf_float+0x104>
 8013190:	d815      	bhi.n	80131be <_scanf_float+0x15e>
 8013192:	2b66      	cmp	r3, #102	; 0x66
 8013194:	d043      	beq.n	801321e <_scanf_float+0x1be>
 8013196:	2b69      	cmp	r3, #105	; 0x69
 8013198:	d19a      	bne.n	80130d0 <_scanf_float+0x70>
 801319a:	f1bb 0f00 	cmp.w	fp, #0
 801319e:	d138      	bne.n	8013212 <_scanf_float+0x1b2>
 80131a0:	f1b9 0f00 	cmp.w	r9, #0
 80131a4:	d197      	bne.n	80130d6 <_scanf_float+0x76>
 80131a6:	6821      	ldr	r1, [r4, #0]
 80131a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80131ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80131b0:	d195      	bne.n	80130de <_scanf_float+0x7e>
 80131b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80131b6:	6021      	str	r1, [r4, #0]
 80131b8:	f04f 0b01 	mov.w	fp, #1
 80131bc:	e011      	b.n	80131e2 <_scanf_float+0x182>
 80131be:	2b74      	cmp	r3, #116	; 0x74
 80131c0:	d034      	beq.n	801322c <_scanf_float+0x1cc>
 80131c2:	2b79      	cmp	r3, #121	; 0x79
 80131c4:	d184      	bne.n	80130d0 <_scanf_float+0x70>
 80131c6:	f1bb 0f07 	cmp.w	fp, #7
 80131ca:	d181      	bne.n	80130d0 <_scanf_float+0x70>
 80131cc:	f04f 0b08 	mov.w	fp, #8
 80131d0:	e007      	b.n	80131e2 <_scanf_float+0x182>
 80131d2:	eb12 0f0b 	cmn.w	r2, fp
 80131d6:	f47f af7b 	bne.w	80130d0 <_scanf_float+0x70>
 80131da:	6821      	ldr	r1, [r4, #0]
 80131dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80131e0:	6021      	str	r1, [r4, #0]
 80131e2:	702b      	strb	r3, [r5, #0]
 80131e4:	3501      	adds	r5, #1
 80131e6:	e79a      	b.n	801311e <_scanf_float+0xbe>
 80131e8:	6821      	ldr	r1, [r4, #0]
 80131ea:	0608      	lsls	r0, r1, #24
 80131ec:	f57f af70 	bpl.w	80130d0 <_scanf_float+0x70>
 80131f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80131f4:	e7f4      	b.n	80131e0 <_scanf_float+0x180>
 80131f6:	2a02      	cmp	r2, #2
 80131f8:	d047      	beq.n	801328a <_scanf_float+0x22a>
 80131fa:	f1bb 0f01 	cmp.w	fp, #1
 80131fe:	d003      	beq.n	8013208 <_scanf_float+0x1a8>
 8013200:	f1bb 0f04 	cmp.w	fp, #4
 8013204:	f47f af64 	bne.w	80130d0 <_scanf_float+0x70>
 8013208:	f10b 0b01 	add.w	fp, fp, #1
 801320c:	fa5f fb8b 	uxtb.w	fp, fp
 8013210:	e7e7      	b.n	80131e2 <_scanf_float+0x182>
 8013212:	f1bb 0f03 	cmp.w	fp, #3
 8013216:	d0f7      	beq.n	8013208 <_scanf_float+0x1a8>
 8013218:	f1bb 0f05 	cmp.w	fp, #5
 801321c:	e7f2      	b.n	8013204 <_scanf_float+0x1a4>
 801321e:	f1bb 0f02 	cmp.w	fp, #2
 8013222:	f47f af55 	bne.w	80130d0 <_scanf_float+0x70>
 8013226:	f04f 0b03 	mov.w	fp, #3
 801322a:	e7da      	b.n	80131e2 <_scanf_float+0x182>
 801322c:	f1bb 0f06 	cmp.w	fp, #6
 8013230:	f47f af4e 	bne.w	80130d0 <_scanf_float+0x70>
 8013234:	f04f 0b07 	mov.w	fp, #7
 8013238:	e7d3      	b.n	80131e2 <_scanf_float+0x182>
 801323a:	6821      	ldr	r1, [r4, #0]
 801323c:	0588      	lsls	r0, r1, #22
 801323e:	f57f af47 	bpl.w	80130d0 <_scanf_float+0x70>
 8013242:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013246:	6021      	str	r1, [r4, #0]
 8013248:	f8cd 9008 	str.w	r9, [sp, #8]
 801324c:	e7c9      	b.n	80131e2 <_scanf_float+0x182>
 801324e:	6821      	ldr	r1, [r4, #0]
 8013250:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013254:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013258:	d006      	beq.n	8013268 <_scanf_float+0x208>
 801325a:	0548      	lsls	r0, r1, #21
 801325c:	f57f af38 	bpl.w	80130d0 <_scanf_float+0x70>
 8013260:	f1b9 0f00 	cmp.w	r9, #0
 8013264:	f43f af3b 	beq.w	80130de <_scanf_float+0x7e>
 8013268:	0588      	lsls	r0, r1, #22
 801326a:	bf58      	it	pl
 801326c:	9802      	ldrpl	r0, [sp, #8]
 801326e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013272:	bf58      	it	pl
 8013274:	eba9 0000 	subpl.w	r0, r9, r0
 8013278:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801327c:	bf58      	it	pl
 801327e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013282:	6021      	str	r1, [r4, #0]
 8013284:	f04f 0900 	mov.w	r9, #0
 8013288:	e7ab      	b.n	80131e2 <_scanf_float+0x182>
 801328a:	2203      	movs	r2, #3
 801328c:	e7a9      	b.n	80131e2 <_scanf_float+0x182>
 801328e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013292:	9205      	str	r2, [sp, #20]
 8013294:	4631      	mov	r1, r6
 8013296:	4638      	mov	r0, r7
 8013298:	4798      	blx	r3
 801329a:	9a05      	ldr	r2, [sp, #20]
 801329c:	2800      	cmp	r0, #0
 801329e:	f43f af04 	beq.w	80130aa <_scanf_float+0x4a>
 80132a2:	e715      	b.n	80130d0 <_scanf_float+0x70>
 80132a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80132ac:	4632      	mov	r2, r6
 80132ae:	4638      	mov	r0, r7
 80132b0:	4798      	blx	r3
 80132b2:	6923      	ldr	r3, [r4, #16]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	6123      	str	r3, [r4, #16]
 80132b8:	e715      	b.n	80130e6 <_scanf_float+0x86>
 80132ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80132be:	2b06      	cmp	r3, #6
 80132c0:	d80a      	bhi.n	80132d8 <_scanf_float+0x278>
 80132c2:	f1bb 0f02 	cmp.w	fp, #2
 80132c6:	d968      	bls.n	801339a <_scanf_float+0x33a>
 80132c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80132cc:	fa5f fb8b 	uxtb.w	fp, fp
 80132d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80132d4:	455d      	cmp	r5, fp
 80132d6:	d14b      	bne.n	8013370 <_scanf_float+0x310>
 80132d8:	6823      	ldr	r3, [r4, #0]
 80132da:	05da      	lsls	r2, r3, #23
 80132dc:	d51f      	bpl.n	801331e <_scanf_float+0x2be>
 80132de:	055b      	lsls	r3, r3, #21
 80132e0:	d468      	bmi.n	80133b4 <_scanf_float+0x354>
 80132e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80132e6:	6923      	ldr	r3, [r4, #16]
 80132e8:	2965      	cmp	r1, #101	; 0x65
 80132ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80132ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80132f2:	6123      	str	r3, [r4, #16]
 80132f4:	d00d      	beq.n	8013312 <_scanf_float+0x2b2>
 80132f6:	2945      	cmp	r1, #69	; 0x45
 80132f8:	d00b      	beq.n	8013312 <_scanf_float+0x2b2>
 80132fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132fe:	4632      	mov	r2, r6
 8013300:	4638      	mov	r0, r7
 8013302:	4798      	blx	r3
 8013304:	6923      	ldr	r3, [r4, #16]
 8013306:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801330a:	3b01      	subs	r3, #1
 801330c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013310:	6123      	str	r3, [r4, #16]
 8013312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013316:	4632      	mov	r2, r6
 8013318:	4638      	mov	r0, r7
 801331a:	4798      	blx	r3
 801331c:	465d      	mov	r5, fp
 801331e:	6826      	ldr	r6, [r4, #0]
 8013320:	f016 0610 	ands.w	r6, r6, #16
 8013324:	d17a      	bne.n	801341c <_scanf_float+0x3bc>
 8013326:	702e      	strb	r6, [r5, #0]
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013332:	d142      	bne.n	80133ba <_scanf_float+0x35a>
 8013334:	9b02      	ldr	r3, [sp, #8]
 8013336:	eba9 0303 	sub.w	r3, r9, r3
 801333a:	425a      	negs	r2, r3
 801333c:	2b00      	cmp	r3, #0
 801333e:	d149      	bne.n	80133d4 <_scanf_float+0x374>
 8013340:	2200      	movs	r2, #0
 8013342:	4641      	mov	r1, r8
 8013344:	4638      	mov	r0, r7
 8013346:	f000 ffcb 	bl	80142e0 <_strtod_r>
 801334a:	6825      	ldr	r5, [r4, #0]
 801334c:	f8da 3000 	ldr.w	r3, [sl]
 8013350:	f015 0f02 	tst.w	r5, #2
 8013354:	f103 0204 	add.w	r2, r3, #4
 8013358:	ec59 8b10 	vmov	r8, r9, d0
 801335c:	f8ca 2000 	str.w	r2, [sl]
 8013360:	d043      	beq.n	80133ea <_scanf_float+0x38a>
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	e9c3 8900 	strd	r8, r9, [r3]
 8013368:	68e3      	ldr	r3, [r4, #12]
 801336a:	3301      	adds	r3, #1
 801336c:	60e3      	str	r3, [r4, #12]
 801336e:	e6be      	b.n	80130ee <_scanf_float+0x8e>
 8013370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013374:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013378:	4632      	mov	r2, r6
 801337a:	4638      	mov	r0, r7
 801337c:	4798      	blx	r3
 801337e:	6923      	ldr	r3, [r4, #16]
 8013380:	3b01      	subs	r3, #1
 8013382:	6123      	str	r3, [r4, #16]
 8013384:	e7a6      	b.n	80132d4 <_scanf_float+0x274>
 8013386:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801338a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801338e:	4632      	mov	r2, r6
 8013390:	4638      	mov	r0, r7
 8013392:	4798      	blx	r3
 8013394:	6923      	ldr	r3, [r4, #16]
 8013396:	3b01      	subs	r3, #1
 8013398:	6123      	str	r3, [r4, #16]
 801339a:	4545      	cmp	r5, r8
 801339c:	d8f3      	bhi.n	8013386 <_scanf_float+0x326>
 801339e:	e6a5      	b.n	80130ec <_scanf_float+0x8c>
 80133a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80133a8:	4632      	mov	r2, r6
 80133aa:	4638      	mov	r0, r7
 80133ac:	4798      	blx	r3
 80133ae:	6923      	ldr	r3, [r4, #16]
 80133b0:	3b01      	subs	r3, #1
 80133b2:	6123      	str	r3, [r4, #16]
 80133b4:	4545      	cmp	r5, r8
 80133b6:	d8f3      	bhi.n	80133a0 <_scanf_float+0x340>
 80133b8:	e698      	b.n	80130ec <_scanf_float+0x8c>
 80133ba:	9b03      	ldr	r3, [sp, #12]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d0bf      	beq.n	8013340 <_scanf_float+0x2e0>
 80133c0:	9904      	ldr	r1, [sp, #16]
 80133c2:	230a      	movs	r3, #10
 80133c4:	4632      	mov	r2, r6
 80133c6:	3101      	adds	r1, #1
 80133c8:	4638      	mov	r0, r7
 80133ca:	f001 f815 	bl	80143f8 <_strtol_r>
 80133ce:	9b03      	ldr	r3, [sp, #12]
 80133d0:	9d04      	ldr	r5, [sp, #16]
 80133d2:	1ac2      	subs	r2, r0, r3
 80133d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80133d8:	429d      	cmp	r5, r3
 80133da:	bf28      	it	cs
 80133dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80133e0:	490f      	ldr	r1, [pc, #60]	; (8013420 <_scanf_float+0x3c0>)
 80133e2:	4628      	mov	r0, r5
 80133e4:	f000 f8d4 	bl	8013590 <siprintf>
 80133e8:	e7aa      	b.n	8013340 <_scanf_float+0x2e0>
 80133ea:	f015 0504 	ands.w	r5, r5, #4
 80133ee:	d1b8      	bne.n	8013362 <_scanf_float+0x302>
 80133f0:	681f      	ldr	r7, [r3, #0]
 80133f2:	ee10 2a10 	vmov	r2, s0
 80133f6:	464b      	mov	r3, r9
 80133f8:	ee10 0a10 	vmov	r0, s0
 80133fc:	4649      	mov	r1, r9
 80133fe:	f7ed fbad 	bl	8000b5c <__aeabi_dcmpun>
 8013402:	b128      	cbz	r0, 8013410 <_scanf_float+0x3b0>
 8013404:	4628      	mov	r0, r5
 8013406:	f000 f889 	bl	801351c <nanf>
 801340a:	ed87 0a00 	vstr	s0, [r7]
 801340e:	e7ab      	b.n	8013368 <_scanf_float+0x308>
 8013410:	4640      	mov	r0, r8
 8013412:	4649      	mov	r1, r9
 8013414:	f7ed fc00 	bl	8000c18 <__aeabi_d2f>
 8013418:	6038      	str	r0, [r7, #0]
 801341a:	e7a5      	b.n	8013368 <_scanf_float+0x308>
 801341c:	2600      	movs	r6, #0
 801341e:	e666      	b.n	80130ee <_scanf_float+0x8e>
 8013420:	08017b76 	.word	0x08017b76

08013424 <iprintf>:
 8013424:	b40f      	push	{r0, r1, r2, r3}
 8013426:	4b0a      	ldr	r3, [pc, #40]	; (8013450 <iprintf+0x2c>)
 8013428:	b513      	push	{r0, r1, r4, lr}
 801342a:	681c      	ldr	r4, [r3, #0]
 801342c:	b124      	cbz	r4, 8013438 <iprintf+0x14>
 801342e:	69a3      	ldr	r3, [r4, #24]
 8013430:	b913      	cbnz	r3, 8013438 <iprintf+0x14>
 8013432:	4620      	mov	r0, r4
 8013434:	f002 f828 	bl	8015488 <__sinit>
 8013438:	ab05      	add	r3, sp, #20
 801343a:	9a04      	ldr	r2, [sp, #16]
 801343c:	68a1      	ldr	r1, [r4, #8]
 801343e:	9301      	str	r3, [sp, #4]
 8013440:	4620      	mov	r0, r4
 8013442:	f003 fc5f 	bl	8016d04 <_vfiprintf_r>
 8013446:	b002      	add	sp, #8
 8013448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801344c:	b004      	add	sp, #16
 801344e:	4770      	bx	lr
 8013450:	2000000c 	.word	0x2000000c

08013454 <_puts_r>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	460e      	mov	r6, r1
 8013458:	4605      	mov	r5, r0
 801345a:	b118      	cbz	r0, 8013464 <_puts_r+0x10>
 801345c:	6983      	ldr	r3, [r0, #24]
 801345e:	b90b      	cbnz	r3, 8013464 <_puts_r+0x10>
 8013460:	f002 f812 	bl	8015488 <__sinit>
 8013464:	69ab      	ldr	r3, [r5, #24]
 8013466:	68ac      	ldr	r4, [r5, #8]
 8013468:	b913      	cbnz	r3, 8013470 <_puts_r+0x1c>
 801346a:	4628      	mov	r0, r5
 801346c:	f002 f80c 	bl	8015488 <__sinit>
 8013470:	4b23      	ldr	r3, [pc, #140]	; (8013500 <_puts_r+0xac>)
 8013472:	429c      	cmp	r4, r3
 8013474:	d117      	bne.n	80134a6 <_puts_r+0x52>
 8013476:	686c      	ldr	r4, [r5, #4]
 8013478:	89a3      	ldrh	r3, [r4, #12]
 801347a:	071b      	lsls	r3, r3, #28
 801347c:	d51d      	bpl.n	80134ba <_puts_r+0x66>
 801347e:	6923      	ldr	r3, [r4, #16]
 8013480:	b1db      	cbz	r3, 80134ba <_puts_r+0x66>
 8013482:	3e01      	subs	r6, #1
 8013484:	68a3      	ldr	r3, [r4, #8]
 8013486:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801348a:	3b01      	subs	r3, #1
 801348c:	60a3      	str	r3, [r4, #8]
 801348e:	b9e9      	cbnz	r1, 80134cc <_puts_r+0x78>
 8013490:	2b00      	cmp	r3, #0
 8013492:	da2e      	bge.n	80134f2 <_puts_r+0x9e>
 8013494:	4622      	mov	r2, r4
 8013496:	210a      	movs	r1, #10
 8013498:	4628      	mov	r0, r5
 801349a:	f000 ffdf 	bl	801445c <__swbuf_r>
 801349e:	3001      	adds	r0, #1
 80134a0:	d011      	beq.n	80134c6 <_puts_r+0x72>
 80134a2:	200a      	movs	r0, #10
 80134a4:	e011      	b.n	80134ca <_puts_r+0x76>
 80134a6:	4b17      	ldr	r3, [pc, #92]	; (8013504 <_puts_r+0xb0>)
 80134a8:	429c      	cmp	r4, r3
 80134aa:	d101      	bne.n	80134b0 <_puts_r+0x5c>
 80134ac:	68ac      	ldr	r4, [r5, #8]
 80134ae:	e7e3      	b.n	8013478 <_puts_r+0x24>
 80134b0:	4b15      	ldr	r3, [pc, #84]	; (8013508 <_puts_r+0xb4>)
 80134b2:	429c      	cmp	r4, r3
 80134b4:	bf08      	it	eq
 80134b6:	68ec      	ldreq	r4, [r5, #12]
 80134b8:	e7de      	b.n	8013478 <_puts_r+0x24>
 80134ba:	4621      	mov	r1, r4
 80134bc:	4628      	mov	r0, r5
 80134be:	f001 f831 	bl	8014524 <__swsetup_r>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d0dd      	beq.n	8013482 <_puts_r+0x2e>
 80134c6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ca:	bd70      	pop	{r4, r5, r6, pc}
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	da04      	bge.n	80134da <_puts_r+0x86>
 80134d0:	69a2      	ldr	r2, [r4, #24]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	dc06      	bgt.n	80134e4 <_puts_r+0x90>
 80134d6:	290a      	cmp	r1, #10
 80134d8:	d004      	beq.n	80134e4 <_puts_r+0x90>
 80134da:	6823      	ldr	r3, [r4, #0]
 80134dc:	1c5a      	adds	r2, r3, #1
 80134de:	6022      	str	r2, [r4, #0]
 80134e0:	7019      	strb	r1, [r3, #0]
 80134e2:	e7cf      	b.n	8013484 <_puts_r+0x30>
 80134e4:	4622      	mov	r2, r4
 80134e6:	4628      	mov	r0, r5
 80134e8:	f000 ffb8 	bl	801445c <__swbuf_r>
 80134ec:	3001      	adds	r0, #1
 80134ee:	d1c9      	bne.n	8013484 <_puts_r+0x30>
 80134f0:	e7e9      	b.n	80134c6 <_puts_r+0x72>
 80134f2:	6823      	ldr	r3, [r4, #0]
 80134f4:	200a      	movs	r0, #10
 80134f6:	1c5a      	adds	r2, r3, #1
 80134f8:	6022      	str	r2, [r4, #0]
 80134fa:	7018      	strb	r0, [r3, #0]
 80134fc:	e7e5      	b.n	80134ca <_puts_r+0x76>
 80134fe:	bf00      	nop
 8013500:	08017c00 	.word	0x08017c00
 8013504:	08017c20 	.word	0x08017c20
 8013508:	08017be0 	.word	0x08017be0

0801350c <puts>:
 801350c:	4b02      	ldr	r3, [pc, #8]	; (8013518 <puts+0xc>)
 801350e:	4601      	mov	r1, r0
 8013510:	6818      	ldr	r0, [r3, #0]
 8013512:	f7ff bf9f 	b.w	8013454 <_puts_r>
 8013516:	bf00      	nop
 8013518:	2000000c 	.word	0x2000000c

0801351c <nanf>:
 801351c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013524 <nanf+0x8>
 8013520:	4770      	bx	lr
 8013522:	bf00      	nop
 8013524:	7fc00000 	.word	0x7fc00000

08013528 <sniprintf>:
 8013528:	b40c      	push	{r2, r3}
 801352a:	b530      	push	{r4, r5, lr}
 801352c:	4b17      	ldr	r3, [pc, #92]	; (801358c <sniprintf+0x64>)
 801352e:	1e0c      	subs	r4, r1, #0
 8013530:	b09d      	sub	sp, #116	; 0x74
 8013532:	681d      	ldr	r5, [r3, #0]
 8013534:	da08      	bge.n	8013548 <sniprintf+0x20>
 8013536:	238b      	movs	r3, #139	; 0x8b
 8013538:	602b      	str	r3, [r5, #0]
 801353a:	f04f 30ff 	mov.w	r0, #4294967295
 801353e:	b01d      	add	sp, #116	; 0x74
 8013540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013544:	b002      	add	sp, #8
 8013546:	4770      	bx	lr
 8013548:	f44f 7302 	mov.w	r3, #520	; 0x208
 801354c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013550:	bf14      	ite	ne
 8013552:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013556:	4623      	moveq	r3, r4
 8013558:	9304      	str	r3, [sp, #16]
 801355a:	9307      	str	r3, [sp, #28]
 801355c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013560:	9002      	str	r0, [sp, #8]
 8013562:	9006      	str	r0, [sp, #24]
 8013564:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801356a:	ab21      	add	r3, sp, #132	; 0x84
 801356c:	a902      	add	r1, sp, #8
 801356e:	4628      	mov	r0, r5
 8013570:	9301      	str	r3, [sp, #4]
 8013572:	f003 f8fb 	bl	801676c <_svfiprintf_r>
 8013576:	1c43      	adds	r3, r0, #1
 8013578:	bfbc      	itt	lt
 801357a:	238b      	movlt	r3, #139	; 0x8b
 801357c:	602b      	strlt	r3, [r5, #0]
 801357e:	2c00      	cmp	r4, #0
 8013580:	d0dd      	beq.n	801353e <sniprintf+0x16>
 8013582:	9b02      	ldr	r3, [sp, #8]
 8013584:	2200      	movs	r2, #0
 8013586:	701a      	strb	r2, [r3, #0]
 8013588:	e7d9      	b.n	801353e <sniprintf+0x16>
 801358a:	bf00      	nop
 801358c:	2000000c 	.word	0x2000000c

08013590 <siprintf>:
 8013590:	b40e      	push	{r1, r2, r3}
 8013592:	b500      	push	{lr}
 8013594:	b09c      	sub	sp, #112	; 0x70
 8013596:	ab1d      	add	r3, sp, #116	; 0x74
 8013598:	9002      	str	r0, [sp, #8]
 801359a:	9006      	str	r0, [sp, #24]
 801359c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80135a0:	4809      	ldr	r0, [pc, #36]	; (80135c8 <siprintf+0x38>)
 80135a2:	9107      	str	r1, [sp, #28]
 80135a4:	9104      	str	r1, [sp, #16]
 80135a6:	4909      	ldr	r1, [pc, #36]	; (80135cc <siprintf+0x3c>)
 80135a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ac:	9105      	str	r1, [sp, #20]
 80135ae:	6800      	ldr	r0, [r0, #0]
 80135b0:	9301      	str	r3, [sp, #4]
 80135b2:	a902      	add	r1, sp, #8
 80135b4:	f003 f8da 	bl	801676c <_svfiprintf_r>
 80135b8:	9b02      	ldr	r3, [sp, #8]
 80135ba:	2200      	movs	r2, #0
 80135bc:	701a      	strb	r2, [r3, #0]
 80135be:	b01c      	add	sp, #112	; 0x70
 80135c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c4:	b003      	add	sp, #12
 80135c6:	4770      	bx	lr
 80135c8:	2000000c 	.word	0x2000000c
 80135cc:	ffff0208 	.word	0xffff0208

080135d0 <siscanf>:
 80135d0:	b40e      	push	{r1, r2, r3}
 80135d2:	b530      	push	{r4, r5, lr}
 80135d4:	b09c      	sub	sp, #112	; 0x70
 80135d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80135d8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80135dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80135e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80135e4:	9002      	str	r0, [sp, #8]
 80135e6:	9006      	str	r0, [sp, #24]
 80135e8:	f7ec fe0a 	bl	8000200 <strlen>
 80135ec:	4b0b      	ldr	r3, [pc, #44]	; (801361c <siscanf+0x4c>)
 80135ee:	9003      	str	r0, [sp, #12]
 80135f0:	9007      	str	r0, [sp, #28]
 80135f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80135f4:	480a      	ldr	r0, [pc, #40]	; (8013620 <siscanf+0x50>)
 80135f6:	9401      	str	r4, [sp, #4]
 80135f8:	2300      	movs	r3, #0
 80135fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80135fc:	9314      	str	r3, [sp, #80]	; 0x50
 80135fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013602:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013606:	462a      	mov	r2, r5
 8013608:	4623      	mov	r3, r4
 801360a:	a902      	add	r1, sp, #8
 801360c:	6800      	ldr	r0, [r0, #0]
 801360e:	f003 f9ff 	bl	8016a10 <__ssvfiscanf_r>
 8013612:	b01c      	add	sp, #112	; 0x70
 8013614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013618:	b003      	add	sp, #12
 801361a:	4770      	bx	lr
 801361c:	08013647 	.word	0x08013647
 8013620:	2000000c 	.word	0x2000000c

08013624 <__sread>:
 8013624:	b510      	push	{r4, lr}
 8013626:	460c      	mov	r4, r1
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	f003 fdd8 	bl	80171e0 <_read_r>
 8013630:	2800      	cmp	r0, #0
 8013632:	bfab      	itete	ge
 8013634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013636:	89a3      	ldrhlt	r3, [r4, #12]
 8013638:	181b      	addge	r3, r3, r0
 801363a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801363e:	bfac      	ite	ge
 8013640:	6563      	strge	r3, [r4, #84]	; 0x54
 8013642:	81a3      	strhlt	r3, [r4, #12]
 8013644:	bd10      	pop	{r4, pc}

08013646 <__seofread>:
 8013646:	2000      	movs	r0, #0
 8013648:	4770      	bx	lr

0801364a <__swrite>:
 801364a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364e:	461f      	mov	r7, r3
 8013650:	898b      	ldrh	r3, [r1, #12]
 8013652:	05db      	lsls	r3, r3, #23
 8013654:	4605      	mov	r5, r0
 8013656:	460c      	mov	r4, r1
 8013658:	4616      	mov	r6, r2
 801365a:	d505      	bpl.n	8013668 <__swrite+0x1e>
 801365c:	2302      	movs	r3, #2
 801365e:	2200      	movs	r2, #0
 8013660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013664:	f002 fae2 	bl	8015c2c <_lseek_r>
 8013668:	89a3      	ldrh	r3, [r4, #12]
 801366a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801366e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013672:	81a3      	strh	r3, [r4, #12]
 8013674:	4632      	mov	r2, r6
 8013676:	463b      	mov	r3, r7
 8013678:	4628      	mov	r0, r5
 801367a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367e:	f000 bf3f 	b.w	8014500 <_write_r>

08013682 <__sseek>:
 8013682:	b510      	push	{r4, lr}
 8013684:	460c      	mov	r4, r1
 8013686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801368a:	f002 facf 	bl	8015c2c <_lseek_r>
 801368e:	1c43      	adds	r3, r0, #1
 8013690:	89a3      	ldrh	r3, [r4, #12]
 8013692:	bf15      	itete	ne
 8013694:	6560      	strne	r0, [r4, #84]	; 0x54
 8013696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801369a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801369e:	81a3      	strheq	r3, [r4, #12]
 80136a0:	bf18      	it	ne
 80136a2:	81a3      	strhne	r3, [r4, #12]
 80136a4:	bd10      	pop	{r4, pc}

080136a6 <__sclose>:
 80136a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136aa:	f000 bfa9 	b.w	8014600 <_close_r>

080136ae <strcpy>:
 80136ae:	4603      	mov	r3, r0
 80136b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136b4:	f803 2b01 	strb.w	r2, [r3], #1
 80136b8:	2a00      	cmp	r2, #0
 80136ba:	d1f9      	bne.n	80136b0 <strcpy+0x2>
 80136bc:	4770      	bx	lr

080136be <sulp>:
 80136be:	b570      	push	{r4, r5, r6, lr}
 80136c0:	4604      	mov	r4, r0
 80136c2:	460d      	mov	r5, r1
 80136c4:	ec45 4b10 	vmov	d0, r4, r5
 80136c8:	4616      	mov	r6, r2
 80136ca:	f002 fe0b 	bl	80162e4 <__ulp>
 80136ce:	ec51 0b10 	vmov	r0, r1, d0
 80136d2:	b17e      	cbz	r6, 80136f4 <sulp+0x36>
 80136d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80136d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136dc:	2b00      	cmp	r3, #0
 80136de:	dd09      	ble.n	80136f4 <sulp+0x36>
 80136e0:	051b      	lsls	r3, r3, #20
 80136e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80136e6:	2400      	movs	r4, #0
 80136e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80136ec:	4622      	mov	r2, r4
 80136ee:	462b      	mov	r3, r5
 80136f0:	f7ec ff9a 	bl	8000628 <__aeabi_dmul>
 80136f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080136f8 <_strtod_l>:
 80136f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fc:	461f      	mov	r7, r3
 80136fe:	b0a1      	sub	sp, #132	; 0x84
 8013700:	2300      	movs	r3, #0
 8013702:	4681      	mov	r9, r0
 8013704:	4638      	mov	r0, r7
 8013706:	460e      	mov	r6, r1
 8013708:	9217      	str	r2, [sp, #92]	; 0x5c
 801370a:	931c      	str	r3, [sp, #112]	; 0x70
 801370c:	f002 fa7e 	bl	8015c0c <__localeconv_l>
 8013710:	4680      	mov	r8, r0
 8013712:	6800      	ldr	r0, [r0, #0]
 8013714:	f7ec fd74 	bl	8000200 <strlen>
 8013718:	f04f 0a00 	mov.w	sl, #0
 801371c:	4604      	mov	r4, r0
 801371e:	f04f 0b00 	mov.w	fp, #0
 8013722:	961b      	str	r6, [sp, #108]	; 0x6c
 8013724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013726:	781a      	ldrb	r2, [r3, #0]
 8013728:	2a0d      	cmp	r2, #13
 801372a:	d832      	bhi.n	8013792 <_strtod_l+0x9a>
 801372c:	2a09      	cmp	r2, #9
 801372e:	d236      	bcs.n	801379e <_strtod_l+0xa6>
 8013730:	2a00      	cmp	r2, #0
 8013732:	d03e      	beq.n	80137b2 <_strtod_l+0xba>
 8013734:	2300      	movs	r3, #0
 8013736:	930d      	str	r3, [sp, #52]	; 0x34
 8013738:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801373a:	782b      	ldrb	r3, [r5, #0]
 801373c:	2b30      	cmp	r3, #48	; 0x30
 801373e:	f040 80ac 	bne.w	801389a <_strtod_l+0x1a2>
 8013742:	786b      	ldrb	r3, [r5, #1]
 8013744:	2b58      	cmp	r3, #88	; 0x58
 8013746:	d001      	beq.n	801374c <_strtod_l+0x54>
 8013748:	2b78      	cmp	r3, #120	; 0x78
 801374a:	d167      	bne.n	801381c <_strtod_l+0x124>
 801374c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801374e:	9301      	str	r3, [sp, #4]
 8013750:	ab1c      	add	r3, sp, #112	; 0x70
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	9702      	str	r7, [sp, #8]
 8013756:	ab1d      	add	r3, sp, #116	; 0x74
 8013758:	4a88      	ldr	r2, [pc, #544]	; (801397c <_strtod_l+0x284>)
 801375a:	a91b      	add	r1, sp, #108	; 0x6c
 801375c:	4648      	mov	r0, r9
 801375e:	f001 ff6c 	bl	801563a <__gethex>
 8013762:	f010 0407 	ands.w	r4, r0, #7
 8013766:	4606      	mov	r6, r0
 8013768:	d005      	beq.n	8013776 <_strtod_l+0x7e>
 801376a:	2c06      	cmp	r4, #6
 801376c:	d12b      	bne.n	80137c6 <_strtod_l+0xce>
 801376e:	3501      	adds	r5, #1
 8013770:	2300      	movs	r3, #0
 8013772:	951b      	str	r5, [sp, #108]	; 0x6c
 8013774:	930d      	str	r3, [sp, #52]	; 0x34
 8013776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013778:	2b00      	cmp	r3, #0
 801377a:	f040 859a 	bne.w	80142b2 <_strtod_l+0xbba>
 801377e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013780:	b1e3      	cbz	r3, 80137bc <_strtod_l+0xc4>
 8013782:	4652      	mov	r2, sl
 8013784:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013788:	ec43 2b10 	vmov	d0, r2, r3
 801378c:	b021      	add	sp, #132	; 0x84
 801378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013792:	2a2b      	cmp	r2, #43	; 0x2b
 8013794:	d015      	beq.n	80137c2 <_strtod_l+0xca>
 8013796:	2a2d      	cmp	r2, #45	; 0x2d
 8013798:	d004      	beq.n	80137a4 <_strtod_l+0xac>
 801379a:	2a20      	cmp	r2, #32
 801379c:	d1ca      	bne.n	8013734 <_strtod_l+0x3c>
 801379e:	3301      	adds	r3, #1
 80137a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80137a2:	e7bf      	b.n	8013724 <_strtod_l+0x2c>
 80137a4:	2201      	movs	r2, #1
 80137a6:	920d      	str	r2, [sp, #52]	; 0x34
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80137ac:	785b      	ldrb	r3, [r3, #1]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d1c2      	bne.n	8013738 <_strtod_l+0x40>
 80137b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f040 8579 	bne.w	80142ae <_strtod_l+0xbb6>
 80137bc:	4652      	mov	r2, sl
 80137be:	465b      	mov	r3, fp
 80137c0:	e7e2      	b.n	8013788 <_strtod_l+0x90>
 80137c2:	2200      	movs	r2, #0
 80137c4:	e7ef      	b.n	80137a6 <_strtod_l+0xae>
 80137c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80137c8:	b13a      	cbz	r2, 80137da <_strtod_l+0xe2>
 80137ca:	2135      	movs	r1, #53	; 0x35
 80137cc:	a81e      	add	r0, sp, #120	; 0x78
 80137ce:	f002 fe81 	bl	80164d4 <__copybits>
 80137d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137d4:	4648      	mov	r0, r9
 80137d6:	f002 faed 	bl	8015db4 <_Bfree>
 80137da:	3c01      	subs	r4, #1
 80137dc:	2c04      	cmp	r4, #4
 80137de:	d806      	bhi.n	80137ee <_strtod_l+0xf6>
 80137e0:	e8df f004 	tbb	[pc, r4]
 80137e4:	1714030a 	.word	0x1714030a
 80137e8:	0a          	.byte	0x0a
 80137e9:	00          	.byte	0x00
 80137ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80137ee:	0730      	lsls	r0, r6, #28
 80137f0:	d5c1      	bpl.n	8013776 <_strtod_l+0x7e>
 80137f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80137f6:	e7be      	b.n	8013776 <_strtod_l+0x7e>
 80137f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80137fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80137fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013802:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013806:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801380a:	e7f0      	b.n	80137ee <_strtod_l+0xf6>
 801380c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013980 <_strtod_l+0x288>
 8013810:	e7ed      	b.n	80137ee <_strtod_l+0xf6>
 8013812:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013816:	f04f 3aff 	mov.w	sl, #4294967295
 801381a:	e7e8      	b.n	80137ee <_strtod_l+0xf6>
 801381c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801381e:	1c5a      	adds	r2, r3, #1
 8013820:	921b      	str	r2, [sp, #108]	; 0x6c
 8013822:	785b      	ldrb	r3, [r3, #1]
 8013824:	2b30      	cmp	r3, #48	; 0x30
 8013826:	d0f9      	beq.n	801381c <_strtod_l+0x124>
 8013828:	2b00      	cmp	r3, #0
 801382a:	d0a4      	beq.n	8013776 <_strtod_l+0x7e>
 801382c:	2301      	movs	r3, #1
 801382e:	2500      	movs	r5, #0
 8013830:	9306      	str	r3, [sp, #24]
 8013832:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013834:	9308      	str	r3, [sp, #32]
 8013836:	9507      	str	r5, [sp, #28]
 8013838:	9505      	str	r5, [sp, #20]
 801383a:	220a      	movs	r2, #10
 801383c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801383e:	7807      	ldrb	r7, [r0, #0]
 8013840:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013844:	b2d9      	uxtb	r1, r3
 8013846:	2909      	cmp	r1, #9
 8013848:	d929      	bls.n	801389e <_strtod_l+0x1a6>
 801384a:	4622      	mov	r2, r4
 801384c:	f8d8 1000 	ldr.w	r1, [r8]
 8013850:	f003 fd1a 	bl	8017288 <strncmp>
 8013854:	2800      	cmp	r0, #0
 8013856:	d031      	beq.n	80138bc <_strtod_l+0x1c4>
 8013858:	2000      	movs	r0, #0
 801385a:	9c05      	ldr	r4, [sp, #20]
 801385c:	9004      	str	r0, [sp, #16]
 801385e:	463b      	mov	r3, r7
 8013860:	4602      	mov	r2, r0
 8013862:	2b65      	cmp	r3, #101	; 0x65
 8013864:	d001      	beq.n	801386a <_strtod_l+0x172>
 8013866:	2b45      	cmp	r3, #69	; 0x45
 8013868:	d114      	bne.n	8013894 <_strtod_l+0x19c>
 801386a:	b924      	cbnz	r4, 8013876 <_strtod_l+0x17e>
 801386c:	b910      	cbnz	r0, 8013874 <_strtod_l+0x17c>
 801386e:	9b06      	ldr	r3, [sp, #24]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d09e      	beq.n	80137b2 <_strtod_l+0xba>
 8013874:	2400      	movs	r4, #0
 8013876:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013878:	1c73      	adds	r3, r6, #1
 801387a:	931b      	str	r3, [sp, #108]	; 0x6c
 801387c:	7873      	ldrb	r3, [r6, #1]
 801387e:	2b2b      	cmp	r3, #43	; 0x2b
 8013880:	d078      	beq.n	8013974 <_strtod_l+0x27c>
 8013882:	2b2d      	cmp	r3, #45	; 0x2d
 8013884:	d070      	beq.n	8013968 <_strtod_l+0x270>
 8013886:	f04f 0c00 	mov.w	ip, #0
 801388a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801388e:	2f09      	cmp	r7, #9
 8013890:	d97c      	bls.n	801398c <_strtod_l+0x294>
 8013892:	961b      	str	r6, [sp, #108]	; 0x6c
 8013894:	f04f 0e00 	mov.w	lr, #0
 8013898:	e09a      	b.n	80139d0 <_strtod_l+0x2d8>
 801389a:	2300      	movs	r3, #0
 801389c:	e7c7      	b.n	801382e <_strtod_l+0x136>
 801389e:	9905      	ldr	r1, [sp, #20]
 80138a0:	2908      	cmp	r1, #8
 80138a2:	bfdd      	ittte	le
 80138a4:	9907      	ldrle	r1, [sp, #28]
 80138a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80138aa:	9307      	strle	r3, [sp, #28]
 80138ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80138b0:	9b05      	ldr	r3, [sp, #20]
 80138b2:	3001      	adds	r0, #1
 80138b4:	3301      	adds	r3, #1
 80138b6:	9305      	str	r3, [sp, #20]
 80138b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80138ba:	e7bf      	b.n	801383c <_strtod_l+0x144>
 80138bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138be:	191a      	adds	r2, r3, r4
 80138c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80138c2:	9a05      	ldr	r2, [sp, #20]
 80138c4:	5d1b      	ldrb	r3, [r3, r4]
 80138c6:	2a00      	cmp	r2, #0
 80138c8:	d037      	beq.n	801393a <_strtod_l+0x242>
 80138ca:	9c05      	ldr	r4, [sp, #20]
 80138cc:	4602      	mov	r2, r0
 80138ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80138d2:	2909      	cmp	r1, #9
 80138d4:	d913      	bls.n	80138fe <_strtod_l+0x206>
 80138d6:	2101      	movs	r1, #1
 80138d8:	9104      	str	r1, [sp, #16]
 80138da:	e7c2      	b.n	8013862 <_strtod_l+0x16a>
 80138dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80138e2:	785b      	ldrb	r3, [r3, #1]
 80138e4:	3001      	adds	r0, #1
 80138e6:	2b30      	cmp	r3, #48	; 0x30
 80138e8:	d0f8      	beq.n	80138dc <_strtod_l+0x1e4>
 80138ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80138ee:	2a08      	cmp	r2, #8
 80138f0:	f200 84e4 	bhi.w	80142bc <_strtod_l+0xbc4>
 80138f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80138f6:	9208      	str	r2, [sp, #32]
 80138f8:	4602      	mov	r2, r0
 80138fa:	2000      	movs	r0, #0
 80138fc:	4604      	mov	r4, r0
 80138fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013902:	f100 0101 	add.w	r1, r0, #1
 8013906:	d012      	beq.n	801392e <_strtod_l+0x236>
 8013908:	440a      	add	r2, r1
 801390a:	eb00 0c04 	add.w	ip, r0, r4
 801390e:	4621      	mov	r1, r4
 8013910:	270a      	movs	r7, #10
 8013912:	458c      	cmp	ip, r1
 8013914:	d113      	bne.n	801393e <_strtod_l+0x246>
 8013916:	1821      	adds	r1, r4, r0
 8013918:	2908      	cmp	r1, #8
 801391a:	f104 0401 	add.w	r4, r4, #1
 801391e:	4404      	add	r4, r0
 8013920:	dc19      	bgt.n	8013956 <_strtod_l+0x25e>
 8013922:	9b07      	ldr	r3, [sp, #28]
 8013924:	210a      	movs	r1, #10
 8013926:	fb01 e303 	mla	r3, r1, r3, lr
 801392a:	9307      	str	r3, [sp, #28]
 801392c:	2100      	movs	r1, #0
 801392e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013930:	1c58      	adds	r0, r3, #1
 8013932:	901b      	str	r0, [sp, #108]	; 0x6c
 8013934:	785b      	ldrb	r3, [r3, #1]
 8013936:	4608      	mov	r0, r1
 8013938:	e7c9      	b.n	80138ce <_strtod_l+0x1d6>
 801393a:	9805      	ldr	r0, [sp, #20]
 801393c:	e7d3      	b.n	80138e6 <_strtod_l+0x1ee>
 801393e:	2908      	cmp	r1, #8
 8013940:	f101 0101 	add.w	r1, r1, #1
 8013944:	dc03      	bgt.n	801394e <_strtod_l+0x256>
 8013946:	9b07      	ldr	r3, [sp, #28]
 8013948:	437b      	muls	r3, r7
 801394a:	9307      	str	r3, [sp, #28]
 801394c:	e7e1      	b.n	8013912 <_strtod_l+0x21a>
 801394e:	2910      	cmp	r1, #16
 8013950:	bfd8      	it	le
 8013952:	437d      	mulle	r5, r7
 8013954:	e7dd      	b.n	8013912 <_strtod_l+0x21a>
 8013956:	2c10      	cmp	r4, #16
 8013958:	bfdc      	itt	le
 801395a:	210a      	movle	r1, #10
 801395c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013960:	e7e4      	b.n	801392c <_strtod_l+0x234>
 8013962:	2301      	movs	r3, #1
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	e781      	b.n	801386c <_strtod_l+0x174>
 8013968:	f04f 0c01 	mov.w	ip, #1
 801396c:	1cb3      	adds	r3, r6, #2
 801396e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013970:	78b3      	ldrb	r3, [r6, #2]
 8013972:	e78a      	b.n	801388a <_strtod_l+0x192>
 8013974:	f04f 0c00 	mov.w	ip, #0
 8013978:	e7f8      	b.n	801396c <_strtod_l+0x274>
 801397a:	bf00      	nop
 801397c:	08017b7c 	.word	0x08017b7c
 8013980:	7ff00000 	.word	0x7ff00000
 8013984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013986:	1c5f      	adds	r7, r3, #1
 8013988:	971b      	str	r7, [sp, #108]	; 0x6c
 801398a:	785b      	ldrb	r3, [r3, #1]
 801398c:	2b30      	cmp	r3, #48	; 0x30
 801398e:	d0f9      	beq.n	8013984 <_strtod_l+0x28c>
 8013990:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013994:	2f08      	cmp	r7, #8
 8013996:	f63f af7d 	bhi.w	8013894 <_strtod_l+0x19c>
 801399a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801399e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139a0:	930a      	str	r3, [sp, #40]	; 0x28
 80139a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139a4:	1c5f      	adds	r7, r3, #1
 80139a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80139a8:	785b      	ldrb	r3, [r3, #1]
 80139aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80139ae:	f1b8 0f09 	cmp.w	r8, #9
 80139b2:	d937      	bls.n	8013a24 <_strtod_l+0x32c>
 80139b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139b6:	1a7f      	subs	r7, r7, r1
 80139b8:	2f08      	cmp	r7, #8
 80139ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80139be:	dc37      	bgt.n	8013a30 <_strtod_l+0x338>
 80139c0:	45be      	cmp	lr, r7
 80139c2:	bfa8      	it	ge
 80139c4:	46be      	movge	lr, r7
 80139c6:	f1bc 0f00 	cmp.w	ip, #0
 80139ca:	d001      	beq.n	80139d0 <_strtod_l+0x2d8>
 80139cc:	f1ce 0e00 	rsb	lr, lr, #0
 80139d0:	2c00      	cmp	r4, #0
 80139d2:	d151      	bne.n	8013a78 <_strtod_l+0x380>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	f47f aece 	bne.w	8013776 <_strtod_l+0x7e>
 80139da:	9a06      	ldr	r2, [sp, #24]
 80139dc:	2a00      	cmp	r2, #0
 80139de:	f47f aeca 	bne.w	8013776 <_strtod_l+0x7e>
 80139e2:	9a04      	ldr	r2, [sp, #16]
 80139e4:	2a00      	cmp	r2, #0
 80139e6:	f47f aee4 	bne.w	80137b2 <_strtod_l+0xba>
 80139ea:	2b4e      	cmp	r3, #78	; 0x4e
 80139ec:	d027      	beq.n	8013a3e <_strtod_l+0x346>
 80139ee:	dc21      	bgt.n	8013a34 <_strtod_l+0x33c>
 80139f0:	2b49      	cmp	r3, #73	; 0x49
 80139f2:	f47f aede 	bne.w	80137b2 <_strtod_l+0xba>
 80139f6:	49a0      	ldr	r1, [pc, #640]	; (8013c78 <_strtod_l+0x580>)
 80139f8:	a81b      	add	r0, sp, #108	; 0x6c
 80139fa:	f002 f851 	bl	8015aa0 <__match>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	f43f aed7 	beq.w	80137b2 <_strtod_l+0xba>
 8013a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a06:	499d      	ldr	r1, [pc, #628]	; (8013c7c <_strtod_l+0x584>)
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	a81b      	add	r0, sp, #108	; 0x6c
 8013a0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a0e:	f002 f847 	bl	8015aa0 <__match>
 8013a12:	b910      	cbnz	r0, 8013a1a <_strtod_l+0x322>
 8013a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a16:	3301      	adds	r3, #1
 8013a18:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a1a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013c90 <_strtod_l+0x598>
 8013a1e:	f04f 0a00 	mov.w	sl, #0
 8013a22:	e6a8      	b.n	8013776 <_strtod_l+0x7e>
 8013a24:	210a      	movs	r1, #10
 8013a26:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013a2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a2e:	e7b8      	b.n	80139a2 <_strtod_l+0x2aa>
 8013a30:	46be      	mov	lr, r7
 8013a32:	e7c8      	b.n	80139c6 <_strtod_l+0x2ce>
 8013a34:	2b69      	cmp	r3, #105	; 0x69
 8013a36:	d0de      	beq.n	80139f6 <_strtod_l+0x2fe>
 8013a38:	2b6e      	cmp	r3, #110	; 0x6e
 8013a3a:	f47f aeba 	bne.w	80137b2 <_strtod_l+0xba>
 8013a3e:	4990      	ldr	r1, [pc, #576]	; (8013c80 <_strtod_l+0x588>)
 8013a40:	a81b      	add	r0, sp, #108	; 0x6c
 8013a42:	f002 f82d 	bl	8015aa0 <__match>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	f43f aeb3 	beq.w	80137b2 <_strtod_l+0xba>
 8013a4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	2b28      	cmp	r3, #40	; 0x28
 8013a52:	d10e      	bne.n	8013a72 <_strtod_l+0x37a>
 8013a54:	aa1e      	add	r2, sp, #120	; 0x78
 8013a56:	498b      	ldr	r1, [pc, #556]	; (8013c84 <_strtod_l+0x58c>)
 8013a58:	a81b      	add	r0, sp, #108	; 0x6c
 8013a5a:	f002 f835 	bl	8015ac8 <__hexnan>
 8013a5e:	2805      	cmp	r0, #5
 8013a60:	d107      	bne.n	8013a72 <_strtod_l+0x37a>
 8013a62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a64:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013a68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013a6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013a70:	e681      	b.n	8013776 <_strtod_l+0x7e>
 8013a72:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013c98 <_strtod_l+0x5a0>
 8013a76:	e7d2      	b.n	8013a1e <_strtod_l+0x326>
 8013a78:	ebae 0302 	sub.w	r3, lr, r2
 8013a7c:	9306      	str	r3, [sp, #24]
 8013a7e:	9b05      	ldr	r3, [sp, #20]
 8013a80:	9807      	ldr	r0, [sp, #28]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	bf08      	it	eq
 8013a86:	4623      	moveq	r3, r4
 8013a88:	2c10      	cmp	r4, #16
 8013a8a:	9305      	str	r3, [sp, #20]
 8013a8c:	46a0      	mov	r8, r4
 8013a8e:	bfa8      	it	ge
 8013a90:	f04f 0810 	movge.w	r8, #16
 8013a94:	f7ec fd4e 	bl	8000534 <__aeabi_ui2d>
 8013a98:	2c09      	cmp	r4, #9
 8013a9a:	4682      	mov	sl, r0
 8013a9c:	468b      	mov	fp, r1
 8013a9e:	dc13      	bgt.n	8013ac8 <_strtod_l+0x3d0>
 8013aa0:	9b06      	ldr	r3, [sp, #24]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f43f ae67 	beq.w	8013776 <_strtod_l+0x7e>
 8013aa8:	9b06      	ldr	r3, [sp, #24]
 8013aaa:	dd7a      	ble.n	8013ba2 <_strtod_l+0x4aa>
 8013aac:	2b16      	cmp	r3, #22
 8013aae:	dc61      	bgt.n	8013b74 <_strtod_l+0x47c>
 8013ab0:	4a75      	ldr	r2, [pc, #468]	; (8013c88 <_strtod_l+0x590>)
 8013ab2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013ab6:	e9de 0100 	ldrd	r0, r1, [lr]
 8013aba:	4652      	mov	r2, sl
 8013abc:	465b      	mov	r3, fp
 8013abe:	f7ec fdb3 	bl	8000628 <__aeabi_dmul>
 8013ac2:	4682      	mov	sl, r0
 8013ac4:	468b      	mov	fp, r1
 8013ac6:	e656      	b.n	8013776 <_strtod_l+0x7e>
 8013ac8:	4b6f      	ldr	r3, [pc, #444]	; (8013c88 <_strtod_l+0x590>)
 8013aca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013ace:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013ad2:	f7ec fda9 	bl	8000628 <__aeabi_dmul>
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	4628      	mov	r0, r5
 8013ada:	460f      	mov	r7, r1
 8013adc:	f7ec fd2a 	bl	8000534 <__aeabi_ui2d>
 8013ae0:	4602      	mov	r2, r0
 8013ae2:	460b      	mov	r3, r1
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	4639      	mov	r1, r7
 8013ae8:	f7ec fbe8 	bl	80002bc <__adddf3>
 8013aec:	2c0f      	cmp	r4, #15
 8013aee:	4682      	mov	sl, r0
 8013af0:	468b      	mov	fp, r1
 8013af2:	ddd5      	ble.n	8013aa0 <_strtod_l+0x3a8>
 8013af4:	9b06      	ldr	r3, [sp, #24]
 8013af6:	eba4 0808 	sub.w	r8, r4, r8
 8013afa:	4498      	add	r8, r3
 8013afc:	f1b8 0f00 	cmp.w	r8, #0
 8013b00:	f340 8096 	ble.w	8013c30 <_strtod_l+0x538>
 8013b04:	f018 030f 	ands.w	r3, r8, #15
 8013b08:	d00a      	beq.n	8013b20 <_strtod_l+0x428>
 8013b0a:	495f      	ldr	r1, [pc, #380]	; (8013c88 <_strtod_l+0x590>)
 8013b0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b10:	4652      	mov	r2, sl
 8013b12:	465b      	mov	r3, fp
 8013b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b18:	f7ec fd86 	bl	8000628 <__aeabi_dmul>
 8013b1c:	4682      	mov	sl, r0
 8013b1e:	468b      	mov	fp, r1
 8013b20:	f038 080f 	bics.w	r8, r8, #15
 8013b24:	d073      	beq.n	8013c0e <_strtod_l+0x516>
 8013b26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013b2a:	dd47      	ble.n	8013bbc <_strtod_l+0x4c4>
 8013b2c:	2400      	movs	r4, #0
 8013b2e:	46a0      	mov	r8, r4
 8013b30:	9407      	str	r4, [sp, #28]
 8013b32:	9405      	str	r4, [sp, #20]
 8013b34:	2322      	movs	r3, #34	; 0x22
 8013b36:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013c90 <_strtod_l+0x598>
 8013b3a:	f8c9 3000 	str.w	r3, [r9]
 8013b3e:	f04f 0a00 	mov.w	sl, #0
 8013b42:	9b07      	ldr	r3, [sp, #28]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	f43f ae16 	beq.w	8013776 <_strtod_l+0x7e>
 8013b4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013b4c:	4648      	mov	r0, r9
 8013b4e:	f002 f931 	bl	8015db4 <_Bfree>
 8013b52:	9905      	ldr	r1, [sp, #20]
 8013b54:	4648      	mov	r0, r9
 8013b56:	f002 f92d 	bl	8015db4 <_Bfree>
 8013b5a:	4641      	mov	r1, r8
 8013b5c:	4648      	mov	r0, r9
 8013b5e:	f002 f929 	bl	8015db4 <_Bfree>
 8013b62:	9907      	ldr	r1, [sp, #28]
 8013b64:	4648      	mov	r0, r9
 8013b66:	f002 f925 	bl	8015db4 <_Bfree>
 8013b6a:	4621      	mov	r1, r4
 8013b6c:	4648      	mov	r0, r9
 8013b6e:	f002 f921 	bl	8015db4 <_Bfree>
 8013b72:	e600      	b.n	8013776 <_strtod_l+0x7e>
 8013b74:	9a06      	ldr	r2, [sp, #24]
 8013b76:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	dbba      	blt.n	8013af4 <_strtod_l+0x3fc>
 8013b7e:	4d42      	ldr	r5, [pc, #264]	; (8013c88 <_strtod_l+0x590>)
 8013b80:	f1c4 040f 	rsb	r4, r4, #15
 8013b84:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013b88:	4652      	mov	r2, sl
 8013b8a:	465b      	mov	r3, fp
 8013b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b90:	f7ec fd4a 	bl	8000628 <__aeabi_dmul>
 8013b94:	9b06      	ldr	r3, [sp, #24]
 8013b96:	1b1c      	subs	r4, r3, r4
 8013b98:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013b9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ba0:	e78d      	b.n	8013abe <_strtod_l+0x3c6>
 8013ba2:	f113 0f16 	cmn.w	r3, #22
 8013ba6:	dba5      	blt.n	8013af4 <_strtod_l+0x3fc>
 8013ba8:	4a37      	ldr	r2, [pc, #220]	; (8013c88 <_strtod_l+0x590>)
 8013baa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013bae:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013bb2:	4650      	mov	r0, sl
 8013bb4:	4659      	mov	r1, fp
 8013bb6:	f7ec fe61 	bl	800087c <__aeabi_ddiv>
 8013bba:	e782      	b.n	8013ac2 <_strtod_l+0x3ca>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	4e33      	ldr	r6, [pc, #204]	; (8013c8c <_strtod_l+0x594>)
 8013bc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013bc4:	4650      	mov	r0, sl
 8013bc6:	4659      	mov	r1, fp
 8013bc8:	461d      	mov	r5, r3
 8013bca:	f1b8 0f01 	cmp.w	r8, #1
 8013bce:	dc21      	bgt.n	8013c14 <_strtod_l+0x51c>
 8013bd0:	b10b      	cbz	r3, 8013bd6 <_strtod_l+0x4de>
 8013bd2:	4682      	mov	sl, r0
 8013bd4:	468b      	mov	fp, r1
 8013bd6:	4b2d      	ldr	r3, [pc, #180]	; (8013c8c <_strtod_l+0x594>)
 8013bd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013bdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013be0:	4652      	mov	r2, sl
 8013be2:	465b      	mov	r3, fp
 8013be4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013be8:	f7ec fd1e 	bl	8000628 <__aeabi_dmul>
 8013bec:	4b28      	ldr	r3, [pc, #160]	; (8013c90 <_strtod_l+0x598>)
 8013bee:	460a      	mov	r2, r1
 8013bf0:	400b      	ands	r3, r1
 8013bf2:	4928      	ldr	r1, [pc, #160]	; (8013c94 <_strtod_l+0x59c>)
 8013bf4:	428b      	cmp	r3, r1
 8013bf6:	4682      	mov	sl, r0
 8013bf8:	d898      	bhi.n	8013b2c <_strtod_l+0x434>
 8013bfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013bfe:	428b      	cmp	r3, r1
 8013c00:	bf86      	itte	hi
 8013c02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013c9c <_strtod_l+0x5a4>
 8013c06:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013c0e:	2300      	movs	r3, #0
 8013c10:	9304      	str	r3, [sp, #16]
 8013c12:	e077      	b.n	8013d04 <_strtod_l+0x60c>
 8013c14:	f018 0f01 	tst.w	r8, #1
 8013c18:	d006      	beq.n	8013c28 <_strtod_l+0x530>
 8013c1a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c22:	f7ec fd01 	bl	8000628 <__aeabi_dmul>
 8013c26:	2301      	movs	r3, #1
 8013c28:	3501      	adds	r5, #1
 8013c2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c2e:	e7cc      	b.n	8013bca <_strtod_l+0x4d2>
 8013c30:	d0ed      	beq.n	8013c0e <_strtod_l+0x516>
 8013c32:	f1c8 0800 	rsb	r8, r8, #0
 8013c36:	f018 020f 	ands.w	r2, r8, #15
 8013c3a:	d00a      	beq.n	8013c52 <_strtod_l+0x55a>
 8013c3c:	4b12      	ldr	r3, [pc, #72]	; (8013c88 <_strtod_l+0x590>)
 8013c3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c42:	4650      	mov	r0, sl
 8013c44:	4659      	mov	r1, fp
 8013c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4a:	f7ec fe17 	bl	800087c <__aeabi_ddiv>
 8013c4e:	4682      	mov	sl, r0
 8013c50:	468b      	mov	fp, r1
 8013c52:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013c56:	d0da      	beq.n	8013c0e <_strtod_l+0x516>
 8013c58:	f1b8 0f1f 	cmp.w	r8, #31
 8013c5c:	dd20      	ble.n	8013ca0 <_strtod_l+0x5a8>
 8013c5e:	2400      	movs	r4, #0
 8013c60:	46a0      	mov	r8, r4
 8013c62:	9407      	str	r4, [sp, #28]
 8013c64:	9405      	str	r4, [sp, #20]
 8013c66:	2322      	movs	r3, #34	; 0x22
 8013c68:	f04f 0a00 	mov.w	sl, #0
 8013c6c:	f04f 0b00 	mov.w	fp, #0
 8013c70:	f8c9 3000 	str.w	r3, [r9]
 8013c74:	e765      	b.n	8013b42 <_strtod_l+0x44a>
 8013c76:	bf00      	nop
 8013c78:	08017b49 	.word	0x08017b49
 8013c7c:	08017bd3 	.word	0x08017bd3
 8013c80:	08017b51 	.word	0x08017b51
 8013c84:	08017b90 	.word	0x08017b90
 8013c88:	08017c78 	.word	0x08017c78
 8013c8c:	08017c50 	.word	0x08017c50
 8013c90:	7ff00000 	.word	0x7ff00000
 8013c94:	7ca00000 	.word	0x7ca00000
 8013c98:	fff80000 	.word	0xfff80000
 8013c9c:	7fefffff 	.word	0x7fefffff
 8013ca0:	f018 0310 	ands.w	r3, r8, #16
 8013ca4:	bf18      	it	ne
 8013ca6:	236a      	movne	r3, #106	; 0x6a
 8013ca8:	4da0      	ldr	r5, [pc, #640]	; (8013f2c <_strtod_l+0x834>)
 8013caa:	9304      	str	r3, [sp, #16]
 8013cac:	4650      	mov	r0, sl
 8013cae:	4659      	mov	r1, fp
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	f1b8 0f00 	cmp.w	r8, #0
 8013cb6:	f300 810a 	bgt.w	8013ece <_strtod_l+0x7d6>
 8013cba:	b10b      	cbz	r3, 8013cc0 <_strtod_l+0x5c8>
 8013cbc:	4682      	mov	sl, r0
 8013cbe:	468b      	mov	fp, r1
 8013cc0:	9b04      	ldr	r3, [sp, #16]
 8013cc2:	b1bb      	cbz	r3, 8013cf4 <_strtod_l+0x5fc>
 8013cc4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013cc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	4659      	mov	r1, fp
 8013cd0:	dd10      	ble.n	8013cf4 <_strtod_l+0x5fc>
 8013cd2:	2b1f      	cmp	r3, #31
 8013cd4:	f340 8107 	ble.w	8013ee6 <_strtod_l+0x7ee>
 8013cd8:	2b34      	cmp	r3, #52	; 0x34
 8013cda:	bfde      	ittt	le
 8013cdc:	3b20      	suble	r3, #32
 8013cde:	f04f 32ff 	movle.w	r2, #4294967295
 8013ce2:	fa02 f303 	lslle.w	r3, r2, r3
 8013ce6:	f04f 0a00 	mov.w	sl, #0
 8013cea:	bfcc      	ite	gt
 8013cec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013cf0:	ea03 0b01 	andle.w	fp, r3, r1
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	4650      	mov	r0, sl
 8013cfa:	4659      	mov	r1, fp
 8013cfc:	f7ec fefc 	bl	8000af8 <__aeabi_dcmpeq>
 8013d00:	2800      	cmp	r0, #0
 8013d02:	d1ac      	bne.n	8013c5e <_strtod_l+0x566>
 8013d04:	9b07      	ldr	r3, [sp, #28]
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	9a05      	ldr	r2, [sp, #20]
 8013d0a:	9908      	ldr	r1, [sp, #32]
 8013d0c:	4623      	mov	r3, r4
 8013d0e:	4648      	mov	r0, r9
 8013d10:	f002 f8a2 	bl	8015e58 <__s2b>
 8013d14:	9007      	str	r0, [sp, #28]
 8013d16:	2800      	cmp	r0, #0
 8013d18:	f43f af08 	beq.w	8013b2c <_strtod_l+0x434>
 8013d1c:	9a06      	ldr	r2, [sp, #24]
 8013d1e:	9b06      	ldr	r3, [sp, #24]
 8013d20:	2a00      	cmp	r2, #0
 8013d22:	f1c3 0300 	rsb	r3, r3, #0
 8013d26:	bfa8      	it	ge
 8013d28:	2300      	movge	r3, #0
 8013d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8013d2c:	2400      	movs	r4, #0
 8013d2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013d32:	9316      	str	r3, [sp, #88]	; 0x58
 8013d34:	46a0      	mov	r8, r4
 8013d36:	9b07      	ldr	r3, [sp, #28]
 8013d38:	4648      	mov	r0, r9
 8013d3a:	6859      	ldr	r1, [r3, #4]
 8013d3c:	f002 f806 	bl	8015d4c <_Balloc>
 8013d40:	9005      	str	r0, [sp, #20]
 8013d42:	2800      	cmp	r0, #0
 8013d44:	f43f aef6 	beq.w	8013b34 <_strtod_l+0x43c>
 8013d48:	9b07      	ldr	r3, [sp, #28]
 8013d4a:	691a      	ldr	r2, [r3, #16]
 8013d4c:	3202      	adds	r2, #2
 8013d4e:	f103 010c 	add.w	r1, r3, #12
 8013d52:	0092      	lsls	r2, r2, #2
 8013d54:	300c      	adds	r0, #12
 8013d56:	f7fe fd13 	bl	8012780 <memcpy>
 8013d5a:	aa1e      	add	r2, sp, #120	; 0x78
 8013d5c:	a91d      	add	r1, sp, #116	; 0x74
 8013d5e:	ec4b ab10 	vmov	d0, sl, fp
 8013d62:	4648      	mov	r0, r9
 8013d64:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013d68:	f002 fb32 	bl	80163d0 <__d2b>
 8013d6c:	901c      	str	r0, [sp, #112]	; 0x70
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f43f aee0 	beq.w	8013b34 <_strtod_l+0x43c>
 8013d74:	2101      	movs	r1, #1
 8013d76:	4648      	mov	r0, r9
 8013d78:	f002 f8fa 	bl	8015f70 <__i2b>
 8013d7c:	4680      	mov	r8, r0
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	f43f aed8 	beq.w	8013b34 <_strtod_l+0x43c>
 8013d84:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013d86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013d88:	2e00      	cmp	r6, #0
 8013d8a:	bfab      	itete	ge
 8013d8c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013d8e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013d90:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013d92:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013d94:	bfac      	ite	ge
 8013d96:	18f7      	addge	r7, r6, r3
 8013d98:	1b9d      	sublt	r5, r3, r6
 8013d9a:	9b04      	ldr	r3, [sp, #16]
 8013d9c:	1af6      	subs	r6, r6, r3
 8013d9e:	4416      	add	r6, r2
 8013da0:	4b63      	ldr	r3, [pc, #396]	; (8013f30 <_strtod_l+0x838>)
 8013da2:	3e01      	subs	r6, #1
 8013da4:	429e      	cmp	r6, r3
 8013da6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013daa:	f280 80af 	bge.w	8013f0c <_strtod_l+0x814>
 8013dae:	1b9b      	subs	r3, r3, r6
 8013db0:	2b1f      	cmp	r3, #31
 8013db2:	eba2 0203 	sub.w	r2, r2, r3
 8013db6:	f04f 0101 	mov.w	r1, #1
 8013dba:	f300 809b 	bgt.w	8013ef4 <_strtod_l+0x7fc>
 8013dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8013dc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8013dc8:	18be      	adds	r6, r7, r2
 8013dca:	9b04      	ldr	r3, [sp, #16]
 8013dcc:	42b7      	cmp	r7, r6
 8013dce:	4415      	add	r5, r2
 8013dd0:	441d      	add	r5, r3
 8013dd2:	463b      	mov	r3, r7
 8013dd4:	bfa8      	it	ge
 8013dd6:	4633      	movge	r3, r6
 8013dd8:	42ab      	cmp	r3, r5
 8013dda:	bfa8      	it	ge
 8013ddc:	462b      	movge	r3, r5
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	bfc2      	ittt	gt
 8013de2:	1af6      	subgt	r6, r6, r3
 8013de4:	1aed      	subgt	r5, r5, r3
 8013de6:	1aff      	subgt	r7, r7, r3
 8013de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013dea:	b1bb      	cbz	r3, 8013e1c <_strtod_l+0x724>
 8013dec:	4641      	mov	r1, r8
 8013dee:	461a      	mov	r2, r3
 8013df0:	4648      	mov	r0, r9
 8013df2:	f002 f95d 	bl	80160b0 <__pow5mult>
 8013df6:	4680      	mov	r8, r0
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	f43f ae9b 	beq.w	8013b34 <_strtod_l+0x43c>
 8013dfe:	4601      	mov	r1, r0
 8013e00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e02:	4648      	mov	r0, r9
 8013e04:	f002 f8bd 	bl	8015f82 <__multiply>
 8013e08:	900c      	str	r0, [sp, #48]	; 0x30
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	f43f ae92 	beq.w	8013b34 <_strtod_l+0x43c>
 8013e10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e12:	4648      	mov	r0, r9
 8013e14:	f001 ffce 	bl	8015db4 <_Bfree>
 8013e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e1a:	931c      	str	r3, [sp, #112]	; 0x70
 8013e1c:	2e00      	cmp	r6, #0
 8013e1e:	dc7a      	bgt.n	8013f16 <_strtod_l+0x81e>
 8013e20:	9b06      	ldr	r3, [sp, #24]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	dd08      	ble.n	8013e38 <_strtod_l+0x740>
 8013e26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013e28:	9905      	ldr	r1, [sp, #20]
 8013e2a:	4648      	mov	r0, r9
 8013e2c:	f002 f940 	bl	80160b0 <__pow5mult>
 8013e30:	9005      	str	r0, [sp, #20]
 8013e32:	2800      	cmp	r0, #0
 8013e34:	f43f ae7e 	beq.w	8013b34 <_strtod_l+0x43c>
 8013e38:	2d00      	cmp	r5, #0
 8013e3a:	dd08      	ble.n	8013e4e <_strtod_l+0x756>
 8013e3c:	462a      	mov	r2, r5
 8013e3e:	9905      	ldr	r1, [sp, #20]
 8013e40:	4648      	mov	r0, r9
 8013e42:	f002 f983 	bl	801614c <__lshift>
 8013e46:	9005      	str	r0, [sp, #20]
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	f43f ae73 	beq.w	8013b34 <_strtod_l+0x43c>
 8013e4e:	2f00      	cmp	r7, #0
 8013e50:	dd08      	ble.n	8013e64 <_strtod_l+0x76c>
 8013e52:	4641      	mov	r1, r8
 8013e54:	463a      	mov	r2, r7
 8013e56:	4648      	mov	r0, r9
 8013e58:	f002 f978 	bl	801614c <__lshift>
 8013e5c:	4680      	mov	r8, r0
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	f43f ae68 	beq.w	8013b34 <_strtod_l+0x43c>
 8013e64:	9a05      	ldr	r2, [sp, #20]
 8013e66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e68:	4648      	mov	r0, r9
 8013e6a:	f002 f9dd 	bl	8016228 <__mdiff>
 8013e6e:	4604      	mov	r4, r0
 8013e70:	2800      	cmp	r0, #0
 8013e72:	f43f ae5f 	beq.w	8013b34 <_strtod_l+0x43c>
 8013e76:	68c3      	ldr	r3, [r0, #12]
 8013e78:	930c      	str	r3, [sp, #48]	; 0x30
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	60c3      	str	r3, [r0, #12]
 8013e7e:	4641      	mov	r1, r8
 8013e80:	f002 f9b8 	bl	80161f4 <__mcmp>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	da55      	bge.n	8013f34 <_strtod_l+0x83c>
 8013e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e8a:	b9e3      	cbnz	r3, 8013ec6 <_strtod_l+0x7ce>
 8013e8c:	f1ba 0f00 	cmp.w	sl, #0
 8013e90:	d119      	bne.n	8013ec6 <_strtod_l+0x7ce>
 8013e92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e96:	b9b3      	cbnz	r3, 8013ec6 <_strtod_l+0x7ce>
 8013e98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e9c:	0d1b      	lsrs	r3, r3, #20
 8013e9e:	051b      	lsls	r3, r3, #20
 8013ea0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013ea4:	d90f      	bls.n	8013ec6 <_strtod_l+0x7ce>
 8013ea6:	6963      	ldr	r3, [r4, #20]
 8013ea8:	b913      	cbnz	r3, 8013eb0 <_strtod_l+0x7b8>
 8013eaa:	6923      	ldr	r3, [r4, #16]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	dd0a      	ble.n	8013ec6 <_strtod_l+0x7ce>
 8013eb0:	4621      	mov	r1, r4
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	4648      	mov	r0, r9
 8013eb6:	f002 f949 	bl	801614c <__lshift>
 8013eba:	4641      	mov	r1, r8
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	f002 f999 	bl	80161f4 <__mcmp>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	dc67      	bgt.n	8013f96 <_strtod_l+0x89e>
 8013ec6:	9b04      	ldr	r3, [sp, #16]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d171      	bne.n	8013fb0 <_strtod_l+0x8b8>
 8013ecc:	e63d      	b.n	8013b4a <_strtod_l+0x452>
 8013ece:	f018 0f01 	tst.w	r8, #1
 8013ed2:	d004      	beq.n	8013ede <_strtod_l+0x7e6>
 8013ed4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ed8:	f7ec fba6 	bl	8000628 <__aeabi_dmul>
 8013edc:	2301      	movs	r3, #1
 8013ede:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013ee2:	3508      	adds	r5, #8
 8013ee4:	e6e5      	b.n	8013cb2 <_strtod_l+0x5ba>
 8013ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8013eea:	fa02 f303 	lsl.w	r3, r2, r3
 8013eee:	ea03 0a0a 	and.w	sl, r3, sl
 8013ef2:	e6ff      	b.n	8013cf4 <_strtod_l+0x5fc>
 8013ef4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013ef8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013efc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013f00:	36e2      	adds	r6, #226	; 0xe2
 8013f02:	fa01 f306 	lsl.w	r3, r1, r6
 8013f06:	930a      	str	r3, [sp, #40]	; 0x28
 8013f08:	910f      	str	r1, [sp, #60]	; 0x3c
 8013f0a:	e75d      	b.n	8013dc8 <_strtod_l+0x6d0>
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f10:	2301      	movs	r3, #1
 8013f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f14:	e758      	b.n	8013dc8 <_strtod_l+0x6d0>
 8013f16:	4632      	mov	r2, r6
 8013f18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f1a:	4648      	mov	r0, r9
 8013f1c:	f002 f916 	bl	801614c <__lshift>
 8013f20:	901c      	str	r0, [sp, #112]	; 0x70
 8013f22:	2800      	cmp	r0, #0
 8013f24:	f47f af7c 	bne.w	8013e20 <_strtod_l+0x728>
 8013f28:	e604      	b.n	8013b34 <_strtod_l+0x43c>
 8013f2a:	bf00      	nop
 8013f2c:	08017ba8 	.word	0x08017ba8
 8013f30:	fffffc02 	.word	0xfffffc02
 8013f34:	465d      	mov	r5, fp
 8013f36:	f040 8086 	bne.w	8014046 <_strtod_l+0x94e>
 8013f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f40:	b32a      	cbz	r2, 8013f8e <_strtod_l+0x896>
 8013f42:	4aaf      	ldr	r2, [pc, #700]	; (8014200 <_strtod_l+0xb08>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d153      	bne.n	8013ff0 <_strtod_l+0x8f8>
 8013f48:	9b04      	ldr	r3, [sp, #16]
 8013f4a:	4650      	mov	r0, sl
 8013f4c:	b1d3      	cbz	r3, 8013f84 <_strtod_l+0x88c>
 8013f4e:	4aad      	ldr	r2, [pc, #692]	; (8014204 <_strtod_l+0xb0c>)
 8013f50:	402a      	ands	r2, r5
 8013f52:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013f56:	f04f 31ff 	mov.w	r1, #4294967295
 8013f5a:	d816      	bhi.n	8013f8a <_strtod_l+0x892>
 8013f5c:	0d12      	lsrs	r2, r2, #20
 8013f5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013f62:	fa01 f303 	lsl.w	r3, r1, r3
 8013f66:	4298      	cmp	r0, r3
 8013f68:	d142      	bne.n	8013ff0 <_strtod_l+0x8f8>
 8013f6a:	4ba7      	ldr	r3, [pc, #668]	; (8014208 <_strtod_l+0xb10>)
 8013f6c:	429d      	cmp	r5, r3
 8013f6e:	d102      	bne.n	8013f76 <_strtod_l+0x87e>
 8013f70:	3001      	adds	r0, #1
 8013f72:	f43f addf 	beq.w	8013b34 <_strtod_l+0x43c>
 8013f76:	4ba3      	ldr	r3, [pc, #652]	; (8014204 <_strtod_l+0xb0c>)
 8013f78:	402b      	ands	r3, r5
 8013f7a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013f7e:	f04f 0a00 	mov.w	sl, #0
 8013f82:	e7a0      	b.n	8013ec6 <_strtod_l+0x7ce>
 8013f84:	f04f 33ff 	mov.w	r3, #4294967295
 8013f88:	e7ed      	b.n	8013f66 <_strtod_l+0x86e>
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	e7eb      	b.n	8013f66 <_strtod_l+0x86e>
 8013f8e:	bb7b      	cbnz	r3, 8013ff0 <_strtod_l+0x8f8>
 8013f90:	f1ba 0f00 	cmp.w	sl, #0
 8013f94:	d12c      	bne.n	8013ff0 <_strtod_l+0x8f8>
 8013f96:	9904      	ldr	r1, [sp, #16]
 8013f98:	4a9a      	ldr	r2, [pc, #616]	; (8014204 <_strtod_l+0xb0c>)
 8013f9a:	465b      	mov	r3, fp
 8013f9c:	b1f1      	cbz	r1, 8013fdc <_strtod_l+0x8e4>
 8013f9e:	ea02 010b 	and.w	r1, r2, fp
 8013fa2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013fa6:	dc19      	bgt.n	8013fdc <_strtod_l+0x8e4>
 8013fa8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013fac:	f77f ae5b 	ble.w	8013c66 <_strtod_l+0x56e>
 8013fb0:	4a96      	ldr	r2, [pc, #600]	; (801420c <_strtod_l+0xb14>)
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013fb8:	4650      	mov	r0, sl
 8013fba:	4659      	mov	r1, fp
 8013fbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013fc0:	f7ec fb32 	bl	8000628 <__aeabi_dmul>
 8013fc4:	4682      	mov	sl, r0
 8013fc6:	468b      	mov	fp, r1
 8013fc8:	2900      	cmp	r1, #0
 8013fca:	f47f adbe 	bne.w	8013b4a <_strtod_l+0x452>
 8013fce:	2800      	cmp	r0, #0
 8013fd0:	f47f adbb 	bne.w	8013b4a <_strtod_l+0x452>
 8013fd4:	2322      	movs	r3, #34	; 0x22
 8013fd6:	f8c9 3000 	str.w	r3, [r9]
 8013fda:	e5b6      	b.n	8013b4a <_strtod_l+0x452>
 8013fdc:	4013      	ands	r3, r2
 8013fde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013fe2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013fe6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013fea:	f04f 3aff 	mov.w	sl, #4294967295
 8013fee:	e76a      	b.n	8013ec6 <_strtod_l+0x7ce>
 8013ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff2:	b193      	cbz	r3, 801401a <_strtod_l+0x922>
 8013ff4:	422b      	tst	r3, r5
 8013ff6:	f43f af66 	beq.w	8013ec6 <_strtod_l+0x7ce>
 8013ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ffc:	9a04      	ldr	r2, [sp, #16]
 8013ffe:	4650      	mov	r0, sl
 8014000:	4659      	mov	r1, fp
 8014002:	b173      	cbz	r3, 8014022 <_strtod_l+0x92a>
 8014004:	f7ff fb5b 	bl	80136be <sulp>
 8014008:	4602      	mov	r2, r0
 801400a:	460b      	mov	r3, r1
 801400c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014010:	f7ec f954 	bl	80002bc <__adddf3>
 8014014:	4682      	mov	sl, r0
 8014016:	468b      	mov	fp, r1
 8014018:	e755      	b.n	8013ec6 <_strtod_l+0x7ce>
 801401a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801401c:	ea13 0f0a 	tst.w	r3, sl
 8014020:	e7e9      	b.n	8013ff6 <_strtod_l+0x8fe>
 8014022:	f7ff fb4c 	bl	80136be <sulp>
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801402e:	f7ec f943 	bl	80002b8 <__aeabi_dsub>
 8014032:	2200      	movs	r2, #0
 8014034:	2300      	movs	r3, #0
 8014036:	4682      	mov	sl, r0
 8014038:	468b      	mov	fp, r1
 801403a:	f7ec fd5d 	bl	8000af8 <__aeabi_dcmpeq>
 801403e:	2800      	cmp	r0, #0
 8014040:	f47f ae11 	bne.w	8013c66 <_strtod_l+0x56e>
 8014044:	e73f      	b.n	8013ec6 <_strtod_l+0x7ce>
 8014046:	4641      	mov	r1, r8
 8014048:	4620      	mov	r0, r4
 801404a:	f002 fa10 	bl	801646e <__ratio>
 801404e:	ec57 6b10 	vmov	r6, r7, d0
 8014052:	2200      	movs	r2, #0
 8014054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014058:	ee10 0a10 	vmov	r0, s0
 801405c:	4639      	mov	r1, r7
 801405e:	f7ec fd5f 	bl	8000b20 <__aeabi_dcmple>
 8014062:	2800      	cmp	r0, #0
 8014064:	d077      	beq.n	8014156 <_strtod_l+0xa5e>
 8014066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014068:	2b00      	cmp	r3, #0
 801406a:	d04a      	beq.n	8014102 <_strtod_l+0xa0a>
 801406c:	4b68      	ldr	r3, [pc, #416]	; (8014210 <_strtod_l+0xb18>)
 801406e:	2200      	movs	r2, #0
 8014070:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014074:	4f66      	ldr	r7, [pc, #408]	; (8014210 <_strtod_l+0xb18>)
 8014076:	2600      	movs	r6, #0
 8014078:	4b62      	ldr	r3, [pc, #392]	; (8014204 <_strtod_l+0xb0c>)
 801407a:	402b      	ands	r3, r5
 801407c:	930f      	str	r3, [sp, #60]	; 0x3c
 801407e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014080:	4b64      	ldr	r3, [pc, #400]	; (8014214 <_strtod_l+0xb1c>)
 8014082:	429a      	cmp	r2, r3
 8014084:	f040 80ce 	bne.w	8014224 <_strtod_l+0xb2c>
 8014088:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801408c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014090:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014094:	ec4b ab10 	vmov	d0, sl, fp
 8014098:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801409c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80140a0:	f002 f920 	bl	80162e4 <__ulp>
 80140a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80140a8:	ec53 2b10 	vmov	r2, r3, d0
 80140ac:	f7ec fabc 	bl	8000628 <__aeabi_dmul>
 80140b0:	4652      	mov	r2, sl
 80140b2:	465b      	mov	r3, fp
 80140b4:	f7ec f902 	bl	80002bc <__adddf3>
 80140b8:	460b      	mov	r3, r1
 80140ba:	4952      	ldr	r1, [pc, #328]	; (8014204 <_strtod_l+0xb0c>)
 80140bc:	4a56      	ldr	r2, [pc, #344]	; (8014218 <_strtod_l+0xb20>)
 80140be:	4019      	ands	r1, r3
 80140c0:	4291      	cmp	r1, r2
 80140c2:	4682      	mov	sl, r0
 80140c4:	d95b      	bls.n	801417e <_strtod_l+0xa86>
 80140c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80140cc:	4293      	cmp	r3, r2
 80140ce:	d103      	bne.n	80140d8 <_strtod_l+0x9e0>
 80140d0:	9b08      	ldr	r3, [sp, #32]
 80140d2:	3301      	adds	r3, #1
 80140d4:	f43f ad2e 	beq.w	8013b34 <_strtod_l+0x43c>
 80140d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014208 <_strtod_l+0xb10>
 80140dc:	f04f 3aff 	mov.w	sl, #4294967295
 80140e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80140e2:	4648      	mov	r0, r9
 80140e4:	f001 fe66 	bl	8015db4 <_Bfree>
 80140e8:	9905      	ldr	r1, [sp, #20]
 80140ea:	4648      	mov	r0, r9
 80140ec:	f001 fe62 	bl	8015db4 <_Bfree>
 80140f0:	4641      	mov	r1, r8
 80140f2:	4648      	mov	r0, r9
 80140f4:	f001 fe5e 	bl	8015db4 <_Bfree>
 80140f8:	4621      	mov	r1, r4
 80140fa:	4648      	mov	r0, r9
 80140fc:	f001 fe5a 	bl	8015db4 <_Bfree>
 8014100:	e619      	b.n	8013d36 <_strtod_l+0x63e>
 8014102:	f1ba 0f00 	cmp.w	sl, #0
 8014106:	d11a      	bne.n	801413e <_strtod_l+0xa46>
 8014108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801410c:	b9eb      	cbnz	r3, 801414a <_strtod_l+0xa52>
 801410e:	2200      	movs	r2, #0
 8014110:	4b3f      	ldr	r3, [pc, #252]	; (8014210 <_strtod_l+0xb18>)
 8014112:	4630      	mov	r0, r6
 8014114:	4639      	mov	r1, r7
 8014116:	f7ec fcf9 	bl	8000b0c <__aeabi_dcmplt>
 801411a:	b9c8      	cbnz	r0, 8014150 <_strtod_l+0xa58>
 801411c:	4630      	mov	r0, r6
 801411e:	4639      	mov	r1, r7
 8014120:	2200      	movs	r2, #0
 8014122:	4b3e      	ldr	r3, [pc, #248]	; (801421c <_strtod_l+0xb24>)
 8014124:	f7ec fa80 	bl	8000628 <__aeabi_dmul>
 8014128:	4606      	mov	r6, r0
 801412a:	460f      	mov	r7, r1
 801412c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014130:	9618      	str	r6, [sp, #96]	; 0x60
 8014132:	9319      	str	r3, [sp, #100]	; 0x64
 8014134:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014138:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801413c:	e79c      	b.n	8014078 <_strtod_l+0x980>
 801413e:	f1ba 0f01 	cmp.w	sl, #1
 8014142:	d102      	bne.n	801414a <_strtod_l+0xa52>
 8014144:	2d00      	cmp	r5, #0
 8014146:	f43f ad8e 	beq.w	8013c66 <_strtod_l+0x56e>
 801414a:	2200      	movs	r2, #0
 801414c:	4b34      	ldr	r3, [pc, #208]	; (8014220 <_strtod_l+0xb28>)
 801414e:	e78f      	b.n	8014070 <_strtod_l+0x978>
 8014150:	2600      	movs	r6, #0
 8014152:	4f32      	ldr	r7, [pc, #200]	; (801421c <_strtod_l+0xb24>)
 8014154:	e7ea      	b.n	801412c <_strtod_l+0xa34>
 8014156:	4b31      	ldr	r3, [pc, #196]	; (801421c <_strtod_l+0xb24>)
 8014158:	4630      	mov	r0, r6
 801415a:	4639      	mov	r1, r7
 801415c:	2200      	movs	r2, #0
 801415e:	f7ec fa63 	bl	8000628 <__aeabi_dmul>
 8014162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014164:	4606      	mov	r6, r0
 8014166:	460f      	mov	r7, r1
 8014168:	b933      	cbnz	r3, 8014178 <_strtod_l+0xa80>
 801416a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801416e:	9010      	str	r0, [sp, #64]	; 0x40
 8014170:	9311      	str	r3, [sp, #68]	; 0x44
 8014172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014176:	e7df      	b.n	8014138 <_strtod_l+0xa40>
 8014178:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801417c:	e7f9      	b.n	8014172 <_strtod_l+0xa7a>
 801417e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014182:	9b04      	ldr	r3, [sp, #16]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d1ab      	bne.n	80140e0 <_strtod_l+0x9e8>
 8014188:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801418c:	0d1b      	lsrs	r3, r3, #20
 801418e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014190:	051b      	lsls	r3, r3, #20
 8014192:	429a      	cmp	r2, r3
 8014194:	465d      	mov	r5, fp
 8014196:	d1a3      	bne.n	80140e0 <_strtod_l+0x9e8>
 8014198:	4639      	mov	r1, r7
 801419a:	4630      	mov	r0, r6
 801419c:	f7ec fcf4 	bl	8000b88 <__aeabi_d2iz>
 80141a0:	f7ec f9d8 	bl	8000554 <__aeabi_i2d>
 80141a4:	460b      	mov	r3, r1
 80141a6:	4602      	mov	r2, r0
 80141a8:	4639      	mov	r1, r7
 80141aa:	4630      	mov	r0, r6
 80141ac:	f7ec f884 	bl	80002b8 <__aeabi_dsub>
 80141b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141b2:	4606      	mov	r6, r0
 80141b4:	460f      	mov	r7, r1
 80141b6:	b933      	cbnz	r3, 80141c6 <_strtod_l+0xace>
 80141b8:	f1ba 0f00 	cmp.w	sl, #0
 80141bc:	d103      	bne.n	80141c6 <_strtod_l+0xace>
 80141be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80141c2:	2d00      	cmp	r5, #0
 80141c4:	d06d      	beq.n	80142a2 <_strtod_l+0xbaa>
 80141c6:	a30a      	add	r3, pc, #40	; (adr r3, 80141f0 <_strtod_l+0xaf8>)
 80141c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141cc:	4630      	mov	r0, r6
 80141ce:	4639      	mov	r1, r7
 80141d0:	f7ec fc9c 	bl	8000b0c <__aeabi_dcmplt>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	f47f acb8 	bne.w	8013b4a <_strtod_l+0x452>
 80141da:	a307      	add	r3, pc, #28	; (adr r3, 80141f8 <_strtod_l+0xb00>)
 80141dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e0:	4630      	mov	r0, r6
 80141e2:	4639      	mov	r1, r7
 80141e4:	f7ec fcb0 	bl	8000b48 <__aeabi_dcmpgt>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	f43f af79 	beq.w	80140e0 <_strtod_l+0x9e8>
 80141ee:	e4ac      	b.n	8013b4a <_strtod_l+0x452>
 80141f0:	94a03595 	.word	0x94a03595
 80141f4:	3fdfffff 	.word	0x3fdfffff
 80141f8:	35afe535 	.word	0x35afe535
 80141fc:	3fe00000 	.word	0x3fe00000
 8014200:	000fffff 	.word	0x000fffff
 8014204:	7ff00000 	.word	0x7ff00000
 8014208:	7fefffff 	.word	0x7fefffff
 801420c:	39500000 	.word	0x39500000
 8014210:	3ff00000 	.word	0x3ff00000
 8014214:	7fe00000 	.word	0x7fe00000
 8014218:	7c9fffff 	.word	0x7c9fffff
 801421c:	3fe00000 	.word	0x3fe00000
 8014220:	bff00000 	.word	0xbff00000
 8014224:	9b04      	ldr	r3, [sp, #16]
 8014226:	b333      	cbz	r3, 8014276 <_strtod_l+0xb7e>
 8014228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801422a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801422e:	d822      	bhi.n	8014276 <_strtod_l+0xb7e>
 8014230:	a327      	add	r3, pc, #156	; (adr r3, 80142d0 <_strtod_l+0xbd8>)
 8014232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014236:	4630      	mov	r0, r6
 8014238:	4639      	mov	r1, r7
 801423a:	f7ec fc71 	bl	8000b20 <__aeabi_dcmple>
 801423e:	b1a0      	cbz	r0, 801426a <_strtod_l+0xb72>
 8014240:	4639      	mov	r1, r7
 8014242:	4630      	mov	r0, r6
 8014244:	f7ec fcc8 	bl	8000bd8 <__aeabi_d2uiz>
 8014248:	2800      	cmp	r0, #0
 801424a:	bf08      	it	eq
 801424c:	2001      	moveq	r0, #1
 801424e:	f7ec f971 	bl	8000534 <__aeabi_ui2d>
 8014252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014254:	4606      	mov	r6, r0
 8014256:	460f      	mov	r7, r1
 8014258:	bb03      	cbnz	r3, 801429c <_strtod_l+0xba4>
 801425a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801425e:	9012      	str	r0, [sp, #72]	; 0x48
 8014260:	9313      	str	r3, [sp, #76]	; 0x4c
 8014262:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014266:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801426a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801426c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801426e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014272:	1a9b      	subs	r3, r3, r2
 8014274:	930b      	str	r3, [sp, #44]	; 0x2c
 8014276:	ed9d 0b08 	vldr	d0, [sp, #32]
 801427a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801427e:	f002 f831 	bl	80162e4 <__ulp>
 8014282:	4650      	mov	r0, sl
 8014284:	ec53 2b10 	vmov	r2, r3, d0
 8014288:	4659      	mov	r1, fp
 801428a:	f7ec f9cd 	bl	8000628 <__aeabi_dmul>
 801428e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014292:	f7ec f813 	bl	80002bc <__adddf3>
 8014296:	4682      	mov	sl, r0
 8014298:	468b      	mov	fp, r1
 801429a:	e772      	b.n	8014182 <_strtod_l+0xa8a>
 801429c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80142a0:	e7df      	b.n	8014262 <_strtod_l+0xb6a>
 80142a2:	a30d      	add	r3, pc, #52	; (adr r3, 80142d8 <_strtod_l+0xbe0>)
 80142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a8:	f7ec fc30 	bl	8000b0c <__aeabi_dcmplt>
 80142ac:	e79c      	b.n	80141e8 <_strtod_l+0xaf0>
 80142ae:	2300      	movs	r3, #0
 80142b0:	930d      	str	r3, [sp, #52]	; 0x34
 80142b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142b6:	6013      	str	r3, [r2, #0]
 80142b8:	f7ff ba61 	b.w	801377e <_strtod_l+0x86>
 80142bc:	2b65      	cmp	r3, #101	; 0x65
 80142be:	f04f 0200 	mov.w	r2, #0
 80142c2:	f43f ab4e 	beq.w	8013962 <_strtod_l+0x26a>
 80142c6:	2101      	movs	r1, #1
 80142c8:	4614      	mov	r4, r2
 80142ca:	9104      	str	r1, [sp, #16]
 80142cc:	f7ff bacb 	b.w	8013866 <_strtod_l+0x16e>
 80142d0:	ffc00000 	.word	0xffc00000
 80142d4:	41dfffff 	.word	0x41dfffff
 80142d8:	94a03595 	.word	0x94a03595
 80142dc:	3fcfffff 	.word	0x3fcfffff

080142e0 <_strtod_r>:
 80142e0:	4b05      	ldr	r3, [pc, #20]	; (80142f8 <_strtod_r+0x18>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	b410      	push	{r4}
 80142e6:	6a1b      	ldr	r3, [r3, #32]
 80142e8:	4c04      	ldr	r4, [pc, #16]	; (80142fc <_strtod_r+0x1c>)
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	bf08      	it	eq
 80142ee:	4623      	moveq	r3, r4
 80142f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142f4:	f7ff ba00 	b.w	80136f8 <_strtod_l>
 80142f8:	2000000c 	.word	0x2000000c
 80142fc:	20000070 	.word	0x20000070

08014300 <_strtol_l.isra.0>:
 8014300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014304:	4680      	mov	r8, r0
 8014306:	4689      	mov	r9, r1
 8014308:	4692      	mov	sl, r2
 801430a:	461e      	mov	r6, r3
 801430c:	460f      	mov	r7, r1
 801430e:	463d      	mov	r5, r7
 8014310:	9808      	ldr	r0, [sp, #32]
 8014312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014316:	f001 fc67 	bl	8015be8 <__locale_ctype_ptr_l>
 801431a:	4420      	add	r0, r4
 801431c:	7843      	ldrb	r3, [r0, #1]
 801431e:	f013 0308 	ands.w	r3, r3, #8
 8014322:	d132      	bne.n	801438a <_strtol_l.isra.0+0x8a>
 8014324:	2c2d      	cmp	r4, #45	; 0x2d
 8014326:	d132      	bne.n	801438e <_strtol_l.isra.0+0x8e>
 8014328:	787c      	ldrb	r4, [r7, #1]
 801432a:	1cbd      	adds	r5, r7, #2
 801432c:	2201      	movs	r2, #1
 801432e:	2e00      	cmp	r6, #0
 8014330:	d05d      	beq.n	80143ee <_strtol_l.isra.0+0xee>
 8014332:	2e10      	cmp	r6, #16
 8014334:	d109      	bne.n	801434a <_strtol_l.isra.0+0x4a>
 8014336:	2c30      	cmp	r4, #48	; 0x30
 8014338:	d107      	bne.n	801434a <_strtol_l.isra.0+0x4a>
 801433a:	782b      	ldrb	r3, [r5, #0]
 801433c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014340:	2b58      	cmp	r3, #88	; 0x58
 8014342:	d14f      	bne.n	80143e4 <_strtol_l.isra.0+0xe4>
 8014344:	786c      	ldrb	r4, [r5, #1]
 8014346:	2610      	movs	r6, #16
 8014348:	3502      	adds	r5, #2
 801434a:	2a00      	cmp	r2, #0
 801434c:	bf14      	ite	ne
 801434e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014352:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014356:	2700      	movs	r7, #0
 8014358:	fbb1 fcf6 	udiv	ip, r1, r6
 801435c:	4638      	mov	r0, r7
 801435e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014362:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014366:	2b09      	cmp	r3, #9
 8014368:	d817      	bhi.n	801439a <_strtol_l.isra.0+0x9a>
 801436a:	461c      	mov	r4, r3
 801436c:	42a6      	cmp	r6, r4
 801436e:	dd23      	ble.n	80143b8 <_strtol_l.isra.0+0xb8>
 8014370:	1c7b      	adds	r3, r7, #1
 8014372:	d007      	beq.n	8014384 <_strtol_l.isra.0+0x84>
 8014374:	4584      	cmp	ip, r0
 8014376:	d31c      	bcc.n	80143b2 <_strtol_l.isra.0+0xb2>
 8014378:	d101      	bne.n	801437e <_strtol_l.isra.0+0x7e>
 801437a:	45a6      	cmp	lr, r4
 801437c:	db19      	blt.n	80143b2 <_strtol_l.isra.0+0xb2>
 801437e:	fb00 4006 	mla	r0, r0, r6, r4
 8014382:	2701      	movs	r7, #1
 8014384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014388:	e7eb      	b.n	8014362 <_strtol_l.isra.0+0x62>
 801438a:	462f      	mov	r7, r5
 801438c:	e7bf      	b.n	801430e <_strtol_l.isra.0+0xe>
 801438e:	2c2b      	cmp	r4, #43	; 0x2b
 8014390:	bf04      	itt	eq
 8014392:	1cbd      	addeq	r5, r7, #2
 8014394:	787c      	ldrbeq	r4, [r7, #1]
 8014396:	461a      	mov	r2, r3
 8014398:	e7c9      	b.n	801432e <_strtol_l.isra.0+0x2e>
 801439a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801439e:	2b19      	cmp	r3, #25
 80143a0:	d801      	bhi.n	80143a6 <_strtol_l.isra.0+0xa6>
 80143a2:	3c37      	subs	r4, #55	; 0x37
 80143a4:	e7e2      	b.n	801436c <_strtol_l.isra.0+0x6c>
 80143a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80143aa:	2b19      	cmp	r3, #25
 80143ac:	d804      	bhi.n	80143b8 <_strtol_l.isra.0+0xb8>
 80143ae:	3c57      	subs	r4, #87	; 0x57
 80143b0:	e7dc      	b.n	801436c <_strtol_l.isra.0+0x6c>
 80143b2:	f04f 37ff 	mov.w	r7, #4294967295
 80143b6:	e7e5      	b.n	8014384 <_strtol_l.isra.0+0x84>
 80143b8:	1c7b      	adds	r3, r7, #1
 80143ba:	d108      	bne.n	80143ce <_strtol_l.isra.0+0xce>
 80143bc:	2322      	movs	r3, #34	; 0x22
 80143be:	f8c8 3000 	str.w	r3, [r8]
 80143c2:	4608      	mov	r0, r1
 80143c4:	f1ba 0f00 	cmp.w	sl, #0
 80143c8:	d107      	bne.n	80143da <_strtol_l.isra.0+0xda>
 80143ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143ce:	b102      	cbz	r2, 80143d2 <_strtol_l.isra.0+0xd2>
 80143d0:	4240      	negs	r0, r0
 80143d2:	f1ba 0f00 	cmp.w	sl, #0
 80143d6:	d0f8      	beq.n	80143ca <_strtol_l.isra.0+0xca>
 80143d8:	b10f      	cbz	r7, 80143de <_strtol_l.isra.0+0xde>
 80143da:	f105 39ff 	add.w	r9, r5, #4294967295
 80143de:	f8ca 9000 	str.w	r9, [sl]
 80143e2:	e7f2      	b.n	80143ca <_strtol_l.isra.0+0xca>
 80143e4:	2430      	movs	r4, #48	; 0x30
 80143e6:	2e00      	cmp	r6, #0
 80143e8:	d1af      	bne.n	801434a <_strtol_l.isra.0+0x4a>
 80143ea:	2608      	movs	r6, #8
 80143ec:	e7ad      	b.n	801434a <_strtol_l.isra.0+0x4a>
 80143ee:	2c30      	cmp	r4, #48	; 0x30
 80143f0:	d0a3      	beq.n	801433a <_strtol_l.isra.0+0x3a>
 80143f2:	260a      	movs	r6, #10
 80143f4:	e7a9      	b.n	801434a <_strtol_l.isra.0+0x4a>
	...

080143f8 <_strtol_r>:
 80143f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143fa:	4c06      	ldr	r4, [pc, #24]	; (8014414 <_strtol_r+0x1c>)
 80143fc:	4d06      	ldr	r5, [pc, #24]	; (8014418 <_strtol_r+0x20>)
 80143fe:	6824      	ldr	r4, [r4, #0]
 8014400:	6a24      	ldr	r4, [r4, #32]
 8014402:	2c00      	cmp	r4, #0
 8014404:	bf08      	it	eq
 8014406:	462c      	moveq	r4, r5
 8014408:	9400      	str	r4, [sp, #0]
 801440a:	f7ff ff79 	bl	8014300 <_strtol_l.isra.0>
 801440e:	b003      	add	sp, #12
 8014410:	bd30      	pop	{r4, r5, pc}
 8014412:	bf00      	nop
 8014414:	2000000c 	.word	0x2000000c
 8014418:	20000070 	.word	0x20000070

0801441c <_vsiprintf_r>:
 801441c:	b500      	push	{lr}
 801441e:	b09b      	sub	sp, #108	; 0x6c
 8014420:	9100      	str	r1, [sp, #0]
 8014422:	9104      	str	r1, [sp, #16]
 8014424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014428:	9105      	str	r1, [sp, #20]
 801442a:	9102      	str	r1, [sp, #8]
 801442c:	4905      	ldr	r1, [pc, #20]	; (8014444 <_vsiprintf_r+0x28>)
 801442e:	9103      	str	r1, [sp, #12]
 8014430:	4669      	mov	r1, sp
 8014432:	f002 f99b 	bl	801676c <_svfiprintf_r>
 8014436:	9b00      	ldr	r3, [sp, #0]
 8014438:	2200      	movs	r2, #0
 801443a:	701a      	strb	r2, [r3, #0]
 801443c:	b01b      	add	sp, #108	; 0x6c
 801443e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014442:	bf00      	nop
 8014444:	ffff0208 	.word	0xffff0208

08014448 <vsiprintf>:
 8014448:	4613      	mov	r3, r2
 801444a:	460a      	mov	r2, r1
 801444c:	4601      	mov	r1, r0
 801444e:	4802      	ldr	r0, [pc, #8]	; (8014458 <vsiprintf+0x10>)
 8014450:	6800      	ldr	r0, [r0, #0]
 8014452:	f7ff bfe3 	b.w	801441c <_vsiprintf_r>
 8014456:	bf00      	nop
 8014458:	2000000c 	.word	0x2000000c

0801445c <__swbuf_r>:
 801445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801445e:	460e      	mov	r6, r1
 8014460:	4614      	mov	r4, r2
 8014462:	4605      	mov	r5, r0
 8014464:	b118      	cbz	r0, 801446e <__swbuf_r+0x12>
 8014466:	6983      	ldr	r3, [r0, #24]
 8014468:	b90b      	cbnz	r3, 801446e <__swbuf_r+0x12>
 801446a:	f001 f80d 	bl	8015488 <__sinit>
 801446e:	4b21      	ldr	r3, [pc, #132]	; (80144f4 <__swbuf_r+0x98>)
 8014470:	429c      	cmp	r4, r3
 8014472:	d12a      	bne.n	80144ca <__swbuf_r+0x6e>
 8014474:	686c      	ldr	r4, [r5, #4]
 8014476:	69a3      	ldr	r3, [r4, #24]
 8014478:	60a3      	str	r3, [r4, #8]
 801447a:	89a3      	ldrh	r3, [r4, #12]
 801447c:	071a      	lsls	r2, r3, #28
 801447e:	d52e      	bpl.n	80144de <__swbuf_r+0x82>
 8014480:	6923      	ldr	r3, [r4, #16]
 8014482:	b363      	cbz	r3, 80144de <__swbuf_r+0x82>
 8014484:	6923      	ldr	r3, [r4, #16]
 8014486:	6820      	ldr	r0, [r4, #0]
 8014488:	1ac0      	subs	r0, r0, r3
 801448a:	6963      	ldr	r3, [r4, #20]
 801448c:	b2f6      	uxtb	r6, r6
 801448e:	4283      	cmp	r3, r0
 8014490:	4637      	mov	r7, r6
 8014492:	dc04      	bgt.n	801449e <__swbuf_r+0x42>
 8014494:	4621      	mov	r1, r4
 8014496:	4628      	mov	r0, r5
 8014498:	f000 ff8c 	bl	80153b4 <_fflush_r>
 801449c:	bb28      	cbnz	r0, 80144ea <__swbuf_r+0x8e>
 801449e:	68a3      	ldr	r3, [r4, #8]
 80144a0:	3b01      	subs	r3, #1
 80144a2:	60a3      	str	r3, [r4, #8]
 80144a4:	6823      	ldr	r3, [r4, #0]
 80144a6:	1c5a      	adds	r2, r3, #1
 80144a8:	6022      	str	r2, [r4, #0]
 80144aa:	701e      	strb	r6, [r3, #0]
 80144ac:	6963      	ldr	r3, [r4, #20]
 80144ae:	3001      	adds	r0, #1
 80144b0:	4283      	cmp	r3, r0
 80144b2:	d004      	beq.n	80144be <__swbuf_r+0x62>
 80144b4:	89a3      	ldrh	r3, [r4, #12]
 80144b6:	07db      	lsls	r3, r3, #31
 80144b8:	d519      	bpl.n	80144ee <__swbuf_r+0x92>
 80144ba:	2e0a      	cmp	r6, #10
 80144bc:	d117      	bne.n	80144ee <__swbuf_r+0x92>
 80144be:	4621      	mov	r1, r4
 80144c0:	4628      	mov	r0, r5
 80144c2:	f000 ff77 	bl	80153b4 <_fflush_r>
 80144c6:	b190      	cbz	r0, 80144ee <__swbuf_r+0x92>
 80144c8:	e00f      	b.n	80144ea <__swbuf_r+0x8e>
 80144ca:	4b0b      	ldr	r3, [pc, #44]	; (80144f8 <__swbuf_r+0x9c>)
 80144cc:	429c      	cmp	r4, r3
 80144ce:	d101      	bne.n	80144d4 <__swbuf_r+0x78>
 80144d0:	68ac      	ldr	r4, [r5, #8]
 80144d2:	e7d0      	b.n	8014476 <__swbuf_r+0x1a>
 80144d4:	4b09      	ldr	r3, [pc, #36]	; (80144fc <__swbuf_r+0xa0>)
 80144d6:	429c      	cmp	r4, r3
 80144d8:	bf08      	it	eq
 80144da:	68ec      	ldreq	r4, [r5, #12]
 80144dc:	e7cb      	b.n	8014476 <__swbuf_r+0x1a>
 80144de:	4621      	mov	r1, r4
 80144e0:	4628      	mov	r0, r5
 80144e2:	f000 f81f 	bl	8014524 <__swsetup_r>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d0cc      	beq.n	8014484 <__swbuf_r+0x28>
 80144ea:	f04f 37ff 	mov.w	r7, #4294967295
 80144ee:	4638      	mov	r0, r7
 80144f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f2:	bf00      	nop
 80144f4:	08017c00 	.word	0x08017c00
 80144f8:	08017c20 	.word	0x08017c20
 80144fc:	08017be0 	.word	0x08017be0

08014500 <_write_r>:
 8014500:	b538      	push	{r3, r4, r5, lr}
 8014502:	4c07      	ldr	r4, [pc, #28]	; (8014520 <_write_r+0x20>)
 8014504:	4605      	mov	r5, r0
 8014506:	4608      	mov	r0, r1
 8014508:	4611      	mov	r1, r2
 801450a:	2200      	movs	r2, #0
 801450c:	6022      	str	r2, [r4, #0]
 801450e:	461a      	mov	r2, r3
 8014510:	f7ef fa7c 	bl	8003a0c <_write>
 8014514:	1c43      	adds	r3, r0, #1
 8014516:	d102      	bne.n	801451e <_write_r+0x1e>
 8014518:	6823      	ldr	r3, [r4, #0]
 801451a:	b103      	cbz	r3, 801451e <_write_r+0x1e>
 801451c:	602b      	str	r3, [r5, #0]
 801451e:	bd38      	pop	{r3, r4, r5, pc}
 8014520:	2003bcbc 	.word	0x2003bcbc

08014524 <__swsetup_r>:
 8014524:	4b32      	ldr	r3, [pc, #200]	; (80145f0 <__swsetup_r+0xcc>)
 8014526:	b570      	push	{r4, r5, r6, lr}
 8014528:	681d      	ldr	r5, [r3, #0]
 801452a:	4606      	mov	r6, r0
 801452c:	460c      	mov	r4, r1
 801452e:	b125      	cbz	r5, 801453a <__swsetup_r+0x16>
 8014530:	69ab      	ldr	r3, [r5, #24]
 8014532:	b913      	cbnz	r3, 801453a <__swsetup_r+0x16>
 8014534:	4628      	mov	r0, r5
 8014536:	f000 ffa7 	bl	8015488 <__sinit>
 801453a:	4b2e      	ldr	r3, [pc, #184]	; (80145f4 <__swsetup_r+0xd0>)
 801453c:	429c      	cmp	r4, r3
 801453e:	d10f      	bne.n	8014560 <__swsetup_r+0x3c>
 8014540:	686c      	ldr	r4, [r5, #4]
 8014542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014546:	b29a      	uxth	r2, r3
 8014548:	0715      	lsls	r5, r2, #28
 801454a:	d42c      	bmi.n	80145a6 <__swsetup_r+0x82>
 801454c:	06d0      	lsls	r0, r2, #27
 801454e:	d411      	bmi.n	8014574 <__swsetup_r+0x50>
 8014550:	2209      	movs	r2, #9
 8014552:	6032      	str	r2, [r6, #0]
 8014554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014558:	81a3      	strh	r3, [r4, #12]
 801455a:	f04f 30ff 	mov.w	r0, #4294967295
 801455e:	e03e      	b.n	80145de <__swsetup_r+0xba>
 8014560:	4b25      	ldr	r3, [pc, #148]	; (80145f8 <__swsetup_r+0xd4>)
 8014562:	429c      	cmp	r4, r3
 8014564:	d101      	bne.n	801456a <__swsetup_r+0x46>
 8014566:	68ac      	ldr	r4, [r5, #8]
 8014568:	e7eb      	b.n	8014542 <__swsetup_r+0x1e>
 801456a:	4b24      	ldr	r3, [pc, #144]	; (80145fc <__swsetup_r+0xd8>)
 801456c:	429c      	cmp	r4, r3
 801456e:	bf08      	it	eq
 8014570:	68ec      	ldreq	r4, [r5, #12]
 8014572:	e7e6      	b.n	8014542 <__swsetup_r+0x1e>
 8014574:	0751      	lsls	r1, r2, #29
 8014576:	d512      	bpl.n	801459e <__swsetup_r+0x7a>
 8014578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801457a:	b141      	cbz	r1, 801458e <__swsetup_r+0x6a>
 801457c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014580:	4299      	cmp	r1, r3
 8014582:	d002      	beq.n	801458a <__swsetup_r+0x66>
 8014584:	4630      	mov	r0, r6
 8014586:	f001 ffef 	bl	8016568 <_free_r>
 801458a:	2300      	movs	r3, #0
 801458c:	6363      	str	r3, [r4, #52]	; 0x34
 801458e:	89a3      	ldrh	r3, [r4, #12]
 8014590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014594:	81a3      	strh	r3, [r4, #12]
 8014596:	2300      	movs	r3, #0
 8014598:	6063      	str	r3, [r4, #4]
 801459a:	6923      	ldr	r3, [r4, #16]
 801459c:	6023      	str	r3, [r4, #0]
 801459e:	89a3      	ldrh	r3, [r4, #12]
 80145a0:	f043 0308 	orr.w	r3, r3, #8
 80145a4:	81a3      	strh	r3, [r4, #12]
 80145a6:	6923      	ldr	r3, [r4, #16]
 80145a8:	b94b      	cbnz	r3, 80145be <__swsetup_r+0x9a>
 80145aa:	89a3      	ldrh	r3, [r4, #12]
 80145ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145b4:	d003      	beq.n	80145be <__swsetup_r+0x9a>
 80145b6:	4621      	mov	r1, r4
 80145b8:	4630      	mov	r0, r6
 80145ba:	f001 fb6d 	bl	8015c98 <__smakebuf_r>
 80145be:	89a2      	ldrh	r2, [r4, #12]
 80145c0:	f012 0301 	ands.w	r3, r2, #1
 80145c4:	d00c      	beq.n	80145e0 <__swsetup_r+0xbc>
 80145c6:	2300      	movs	r3, #0
 80145c8:	60a3      	str	r3, [r4, #8]
 80145ca:	6963      	ldr	r3, [r4, #20]
 80145cc:	425b      	negs	r3, r3
 80145ce:	61a3      	str	r3, [r4, #24]
 80145d0:	6923      	ldr	r3, [r4, #16]
 80145d2:	b953      	cbnz	r3, 80145ea <__swsetup_r+0xc6>
 80145d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80145dc:	d1ba      	bne.n	8014554 <__swsetup_r+0x30>
 80145de:	bd70      	pop	{r4, r5, r6, pc}
 80145e0:	0792      	lsls	r2, r2, #30
 80145e2:	bf58      	it	pl
 80145e4:	6963      	ldrpl	r3, [r4, #20]
 80145e6:	60a3      	str	r3, [r4, #8]
 80145e8:	e7f2      	b.n	80145d0 <__swsetup_r+0xac>
 80145ea:	2000      	movs	r0, #0
 80145ec:	e7f7      	b.n	80145de <__swsetup_r+0xba>
 80145ee:	bf00      	nop
 80145f0:	2000000c 	.word	0x2000000c
 80145f4:	08017c00 	.word	0x08017c00
 80145f8:	08017c20 	.word	0x08017c20
 80145fc:	08017be0 	.word	0x08017be0

08014600 <_close_r>:
 8014600:	b538      	push	{r3, r4, r5, lr}
 8014602:	4c06      	ldr	r4, [pc, #24]	; (801461c <_close_r+0x1c>)
 8014604:	2300      	movs	r3, #0
 8014606:	4605      	mov	r5, r0
 8014608:	4608      	mov	r0, r1
 801460a:	6023      	str	r3, [r4, #0]
 801460c:	f7f0 ff65 	bl	80054da <_close>
 8014610:	1c43      	adds	r3, r0, #1
 8014612:	d102      	bne.n	801461a <_close_r+0x1a>
 8014614:	6823      	ldr	r3, [r4, #0]
 8014616:	b103      	cbz	r3, 801461a <_close_r+0x1a>
 8014618:	602b      	str	r3, [r5, #0]
 801461a:	bd38      	pop	{r3, r4, r5, pc}
 801461c:	2003bcbc 	.word	0x2003bcbc

08014620 <quorem>:
 8014620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014624:	6903      	ldr	r3, [r0, #16]
 8014626:	690c      	ldr	r4, [r1, #16]
 8014628:	42a3      	cmp	r3, r4
 801462a:	4680      	mov	r8, r0
 801462c:	f2c0 8082 	blt.w	8014734 <quorem+0x114>
 8014630:	3c01      	subs	r4, #1
 8014632:	f101 0714 	add.w	r7, r1, #20
 8014636:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801463a:	f100 0614 	add.w	r6, r0, #20
 801463e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014642:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014646:	eb06 030c 	add.w	r3, r6, ip
 801464a:	3501      	adds	r5, #1
 801464c:	eb07 090c 	add.w	r9, r7, ip
 8014650:	9301      	str	r3, [sp, #4]
 8014652:	fbb0 f5f5 	udiv	r5, r0, r5
 8014656:	b395      	cbz	r5, 80146be <quorem+0x9e>
 8014658:	f04f 0a00 	mov.w	sl, #0
 801465c:	4638      	mov	r0, r7
 801465e:	46b6      	mov	lr, r6
 8014660:	46d3      	mov	fp, sl
 8014662:	f850 2b04 	ldr.w	r2, [r0], #4
 8014666:	b293      	uxth	r3, r2
 8014668:	fb05 a303 	mla	r3, r5, r3, sl
 801466c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014670:	b29b      	uxth	r3, r3
 8014672:	ebab 0303 	sub.w	r3, fp, r3
 8014676:	0c12      	lsrs	r2, r2, #16
 8014678:	f8de b000 	ldr.w	fp, [lr]
 801467c:	fb05 a202 	mla	r2, r5, r2, sl
 8014680:	fa13 f38b 	uxtah	r3, r3, fp
 8014684:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014688:	fa1f fb82 	uxth.w	fp, r2
 801468c:	f8de 2000 	ldr.w	r2, [lr]
 8014690:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014698:	b29b      	uxth	r3, r3
 801469a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801469e:	4581      	cmp	r9, r0
 80146a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80146a4:	f84e 3b04 	str.w	r3, [lr], #4
 80146a8:	d2db      	bcs.n	8014662 <quorem+0x42>
 80146aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80146ae:	b933      	cbnz	r3, 80146be <quorem+0x9e>
 80146b0:	9b01      	ldr	r3, [sp, #4]
 80146b2:	3b04      	subs	r3, #4
 80146b4:	429e      	cmp	r6, r3
 80146b6:	461a      	mov	r2, r3
 80146b8:	d330      	bcc.n	801471c <quorem+0xfc>
 80146ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80146be:	4640      	mov	r0, r8
 80146c0:	f001 fd98 	bl	80161f4 <__mcmp>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	db25      	blt.n	8014714 <quorem+0xf4>
 80146c8:	3501      	adds	r5, #1
 80146ca:	4630      	mov	r0, r6
 80146cc:	f04f 0c00 	mov.w	ip, #0
 80146d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80146d4:	f8d0 e000 	ldr.w	lr, [r0]
 80146d8:	b293      	uxth	r3, r2
 80146da:	ebac 0303 	sub.w	r3, ip, r3
 80146de:	0c12      	lsrs	r2, r2, #16
 80146e0:	fa13 f38e 	uxtah	r3, r3, lr
 80146e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80146e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146f2:	45b9      	cmp	r9, r7
 80146f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80146f8:	f840 3b04 	str.w	r3, [r0], #4
 80146fc:	d2e8      	bcs.n	80146d0 <quorem+0xb0>
 80146fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014702:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014706:	b92a      	cbnz	r2, 8014714 <quorem+0xf4>
 8014708:	3b04      	subs	r3, #4
 801470a:	429e      	cmp	r6, r3
 801470c:	461a      	mov	r2, r3
 801470e:	d30b      	bcc.n	8014728 <quorem+0x108>
 8014710:	f8c8 4010 	str.w	r4, [r8, #16]
 8014714:	4628      	mov	r0, r5
 8014716:	b003      	add	sp, #12
 8014718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801471c:	6812      	ldr	r2, [r2, #0]
 801471e:	3b04      	subs	r3, #4
 8014720:	2a00      	cmp	r2, #0
 8014722:	d1ca      	bne.n	80146ba <quorem+0x9a>
 8014724:	3c01      	subs	r4, #1
 8014726:	e7c5      	b.n	80146b4 <quorem+0x94>
 8014728:	6812      	ldr	r2, [r2, #0]
 801472a:	3b04      	subs	r3, #4
 801472c:	2a00      	cmp	r2, #0
 801472e:	d1ef      	bne.n	8014710 <quorem+0xf0>
 8014730:	3c01      	subs	r4, #1
 8014732:	e7ea      	b.n	801470a <quorem+0xea>
 8014734:	2000      	movs	r0, #0
 8014736:	e7ee      	b.n	8014716 <quorem+0xf6>

08014738 <_dtoa_r>:
 8014738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473c:	ec57 6b10 	vmov	r6, r7, d0
 8014740:	b097      	sub	sp, #92	; 0x5c
 8014742:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014744:	9106      	str	r1, [sp, #24]
 8014746:	4604      	mov	r4, r0
 8014748:	920b      	str	r2, [sp, #44]	; 0x2c
 801474a:	9312      	str	r3, [sp, #72]	; 0x48
 801474c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014750:	e9cd 6700 	strd	r6, r7, [sp]
 8014754:	b93d      	cbnz	r5, 8014766 <_dtoa_r+0x2e>
 8014756:	2010      	movs	r0, #16
 8014758:	f001 fade 	bl	8015d18 <malloc>
 801475c:	6260      	str	r0, [r4, #36]	; 0x24
 801475e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014762:	6005      	str	r5, [r0, #0]
 8014764:	60c5      	str	r5, [r0, #12]
 8014766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014768:	6819      	ldr	r1, [r3, #0]
 801476a:	b151      	cbz	r1, 8014782 <_dtoa_r+0x4a>
 801476c:	685a      	ldr	r2, [r3, #4]
 801476e:	604a      	str	r2, [r1, #4]
 8014770:	2301      	movs	r3, #1
 8014772:	4093      	lsls	r3, r2
 8014774:	608b      	str	r3, [r1, #8]
 8014776:	4620      	mov	r0, r4
 8014778:	f001 fb1c 	bl	8015db4 <_Bfree>
 801477c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801477e:	2200      	movs	r2, #0
 8014780:	601a      	str	r2, [r3, #0]
 8014782:	1e3b      	subs	r3, r7, #0
 8014784:	bfbb      	ittet	lt
 8014786:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801478a:	9301      	strlt	r3, [sp, #4]
 801478c:	2300      	movge	r3, #0
 801478e:	2201      	movlt	r2, #1
 8014790:	bfac      	ite	ge
 8014792:	f8c8 3000 	strge.w	r3, [r8]
 8014796:	f8c8 2000 	strlt.w	r2, [r8]
 801479a:	4baf      	ldr	r3, [pc, #700]	; (8014a58 <_dtoa_r+0x320>)
 801479c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80147a0:	ea33 0308 	bics.w	r3, r3, r8
 80147a4:	d114      	bne.n	80147d0 <_dtoa_r+0x98>
 80147a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80147a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80147ac:	6013      	str	r3, [r2, #0]
 80147ae:	9b00      	ldr	r3, [sp, #0]
 80147b0:	b923      	cbnz	r3, 80147bc <_dtoa_r+0x84>
 80147b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80147b6:	2800      	cmp	r0, #0
 80147b8:	f000 8542 	beq.w	8015240 <_dtoa_r+0xb08>
 80147bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014a6c <_dtoa_r+0x334>
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 8544 	beq.w	8015250 <_dtoa_r+0xb18>
 80147c8:	f10b 0303 	add.w	r3, fp, #3
 80147cc:	f000 bd3e 	b.w	801524c <_dtoa_r+0xb14>
 80147d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80147d4:	2200      	movs	r2, #0
 80147d6:	2300      	movs	r3, #0
 80147d8:	4630      	mov	r0, r6
 80147da:	4639      	mov	r1, r7
 80147dc:	f7ec f98c 	bl	8000af8 <__aeabi_dcmpeq>
 80147e0:	4681      	mov	r9, r0
 80147e2:	b168      	cbz	r0, 8014800 <_dtoa_r+0xc8>
 80147e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80147e6:	2301      	movs	r3, #1
 80147e8:	6013      	str	r3, [r2, #0]
 80147ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f000 8524 	beq.w	801523a <_dtoa_r+0xb02>
 80147f2:	4b9a      	ldr	r3, [pc, #616]	; (8014a5c <_dtoa_r+0x324>)
 80147f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80147fa:	6013      	str	r3, [r2, #0]
 80147fc:	f000 bd28 	b.w	8015250 <_dtoa_r+0xb18>
 8014800:	aa14      	add	r2, sp, #80	; 0x50
 8014802:	a915      	add	r1, sp, #84	; 0x54
 8014804:	ec47 6b10 	vmov	d0, r6, r7
 8014808:	4620      	mov	r0, r4
 801480a:	f001 fde1 	bl	80163d0 <__d2b>
 801480e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014812:	9004      	str	r0, [sp, #16]
 8014814:	2d00      	cmp	r5, #0
 8014816:	d07c      	beq.n	8014912 <_dtoa_r+0x1da>
 8014818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801481c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014820:	46b2      	mov	sl, r6
 8014822:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801482a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801482e:	2200      	movs	r2, #0
 8014830:	4b8b      	ldr	r3, [pc, #556]	; (8014a60 <_dtoa_r+0x328>)
 8014832:	4650      	mov	r0, sl
 8014834:	4659      	mov	r1, fp
 8014836:	f7eb fd3f 	bl	80002b8 <__aeabi_dsub>
 801483a:	a381      	add	r3, pc, #516	; (adr r3, 8014a40 <_dtoa_r+0x308>)
 801483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014840:	f7eb fef2 	bl	8000628 <__aeabi_dmul>
 8014844:	a380      	add	r3, pc, #512	; (adr r3, 8014a48 <_dtoa_r+0x310>)
 8014846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484a:	f7eb fd37 	bl	80002bc <__adddf3>
 801484e:	4606      	mov	r6, r0
 8014850:	4628      	mov	r0, r5
 8014852:	460f      	mov	r7, r1
 8014854:	f7eb fe7e 	bl	8000554 <__aeabi_i2d>
 8014858:	a37d      	add	r3, pc, #500	; (adr r3, 8014a50 <_dtoa_r+0x318>)
 801485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485e:	f7eb fee3 	bl	8000628 <__aeabi_dmul>
 8014862:	4602      	mov	r2, r0
 8014864:	460b      	mov	r3, r1
 8014866:	4630      	mov	r0, r6
 8014868:	4639      	mov	r1, r7
 801486a:	f7eb fd27 	bl	80002bc <__adddf3>
 801486e:	4606      	mov	r6, r0
 8014870:	460f      	mov	r7, r1
 8014872:	f7ec f989 	bl	8000b88 <__aeabi_d2iz>
 8014876:	2200      	movs	r2, #0
 8014878:	4682      	mov	sl, r0
 801487a:	2300      	movs	r3, #0
 801487c:	4630      	mov	r0, r6
 801487e:	4639      	mov	r1, r7
 8014880:	f7ec f944 	bl	8000b0c <__aeabi_dcmplt>
 8014884:	b148      	cbz	r0, 801489a <_dtoa_r+0x162>
 8014886:	4650      	mov	r0, sl
 8014888:	f7eb fe64 	bl	8000554 <__aeabi_i2d>
 801488c:	4632      	mov	r2, r6
 801488e:	463b      	mov	r3, r7
 8014890:	f7ec f932 	bl	8000af8 <__aeabi_dcmpeq>
 8014894:	b908      	cbnz	r0, 801489a <_dtoa_r+0x162>
 8014896:	f10a 3aff 	add.w	sl, sl, #4294967295
 801489a:	f1ba 0f16 	cmp.w	sl, #22
 801489e:	d859      	bhi.n	8014954 <_dtoa_r+0x21c>
 80148a0:	4970      	ldr	r1, [pc, #448]	; (8014a64 <_dtoa_r+0x32c>)
 80148a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80148a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148ae:	f7ec f94b 	bl	8000b48 <__aeabi_dcmpgt>
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d050      	beq.n	8014958 <_dtoa_r+0x220>
 80148b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80148ba:	2300      	movs	r3, #0
 80148bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80148be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148c0:	1b5d      	subs	r5, r3, r5
 80148c2:	f1b5 0801 	subs.w	r8, r5, #1
 80148c6:	bf49      	itett	mi
 80148c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80148cc:	2300      	movpl	r3, #0
 80148ce:	9305      	strmi	r3, [sp, #20]
 80148d0:	f04f 0800 	movmi.w	r8, #0
 80148d4:	bf58      	it	pl
 80148d6:	9305      	strpl	r3, [sp, #20]
 80148d8:	f1ba 0f00 	cmp.w	sl, #0
 80148dc:	db3e      	blt.n	801495c <_dtoa_r+0x224>
 80148de:	2300      	movs	r3, #0
 80148e0:	44d0      	add	r8, sl
 80148e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80148e6:	9307      	str	r3, [sp, #28]
 80148e8:	9b06      	ldr	r3, [sp, #24]
 80148ea:	2b09      	cmp	r3, #9
 80148ec:	f200 8090 	bhi.w	8014a10 <_dtoa_r+0x2d8>
 80148f0:	2b05      	cmp	r3, #5
 80148f2:	bfc4      	itt	gt
 80148f4:	3b04      	subgt	r3, #4
 80148f6:	9306      	strgt	r3, [sp, #24]
 80148f8:	9b06      	ldr	r3, [sp, #24]
 80148fa:	f1a3 0302 	sub.w	r3, r3, #2
 80148fe:	bfcc      	ite	gt
 8014900:	2500      	movgt	r5, #0
 8014902:	2501      	movle	r5, #1
 8014904:	2b03      	cmp	r3, #3
 8014906:	f200 808f 	bhi.w	8014a28 <_dtoa_r+0x2f0>
 801490a:	e8df f003 	tbb	[pc, r3]
 801490e:	7f7d      	.short	0x7f7d
 8014910:	7131      	.short	0x7131
 8014912:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014916:	441d      	add	r5, r3
 8014918:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801491c:	2820      	cmp	r0, #32
 801491e:	dd13      	ble.n	8014948 <_dtoa_r+0x210>
 8014920:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014924:	9b00      	ldr	r3, [sp, #0]
 8014926:	fa08 f800 	lsl.w	r8, r8, r0
 801492a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801492e:	fa23 f000 	lsr.w	r0, r3, r0
 8014932:	ea48 0000 	orr.w	r0, r8, r0
 8014936:	f7eb fdfd 	bl	8000534 <__aeabi_ui2d>
 801493a:	2301      	movs	r3, #1
 801493c:	4682      	mov	sl, r0
 801493e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014942:	3d01      	subs	r5, #1
 8014944:	9313      	str	r3, [sp, #76]	; 0x4c
 8014946:	e772      	b.n	801482e <_dtoa_r+0xf6>
 8014948:	9b00      	ldr	r3, [sp, #0]
 801494a:	f1c0 0020 	rsb	r0, r0, #32
 801494e:	fa03 f000 	lsl.w	r0, r3, r0
 8014952:	e7f0      	b.n	8014936 <_dtoa_r+0x1fe>
 8014954:	2301      	movs	r3, #1
 8014956:	e7b1      	b.n	80148bc <_dtoa_r+0x184>
 8014958:	900f      	str	r0, [sp, #60]	; 0x3c
 801495a:	e7b0      	b.n	80148be <_dtoa_r+0x186>
 801495c:	9b05      	ldr	r3, [sp, #20]
 801495e:	eba3 030a 	sub.w	r3, r3, sl
 8014962:	9305      	str	r3, [sp, #20]
 8014964:	f1ca 0300 	rsb	r3, sl, #0
 8014968:	9307      	str	r3, [sp, #28]
 801496a:	2300      	movs	r3, #0
 801496c:	930e      	str	r3, [sp, #56]	; 0x38
 801496e:	e7bb      	b.n	80148e8 <_dtoa_r+0x1b0>
 8014970:	2301      	movs	r3, #1
 8014972:	930a      	str	r3, [sp, #40]	; 0x28
 8014974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014976:	2b00      	cmp	r3, #0
 8014978:	dd59      	ble.n	8014a2e <_dtoa_r+0x2f6>
 801497a:	9302      	str	r3, [sp, #8]
 801497c:	4699      	mov	r9, r3
 801497e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014980:	2200      	movs	r2, #0
 8014982:	6072      	str	r2, [r6, #4]
 8014984:	2204      	movs	r2, #4
 8014986:	f102 0014 	add.w	r0, r2, #20
 801498a:	4298      	cmp	r0, r3
 801498c:	6871      	ldr	r1, [r6, #4]
 801498e:	d953      	bls.n	8014a38 <_dtoa_r+0x300>
 8014990:	4620      	mov	r0, r4
 8014992:	f001 f9db 	bl	8015d4c <_Balloc>
 8014996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014998:	6030      	str	r0, [r6, #0]
 801499a:	f1b9 0f0e 	cmp.w	r9, #14
 801499e:	f8d3 b000 	ldr.w	fp, [r3]
 80149a2:	f200 80e6 	bhi.w	8014b72 <_dtoa_r+0x43a>
 80149a6:	2d00      	cmp	r5, #0
 80149a8:	f000 80e3 	beq.w	8014b72 <_dtoa_r+0x43a>
 80149ac:	ed9d 7b00 	vldr	d7, [sp]
 80149b0:	f1ba 0f00 	cmp.w	sl, #0
 80149b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80149b8:	dd74      	ble.n	8014aa4 <_dtoa_r+0x36c>
 80149ba:	4a2a      	ldr	r2, [pc, #168]	; (8014a64 <_dtoa_r+0x32c>)
 80149bc:	f00a 030f 	and.w	r3, sl, #15
 80149c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80149c4:	ed93 7b00 	vldr	d7, [r3]
 80149c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80149cc:	06f0      	lsls	r0, r6, #27
 80149ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80149d2:	d565      	bpl.n	8014aa0 <_dtoa_r+0x368>
 80149d4:	4b24      	ldr	r3, [pc, #144]	; (8014a68 <_dtoa_r+0x330>)
 80149d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80149da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80149de:	f7eb ff4d 	bl	800087c <__aeabi_ddiv>
 80149e2:	e9cd 0100 	strd	r0, r1, [sp]
 80149e6:	f006 060f 	and.w	r6, r6, #15
 80149ea:	2503      	movs	r5, #3
 80149ec:	4f1e      	ldr	r7, [pc, #120]	; (8014a68 <_dtoa_r+0x330>)
 80149ee:	e04c      	b.n	8014a8a <_dtoa_r+0x352>
 80149f0:	2301      	movs	r3, #1
 80149f2:	930a      	str	r3, [sp, #40]	; 0x28
 80149f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149f6:	4453      	add	r3, sl
 80149f8:	f103 0901 	add.w	r9, r3, #1
 80149fc:	9302      	str	r3, [sp, #8]
 80149fe:	464b      	mov	r3, r9
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	bfb8      	it	lt
 8014a04:	2301      	movlt	r3, #1
 8014a06:	e7ba      	b.n	801497e <_dtoa_r+0x246>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	e7b2      	b.n	8014972 <_dtoa_r+0x23a>
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	e7f0      	b.n	80149f2 <_dtoa_r+0x2ba>
 8014a10:	2501      	movs	r5, #1
 8014a12:	2300      	movs	r3, #0
 8014a14:	9306      	str	r3, [sp, #24]
 8014a16:	950a      	str	r5, [sp, #40]	; 0x28
 8014a18:	f04f 33ff 	mov.w	r3, #4294967295
 8014a1c:	9302      	str	r3, [sp, #8]
 8014a1e:	4699      	mov	r9, r3
 8014a20:	2200      	movs	r2, #0
 8014a22:	2312      	movs	r3, #18
 8014a24:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a26:	e7aa      	b.n	801497e <_dtoa_r+0x246>
 8014a28:	2301      	movs	r3, #1
 8014a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014a2c:	e7f4      	b.n	8014a18 <_dtoa_r+0x2e0>
 8014a2e:	2301      	movs	r3, #1
 8014a30:	9302      	str	r3, [sp, #8]
 8014a32:	4699      	mov	r9, r3
 8014a34:	461a      	mov	r2, r3
 8014a36:	e7f5      	b.n	8014a24 <_dtoa_r+0x2ec>
 8014a38:	3101      	adds	r1, #1
 8014a3a:	6071      	str	r1, [r6, #4]
 8014a3c:	0052      	lsls	r2, r2, #1
 8014a3e:	e7a2      	b.n	8014986 <_dtoa_r+0x24e>
 8014a40:	636f4361 	.word	0x636f4361
 8014a44:	3fd287a7 	.word	0x3fd287a7
 8014a48:	8b60c8b3 	.word	0x8b60c8b3
 8014a4c:	3fc68a28 	.word	0x3fc68a28
 8014a50:	509f79fb 	.word	0x509f79fb
 8014a54:	3fd34413 	.word	0x3fd34413
 8014a58:	7ff00000 	.word	0x7ff00000
 8014a5c:	08017d74 	.word	0x08017d74
 8014a60:	3ff80000 	.word	0x3ff80000
 8014a64:	08017c78 	.word	0x08017c78
 8014a68:	08017c50 	.word	0x08017c50
 8014a6c:	08017bd9 	.word	0x08017bd9
 8014a70:	07f1      	lsls	r1, r6, #31
 8014a72:	d508      	bpl.n	8014a86 <_dtoa_r+0x34e>
 8014a74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a7c:	f7eb fdd4 	bl	8000628 <__aeabi_dmul>
 8014a80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014a84:	3501      	adds	r5, #1
 8014a86:	1076      	asrs	r6, r6, #1
 8014a88:	3708      	adds	r7, #8
 8014a8a:	2e00      	cmp	r6, #0
 8014a8c:	d1f0      	bne.n	8014a70 <_dtoa_r+0x338>
 8014a8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a96:	f7eb fef1 	bl	800087c <__aeabi_ddiv>
 8014a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8014a9e:	e01a      	b.n	8014ad6 <_dtoa_r+0x39e>
 8014aa0:	2502      	movs	r5, #2
 8014aa2:	e7a3      	b.n	80149ec <_dtoa_r+0x2b4>
 8014aa4:	f000 80a0 	beq.w	8014be8 <_dtoa_r+0x4b0>
 8014aa8:	f1ca 0600 	rsb	r6, sl, #0
 8014aac:	4b9f      	ldr	r3, [pc, #636]	; (8014d2c <_dtoa_r+0x5f4>)
 8014aae:	4fa0      	ldr	r7, [pc, #640]	; (8014d30 <_dtoa_r+0x5f8>)
 8014ab0:	f006 020f 	and.w	r2, r6, #15
 8014ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014abc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ac0:	f7eb fdb2 	bl	8000628 <__aeabi_dmul>
 8014ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8014ac8:	1136      	asrs	r6, r6, #4
 8014aca:	2300      	movs	r3, #0
 8014acc:	2502      	movs	r5, #2
 8014ace:	2e00      	cmp	r6, #0
 8014ad0:	d17f      	bne.n	8014bd2 <_dtoa_r+0x49a>
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d1e1      	bne.n	8014a9a <_dtoa_r+0x362>
 8014ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	f000 8087 	beq.w	8014bec <_dtoa_r+0x4b4>
 8014ade:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	4b93      	ldr	r3, [pc, #588]	; (8014d34 <_dtoa_r+0x5fc>)
 8014ae6:	4630      	mov	r0, r6
 8014ae8:	4639      	mov	r1, r7
 8014aea:	f7ec f80f 	bl	8000b0c <__aeabi_dcmplt>
 8014aee:	2800      	cmp	r0, #0
 8014af0:	d07c      	beq.n	8014bec <_dtoa_r+0x4b4>
 8014af2:	f1b9 0f00 	cmp.w	r9, #0
 8014af6:	d079      	beq.n	8014bec <_dtoa_r+0x4b4>
 8014af8:	9b02      	ldr	r3, [sp, #8]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	dd35      	ble.n	8014b6a <_dtoa_r+0x432>
 8014afe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014b02:	9308      	str	r3, [sp, #32]
 8014b04:	4639      	mov	r1, r7
 8014b06:	2200      	movs	r2, #0
 8014b08:	4b8b      	ldr	r3, [pc, #556]	; (8014d38 <_dtoa_r+0x600>)
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	f7eb fd8c 	bl	8000628 <__aeabi_dmul>
 8014b10:	e9cd 0100 	strd	r0, r1, [sp]
 8014b14:	9f02      	ldr	r7, [sp, #8]
 8014b16:	3501      	adds	r5, #1
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f7eb fd1b 	bl	8000554 <__aeabi_i2d>
 8014b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b22:	f7eb fd81 	bl	8000628 <__aeabi_dmul>
 8014b26:	2200      	movs	r2, #0
 8014b28:	4b84      	ldr	r3, [pc, #528]	; (8014d3c <_dtoa_r+0x604>)
 8014b2a:	f7eb fbc7 	bl	80002bc <__adddf3>
 8014b2e:	4605      	mov	r5, r0
 8014b30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014b34:	2f00      	cmp	r7, #0
 8014b36:	d15d      	bne.n	8014bf4 <_dtoa_r+0x4bc>
 8014b38:	2200      	movs	r2, #0
 8014b3a:	4b81      	ldr	r3, [pc, #516]	; (8014d40 <_dtoa_r+0x608>)
 8014b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b40:	f7eb fbba 	bl	80002b8 <__aeabi_dsub>
 8014b44:	462a      	mov	r2, r5
 8014b46:	4633      	mov	r3, r6
 8014b48:	e9cd 0100 	strd	r0, r1, [sp]
 8014b4c:	f7eb fffc 	bl	8000b48 <__aeabi_dcmpgt>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	f040 8288 	bne.w	8015066 <_dtoa_r+0x92e>
 8014b56:	462a      	mov	r2, r5
 8014b58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b60:	f7eb ffd4 	bl	8000b0c <__aeabi_dcmplt>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	f040 827c 	bne.w	8015062 <_dtoa_r+0x92a>
 8014b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8014b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	f2c0 8150 	blt.w	8014e1a <_dtoa_r+0x6e2>
 8014b7a:	f1ba 0f0e 	cmp.w	sl, #14
 8014b7e:	f300 814c 	bgt.w	8014e1a <_dtoa_r+0x6e2>
 8014b82:	4b6a      	ldr	r3, [pc, #424]	; (8014d2c <_dtoa_r+0x5f4>)
 8014b84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014b88:	ed93 7b00 	vldr	d7, [r3]
 8014b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b94:	f280 80d8 	bge.w	8014d48 <_dtoa_r+0x610>
 8014b98:	f1b9 0f00 	cmp.w	r9, #0
 8014b9c:	f300 80d4 	bgt.w	8014d48 <_dtoa_r+0x610>
 8014ba0:	f040 825e 	bne.w	8015060 <_dtoa_r+0x928>
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	4b66      	ldr	r3, [pc, #408]	; (8014d40 <_dtoa_r+0x608>)
 8014ba8:	ec51 0b17 	vmov	r0, r1, d7
 8014bac:	f7eb fd3c 	bl	8000628 <__aeabi_dmul>
 8014bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014bb4:	f7eb ffbe 	bl	8000b34 <__aeabi_dcmpge>
 8014bb8:	464f      	mov	r7, r9
 8014bba:	464e      	mov	r6, r9
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	f040 8234 	bne.w	801502a <_dtoa_r+0x8f2>
 8014bc2:	2331      	movs	r3, #49	; 0x31
 8014bc4:	f10b 0501 	add.w	r5, fp, #1
 8014bc8:	f88b 3000 	strb.w	r3, [fp]
 8014bcc:	f10a 0a01 	add.w	sl, sl, #1
 8014bd0:	e22f      	b.n	8015032 <_dtoa_r+0x8fa>
 8014bd2:	07f2      	lsls	r2, r6, #31
 8014bd4:	d505      	bpl.n	8014be2 <_dtoa_r+0x4aa>
 8014bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014bda:	f7eb fd25 	bl	8000628 <__aeabi_dmul>
 8014bde:	3501      	adds	r5, #1
 8014be0:	2301      	movs	r3, #1
 8014be2:	1076      	asrs	r6, r6, #1
 8014be4:	3708      	adds	r7, #8
 8014be6:	e772      	b.n	8014ace <_dtoa_r+0x396>
 8014be8:	2502      	movs	r5, #2
 8014bea:	e774      	b.n	8014ad6 <_dtoa_r+0x39e>
 8014bec:	f8cd a020 	str.w	sl, [sp, #32]
 8014bf0:	464f      	mov	r7, r9
 8014bf2:	e791      	b.n	8014b18 <_dtoa_r+0x3e0>
 8014bf4:	4b4d      	ldr	r3, [pc, #308]	; (8014d2c <_dtoa_r+0x5f4>)
 8014bf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014bfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d047      	beq.n	8014c94 <_dtoa_r+0x55c>
 8014c04:	4602      	mov	r2, r0
 8014c06:	460b      	mov	r3, r1
 8014c08:	2000      	movs	r0, #0
 8014c0a:	494e      	ldr	r1, [pc, #312]	; (8014d44 <_dtoa_r+0x60c>)
 8014c0c:	f7eb fe36 	bl	800087c <__aeabi_ddiv>
 8014c10:	462a      	mov	r2, r5
 8014c12:	4633      	mov	r3, r6
 8014c14:	f7eb fb50 	bl	80002b8 <__aeabi_dsub>
 8014c18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014c1c:	465d      	mov	r5, fp
 8014c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c22:	f7eb ffb1 	bl	8000b88 <__aeabi_d2iz>
 8014c26:	4606      	mov	r6, r0
 8014c28:	f7eb fc94 	bl	8000554 <__aeabi_i2d>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	460b      	mov	r3, r1
 8014c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c34:	f7eb fb40 	bl	80002b8 <__aeabi_dsub>
 8014c38:	3630      	adds	r6, #48	; 0x30
 8014c3a:	f805 6b01 	strb.w	r6, [r5], #1
 8014c3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014c42:	e9cd 0100 	strd	r0, r1, [sp]
 8014c46:	f7eb ff61 	bl	8000b0c <__aeabi_dcmplt>
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	d163      	bne.n	8014d16 <_dtoa_r+0x5de>
 8014c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c52:	2000      	movs	r0, #0
 8014c54:	4937      	ldr	r1, [pc, #220]	; (8014d34 <_dtoa_r+0x5fc>)
 8014c56:	f7eb fb2f 	bl	80002b8 <__aeabi_dsub>
 8014c5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014c5e:	f7eb ff55 	bl	8000b0c <__aeabi_dcmplt>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	f040 80b7 	bne.w	8014dd6 <_dtoa_r+0x69e>
 8014c68:	eba5 030b 	sub.w	r3, r5, fp
 8014c6c:	429f      	cmp	r7, r3
 8014c6e:	f77f af7c 	ble.w	8014b6a <_dtoa_r+0x432>
 8014c72:	2200      	movs	r2, #0
 8014c74:	4b30      	ldr	r3, [pc, #192]	; (8014d38 <_dtoa_r+0x600>)
 8014c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014c7a:	f7eb fcd5 	bl	8000628 <__aeabi_dmul>
 8014c7e:	2200      	movs	r2, #0
 8014c80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014c84:	4b2c      	ldr	r3, [pc, #176]	; (8014d38 <_dtoa_r+0x600>)
 8014c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c8a:	f7eb fccd 	bl	8000628 <__aeabi_dmul>
 8014c8e:	e9cd 0100 	strd	r0, r1, [sp]
 8014c92:	e7c4      	b.n	8014c1e <_dtoa_r+0x4e6>
 8014c94:	462a      	mov	r2, r5
 8014c96:	4633      	mov	r3, r6
 8014c98:	f7eb fcc6 	bl	8000628 <__aeabi_dmul>
 8014c9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ca0:	eb0b 0507 	add.w	r5, fp, r7
 8014ca4:	465e      	mov	r6, fp
 8014ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014caa:	f7eb ff6d 	bl	8000b88 <__aeabi_d2iz>
 8014cae:	4607      	mov	r7, r0
 8014cb0:	f7eb fc50 	bl	8000554 <__aeabi_i2d>
 8014cb4:	3730      	adds	r7, #48	; 0x30
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	460b      	mov	r3, r1
 8014cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cbe:	f7eb fafb 	bl	80002b8 <__aeabi_dsub>
 8014cc2:	f806 7b01 	strb.w	r7, [r6], #1
 8014cc6:	42ae      	cmp	r6, r5
 8014cc8:	e9cd 0100 	strd	r0, r1, [sp]
 8014ccc:	f04f 0200 	mov.w	r2, #0
 8014cd0:	d126      	bne.n	8014d20 <_dtoa_r+0x5e8>
 8014cd2:	4b1c      	ldr	r3, [pc, #112]	; (8014d44 <_dtoa_r+0x60c>)
 8014cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014cd8:	f7eb faf0 	bl	80002bc <__adddf3>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	460b      	mov	r3, r1
 8014ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ce4:	f7eb ff30 	bl	8000b48 <__aeabi_dcmpgt>
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	d174      	bne.n	8014dd6 <_dtoa_r+0x69e>
 8014cec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	4914      	ldr	r1, [pc, #80]	; (8014d44 <_dtoa_r+0x60c>)
 8014cf4:	f7eb fae0 	bl	80002b8 <__aeabi_dsub>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	460b      	mov	r3, r1
 8014cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d00:	f7eb ff04 	bl	8000b0c <__aeabi_dcmplt>
 8014d04:	2800      	cmp	r0, #0
 8014d06:	f43f af30 	beq.w	8014b6a <_dtoa_r+0x432>
 8014d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d0e:	2b30      	cmp	r3, #48	; 0x30
 8014d10:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d14:	d002      	beq.n	8014d1c <_dtoa_r+0x5e4>
 8014d16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014d1a:	e04a      	b.n	8014db2 <_dtoa_r+0x67a>
 8014d1c:	4615      	mov	r5, r2
 8014d1e:	e7f4      	b.n	8014d0a <_dtoa_r+0x5d2>
 8014d20:	4b05      	ldr	r3, [pc, #20]	; (8014d38 <_dtoa_r+0x600>)
 8014d22:	f7eb fc81 	bl	8000628 <__aeabi_dmul>
 8014d26:	e9cd 0100 	strd	r0, r1, [sp]
 8014d2a:	e7bc      	b.n	8014ca6 <_dtoa_r+0x56e>
 8014d2c:	08017c78 	.word	0x08017c78
 8014d30:	08017c50 	.word	0x08017c50
 8014d34:	3ff00000 	.word	0x3ff00000
 8014d38:	40240000 	.word	0x40240000
 8014d3c:	401c0000 	.word	0x401c0000
 8014d40:	40140000 	.word	0x40140000
 8014d44:	3fe00000 	.word	0x3fe00000
 8014d48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014d4c:	465d      	mov	r5, fp
 8014d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d52:	4630      	mov	r0, r6
 8014d54:	4639      	mov	r1, r7
 8014d56:	f7eb fd91 	bl	800087c <__aeabi_ddiv>
 8014d5a:	f7eb ff15 	bl	8000b88 <__aeabi_d2iz>
 8014d5e:	4680      	mov	r8, r0
 8014d60:	f7eb fbf8 	bl	8000554 <__aeabi_i2d>
 8014d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d68:	f7eb fc5e 	bl	8000628 <__aeabi_dmul>
 8014d6c:	4602      	mov	r2, r0
 8014d6e:	460b      	mov	r3, r1
 8014d70:	4630      	mov	r0, r6
 8014d72:	4639      	mov	r1, r7
 8014d74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014d78:	f7eb fa9e 	bl	80002b8 <__aeabi_dsub>
 8014d7c:	f805 6b01 	strb.w	r6, [r5], #1
 8014d80:	eba5 060b 	sub.w	r6, r5, fp
 8014d84:	45b1      	cmp	r9, r6
 8014d86:	4602      	mov	r2, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	d139      	bne.n	8014e00 <_dtoa_r+0x6c8>
 8014d8c:	f7eb fa96 	bl	80002bc <__adddf3>
 8014d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d94:	4606      	mov	r6, r0
 8014d96:	460f      	mov	r7, r1
 8014d98:	f7eb fed6 	bl	8000b48 <__aeabi_dcmpgt>
 8014d9c:	b9c8      	cbnz	r0, 8014dd2 <_dtoa_r+0x69a>
 8014d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014da2:	4630      	mov	r0, r6
 8014da4:	4639      	mov	r1, r7
 8014da6:	f7eb fea7 	bl	8000af8 <__aeabi_dcmpeq>
 8014daa:	b110      	cbz	r0, 8014db2 <_dtoa_r+0x67a>
 8014dac:	f018 0f01 	tst.w	r8, #1
 8014db0:	d10f      	bne.n	8014dd2 <_dtoa_r+0x69a>
 8014db2:	9904      	ldr	r1, [sp, #16]
 8014db4:	4620      	mov	r0, r4
 8014db6:	f000 fffd 	bl	8015db4 <_Bfree>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014dbe:	702b      	strb	r3, [r5, #0]
 8014dc0:	f10a 0301 	add.w	r3, sl, #1
 8014dc4:	6013      	str	r3, [r2, #0]
 8014dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f000 8241 	beq.w	8015250 <_dtoa_r+0xb18>
 8014dce:	601d      	str	r5, [r3, #0]
 8014dd0:	e23e      	b.n	8015250 <_dtoa_r+0xb18>
 8014dd2:	f8cd a020 	str.w	sl, [sp, #32]
 8014dd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014dda:	2a39      	cmp	r2, #57	; 0x39
 8014ddc:	f105 33ff 	add.w	r3, r5, #4294967295
 8014de0:	d108      	bne.n	8014df4 <_dtoa_r+0x6bc>
 8014de2:	459b      	cmp	fp, r3
 8014de4:	d10a      	bne.n	8014dfc <_dtoa_r+0x6c4>
 8014de6:	9b08      	ldr	r3, [sp, #32]
 8014de8:	3301      	adds	r3, #1
 8014dea:	9308      	str	r3, [sp, #32]
 8014dec:	2330      	movs	r3, #48	; 0x30
 8014dee:	f88b 3000 	strb.w	r3, [fp]
 8014df2:	465b      	mov	r3, fp
 8014df4:	781a      	ldrb	r2, [r3, #0]
 8014df6:	3201      	adds	r2, #1
 8014df8:	701a      	strb	r2, [r3, #0]
 8014dfa:	e78c      	b.n	8014d16 <_dtoa_r+0x5de>
 8014dfc:	461d      	mov	r5, r3
 8014dfe:	e7ea      	b.n	8014dd6 <_dtoa_r+0x69e>
 8014e00:	2200      	movs	r2, #0
 8014e02:	4b9b      	ldr	r3, [pc, #620]	; (8015070 <_dtoa_r+0x938>)
 8014e04:	f7eb fc10 	bl	8000628 <__aeabi_dmul>
 8014e08:	2200      	movs	r2, #0
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	460f      	mov	r7, r1
 8014e10:	f7eb fe72 	bl	8000af8 <__aeabi_dcmpeq>
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d09a      	beq.n	8014d4e <_dtoa_r+0x616>
 8014e18:	e7cb      	b.n	8014db2 <_dtoa_r+0x67a>
 8014e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e1c:	2a00      	cmp	r2, #0
 8014e1e:	f000 808b 	beq.w	8014f38 <_dtoa_r+0x800>
 8014e22:	9a06      	ldr	r2, [sp, #24]
 8014e24:	2a01      	cmp	r2, #1
 8014e26:	dc6e      	bgt.n	8014f06 <_dtoa_r+0x7ce>
 8014e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e2a:	2a00      	cmp	r2, #0
 8014e2c:	d067      	beq.n	8014efe <_dtoa_r+0x7c6>
 8014e2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014e32:	9f07      	ldr	r7, [sp, #28]
 8014e34:	9d05      	ldr	r5, [sp, #20]
 8014e36:	9a05      	ldr	r2, [sp, #20]
 8014e38:	2101      	movs	r1, #1
 8014e3a:	441a      	add	r2, r3
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	9205      	str	r2, [sp, #20]
 8014e40:	4498      	add	r8, r3
 8014e42:	f001 f895 	bl	8015f70 <__i2b>
 8014e46:	4606      	mov	r6, r0
 8014e48:	2d00      	cmp	r5, #0
 8014e4a:	dd0c      	ble.n	8014e66 <_dtoa_r+0x72e>
 8014e4c:	f1b8 0f00 	cmp.w	r8, #0
 8014e50:	dd09      	ble.n	8014e66 <_dtoa_r+0x72e>
 8014e52:	4545      	cmp	r5, r8
 8014e54:	9a05      	ldr	r2, [sp, #20]
 8014e56:	462b      	mov	r3, r5
 8014e58:	bfa8      	it	ge
 8014e5a:	4643      	movge	r3, r8
 8014e5c:	1ad2      	subs	r2, r2, r3
 8014e5e:	9205      	str	r2, [sp, #20]
 8014e60:	1aed      	subs	r5, r5, r3
 8014e62:	eba8 0803 	sub.w	r8, r8, r3
 8014e66:	9b07      	ldr	r3, [sp, #28]
 8014e68:	b1eb      	cbz	r3, 8014ea6 <_dtoa_r+0x76e>
 8014e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d067      	beq.n	8014f40 <_dtoa_r+0x808>
 8014e70:	b18f      	cbz	r7, 8014e96 <_dtoa_r+0x75e>
 8014e72:	4631      	mov	r1, r6
 8014e74:	463a      	mov	r2, r7
 8014e76:	4620      	mov	r0, r4
 8014e78:	f001 f91a 	bl	80160b0 <__pow5mult>
 8014e7c:	9a04      	ldr	r2, [sp, #16]
 8014e7e:	4601      	mov	r1, r0
 8014e80:	4606      	mov	r6, r0
 8014e82:	4620      	mov	r0, r4
 8014e84:	f001 f87d 	bl	8015f82 <__multiply>
 8014e88:	9904      	ldr	r1, [sp, #16]
 8014e8a:	9008      	str	r0, [sp, #32]
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f000 ff91 	bl	8015db4 <_Bfree>
 8014e92:	9b08      	ldr	r3, [sp, #32]
 8014e94:	9304      	str	r3, [sp, #16]
 8014e96:	9b07      	ldr	r3, [sp, #28]
 8014e98:	1bda      	subs	r2, r3, r7
 8014e9a:	d004      	beq.n	8014ea6 <_dtoa_r+0x76e>
 8014e9c:	9904      	ldr	r1, [sp, #16]
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f001 f906 	bl	80160b0 <__pow5mult>
 8014ea4:	9004      	str	r0, [sp, #16]
 8014ea6:	2101      	movs	r1, #1
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f001 f861 	bl	8015f70 <__i2b>
 8014eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eb0:	4607      	mov	r7, r0
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f000 81d0 	beq.w	8015258 <_dtoa_r+0xb20>
 8014eb8:	461a      	mov	r2, r3
 8014eba:	4601      	mov	r1, r0
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	f001 f8f7 	bl	80160b0 <__pow5mult>
 8014ec2:	9b06      	ldr	r3, [sp, #24]
 8014ec4:	2b01      	cmp	r3, #1
 8014ec6:	4607      	mov	r7, r0
 8014ec8:	dc40      	bgt.n	8014f4c <_dtoa_r+0x814>
 8014eca:	9b00      	ldr	r3, [sp, #0]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d139      	bne.n	8014f44 <_dtoa_r+0x80c>
 8014ed0:	9b01      	ldr	r3, [sp, #4]
 8014ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d136      	bne.n	8014f48 <_dtoa_r+0x810>
 8014eda:	9b01      	ldr	r3, [sp, #4]
 8014edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ee0:	0d1b      	lsrs	r3, r3, #20
 8014ee2:	051b      	lsls	r3, r3, #20
 8014ee4:	b12b      	cbz	r3, 8014ef2 <_dtoa_r+0x7ba>
 8014ee6:	9b05      	ldr	r3, [sp, #20]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	9305      	str	r3, [sp, #20]
 8014eec:	f108 0801 	add.w	r8, r8, #1
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	9307      	str	r3, [sp, #28]
 8014ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d12a      	bne.n	8014f50 <_dtoa_r+0x818>
 8014efa:	2001      	movs	r0, #1
 8014efc:	e030      	b.n	8014f60 <_dtoa_r+0x828>
 8014efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014f04:	e795      	b.n	8014e32 <_dtoa_r+0x6fa>
 8014f06:	9b07      	ldr	r3, [sp, #28]
 8014f08:	f109 37ff 	add.w	r7, r9, #4294967295
 8014f0c:	42bb      	cmp	r3, r7
 8014f0e:	bfbf      	itttt	lt
 8014f10:	9b07      	ldrlt	r3, [sp, #28]
 8014f12:	9707      	strlt	r7, [sp, #28]
 8014f14:	1afa      	sublt	r2, r7, r3
 8014f16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014f18:	bfbb      	ittet	lt
 8014f1a:	189b      	addlt	r3, r3, r2
 8014f1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014f1e:	1bdf      	subge	r7, r3, r7
 8014f20:	2700      	movlt	r7, #0
 8014f22:	f1b9 0f00 	cmp.w	r9, #0
 8014f26:	bfb5      	itete	lt
 8014f28:	9b05      	ldrlt	r3, [sp, #20]
 8014f2a:	9d05      	ldrge	r5, [sp, #20]
 8014f2c:	eba3 0509 	sublt.w	r5, r3, r9
 8014f30:	464b      	movge	r3, r9
 8014f32:	bfb8      	it	lt
 8014f34:	2300      	movlt	r3, #0
 8014f36:	e77e      	b.n	8014e36 <_dtoa_r+0x6fe>
 8014f38:	9f07      	ldr	r7, [sp, #28]
 8014f3a:	9d05      	ldr	r5, [sp, #20]
 8014f3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014f3e:	e783      	b.n	8014e48 <_dtoa_r+0x710>
 8014f40:	9a07      	ldr	r2, [sp, #28]
 8014f42:	e7ab      	b.n	8014e9c <_dtoa_r+0x764>
 8014f44:	2300      	movs	r3, #0
 8014f46:	e7d4      	b.n	8014ef2 <_dtoa_r+0x7ba>
 8014f48:	9b00      	ldr	r3, [sp, #0]
 8014f4a:	e7d2      	b.n	8014ef2 <_dtoa_r+0x7ba>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	9307      	str	r3, [sp, #28]
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014f56:	6918      	ldr	r0, [r3, #16]
 8014f58:	f000 ffbc 	bl	8015ed4 <__hi0bits>
 8014f5c:	f1c0 0020 	rsb	r0, r0, #32
 8014f60:	4440      	add	r0, r8
 8014f62:	f010 001f 	ands.w	r0, r0, #31
 8014f66:	d047      	beq.n	8014ff8 <_dtoa_r+0x8c0>
 8014f68:	f1c0 0320 	rsb	r3, r0, #32
 8014f6c:	2b04      	cmp	r3, #4
 8014f6e:	dd3b      	ble.n	8014fe8 <_dtoa_r+0x8b0>
 8014f70:	9b05      	ldr	r3, [sp, #20]
 8014f72:	f1c0 001c 	rsb	r0, r0, #28
 8014f76:	4403      	add	r3, r0
 8014f78:	9305      	str	r3, [sp, #20]
 8014f7a:	4405      	add	r5, r0
 8014f7c:	4480      	add	r8, r0
 8014f7e:	9b05      	ldr	r3, [sp, #20]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	dd05      	ble.n	8014f90 <_dtoa_r+0x858>
 8014f84:	461a      	mov	r2, r3
 8014f86:	9904      	ldr	r1, [sp, #16]
 8014f88:	4620      	mov	r0, r4
 8014f8a:	f001 f8df 	bl	801614c <__lshift>
 8014f8e:	9004      	str	r0, [sp, #16]
 8014f90:	f1b8 0f00 	cmp.w	r8, #0
 8014f94:	dd05      	ble.n	8014fa2 <_dtoa_r+0x86a>
 8014f96:	4639      	mov	r1, r7
 8014f98:	4642      	mov	r2, r8
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	f001 f8d6 	bl	801614c <__lshift>
 8014fa0:	4607      	mov	r7, r0
 8014fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fa4:	b353      	cbz	r3, 8014ffc <_dtoa_r+0x8c4>
 8014fa6:	4639      	mov	r1, r7
 8014fa8:	9804      	ldr	r0, [sp, #16]
 8014faa:	f001 f923 	bl	80161f4 <__mcmp>
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	da24      	bge.n	8014ffc <_dtoa_r+0x8c4>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	220a      	movs	r2, #10
 8014fb6:	9904      	ldr	r1, [sp, #16]
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f000 ff12 	bl	8015de2 <__multadd>
 8014fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fc0:	9004      	str	r0, [sp, #16]
 8014fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	f000 814d 	beq.w	8015266 <_dtoa_r+0xb2e>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	4631      	mov	r1, r6
 8014fd0:	220a      	movs	r2, #10
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f000 ff05 	bl	8015de2 <__multadd>
 8014fd8:	9b02      	ldr	r3, [sp, #8]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	4606      	mov	r6, r0
 8014fde:	dc4f      	bgt.n	8015080 <_dtoa_r+0x948>
 8014fe0:	9b06      	ldr	r3, [sp, #24]
 8014fe2:	2b02      	cmp	r3, #2
 8014fe4:	dd4c      	ble.n	8015080 <_dtoa_r+0x948>
 8014fe6:	e011      	b.n	801500c <_dtoa_r+0x8d4>
 8014fe8:	d0c9      	beq.n	8014f7e <_dtoa_r+0x846>
 8014fea:	9a05      	ldr	r2, [sp, #20]
 8014fec:	331c      	adds	r3, #28
 8014fee:	441a      	add	r2, r3
 8014ff0:	9205      	str	r2, [sp, #20]
 8014ff2:	441d      	add	r5, r3
 8014ff4:	4498      	add	r8, r3
 8014ff6:	e7c2      	b.n	8014f7e <_dtoa_r+0x846>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	e7f6      	b.n	8014fea <_dtoa_r+0x8b2>
 8014ffc:	f1b9 0f00 	cmp.w	r9, #0
 8015000:	dc38      	bgt.n	8015074 <_dtoa_r+0x93c>
 8015002:	9b06      	ldr	r3, [sp, #24]
 8015004:	2b02      	cmp	r3, #2
 8015006:	dd35      	ble.n	8015074 <_dtoa_r+0x93c>
 8015008:	f8cd 9008 	str.w	r9, [sp, #8]
 801500c:	9b02      	ldr	r3, [sp, #8]
 801500e:	b963      	cbnz	r3, 801502a <_dtoa_r+0x8f2>
 8015010:	4639      	mov	r1, r7
 8015012:	2205      	movs	r2, #5
 8015014:	4620      	mov	r0, r4
 8015016:	f000 fee4 	bl	8015de2 <__multadd>
 801501a:	4601      	mov	r1, r0
 801501c:	4607      	mov	r7, r0
 801501e:	9804      	ldr	r0, [sp, #16]
 8015020:	f001 f8e8 	bl	80161f4 <__mcmp>
 8015024:	2800      	cmp	r0, #0
 8015026:	f73f adcc 	bgt.w	8014bc2 <_dtoa_r+0x48a>
 801502a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801502c:	465d      	mov	r5, fp
 801502e:	ea6f 0a03 	mvn.w	sl, r3
 8015032:	f04f 0900 	mov.w	r9, #0
 8015036:	4639      	mov	r1, r7
 8015038:	4620      	mov	r0, r4
 801503a:	f000 febb 	bl	8015db4 <_Bfree>
 801503e:	2e00      	cmp	r6, #0
 8015040:	f43f aeb7 	beq.w	8014db2 <_dtoa_r+0x67a>
 8015044:	f1b9 0f00 	cmp.w	r9, #0
 8015048:	d005      	beq.n	8015056 <_dtoa_r+0x91e>
 801504a:	45b1      	cmp	r9, r6
 801504c:	d003      	beq.n	8015056 <_dtoa_r+0x91e>
 801504e:	4649      	mov	r1, r9
 8015050:	4620      	mov	r0, r4
 8015052:	f000 feaf 	bl	8015db4 <_Bfree>
 8015056:	4631      	mov	r1, r6
 8015058:	4620      	mov	r0, r4
 801505a:	f000 feab 	bl	8015db4 <_Bfree>
 801505e:	e6a8      	b.n	8014db2 <_dtoa_r+0x67a>
 8015060:	2700      	movs	r7, #0
 8015062:	463e      	mov	r6, r7
 8015064:	e7e1      	b.n	801502a <_dtoa_r+0x8f2>
 8015066:	f8dd a020 	ldr.w	sl, [sp, #32]
 801506a:	463e      	mov	r6, r7
 801506c:	e5a9      	b.n	8014bc2 <_dtoa_r+0x48a>
 801506e:	bf00      	nop
 8015070:	40240000 	.word	0x40240000
 8015074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015076:	f8cd 9008 	str.w	r9, [sp, #8]
 801507a:	2b00      	cmp	r3, #0
 801507c:	f000 80fa 	beq.w	8015274 <_dtoa_r+0xb3c>
 8015080:	2d00      	cmp	r5, #0
 8015082:	dd05      	ble.n	8015090 <_dtoa_r+0x958>
 8015084:	4631      	mov	r1, r6
 8015086:	462a      	mov	r2, r5
 8015088:	4620      	mov	r0, r4
 801508a:	f001 f85f 	bl	801614c <__lshift>
 801508e:	4606      	mov	r6, r0
 8015090:	9b07      	ldr	r3, [sp, #28]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d04c      	beq.n	8015130 <_dtoa_r+0x9f8>
 8015096:	6871      	ldr	r1, [r6, #4]
 8015098:	4620      	mov	r0, r4
 801509a:	f000 fe57 	bl	8015d4c <_Balloc>
 801509e:	6932      	ldr	r2, [r6, #16]
 80150a0:	3202      	adds	r2, #2
 80150a2:	4605      	mov	r5, r0
 80150a4:	0092      	lsls	r2, r2, #2
 80150a6:	f106 010c 	add.w	r1, r6, #12
 80150aa:	300c      	adds	r0, #12
 80150ac:	f7fd fb68 	bl	8012780 <memcpy>
 80150b0:	2201      	movs	r2, #1
 80150b2:	4629      	mov	r1, r5
 80150b4:	4620      	mov	r0, r4
 80150b6:	f001 f849 	bl	801614c <__lshift>
 80150ba:	9b00      	ldr	r3, [sp, #0]
 80150bc:	f8cd b014 	str.w	fp, [sp, #20]
 80150c0:	f003 0301 	and.w	r3, r3, #1
 80150c4:	46b1      	mov	r9, r6
 80150c6:	9307      	str	r3, [sp, #28]
 80150c8:	4606      	mov	r6, r0
 80150ca:	4639      	mov	r1, r7
 80150cc:	9804      	ldr	r0, [sp, #16]
 80150ce:	f7ff faa7 	bl	8014620 <quorem>
 80150d2:	4649      	mov	r1, r9
 80150d4:	4605      	mov	r5, r0
 80150d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80150da:	9804      	ldr	r0, [sp, #16]
 80150dc:	f001 f88a 	bl	80161f4 <__mcmp>
 80150e0:	4632      	mov	r2, r6
 80150e2:	9000      	str	r0, [sp, #0]
 80150e4:	4639      	mov	r1, r7
 80150e6:	4620      	mov	r0, r4
 80150e8:	f001 f89e 	bl	8016228 <__mdiff>
 80150ec:	68c3      	ldr	r3, [r0, #12]
 80150ee:	4602      	mov	r2, r0
 80150f0:	bb03      	cbnz	r3, 8015134 <_dtoa_r+0x9fc>
 80150f2:	4601      	mov	r1, r0
 80150f4:	9008      	str	r0, [sp, #32]
 80150f6:	9804      	ldr	r0, [sp, #16]
 80150f8:	f001 f87c 	bl	80161f4 <__mcmp>
 80150fc:	9a08      	ldr	r2, [sp, #32]
 80150fe:	4603      	mov	r3, r0
 8015100:	4611      	mov	r1, r2
 8015102:	4620      	mov	r0, r4
 8015104:	9308      	str	r3, [sp, #32]
 8015106:	f000 fe55 	bl	8015db4 <_Bfree>
 801510a:	9b08      	ldr	r3, [sp, #32]
 801510c:	b9a3      	cbnz	r3, 8015138 <_dtoa_r+0xa00>
 801510e:	9a06      	ldr	r2, [sp, #24]
 8015110:	b992      	cbnz	r2, 8015138 <_dtoa_r+0xa00>
 8015112:	9a07      	ldr	r2, [sp, #28]
 8015114:	b982      	cbnz	r2, 8015138 <_dtoa_r+0xa00>
 8015116:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801511a:	d029      	beq.n	8015170 <_dtoa_r+0xa38>
 801511c:	9b00      	ldr	r3, [sp, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	dd01      	ble.n	8015126 <_dtoa_r+0x9ee>
 8015122:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015126:	9b05      	ldr	r3, [sp, #20]
 8015128:	1c5d      	adds	r5, r3, #1
 801512a:	f883 8000 	strb.w	r8, [r3]
 801512e:	e782      	b.n	8015036 <_dtoa_r+0x8fe>
 8015130:	4630      	mov	r0, r6
 8015132:	e7c2      	b.n	80150ba <_dtoa_r+0x982>
 8015134:	2301      	movs	r3, #1
 8015136:	e7e3      	b.n	8015100 <_dtoa_r+0x9c8>
 8015138:	9a00      	ldr	r2, [sp, #0]
 801513a:	2a00      	cmp	r2, #0
 801513c:	db04      	blt.n	8015148 <_dtoa_r+0xa10>
 801513e:	d125      	bne.n	801518c <_dtoa_r+0xa54>
 8015140:	9a06      	ldr	r2, [sp, #24]
 8015142:	bb1a      	cbnz	r2, 801518c <_dtoa_r+0xa54>
 8015144:	9a07      	ldr	r2, [sp, #28]
 8015146:	bb0a      	cbnz	r2, 801518c <_dtoa_r+0xa54>
 8015148:	2b00      	cmp	r3, #0
 801514a:	ddec      	ble.n	8015126 <_dtoa_r+0x9ee>
 801514c:	2201      	movs	r2, #1
 801514e:	9904      	ldr	r1, [sp, #16]
 8015150:	4620      	mov	r0, r4
 8015152:	f000 fffb 	bl	801614c <__lshift>
 8015156:	4639      	mov	r1, r7
 8015158:	9004      	str	r0, [sp, #16]
 801515a:	f001 f84b 	bl	80161f4 <__mcmp>
 801515e:	2800      	cmp	r0, #0
 8015160:	dc03      	bgt.n	801516a <_dtoa_r+0xa32>
 8015162:	d1e0      	bne.n	8015126 <_dtoa_r+0x9ee>
 8015164:	f018 0f01 	tst.w	r8, #1
 8015168:	d0dd      	beq.n	8015126 <_dtoa_r+0x9ee>
 801516a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801516e:	d1d8      	bne.n	8015122 <_dtoa_r+0x9ea>
 8015170:	9b05      	ldr	r3, [sp, #20]
 8015172:	9a05      	ldr	r2, [sp, #20]
 8015174:	1c5d      	adds	r5, r3, #1
 8015176:	2339      	movs	r3, #57	; 0x39
 8015178:	7013      	strb	r3, [r2, #0]
 801517a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801517e:	2b39      	cmp	r3, #57	; 0x39
 8015180:	f105 32ff 	add.w	r2, r5, #4294967295
 8015184:	d04f      	beq.n	8015226 <_dtoa_r+0xaee>
 8015186:	3301      	adds	r3, #1
 8015188:	7013      	strb	r3, [r2, #0]
 801518a:	e754      	b.n	8015036 <_dtoa_r+0x8fe>
 801518c:	9a05      	ldr	r2, [sp, #20]
 801518e:	2b00      	cmp	r3, #0
 8015190:	f102 0501 	add.w	r5, r2, #1
 8015194:	dd06      	ble.n	80151a4 <_dtoa_r+0xa6c>
 8015196:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801519a:	d0e9      	beq.n	8015170 <_dtoa_r+0xa38>
 801519c:	f108 0801 	add.w	r8, r8, #1
 80151a0:	9b05      	ldr	r3, [sp, #20]
 80151a2:	e7c2      	b.n	801512a <_dtoa_r+0x9f2>
 80151a4:	9a02      	ldr	r2, [sp, #8]
 80151a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80151aa:	eba5 030b 	sub.w	r3, r5, fp
 80151ae:	4293      	cmp	r3, r2
 80151b0:	d021      	beq.n	80151f6 <_dtoa_r+0xabe>
 80151b2:	2300      	movs	r3, #0
 80151b4:	220a      	movs	r2, #10
 80151b6:	9904      	ldr	r1, [sp, #16]
 80151b8:	4620      	mov	r0, r4
 80151ba:	f000 fe12 	bl	8015de2 <__multadd>
 80151be:	45b1      	cmp	r9, r6
 80151c0:	9004      	str	r0, [sp, #16]
 80151c2:	f04f 0300 	mov.w	r3, #0
 80151c6:	f04f 020a 	mov.w	r2, #10
 80151ca:	4649      	mov	r1, r9
 80151cc:	4620      	mov	r0, r4
 80151ce:	d105      	bne.n	80151dc <_dtoa_r+0xaa4>
 80151d0:	f000 fe07 	bl	8015de2 <__multadd>
 80151d4:	4681      	mov	r9, r0
 80151d6:	4606      	mov	r6, r0
 80151d8:	9505      	str	r5, [sp, #20]
 80151da:	e776      	b.n	80150ca <_dtoa_r+0x992>
 80151dc:	f000 fe01 	bl	8015de2 <__multadd>
 80151e0:	4631      	mov	r1, r6
 80151e2:	4681      	mov	r9, r0
 80151e4:	2300      	movs	r3, #0
 80151e6:	220a      	movs	r2, #10
 80151e8:	4620      	mov	r0, r4
 80151ea:	f000 fdfa 	bl	8015de2 <__multadd>
 80151ee:	4606      	mov	r6, r0
 80151f0:	e7f2      	b.n	80151d8 <_dtoa_r+0xaa0>
 80151f2:	f04f 0900 	mov.w	r9, #0
 80151f6:	2201      	movs	r2, #1
 80151f8:	9904      	ldr	r1, [sp, #16]
 80151fa:	4620      	mov	r0, r4
 80151fc:	f000 ffa6 	bl	801614c <__lshift>
 8015200:	4639      	mov	r1, r7
 8015202:	9004      	str	r0, [sp, #16]
 8015204:	f000 fff6 	bl	80161f4 <__mcmp>
 8015208:	2800      	cmp	r0, #0
 801520a:	dcb6      	bgt.n	801517a <_dtoa_r+0xa42>
 801520c:	d102      	bne.n	8015214 <_dtoa_r+0xadc>
 801520e:	f018 0f01 	tst.w	r8, #1
 8015212:	d1b2      	bne.n	801517a <_dtoa_r+0xa42>
 8015214:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015218:	2b30      	cmp	r3, #48	; 0x30
 801521a:	f105 32ff 	add.w	r2, r5, #4294967295
 801521e:	f47f af0a 	bne.w	8015036 <_dtoa_r+0x8fe>
 8015222:	4615      	mov	r5, r2
 8015224:	e7f6      	b.n	8015214 <_dtoa_r+0xadc>
 8015226:	4593      	cmp	fp, r2
 8015228:	d105      	bne.n	8015236 <_dtoa_r+0xafe>
 801522a:	2331      	movs	r3, #49	; 0x31
 801522c:	f10a 0a01 	add.w	sl, sl, #1
 8015230:	f88b 3000 	strb.w	r3, [fp]
 8015234:	e6ff      	b.n	8015036 <_dtoa_r+0x8fe>
 8015236:	4615      	mov	r5, r2
 8015238:	e79f      	b.n	801517a <_dtoa_r+0xa42>
 801523a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80152a0 <_dtoa_r+0xb68>
 801523e:	e007      	b.n	8015250 <_dtoa_r+0xb18>
 8015240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015242:	f8df b060 	ldr.w	fp, [pc, #96]	; 80152a4 <_dtoa_r+0xb6c>
 8015246:	b11b      	cbz	r3, 8015250 <_dtoa_r+0xb18>
 8015248:	f10b 0308 	add.w	r3, fp, #8
 801524c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801524e:	6013      	str	r3, [r2, #0]
 8015250:	4658      	mov	r0, fp
 8015252:	b017      	add	sp, #92	; 0x5c
 8015254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015258:	9b06      	ldr	r3, [sp, #24]
 801525a:	2b01      	cmp	r3, #1
 801525c:	f77f ae35 	ble.w	8014eca <_dtoa_r+0x792>
 8015260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015262:	9307      	str	r3, [sp, #28]
 8015264:	e649      	b.n	8014efa <_dtoa_r+0x7c2>
 8015266:	9b02      	ldr	r3, [sp, #8]
 8015268:	2b00      	cmp	r3, #0
 801526a:	dc03      	bgt.n	8015274 <_dtoa_r+0xb3c>
 801526c:	9b06      	ldr	r3, [sp, #24]
 801526e:	2b02      	cmp	r3, #2
 8015270:	f73f aecc 	bgt.w	801500c <_dtoa_r+0x8d4>
 8015274:	465d      	mov	r5, fp
 8015276:	4639      	mov	r1, r7
 8015278:	9804      	ldr	r0, [sp, #16]
 801527a:	f7ff f9d1 	bl	8014620 <quorem>
 801527e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015282:	f805 8b01 	strb.w	r8, [r5], #1
 8015286:	9a02      	ldr	r2, [sp, #8]
 8015288:	eba5 030b 	sub.w	r3, r5, fp
 801528c:	429a      	cmp	r2, r3
 801528e:	ddb0      	ble.n	80151f2 <_dtoa_r+0xaba>
 8015290:	2300      	movs	r3, #0
 8015292:	220a      	movs	r2, #10
 8015294:	9904      	ldr	r1, [sp, #16]
 8015296:	4620      	mov	r0, r4
 8015298:	f000 fda3 	bl	8015de2 <__multadd>
 801529c:	9004      	str	r0, [sp, #16]
 801529e:	e7ea      	b.n	8015276 <_dtoa_r+0xb3e>
 80152a0:	08017d73 	.word	0x08017d73
 80152a4:	08017bd0 	.word	0x08017bd0

080152a8 <__sflush_r>:
 80152a8:	898a      	ldrh	r2, [r1, #12]
 80152aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152ae:	4605      	mov	r5, r0
 80152b0:	0710      	lsls	r0, r2, #28
 80152b2:	460c      	mov	r4, r1
 80152b4:	d458      	bmi.n	8015368 <__sflush_r+0xc0>
 80152b6:	684b      	ldr	r3, [r1, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	dc05      	bgt.n	80152c8 <__sflush_r+0x20>
 80152bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80152be:	2b00      	cmp	r3, #0
 80152c0:	dc02      	bgt.n	80152c8 <__sflush_r+0x20>
 80152c2:	2000      	movs	r0, #0
 80152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152ca:	2e00      	cmp	r6, #0
 80152cc:	d0f9      	beq.n	80152c2 <__sflush_r+0x1a>
 80152ce:	2300      	movs	r3, #0
 80152d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152d4:	682f      	ldr	r7, [r5, #0]
 80152d6:	6a21      	ldr	r1, [r4, #32]
 80152d8:	602b      	str	r3, [r5, #0]
 80152da:	d032      	beq.n	8015342 <__sflush_r+0x9a>
 80152dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152de:	89a3      	ldrh	r3, [r4, #12]
 80152e0:	075a      	lsls	r2, r3, #29
 80152e2:	d505      	bpl.n	80152f0 <__sflush_r+0x48>
 80152e4:	6863      	ldr	r3, [r4, #4]
 80152e6:	1ac0      	subs	r0, r0, r3
 80152e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152ea:	b10b      	cbz	r3, 80152f0 <__sflush_r+0x48>
 80152ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152ee:	1ac0      	subs	r0, r0, r3
 80152f0:	2300      	movs	r3, #0
 80152f2:	4602      	mov	r2, r0
 80152f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152f6:	6a21      	ldr	r1, [r4, #32]
 80152f8:	4628      	mov	r0, r5
 80152fa:	47b0      	blx	r6
 80152fc:	1c43      	adds	r3, r0, #1
 80152fe:	89a3      	ldrh	r3, [r4, #12]
 8015300:	d106      	bne.n	8015310 <__sflush_r+0x68>
 8015302:	6829      	ldr	r1, [r5, #0]
 8015304:	291d      	cmp	r1, #29
 8015306:	d848      	bhi.n	801539a <__sflush_r+0xf2>
 8015308:	4a29      	ldr	r2, [pc, #164]	; (80153b0 <__sflush_r+0x108>)
 801530a:	40ca      	lsrs	r2, r1
 801530c:	07d6      	lsls	r6, r2, #31
 801530e:	d544      	bpl.n	801539a <__sflush_r+0xf2>
 8015310:	2200      	movs	r2, #0
 8015312:	6062      	str	r2, [r4, #4]
 8015314:	04d9      	lsls	r1, r3, #19
 8015316:	6922      	ldr	r2, [r4, #16]
 8015318:	6022      	str	r2, [r4, #0]
 801531a:	d504      	bpl.n	8015326 <__sflush_r+0x7e>
 801531c:	1c42      	adds	r2, r0, #1
 801531e:	d101      	bne.n	8015324 <__sflush_r+0x7c>
 8015320:	682b      	ldr	r3, [r5, #0]
 8015322:	b903      	cbnz	r3, 8015326 <__sflush_r+0x7e>
 8015324:	6560      	str	r0, [r4, #84]	; 0x54
 8015326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015328:	602f      	str	r7, [r5, #0]
 801532a:	2900      	cmp	r1, #0
 801532c:	d0c9      	beq.n	80152c2 <__sflush_r+0x1a>
 801532e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015332:	4299      	cmp	r1, r3
 8015334:	d002      	beq.n	801533c <__sflush_r+0x94>
 8015336:	4628      	mov	r0, r5
 8015338:	f001 f916 	bl	8016568 <_free_r>
 801533c:	2000      	movs	r0, #0
 801533e:	6360      	str	r0, [r4, #52]	; 0x34
 8015340:	e7c0      	b.n	80152c4 <__sflush_r+0x1c>
 8015342:	2301      	movs	r3, #1
 8015344:	4628      	mov	r0, r5
 8015346:	47b0      	blx	r6
 8015348:	1c41      	adds	r1, r0, #1
 801534a:	d1c8      	bne.n	80152de <__sflush_r+0x36>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d0c5      	beq.n	80152de <__sflush_r+0x36>
 8015352:	2b1d      	cmp	r3, #29
 8015354:	d001      	beq.n	801535a <__sflush_r+0xb2>
 8015356:	2b16      	cmp	r3, #22
 8015358:	d101      	bne.n	801535e <__sflush_r+0xb6>
 801535a:	602f      	str	r7, [r5, #0]
 801535c:	e7b1      	b.n	80152c2 <__sflush_r+0x1a>
 801535e:	89a3      	ldrh	r3, [r4, #12]
 8015360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015364:	81a3      	strh	r3, [r4, #12]
 8015366:	e7ad      	b.n	80152c4 <__sflush_r+0x1c>
 8015368:	690f      	ldr	r7, [r1, #16]
 801536a:	2f00      	cmp	r7, #0
 801536c:	d0a9      	beq.n	80152c2 <__sflush_r+0x1a>
 801536e:	0793      	lsls	r3, r2, #30
 8015370:	680e      	ldr	r6, [r1, #0]
 8015372:	bf08      	it	eq
 8015374:	694b      	ldreq	r3, [r1, #20]
 8015376:	600f      	str	r7, [r1, #0]
 8015378:	bf18      	it	ne
 801537a:	2300      	movne	r3, #0
 801537c:	eba6 0807 	sub.w	r8, r6, r7
 8015380:	608b      	str	r3, [r1, #8]
 8015382:	f1b8 0f00 	cmp.w	r8, #0
 8015386:	dd9c      	ble.n	80152c2 <__sflush_r+0x1a>
 8015388:	4643      	mov	r3, r8
 801538a:	463a      	mov	r2, r7
 801538c:	6a21      	ldr	r1, [r4, #32]
 801538e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015390:	4628      	mov	r0, r5
 8015392:	47b0      	blx	r6
 8015394:	2800      	cmp	r0, #0
 8015396:	dc06      	bgt.n	80153a6 <__sflush_r+0xfe>
 8015398:	89a3      	ldrh	r3, [r4, #12]
 801539a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801539e:	81a3      	strh	r3, [r4, #12]
 80153a0:	f04f 30ff 	mov.w	r0, #4294967295
 80153a4:	e78e      	b.n	80152c4 <__sflush_r+0x1c>
 80153a6:	4407      	add	r7, r0
 80153a8:	eba8 0800 	sub.w	r8, r8, r0
 80153ac:	e7e9      	b.n	8015382 <__sflush_r+0xda>
 80153ae:	bf00      	nop
 80153b0:	20400001 	.word	0x20400001

080153b4 <_fflush_r>:
 80153b4:	b538      	push	{r3, r4, r5, lr}
 80153b6:	690b      	ldr	r3, [r1, #16]
 80153b8:	4605      	mov	r5, r0
 80153ba:	460c      	mov	r4, r1
 80153bc:	b1db      	cbz	r3, 80153f6 <_fflush_r+0x42>
 80153be:	b118      	cbz	r0, 80153c8 <_fflush_r+0x14>
 80153c0:	6983      	ldr	r3, [r0, #24]
 80153c2:	b90b      	cbnz	r3, 80153c8 <_fflush_r+0x14>
 80153c4:	f000 f860 	bl	8015488 <__sinit>
 80153c8:	4b0c      	ldr	r3, [pc, #48]	; (80153fc <_fflush_r+0x48>)
 80153ca:	429c      	cmp	r4, r3
 80153cc:	d109      	bne.n	80153e2 <_fflush_r+0x2e>
 80153ce:	686c      	ldr	r4, [r5, #4]
 80153d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153d4:	b17b      	cbz	r3, 80153f6 <_fflush_r+0x42>
 80153d6:	4621      	mov	r1, r4
 80153d8:	4628      	mov	r0, r5
 80153da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153de:	f7ff bf63 	b.w	80152a8 <__sflush_r>
 80153e2:	4b07      	ldr	r3, [pc, #28]	; (8015400 <_fflush_r+0x4c>)
 80153e4:	429c      	cmp	r4, r3
 80153e6:	d101      	bne.n	80153ec <_fflush_r+0x38>
 80153e8:	68ac      	ldr	r4, [r5, #8]
 80153ea:	e7f1      	b.n	80153d0 <_fflush_r+0x1c>
 80153ec:	4b05      	ldr	r3, [pc, #20]	; (8015404 <_fflush_r+0x50>)
 80153ee:	429c      	cmp	r4, r3
 80153f0:	bf08      	it	eq
 80153f2:	68ec      	ldreq	r4, [r5, #12]
 80153f4:	e7ec      	b.n	80153d0 <_fflush_r+0x1c>
 80153f6:	2000      	movs	r0, #0
 80153f8:	bd38      	pop	{r3, r4, r5, pc}
 80153fa:	bf00      	nop
 80153fc:	08017c00 	.word	0x08017c00
 8015400:	08017c20 	.word	0x08017c20
 8015404:	08017be0 	.word	0x08017be0

08015408 <std>:
 8015408:	2300      	movs	r3, #0
 801540a:	b510      	push	{r4, lr}
 801540c:	4604      	mov	r4, r0
 801540e:	e9c0 3300 	strd	r3, r3, [r0]
 8015412:	6083      	str	r3, [r0, #8]
 8015414:	8181      	strh	r1, [r0, #12]
 8015416:	6643      	str	r3, [r0, #100]	; 0x64
 8015418:	81c2      	strh	r2, [r0, #14]
 801541a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801541e:	6183      	str	r3, [r0, #24]
 8015420:	4619      	mov	r1, r3
 8015422:	2208      	movs	r2, #8
 8015424:	305c      	adds	r0, #92	; 0x5c
 8015426:	f7fd f9b6 	bl	8012796 <memset>
 801542a:	4b05      	ldr	r3, [pc, #20]	; (8015440 <std+0x38>)
 801542c:	6263      	str	r3, [r4, #36]	; 0x24
 801542e:	4b05      	ldr	r3, [pc, #20]	; (8015444 <std+0x3c>)
 8015430:	62a3      	str	r3, [r4, #40]	; 0x28
 8015432:	4b05      	ldr	r3, [pc, #20]	; (8015448 <std+0x40>)
 8015434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015436:	4b05      	ldr	r3, [pc, #20]	; (801544c <std+0x44>)
 8015438:	6224      	str	r4, [r4, #32]
 801543a:	6323      	str	r3, [r4, #48]	; 0x30
 801543c:	bd10      	pop	{r4, pc}
 801543e:	bf00      	nop
 8015440:	08013625 	.word	0x08013625
 8015444:	0801364b 	.word	0x0801364b
 8015448:	08013683 	.word	0x08013683
 801544c:	080136a7 	.word	0x080136a7

08015450 <_cleanup_r>:
 8015450:	4901      	ldr	r1, [pc, #4]	; (8015458 <_cleanup_r+0x8>)
 8015452:	f000 b885 	b.w	8015560 <_fwalk_reent>
 8015456:	bf00      	nop
 8015458:	080153b5 	.word	0x080153b5

0801545c <__sfmoreglue>:
 801545c:	b570      	push	{r4, r5, r6, lr}
 801545e:	1e4a      	subs	r2, r1, #1
 8015460:	2568      	movs	r5, #104	; 0x68
 8015462:	4355      	muls	r5, r2
 8015464:	460e      	mov	r6, r1
 8015466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801546a:	f001 f8cb 	bl	8016604 <_malloc_r>
 801546e:	4604      	mov	r4, r0
 8015470:	b140      	cbz	r0, 8015484 <__sfmoreglue+0x28>
 8015472:	2100      	movs	r1, #0
 8015474:	e9c0 1600 	strd	r1, r6, [r0]
 8015478:	300c      	adds	r0, #12
 801547a:	60a0      	str	r0, [r4, #8]
 801547c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015480:	f7fd f989 	bl	8012796 <memset>
 8015484:	4620      	mov	r0, r4
 8015486:	bd70      	pop	{r4, r5, r6, pc}

08015488 <__sinit>:
 8015488:	6983      	ldr	r3, [r0, #24]
 801548a:	b510      	push	{r4, lr}
 801548c:	4604      	mov	r4, r0
 801548e:	bb33      	cbnz	r3, 80154de <__sinit+0x56>
 8015490:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015494:	6503      	str	r3, [r0, #80]	; 0x50
 8015496:	4b12      	ldr	r3, [pc, #72]	; (80154e0 <__sinit+0x58>)
 8015498:	4a12      	ldr	r2, [pc, #72]	; (80154e4 <__sinit+0x5c>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	6282      	str	r2, [r0, #40]	; 0x28
 801549e:	4298      	cmp	r0, r3
 80154a0:	bf04      	itt	eq
 80154a2:	2301      	moveq	r3, #1
 80154a4:	6183      	streq	r3, [r0, #24]
 80154a6:	f000 f81f 	bl	80154e8 <__sfp>
 80154aa:	6060      	str	r0, [r4, #4]
 80154ac:	4620      	mov	r0, r4
 80154ae:	f000 f81b 	bl	80154e8 <__sfp>
 80154b2:	60a0      	str	r0, [r4, #8]
 80154b4:	4620      	mov	r0, r4
 80154b6:	f000 f817 	bl	80154e8 <__sfp>
 80154ba:	2200      	movs	r2, #0
 80154bc:	60e0      	str	r0, [r4, #12]
 80154be:	2104      	movs	r1, #4
 80154c0:	6860      	ldr	r0, [r4, #4]
 80154c2:	f7ff ffa1 	bl	8015408 <std>
 80154c6:	2201      	movs	r2, #1
 80154c8:	2109      	movs	r1, #9
 80154ca:	68a0      	ldr	r0, [r4, #8]
 80154cc:	f7ff ff9c 	bl	8015408 <std>
 80154d0:	2202      	movs	r2, #2
 80154d2:	2112      	movs	r1, #18
 80154d4:	68e0      	ldr	r0, [r4, #12]
 80154d6:	f7ff ff97 	bl	8015408 <std>
 80154da:	2301      	movs	r3, #1
 80154dc:	61a3      	str	r3, [r4, #24]
 80154de:	bd10      	pop	{r4, pc}
 80154e0:	08017b40 	.word	0x08017b40
 80154e4:	08015451 	.word	0x08015451

080154e8 <__sfp>:
 80154e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ea:	4b1b      	ldr	r3, [pc, #108]	; (8015558 <__sfp+0x70>)
 80154ec:	681e      	ldr	r6, [r3, #0]
 80154ee:	69b3      	ldr	r3, [r6, #24]
 80154f0:	4607      	mov	r7, r0
 80154f2:	b913      	cbnz	r3, 80154fa <__sfp+0x12>
 80154f4:	4630      	mov	r0, r6
 80154f6:	f7ff ffc7 	bl	8015488 <__sinit>
 80154fa:	3648      	adds	r6, #72	; 0x48
 80154fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015500:	3b01      	subs	r3, #1
 8015502:	d503      	bpl.n	801550c <__sfp+0x24>
 8015504:	6833      	ldr	r3, [r6, #0]
 8015506:	b133      	cbz	r3, 8015516 <__sfp+0x2e>
 8015508:	6836      	ldr	r6, [r6, #0]
 801550a:	e7f7      	b.n	80154fc <__sfp+0x14>
 801550c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015510:	b16d      	cbz	r5, 801552e <__sfp+0x46>
 8015512:	3468      	adds	r4, #104	; 0x68
 8015514:	e7f4      	b.n	8015500 <__sfp+0x18>
 8015516:	2104      	movs	r1, #4
 8015518:	4638      	mov	r0, r7
 801551a:	f7ff ff9f 	bl	801545c <__sfmoreglue>
 801551e:	6030      	str	r0, [r6, #0]
 8015520:	2800      	cmp	r0, #0
 8015522:	d1f1      	bne.n	8015508 <__sfp+0x20>
 8015524:	230c      	movs	r3, #12
 8015526:	603b      	str	r3, [r7, #0]
 8015528:	4604      	mov	r4, r0
 801552a:	4620      	mov	r0, r4
 801552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801552e:	4b0b      	ldr	r3, [pc, #44]	; (801555c <__sfp+0x74>)
 8015530:	6665      	str	r5, [r4, #100]	; 0x64
 8015532:	e9c4 5500 	strd	r5, r5, [r4]
 8015536:	60a5      	str	r5, [r4, #8]
 8015538:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801553c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015540:	2208      	movs	r2, #8
 8015542:	4629      	mov	r1, r5
 8015544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015548:	f7fd f925 	bl	8012796 <memset>
 801554c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015554:	e7e9      	b.n	801552a <__sfp+0x42>
 8015556:	bf00      	nop
 8015558:	08017b40 	.word	0x08017b40
 801555c:	ffff0001 	.word	0xffff0001

08015560 <_fwalk_reent>:
 8015560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015564:	4680      	mov	r8, r0
 8015566:	4689      	mov	r9, r1
 8015568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801556c:	2600      	movs	r6, #0
 801556e:	b914      	cbnz	r4, 8015576 <_fwalk_reent+0x16>
 8015570:	4630      	mov	r0, r6
 8015572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015576:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801557a:	3f01      	subs	r7, #1
 801557c:	d501      	bpl.n	8015582 <_fwalk_reent+0x22>
 801557e:	6824      	ldr	r4, [r4, #0]
 8015580:	e7f5      	b.n	801556e <_fwalk_reent+0xe>
 8015582:	89ab      	ldrh	r3, [r5, #12]
 8015584:	2b01      	cmp	r3, #1
 8015586:	d907      	bls.n	8015598 <_fwalk_reent+0x38>
 8015588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801558c:	3301      	adds	r3, #1
 801558e:	d003      	beq.n	8015598 <_fwalk_reent+0x38>
 8015590:	4629      	mov	r1, r5
 8015592:	4640      	mov	r0, r8
 8015594:	47c8      	blx	r9
 8015596:	4306      	orrs	r6, r0
 8015598:	3568      	adds	r5, #104	; 0x68
 801559a:	e7ee      	b.n	801557a <_fwalk_reent+0x1a>

0801559c <rshift>:
 801559c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801559e:	6906      	ldr	r6, [r0, #16]
 80155a0:	114b      	asrs	r3, r1, #5
 80155a2:	429e      	cmp	r6, r3
 80155a4:	f100 0414 	add.w	r4, r0, #20
 80155a8:	dd30      	ble.n	801560c <rshift+0x70>
 80155aa:	f011 011f 	ands.w	r1, r1, #31
 80155ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80155b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80155b6:	d108      	bne.n	80155ca <rshift+0x2e>
 80155b8:	4621      	mov	r1, r4
 80155ba:	42b2      	cmp	r2, r6
 80155bc:	460b      	mov	r3, r1
 80155be:	d211      	bcs.n	80155e4 <rshift+0x48>
 80155c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80155c4:	f841 3b04 	str.w	r3, [r1], #4
 80155c8:	e7f7      	b.n	80155ba <rshift+0x1e>
 80155ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80155ce:	f1c1 0c20 	rsb	ip, r1, #32
 80155d2:	40cd      	lsrs	r5, r1
 80155d4:	3204      	adds	r2, #4
 80155d6:	4623      	mov	r3, r4
 80155d8:	42b2      	cmp	r2, r6
 80155da:	4617      	mov	r7, r2
 80155dc:	d30c      	bcc.n	80155f8 <rshift+0x5c>
 80155de:	601d      	str	r5, [r3, #0]
 80155e0:	b105      	cbz	r5, 80155e4 <rshift+0x48>
 80155e2:	3304      	adds	r3, #4
 80155e4:	1b1a      	subs	r2, r3, r4
 80155e6:	42a3      	cmp	r3, r4
 80155e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80155ec:	bf08      	it	eq
 80155ee:	2300      	moveq	r3, #0
 80155f0:	6102      	str	r2, [r0, #16]
 80155f2:	bf08      	it	eq
 80155f4:	6143      	streq	r3, [r0, #20]
 80155f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155f8:	683f      	ldr	r7, [r7, #0]
 80155fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80155fe:	433d      	orrs	r5, r7
 8015600:	f843 5b04 	str.w	r5, [r3], #4
 8015604:	f852 5b04 	ldr.w	r5, [r2], #4
 8015608:	40cd      	lsrs	r5, r1
 801560a:	e7e5      	b.n	80155d8 <rshift+0x3c>
 801560c:	4623      	mov	r3, r4
 801560e:	e7e9      	b.n	80155e4 <rshift+0x48>

08015610 <__hexdig_fun>:
 8015610:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015614:	2b09      	cmp	r3, #9
 8015616:	d802      	bhi.n	801561e <__hexdig_fun+0xe>
 8015618:	3820      	subs	r0, #32
 801561a:	b2c0      	uxtb	r0, r0
 801561c:	4770      	bx	lr
 801561e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015622:	2b05      	cmp	r3, #5
 8015624:	d801      	bhi.n	801562a <__hexdig_fun+0x1a>
 8015626:	3847      	subs	r0, #71	; 0x47
 8015628:	e7f7      	b.n	801561a <__hexdig_fun+0xa>
 801562a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801562e:	2b05      	cmp	r3, #5
 8015630:	d801      	bhi.n	8015636 <__hexdig_fun+0x26>
 8015632:	3827      	subs	r0, #39	; 0x27
 8015634:	e7f1      	b.n	801561a <__hexdig_fun+0xa>
 8015636:	2000      	movs	r0, #0
 8015638:	4770      	bx	lr

0801563a <__gethex>:
 801563a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801563e:	b08b      	sub	sp, #44	; 0x2c
 8015640:	468a      	mov	sl, r1
 8015642:	9002      	str	r0, [sp, #8]
 8015644:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015646:	9306      	str	r3, [sp, #24]
 8015648:	4690      	mov	r8, r2
 801564a:	f000 fadf 	bl	8015c0c <__localeconv_l>
 801564e:	6803      	ldr	r3, [r0, #0]
 8015650:	9303      	str	r3, [sp, #12]
 8015652:	4618      	mov	r0, r3
 8015654:	f7ea fdd4 	bl	8000200 <strlen>
 8015658:	9b03      	ldr	r3, [sp, #12]
 801565a:	9001      	str	r0, [sp, #4]
 801565c:	4403      	add	r3, r0
 801565e:	f04f 0b00 	mov.w	fp, #0
 8015662:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015666:	9307      	str	r3, [sp, #28]
 8015668:	f8da 3000 	ldr.w	r3, [sl]
 801566c:	3302      	adds	r3, #2
 801566e:	461f      	mov	r7, r3
 8015670:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015674:	2830      	cmp	r0, #48	; 0x30
 8015676:	d06c      	beq.n	8015752 <__gethex+0x118>
 8015678:	f7ff ffca 	bl	8015610 <__hexdig_fun>
 801567c:	4604      	mov	r4, r0
 801567e:	2800      	cmp	r0, #0
 8015680:	d16a      	bne.n	8015758 <__gethex+0x11e>
 8015682:	9a01      	ldr	r2, [sp, #4]
 8015684:	9903      	ldr	r1, [sp, #12]
 8015686:	4638      	mov	r0, r7
 8015688:	f001 fdfe 	bl	8017288 <strncmp>
 801568c:	2800      	cmp	r0, #0
 801568e:	d166      	bne.n	801575e <__gethex+0x124>
 8015690:	9b01      	ldr	r3, [sp, #4]
 8015692:	5cf8      	ldrb	r0, [r7, r3]
 8015694:	18fe      	adds	r6, r7, r3
 8015696:	f7ff ffbb 	bl	8015610 <__hexdig_fun>
 801569a:	2800      	cmp	r0, #0
 801569c:	d062      	beq.n	8015764 <__gethex+0x12a>
 801569e:	4633      	mov	r3, r6
 80156a0:	7818      	ldrb	r0, [r3, #0]
 80156a2:	2830      	cmp	r0, #48	; 0x30
 80156a4:	461f      	mov	r7, r3
 80156a6:	f103 0301 	add.w	r3, r3, #1
 80156aa:	d0f9      	beq.n	80156a0 <__gethex+0x66>
 80156ac:	f7ff ffb0 	bl	8015610 <__hexdig_fun>
 80156b0:	fab0 f580 	clz	r5, r0
 80156b4:	096d      	lsrs	r5, r5, #5
 80156b6:	4634      	mov	r4, r6
 80156b8:	f04f 0b01 	mov.w	fp, #1
 80156bc:	463a      	mov	r2, r7
 80156be:	4616      	mov	r6, r2
 80156c0:	3201      	adds	r2, #1
 80156c2:	7830      	ldrb	r0, [r6, #0]
 80156c4:	f7ff ffa4 	bl	8015610 <__hexdig_fun>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d1f8      	bne.n	80156be <__gethex+0x84>
 80156cc:	9a01      	ldr	r2, [sp, #4]
 80156ce:	9903      	ldr	r1, [sp, #12]
 80156d0:	4630      	mov	r0, r6
 80156d2:	f001 fdd9 	bl	8017288 <strncmp>
 80156d6:	b950      	cbnz	r0, 80156ee <__gethex+0xb4>
 80156d8:	b954      	cbnz	r4, 80156f0 <__gethex+0xb6>
 80156da:	9b01      	ldr	r3, [sp, #4]
 80156dc:	18f4      	adds	r4, r6, r3
 80156de:	4622      	mov	r2, r4
 80156e0:	4616      	mov	r6, r2
 80156e2:	3201      	adds	r2, #1
 80156e4:	7830      	ldrb	r0, [r6, #0]
 80156e6:	f7ff ff93 	bl	8015610 <__hexdig_fun>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d1f8      	bne.n	80156e0 <__gethex+0xa6>
 80156ee:	b10c      	cbz	r4, 80156f4 <__gethex+0xba>
 80156f0:	1ba4      	subs	r4, r4, r6
 80156f2:	00a4      	lsls	r4, r4, #2
 80156f4:	7833      	ldrb	r3, [r6, #0]
 80156f6:	2b50      	cmp	r3, #80	; 0x50
 80156f8:	d001      	beq.n	80156fe <__gethex+0xc4>
 80156fa:	2b70      	cmp	r3, #112	; 0x70
 80156fc:	d140      	bne.n	8015780 <__gethex+0x146>
 80156fe:	7873      	ldrb	r3, [r6, #1]
 8015700:	2b2b      	cmp	r3, #43	; 0x2b
 8015702:	d031      	beq.n	8015768 <__gethex+0x12e>
 8015704:	2b2d      	cmp	r3, #45	; 0x2d
 8015706:	d033      	beq.n	8015770 <__gethex+0x136>
 8015708:	1c71      	adds	r1, r6, #1
 801570a:	f04f 0900 	mov.w	r9, #0
 801570e:	7808      	ldrb	r0, [r1, #0]
 8015710:	f7ff ff7e 	bl	8015610 <__hexdig_fun>
 8015714:	1e43      	subs	r3, r0, #1
 8015716:	b2db      	uxtb	r3, r3
 8015718:	2b18      	cmp	r3, #24
 801571a:	d831      	bhi.n	8015780 <__gethex+0x146>
 801571c:	f1a0 0210 	sub.w	r2, r0, #16
 8015720:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015724:	f7ff ff74 	bl	8015610 <__hexdig_fun>
 8015728:	1e43      	subs	r3, r0, #1
 801572a:	b2db      	uxtb	r3, r3
 801572c:	2b18      	cmp	r3, #24
 801572e:	d922      	bls.n	8015776 <__gethex+0x13c>
 8015730:	f1b9 0f00 	cmp.w	r9, #0
 8015734:	d000      	beq.n	8015738 <__gethex+0xfe>
 8015736:	4252      	negs	r2, r2
 8015738:	4414      	add	r4, r2
 801573a:	f8ca 1000 	str.w	r1, [sl]
 801573e:	b30d      	cbz	r5, 8015784 <__gethex+0x14a>
 8015740:	f1bb 0f00 	cmp.w	fp, #0
 8015744:	bf0c      	ite	eq
 8015746:	2706      	moveq	r7, #6
 8015748:	2700      	movne	r7, #0
 801574a:	4638      	mov	r0, r7
 801574c:	b00b      	add	sp, #44	; 0x2c
 801574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015752:	f10b 0b01 	add.w	fp, fp, #1
 8015756:	e78a      	b.n	801566e <__gethex+0x34>
 8015758:	2500      	movs	r5, #0
 801575a:	462c      	mov	r4, r5
 801575c:	e7ae      	b.n	80156bc <__gethex+0x82>
 801575e:	463e      	mov	r6, r7
 8015760:	2501      	movs	r5, #1
 8015762:	e7c7      	b.n	80156f4 <__gethex+0xba>
 8015764:	4604      	mov	r4, r0
 8015766:	e7fb      	b.n	8015760 <__gethex+0x126>
 8015768:	f04f 0900 	mov.w	r9, #0
 801576c:	1cb1      	adds	r1, r6, #2
 801576e:	e7ce      	b.n	801570e <__gethex+0xd4>
 8015770:	f04f 0901 	mov.w	r9, #1
 8015774:	e7fa      	b.n	801576c <__gethex+0x132>
 8015776:	230a      	movs	r3, #10
 8015778:	fb03 0202 	mla	r2, r3, r2, r0
 801577c:	3a10      	subs	r2, #16
 801577e:	e7cf      	b.n	8015720 <__gethex+0xe6>
 8015780:	4631      	mov	r1, r6
 8015782:	e7da      	b.n	801573a <__gethex+0x100>
 8015784:	1bf3      	subs	r3, r6, r7
 8015786:	3b01      	subs	r3, #1
 8015788:	4629      	mov	r1, r5
 801578a:	2b07      	cmp	r3, #7
 801578c:	dc49      	bgt.n	8015822 <__gethex+0x1e8>
 801578e:	9802      	ldr	r0, [sp, #8]
 8015790:	f000 fadc 	bl	8015d4c <_Balloc>
 8015794:	9b01      	ldr	r3, [sp, #4]
 8015796:	f100 0914 	add.w	r9, r0, #20
 801579a:	f04f 0b00 	mov.w	fp, #0
 801579e:	f1c3 0301 	rsb	r3, r3, #1
 80157a2:	4605      	mov	r5, r0
 80157a4:	f8cd 9010 	str.w	r9, [sp, #16]
 80157a8:	46da      	mov	sl, fp
 80157aa:	9308      	str	r3, [sp, #32]
 80157ac:	42b7      	cmp	r7, r6
 80157ae:	d33b      	bcc.n	8015828 <__gethex+0x1ee>
 80157b0:	9804      	ldr	r0, [sp, #16]
 80157b2:	f840 ab04 	str.w	sl, [r0], #4
 80157b6:	eba0 0009 	sub.w	r0, r0, r9
 80157ba:	1080      	asrs	r0, r0, #2
 80157bc:	6128      	str	r0, [r5, #16]
 80157be:	0147      	lsls	r7, r0, #5
 80157c0:	4650      	mov	r0, sl
 80157c2:	f000 fb87 	bl	8015ed4 <__hi0bits>
 80157c6:	f8d8 6000 	ldr.w	r6, [r8]
 80157ca:	1a3f      	subs	r7, r7, r0
 80157cc:	42b7      	cmp	r7, r6
 80157ce:	dd64      	ble.n	801589a <__gethex+0x260>
 80157d0:	1bbf      	subs	r7, r7, r6
 80157d2:	4639      	mov	r1, r7
 80157d4:	4628      	mov	r0, r5
 80157d6:	f000 fe97 	bl	8016508 <__any_on>
 80157da:	4682      	mov	sl, r0
 80157dc:	b178      	cbz	r0, 80157fe <__gethex+0x1c4>
 80157de:	1e7b      	subs	r3, r7, #1
 80157e0:	1159      	asrs	r1, r3, #5
 80157e2:	f003 021f 	and.w	r2, r3, #31
 80157e6:	f04f 0a01 	mov.w	sl, #1
 80157ea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80157ee:	fa0a f202 	lsl.w	r2, sl, r2
 80157f2:	420a      	tst	r2, r1
 80157f4:	d003      	beq.n	80157fe <__gethex+0x1c4>
 80157f6:	4553      	cmp	r3, sl
 80157f8:	dc46      	bgt.n	8015888 <__gethex+0x24e>
 80157fa:	f04f 0a02 	mov.w	sl, #2
 80157fe:	4639      	mov	r1, r7
 8015800:	4628      	mov	r0, r5
 8015802:	f7ff fecb 	bl	801559c <rshift>
 8015806:	443c      	add	r4, r7
 8015808:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801580c:	42a3      	cmp	r3, r4
 801580e:	da52      	bge.n	80158b6 <__gethex+0x27c>
 8015810:	4629      	mov	r1, r5
 8015812:	9802      	ldr	r0, [sp, #8]
 8015814:	f000 face 	bl	8015db4 <_Bfree>
 8015818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801581a:	2300      	movs	r3, #0
 801581c:	6013      	str	r3, [r2, #0]
 801581e:	27a3      	movs	r7, #163	; 0xa3
 8015820:	e793      	b.n	801574a <__gethex+0x110>
 8015822:	3101      	adds	r1, #1
 8015824:	105b      	asrs	r3, r3, #1
 8015826:	e7b0      	b.n	801578a <__gethex+0x150>
 8015828:	1e73      	subs	r3, r6, #1
 801582a:	9305      	str	r3, [sp, #20]
 801582c:	9a07      	ldr	r2, [sp, #28]
 801582e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015832:	4293      	cmp	r3, r2
 8015834:	d018      	beq.n	8015868 <__gethex+0x22e>
 8015836:	f1bb 0f20 	cmp.w	fp, #32
 801583a:	d107      	bne.n	801584c <__gethex+0x212>
 801583c:	9b04      	ldr	r3, [sp, #16]
 801583e:	f8c3 a000 	str.w	sl, [r3]
 8015842:	3304      	adds	r3, #4
 8015844:	f04f 0a00 	mov.w	sl, #0
 8015848:	9304      	str	r3, [sp, #16]
 801584a:	46d3      	mov	fp, sl
 801584c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015850:	f7ff fede 	bl	8015610 <__hexdig_fun>
 8015854:	f000 000f 	and.w	r0, r0, #15
 8015858:	fa00 f00b 	lsl.w	r0, r0, fp
 801585c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015860:	f10b 0b04 	add.w	fp, fp, #4
 8015864:	9b05      	ldr	r3, [sp, #20]
 8015866:	e00d      	b.n	8015884 <__gethex+0x24a>
 8015868:	9b05      	ldr	r3, [sp, #20]
 801586a:	9a08      	ldr	r2, [sp, #32]
 801586c:	4413      	add	r3, r2
 801586e:	42bb      	cmp	r3, r7
 8015870:	d3e1      	bcc.n	8015836 <__gethex+0x1fc>
 8015872:	4618      	mov	r0, r3
 8015874:	9a01      	ldr	r2, [sp, #4]
 8015876:	9903      	ldr	r1, [sp, #12]
 8015878:	9309      	str	r3, [sp, #36]	; 0x24
 801587a:	f001 fd05 	bl	8017288 <strncmp>
 801587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015880:	2800      	cmp	r0, #0
 8015882:	d1d8      	bne.n	8015836 <__gethex+0x1fc>
 8015884:	461e      	mov	r6, r3
 8015886:	e791      	b.n	80157ac <__gethex+0x172>
 8015888:	1eb9      	subs	r1, r7, #2
 801588a:	4628      	mov	r0, r5
 801588c:	f000 fe3c 	bl	8016508 <__any_on>
 8015890:	2800      	cmp	r0, #0
 8015892:	d0b2      	beq.n	80157fa <__gethex+0x1c0>
 8015894:	f04f 0a03 	mov.w	sl, #3
 8015898:	e7b1      	b.n	80157fe <__gethex+0x1c4>
 801589a:	da09      	bge.n	80158b0 <__gethex+0x276>
 801589c:	1bf7      	subs	r7, r6, r7
 801589e:	4629      	mov	r1, r5
 80158a0:	463a      	mov	r2, r7
 80158a2:	9802      	ldr	r0, [sp, #8]
 80158a4:	f000 fc52 	bl	801614c <__lshift>
 80158a8:	1be4      	subs	r4, r4, r7
 80158aa:	4605      	mov	r5, r0
 80158ac:	f100 0914 	add.w	r9, r0, #20
 80158b0:	f04f 0a00 	mov.w	sl, #0
 80158b4:	e7a8      	b.n	8015808 <__gethex+0x1ce>
 80158b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80158ba:	42a0      	cmp	r0, r4
 80158bc:	dd6a      	ble.n	8015994 <__gethex+0x35a>
 80158be:	1b04      	subs	r4, r0, r4
 80158c0:	42a6      	cmp	r6, r4
 80158c2:	dc2e      	bgt.n	8015922 <__gethex+0x2e8>
 80158c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80158c8:	2b02      	cmp	r3, #2
 80158ca:	d022      	beq.n	8015912 <__gethex+0x2d8>
 80158cc:	2b03      	cmp	r3, #3
 80158ce:	d024      	beq.n	801591a <__gethex+0x2e0>
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d115      	bne.n	8015900 <__gethex+0x2c6>
 80158d4:	42a6      	cmp	r6, r4
 80158d6:	d113      	bne.n	8015900 <__gethex+0x2c6>
 80158d8:	2e01      	cmp	r6, #1
 80158da:	dc0b      	bgt.n	80158f4 <__gethex+0x2ba>
 80158dc:	9a06      	ldr	r2, [sp, #24]
 80158de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80158e2:	6013      	str	r3, [r2, #0]
 80158e4:	2301      	movs	r3, #1
 80158e6:	612b      	str	r3, [r5, #16]
 80158e8:	f8c9 3000 	str.w	r3, [r9]
 80158ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158ee:	2762      	movs	r7, #98	; 0x62
 80158f0:	601d      	str	r5, [r3, #0]
 80158f2:	e72a      	b.n	801574a <__gethex+0x110>
 80158f4:	1e71      	subs	r1, r6, #1
 80158f6:	4628      	mov	r0, r5
 80158f8:	f000 fe06 	bl	8016508 <__any_on>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	d1ed      	bne.n	80158dc <__gethex+0x2a2>
 8015900:	4629      	mov	r1, r5
 8015902:	9802      	ldr	r0, [sp, #8]
 8015904:	f000 fa56 	bl	8015db4 <_Bfree>
 8015908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801590a:	2300      	movs	r3, #0
 801590c:	6013      	str	r3, [r2, #0]
 801590e:	2750      	movs	r7, #80	; 0x50
 8015910:	e71b      	b.n	801574a <__gethex+0x110>
 8015912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015914:	2b00      	cmp	r3, #0
 8015916:	d0e1      	beq.n	80158dc <__gethex+0x2a2>
 8015918:	e7f2      	b.n	8015900 <__gethex+0x2c6>
 801591a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801591c:	2b00      	cmp	r3, #0
 801591e:	d1dd      	bne.n	80158dc <__gethex+0x2a2>
 8015920:	e7ee      	b.n	8015900 <__gethex+0x2c6>
 8015922:	1e67      	subs	r7, r4, #1
 8015924:	f1ba 0f00 	cmp.w	sl, #0
 8015928:	d131      	bne.n	801598e <__gethex+0x354>
 801592a:	b127      	cbz	r7, 8015936 <__gethex+0x2fc>
 801592c:	4639      	mov	r1, r7
 801592e:	4628      	mov	r0, r5
 8015930:	f000 fdea 	bl	8016508 <__any_on>
 8015934:	4682      	mov	sl, r0
 8015936:	117a      	asrs	r2, r7, #5
 8015938:	2301      	movs	r3, #1
 801593a:	f007 071f 	and.w	r7, r7, #31
 801593e:	fa03 f707 	lsl.w	r7, r3, r7
 8015942:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015946:	4621      	mov	r1, r4
 8015948:	421f      	tst	r7, r3
 801594a:	4628      	mov	r0, r5
 801594c:	bf18      	it	ne
 801594e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015952:	1b36      	subs	r6, r6, r4
 8015954:	f7ff fe22 	bl	801559c <rshift>
 8015958:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801595c:	2702      	movs	r7, #2
 801595e:	f1ba 0f00 	cmp.w	sl, #0
 8015962:	d048      	beq.n	80159f6 <__gethex+0x3bc>
 8015964:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015968:	2b02      	cmp	r3, #2
 801596a:	d015      	beq.n	8015998 <__gethex+0x35e>
 801596c:	2b03      	cmp	r3, #3
 801596e:	d017      	beq.n	80159a0 <__gethex+0x366>
 8015970:	2b01      	cmp	r3, #1
 8015972:	d109      	bne.n	8015988 <__gethex+0x34e>
 8015974:	f01a 0f02 	tst.w	sl, #2
 8015978:	d006      	beq.n	8015988 <__gethex+0x34e>
 801597a:	f8d9 3000 	ldr.w	r3, [r9]
 801597e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015982:	f01a 0f01 	tst.w	sl, #1
 8015986:	d10e      	bne.n	80159a6 <__gethex+0x36c>
 8015988:	f047 0710 	orr.w	r7, r7, #16
 801598c:	e033      	b.n	80159f6 <__gethex+0x3bc>
 801598e:	f04f 0a01 	mov.w	sl, #1
 8015992:	e7d0      	b.n	8015936 <__gethex+0x2fc>
 8015994:	2701      	movs	r7, #1
 8015996:	e7e2      	b.n	801595e <__gethex+0x324>
 8015998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801599a:	f1c3 0301 	rsb	r3, r3, #1
 801599e:	9315      	str	r3, [sp, #84]	; 0x54
 80159a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d0f0      	beq.n	8015988 <__gethex+0x34e>
 80159a6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80159aa:	f105 0314 	add.w	r3, r5, #20
 80159ae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80159b2:	eb03 010a 	add.w	r1, r3, sl
 80159b6:	f04f 0c00 	mov.w	ip, #0
 80159ba:	4618      	mov	r0, r3
 80159bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80159c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80159c4:	d01c      	beq.n	8015a00 <__gethex+0x3c6>
 80159c6:	3201      	adds	r2, #1
 80159c8:	6002      	str	r2, [r0, #0]
 80159ca:	2f02      	cmp	r7, #2
 80159cc:	f105 0314 	add.w	r3, r5, #20
 80159d0:	d138      	bne.n	8015a44 <__gethex+0x40a>
 80159d2:	f8d8 2000 	ldr.w	r2, [r8]
 80159d6:	3a01      	subs	r2, #1
 80159d8:	42b2      	cmp	r2, r6
 80159da:	d10a      	bne.n	80159f2 <__gethex+0x3b8>
 80159dc:	1171      	asrs	r1, r6, #5
 80159de:	2201      	movs	r2, #1
 80159e0:	f006 061f 	and.w	r6, r6, #31
 80159e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80159e8:	fa02 f606 	lsl.w	r6, r2, r6
 80159ec:	421e      	tst	r6, r3
 80159ee:	bf18      	it	ne
 80159f0:	4617      	movne	r7, r2
 80159f2:	f047 0720 	orr.w	r7, r7, #32
 80159f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159f8:	601d      	str	r5, [r3, #0]
 80159fa:	9b06      	ldr	r3, [sp, #24]
 80159fc:	601c      	str	r4, [r3, #0]
 80159fe:	e6a4      	b.n	801574a <__gethex+0x110>
 8015a00:	4299      	cmp	r1, r3
 8015a02:	f843 cc04 	str.w	ip, [r3, #-4]
 8015a06:	d8d8      	bhi.n	80159ba <__gethex+0x380>
 8015a08:	68ab      	ldr	r3, [r5, #8]
 8015a0a:	4599      	cmp	r9, r3
 8015a0c:	db12      	blt.n	8015a34 <__gethex+0x3fa>
 8015a0e:	6869      	ldr	r1, [r5, #4]
 8015a10:	9802      	ldr	r0, [sp, #8]
 8015a12:	3101      	adds	r1, #1
 8015a14:	f000 f99a 	bl	8015d4c <_Balloc>
 8015a18:	692a      	ldr	r2, [r5, #16]
 8015a1a:	3202      	adds	r2, #2
 8015a1c:	f105 010c 	add.w	r1, r5, #12
 8015a20:	4683      	mov	fp, r0
 8015a22:	0092      	lsls	r2, r2, #2
 8015a24:	300c      	adds	r0, #12
 8015a26:	f7fc feab 	bl	8012780 <memcpy>
 8015a2a:	4629      	mov	r1, r5
 8015a2c:	9802      	ldr	r0, [sp, #8]
 8015a2e:	f000 f9c1 	bl	8015db4 <_Bfree>
 8015a32:	465d      	mov	r5, fp
 8015a34:	692b      	ldr	r3, [r5, #16]
 8015a36:	1c5a      	adds	r2, r3, #1
 8015a38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015a3c:	612a      	str	r2, [r5, #16]
 8015a3e:	2201      	movs	r2, #1
 8015a40:	615a      	str	r2, [r3, #20]
 8015a42:	e7c2      	b.n	80159ca <__gethex+0x390>
 8015a44:	692a      	ldr	r2, [r5, #16]
 8015a46:	454a      	cmp	r2, r9
 8015a48:	dd0b      	ble.n	8015a62 <__gethex+0x428>
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	f7ff fda5 	bl	801559c <rshift>
 8015a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a56:	3401      	adds	r4, #1
 8015a58:	42a3      	cmp	r3, r4
 8015a5a:	f6ff aed9 	blt.w	8015810 <__gethex+0x1d6>
 8015a5e:	2701      	movs	r7, #1
 8015a60:	e7c7      	b.n	80159f2 <__gethex+0x3b8>
 8015a62:	f016 061f 	ands.w	r6, r6, #31
 8015a66:	d0fa      	beq.n	8015a5e <__gethex+0x424>
 8015a68:	449a      	add	sl, r3
 8015a6a:	f1c6 0620 	rsb	r6, r6, #32
 8015a6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015a72:	f000 fa2f 	bl	8015ed4 <__hi0bits>
 8015a76:	42b0      	cmp	r0, r6
 8015a78:	dbe7      	blt.n	8015a4a <__gethex+0x410>
 8015a7a:	e7f0      	b.n	8015a5e <__gethex+0x424>

08015a7c <L_shift>:
 8015a7c:	f1c2 0208 	rsb	r2, r2, #8
 8015a80:	0092      	lsls	r2, r2, #2
 8015a82:	b570      	push	{r4, r5, r6, lr}
 8015a84:	f1c2 0620 	rsb	r6, r2, #32
 8015a88:	6843      	ldr	r3, [r0, #4]
 8015a8a:	6804      	ldr	r4, [r0, #0]
 8015a8c:	fa03 f506 	lsl.w	r5, r3, r6
 8015a90:	432c      	orrs	r4, r5
 8015a92:	40d3      	lsrs	r3, r2
 8015a94:	6004      	str	r4, [r0, #0]
 8015a96:	f840 3f04 	str.w	r3, [r0, #4]!
 8015a9a:	4288      	cmp	r0, r1
 8015a9c:	d3f4      	bcc.n	8015a88 <L_shift+0xc>
 8015a9e:	bd70      	pop	{r4, r5, r6, pc}

08015aa0 <__match>:
 8015aa0:	b530      	push	{r4, r5, lr}
 8015aa2:	6803      	ldr	r3, [r0, #0]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015aaa:	b914      	cbnz	r4, 8015ab2 <__match+0x12>
 8015aac:	6003      	str	r3, [r0, #0]
 8015aae:	2001      	movs	r0, #1
 8015ab0:	bd30      	pop	{r4, r5, pc}
 8015ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ab6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015aba:	2d19      	cmp	r5, #25
 8015abc:	bf98      	it	ls
 8015abe:	3220      	addls	r2, #32
 8015ac0:	42a2      	cmp	r2, r4
 8015ac2:	d0f0      	beq.n	8015aa6 <__match+0x6>
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	e7f3      	b.n	8015ab0 <__match+0x10>

08015ac8 <__hexnan>:
 8015ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015acc:	680b      	ldr	r3, [r1, #0]
 8015ace:	6801      	ldr	r1, [r0, #0]
 8015ad0:	115f      	asrs	r7, r3, #5
 8015ad2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015ad6:	f013 031f 	ands.w	r3, r3, #31
 8015ada:	b087      	sub	sp, #28
 8015adc:	bf18      	it	ne
 8015ade:	3704      	addne	r7, #4
 8015ae0:	2500      	movs	r5, #0
 8015ae2:	1f3e      	subs	r6, r7, #4
 8015ae4:	4682      	mov	sl, r0
 8015ae6:	4690      	mov	r8, r2
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	f847 5c04 	str.w	r5, [r7, #-4]
 8015aee:	46b1      	mov	r9, r6
 8015af0:	4634      	mov	r4, r6
 8015af2:	9502      	str	r5, [sp, #8]
 8015af4:	46ab      	mov	fp, r5
 8015af6:	784a      	ldrb	r2, [r1, #1]
 8015af8:	1c4b      	adds	r3, r1, #1
 8015afa:	9303      	str	r3, [sp, #12]
 8015afc:	b342      	cbz	r2, 8015b50 <__hexnan+0x88>
 8015afe:	4610      	mov	r0, r2
 8015b00:	9105      	str	r1, [sp, #20]
 8015b02:	9204      	str	r2, [sp, #16]
 8015b04:	f7ff fd84 	bl	8015610 <__hexdig_fun>
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	d143      	bne.n	8015b94 <__hexnan+0xcc>
 8015b0c:	9a04      	ldr	r2, [sp, #16]
 8015b0e:	9905      	ldr	r1, [sp, #20]
 8015b10:	2a20      	cmp	r2, #32
 8015b12:	d818      	bhi.n	8015b46 <__hexnan+0x7e>
 8015b14:	9b02      	ldr	r3, [sp, #8]
 8015b16:	459b      	cmp	fp, r3
 8015b18:	dd13      	ble.n	8015b42 <__hexnan+0x7a>
 8015b1a:	454c      	cmp	r4, r9
 8015b1c:	d206      	bcs.n	8015b2c <__hexnan+0x64>
 8015b1e:	2d07      	cmp	r5, #7
 8015b20:	dc04      	bgt.n	8015b2c <__hexnan+0x64>
 8015b22:	462a      	mov	r2, r5
 8015b24:	4649      	mov	r1, r9
 8015b26:	4620      	mov	r0, r4
 8015b28:	f7ff ffa8 	bl	8015a7c <L_shift>
 8015b2c:	4544      	cmp	r4, r8
 8015b2e:	d944      	bls.n	8015bba <__hexnan+0xf2>
 8015b30:	2300      	movs	r3, #0
 8015b32:	f1a4 0904 	sub.w	r9, r4, #4
 8015b36:	f844 3c04 	str.w	r3, [r4, #-4]
 8015b3a:	f8cd b008 	str.w	fp, [sp, #8]
 8015b3e:	464c      	mov	r4, r9
 8015b40:	461d      	mov	r5, r3
 8015b42:	9903      	ldr	r1, [sp, #12]
 8015b44:	e7d7      	b.n	8015af6 <__hexnan+0x2e>
 8015b46:	2a29      	cmp	r2, #41	; 0x29
 8015b48:	d14a      	bne.n	8015be0 <__hexnan+0x118>
 8015b4a:	3102      	adds	r1, #2
 8015b4c:	f8ca 1000 	str.w	r1, [sl]
 8015b50:	f1bb 0f00 	cmp.w	fp, #0
 8015b54:	d044      	beq.n	8015be0 <__hexnan+0x118>
 8015b56:	454c      	cmp	r4, r9
 8015b58:	d206      	bcs.n	8015b68 <__hexnan+0xa0>
 8015b5a:	2d07      	cmp	r5, #7
 8015b5c:	dc04      	bgt.n	8015b68 <__hexnan+0xa0>
 8015b5e:	462a      	mov	r2, r5
 8015b60:	4649      	mov	r1, r9
 8015b62:	4620      	mov	r0, r4
 8015b64:	f7ff ff8a 	bl	8015a7c <L_shift>
 8015b68:	4544      	cmp	r4, r8
 8015b6a:	d928      	bls.n	8015bbe <__hexnan+0xf6>
 8015b6c:	4643      	mov	r3, r8
 8015b6e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015b72:	f843 2b04 	str.w	r2, [r3], #4
 8015b76:	42a6      	cmp	r6, r4
 8015b78:	d2f9      	bcs.n	8015b6e <__hexnan+0xa6>
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	f843 2b04 	str.w	r2, [r3], #4
 8015b80:	429e      	cmp	r6, r3
 8015b82:	d2fb      	bcs.n	8015b7c <__hexnan+0xb4>
 8015b84:	6833      	ldr	r3, [r6, #0]
 8015b86:	b91b      	cbnz	r3, 8015b90 <__hexnan+0xc8>
 8015b88:	4546      	cmp	r6, r8
 8015b8a:	d127      	bne.n	8015bdc <__hexnan+0x114>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	6033      	str	r3, [r6, #0]
 8015b90:	2005      	movs	r0, #5
 8015b92:	e026      	b.n	8015be2 <__hexnan+0x11a>
 8015b94:	3501      	adds	r5, #1
 8015b96:	2d08      	cmp	r5, #8
 8015b98:	f10b 0b01 	add.w	fp, fp, #1
 8015b9c:	dd06      	ble.n	8015bac <__hexnan+0xe4>
 8015b9e:	4544      	cmp	r4, r8
 8015ba0:	d9cf      	bls.n	8015b42 <__hexnan+0x7a>
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ba8:	2501      	movs	r5, #1
 8015baa:	3c04      	subs	r4, #4
 8015bac:	6822      	ldr	r2, [r4, #0]
 8015bae:	f000 000f 	and.w	r0, r0, #15
 8015bb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015bb6:	6020      	str	r0, [r4, #0]
 8015bb8:	e7c3      	b.n	8015b42 <__hexnan+0x7a>
 8015bba:	2508      	movs	r5, #8
 8015bbc:	e7c1      	b.n	8015b42 <__hexnan+0x7a>
 8015bbe:	9b01      	ldr	r3, [sp, #4]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d0df      	beq.n	8015b84 <__hexnan+0xbc>
 8015bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8015bc8:	f1c3 0320 	rsb	r3, r3, #32
 8015bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8015bd0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015bd4:	401a      	ands	r2, r3
 8015bd6:	f847 2c04 	str.w	r2, [r7, #-4]
 8015bda:	e7d3      	b.n	8015b84 <__hexnan+0xbc>
 8015bdc:	3e04      	subs	r6, #4
 8015bde:	e7d1      	b.n	8015b84 <__hexnan+0xbc>
 8015be0:	2004      	movs	r0, #4
 8015be2:	b007      	add	sp, #28
 8015be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015be8 <__locale_ctype_ptr_l>:
 8015be8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015bec:	4770      	bx	lr
	...

08015bf0 <__locale_ctype_ptr>:
 8015bf0:	4b04      	ldr	r3, [pc, #16]	; (8015c04 <__locale_ctype_ptr+0x14>)
 8015bf2:	4a05      	ldr	r2, [pc, #20]	; (8015c08 <__locale_ctype_ptr+0x18>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	6a1b      	ldr	r3, [r3, #32]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	bf08      	it	eq
 8015bfc:	4613      	moveq	r3, r2
 8015bfe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015c02:	4770      	bx	lr
 8015c04:	2000000c 	.word	0x2000000c
 8015c08:	20000070 	.word	0x20000070

08015c0c <__localeconv_l>:
 8015c0c:	30f0      	adds	r0, #240	; 0xf0
 8015c0e:	4770      	bx	lr

08015c10 <_localeconv_r>:
 8015c10:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <_localeconv_r+0x14>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	6a18      	ldr	r0, [r3, #32]
 8015c16:	4b04      	ldr	r3, [pc, #16]	; (8015c28 <_localeconv_r+0x18>)
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	bf08      	it	eq
 8015c1c:	4618      	moveq	r0, r3
 8015c1e:	30f0      	adds	r0, #240	; 0xf0
 8015c20:	4770      	bx	lr
 8015c22:	bf00      	nop
 8015c24:	2000000c 	.word	0x2000000c
 8015c28:	20000070 	.word	0x20000070

08015c2c <_lseek_r>:
 8015c2c:	b538      	push	{r3, r4, r5, lr}
 8015c2e:	4c07      	ldr	r4, [pc, #28]	; (8015c4c <_lseek_r+0x20>)
 8015c30:	4605      	mov	r5, r0
 8015c32:	4608      	mov	r0, r1
 8015c34:	4611      	mov	r1, r2
 8015c36:	2200      	movs	r2, #0
 8015c38:	6022      	str	r2, [r4, #0]
 8015c3a:	461a      	mov	r2, r3
 8015c3c:	f7ef fc74 	bl	8005528 <_lseek>
 8015c40:	1c43      	adds	r3, r0, #1
 8015c42:	d102      	bne.n	8015c4a <_lseek_r+0x1e>
 8015c44:	6823      	ldr	r3, [r4, #0]
 8015c46:	b103      	cbz	r3, 8015c4a <_lseek_r+0x1e>
 8015c48:	602b      	str	r3, [r5, #0]
 8015c4a:	bd38      	pop	{r3, r4, r5, pc}
 8015c4c:	2003bcbc 	.word	0x2003bcbc

08015c50 <__swhatbuf_r>:
 8015c50:	b570      	push	{r4, r5, r6, lr}
 8015c52:	460e      	mov	r6, r1
 8015c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c58:	2900      	cmp	r1, #0
 8015c5a:	b096      	sub	sp, #88	; 0x58
 8015c5c:	4614      	mov	r4, r2
 8015c5e:	461d      	mov	r5, r3
 8015c60:	da07      	bge.n	8015c72 <__swhatbuf_r+0x22>
 8015c62:	2300      	movs	r3, #0
 8015c64:	602b      	str	r3, [r5, #0]
 8015c66:	89b3      	ldrh	r3, [r6, #12]
 8015c68:	061a      	lsls	r2, r3, #24
 8015c6a:	d410      	bmi.n	8015c8e <__swhatbuf_r+0x3e>
 8015c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c70:	e00e      	b.n	8015c90 <__swhatbuf_r+0x40>
 8015c72:	466a      	mov	r2, sp
 8015c74:	f001 fbee 	bl	8017454 <_fstat_r>
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	dbf2      	blt.n	8015c62 <__swhatbuf_r+0x12>
 8015c7c:	9a01      	ldr	r2, [sp, #4]
 8015c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015c86:	425a      	negs	r2, r3
 8015c88:	415a      	adcs	r2, r3
 8015c8a:	602a      	str	r2, [r5, #0]
 8015c8c:	e7ee      	b.n	8015c6c <__swhatbuf_r+0x1c>
 8015c8e:	2340      	movs	r3, #64	; 0x40
 8015c90:	2000      	movs	r0, #0
 8015c92:	6023      	str	r3, [r4, #0]
 8015c94:	b016      	add	sp, #88	; 0x58
 8015c96:	bd70      	pop	{r4, r5, r6, pc}

08015c98 <__smakebuf_r>:
 8015c98:	898b      	ldrh	r3, [r1, #12]
 8015c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c9c:	079d      	lsls	r5, r3, #30
 8015c9e:	4606      	mov	r6, r0
 8015ca0:	460c      	mov	r4, r1
 8015ca2:	d507      	bpl.n	8015cb4 <__smakebuf_r+0x1c>
 8015ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ca8:	6023      	str	r3, [r4, #0]
 8015caa:	6123      	str	r3, [r4, #16]
 8015cac:	2301      	movs	r3, #1
 8015cae:	6163      	str	r3, [r4, #20]
 8015cb0:	b002      	add	sp, #8
 8015cb2:	bd70      	pop	{r4, r5, r6, pc}
 8015cb4:	ab01      	add	r3, sp, #4
 8015cb6:	466a      	mov	r2, sp
 8015cb8:	f7ff ffca 	bl	8015c50 <__swhatbuf_r>
 8015cbc:	9900      	ldr	r1, [sp, #0]
 8015cbe:	4605      	mov	r5, r0
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f000 fc9f 	bl	8016604 <_malloc_r>
 8015cc6:	b948      	cbnz	r0, 8015cdc <__smakebuf_r+0x44>
 8015cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ccc:	059a      	lsls	r2, r3, #22
 8015cce:	d4ef      	bmi.n	8015cb0 <__smakebuf_r+0x18>
 8015cd0:	f023 0303 	bic.w	r3, r3, #3
 8015cd4:	f043 0302 	orr.w	r3, r3, #2
 8015cd8:	81a3      	strh	r3, [r4, #12]
 8015cda:	e7e3      	b.n	8015ca4 <__smakebuf_r+0xc>
 8015cdc:	4b0d      	ldr	r3, [pc, #52]	; (8015d14 <__smakebuf_r+0x7c>)
 8015cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ce0:	89a3      	ldrh	r3, [r4, #12]
 8015ce2:	6020      	str	r0, [r4, #0]
 8015ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ce8:	81a3      	strh	r3, [r4, #12]
 8015cea:	9b00      	ldr	r3, [sp, #0]
 8015cec:	6163      	str	r3, [r4, #20]
 8015cee:	9b01      	ldr	r3, [sp, #4]
 8015cf0:	6120      	str	r0, [r4, #16]
 8015cf2:	b15b      	cbz	r3, 8015d0c <__smakebuf_r+0x74>
 8015cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	f001 fbbd 	bl	8017478 <_isatty_r>
 8015cfe:	b128      	cbz	r0, 8015d0c <__smakebuf_r+0x74>
 8015d00:	89a3      	ldrh	r3, [r4, #12]
 8015d02:	f023 0303 	bic.w	r3, r3, #3
 8015d06:	f043 0301 	orr.w	r3, r3, #1
 8015d0a:	81a3      	strh	r3, [r4, #12]
 8015d0c:	89a3      	ldrh	r3, [r4, #12]
 8015d0e:	431d      	orrs	r5, r3
 8015d10:	81a5      	strh	r5, [r4, #12]
 8015d12:	e7cd      	b.n	8015cb0 <__smakebuf_r+0x18>
 8015d14:	08015451 	.word	0x08015451

08015d18 <malloc>:
 8015d18:	4b02      	ldr	r3, [pc, #8]	; (8015d24 <malloc+0xc>)
 8015d1a:	4601      	mov	r1, r0
 8015d1c:	6818      	ldr	r0, [r3, #0]
 8015d1e:	f000 bc71 	b.w	8016604 <_malloc_r>
 8015d22:	bf00      	nop
 8015d24:	2000000c 	.word	0x2000000c

08015d28 <__ascii_mbtowc>:
 8015d28:	b082      	sub	sp, #8
 8015d2a:	b901      	cbnz	r1, 8015d2e <__ascii_mbtowc+0x6>
 8015d2c:	a901      	add	r1, sp, #4
 8015d2e:	b142      	cbz	r2, 8015d42 <__ascii_mbtowc+0x1a>
 8015d30:	b14b      	cbz	r3, 8015d46 <__ascii_mbtowc+0x1e>
 8015d32:	7813      	ldrb	r3, [r2, #0]
 8015d34:	600b      	str	r3, [r1, #0]
 8015d36:	7812      	ldrb	r2, [r2, #0]
 8015d38:	1c10      	adds	r0, r2, #0
 8015d3a:	bf18      	it	ne
 8015d3c:	2001      	movne	r0, #1
 8015d3e:	b002      	add	sp, #8
 8015d40:	4770      	bx	lr
 8015d42:	4610      	mov	r0, r2
 8015d44:	e7fb      	b.n	8015d3e <__ascii_mbtowc+0x16>
 8015d46:	f06f 0001 	mvn.w	r0, #1
 8015d4a:	e7f8      	b.n	8015d3e <__ascii_mbtowc+0x16>

08015d4c <_Balloc>:
 8015d4c:	b570      	push	{r4, r5, r6, lr}
 8015d4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015d50:	4604      	mov	r4, r0
 8015d52:	460e      	mov	r6, r1
 8015d54:	b93d      	cbnz	r5, 8015d66 <_Balloc+0x1a>
 8015d56:	2010      	movs	r0, #16
 8015d58:	f7ff ffde 	bl	8015d18 <malloc>
 8015d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8015d5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015d62:	6005      	str	r5, [r0, #0]
 8015d64:	60c5      	str	r5, [r0, #12]
 8015d66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015d68:	68eb      	ldr	r3, [r5, #12]
 8015d6a:	b183      	cbz	r3, 8015d8e <_Balloc+0x42>
 8015d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d6e:	68db      	ldr	r3, [r3, #12]
 8015d70:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015d74:	b9b8      	cbnz	r0, 8015da6 <_Balloc+0x5a>
 8015d76:	2101      	movs	r1, #1
 8015d78:	fa01 f506 	lsl.w	r5, r1, r6
 8015d7c:	1d6a      	adds	r2, r5, #5
 8015d7e:	0092      	lsls	r2, r2, #2
 8015d80:	4620      	mov	r0, r4
 8015d82:	f000 fbe2 	bl	801654a <_calloc_r>
 8015d86:	b160      	cbz	r0, 8015da2 <_Balloc+0x56>
 8015d88:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015d8c:	e00e      	b.n	8015dac <_Balloc+0x60>
 8015d8e:	2221      	movs	r2, #33	; 0x21
 8015d90:	2104      	movs	r1, #4
 8015d92:	4620      	mov	r0, r4
 8015d94:	f000 fbd9 	bl	801654a <_calloc_r>
 8015d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d9a:	60e8      	str	r0, [r5, #12]
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1e4      	bne.n	8015d6c <_Balloc+0x20>
 8015da2:	2000      	movs	r0, #0
 8015da4:	bd70      	pop	{r4, r5, r6, pc}
 8015da6:	6802      	ldr	r2, [r0, #0]
 8015da8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015dac:	2300      	movs	r3, #0
 8015dae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015db2:	e7f7      	b.n	8015da4 <_Balloc+0x58>

08015db4 <_Bfree>:
 8015db4:	b570      	push	{r4, r5, r6, lr}
 8015db6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015db8:	4606      	mov	r6, r0
 8015dba:	460d      	mov	r5, r1
 8015dbc:	b93c      	cbnz	r4, 8015dce <_Bfree+0x1a>
 8015dbe:	2010      	movs	r0, #16
 8015dc0:	f7ff ffaa 	bl	8015d18 <malloc>
 8015dc4:	6270      	str	r0, [r6, #36]	; 0x24
 8015dc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015dca:	6004      	str	r4, [r0, #0]
 8015dcc:	60c4      	str	r4, [r0, #12]
 8015dce:	b13d      	cbz	r5, 8015de0 <_Bfree+0x2c>
 8015dd0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015dd2:	686a      	ldr	r2, [r5, #4]
 8015dd4:	68db      	ldr	r3, [r3, #12]
 8015dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015dda:	6029      	str	r1, [r5, #0]
 8015ddc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015de0:	bd70      	pop	{r4, r5, r6, pc}

08015de2 <__multadd>:
 8015de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015de6:	690d      	ldr	r5, [r1, #16]
 8015de8:	461f      	mov	r7, r3
 8015dea:	4606      	mov	r6, r0
 8015dec:	460c      	mov	r4, r1
 8015dee:	f101 0c14 	add.w	ip, r1, #20
 8015df2:	2300      	movs	r3, #0
 8015df4:	f8dc 0000 	ldr.w	r0, [ip]
 8015df8:	b281      	uxth	r1, r0
 8015dfa:	fb02 7101 	mla	r1, r2, r1, r7
 8015dfe:	0c0f      	lsrs	r7, r1, #16
 8015e00:	0c00      	lsrs	r0, r0, #16
 8015e02:	fb02 7000 	mla	r0, r2, r0, r7
 8015e06:	b289      	uxth	r1, r1
 8015e08:	3301      	adds	r3, #1
 8015e0a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015e0e:	429d      	cmp	r5, r3
 8015e10:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015e14:	f84c 1b04 	str.w	r1, [ip], #4
 8015e18:	dcec      	bgt.n	8015df4 <__multadd+0x12>
 8015e1a:	b1d7      	cbz	r7, 8015e52 <__multadd+0x70>
 8015e1c:	68a3      	ldr	r3, [r4, #8]
 8015e1e:	42ab      	cmp	r3, r5
 8015e20:	dc12      	bgt.n	8015e48 <__multadd+0x66>
 8015e22:	6861      	ldr	r1, [r4, #4]
 8015e24:	4630      	mov	r0, r6
 8015e26:	3101      	adds	r1, #1
 8015e28:	f7ff ff90 	bl	8015d4c <_Balloc>
 8015e2c:	6922      	ldr	r2, [r4, #16]
 8015e2e:	3202      	adds	r2, #2
 8015e30:	f104 010c 	add.w	r1, r4, #12
 8015e34:	4680      	mov	r8, r0
 8015e36:	0092      	lsls	r2, r2, #2
 8015e38:	300c      	adds	r0, #12
 8015e3a:	f7fc fca1 	bl	8012780 <memcpy>
 8015e3e:	4621      	mov	r1, r4
 8015e40:	4630      	mov	r0, r6
 8015e42:	f7ff ffb7 	bl	8015db4 <_Bfree>
 8015e46:	4644      	mov	r4, r8
 8015e48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015e4c:	3501      	adds	r5, #1
 8015e4e:	615f      	str	r7, [r3, #20]
 8015e50:	6125      	str	r5, [r4, #16]
 8015e52:	4620      	mov	r0, r4
 8015e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e58 <__s2b>:
 8015e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	4615      	mov	r5, r2
 8015e60:	461f      	mov	r7, r3
 8015e62:	2209      	movs	r2, #9
 8015e64:	3308      	adds	r3, #8
 8015e66:	4606      	mov	r6, r0
 8015e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	2201      	movs	r2, #1
 8015e70:	429a      	cmp	r2, r3
 8015e72:	db20      	blt.n	8015eb6 <__s2b+0x5e>
 8015e74:	4630      	mov	r0, r6
 8015e76:	f7ff ff69 	bl	8015d4c <_Balloc>
 8015e7a:	9b08      	ldr	r3, [sp, #32]
 8015e7c:	6143      	str	r3, [r0, #20]
 8015e7e:	2d09      	cmp	r5, #9
 8015e80:	f04f 0301 	mov.w	r3, #1
 8015e84:	6103      	str	r3, [r0, #16]
 8015e86:	dd19      	ble.n	8015ebc <__s2b+0x64>
 8015e88:	f104 0809 	add.w	r8, r4, #9
 8015e8c:	46c1      	mov	r9, r8
 8015e8e:	442c      	add	r4, r5
 8015e90:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015e94:	4601      	mov	r1, r0
 8015e96:	3b30      	subs	r3, #48	; 0x30
 8015e98:	220a      	movs	r2, #10
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	f7ff ffa1 	bl	8015de2 <__multadd>
 8015ea0:	45a1      	cmp	r9, r4
 8015ea2:	d1f5      	bne.n	8015e90 <__s2b+0x38>
 8015ea4:	eb08 0405 	add.w	r4, r8, r5
 8015ea8:	3c08      	subs	r4, #8
 8015eaa:	1b2d      	subs	r5, r5, r4
 8015eac:	1963      	adds	r3, r4, r5
 8015eae:	42bb      	cmp	r3, r7
 8015eb0:	db07      	blt.n	8015ec2 <__s2b+0x6a>
 8015eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eb6:	0052      	lsls	r2, r2, #1
 8015eb8:	3101      	adds	r1, #1
 8015eba:	e7d9      	b.n	8015e70 <__s2b+0x18>
 8015ebc:	340a      	adds	r4, #10
 8015ebe:	2509      	movs	r5, #9
 8015ec0:	e7f3      	b.n	8015eaa <__s2b+0x52>
 8015ec2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ec6:	4601      	mov	r1, r0
 8015ec8:	3b30      	subs	r3, #48	; 0x30
 8015eca:	220a      	movs	r2, #10
 8015ecc:	4630      	mov	r0, r6
 8015ece:	f7ff ff88 	bl	8015de2 <__multadd>
 8015ed2:	e7eb      	b.n	8015eac <__s2b+0x54>

08015ed4 <__hi0bits>:
 8015ed4:	0c02      	lsrs	r2, r0, #16
 8015ed6:	0412      	lsls	r2, r2, #16
 8015ed8:	4603      	mov	r3, r0
 8015eda:	b9b2      	cbnz	r2, 8015f0a <__hi0bits+0x36>
 8015edc:	0403      	lsls	r3, r0, #16
 8015ede:	2010      	movs	r0, #16
 8015ee0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015ee4:	bf04      	itt	eq
 8015ee6:	021b      	lsleq	r3, r3, #8
 8015ee8:	3008      	addeq	r0, #8
 8015eea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015eee:	bf04      	itt	eq
 8015ef0:	011b      	lsleq	r3, r3, #4
 8015ef2:	3004      	addeq	r0, #4
 8015ef4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015ef8:	bf04      	itt	eq
 8015efa:	009b      	lsleq	r3, r3, #2
 8015efc:	3002      	addeq	r0, #2
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	db06      	blt.n	8015f10 <__hi0bits+0x3c>
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	d503      	bpl.n	8015f0e <__hi0bits+0x3a>
 8015f06:	3001      	adds	r0, #1
 8015f08:	4770      	bx	lr
 8015f0a:	2000      	movs	r0, #0
 8015f0c:	e7e8      	b.n	8015ee0 <__hi0bits+0xc>
 8015f0e:	2020      	movs	r0, #32
 8015f10:	4770      	bx	lr

08015f12 <__lo0bits>:
 8015f12:	6803      	ldr	r3, [r0, #0]
 8015f14:	f013 0207 	ands.w	r2, r3, #7
 8015f18:	4601      	mov	r1, r0
 8015f1a:	d00b      	beq.n	8015f34 <__lo0bits+0x22>
 8015f1c:	07da      	lsls	r2, r3, #31
 8015f1e:	d423      	bmi.n	8015f68 <__lo0bits+0x56>
 8015f20:	0798      	lsls	r0, r3, #30
 8015f22:	bf49      	itett	mi
 8015f24:	085b      	lsrmi	r3, r3, #1
 8015f26:	089b      	lsrpl	r3, r3, #2
 8015f28:	2001      	movmi	r0, #1
 8015f2a:	600b      	strmi	r3, [r1, #0]
 8015f2c:	bf5c      	itt	pl
 8015f2e:	600b      	strpl	r3, [r1, #0]
 8015f30:	2002      	movpl	r0, #2
 8015f32:	4770      	bx	lr
 8015f34:	b298      	uxth	r0, r3
 8015f36:	b9a8      	cbnz	r0, 8015f64 <__lo0bits+0x52>
 8015f38:	0c1b      	lsrs	r3, r3, #16
 8015f3a:	2010      	movs	r0, #16
 8015f3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015f40:	bf04      	itt	eq
 8015f42:	0a1b      	lsreq	r3, r3, #8
 8015f44:	3008      	addeq	r0, #8
 8015f46:	071a      	lsls	r2, r3, #28
 8015f48:	bf04      	itt	eq
 8015f4a:	091b      	lsreq	r3, r3, #4
 8015f4c:	3004      	addeq	r0, #4
 8015f4e:	079a      	lsls	r2, r3, #30
 8015f50:	bf04      	itt	eq
 8015f52:	089b      	lsreq	r3, r3, #2
 8015f54:	3002      	addeq	r0, #2
 8015f56:	07da      	lsls	r2, r3, #31
 8015f58:	d402      	bmi.n	8015f60 <__lo0bits+0x4e>
 8015f5a:	085b      	lsrs	r3, r3, #1
 8015f5c:	d006      	beq.n	8015f6c <__lo0bits+0x5a>
 8015f5e:	3001      	adds	r0, #1
 8015f60:	600b      	str	r3, [r1, #0]
 8015f62:	4770      	bx	lr
 8015f64:	4610      	mov	r0, r2
 8015f66:	e7e9      	b.n	8015f3c <__lo0bits+0x2a>
 8015f68:	2000      	movs	r0, #0
 8015f6a:	4770      	bx	lr
 8015f6c:	2020      	movs	r0, #32
 8015f6e:	4770      	bx	lr

08015f70 <__i2b>:
 8015f70:	b510      	push	{r4, lr}
 8015f72:	460c      	mov	r4, r1
 8015f74:	2101      	movs	r1, #1
 8015f76:	f7ff fee9 	bl	8015d4c <_Balloc>
 8015f7a:	2201      	movs	r2, #1
 8015f7c:	6144      	str	r4, [r0, #20]
 8015f7e:	6102      	str	r2, [r0, #16]
 8015f80:	bd10      	pop	{r4, pc}

08015f82 <__multiply>:
 8015f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f86:	4614      	mov	r4, r2
 8015f88:	690a      	ldr	r2, [r1, #16]
 8015f8a:	6923      	ldr	r3, [r4, #16]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	bfb8      	it	lt
 8015f90:	460b      	movlt	r3, r1
 8015f92:	4688      	mov	r8, r1
 8015f94:	bfbc      	itt	lt
 8015f96:	46a0      	movlt	r8, r4
 8015f98:	461c      	movlt	r4, r3
 8015f9a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015f9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015fa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015fa6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015faa:	eb07 0609 	add.w	r6, r7, r9
 8015fae:	42b3      	cmp	r3, r6
 8015fb0:	bfb8      	it	lt
 8015fb2:	3101      	addlt	r1, #1
 8015fb4:	f7ff feca 	bl	8015d4c <_Balloc>
 8015fb8:	f100 0514 	add.w	r5, r0, #20
 8015fbc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015fc0:	462b      	mov	r3, r5
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	4573      	cmp	r3, lr
 8015fc6:	d316      	bcc.n	8015ff6 <__multiply+0x74>
 8015fc8:	f104 0214 	add.w	r2, r4, #20
 8015fcc:	f108 0114 	add.w	r1, r8, #20
 8015fd0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015fd4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015fd8:	9300      	str	r3, [sp, #0]
 8015fda:	9b00      	ldr	r3, [sp, #0]
 8015fdc:	9201      	str	r2, [sp, #4]
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d80c      	bhi.n	8015ffc <__multiply+0x7a>
 8015fe2:	2e00      	cmp	r6, #0
 8015fe4:	dd03      	ble.n	8015fee <__multiply+0x6c>
 8015fe6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d05d      	beq.n	80160aa <__multiply+0x128>
 8015fee:	6106      	str	r6, [r0, #16]
 8015ff0:	b003      	add	sp, #12
 8015ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff6:	f843 2b04 	str.w	r2, [r3], #4
 8015ffa:	e7e3      	b.n	8015fc4 <__multiply+0x42>
 8015ffc:	f8b2 b000 	ldrh.w	fp, [r2]
 8016000:	f1bb 0f00 	cmp.w	fp, #0
 8016004:	d023      	beq.n	801604e <__multiply+0xcc>
 8016006:	4689      	mov	r9, r1
 8016008:	46ac      	mov	ip, r5
 801600a:	f04f 0800 	mov.w	r8, #0
 801600e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016012:	f8dc a000 	ldr.w	sl, [ip]
 8016016:	b2a3      	uxth	r3, r4
 8016018:	fa1f fa8a 	uxth.w	sl, sl
 801601c:	fb0b a303 	mla	r3, fp, r3, sl
 8016020:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016024:	f8dc 4000 	ldr.w	r4, [ip]
 8016028:	4443      	add	r3, r8
 801602a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801602e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016032:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016036:	46e2      	mov	sl, ip
 8016038:	b29b      	uxth	r3, r3
 801603a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801603e:	454f      	cmp	r7, r9
 8016040:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016044:	f84a 3b04 	str.w	r3, [sl], #4
 8016048:	d82b      	bhi.n	80160a2 <__multiply+0x120>
 801604a:	f8cc 8004 	str.w	r8, [ip, #4]
 801604e:	9b01      	ldr	r3, [sp, #4]
 8016050:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016054:	3204      	adds	r2, #4
 8016056:	f1ba 0f00 	cmp.w	sl, #0
 801605a:	d020      	beq.n	801609e <__multiply+0x11c>
 801605c:	682b      	ldr	r3, [r5, #0]
 801605e:	4689      	mov	r9, r1
 8016060:	46a8      	mov	r8, r5
 8016062:	f04f 0b00 	mov.w	fp, #0
 8016066:	f8b9 c000 	ldrh.w	ip, [r9]
 801606a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801606e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016072:	445c      	add	r4, fp
 8016074:	46c4      	mov	ip, r8
 8016076:	b29b      	uxth	r3, r3
 8016078:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801607c:	f84c 3b04 	str.w	r3, [ip], #4
 8016080:	f859 3b04 	ldr.w	r3, [r9], #4
 8016084:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016088:	0c1b      	lsrs	r3, r3, #16
 801608a:	fb0a b303 	mla	r3, sl, r3, fp
 801608e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016092:	454f      	cmp	r7, r9
 8016094:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016098:	d805      	bhi.n	80160a6 <__multiply+0x124>
 801609a:	f8c8 3004 	str.w	r3, [r8, #4]
 801609e:	3504      	adds	r5, #4
 80160a0:	e79b      	b.n	8015fda <__multiply+0x58>
 80160a2:	46d4      	mov	ip, sl
 80160a4:	e7b3      	b.n	801600e <__multiply+0x8c>
 80160a6:	46e0      	mov	r8, ip
 80160a8:	e7dd      	b.n	8016066 <__multiply+0xe4>
 80160aa:	3e01      	subs	r6, #1
 80160ac:	e799      	b.n	8015fe2 <__multiply+0x60>
	...

080160b0 <__pow5mult>:
 80160b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160b4:	4615      	mov	r5, r2
 80160b6:	f012 0203 	ands.w	r2, r2, #3
 80160ba:	4606      	mov	r6, r0
 80160bc:	460f      	mov	r7, r1
 80160be:	d007      	beq.n	80160d0 <__pow5mult+0x20>
 80160c0:	3a01      	subs	r2, #1
 80160c2:	4c21      	ldr	r4, [pc, #132]	; (8016148 <__pow5mult+0x98>)
 80160c4:	2300      	movs	r3, #0
 80160c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160ca:	f7ff fe8a 	bl	8015de2 <__multadd>
 80160ce:	4607      	mov	r7, r0
 80160d0:	10ad      	asrs	r5, r5, #2
 80160d2:	d035      	beq.n	8016140 <__pow5mult+0x90>
 80160d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80160d6:	b93c      	cbnz	r4, 80160e8 <__pow5mult+0x38>
 80160d8:	2010      	movs	r0, #16
 80160da:	f7ff fe1d 	bl	8015d18 <malloc>
 80160de:	6270      	str	r0, [r6, #36]	; 0x24
 80160e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80160e4:	6004      	str	r4, [r0, #0]
 80160e6:	60c4      	str	r4, [r0, #12]
 80160e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80160ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80160f0:	b94c      	cbnz	r4, 8016106 <__pow5mult+0x56>
 80160f2:	f240 2171 	movw	r1, #625	; 0x271
 80160f6:	4630      	mov	r0, r6
 80160f8:	f7ff ff3a 	bl	8015f70 <__i2b>
 80160fc:	2300      	movs	r3, #0
 80160fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8016102:	4604      	mov	r4, r0
 8016104:	6003      	str	r3, [r0, #0]
 8016106:	f04f 0800 	mov.w	r8, #0
 801610a:	07eb      	lsls	r3, r5, #31
 801610c:	d50a      	bpl.n	8016124 <__pow5mult+0x74>
 801610e:	4639      	mov	r1, r7
 8016110:	4622      	mov	r2, r4
 8016112:	4630      	mov	r0, r6
 8016114:	f7ff ff35 	bl	8015f82 <__multiply>
 8016118:	4639      	mov	r1, r7
 801611a:	4681      	mov	r9, r0
 801611c:	4630      	mov	r0, r6
 801611e:	f7ff fe49 	bl	8015db4 <_Bfree>
 8016122:	464f      	mov	r7, r9
 8016124:	106d      	asrs	r5, r5, #1
 8016126:	d00b      	beq.n	8016140 <__pow5mult+0x90>
 8016128:	6820      	ldr	r0, [r4, #0]
 801612a:	b938      	cbnz	r0, 801613c <__pow5mult+0x8c>
 801612c:	4622      	mov	r2, r4
 801612e:	4621      	mov	r1, r4
 8016130:	4630      	mov	r0, r6
 8016132:	f7ff ff26 	bl	8015f82 <__multiply>
 8016136:	6020      	str	r0, [r4, #0]
 8016138:	f8c0 8000 	str.w	r8, [r0]
 801613c:	4604      	mov	r4, r0
 801613e:	e7e4      	b.n	801610a <__pow5mult+0x5a>
 8016140:	4638      	mov	r0, r7
 8016142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016146:	bf00      	nop
 8016148:	08017d40 	.word	0x08017d40

0801614c <__lshift>:
 801614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016150:	460c      	mov	r4, r1
 8016152:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016156:	6923      	ldr	r3, [r4, #16]
 8016158:	6849      	ldr	r1, [r1, #4]
 801615a:	eb0a 0903 	add.w	r9, sl, r3
 801615e:	68a3      	ldr	r3, [r4, #8]
 8016160:	4607      	mov	r7, r0
 8016162:	4616      	mov	r6, r2
 8016164:	f109 0501 	add.w	r5, r9, #1
 8016168:	42ab      	cmp	r3, r5
 801616a:	db32      	blt.n	80161d2 <__lshift+0x86>
 801616c:	4638      	mov	r0, r7
 801616e:	f7ff fded 	bl	8015d4c <_Balloc>
 8016172:	2300      	movs	r3, #0
 8016174:	4680      	mov	r8, r0
 8016176:	f100 0114 	add.w	r1, r0, #20
 801617a:	461a      	mov	r2, r3
 801617c:	4553      	cmp	r3, sl
 801617e:	db2b      	blt.n	80161d8 <__lshift+0x8c>
 8016180:	6920      	ldr	r0, [r4, #16]
 8016182:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016186:	f104 0314 	add.w	r3, r4, #20
 801618a:	f016 021f 	ands.w	r2, r6, #31
 801618e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016192:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016196:	d025      	beq.n	80161e4 <__lshift+0x98>
 8016198:	f1c2 0e20 	rsb	lr, r2, #32
 801619c:	2000      	movs	r0, #0
 801619e:	681e      	ldr	r6, [r3, #0]
 80161a0:	468a      	mov	sl, r1
 80161a2:	4096      	lsls	r6, r2
 80161a4:	4330      	orrs	r0, r6
 80161a6:	f84a 0b04 	str.w	r0, [sl], #4
 80161aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80161ae:	459c      	cmp	ip, r3
 80161b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80161b4:	d814      	bhi.n	80161e0 <__lshift+0x94>
 80161b6:	6048      	str	r0, [r1, #4]
 80161b8:	b108      	cbz	r0, 80161be <__lshift+0x72>
 80161ba:	f109 0502 	add.w	r5, r9, #2
 80161be:	3d01      	subs	r5, #1
 80161c0:	4638      	mov	r0, r7
 80161c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80161c6:	4621      	mov	r1, r4
 80161c8:	f7ff fdf4 	bl	8015db4 <_Bfree>
 80161cc:	4640      	mov	r0, r8
 80161ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161d2:	3101      	adds	r1, #1
 80161d4:	005b      	lsls	r3, r3, #1
 80161d6:	e7c7      	b.n	8016168 <__lshift+0x1c>
 80161d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80161dc:	3301      	adds	r3, #1
 80161de:	e7cd      	b.n	801617c <__lshift+0x30>
 80161e0:	4651      	mov	r1, sl
 80161e2:	e7dc      	b.n	801619e <__lshift+0x52>
 80161e4:	3904      	subs	r1, #4
 80161e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80161ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80161ee:	459c      	cmp	ip, r3
 80161f0:	d8f9      	bhi.n	80161e6 <__lshift+0x9a>
 80161f2:	e7e4      	b.n	80161be <__lshift+0x72>

080161f4 <__mcmp>:
 80161f4:	6903      	ldr	r3, [r0, #16]
 80161f6:	690a      	ldr	r2, [r1, #16]
 80161f8:	1a9b      	subs	r3, r3, r2
 80161fa:	b530      	push	{r4, r5, lr}
 80161fc:	d10c      	bne.n	8016218 <__mcmp+0x24>
 80161fe:	0092      	lsls	r2, r2, #2
 8016200:	3014      	adds	r0, #20
 8016202:	3114      	adds	r1, #20
 8016204:	1884      	adds	r4, r0, r2
 8016206:	4411      	add	r1, r2
 8016208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801620c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016210:	4295      	cmp	r5, r2
 8016212:	d003      	beq.n	801621c <__mcmp+0x28>
 8016214:	d305      	bcc.n	8016222 <__mcmp+0x2e>
 8016216:	2301      	movs	r3, #1
 8016218:	4618      	mov	r0, r3
 801621a:	bd30      	pop	{r4, r5, pc}
 801621c:	42a0      	cmp	r0, r4
 801621e:	d3f3      	bcc.n	8016208 <__mcmp+0x14>
 8016220:	e7fa      	b.n	8016218 <__mcmp+0x24>
 8016222:	f04f 33ff 	mov.w	r3, #4294967295
 8016226:	e7f7      	b.n	8016218 <__mcmp+0x24>

08016228 <__mdiff>:
 8016228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801622c:	460d      	mov	r5, r1
 801622e:	4607      	mov	r7, r0
 8016230:	4611      	mov	r1, r2
 8016232:	4628      	mov	r0, r5
 8016234:	4614      	mov	r4, r2
 8016236:	f7ff ffdd 	bl	80161f4 <__mcmp>
 801623a:	1e06      	subs	r6, r0, #0
 801623c:	d108      	bne.n	8016250 <__mdiff+0x28>
 801623e:	4631      	mov	r1, r6
 8016240:	4638      	mov	r0, r7
 8016242:	f7ff fd83 	bl	8015d4c <_Balloc>
 8016246:	2301      	movs	r3, #1
 8016248:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016250:	bfa4      	itt	ge
 8016252:	4623      	movge	r3, r4
 8016254:	462c      	movge	r4, r5
 8016256:	4638      	mov	r0, r7
 8016258:	6861      	ldr	r1, [r4, #4]
 801625a:	bfa6      	itte	ge
 801625c:	461d      	movge	r5, r3
 801625e:	2600      	movge	r6, #0
 8016260:	2601      	movlt	r6, #1
 8016262:	f7ff fd73 	bl	8015d4c <_Balloc>
 8016266:	692b      	ldr	r3, [r5, #16]
 8016268:	60c6      	str	r6, [r0, #12]
 801626a:	6926      	ldr	r6, [r4, #16]
 801626c:	f105 0914 	add.w	r9, r5, #20
 8016270:	f104 0214 	add.w	r2, r4, #20
 8016274:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016278:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801627c:	f100 0514 	add.w	r5, r0, #20
 8016280:	f04f 0e00 	mov.w	lr, #0
 8016284:	f852 ab04 	ldr.w	sl, [r2], #4
 8016288:	f859 4b04 	ldr.w	r4, [r9], #4
 801628c:	fa1e f18a 	uxtah	r1, lr, sl
 8016290:	b2a3      	uxth	r3, r4
 8016292:	1ac9      	subs	r1, r1, r3
 8016294:	0c23      	lsrs	r3, r4, #16
 8016296:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801629a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801629e:	b289      	uxth	r1, r1
 80162a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80162a4:	45c8      	cmp	r8, r9
 80162a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80162aa:	4694      	mov	ip, r2
 80162ac:	f845 3b04 	str.w	r3, [r5], #4
 80162b0:	d8e8      	bhi.n	8016284 <__mdiff+0x5c>
 80162b2:	45bc      	cmp	ip, r7
 80162b4:	d304      	bcc.n	80162c0 <__mdiff+0x98>
 80162b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80162ba:	b183      	cbz	r3, 80162de <__mdiff+0xb6>
 80162bc:	6106      	str	r6, [r0, #16]
 80162be:	e7c5      	b.n	801624c <__mdiff+0x24>
 80162c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80162c4:	fa1e f381 	uxtah	r3, lr, r1
 80162c8:	141a      	asrs	r2, r3, #16
 80162ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80162d8:	f845 3b04 	str.w	r3, [r5], #4
 80162dc:	e7e9      	b.n	80162b2 <__mdiff+0x8a>
 80162de:	3e01      	subs	r6, #1
 80162e0:	e7e9      	b.n	80162b6 <__mdiff+0x8e>
	...

080162e4 <__ulp>:
 80162e4:	4b12      	ldr	r3, [pc, #72]	; (8016330 <__ulp+0x4c>)
 80162e6:	ee10 2a90 	vmov	r2, s1
 80162ea:	401a      	ands	r2, r3
 80162ec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	dd04      	ble.n	80162fe <__ulp+0x1a>
 80162f4:	2000      	movs	r0, #0
 80162f6:	4619      	mov	r1, r3
 80162f8:	ec41 0b10 	vmov	d0, r0, r1
 80162fc:	4770      	bx	lr
 80162fe:	425b      	negs	r3, r3
 8016300:	151b      	asrs	r3, r3, #20
 8016302:	2b13      	cmp	r3, #19
 8016304:	f04f 0000 	mov.w	r0, #0
 8016308:	f04f 0100 	mov.w	r1, #0
 801630c:	dc04      	bgt.n	8016318 <__ulp+0x34>
 801630e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016312:	fa42 f103 	asr.w	r1, r2, r3
 8016316:	e7ef      	b.n	80162f8 <__ulp+0x14>
 8016318:	3b14      	subs	r3, #20
 801631a:	2b1e      	cmp	r3, #30
 801631c:	f04f 0201 	mov.w	r2, #1
 8016320:	bfda      	itte	le
 8016322:	f1c3 031f 	rsble	r3, r3, #31
 8016326:	fa02 f303 	lslle.w	r3, r2, r3
 801632a:	4613      	movgt	r3, r2
 801632c:	4618      	mov	r0, r3
 801632e:	e7e3      	b.n	80162f8 <__ulp+0x14>
 8016330:	7ff00000 	.word	0x7ff00000

08016334 <__b2d>:
 8016334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016336:	6905      	ldr	r5, [r0, #16]
 8016338:	f100 0714 	add.w	r7, r0, #20
 801633c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016340:	1f2e      	subs	r6, r5, #4
 8016342:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016346:	4620      	mov	r0, r4
 8016348:	f7ff fdc4 	bl	8015ed4 <__hi0bits>
 801634c:	f1c0 0320 	rsb	r3, r0, #32
 8016350:	280a      	cmp	r0, #10
 8016352:	600b      	str	r3, [r1, #0]
 8016354:	f8df c074 	ldr.w	ip, [pc, #116]	; 80163cc <__b2d+0x98>
 8016358:	dc14      	bgt.n	8016384 <__b2d+0x50>
 801635a:	f1c0 0e0b 	rsb	lr, r0, #11
 801635e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016362:	42b7      	cmp	r7, r6
 8016364:	ea41 030c 	orr.w	r3, r1, ip
 8016368:	bf34      	ite	cc
 801636a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801636e:	2100      	movcs	r1, #0
 8016370:	3015      	adds	r0, #21
 8016372:	fa04 f000 	lsl.w	r0, r4, r0
 8016376:	fa21 f10e 	lsr.w	r1, r1, lr
 801637a:	ea40 0201 	orr.w	r2, r0, r1
 801637e:	ec43 2b10 	vmov	d0, r2, r3
 8016382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016384:	42b7      	cmp	r7, r6
 8016386:	bf3a      	itte	cc
 8016388:	f1a5 0608 	subcc.w	r6, r5, #8
 801638c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016390:	2100      	movcs	r1, #0
 8016392:	380b      	subs	r0, #11
 8016394:	d015      	beq.n	80163c2 <__b2d+0x8e>
 8016396:	4084      	lsls	r4, r0
 8016398:	f1c0 0520 	rsb	r5, r0, #32
 801639c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80163a0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80163a4:	42be      	cmp	r6, r7
 80163a6:	fa21 fc05 	lsr.w	ip, r1, r5
 80163aa:	ea44 030c 	orr.w	r3, r4, ip
 80163ae:	bf8c      	ite	hi
 80163b0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80163b4:	2400      	movls	r4, #0
 80163b6:	fa01 f000 	lsl.w	r0, r1, r0
 80163ba:	40ec      	lsrs	r4, r5
 80163bc:	ea40 0204 	orr.w	r2, r0, r4
 80163c0:	e7dd      	b.n	801637e <__b2d+0x4a>
 80163c2:	ea44 030c 	orr.w	r3, r4, ip
 80163c6:	460a      	mov	r2, r1
 80163c8:	e7d9      	b.n	801637e <__b2d+0x4a>
 80163ca:	bf00      	nop
 80163cc:	3ff00000 	.word	0x3ff00000

080163d0 <__d2b>:
 80163d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80163d4:	460e      	mov	r6, r1
 80163d6:	2101      	movs	r1, #1
 80163d8:	ec59 8b10 	vmov	r8, r9, d0
 80163dc:	4615      	mov	r5, r2
 80163de:	f7ff fcb5 	bl	8015d4c <_Balloc>
 80163e2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80163e6:	4607      	mov	r7, r0
 80163e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163ec:	bb34      	cbnz	r4, 801643c <__d2b+0x6c>
 80163ee:	9301      	str	r3, [sp, #4]
 80163f0:	f1b8 0300 	subs.w	r3, r8, #0
 80163f4:	d027      	beq.n	8016446 <__d2b+0x76>
 80163f6:	a802      	add	r0, sp, #8
 80163f8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80163fc:	f7ff fd89 	bl	8015f12 <__lo0bits>
 8016400:	9900      	ldr	r1, [sp, #0]
 8016402:	b1f0      	cbz	r0, 8016442 <__d2b+0x72>
 8016404:	9a01      	ldr	r2, [sp, #4]
 8016406:	f1c0 0320 	rsb	r3, r0, #32
 801640a:	fa02 f303 	lsl.w	r3, r2, r3
 801640e:	430b      	orrs	r3, r1
 8016410:	40c2      	lsrs	r2, r0
 8016412:	617b      	str	r3, [r7, #20]
 8016414:	9201      	str	r2, [sp, #4]
 8016416:	9b01      	ldr	r3, [sp, #4]
 8016418:	61bb      	str	r3, [r7, #24]
 801641a:	2b00      	cmp	r3, #0
 801641c:	bf14      	ite	ne
 801641e:	2102      	movne	r1, #2
 8016420:	2101      	moveq	r1, #1
 8016422:	6139      	str	r1, [r7, #16]
 8016424:	b1c4      	cbz	r4, 8016458 <__d2b+0x88>
 8016426:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801642a:	4404      	add	r4, r0
 801642c:	6034      	str	r4, [r6, #0]
 801642e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016432:	6028      	str	r0, [r5, #0]
 8016434:	4638      	mov	r0, r7
 8016436:	b003      	add	sp, #12
 8016438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801643c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016440:	e7d5      	b.n	80163ee <__d2b+0x1e>
 8016442:	6179      	str	r1, [r7, #20]
 8016444:	e7e7      	b.n	8016416 <__d2b+0x46>
 8016446:	a801      	add	r0, sp, #4
 8016448:	f7ff fd63 	bl	8015f12 <__lo0bits>
 801644c:	9b01      	ldr	r3, [sp, #4]
 801644e:	617b      	str	r3, [r7, #20]
 8016450:	2101      	movs	r1, #1
 8016452:	6139      	str	r1, [r7, #16]
 8016454:	3020      	adds	r0, #32
 8016456:	e7e5      	b.n	8016424 <__d2b+0x54>
 8016458:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801645c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016460:	6030      	str	r0, [r6, #0]
 8016462:	6918      	ldr	r0, [r3, #16]
 8016464:	f7ff fd36 	bl	8015ed4 <__hi0bits>
 8016468:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801646c:	e7e1      	b.n	8016432 <__d2b+0x62>

0801646e <__ratio>:
 801646e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016472:	4688      	mov	r8, r1
 8016474:	4669      	mov	r1, sp
 8016476:	4681      	mov	r9, r0
 8016478:	f7ff ff5c 	bl	8016334 <__b2d>
 801647c:	a901      	add	r1, sp, #4
 801647e:	4640      	mov	r0, r8
 8016480:	ec57 6b10 	vmov	r6, r7, d0
 8016484:	f7ff ff56 	bl	8016334 <__b2d>
 8016488:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801648c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016490:	eba3 0c02 	sub.w	ip, r3, r2
 8016494:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016498:	1a9b      	subs	r3, r3, r2
 801649a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801649e:	ec5b ab10 	vmov	sl, fp, d0
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	bfce      	itee	gt
 80164a6:	463a      	movgt	r2, r7
 80164a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80164ac:	465a      	movle	r2, fp
 80164ae:	4659      	mov	r1, fp
 80164b0:	463d      	mov	r5, r7
 80164b2:	bfd4      	ite	le
 80164b4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80164b8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80164bc:	4630      	mov	r0, r6
 80164be:	ee10 2a10 	vmov	r2, s0
 80164c2:	460b      	mov	r3, r1
 80164c4:	4629      	mov	r1, r5
 80164c6:	f7ea f9d9 	bl	800087c <__aeabi_ddiv>
 80164ca:	ec41 0b10 	vmov	d0, r0, r1
 80164ce:	b003      	add	sp, #12
 80164d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164d4 <__copybits>:
 80164d4:	3901      	subs	r1, #1
 80164d6:	b510      	push	{r4, lr}
 80164d8:	1149      	asrs	r1, r1, #5
 80164da:	6914      	ldr	r4, [r2, #16]
 80164dc:	3101      	adds	r1, #1
 80164de:	f102 0314 	add.w	r3, r2, #20
 80164e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80164e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80164ea:	42a3      	cmp	r3, r4
 80164ec:	4602      	mov	r2, r0
 80164ee:	d303      	bcc.n	80164f8 <__copybits+0x24>
 80164f0:	2300      	movs	r3, #0
 80164f2:	428a      	cmp	r2, r1
 80164f4:	d305      	bcc.n	8016502 <__copybits+0x2e>
 80164f6:	bd10      	pop	{r4, pc}
 80164f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80164fc:	f840 2b04 	str.w	r2, [r0], #4
 8016500:	e7f3      	b.n	80164ea <__copybits+0x16>
 8016502:	f842 3b04 	str.w	r3, [r2], #4
 8016506:	e7f4      	b.n	80164f2 <__copybits+0x1e>

08016508 <__any_on>:
 8016508:	f100 0214 	add.w	r2, r0, #20
 801650c:	6900      	ldr	r0, [r0, #16]
 801650e:	114b      	asrs	r3, r1, #5
 8016510:	4298      	cmp	r0, r3
 8016512:	b510      	push	{r4, lr}
 8016514:	db11      	blt.n	801653a <__any_on+0x32>
 8016516:	dd0a      	ble.n	801652e <__any_on+0x26>
 8016518:	f011 011f 	ands.w	r1, r1, #31
 801651c:	d007      	beq.n	801652e <__any_on+0x26>
 801651e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016522:	fa24 f001 	lsr.w	r0, r4, r1
 8016526:	fa00 f101 	lsl.w	r1, r0, r1
 801652a:	428c      	cmp	r4, r1
 801652c:	d10b      	bne.n	8016546 <__any_on+0x3e>
 801652e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016532:	4293      	cmp	r3, r2
 8016534:	d803      	bhi.n	801653e <__any_on+0x36>
 8016536:	2000      	movs	r0, #0
 8016538:	bd10      	pop	{r4, pc}
 801653a:	4603      	mov	r3, r0
 801653c:	e7f7      	b.n	801652e <__any_on+0x26>
 801653e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016542:	2900      	cmp	r1, #0
 8016544:	d0f5      	beq.n	8016532 <__any_on+0x2a>
 8016546:	2001      	movs	r0, #1
 8016548:	e7f6      	b.n	8016538 <__any_on+0x30>

0801654a <_calloc_r>:
 801654a:	b538      	push	{r3, r4, r5, lr}
 801654c:	fb02 f401 	mul.w	r4, r2, r1
 8016550:	4621      	mov	r1, r4
 8016552:	f000 f857 	bl	8016604 <_malloc_r>
 8016556:	4605      	mov	r5, r0
 8016558:	b118      	cbz	r0, 8016562 <_calloc_r+0x18>
 801655a:	4622      	mov	r2, r4
 801655c:	2100      	movs	r1, #0
 801655e:	f7fc f91a 	bl	8012796 <memset>
 8016562:	4628      	mov	r0, r5
 8016564:	bd38      	pop	{r3, r4, r5, pc}
	...

08016568 <_free_r>:
 8016568:	b538      	push	{r3, r4, r5, lr}
 801656a:	4605      	mov	r5, r0
 801656c:	2900      	cmp	r1, #0
 801656e:	d045      	beq.n	80165fc <_free_r+0x94>
 8016570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016574:	1f0c      	subs	r4, r1, #4
 8016576:	2b00      	cmp	r3, #0
 8016578:	bfb8      	it	lt
 801657a:	18e4      	addlt	r4, r4, r3
 801657c:	f000 ffa5 	bl	80174ca <__malloc_lock>
 8016580:	4a1f      	ldr	r2, [pc, #124]	; (8016600 <_free_r+0x98>)
 8016582:	6813      	ldr	r3, [r2, #0]
 8016584:	4610      	mov	r0, r2
 8016586:	b933      	cbnz	r3, 8016596 <_free_r+0x2e>
 8016588:	6063      	str	r3, [r4, #4]
 801658a:	6014      	str	r4, [r2, #0]
 801658c:	4628      	mov	r0, r5
 801658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016592:	f000 bf9b 	b.w	80174cc <__malloc_unlock>
 8016596:	42a3      	cmp	r3, r4
 8016598:	d90c      	bls.n	80165b4 <_free_r+0x4c>
 801659a:	6821      	ldr	r1, [r4, #0]
 801659c:	1862      	adds	r2, r4, r1
 801659e:	4293      	cmp	r3, r2
 80165a0:	bf04      	itt	eq
 80165a2:	681a      	ldreq	r2, [r3, #0]
 80165a4:	685b      	ldreq	r3, [r3, #4]
 80165a6:	6063      	str	r3, [r4, #4]
 80165a8:	bf04      	itt	eq
 80165aa:	1852      	addeq	r2, r2, r1
 80165ac:	6022      	streq	r2, [r4, #0]
 80165ae:	6004      	str	r4, [r0, #0]
 80165b0:	e7ec      	b.n	801658c <_free_r+0x24>
 80165b2:	4613      	mov	r3, r2
 80165b4:	685a      	ldr	r2, [r3, #4]
 80165b6:	b10a      	cbz	r2, 80165bc <_free_r+0x54>
 80165b8:	42a2      	cmp	r2, r4
 80165ba:	d9fa      	bls.n	80165b2 <_free_r+0x4a>
 80165bc:	6819      	ldr	r1, [r3, #0]
 80165be:	1858      	adds	r0, r3, r1
 80165c0:	42a0      	cmp	r0, r4
 80165c2:	d10b      	bne.n	80165dc <_free_r+0x74>
 80165c4:	6820      	ldr	r0, [r4, #0]
 80165c6:	4401      	add	r1, r0
 80165c8:	1858      	adds	r0, r3, r1
 80165ca:	4282      	cmp	r2, r0
 80165cc:	6019      	str	r1, [r3, #0]
 80165ce:	d1dd      	bne.n	801658c <_free_r+0x24>
 80165d0:	6810      	ldr	r0, [r2, #0]
 80165d2:	6852      	ldr	r2, [r2, #4]
 80165d4:	605a      	str	r2, [r3, #4]
 80165d6:	4401      	add	r1, r0
 80165d8:	6019      	str	r1, [r3, #0]
 80165da:	e7d7      	b.n	801658c <_free_r+0x24>
 80165dc:	d902      	bls.n	80165e4 <_free_r+0x7c>
 80165de:	230c      	movs	r3, #12
 80165e0:	602b      	str	r3, [r5, #0]
 80165e2:	e7d3      	b.n	801658c <_free_r+0x24>
 80165e4:	6820      	ldr	r0, [r4, #0]
 80165e6:	1821      	adds	r1, r4, r0
 80165e8:	428a      	cmp	r2, r1
 80165ea:	bf04      	itt	eq
 80165ec:	6811      	ldreq	r1, [r2, #0]
 80165ee:	6852      	ldreq	r2, [r2, #4]
 80165f0:	6062      	str	r2, [r4, #4]
 80165f2:	bf04      	itt	eq
 80165f4:	1809      	addeq	r1, r1, r0
 80165f6:	6021      	streq	r1, [r4, #0]
 80165f8:	605c      	str	r4, [r3, #4]
 80165fa:	e7c7      	b.n	801658c <_free_r+0x24>
 80165fc:	bd38      	pop	{r3, r4, r5, pc}
 80165fe:	bf00      	nop
 8016600:	20037320 	.word	0x20037320

08016604 <_malloc_r>:
 8016604:	b570      	push	{r4, r5, r6, lr}
 8016606:	1ccd      	adds	r5, r1, #3
 8016608:	f025 0503 	bic.w	r5, r5, #3
 801660c:	3508      	adds	r5, #8
 801660e:	2d0c      	cmp	r5, #12
 8016610:	bf38      	it	cc
 8016612:	250c      	movcc	r5, #12
 8016614:	2d00      	cmp	r5, #0
 8016616:	4606      	mov	r6, r0
 8016618:	db01      	blt.n	801661e <_malloc_r+0x1a>
 801661a:	42a9      	cmp	r1, r5
 801661c:	d903      	bls.n	8016626 <_malloc_r+0x22>
 801661e:	230c      	movs	r3, #12
 8016620:	6033      	str	r3, [r6, #0]
 8016622:	2000      	movs	r0, #0
 8016624:	bd70      	pop	{r4, r5, r6, pc}
 8016626:	f000 ff50 	bl	80174ca <__malloc_lock>
 801662a:	4a21      	ldr	r2, [pc, #132]	; (80166b0 <_malloc_r+0xac>)
 801662c:	6814      	ldr	r4, [r2, #0]
 801662e:	4621      	mov	r1, r4
 8016630:	b991      	cbnz	r1, 8016658 <_malloc_r+0x54>
 8016632:	4c20      	ldr	r4, [pc, #128]	; (80166b4 <_malloc_r+0xb0>)
 8016634:	6823      	ldr	r3, [r4, #0]
 8016636:	b91b      	cbnz	r3, 8016640 <_malloc_r+0x3c>
 8016638:	4630      	mov	r0, r6
 801663a:	f000 fde3 	bl	8017204 <_sbrk_r>
 801663e:	6020      	str	r0, [r4, #0]
 8016640:	4629      	mov	r1, r5
 8016642:	4630      	mov	r0, r6
 8016644:	f000 fdde 	bl	8017204 <_sbrk_r>
 8016648:	1c43      	adds	r3, r0, #1
 801664a:	d124      	bne.n	8016696 <_malloc_r+0x92>
 801664c:	230c      	movs	r3, #12
 801664e:	6033      	str	r3, [r6, #0]
 8016650:	4630      	mov	r0, r6
 8016652:	f000 ff3b 	bl	80174cc <__malloc_unlock>
 8016656:	e7e4      	b.n	8016622 <_malloc_r+0x1e>
 8016658:	680b      	ldr	r3, [r1, #0]
 801665a:	1b5b      	subs	r3, r3, r5
 801665c:	d418      	bmi.n	8016690 <_malloc_r+0x8c>
 801665e:	2b0b      	cmp	r3, #11
 8016660:	d90f      	bls.n	8016682 <_malloc_r+0x7e>
 8016662:	600b      	str	r3, [r1, #0]
 8016664:	50cd      	str	r5, [r1, r3]
 8016666:	18cc      	adds	r4, r1, r3
 8016668:	4630      	mov	r0, r6
 801666a:	f000 ff2f 	bl	80174cc <__malloc_unlock>
 801666e:	f104 000b 	add.w	r0, r4, #11
 8016672:	1d23      	adds	r3, r4, #4
 8016674:	f020 0007 	bic.w	r0, r0, #7
 8016678:	1ac3      	subs	r3, r0, r3
 801667a:	d0d3      	beq.n	8016624 <_malloc_r+0x20>
 801667c:	425a      	negs	r2, r3
 801667e:	50e2      	str	r2, [r4, r3]
 8016680:	e7d0      	b.n	8016624 <_malloc_r+0x20>
 8016682:	428c      	cmp	r4, r1
 8016684:	684b      	ldr	r3, [r1, #4]
 8016686:	bf16      	itet	ne
 8016688:	6063      	strne	r3, [r4, #4]
 801668a:	6013      	streq	r3, [r2, #0]
 801668c:	460c      	movne	r4, r1
 801668e:	e7eb      	b.n	8016668 <_malloc_r+0x64>
 8016690:	460c      	mov	r4, r1
 8016692:	6849      	ldr	r1, [r1, #4]
 8016694:	e7cc      	b.n	8016630 <_malloc_r+0x2c>
 8016696:	1cc4      	adds	r4, r0, #3
 8016698:	f024 0403 	bic.w	r4, r4, #3
 801669c:	42a0      	cmp	r0, r4
 801669e:	d005      	beq.n	80166ac <_malloc_r+0xa8>
 80166a0:	1a21      	subs	r1, r4, r0
 80166a2:	4630      	mov	r0, r6
 80166a4:	f000 fdae 	bl	8017204 <_sbrk_r>
 80166a8:	3001      	adds	r0, #1
 80166aa:	d0cf      	beq.n	801664c <_malloc_r+0x48>
 80166ac:	6025      	str	r5, [r4, #0]
 80166ae:	e7db      	b.n	8016668 <_malloc_r+0x64>
 80166b0:	20037320 	.word	0x20037320
 80166b4:	20037324 	.word	0x20037324

080166b8 <__ssputs_r>:
 80166b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166bc:	688e      	ldr	r6, [r1, #8]
 80166be:	429e      	cmp	r6, r3
 80166c0:	4682      	mov	sl, r0
 80166c2:	460c      	mov	r4, r1
 80166c4:	4690      	mov	r8, r2
 80166c6:	4699      	mov	r9, r3
 80166c8:	d837      	bhi.n	801673a <__ssputs_r+0x82>
 80166ca:	898a      	ldrh	r2, [r1, #12]
 80166cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80166d0:	d031      	beq.n	8016736 <__ssputs_r+0x7e>
 80166d2:	6825      	ldr	r5, [r4, #0]
 80166d4:	6909      	ldr	r1, [r1, #16]
 80166d6:	1a6f      	subs	r7, r5, r1
 80166d8:	6965      	ldr	r5, [r4, #20]
 80166da:	2302      	movs	r3, #2
 80166dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80166e4:	f109 0301 	add.w	r3, r9, #1
 80166e8:	443b      	add	r3, r7
 80166ea:	429d      	cmp	r5, r3
 80166ec:	bf38      	it	cc
 80166ee:	461d      	movcc	r5, r3
 80166f0:	0553      	lsls	r3, r2, #21
 80166f2:	d530      	bpl.n	8016756 <__ssputs_r+0x9e>
 80166f4:	4629      	mov	r1, r5
 80166f6:	f7ff ff85 	bl	8016604 <_malloc_r>
 80166fa:	4606      	mov	r6, r0
 80166fc:	b950      	cbnz	r0, 8016714 <__ssputs_r+0x5c>
 80166fe:	230c      	movs	r3, #12
 8016700:	f8ca 3000 	str.w	r3, [sl]
 8016704:	89a3      	ldrh	r3, [r4, #12]
 8016706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801670a:	81a3      	strh	r3, [r4, #12]
 801670c:	f04f 30ff 	mov.w	r0, #4294967295
 8016710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016714:	463a      	mov	r2, r7
 8016716:	6921      	ldr	r1, [r4, #16]
 8016718:	f7fc f832 	bl	8012780 <memcpy>
 801671c:	89a3      	ldrh	r3, [r4, #12]
 801671e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016726:	81a3      	strh	r3, [r4, #12]
 8016728:	6126      	str	r6, [r4, #16]
 801672a:	6165      	str	r5, [r4, #20]
 801672c:	443e      	add	r6, r7
 801672e:	1bed      	subs	r5, r5, r7
 8016730:	6026      	str	r6, [r4, #0]
 8016732:	60a5      	str	r5, [r4, #8]
 8016734:	464e      	mov	r6, r9
 8016736:	454e      	cmp	r6, r9
 8016738:	d900      	bls.n	801673c <__ssputs_r+0x84>
 801673a:	464e      	mov	r6, r9
 801673c:	4632      	mov	r2, r6
 801673e:	4641      	mov	r1, r8
 8016740:	6820      	ldr	r0, [r4, #0]
 8016742:	f000 fea9 	bl	8017498 <memmove>
 8016746:	68a3      	ldr	r3, [r4, #8]
 8016748:	1b9b      	subs	r3, r3, r6
 801674a:	60a3      	str	r3, [r4, #8]
 801674c:	6823      	ldr	r3, [r4, #0]
 801674e:	441e      	add	r6, r3
 8016750:	6026      	str	r6, [r4, #0]
 8016752:	2000      	movs	r0, #0
 8016754:	e7dc      	b.n	8016710 <__ssputs_r+0x58>
 8016756:	462a      	mov	r2, r5
 8016758:	f000 feb9 	bl	80174ce <_realloc_r>
 801675c:	4606      	mov	r6, r0
 801675e:	2800      	cmp	r0, #0
 8016760:	d1e2      	bne.n	8016728 <__ssputs_r+0x70>
 8016762:	6921      	ldr	r1, [r4, #16]
 8016764:	4650      	mov	r0, sl
 8016766:	f7ff feff 	bl	8016568 <_free_r>
 801676a:	e7c8      	b.n	80166fe <__ssputs_r+0x46>

0801676c <_svfiprintf_r>:
 801676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016770:	461d      	mov	r5, r3
 8016772:	898b      	ldrh	r3, [r1, #12]
 8016774:	061f      	lsls	r7, r3, #24
 8016776:	b09d      	sub	sp, #116	; 0x74
 8016778:	4680      	mov	r8, r0
 801677a:	460c      	mov	r4, r1
 801677c:	4616      	mov	r6, r2
 801677e:	d50f      	bpl.n	80167a0 <_svfiprintf_r+0x34>
 8016780:	690b      	ldr	r3, [r1, #16]
 8016782:	b96b      	cbnz	r3, 80167a0 <_svfiprintf_r+0x34>
 8016784:	2140      	movs	r1, #64	; 0x40
 8016786:	f7ff ff3d 	bl	8016604 <_malloc_r>
 801678a:	6020      	str	r0, [r4, #0]
 801678c:	6120      	str	r0, [r4, #16]
 801678e:	b928      	cbnz	r0, 801679c <_svfiprintf_r+0x30>
 8016790:	230c      	movs	r3, #12
 8016792:	f8c8 3000 	str.w	r3, [r8]
 8016796:	f04f 30ff 	mov.w	r0, #4294967295
 801679a:	e0c8      	b.n	801692e <_svfiprintf_r+0x1c2>
 801679c:	2340      	movs	r3, #64	; 0x40
 801679e:	6163      	str	r3, [r4, #20]
 80167a0:	2300      	movs	r3, #0
 80167a2:	9309      	str	r3, [sp, #36]	; 0x24
 80167a4:	2320      	movs	r3, #32
 80167a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167aa:	2330      	movs	r3, #48	; 0x30
 80167ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167b0:	9503      	str	r5, [sp, #12]
 80167b2:	f04f 0b01 	mov.w	fp, #1
 80167b6:	4637      	mov	r7, r6
 80167b8:	463d      	mov	r5, r7
 80167ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80167be:	b10b      	cbz	r3, 80167c4 <_svfiprintf_r+0x58>
 80167c0:	2b25      	cmp	r3, #37	; 0x25
 80167c2:	d13e      	bne.n	8016842 <_svfiprintf_r+0xd6>
 80167c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80167c8:	d00b      	beq.n	80167e2 <_svfiprintf_r+0x76>
 80167ca:	4653      	mov	r3, sl
 80167cc:	4632      	mov	r2, r6
 80167ce:	4621      	mov	r1, r4
 80167d0:	4640      	mov	r0, r8
 80167d2:	f7ff ff71 	bl	80166b8 <__ssputs_r>
 80167d6:	3001      	adds	r0, #1
 80167d8:	f000 80a4 	beq.w	8016924 <_svfiprintf_r+0x1b8>
 80167dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167de:	4453      	add	r3, sl
 80167e0:	9309      	str	r3, [sp, #36]	; 0x24
 80167e2:	783b      	ldrb	r3, [r7, #0]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	f000 809d 	beq.w	8016924 <_svfiprintf_r+0x1b8>
 80167ea:	2300      	movs	r3, #0
 80167ec:	f04f 32ff 	mov.w	r2, #4294967295
 80167f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80167f4:	9304      	str	r3, [sp, #16]
 80167f6:	9307      	str	r3, [sp, #28]
 80167f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80167fc:	931a      	str	r3, [sp, #104]	; 0x68
 80167fe:	462f      	mov	r7, r5
 8016800:	2205      	movs	r2, #5
 8016802:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016806:	4850      	ldr	r0, [pc, #320]	; (8016948 <_svfiprintf_r+0x1dc>)
 8016808:	f7e9 fd02 	bl	8000210 <memchr>
 801680c:	9b04      	ldr	r3, [sp, #16]
 801680e:	b9d0      	cbnz	r0, 8016846 <_svfiprintf_r+0xda>
 8016810:	06d9      	lsls	r1, r3, #27
 8016812:	bf44      	itt	mi
 8016814:	2220      	movmi	r2, #32
 8016816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801681a:	071a      	lsls	r2, r3, #28
 801681c:	bf44      	itt	mi
 801681e:	222b      	movmi	r2, #43	; 0x2b
 8016820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016824:	782a      	ldrb	r2, [r5, #0]
 8016826:	2a2a      	cmp	r2, #42	; 0x2a
 8016828:	d015      	beq.n	8016856 <_svfiprintf_r+0xea>
 801682a:	9a07      	ldr	r2, [sp, #28]
 801682c:	462f      	mov	r7, r5
 801682e:	2000      	movs	r0, #0
 8016830:	250a      	movs	r5, #10
 8016832:	4639      	mov	r1, r7
 8016834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016838:	3b30      	subs	r3, #48	; 0x30
 801683a:	2b09      	cmp	r3, #9
 801683c:	d94d      	bls.n	80168da <_svfiprintf_r+0x16e>
 801683e:	b1b8      	cbz	r0, 8016870 <_svfiprintf_r+0x104>
 8016840:	e00f      	b.n	8016862 <_svfiprintf_r+0xf6>
 8016842:	462f      	mov	r7, r5
 8016844:	e7b8      	b.n	80167b8 <_svfiprintf_r+0x4c>
 8016846:	4a40      	ldr	r2, [pc, #256]	; (8016948 <_svfiprintf_r+0x1dc>)
 8016848:	1a80      	subs	r0, r0, r2
 801684a:	fa0b f000 	lsl.w	r0, fp, r0
 801684e:	4318      	orrs	r0, r3
 8016850:	9004      	str	r0, [sp, #16]
 8016852:	463d      	mov	r5, r7
 8016854:	e7d3      	b.n	80167fe <_svfiprintf_r+0x92>
 8016856:	9a03      	ldr	r2, [sp, #12]
 8016858:	1d11      	adds	r1, r2, #4
 801685a:	6812      	ldr	r2, [r2, #0]
 801685c:	9103      	str	r1, [sp, #12]
 801685e:	2a00      	cmp	r2, #0
 8016860:	db01      	blt.n	8016866 <_svfiprintf_r+0xfa>
 8016862:	9207      	str	r2, [sp, #28]
 8016864:	e004      	b.n	8016870 <_svfiprintf_r+0x104>
 8016866:	4252      	negs	r2, r2
 8016868:	f043 0302 	orr.w	r3, r3, #2
 801686c:	9207      	str	r2, [sp, #28]
 801686e:	9304      	str	r3, [sp, #16]
 8016870:	783b      	ldrb	r3, [r7, #0]
 8016872:	2b2e      	cmp	r3, #46	; 0x2e
 8016874:	d10c      	bne.n	8016890 <_svfiprintf_r+0x124>
 8016876:	787b      	ldrb	r3, [r7, #1]
 8016878:	2b2a      	cmp	r3, #42	; 0x2a
 801687a:	d133      	bne.n	80168e4 <_svfiprintf_r+0x178>
 801687c:	9b03      	ldr	r3, [sp, #12]
 801687e:	1d1a      	adds	r2, r3, #4
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	9203      	str	r2, [sp, #12]
 8016884:	2b00      	cmp	r3, #0
 8016886:	bfb8      	it	lt
 8016888:	f04f 33ff 	movlt.w	r3, #4294967295
 801688c:	3702      	adds	r7, #2
 801688e:	9305      	str	r3, [sp, #20]
 8016890:	4d2e      	ldr	r5, [pc, #184]	; (801694c <_svfiprintf_r+0x1e0>)
 8016892:	7839      	ldrb	r1, [r7, #0]
 8016894:	2203      	movs	r2, #3
 8016896:	4628      	mov	r0, r5
 8016898:	f7e9 fcba 	bl	8000210 <memchr>
 801689c:	b138      	cbz	r0, 80168ae <_svfiprintf_r+0x142>
 801689e:	2340      	movs	r3, #64	; 0x40
 80168a0:	1b40      	subs	r0, r0, r5
 80168a2:	fa03 f000 	lsl.w	r0, r3, r0
 80168a6:	9b04      	ldr	r3, [sp, #16]
 80168a8:	4303      	orrs	r3, r0
 80168aa:	3701      	adds	r7, #1
 80168ac:	9304      	str	r3, [sp, #16]
 80168ae:	7839      	ldrb	r1, [r7, #0]
 80168b0:	4827      	ldr	r0, [pc, #156]	; (8016950 <_svfiprintf_r+0x1e4>)
 80168b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80168b6:	2206      	movs	r2, #6
 80168b8:	1c7e      	adds	r6, r7, #1
 80168ba:	f7e9 fca9 	bl	8000210 <memchr>
 80168be:	2800      	cmp	r0, #0
 80168c0:	d038      	beq.n	8016934 <_svfiprintf_r+0x1c8>
 80168c2:	4b24      	ldr	r3, [pc, #144]	; (8016954 <_svfiprintf_r+0x1e8>)
 80168c4:	bb13      	cbnz	r3, 801690c <_svfiprintf_r+0x1a0>
 80168c6:	9b03      	ldr	r3, [sp, #12]
 80168c8:	3307      	adds	r3, #7
 80168ca:	f023 0307 	bic.w	r3, r3, #7
 80168ce:	3308      	adds	r3, #8
 80168d0:	9303      	str	r3, [sp, #12]
 80168d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168d4:	444b      	add	r3, r9
 80168d6:	9309      	str	r3, [sp, #36]	; 0x24
 80168d8:	e76d      	b.n	80167b6 <_svfiprintf_r+0x4a>
 80168da:	fb05 3202 	mla	r2, r5, r2, r3
 80168de:	2001      	movs	r0, #1
 80168e0:	460f      	mov	r7, r1
 80168e2:	e7a6      	b.n	8016832 <_svfiprintf_r+0xc6>
 80168e4:	2300      	movs	r3, #0
 80168e6:	3701      	adds	r7, #1
 80168e8:	9305      	str	r3, [sp, #20]
 80168ea:	4619      	mov	r1, r3
 80168ec:	250a      	movs	r5, #10
 80168ee:	4638      	mov	r0, r7
 80168f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168f4:	3a30      	subs	r2, #48	; 0x30
 80168f6:	2a09      	cmp	r2, #9
 80168f8:	d903      	bls.n	8016902 <_svfiprintf_r+0x196>
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d0c8      	beq.n	8016890 <_svfiprintf_r+0x124>
 80168fe:	9105      	str	r1, [sp, #20]
 8016900:	e7c6      	b.n	8016890 <_svfiprintf_r+0x124>
 8016902:	fb05 2101 	mla	r1, r5, r1, r2
 8016906:	2301      	movs	r3, #1
 8016908:	4607      	mov	r7, r0
 801690a:	e7f0      	b.n	80168ee <_svfiprintf_r+0x182>
 801690c:	ab03      	add	r3, sp, #12
 801690e:	9300      	str	r3, [sp, #0]
 8016910:	4622      	mov	r2, r4
 8016912:	4b11      	ldr	r3, [pc, #68]	; (8016958 <_svfiprintf_r+0x1ec>)
 8016914:	a904      	add	r1, sp, #16
 8016916:	4640      	mov	r0, r8
 8016918:	f7fb ffda 	bl	80128d0 <_printf_float>
 801691c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016920:	4681      	mov	r9, r0
 8016922:	d1d6      	bne.n	80168d2 <_svfiprintf_r+0x166>
 8016924:	89a3      	ldrh	r3, [r4, #12]
 8016926:	065b      	lsls	r3, r3, #25
 8016928:	f53f af35 	bmi.w	8016796 <_svfiprintf_r+0x2a>
 801692c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801692e:	b01d      	add	sp, #116	; 0x74
 8016930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016934:	ab03      	add	r3, sp, #12
 8016936:	9300      	str	r3, [sp, #0]
 8016938:	4622      	mov	r2, r4
 801693a:	4b07      	ldr	r3, [pc, #28]	; (8016958 <_svfiprintf_r+0x1ec>)
 801693c:	a904      	add	r1, sp, #16
 801693e:	4640      	mov	r0, r8
 8016940:	f7fc fa7c 	bl	8012e3c <_printf_i>
 8016944:	e7ea      	b.n	801691c <_svfiprintf_r+0x1b0>
 8016946:	bf00      	nop
 8016948:	08017d4c 	.word	0x08017d4c
 801694c:	08017d52 	.word	0x08017d52
 8016950:	08017d56 	.word	0x08017d56
 8016954:	080128d1 	.word	0x080128d1
 8016958:	080166b9 	.word	0x080166b9

0801695c <_sungetc_r>:
 801695c:	b538      	push	{r3, r4, r5, lr}
 801695e:	1c4b      	adds	r3, r1, #1
 8016960:	4614      	mov	r4, r2
 8016962:	d103      	bne.n	801696c <_sungetc_r+0x10>
 8016964:	f04f 35ff 	mov.w	r5, #4294967295
 8016968:	4628      	mov	r0, r5
 801696a:	bd38      	pop	{r3, r4, r5, pc}
 801696c:	8993      	ldrh	r3, [r2, #12]
 801696e:	f023 0320 	bic.w	r3, r3, #32
 8016972:	8193      	strh	r3, [r2, #12]
 8016974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016976:	6852      	ldr	r2, [r2, #4]
 8016978:	b2cd      	uxtb	r5, r1
 801697a:	b18b      	cbz	r3, 80169a0 <_sungetc_r+0x44>
 801697c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801697e:	4293      	cmp	r3, r2
 8016980:	dd08      	ble.n	8016994 <_sungetc_r+0x38>
 8016982:	6823      	ldr	r3, [r4, #0]
 8016984:	1e5a      	subs	r2, r3, #1
 8016986:	6022      	str	r2, [r4, #0]
 8016988:	f803 5c01 	strb.w	r5, [r3, #-1]
 801698c:	6863      	ldr	r3, [r4, #4]
 801698e:	3301      	adds	r3, #1
 8016990:	6063      	str	r3, [r4, #4]
 8016992:	e7e9      	b.n	8016968 <_sungetc_r+0xc>
 8016994:	4621      	mov	r1, r4
 8016996:	f000 fd15 	bl	80173c4 <__submore>
 801699a:	2800      	cmp	r0, #0
 801699c:	d0f1      	beq.n	8016982 <_sungetc_r+0x26>
 801699e:	e7e1      	b.n	8016964 <_sungetc_r+0x8>
 80169a0:	6921      	ldr	r1, [r4, #16]
 80169a2:	6823      	ldr	r3, [r4, #0]
 80169a4:	b151      	cbz	r1, 80169bc <_sungetc_r+0x60>
 80169a6:	4299      	cmp	r1, r3
 80169a8:	d208      	bcs.n	80169bc <_sungetc_r+0x60>
 80169aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80169ae:	42a9      	cmp	r1, r5
 80169b0:	d104      	bne.n	80169bc <_sungetc_r+0x60>
 80169b2:	3b01      	subs	r3, #1
 80169b4:	3201      	adds	r2, #1
 80169b6:	6023      	str	r3, [r4, #0]
 80169b8:	6062      	str	r2, [r4, #4]
 80169ba:	e7d5      	b.n	8016968 <_sungetc_r+0xc>
 80169bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80169c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169c4:	6363      	str	r3, [r4, #52]	; 0x34
 80169c6:	2303      	movs	r3, #3
 80169c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80169ca:	4623      	mov	r3, r4
 80169cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80169d0:	6023      	str	r3, [r4, #0]
 80169d2:	2301      	movs	r3, #1
 80169d4:	e7dc      	b.n	8016990 <_sungetc_r+0x34>

080169d6 <__ssrefill_r>:
 80169d6:	b510      	push	{r4, lr}
 80169d8:	460c      	mov	r4, r1
 80169da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80169dc:	b169      	cbz	r1, 80169fa <__ssrefill_r+0x24>
 80169de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169e2:	4299      	cmp	r1, r3
 80169e4:	d001      	beq.n	80169ea <__ssrefill_r+0x14>
 80169e6:	f7ff fdbf 	bl	8016568 <_free_r>
 80169ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80169ec:	6063      	str	r3, [r4, #4]
 80169ee:	2000      	movs	r0, #0
 80169f0:	6360      	str	r0, [r4, #52]	; 0x34
 80169f2:	b113      	cbz	r3, 80169fa <__ssrefill_r+0x24>
 80169f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80169f6:	6023      	str	r3, [r4, #0]
 80169f8:	bd10      	pop	{r4, pc}
 80169fa:	6923      	ldr	r3, [r4, #16]
 80169fc:	6023      	str	r3, [r4, #0]
 80169fe:	2300      	movs	r3, #0
 8016a00:	6063      	str	r3, [r4, #4]
 8016a02:	89a3      	ldrh	r3, [r4, #12]
 8016a04:	f043 0320 	orr.w	r3, r3, #32
 8016a08:	81a3      	strh	r3, [r4, #12]
 8016a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0e:	e7f3      	b.n	80169f8 <__ssrefill_r+0x22>

08016a10 <__ssvfiscanf_r>:
 8016a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a14:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016a18:	460c      	mov	r4, r1
 8016a1a:	2100      	movs	r1, #0
 8016a1c:	9144      	str	r1, [sp, #272]	; 0x110
 8016a1e:	9145      	str	r1, [sp, #276]	; 0x114
 8016a20:	499f      	ldr	r1, [pc, #636]	; (8016ca0 <__ssvfiscanf_r+0x290>)
 8016a22:	91a0      	str	r1, [sp, #640]	; 0x280
 8016a24:	f10d 0804 	add.w	r8, sp, #4
 8016a28:	499e      	ldr	r1, [pc, #632]	; (8016ca4 <__ssvfiscanf_r+0x294>)
 8016a2a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016ca8 <__ssvfiscanf_r+0x298>
 8016a2e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016a32:	4606      	mov	r6, r0
 8016a34:	4692      	mov	sl, r2
 8016a36:	91a1      	str	r1, [sp, #644]	; 0x284
 8016a38:	9300      	str	r3, [sp, #0]
 8016a3a:	270a      	movs	r7, #10
 8016a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	f000 812a 	beq.w	8016c9a <__ssvfiscanf_r+0x28a>
 8016a46:	4655      	mov	r5, sl
 8016a48:	f7ff f8d2 	bl	8015bf0 <__locale_ctype_ptr>
 8016a4c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016a50:	4458      	add	r0, fp
 8016a52:	7843      	ldrb	r3, [r0, #1]
 8016a54:	f013 0308 	ands.w	r3, r3, #8
 8016a58:	d01c      	beq.n	8016a94 <__ssvfiscanf_r+0x84>
 8016a5a:	6863      	ldr	r3, [r4, #4]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	dd12      	ble.n	8016a86 <__ssvfiscanf_r+0x76>
 8016a60:	f7ff f8c6 	bl	8015bf0 <__locale_ctype_ptr>
 8016a64:	6823      	ldr	r3, [r4, #0]
 8016a66:	781a      	ldrb	r2, [r3, #0]
 8016a68:	4410      	add	r0, r2
 8016a6a:	7842      	ldrb	r2, [r0, #1]
 8016a6c:	0712      	lsls	r2, r2, #28
 8016a6e:	d401      	bmi.n	8016a74 <__ssvfiscanf_r+0x64>
 8016a70:	46aa      	mov	sl, r5
 8016a72:	e7e3      	b.n	8016a3c <__ssvfiscanf_r+0x2c>
 8016a74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016a76:	3201      	adds	r2, #1
 8016a78:	9245      	str	r2, [sp, #276]	; 0x114
 8016a7a:	6862      	ldr	r2, [r4, #4]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	3a01      	subs	r2, #1
 8016a80:	6062      	str	r2, [r4, #4]
 8016a82:	6023      	str	r3, [r4, #0]
 8016a84:	e7e9      	b.n	8016a5a <__ssvfiscanf_r+0x4a>
 8016a86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a88:	4621      	mov	r1, r4
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	4798      	blx	r3
 8016a8e:	2800      	cmp	r0, #0
 8016a90:	d0e6      	beq.n	8016a60 <__ssvfiscanf_r+0x50>
 8016a92:	e7ed      	b.n	8016a70 <__ssvfiscanf_r+0x60>
 8016a94:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016a98:	f040 8082 	bne.w	8016ba0 <__ssvfiscanf_r+0x190>
 8016a9c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016a9e:	9341      	str	r3, [sp, #260]	; 0x104
 8016aa0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8016aa6:	d103      	bne.n	8016ab0 <__ssvfiscanf_r+0xa0>
 8016aa8:	2310      	movs	r3, #16
 8016aaa:	9341      	str	r3, [sp, #260]	; 0x104
 8016aac:	f10a 0502 	add.w	r5, sl, #2
 8016ab0:	46aa      	mov	sl, r5
 8016ab2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016ab6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016aba:	2a09      	cmp	r2, #9
 8016abc:	d922      	bls.n	8016b04 <__ssvfiscanf_r+0xf4>
 8016abe:	2203      	movs	r2, #3
 8016ac0:	4879      	ldr	r0, [pc, #484]	; (8016ca8 <__ssvfiscanf_r+0x298>)
 8016ac2:	f7e9 fba5 	bl	8000210 <memchr>
 8016ac6:	b138      	cbz	r0, 8016ad8 <__ssvfiscanf_r+0xc8>
 8016ac8:	eba0 0309 	sub.w	r3, r0, r9
 8016acc:	2001      	movs	r0, #1
 8016ace:	4098      	lsls	r0, r3
 8016ad0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ad2:	4318      	orrs	r0, r3
 8016ad4:	9041      	str	r0, [sp, #260]	; 0x104
 8016ad6:	46aa      	mov	sl, r5
 8016ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8016adc:	2b67      	cmp	r3, #103	; 0x67
 8016ade:	f10a 0501 	add.w	r5, sl, #1
 8016ae2:	d82b      	bhi.n	8016b3c <__ssvfiscanf_r+0x12c>
 8016ae4:	2b65      	cmp	r3, #101	; 0x65
 8016ae6:	f080 809f 	bcs.w	8016c28 <__ssvfiscanf_r+0x218>
 8016aea:	2b47      	cmp	r3, #71	; 0x47
 8016aec:	d810      	bhi.n	8016b10 <__ssvfiscanf_r+0x100>
 8016aee:	2b45      	cmp	r3, #69	; 0x45
 8016af0:	f080 809a 	bcs.w	8016c28 <__ssvfiscanf_r+0x218>
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d06c      	beq.n	8016bd2 <__ssvfiscanf_r+0x1c2>
 8016af8:	2b25      	cmp	r3, #37	; 0x25
 8016afa:	d051      	beq.n	8016ba0 <__ssvfiscanf_r+0x190>
 8016afc:	2303      	movs	r3, #3
 8016afe:	9347      	str	r3, [sp, #284]	; 0x11c
 8016b00:	9742      	str	r7, [sp, #264]	; 0x108
 8016b02:	e027      	b.n	8016b54 <__ssvfiscanf_r+0x144>
 8016b04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016b06:	fb07 1303 	mla	r3, r7, r3, r1
 8016b0a:	3b30      	subs	r3, #48	; 0x30
 8016b0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016b0e:	e7cf      	b.n	8016ab0 <__ssvfiscanf_r+0xa0>
 8016b10:	2b5b      	cmp	r3, #91	; 0x5b
 8016b12:	d06a      	beq.n	8016bea <__ssvfiscanf_r+0x1da>
 8016b14:	d80c      	bhi.n	8016b30 <__ssvfiscanf_r+0x120>
 8016b16:	2b58      	cmp	r3, #88	; 0x58
 8016b18:	d1f0      	bne.n	8016afc <__ssvfiscanf_r+0xec>
 8016b1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b20:	9241      	str	r2, [sp, #260]	; 0x104
 8016b22:	2210      	movs	r2, #16
 8016b24:	9242      	str	r2, [sp, #264]	; 0x108
 8016b26:	2b6e      	cmp	r3, #110	; 0x6e
 8016b28:	bf8c      	ite	hi
 8016b2a:	2304      	movhi	r3, #4
 8016b2c:	2303      	movls	r3, #3
 8016b2e:	e010      	b.n	8016b52 <__ssvfiscanf_r+0x142>
 8016b30:	2b63      	cmp	r3, #99	; 0x63
 8016b32:	d065      	beq.n	8016c00 <__ssvfiscanf_r+0x1f0>
 8016b34:	2b64      	cmp	r3, #100	; 0x64
 8016b36:	d1e1      	bne.n	8016afc <__ssvfiscanf_r+0xec>
 8016b38:	9742      	str	r7, [sp, #264]	; 0x108
 8016b3a:	e7f4      	b.n	8016b26 <__ssvfiscanf_r+0x116>
 8016b3c:	2b70      	cmp	r3, #112	; 0x70
 8016b3e:	d04b      	beq.n	8016bd8 <__ssvfiscanf_r+0x1c8>
 8016b40:	d826      	bhi.n	8016b90 <__ssvfiscanf_r+0x180>
 8016b42:	2b6e      	cmp	r3, #110	; 0x6e
 8016b44:	d062      	beq.n	8016c0c <__ssvfiscanf_r+0x1fc>
 8016b46:	d84c      	bhi.n	8016be2 <__ssvfiscanf_r+0x1d2>
 8016b48:	2b69      	cmp	r3, #105	; 0x69
 8016b4a:	d1d7      	bne.n	8016afc <__ssvfiscanf_r+0xec>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	9342      	str	r3, [sp, #264]	; 0x108
 8016b50:	2303      	movs	r3, #3
 8016b52:	9347      	str	r3, [sp, #284]	; 0x11c
 8016b54:	6863      	ldr	r3, [r4, #4]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	dd68      	ble.n	8016c2c <__ssvfiscanf_r+0x21c>
 8016b5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b5c:	0659      	lsls	r1, r3, #25
 8016b5e:	d407      	bmi.n	8016b70 <__ssvfiscanf_r+0x160>
 8016b60:	f7ff f846 	bl	8015bf0 <__locale_ctype_ptr>
 8016b64:	6823      	ldr	r3, [r4, #0]
 8016b66:	781a      	ldrb	r2, [r3, #0]
 8016b68:	4410      	add	r0, r2
 8016b6a:	7842      	ldrb	r2, [r0, #1]
 8016b6c:	0712      	lsls	r2, r2, #28
 8016b6e:	d464      	bmi.n	8016c3a <__ssvfiscanf_r+0x22a>
 8016b70:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016b72:	2b02      	cmp	r3, #2
 8016b74:	dc73      	bgt.n	8016c5e <__ssvfiscanf_r+0x24e>
 8016b76:	466b      	mov	r3, sp
 8016b78:	4622      	mov	r2, r4
 8016b7a:	a941      	add	r1, sp, #260	; 0x104
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f000 f9d7 	bl	8016f30 <_scanf_chars>
 8016b82:	2801      	cmp	r0, #1
 8016b84:	f000 8089 	beq.w	8016c9a <__ssvfiscanf_r+0x28a>
 8016b88:	2802      	cmp	r0, #2
 8016b8a:	f47f af71 	bne.w	8016a70 <__ssvfiscanf_r+0x60>
 8016b8e:	e01d      	b.n	8016bcc <__ssvfiscanf_r+0x1bc>
 8016b90:	2b75      	cmp	r3, #117	; 0x75
 8016b92:	d0d1      	beq.n	8016b38 <__ssvfiscanf_r+0x128>
 8016b94:	2b78      	cmp	r3, #120	; 0x78
 8016b96:	d0c0      	beq.n	8016b1a <__ssvfiscanf_r+0x10a>
 8016b98:	2b73      	cmp	r3, #115	; 0x73
 8016b9a:	d1af      	bne.n	8016afc <__ssvfiscanf_r+0xec>
 8016b9c:	2302      	movs	r3, #2
 8016b9e:	e7d8      	b.n	8016b52 <__ssvfiscanf_r+0x142>
 8016ba0:	6863      	ldr	r3, [r4, #4]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	dd0c      	ble.n	8016bc0 <__ssvfiscanf_r+0x1b0>
 8016ba6:	6823      	ldr	r3, [r4, #0]
 8016ba8:	781a      	ldrb	r2, [r3, #0]
 8016baa:	455a      	cmp	r2, fp
 8016bac:	d175      	bne.n	8016c9a <__ssvfiscanf_r+0x28a>
 8016bae:	3301      	adds	r3, #1
 8016bb0:	6862      	ldr	r2, [r4, #4]
 8016bb2:	6023      	str	r3, [r4, #0]
 8016bb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016bb6:	3a01      	subs	r2, #1
 8016bb8:	3301      	adds	r3, #1
 8016bba:	6062      	str	r2, [r4, #4]
 8016bbc:	9345      	str	r3, [sp, #276]	; 0x114
 8016bbe:	e757      	b.n	8016a70 <__ssvfiscanf_r+0x60>
 8016bc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016bc2:	4621      	mov	r1, r4
 8016bc4:	4630      	mov	r0, r6
 8016bc6:	4798      	blx	r3
 8016bc8:	2800      	cmp	r0, #0
 8016bca:	d0ec      	beq.n	8016ba6 <__ssvfiscanf_r+0x196>
 8016bcc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	d159      	bne.n	8016c86 <__ssvfiscanf_r+0x276>
 8016bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8016bd6:	e05c      	b.n	8016c92 <__ssvfiscanf_r+0x282>
 8016bd8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016bda:	f042 0220 	orr.w	r2, r2, #32
 8016bde:	9241      	str	r2, [sp, #260]	; 0x104
 8016be0:	e79b      	b.n	8016b1a <__ssvfiscanf_r+0x10a>
 8016be2:	2308      	movs	r3, #8
 8016be4:	9342      	str	r3, [sp, #264]	; 0x108
 8016be6:	2304      	movs	r3, #4
 8016be8:	e7b3      	b.n	8016b52 <__ssvfiscanf_r+0x142>
 8016bea:	4629      	mov	r1, r5
 8016bec:	4640      	mov	r0, r8
 8016bee:	f000 fb19 	bl	8017224 <__sccl>
 8016bf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bf8:	9341      	str	r3, [sp, #260]	; 0x104
 8016bfa:	4605      	mov	r5, r0
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	e7a8      	b.n	8016b52 <__ssvfiscanf_r+0x142>
 8016c00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c06:	9341      	str	r3, [sp, #260]	; 0x104
 8016c08:	2300      	movs	r3, #0
 8016c0a:	e7a2      	b.n	8016b52 <__ssvfiscanf_r+0x142>
 8016c0c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016c0e:	06c3      	lsls	r3, r0, #27
 8016c10:	f53f af2e 	bmi.w	8016a70 <__ssvfiscanf_r+0x60>
 8016c14:	9b00      	ldr	r3, [sp, #0]
 8016c16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016c18:	1d19      	adds	r1, r3, #4
 8016c1a:	9100      	str	r1, [sp, #0]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	07c0      	lsls	r0, r0, #31
 8016c20:	bf4c      	ite	mi
 8016c22:	801a      	strhmi	r2, [r3, #0]
 8016c24:	601a      	strpl	r2, [r3, #0]
 8016c26:	e723      	b.n	8016a70 <__ssvfiscanf_r+0x60>
 8016c28:	2305      	movs	r3, #5
 8016c2a:	e792      	b.n	8016b52 <__ssvfiscanf_r+0x142>
 8016c2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c2e:	4621      	mov	r1, r4
 8016c30:	4630      	mov	r0, r6
 8016c32:	4798      	blx	r3
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d090      	beq.n	8016b5a <__ssvfiscanf_r+0x14a>
 8016c38:	e7c8      	b.n	8016bcc <__ssvfiscanf_r+0x1bc>
 8016c3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016c3c:	3201      	adds	r2, #1
 8016c3e:	9245      	str	r2, [sp, #276]	; 0x114
 8016c40:	6862      	ldr	r2, [r4, #4]
 8016c42:	3a01      	subs	r2, #1
 8016c44:	2a00      	cmp	r2, #0
 8016c46:	6062      	str	r2, [r4, #4]
 8016c48:	dd02      	ble.n	8016c50 <__ssvfiscanf_r+0x240>
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	6023      	str	r3, [r4, #0]
 8016c4e:	e787      	b.n	8016b60 <__ssvfiscanf_r+0x150>
 8016c50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c52:	4621      	mov	r1, r4
 8016c54:	4630      	mov	r0, r6
 8016c56:	4798      	blx	r3
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	d081      	beq.n	8016b60 <__ssvfiscanf_r+0x150>
 8016c5c:	e7b6      	b.n	8016bcc <__ssvfiscanf_r+0x1bc>
 8016c5e:	2b04      	cmp	r3, #4
 8016c60:	dc06      	bgt.n	8016c70 <__ssvfiscanf_r+0x260>
 8016c62:	466b      	mov	r3, sp
 8016c64:	4622      	mov	r2, r4
 8016c66:	a941      	add	r1, sp, #260	; 0x104
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f000 f9c5 	bl	8016ff8 <_scanf_i>
 8016c6e:	e788      	b.n	8016b82 <__ssvfiscanf_r+0x172>
 8016c70:	4b0e      	ldr	r3, [pc, #56]	; (8016cac <__ssvfiscanf_r+0x29c>)
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f43f aefc 	beq.w	8016a70 <__ssvfiscanf_r+0x60>
 8016c78:	466b      	mov	r3, sp
 8016c7a:	4622      	mov	r2, r4
 8016c7c:	a941      	add	r1, sp, #260	; 0x104
 8016c7e:	4630      	mov	r0, r6
 8016c80:	f7fc f9ee 	bl	8013060 <_scanf_float>
 8016c84:	e77d      	b.n	8016b82 <__ssvfiscanf_r+0x172>
 8016c86:	89a3      	ldrh	r3, [r4, #12]
 8016c88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016c8c:	bf18      	it	ne
 8016c8e:	f04f 30ff 	movne.w	r0, #4294967295
 8016c92:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016c9c:	e7f9      	b.n	8016c92 <__ssvfiscanf_r+0x282>
 8016c9e:	bf00      	nop
 8016ca0:	0801695d 	.word	0x0801695d
 8016ca4:	080169d7 	.word	0x080169d7
 8016ca8:	08017d52 	.word	0x08017d52
 8016cac:	08013061 	.word	0x08013061

08016cb0 <__sfputc_r>:
 8016cb0:	6893      	ldr	r3, [r2, #8]
 8016cb2:	3b01      	subs	r3, #1
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	b410      	push	{r4}
 8016cb8:	6093      	str	r3, [r2, #8]
 8016cba:	da08      	bge.n	8016cce <__sfputc_r+0x1e>
 8016cbc:	6994      	ldr	r4, [r2, #24]
 8016cbe:	42a3      	cmp	r3, r4
 8016cc0:	db01      	blt.n	8016cc6 <__sfputc_r+0x16>
 8016cc2:	290a      	cmp	r1, #10
 8016cc4:	d103      	bne.n	8016cce <__sfputc_r+0x1e>
 8016cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cca:	f7fd bbc7 	b.w	801445c <__swbuf_r>
 8016cce:	6813      	ldr	r3, [r2, #0]
 8016cd0:	1c58      	adds	r0, r3, #1
 8016cd2:	6010      	str	r0, [r2, #0]
 8016cd4:	7019      	strb	r1, [r3, #0]
 8016cd6:	4608      	mov	r0, r1
 8016cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cdc:	4770      	bx	lr

08016cde <__sfputs_r>:
 8016cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce0:	4606      	mov	r6, r0
 8016ce2:	460f      	mov	r7, r1
 8016ce4:	4614      	mov	r4, r2
 8016ce6:	18d5      	adds	r5, r2, r3
 8016ce8:	42ac      	cmp	r4, r5
 8016cea:	d101      	bne.n	8016cf0 <__sfputs_r+0x12>
 8016cec:	2000      	movs	r0, #0
 8016cee:	e007      	b.n	8016d00 <__sfputs_r+0x22>
 8016cf0:	463a      	mov	r2, r7
 8016cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	f7ff ffda 	bl	8016cb0 <__sfputc_r>
 8016cfc:	1c43      	adds	r3, r0, #1
 8016cfe:	d1f3      	bne.n	8016ce8 <__sfputs_r+0xa>
 8016d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d04 <_vfiprintf_r>:
 8016d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d08:	460c      	mov	r4, r1
 8016d0a:	b09d      	sub	sp, #116	; 0x74
 8016d0c:	4617      	mov	r7, r2
 8016d0e:	461d      	mov	r5, r3
 8016d10:	4606      	mov	r6, r0
 8016d12:	b118      	cbz	r0, 8016d1c <_vfiprintf_r+0x18>
 8016d14:	6983      	ldr	r3, [r0, #24]
 8016d16:	b90b      	cbnz	r3, 8016d1c <_vfiprintf_r+0x18>
 8016d18:	f7fe fbb6 	bl	8015488 <__sinit>
 8016d1c:	4b7c      	ldr	r3, [pc, #496]	; (8016f10 <_vfiprintf_r+0x20c>)
 8016d1e:	429c      	cmp	r4, r3
 8016d20:	d158      	bne.n	8016dd4 <_vfiprintf_r+0xd0>
 8016d22:	6874      	ldr	r4, [r6, #4]
 8016d24:	89a3      	ldrh	r3, [r4, #12]
 8016d26:	0718      	lsls	r0, r3, #28
 8016d28:	d55e      	bpl.n	8016de8 <_vfiprintf_r+0xe4>
 8016d2a:	6923      	ldr	r3, [r4, #16]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d05b      	beq.n	8016de8 <_vfiprintf_r+0xe4>
 8016d30:	2300      	movs	r3, #0
 8016d32:	9309      	str	r3, [sp, #36]	; 0x24
 8016d34:	2320      	movs	r3, #32
 8016d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d3a:	2330      	movs	r3, #48	; 0x30
 8016d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d40:	9503      	str	r5, [sp, #12]
 8016d42:	f04f 0b01 	mov.w	fp, #1
 8016d46:	46b8      	mov	r8, r7
 8016d48:	4645      	mov	r5, r8
 8016d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d4e:	b10b      	cbz	r3, 8016d54 <_vfiprintf_r+0x50>
 8016d50:	2b25      	cmp	r3, #37	; 0x25
 8016d52:	d154      	bne.n	8016dfe <_vfiprintf_r+0xfa>
 8016d54:	ebb8 0a07 	subs.w	sl, r8, r7
 8016d58:	d00b      	beq.n	8016d72 <_vfiprintf_r+0x6e>
 8016d5a:	4653      	mov	r3, sl
 8016d5c:	463a      	mov	r2, r7
 8016d5e:	4621      	mov	r1, r4
 8016d60:	4630      	mov	r0, r6
 8016d62:	f7ff ffbc 	bl	8016cde <__sfputs_r>
 8016d66:	3001      	adds	r0, #1
 8016d68:	f000 80c2 	beq.w	8016ef0 <_vfiprintf_r+0x1ec>
 8016d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d6e:	4453      	add	r3, sl
 8016d70:	9309      	str	r3, [sp, #36]	; 0x24
 8016d72:	f898 3000 	ldrb.w	r3, [r8]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	f000 80ba 	beq.w	8016ef0 <_vfiprintf_r+0x1ec>
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8016d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d86:	9304      	str	r3, [sp, #16]
 8016d88:	9307      	str	r3, [sp, #28]
 8016d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8016d90:	46a8      	mov	r8, r5
 8016d92:	2205      	movs	r2, #5
 8016d94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016d98:	485e      	ldr	r0, [pc, #376]	; (8016f14 <_vfiprintf_r+0x210>)
 8016d9a:	f7e9 fa39 	bl	8000210 <memchr>
 8016d9e:	9b04      	ldr	r3, [sp, #16]
 8016da0:	bb78      	cbnz	r0, 8016e02 <_vfiprintf_r+0xfe>
 8016da2:	06d9      	lsls	r1, r3, #27
 8016da4:	bf44      	itt	mi
 8016da6:	2220      	movmi	r2, #32
 8016da8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016dac:	071a      	lsls	r2, r3, #28
 8016dae:	bf44      	itt	mi
 8016db0:	222b      	movmi	r2, #43	; 0x2b
 8016db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016db6:	782a      	ldrb	r2, [r5, #0]
 8016db8:	2a2a      	cmp	r2, #42	; 0x2a
 8016dba:	d02a      	beq.n	8016e12 <_vfiprintf_r+0x10e>
 8016dbc:	9a07      	ldr	r2, [sp, #28]
 8016dbe:	46a8      	mov	r8, r5
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	250a      	movs	r5, #10
 8016dc4:	4641      	mov	r1, r8
 8016dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016dca:	3b30      	subs	r3, #48	; 0x30
 8016dcc:	2b09      	cmp	r3, #9
 8016dce:	d969      	bls.n	8016ea4 <_vfiprintf_r+0x1a0>
 8016dd0:	b360      	cbz	r0, 8016e2c <_vfiprintf_r+0x128>
 8016dd2:	e024      	b.n	8016e1e <_vfiprintf_r+0x11a>
 8016dd4:	4b50      	ldr	r3, [pc, #320]	; (8016f18 <_vfiprintf_r+0x214>)
 8016dd6:	429c      	cmp	r4, r3
 8016dd8:	d101      	bne.n	8016dde <_vfiprintf_r+0xda>
 8016dda:	68b4      	ldr	r4, [r6, #8]
 8016ddc:	e7a2      	b.n	8016d24 <_vfiprintf_r+0x20>
 8016dde:	4b4f      	ldr	r3, [pc, #316]	; (8016f1c <_vfiprintf_r+0x218>)
 8016de0:	429c      	cmp	r4, r3
 8016de2:	bf08      	it	eq
 8016de4:	68f4      	ldreq	r4, [r6, #12]
 8016de6:	e79d      	b.n	8016d24 <_vfiprintf_r+0x20>
 8016de8:	4621      	mov	r1, r4
 8016dea:	4630      	mov	r0, r6
 8016dec:	f7fd fb9a 	bl	8014524 <__swsetup_r>
 8016df0:	2800      	cmp	r0, #0
 8016df2:	d09d      	beq.n	8016d30 <_vfiprintf_r+0x2c>
 8016df4:	f04f 30ff 	mov.w	r0, #4294967295
 8016df8:	b01d      	add	sp, #116	; 0x74
 8016dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dfe:	46a8      	mov	r8, r5
 8016e00:	e7a2      	b.n	8016d48 <_vfiprintf_r+0x44>
 8016e02:	4a44      	ldr	r2, [pc, #272]	; (8016f14 <_vfiprintf_r+0x210>)
 8016e04:	1a80      	subs	r0, r0, r2
 8016e06:	fa0b f000 	lsl.w	r0, fp, r0
 8016e0a:	4318      	orrs	r0, r3
 8016e0c:	9004      	str	r0, [sp, #16]
 8016e0e:	4645      	mov	r5, r8
 8016e10:	e7be      	b.n	8016d90 <_vfiprintf_r+0x8c>
 8016e12:	9a03      	ldr	r2, [sp, #12]
 8016e14:	1d11      	adds	r1, r2, #4
 8016e16:	6812      	ldr	r2, [r2, #0]
 8016e18:	9103      	str	r1, [sp, #12]
 8016e1a:	2a00      	cmp	r2, #0
 8016e1c:	db01      	blt.n	8016e22 <_vfiprintf_r+0x11e>
 8016e1e:	9207      	str	r2, [sp, #28]
 8016e20:	e004      	b.n	8016e2c <_vfiprintf_r+0x128>
 8016e22:	4252      	negs	r2, r2
 8016e24:	f043 0302 	orr.w	r3, r3, #2
 8016e28:	9207      	str	r2, [sp, #28]
 8016e2a:	9304      	str	r3, [sp, #16]
 8016e2c:	f898 3000 	ldrb.w	r3, [r8]
 8016e30:	2b2e      	cmp	r3, #46	; 0x2e
 8016e32:	d10e      	bne.n	8016e52 <_vfiprintf_r+0x14e>
 8016e34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e38:	2b2a      	cmp	r3, #42	; 0x2a
 8016e3a:	d138      	bne.n	8016eae <_vfiprintf_r+0x1aa>
 8016e3c:	9b03      	ldr	r3, [sp, #12]
 8016e3e:	1d1a      	adds	r2, r3, #4
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	9203      	str	r2, [sp, #12]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	bfb8      	it	lt
 8016e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e4c:	f108 0802 	add.w	r8, r8, #2
 8016e50:	9305      	str	r3, [sp, #20]
 8016e52:	4d33      	ldr	r5, [pc, #204]	; (8016f20 <_vfiprintf_r+0x21c>)
 8016e54:	f898 1000 	ldrb.w	r1, [r8]
 8016e58:	2203      	movs	r2, #3
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	f7e9 f9d8 	bl	8000210 <memchr>
 8016e60:	b140      	cbz	r0, 8016e74 <_vfiprintf_r+0x170>
 8016e62:	2340      	movs	r3, #64	; 0x40
 8016e64:	1b40      	subs	r0, r0, r5
 8016e66:	fa03 f000 	lsl.w	r0, r3, r0
 8016e6a:	9b04      	ldr	r3, [sp, #16]
 8016e6c:	4303      	orrs	r3, r0
 8016e6e:	f108 0801 	add.w	r8, r8, #1
 8016e72:	9304      	str	r3, [sp, #16]
 8016e74:	f898 1000 	ldrb.w	r1, [r8]
 8016e78:	482a      	ldr	r0, [pc, #168]	; (8016f24 <_vfiprintf_r+0x220>)
 8016e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e7e:	2206      	movs	r2, #6
 8016e80:	f108 0701 	add.w	r7, r8, #1
 8016e84:	f7e9 f9c4 	bl	8000210 <memchr>
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	d037      	beq.n	8016efc <_vfiprintf_r+0x1f8>
 8016e8c:	4b26      	ldr	r3, [pc, #152]	; (8016f28 <_vfiprintf_r+0x224>)
 8016e8e:	bb1b      	cbnz	r3, 8016ed8 <_vfiprintf_r+0x1d4>
 8016e90:	9b03      	ldr	r3, [sp, #12]
 8016e92:	3307      	adds	r3, #7
 8016e94:	f023 0307 	bic.w	r3, r3, #7
 8016e98:	3308      	adds	r3, #8
 8016e9a:	9303      	str	r3, [sp, #12]
 8016e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9e:	444b      	add	r3, r9
 8016ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ea2:	e750      	b.n	8016d46 <_vfiprintf_r+0x42>
 8016ea4:	fb05 3202 	mla	r2, r5, r2, r3
 8016ea8:	2001      	movs	r0, #1
 8016eaa:	4688      	mov	r8, r1
 8016eac:	e78a      	b.n	8016dc4 <_vfiprintf_r+0xc0>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	f108 0801 	add.w	r8, r8, #1
 8016eb4:	9305      	str	r3, [sp, #20]
 8016eb6:	4619      	mov	r1, r3
 8016eb8:	250a      	movs	r5, #10
 8016eba:	4640      	mov	r0, r8
 8016ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ec0:	3a30      	subs	r2, #48	; 0x30
 8016ec2:	2a09      	cmp	r2, #9
 8016ec4:	d903      	bls.n	8016ece <_vfiprintf_r+0x1ca>
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d0c3      	beq.n	8016e52 <_vfiprintf_r+0x14e>
 8016eca:	9105      	str	r1, [sp, #20]
 8016ecc:	e7c1      	b.n	8016e52 <_vfiprintf_r+0x14e>
 8016ece:	fb05 2101 	mla	r1, r5, r1, r2
 8016ed2:	2301      	movs	r3, #1
 8016ed4:	4680      	mov	r8, r0
 8016ed6:	e7f0      	b.n	8016eba <_vfiprintf_r+0x1b6>
 8016ed8:	ab03      	add	r3, sp, #12
 8016eda:	9300      	str	r3, [sp, #0]
 8016edc:	4622      	mov	r2, r4
 8016ede:	4b13      	ldr	r3, [pc, #76]	; (8016f2c <_vfiprintf_r+0x228>)
 8016ee0:	a904      	add	r1, sp, #16
 8016ee2:	4630      	mov	r0, r6
 8016ee4:	f7fb fcf4 	bl	80128d0 <_printf_float>
 8016ee8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016eec:	4681      	mov	r9, r0
 8016eee:	d1d5      	bne.n	8016e9c <_vfiprintf_r+0x198>
 8016ef0:	89a3      	ldrh	r3, [r4, #12]
 8016ef2:	065b      	lsls	r3, r3, #25
 8016ef4:	f53f af7e 	bmi.w	8016df4 <_vfiprintf_r+0xf0>
 8016ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016efa:	e77d      	b.n	8016df8 <_vfiprintf_r+0xf4>
 8016efc:	ab03      	add	r3, sp, #12
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	4622      	mov	r2, r4
 8016f02:	4b0a      	ldr	r3, [pc, #40]	; (8016f2c <_vfiprintf_r+0x228>)
 8016f04:	a904      	add	r1, sp, #16
 8016f06:	4630      	mov	r0, r6
 8016f08:	f7fb ff98 	bl	8012e3c <_printf_i>
 8016f0c:	e7ec      	b.n	8016ee8 <_vfiprintf_r+0x1e4>
 8016f0e:	bf00      	nop
 8016f10:	08017c00 	.word	0x08017c00
 8016f14:	08017d4c 	.word	0x08017d4c
 8016f18:	08017c20 	.word	0x08017c20
 8016f1c:	08017be0 	.word	0x08017be0
 8016f20:	08017d52 	.word	0x08017d52
 8016f24:	08017d56 	.word	0x08017d56
 8016f28:	080128d1 	.word	0x080128d1
 8016f2c:	08016cdf 	.word	0x08016cdf

08016f30 <_scanf_chars>:
 8016f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f34:	4615      	mov	r5, r2
 8016f36:	688a      	ldr	r2, [r1, #8]
 8016f38:	4680      	mov	r8, r0
 8016f3a:	460c      	mov	r4, r1
 8016f3c:	b932      	cbnz	r2, 8016f4c <_scanf_chars+0x1c>
 8016f3e:	698a      	ldr	r2, [r1, #24]
 8016f40:	2a00      	cmp	r2, #0
 8016f42:	bf14      	ite	ne
 8016f44:	f04f 32ff 	movne.w	r2, #4294967295
 8016f48:	2201      	moveq	r2, #1
 8016f4a:	608a      	str	r2, [r1, #8]
 8016f4c:	6822      	ldr	r2, [r4, #0]
 8016f4e:	06d1      	lsls	r1, r2, #27
 8016f50:	bf5f      	itttt	pl
 8016f52:	681a      	ldrpl	r2, [r3, #0]
 8016f54:	1d11      	addpl	r1, r2, #4
 8016f56:	6019      	strpl	r1, [r3, #0]
 8016f58:	6817      	ldrpl	r7, [r2, #0]
 8016f5a:	2600      	movs	r6, #0
 8016f5c:	69a3      	ldr	r3, [r4, #24]
 8016f5e:	b1db      	cbz	r3, 8016f98 <_scanf_chars+0x68>
 8016f60:	2b01      	cmp	r3, #1
 8016f62:	d107      	bne.n	8016f74 <_scanf_chars+0x44>
 8016f64:	682b      	ldr	r3, [r5, #0]
 8016f66:	6962      	ldr	r2, [r4, #20]
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	5cd3      	ldrb	r3, [r2, r3]
 8016f6c:	b9a3      	cbnz	r3, 8016f98 <_scanf_chars+0x68>
 8016f6e:	2e00      	cmp	r6, #0
 8016f70:	d132      	bne.n	8016fd8 <_scanf_chars+0xa8>
 8016f72:	e006      	b.n	8016f82 <_scanf_chars+0x52>
 8016f74:	2b02      	cmp	r3, #2
 8016f76:	d007      	beq.n	8016f88 <_scanf_chars+0x58>
 8016f78:	2e00      	cmp	r6, #0
 8016f7a:	d12d      	bne.n	8016fd8 <_scanf_chars+0xa8>
 8016f7c:	69a3      	ldr	r3, [r4, #24]
 8016f7e:	2b01      	cmp	r3, #1
 8016f80:	d12a      	bne.n	8016fd8 <_scanf_chars+0xa8>
 8016f82:	2001      	movs	r0, #1
 8016f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f88:	f7fe fe32 	bl	8015bf0 <__locale_ctype_ptr>
 8016f8c:	682b      	ldr	r3, [r5, #0]
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	4418      	add	r0, r3
 8016f92:	7843      	ldrb	r3, [r0, #1]
 8016f94:	071b      	lsls	r3, r3, #28
 8016f96:	d4ef      	bmi.n	8016f78 <_scanf_chars+0x48>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	06da      	lsls	r2, r3, #27
 8016f9c:	bf5e      	ittt	pl
 8016f9e:	682b      	ldrpl	r3, [r5, #0]
 8016fa0:	781b      	ldrbpl	r3, [r3, #0]
 8016fa2:	703b      	strbpl	r3, [r7, #0]
 8016fa4:	682a      	ldr	r2, [r5, #0]
 8016fa6:	686b      	ldr	r3, [r5, #4]
 8016fa8:	f102 0201 	add.w	r2, r2, #1
 8016fac:	602a      	str	r2, [r5, #0]
 8016fae:	68a2      	ldr	r2, [r4, #8]
 8016fb0:	f103 33ff 	add.w	r3, r3, #4294967295
 8016fb4:	f102 32ff 	add.w	r2, r2, #4294967295
 8016fb8:	606b      	str	r3, [r5, #4]
 8016fba:	f106 0601 	add.w	r6, r6, #1
 8016fbe:	bf58      	it	pl
 8016fc0:	3701      	addpl	r7, #1
 8016fc2:	60a2      	str	r2, [r4, #8]
 8016fc4:	b142      	cbz	r2, 8016fd8 <_scanf_chars+0xa8>
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	dcc8      	bgt.n	8016f5c <_scanf_chars+0x2c>
 8016fca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016fce:	4629      	mov	r1, r5
 8016fd0:	4640      	mov	r0, r8
 8016fd2:	4798      	blx	r3
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d0c1      	beq.n	8016f5c <_scanf_chars+0x2c>
 8016fd8:	6823      	ldr	r3, [r4, #0]
 8016fda:	f013 0310 	ands.w	r3, r3, #16
 8016fde:	d105      	bne.n	8016fec <_scanf_chars+0xbc>
 8016fe0:	68e2      	ldr	r2, [r4, #12]
 8016fe2:	3201      	adds	r2, #1
 8016fe4:	60e2      	str	r2, [r4, #12]
 8016fe6:	69a2      	ldr	r2, [r4, #24]
 8016fe8:	b102      	cbz	r2, 8016fec <_scanf_chars+0xbc>
 8016fea:	703b      	strb	r3, [r7, #0]
 8016fec:	6923      	ldr	r3, [r4, #16]
 8016fee:	441e      	add	r6, r3
 8016ff0:	6126      	str	r6, [r4, #16]
 8016ff2:	2000      	movs	r0, #0
 8016ff4:	e7c6      	b.n	8016f84 <_scanf_chars+0x54>
	...

08016ff8 <_scanf_i>:
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	469a      	mov	sl, r3
 8016ffe:	4b74      	ldr	r3, [pc, #464]	; (80171d0 <_scanf_i+0x1d8>)
 8017000:	460c      	mov	r4, r1
 8017002:	4683      	mov	fp, r0
 8017004:	4616      	mov	r6, r2
 8017006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801700a:	b087      	sub	sp, #28
 801700c:	ab03      	add	r3, sp, #12
 801700e:	68a7      	ldr	r7, [r4, #8]
 8017010:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017014:	4b6f      	ldr	r3, [pc, #444]	; (80171d4 <_scanf_i+0x1dc>)
 8017016:	69a1      	ldr	r1, [r4, #24]
 8017018:	4a6f      	ldr	r2, [pc, #444]	; (80171d8 <_scanf_i+0x1e0>)
 801701a:	2903      	cmp	r1, #3
 801701c:	bf08      	it	eq
 801701e:	461a      	moveq	r2, r3
 8017020:	1e7b      	subs	r3, r7, #1
 8017022:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017026:	bf84      	itt	hi
 8017028:	f240 135d 	movwhi	r3, #349	; 0x15d
 801702c:	60a3      	strhi	r3, [r4, #8]
 801702e:	6823      	ldr	r3, [r4, #0]
 8017030:	9200      	str	r2, [sp, #0]
 8017032:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017036:	bf88      	it	hi
 8017038:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801703c:	f104 091c 	add.w	r9, r4, #28
 8017040:	6023      	str	r3, [r4, #0]
 8017042:	bf8c      	ite	hi
 8017044:	197f      	addhi	r7, r7, r5
 8017046:	2700      	movls	r7, #0
 8017048:	464b      	mov	r3, r9
 801704a:	f04f 0800 	mov.w	r8, #0
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	6831      	ldr	r1, [r6, #0]
 8017052:	ab03      	add	r3, sp, #12
 8017054:	2202      	movs	r2, #2
 8017056:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801705a:	7809      	ldrb	r1, [r1, #0]
 801705c:	f7e9 f8d8 	bl	8000210 <memchr>
 8017060:	9b01      	ldr	r3, [sp, #4]
 8017062:	b330      	cbz	r0, 80170b2 <_scanf_i+0xba>
 8017064:	f1b8 0f01 	cmp.w	r8, #1
 8017068:	d15a      	bne.n	8017120 <_scanf_i+0x128>
 801706a:	6862      	ldr	r2, [r4, #4]
 801706c:	b92a      	cbnz	r2, 801707a <_scanf_i+0x82>
 801706e:	6822      	ldr	r2, [r4, #0]
 8017070:	2108      	movs	r1, #8
 8017072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017076:	6061      	str	r1, [r4, #4]
 8017078:	6022      	str	r2, [r4, #0]
 801707a:	6822      	ldr	r2, [r4, #0]
 801707c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017080:	6022      	str	r2, [r4, #0]
 8017082:	68a2      	ldr	r2, [r4, #8]
 8017084:	1e51      	subs	r1, r2, #1
 8017086:	60a1      	str	r1, [r4, #8]
 8017088:	b19a      	cbz	r2, 80170b2 <_scanf_i+0xba>
 801708a:	6832      	ldr	r2, [r6, #0]
 801708c:	1c51      	adds	r1, r2, #1
 801708e:	6031      	str	r1, [r6, #0]
 8017090:	7812      	ldrb	r2, [r2, #0]
 8017092:	701a      	strb	r2, [r3, #0]
 8017094:	1c5d      	adds	r5, r3, #1
 8017096:	6873      	ldr	r3, [r6, #4]
 8017098:	3b01      	subs	r3, #1
 801709a:	2b00      	cmp	r3, #0
 801709c:	6073      	str	r3, [r6, #4]
 801709e:	dc07      	bgt.n	80170b0 <_scanf_i+0xb8>
 80170a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80170a4:	4631      	mov	r1, r6
 80170a6:	4658      	mov	r0, fp
 80170a8:	4798      	blx	r3
 80170aa:	2800      	cmp	r0, #0
 80170ac:	f040 8086 	bne.w	80171bc <_scanf_i+0x1c4>
 80170b0:	462b      	mov	r3, r5
 80170b2:	f108 0801 	add.w	r8, r8, #1
 80170b6:	f1b8 0f03 	cmp.w	r8, #3
 80170ba:	d1c8      	bne.n	801704e <_scanf_i+0x56>
 80170bc:	6862      	ldr	r2, [r4, #4]
 80170be:	b90a      	cbnz	r2, 80170c4 <_scanf_i+0xcc>
 80170c0:	220a      	movs	r2, #10
 80170c2:	6062      	str	r2, [r4, #4]
 80170c4:	6862      	ldr	r2, [r4, #4]
 80170c6:	4945      	ldr	r1, [pc, #276]	; (80171dc <_scanf_i+0x1e4>)
 80170c8:	6960      	ldr	r0, [r4, #20]
 80170ca:	9301      	str	r3, [sp, #4]
 80170cc:	1a89      	subs	r1, r1, r2
 80170ce:	f000 f8a9 	bl	8017224 <__sccl>
 80170d2:	9b01      	ldr	r3, [sp, #4]
 80170d4:	f04f 0800 	mov.w	r8, #0
 80170d8:	461d      	mov	r5, r3
 80170da:	68a3      	ldr	r3, [r4, #8]
 80170dc:	6822      	ldr	r2, [r4, #0]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d03a      	beq.n	8017158 <_scanf_i+0x160>
 80170e2:	6831      	ldr	r1, [r6, #0]
 80170e4:	6960      	ldr	r0, [r4, #20]
 80170e6:	f891 c000 	ldrb.w	ip, [r1]
 80170ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d032      	beq.n	8017158 <_scanf_i+0x160>
 80170f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80170f6:	d121      	bne.n	801713c <_scanf_i+0x144>
 80170f8:	0510      	lsls	r0, r2, #20
 80170fa:	d51f      	bpl.n	801713c <_scanf_i+0x144>
 80170fc:	f108 0801 	add.w	r8, r8, #1
 8017100:	b117      	cbz	r7, 8017108 <_scanf_i+0x110>
 8017102:	3301      	adds	r3, #1
 8017104:	3f01      	subs	r7, #1
 8017106:	60a3      	str	r3, [r4, #8]
 8017108:	6873      	ldr	r3, [r6, #4]
 801710a:	3b01      	subs	r3, #1
 801710c:	2b00      	cmp	r3, #0
 801710e:	6073      	str	r3, [r6, #4]
 8017110:	dd1b      	ble.n	801714a <_scanf_i+0x152>
 8017112:	6833      	ldr	r3, [r6, #0]
 8017114:	3301      	adds	r3, #1
 8017116:	6033      	str	r3, [r6, #0]
 8017118:	68a3      	ldr	r3, [r4, #8]
 801711a:	3b01      	subs	r3, #1
 801711c:	60a3      	str	r3, [r4, #8]
 801711e:	e7dc      	b.n	80170da <_scanf_i+0xe2>
 8017120:	f1b8 0f02 	cmp.w	r8, #2
 8017124:	d1ad      	bne.n	8017082 <_scanf_i+0x8a>
 8017126:	6822      	ldr	r2, [r4, #0]
 8017128:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801712c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017130:	d1bf      	bne.n	80170b2 <_scanf_i+0xba>
 8017132:	2110      	movs	r1, #16
 8017134:	6061      	str	r1, [r4, #4]
 8017136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801713a:	e7a1      	b.n	8017080 <_scanf_i+0x88>
 801713c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017140:	6022      	str	r2, [r4, #0]
 8017142:	780b      	ldrb	r3, [r1, #0]
 8017144:	702b      	strb	r3, [r5, #0]
 8017146:	3501      	adds	r5, #1
 8017148:	e7de      	b.n	8017108 <_scanf_i+0x110>
 801714a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801714e:	4631      	mov	r1, r6
 8017150:	4658      	mov	r0, fp
 8017152:	4798      	blx	r3
 8017154:	2800      	cmp	r0, #0
 8017156:	d0df      	beq.n	8017118 <_scanf_i+0x120>
 8017158:	6823      	ldr	r3, [r4, #0]
 801715a:	05d9      	lsls	r1, r3, #23
 801715c:	d50c      	bpl.n	8017178 <_scanf_i+0x180>
 801715e:	454d      	cmp	r5, r9
 8017160:	d908      	bls.n	8017174 <_scanf_i+0x17c>
 8017162:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017166:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801716a:	4632      	mov	r2, r6
 801716c:	4658      	mov	r0, fp
 801716e:	4798      	blx	r3
 8017170:	1e6f      	subs	r7, r5, #1
 8017172:	463d      	mov	r5, r7
 8017174:	454d      	cmp	r5, r9
 8017176:	d029      	beq.n	80171cc <_scanf_i+0x1d4>
 8017178:	6822      	ldr	r2, [r4, #0]
 801717a:	f012 0210 	ands.w	r2, r2, #16
 801717e:	d113      	bne.n	80171a8 <_scanf_i+0x1b0>
 8017180:	702a      	strb	r2, [r5, #0]
 8017182:	6863      	ldr	r3, [r4, #4]
 8017184:	9e00      	ldr	r6, [sp, #0]
 8017186:	4649      	mov	r1, r9
 8017188:	4658      	mov	r0, fp
 801718a:	47b0      	blx	r6
 801718c:	f8da 3000 	ldr.w	r3, [sl]
 8017190:	6821      	ldr	r1, [r4, #0]
 8017192:	1d1a      	adds	r2, r3, #4
 8017194:	f8ca 2000 	str.w	r2, [sl]
 8017198:	f011 0f20 	tst.w	r1, #32
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	d010      	beq.n	80171c2 <_scanf_i+0x1ca>
 80171a0:	6018      	str	r0, [r3, #0]
 80171a2:	68e3      	ldr	r3, [r4, #12]
 80171a4:	3301      	adds	r3, #1
 80171a6:	60e3      	str	r3, [r4, #12]
 80171a8:	eba5 0509 	sub.w	r5, r5, r9
 80171ac:	44a8      	add	r8, r5
 80171ae:	6925      	ldr	r5, [r4, #16]
 80171b0:	4445      	add	r5, r8
 80171b2:	6125      	str	r5, [r4, #16]
 80171b4:	2000      	movs	r0, #0
 80171b6:	b007      	add	sp, #28
 80171b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171bc:	f04f 0800 	mov.w	r8, #0
 80171c0:	e7ca      	b.n	8017158 <_scanf_i+0x160>
 80171c2:	07ca      	lsls	r2, r1, #31
 80171c4:	bf4c      	ite	mi
 80171c6:	8018      	strhmi	r0, [r3, #0]
 80171c8:	6018      	strpl	r0, [r3, #0]
 80171ca:	e7ea      	b.n	80171a2 <_scanf_i+0x1aa>
 80171cc:	2001      	movs	r0, #1
 80171ce:	e7f2      	b.n	80171b6 <_scanf_i+0x1be>
 80171d0:	080178a8 	.word	0x080178a8
 80171d4:	080143f9 	.word	0x080143f9
 80171d8:	080173a1 	.word	0x080173a1
 80171dc:	08017d6d 	.word	0x08017d6d

080171e0 <_read_r>:
 80171e0:	b538      	push	{r3, r4, r5, lr}
 80171e2:	4c07      	ldr	r4, [pc, #28]	; (8017200 <_read_r+0x20>)
 80171e4:	4605      	mov	r5, r0
 80171e6:	4608      	mov	r0, r1
 80171e8:	4611      	mov	r1, r2
 80171ea:	2200      	movs	r2, #0
 80171ec:	6022      	str	r2, [r4, #0]
 80171ee:	461a      	mov	r2, r3
 80171f0:	f7ee f956 	bl	80054a0 <_read>
 80171f4:	1c43      	adds	r3, r0, #1
 80171f6:	d102      	bne.n	80171fe <_read_r+0x1e>
 80171f8:	6823      	ldr	r3, [r4, #0]
 80171fa:	b103      	cbz	r3, 80171fe <_read_r+0x1e>
 80171fc:	602b      	str	r3, [r5, #0]
 80171fe:	bd38      	pop	{r3, r4, r5, pc}
 8017200:	2003bcbc 	.word	0x2003bcbc

08017204 <_sbrk_r>:
 8017204:	b538      	push	{r3, r4, r5, lr}
 8017206:	4c06      	ldr	r4, [pc, #24]	; (8017220 <_sbrk_r+0x1c>)
 8017208:	2300      	movs	r3, #0
 801720a:	4605      	mov	r5, r0
 801720c:	4608      	mov	r0, r1
 801720e:	6023      	str	r3, [r4, #0]
 8017210:	f7ee f998 	bl	8005544 <_sbrk>
 8017214:	1c43      	adds	r3, r0, #1
 8017216:	d102      	bne.n	801721e <_sbrk_r+0x1a>
 8017218:	6823      	ldr	r3, [r4, #0]
 801721a:	b103      	cbz	r3, 801721e <_sbrk_r+0x1a>
 801721c:	602b      	str	r3, [r5, #0]
 801721e:	bd38      	pop	{r3, r4, r5, pc}
 8017220:	2003bcbc 	.word	0x2003bcbc

08017224 <__sccl>:
 8017224:	b570      	push	{r4, r5, r6, lr}
 8017226:	780b      	ldrb	r3, [r1, #0]
 8017228:	2b5e      	cmp	r3, #94	; 0x5e
 801722a:	bf13      	iteet	ne
 801722c:	1c4a      	addne	r2, r1, #1
 801722e:	1c8a      	addeq	r2, r1, #2
 8017230:	784b      	ldrbeq	r3, [r1, #1]
 8017232:	2100      	movne	r1, #0
 8017234:	bf08      	it	eq
 8017236:	2101      	moveq	r1, #1
 8017238:	1e44      	subs	r4, r0, #1
 801723a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801723e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017242:	42ac      	cmp	r4, r5
 8017244:	d1fb      	bne.n	801723e <__sccl+0x1a>
 8017246:	b913      	cbnz	r3, 801724e <__sccl+0x2a>
 8017248:	3a01      	subs	r2, #1
 801724a:	4610      	mov	r0, r2
 801724c:	bd70      	pop	{r4, r5, r6, pc}
 801724e:	f081 0401 	eor.w	r4, r1, #1
 8017252:	54c4      	strb	r4, [r0, r3]
 8017254:	1c51      	adds	r1, r2, #1
 8017256:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801725a:	2d2d      	cmp	r5, #45	; 0x2d
 801725c:	f101 36ff 	add.w	r6, r1, #4294967295
 8017260:	460a      	mov	r2, r1
 8017262:	d006      	beq.n	8017272 <__sccl+0x4e>
 8017264:	2d5d      	cmp	r5, #93	; 0x5d
 8017266:	d0f0      	beq.n	801724a <__sccl+0x26>
 8017268:	b90d      	cbnz	r5, 801726e <__sccl+0x4a>
 801726a:	4632      	mov	r2, r6
 801726c:	e7ed      	b.n	801724a <__sccl+0x26>
 801726e:	462b      	mov	r3, r5
 8017270:	e7ef      	b.n	8017252 <__sccl+0x2e>
 8017272:	780e      	ldrb	r6, [r1, #0]
 8017274:	2e5d      	cmp	r6, #93	; 0x5d
 8017276:	d0fa      	beq.n	801726e <__sccl+0x4a>
 8017278:	42b3      	cmp	r3, r6
 801727a:	dcf8      	bgt.n	801726e <__sccl+0x4a>
 801727c:	3301      	adds	r3, #1
 801727e:	429e      	cmp	r6, r3
 8017280:	54c4      	strb	r4, [r0, r3]
 8017282:	dcfb      	bgt.n	801727c <__sccl+0x58>
 8017284:	3102      	adds	r1, #2
 8017286:	e7e6      	b.n	8017256 <__sccl+0x32>

08017288 <strncmp>:
 8017288:	b510      	push	{r4, lr}
 801728a:	b16a      	cbz	r2, 80172a8 <strncmp+0x20>
 801728c:	3901      	subs	r1, #1
 801728e:	1884      	adds	r4, r0, r2
 8017290:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017294:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017298:	4293      	cmp	r3, r2
 801729a:	d103      	bne.n	80172a4 <strncmp+0x1c>
 801729c:	42a0      	cmp	r0, r4
 801729e:	d001      	beq.n	80172a4 <strncmp+0x1c>
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d1f5      	bne.n	8017290 <strncmp+0x8>
 80172a4:	1a98      	subs	r0, r3, r2
 80172a6:	bd10      	pop	{r4, pc}
 80172a8:	4610      	mov	r0, r2
 80172aa:	e7fc      	b.n	80172a6 <strncmp+0x1e>

080172ac <_strtoul_l.isra.0>:
 80172ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b0:	4680      	mov	r8, r0
 80172b2:	4689      	mov	r9, r1
 80172b4:	4692      	mov	sl, r2
 80172b6:	461e      	mov	r6, r3
 80172b8:	460f      	mov	r7, r1
 80172ba:	463d      	mov	r5, r7
 80172bc:	9808      	ldr	r0, [sp, #32]
 80172be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172c2:	f7fe fc91 	bl	8015be8 <__locale_ctype_ptr_l>
 80172c6:	4420      	add	r0, r4
 80172c8:	7843      	ldrb	r3, [r0, #1]
 80172ca:	f013 0308 	ands.w	r3, r3, #8
 80172ce:	d130      	bne.n	8017332 <_strtoul_l.isra.0+0x86>
 80172d0:	2c2d      	cmp	r4, #45	; 0x2d
 80172d2:	d130      	bne.n	8017336 <_strtoul_l.isra.0+0x8a>
 80172d4:	787c      	ldrb	r4, [r7, #1]
 80172d6:	1cbd      	adds	r5, r7, #2
 80172d8:	2101      	movs	r1, #1
 80172da:	2e00      	cmp	r6, #0
 80172dc:	d05c      	beq.n	8017398 <_strtoul_l.isra.0+0xec>
 80172de:	2e10      	cmp	r6, #16
 80172e0:	d109      	bne.n	80172f6 <_strtoul_l.isra.0+0x4a>
 80172e2:	2c30      	cmp	r4, #48	; 0x30
 80172e4:	d107      	bne.n	80172f6 <_strtoul_l.isra.0+0x4a>
 80172e6:	782b      	ldrb	r3, [r5, #0]
 80172e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80172ec:	2b58      	cmp	r3, #88	; 0x58
 80172ee:	d14e      	bne.n	801738e <_strtoul_l.isra.0+0xe2>
 80172f0:	786c      	ldrb	r4, [r5, #1]
 80172f2:	2610      	movs	r6, #16
 80172f4:	3502      	adds	r5, #2
 80172f6:	f04f 32ff 	mov.w	r2, #4294967295
 80172fa:	2300      	movs	r3, #0
 80172fc:	fbb2 f2f6 	udiv	r2, r2, r6
 8017300:	fb06 fc02 	mul.w	ip, r6, r2
 8017304:	ea6f 0c0c 	mvn.w	ip, ip
 8017308:	4618      	mov	r0, r3
 801730a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801730e:	2f09      	cmp	r7, #9
 8017310:	d817      	bhi.n	8017342 <_strtoul_l.isra.0+0x96>
 8017312:	463c      	mov	r4, r7
 8017314:	42a6      	cmp	r6, r4
 8017316:	dd23      	ble.n	8017360 <_strtoul_l.isra.0+0xb4>
 8017318:	2b00      	cmp	r3, #0
 801731a:	db1e      	blt.n	801735a <_strtoul_l.isra.0+0xae>
 801731c:	4282      	cmp	r2, r0
 801731e:	d31c      	bcc.n	801735a <_strtoul_l.isra.0+0xae>
 8017320:	d101      	bne.n	8017326 <_strtoul_l.isra.0+0x7a>
 8017322:	45a4      	cmp	ip, r4
 8017324:	db19      	blt.n	801735a <_strtoul_l.isra.0+0xae>
 8017326:	fb00 4006 	mla	r0, r0, r6, r4
 801732a:	2301      	movs	r3, #1
 801732c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017330:	e7eb      	b.n	801730a <_strtoul_l.isra.0+0x5e>
 8017332:	462f      	mov	r7, r5
 8017334:	e7c1      	b.n	80172ba <_strtoul_l.isra.0+0xe>
 8017336:	2c2b      	cmp	r4, #43	; 0x2b
 8017338:	bf04      	itt	eq
 801733a:	1cbd      	addeq	r5, r7, #2
 801733c:	787c      	ldrbeq	r4, [r7, #1]
 801733e:	4619      	mov	r1, r3
 8017340:	e7cb      	b.n	80172da <_strtoul_l.isra.0+0x2e>
 8017342:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017346:	2f19      	cmp	r7, #25
 8017348:	d801      	bhi.n	801734e <_strtoul_l.isra.0+0xa2>
 801734a:	3c37      	subs	r4, #55	; 0x37
 801734c:	e7e2      	b.n	8017314 <_strtoul_l.isra.0+0x68>
 801734e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017352:	2f19      	cmp	r7, #25
 8017354:	d804      	bhi.n	8017360 <_strtoul_l.isra.0+0xb4>
 8017356:	3c57      	subs	r4, #87	; 0x57
 8017358:	e7dc      	b.n	8017314 <_strtoul_l.isra.0+0x68>
 801735a:	f04f 33ff 	mov.w	r3, #4294967295
 801735e:	e7e5      	b.n	801732c <_strtoul_l.isra.0+0x80>
 8017360:	2b00      	cmp	r3, #0
 8017362:	da09      	bge.n	8017378 <_strtoul_l.isra.0+0xcc>
 8017364:	2322      	movs	r3, #34	; 0x22
 8017366:	f8c8 3000 	str.w	r3, [r8]
 801736a:	f04f 30ff 	mov.w	r0, #4294967295
 801736e:	f1ba 0f00 	cmp.w	sl, #0
 8017372:	d107      	bne.n	8017384 <_strtoul_l.isra.0+0xd8>
 8017374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017378:	b101      	cbz	r1, 801737c <_strtoul_l.isra.0+0xd0>
 801737a:	4240      	negs	r0, r0
 801737c:	f1ba 0f00 	cmp.w	sl, #0
 8017380:	d0f8      	beq.n	8017374 <_strtoul_l.isra.0+0xc8>
 8017382:	b10b      	cbz	r3, 8017388 <_strtoul_l.isra.0+0xdc>
 8017384:	f105 39ff 	add.w	r9, r5, #4294967295
 8017388:	f8ca 9000 	str.w	r9, [sl]
 801738c:	e7f2      	b.n	8017374 <_strtoul_l.isra.0+0xc8>
 801738e:	2430      	movs	r4, #48	; 0x30
 8017390:	2e00      	cmp	r6, #0
 8017392:	d1b0      	bne.n	80172f6 <_strtoul_l.isra.0+0x4a>
 8017394:	2608      	movs	r6, #8
 8017396:	e7ae      	b.n	80172f6 <_strtoul_l.isra.0+0x4a>
 8017398:	2c30      	cmp	r4, #48	; 0x30
 801739a:	d0a4      	beq.n	80172e6 <_strtoul_l.isra.0+0x3a>
 801739c:	260a      	movs	r6, #10
 801739e:	e7aa      	b.n	80172f6 <_strtoul_l.isra.0+0x4a>

080173a0 <_strtoul_r>:
 80173a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173a2:	4c06      	ldr	r4, [pc, #24]	; (80173bc <_strtoul_r+0x1c>)
 80173a4:	4d06      	ldr	r5, [pc, #24]	; (80173c0 <_strtoul_r+0x20>)
 80173a6:	6824      	ldr	r4, [r4, #0]
 80173a8:	6a24      	ldr	r4, [r4, #32]
 80173aa:	2c00      	cmp	r4, #0
 80173ac:	bf08      	it	eq
 80173ae:	462c      	moveq	r4, r5
 80173b0:	9400      	str	r4, [sp, #0]
 80173b2:	f7ff ff7b 	bl	80172ac <_strtoul_l.isra.0>
 80173b6:	b003      	add	sp, #12
 80173b8:	bd30      	pop	{r4, r5, pc}
 80173ba:	bf00      	nop
 80173bc:	2000000c 	.word	0x2000000c
 80173c0:	20000070 	.word	0x20000070

080173c4 <__submore>:
 80173c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c8:	460c      	mov	r4, r1
 80173ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80173cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173d0:	4299      	cmp	r1, r3
 80173d2:	d11d      	bne.n	8017410 <__submore+0x4c>
 80173d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80173d8:	f7ff f914 	bl	8016604 <_malloc_r>
 80173dc:	b918      	cbnz	r0, 80173e6 <__submore+0x22>
 80173de:	f04f 30ff 	mov.w	r0, #4294967295
 80173e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80173ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80173f0:	6360      	str	r0, [r4, #52]	; 0x34
 80173f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80173f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80173fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80173fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017402:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017406:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801740a:	6020      	str	r0, [r4, #0]
 801740c:	2000      	movs	r0, #0
 801740e:	e7e8      	b.n	80173e2 <__submore+0x1e>
 8017410:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017412:	0077      	lsls	r7, r6, #1
 8017414:	463a      	mov	r2, r7
 8017416:	f000 f85a 	bl	80174ce <_realloc_r>
 801741a:	4605      	mov	r5, r0
 801741c:	2800      	cmp	r0, #0
 801741e:	d0de      	beq.n	80173de <__submore+0x1a>
 8017420:	eb00 0806 	add.w	r8, r0, r6
 8017424:	4601      	mov	r1, r0
 8017426:	4632      	mov	r2, r6
 8017428:	4640      	mov	r0, r8
 801742a:	f7fb f9a9 	bl	8012780 <memcpy>
 801742e:	f8c4 8000 	str.w	r8, [r4]
 8017432:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017436:	e7e9      	b.n	801740c <__submore+0x48>

08017438 <__ascii_wctomb>:
 8017438:	b149      	cbz	r1, 801744e <__ascii_wctomb+0x16>
 801743a:	2aff      	cmp	r2, #255	; 0xff
 801743c:	bf85      	ittet	hi
 801743e:	238a      	movhi	r3, #138	; 0x8a
 8017440:	6003      	strhi	r3, [r0, #0]
 8017442:	700a      	strbls	r2, [r1, #0]
 8017444:	f04f 30ff 	movhi.w	r0, #4294967295
 8017448:	bf98      	it	ls
 801744a:	2001      	movls	r0, #1
 801744c:	4770      	bx	lr
 801744e:	4608      	mov	r0, r1
 8017450:	4770      	bx	lr
	...

08017454 <_fstat_r>:
 8017454:	b538      	push	{r3, r4, r5, lr}
 8017456:	4c07      	ldr	r4, [pc, #28]	; (8017474 <_fstat_r+0x20>)
 8017458:	2300      	movs	r3, #0
 801745a:	4605      	mov	r5, r0
 801745c:	4608      	mov	r0, r1
 801745e:	4611      	mov	r1, r2
 8017460:	6023      	str	r3, [r4, #0]
 8017462:	f7ee f846 	bl	80054f2 <_fstat>
 8017466:	1c43      	adds	r3, r0, #1
 8017468:	d102      	bne.n	8017470 <_fstat_r+0x1c>
 801746a:	6823      	ldr	r3, [r4, #0]
 801746c:	b103      	cbz	r3, 8017470 <_fstat_r+0x1c>
 801746e:	602b      	str	r3, [r5, #0]
 8017470:	bd38      	pop	{r3, r4, r5, pc}
 8017472:	bf00      	nop
 8017474:	2003bcbc 	.word	0x2003bcbc

08017478 <_isatty_r>:
 8017478:	b538      	push	{r3, r4, r5, lr}
 801747a:	4c06      	ldr	r4, [pc, #24]	; (8017494 <_isatty_r+0x1c>)
 801747c:	2300      	movs	r3, #0
 801747e:	4605      	mov	r5, r0
 8017480:	4608      	mov	r0, r1
 8017482:	6023      	str	r3, [r4, #0]
 8017484:	f7ee f845 	bl	8005512 <_isatty>
 8017488:	1c43      	adds	r3, r0, #1
 801748a:	d102      	bne.n	8017492 <_isatty_r+0x1a>
 801748c:	6823      	ldr	r3, [r4, #0]
 801748e:	b103      	cbz	r3, 8017492 <_isatty_r+0x1a>
 8017490:	602b      	str	r3, [r5, #0]
 8017492:	bd38      	pop	{r3, r4, r5, pc}
 8017494:	2003bcbc 	.word	0x2003bcbc

08017498 <memmove>:
 8017498:	4288      	cmp	r0, r1
 801749a:	b510      	push	{r4, lr}
 801749c:	eb01 0302 	add.w	r3, r1, r2
 80174a0:	d807      	bhi.n	80174b2 <memmove+0x1a>
 80174a2:	1e42      	subs	r2, r0, #1
 80174a4:	4299      	cmp	r1, r3
 80174a6:	d00a      	beq.n	80174be <memmove+0x26>
 80174a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80174b0:	e7f8      	b.n	80174a4 <memmove+0xc>
 80174b2:	4283      	cmp	r3, r0
 80174b4:	d9f5      	bls.n	80174a2 <memmove+0xa>
 80174b6:	1881      	adds	r1, r0, r2
 80174b8:	1ad2      	subs	r2, r2, r3
 80174ba:	42d3      	cmn	r3, r2
 80174bc:	d100      	bne.n	80174c0 <memmove+0x28>
 80174be:	bd10      	pop	{r4, pc}
 80174c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80174c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80174c8:	e7f7      	b.n	80174ba <memmove+0x22>

080174ca <__malloc_lock>:
 80174ca:	4770      	bx	lr

080174cc <__malloc_unlock>:
 80174cc:	4770      	bx	lr

080174ce <_realloc_r>:
 80174ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d0:	4607      	mov	r7, r0
 80174d2:	4614      	mov	r4, r2
 80174d4:	460e      	mov	r6, r1
 80174d6:	b921      	cbnz	r1, 80174e2 <_realloc_r+0x14>
 80174d8:	4611      	mov	r1, r2
 80174da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80174de:	f7ff b891 	b.w	8016604 <_malloc_r>
 80174e2:	b922      	cbnz	r2, 80174ee <_realloc_r+0x20>
 80174e4:	f7ff f840 	bl	8016568 <_free_r>
 80174e8:	4625      	mov	r5, r4
 80174ea:	4628      	mov	r0, r5
 80174ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174ee:	f000 f814 	bl	801751a <_malloc_usable_size_r>
 80174f2:	42a0      	cmp	r0, r4
 80174f4:	d20f      	bcs.n	8017516 <_realloc_r+0x48>
 80174f6:	4621      	mov	r1, r4
 80174f8:	4638      	mov	r0, r7
 80174fa:	f7ff f883 	bl	8016604 <_malloc_r>
 80174fe:	4605      	mov	r5, r0
 8017500:	2800      	cmp	r0, #0
 8017502:	d0f2      	beq.n	80174ea <_realloc_r+0x1c>
 8017504:	4631      	mov	r1, r6
 8017506:	4622      	mov	r2, r4
 8017508:	f7fb f93a 	bl	8012780 <memcpy>
 801750c:	4631      	mov	r1, r6
 801750e:	4638      	mov	r0, r7
 8017510:	f7ff f82a 	bl	8016568 <_free_r>
 8017514:	e7e9      	b.n	80174ea <_realloc_r+0x1c>
 8017516:	4635      	mov	r5, r6
 8017518:	e7e7      	b.n	80174ea <_realloc_r+0x1c>

0801751a <_malloc_usable_size_r>:
 801751a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801751e:	1f18      	subs	r0, r3, #4
 8017520:	2b00      	cmp	r3, #0
 8017522:	bfbc      	itt	lt
 8017524:	580b      	ldrlt	r3, [r1, r0]
 8017526:	18c0      	addlt	r0, r0, r3
 8017528:	4770      	bx	lr
	...

0801752c <_init>:
 801752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801752e:	bf00      	nop
 8017530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017532:	bc08      	pop	{r3}
 8017534:	469e      	mov	lr, r3
 8017536:	4770      	bx	lr

08017538 <_fini>:
 8017538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753a:	bf00      	nop
 801753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801753e:	bc08      	pop	{r3}
 8017540:	469e      	mov	lr, r3
 8017542:	4770      	bx	lr
