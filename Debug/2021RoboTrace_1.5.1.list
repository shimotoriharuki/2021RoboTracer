
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178a8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  08017a68  08017a68  00027a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801855c  0801855c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801855c  0801855c  0002855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018564  08018564  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018564  08018564  00028564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801856c  0801856c  0002856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bc30  200001e0  0801874c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003be10  0801874c  0003be10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000379b1  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a67  00000000  00000000  00067bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e0  00000000  00000000  0006f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f10  00000000  00000000  00071808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037742  00000000  00000000  00073718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025bea  00000000  00000000  000aae5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110931  00000000  00000000  000d0a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4e4  00000000  00000000  001e13f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017a50 	.word	0x08017a50

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017a50 	.word	0x08017a50

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fc8e 	bl	80088f8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20039904 	.word	0x20039904

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fc76 	bl	80088f8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20039904 	.word	0x20039904

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 faff 	bl	8008624 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 f866 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 f860 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 f85a 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 f854 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 f84e 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 f848 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 f842 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 f83c 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 f836 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 f830 	bl	80070f8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 f824 	bl	80070f8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 f81e 	bl	80070f8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fbe9 	bl	8014900 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b fa3e 	bl	800c628 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b fa3a 	bl	800c628 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039b58 	.word	0x20039b58
 80011d0:	2003983c 	.word	0x2003983c
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZN7Encoder8clearCntEv+0x3c>)
 8001432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_ZN7Encoder8clearCntEv+0x40>)
 800143a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010000 	.word	0x40010000
 8001458:	40010400 	.word	0x40010400

0800145c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f977 	bl	800178c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800149e:	f000 f98b 	bl	80017b8 <fopen_folder_and_file>

	return ret;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <user_fclose+0x1c>)
 80014b8:	f00f fe10 	bl	80110dc <f_close>

	return ret;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20038748 	.word	0x20038748

080014cc <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
 80014e4:	e030      	b.n	8001548 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <sd_write_float+0x94>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <sd_write_float+0x98>)
 8001506:	f012 fa6b 	bl	80139e0 <sniprintf>

		if(state == ADD_WRITE){
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <sd_write_float+0x9c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <sd_write_float+0x9c>)
 8001518:	f00f fe54 	bl	80111c4 <f_lseek>
 800151c:	e003      	b.n	8001526 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800151e:	2100      	movs	r1, #0
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <sd_write_float+0x9c>)
 8001522:	f00f fe4f 	bl	80111c4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <sd_write_float+0x98>)
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <sd_write_float+0xa0>)
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <sd_write_float+0x98>)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <sd_write_float+0x9c>)
 8001534:	f00f fbbd 	bl	8010cb2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001538:	f000 f958 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbc8      	blt.n	80014e6 <sd_write_float+0x1a>
	}
	return ret;
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	08017a68 	.word	0x08017a68
 8001564:	200386b8 	.word	0x200386b8
 8001568:	20038748 	.word	0x20038748
 800156c:	20038738 	.word	0x20038738

08001570 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f900 	bl	800178c <create_path>

	if(state == OVER_WRITE){
 800158c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <sd_write_array_float+0xb0>)
 8001596:	f00f fdcb 	bl	8011130 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <sd_write_array_float+0xb4>)
 800159c:	f010 f836 	bl	801160c <f_unlink>
		f_chdir("..");
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <sd_write_array_float+0xb8>)
 80015a2:	f00f fdc5 	bl	8011130 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015a6:	f000 f907 	bl	80017b8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	e028      	b.n	8001602 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <sd_write_array_float+0xbc>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <sd_write_array_float+0xc0>)
 80015d0:	f012 fa06 	bl	80139e0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_float+0xc4>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <sd_write_array_float+0xc4>)
 80015dc:	f00f fdf2 	bl	80111c4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_float+0xc0>)
 80015e2:	f7fe fe0d 	bl	8000200 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_float+0xc8>)
 80015ea:	4911      	ldr	r1, [pc, #68]	; (8001630 <sd_write_array_float+0xc0>)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_float+0xc4>)
 80015ee:	f00f fb60 	bl	8010cb2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015f2:	f000 f8fb 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd0      	blt.n	80015b0 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <sd_write_array_float+0xc4>)
 8001610:	f00f fd64 	bl	80110dc <f_close>

	return ret;
 8001614:	7d7b      	ldrb	r3, [r7, #21]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	200385b8 	.word	0x200385b8
 8001624:	20037478 	.word	0x20037478
 8001628:	08017a84 	.word	0x08017a84
 800162c:	08017a68 	.word	0x08017a68
 8001630:	200386b8 	.word	0x200386b8
 8001634:	20038748 	.word	0x20038748
 8001638:	20038738 	.word	0x20038738

0800163c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f898 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f8ac 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_float+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_float+0x84>)
 8001672:	f012 fa09 	bl	8013a88 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_float+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_float+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_float+0x84>)
 800169c:	f010 f994 	bl	80119c8 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f8a1 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_float+0x88>)
 80016ac:	f00f fd16 	bl	80110dc <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08017a74 	.word	0x08017a74
 80016c0:	200386b8 	.word	0x200386b8
 80016c4:	20038748 	.word	0x20038748

080016c8 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f852 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e8:	f000 f866 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ec:	e019      	b.n	8001722 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4913      	ldr	r1, [pc, #76]	; (8001748 <sd_read_array_double+0x80>)
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <sd_read_array_double+0x84>)
 80016fe:	f012 f9c3 	bl	8013a88 <siscanf>
		i++;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	b29b      	uxth	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800170e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	429a      	cmp	r2, r3
 8001718:	db03      	blt.n	8001722 <sd_read_array_double+0x5a>
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <sd_read_array_double+0x88>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <sd_read_array_double+0x84>)
 8001728:	f010 f94e 	bl	80119c8 <f_gets>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1dd      	bne.n	80016ee <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001732:	f000 f85b 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <sd_read_array_double+0x88>)
 8001738:	f00f fcd0 	bl	80110dc <f_close>

	return ret;
 800173c:	7d7b      	ldrb	r3, [r7, #21]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08017a80 	.word	0x08017a80
 800174c:	200386b8 	.word	0x200386b8
 8001750:	20038748 	.word	0x20038748

08001754 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800175e:	2201      	movs	r2, #1
 8001760:	4908      	ldr	r1, [pc, #32]	; (8001784 <sd_mount+0x30>)
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <sd_mount+0x34>)
 8001764:	f00e ff32 	bl	80105cc <f_mount>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <sd_mount+0x20>
 800176e:	2301      	movs	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e001      	b.n	8001778 <sd_mount+0x24>
	else ret = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001778:	79fb      	ldrb	r3, [r7, #7]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08017a90 	.word	0x08017a90
 8001788:	20037578 	.word	0x20037578

0800178c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <create_path+0x24>)
 800179a:	f012 f9e4 	bl	8013b66 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <create_path+0x28>)
 80017a2:	f012 f9e0 	bl	8013b66 <strcpy>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200385b8 	.word	0x200385b8
 80017b4:	20037478 	.word	0x20037478

080017b8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <fopen_folder_and_file+0x24>)
 80017be:	f00f ffe7 	bl	8011790 <f_mkdir>

	f_chdir(dirpath);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <fopen_folder_and_file+0x24>)
 80017c4:	f00f fcb4 	bl	8011130 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017c8:	2213      	movs	r2, #19
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <fopen_folder_and_file+0x28>)
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <fopen_folder_and_file+0x2c>)
 80017ce:	f00e ff43 	bl	8010658 <f_open>

	f_chdir("..");
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <fopen_folder_and_file+0x30>)
 80017d4:	f00f fcac 	bl	8011130 <f_chdir>


}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200385b8 	.word	0x200385b8
 80017e0:	20037478 	.word	0x20037478
 80017e4:	20038748 	.word	0x20038748
 80017e8:	08017a84 	.word	0x08017a84

080017ec <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e007      	b.n	8001808 <bufclear+0x1c>
		buffer[i] = '\0';
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <bufclear+0x30>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b7f      	cmp	r3, #127	; 0x7f
 800180c:	ddf4      	ble.n	80017f8 <bufclear+0xc>
	}
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200386b8 	.word	0x200386b8

08001820 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <read_byte+0x54>)
 800183c:	f006 fef2 	bl	8008624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001840:	f107 010f 	add.w	r1, r7, #15
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2201      	movs	r2, #1
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <read_byte+0x58>)
 800184a:	f00a f8b3 	bl	800b9b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800184e:	f107 010e 	add.w	r1, r7, #14
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <read_byte+0x58>)
 8001858:	f00a f9e0 	bl	800bc1c <HAL_SPI_Receive>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <read_byte+0x54>)
 8001864:	f006 fede 	bl	8008624 <HAL_GPIO_WritePin>

	return val;
 8001868:	7bbb      	ldrb	r3, [r7, #14]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400
 8001878:	200397e4 	.word	0x200397e4

0800187c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <write_byte+0x54>)
 800189e:	f006 fec1 	bl	8008624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2201      	movs	r2, #1
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <write_byte+0x58>)
 80018ac:	f00a f882 	bl	800b9b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018b0:	1db9      	adds	r1, r7, #6
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	2201      	movs	r2, #1
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <write_byte+0x58>)
 80018b8:	f00a f87c 	bl	800b9b4 <HAL_SPI_Transmit>
	CS_SET;
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <write_byte+0x54>)
 80018c4:	f006 feae 	bl	8008624 <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020400 	.word	0x40020400
 80018d4:	200397e4 	.word	0x200397e4

080018d8 <IMU_init>:

uint16_t IMU_init() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff9c 	bl	8001820 <read_byte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018ec:	797b      	ldrb	r3, [r7, #5]
 80018ee:	2be0      	cmp	r3, #224	; 0xe0
 80018f0:	d119      	bne.n	8001926 <IMU_init+0x4e>
		ret = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018f6:	2101      	movs	r1, #1
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff ffbf 	bl	800187c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018fe:	2110      	movs	r1, #16
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff ffbb 	bl	800187c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001906:	2120      	movs	r1, #32
 8001908:	207f      	movs	r0, #127	; 0x7f
 800190a:	f7ff ffb7 	bl	800187c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800190e:	2106      	movs	r1, #6
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ffb3 	bl	800187c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001916:	2106      	movs	r1, #6
 8001918:	2014      	movs	r0, #20
 800191a:	f7ff ffaf 	bl	800187c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800191e:	2100      	movs	r1, #0
 8001920:	207f      	movs	r0, #127	; 0x7f
 8001922:	f7ff ffab 	bl	800187c <write_byte>
	}
	return ret;
 8001926:	88fb      	ldrh	r3, [r7, #6]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <read_gyro_data>:

void read_gyro_data() {
 8001930:	b598      	push	{r3, r4, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001934:	2033      	movs	r0, #51	; 0x33
 8001936:	f7ff ff73 	bl	8001820 <read_byte>
 800193a:	4603      	mov	r3, r0
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21c      	sxth	r4, r3
 8001940:	2034      	movs	r0, #52	; 0x34
 8001942:	f7ff ff6d 	bl	8001820 <read_byte>
 8001946:	4603      	mov	r3, r0
 8001948:	b21b      	sxth	r3, r3
 800194a:	4323      	orrs	r3, r4
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <read_gyro_data+0x64>)
 8001950:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001952:	2035      	movs	r0, #53	; 0x35
 8001954:	f7ff ff64 	bl	8001820 <read_byte>
 8001958:	4603      	mov	r3, r0
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21c      	sxth	r4, r3
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff ff5e 	bl	8001820 <read_byte>
 8001964:	4603      	mov	r3, r0
 8001966:	b21b      	sxth	r3, r3
 8001968:	4323      	orrs	r3, r4
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <read_gyro_data+0x68>)
 800196e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001970:	2037      	movs	r0, #55	; 0x37
 8001972:	f7ff ff55 	bl	8001820 <read_byte>
 8001976:	4603      	mov	r3, r0
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21c      	sxth	r4, r3
 800197c:	2038      	movs	r0, #56	; 0x38
 800197e:	f7ff ff4f 	bl	8001820 <read_byte>
 8001982:	4603      	mov	r3, r0
 8001984:	b21b      	sxth	r3, r3
 8001986:	4323      	orrs	r3, r4
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <read_gyro_data+0x6c>)
 800198c:	801a      	strh	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	bd98      	pop	{r3, r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20039780 	.word	0x20039780
 8001998:	2003977e 	.word	0x2003977e
 800199c:	20039778 	.word	0x20039778

080019a0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	805a      	strh	r2, [r3, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	809a      	strh	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	80da      	strh	r2, [r3, #6]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	811a      	strh	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	815a      	strh	r2, [r3, #10]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
{

}
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019ec:	f7ff ff74 	bl	80018d8 <IMU_init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <_ZN3IMU4initEv+0x50>)
 80019fa:	f011 ff5b 	bl	80138b4 <iprintf>

	lcd_clear();
 80019fe:	f7ff fb4f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb5b 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <_ZN3IMU4initEv+0x54>)
 8001a0c:	f7ff fb82 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a10:	2101      	movs	r1, #1
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fb54 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_ZN3IMU4initEv+0x58>)
 8001a1e:	f7ff fb79 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a26:	f005 fb67 	bl	80070f8 <HAL_Delay>

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08017a94 	.word	0x08017a94
 8001a38:	08017aa4 	.word	0x08017aa4
 8001a3c:	08017ab0 	.word	0x08017ab0

08001a40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a48:	f7ff ff72 	bl	8001930 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd6f 	bl	8000554 <__aeabi_i2d>
 8001a76:	a316      	add	r3, pc, #88	; (adr r3, 8001ad0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdd4 	bl	8000628 <__aeabi_dmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	4625      	mov	r5, r4
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd60 	bl	8000554 <__aeabi_i2d>
 8001a94:	a310      	add	r3, pc, #64	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x98>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdc5 	bl	8000628 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fc09 	bl	80002bc <__adddf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7ff f869 	bl	8000b88 <__aeabi_d2iz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad0:	eb851eb8 	.word	0xeb851eb8
 8001ad4:	3f9eb851 	.word	0x3f9eb851
 8001ad8:	70a3d70a 	.word	0x70a3d70a
 8001adc:	3fef0a3d 	.word	0x3fef0a3d
 8001ae0:	20039780 	.word	0x20039780
 8001ae4:	2003977e 	.word	0x2003977e
 8001ae8:	20039778 	.word	0x20039778
 8001aec:	20000210 	.word	0x20000210

08001af0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd2f 	bl	8000578 <__aeabi_f2d>
 8001b1a:	a316      	add	r3, pc, #88	; (adr r3, 8001b74 <_ZN3IMU8getOmegaEv+0x84>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe feac 	bl	800087c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b2e:	a313      	add	r3, pc, #76	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fd76 	bl	8000628 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <_ZN3IMU8getOmegaEv+0x80>)
 8001b4a:	f7fe fe97 	bl	800087c <__aeabi_ddiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff f85f 	bl	8000c18 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	40668000 	.word	0x40668000
 8001b74:	66666666 	.word	0x66666666
 8001b78:	40306666 	.word	0x40306666
 8001b7c:	54411744 	.word	0x54411744
 8001b80:	400921fb 	.word	0x400921fb

08001b84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b8c:	466b      	mov	r3, sp
 8001b8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f005 fab0 	bl	80070f8 <HAL_Delay>
	lcd_clear();
 8001b98:	f7ff fa82 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fa8e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ba4:	4840      	ldr	r0, [pc, #256]	; (8001ca8 <_ZN3IMU11calibrationEv+0x124>)
 8001ba6:	f7ff fab5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001baa:	2101      	movs	r1, #1
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fa87 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bb2:	483e      	ldr	r0, [pc, #248]	; (8001cac <_ZN3IMU11calibrationEv+0x128>)
 8001bb4:	f7ff faae 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bbc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bbe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc2:	1e5d      	subs	r5, r3, #1
 8001bc4:	61bd      	str	r5, [r7, #24]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	0154      	lsls	r4, r2, #5
 8001bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bde:	014b      	lsls	r3, r1, #5
 8001be0:	462b      	mov	r3, r5
 8001be2:	3301      	adds	r3, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	0154      	lsls	r4, r2, #5
 8001bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf8:	014b      	lsls	r3, r1, #5
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3303      	adds	r3, #3
 8001c02:	3307      	adds	r3, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	466b      	mov	r3, sp
 8001c0e:	3303      	adds	r3, #3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	83fb      	strh	r3, [r7, #30]
 8001c1a:	8bfa      	ldrh	r2, [r7, #30]
 8001c1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	da13      	bge.n	8001c4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	ee07 2a90 	vmov	s15, r2
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f005 fa5a 	bl	80070f8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c44:	8bfb      	ldrh	r3, [r7, #30]
 8001c46:	3301      	adds	r3, #1
 8001c48:	83fb      	strh	r3, [r7, #30]
 8001c4a:	e7e6      	b.n	8001c1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	462b      	mov	r3, r5
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d00e      	beq.n	8001c82 <_ZN3IMU11calibrationEv+0xfe>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	e7ec      	b.n	8001c5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c9c:	46b5      	mov	sp, r6
}
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	08017ab4 	.word	0x08017ab4
 8001cac:	08017ac0 	.word	0x08017ac0

08001cb0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cc0:	79bb      	ldrb	r3, [r7, #6]
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	1dfa      	adds	r2, r7, #7
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <INA260_read+0x50>)
 8001cce:	f006 fe13 	bl	80088f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	f107 020c 	add.w	r2, r7, #12
 8001cda:	2364      	movs	r3, #100	; 0x64
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <INA260_read+0x50>)
 8001ce2:	f006 ff07 	bl	8008af4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001ce6:	7b3b      	ldrb	r3, [r7, #12]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20039998 	.word	0x20039998

08001d04 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	4603      	mov	r3, r0
 8001d18:	71bb      	strb	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	717b      	strb	r3, [r7, #5]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	733b      	strb	r3, [r7, #12]
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	737b      	strb	r3, [r7, #13]
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d2e:	793b      	ldrb	r3, [r7, #4]
 8001d30:	b299      	uxth	r1, r3
 8001d32:	f107 020c 	add.w	r2, r7, #12
 8001d36:	2364      	movs	r3, #100	; 0x64
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <INA260_write+0x48>)
 8001d3e:	f006 fddb 	bl	80088f8 <HAL_I2C_Master_Transmit>
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20039998 	.word	0x20039998

08001d50 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	71bb      	strb	r3, [r7, #6]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	79f9      	ldrb	r1, [r7, #7]
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ffcb 	bl	8001d04 <INA260_write>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	461a      	mov	r2, r3
 8001d84:	21df      	movs	r1, #223	; 0xdf
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff ffe2 	bl	8001d50 <setConfig>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
{

}
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dbc:	482a      	ldr	r0, [pc, #168]	; (8001e68 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dbe:	f006 fc19 	bl	80085f4 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <_ZN8JoyStick8getValueEv+0x2e>
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4823      	ldr	r0, [pc, #140]	; (8001e6c <_ZN8JoyStick8getValueEv+0xc0>)
 8001dde:	f006 fc09 	bl	80085f4 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <_ZN8JoyStick8getValueEv+0x4e>
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfe:	481a      	ldr	r0, [pc, #104]	; (8001e68 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e00:	f006 fbf8 	bl	80085f4 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <_ZN8JoyStick8getValueEv+0x70>
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e20:	f006 fbe8 	bl	80085f4 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8JoyStick8getValueEv+0x90>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	480a      	ldr	r0, [pc, #40]	; (8001e68 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e40:	f006 fbd8 	bl	80085f4 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN8JoyStick8getValueEv+0xb0>
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40020400 	.word	0x40020400

08001e74 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b52      	cmp	r3, #82	; 0x52
 8001e84:	d112      	bne.n	8001eac <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8c:	4856      	ldr	r0, [pc, #344]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f006 fbc9 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e98:	4853      	ldr	r0, [pc, #332]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f006 fbc3 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea4:	4850      	ldr	r0, [pc, #320]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ea6:	f006 fbbd 	bl	8008624 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eaa:	e098      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b47      	cmp	r3, #71	; 0x47
 8001eb0:	d112      	bne.n	8001ed8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	484b      	ldr	r0, [pc, #300]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 fbb3 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec4:	4848      	ldr	r0, [pc, #288]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 fbad 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	4845      	ldr	r0, [pc, #276]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f006 fba7 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001ed6:	e082      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b42      	cmp	r3, #66	; 0x42
 8001edc:	d112      	bne.n	8001f04 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	4840      	ldr	r0, [pc, #256]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 fb9d 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	483d      	ldr	r0, [pc, #244]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 fb97 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efc:	483a      	ldr	r0, [pc, #232]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f006 fb91 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001f02:	e06c      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b43      	cmp	r3, #67	; 0x43
 8001f08:	d112      	bne.n	8001f30 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	4835      	ldr	r0, [pc, #212]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fb87 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	4832      	ldr	r0, [pc, #200]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fb81 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	482f      	ldr	r0, [pc, #188]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f006 fb7b 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001f2e:	e056      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b4d      	cmp	r3, #77	; 0x4d
 8001f34:	d112      	bne.n	8001f5c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3c:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fb71 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f48:	4827      	ldr	r0, [pc, #156]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fb6b 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f006 fb65 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001f5a:	e040      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b59      	cmp	r3, #89	; 0x59
 8001f60:	d112      	bne.n	8001f88 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fb5b 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f74:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fb55 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f80:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f006 fb4f 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001f86:	e02a      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b57      	cmp	r3, #87	; 0x57
 8001f8c:	d112      	bne.n	8001fb4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f94:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fb45 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa0:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fb3f 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fae:	f006 fb39 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001fb2:	e014      	b.n	8001fde <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b7e      	cmp	r3, #126	; 0x7e
 8001fb8:	d111      	bne.n	8001fde <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fb2f 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fcc:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fb29 	bl	8008624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f006 fb23 	bl	8008624 <HAL_GPIO_WritePin>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40020000 	.word	0x40020000

08001fec <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200a:	4813      	ldr	r0, [pc, #76]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 800200c:	f006 fb0a 	bl	8008624 <HAL_GPIO_WritePin>
 8002010:	e009      	b.n	8002026 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 8002022:	f006 faff 	bl	8008624 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002026:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d106      	bne.n	800203c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002034:	4808      	ldr	r0, [pc, #32]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 8002036:	f006 faf5 	bl	8008624 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800203a:	e009      	b.n	8002050 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800203c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <_ZN3LED2LREaa+0x6c>)
 800204c:	f006 faea 	bl	8008624 <HAL_GPIO_WritePin>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40020000 	.word	0x40020000

0800205c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800205c:	b580      	push	{r7, lr}
 800205e:	b092      	sub	sp, #72	; 0x48
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fe92 	bl	8001d94 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
 8002078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207a:	331c      	adds	r3, #28
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	429a      	cmp	r2, r3
 8002084:	d008      	beq.n	8002098 <_ZN10LineSensorC1Ev+0x3c>
 8002086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	2200      	movs	r2, #0
 800208e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002092:	3302      	adds	r3, #2
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
 8002096:	e7f2      	b.n	800207e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	3338      	adds	r3, #56	; 0x38
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d009      	beq.n	80020c6 <_ZN10LineSensorC1Ev+0x6a>
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	623b      	str	r3, [r7, #32]
		s = 0;
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c0:	3304      	adds	r3, #4
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
 80020c4:	e7f1      	b.n	80020aa <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3338      	adds	r3, #56	; 0x38
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d009      	beq.n	80020f4 <_ZN10LineSensorC1Ev+0x98>
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e2:	617b      	str	r3, [r7, #20]
		m = 0;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	3304      	adds	r3, #4
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	e7f1      	b.n	80020d8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	3338      	adds	r3, #56	; 0x38
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	429a      	cmp	r2, r3
 800210c:	d009      	beq.n	8002122 <_ZN10LineSensorC1Ev+0xc6>
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002118:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	3304      	adds	r3, #4
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	e7f1      	b.n	8002106 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	3748      	adds	r7, #72	; 0x48
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	220e      	movs	r2, #14
 8002138:	4619      	mov	r1, r3
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800213c:	f005 f842 	bl	80071c4 <HAL_ADC_Start_DMA>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200398bc 	.word	0x200398bc

0800214c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b0d      	cmp	r3, #13
 800215c:	dc2f      	bgt.n	80021be <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3392      	adds	r3, #146	; 0x92
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	33a0      	adds	r3, #160	; 0xa0
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a5b      	subs	r3, r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	440b      	add	r3, r1
 80021aa:	3306      	adds	r3, #6
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e7cc      	b.n	8002158 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b09      	cmp	r3, #9
 80021d0:	d902      	bls.n	80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]


}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	2000021c 	.word	0x2000021c

080021e8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021fa:	2b0d      	cmp	r3, #13
 80021fc:	f200 80b8 	bhi.w	8002370 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002206:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800220a:	2b09      	cmp	r3, #9
 800220c:	d81c      	bhi.n	8002248 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800220e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002212:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002216:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4423      	add	r3, r4
 8002226:	3306      	adds	r3, #6
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4403      	add	r3, r0
 800222c:	3304      	adds	r3, #4
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	008b      	lsls	r3, r1, #2
 8002232:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002236:	440b      	add	r3, r1
 8002238:	3b30      	subs	r3, #48	; 0x30
 800223a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800223c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002240:	3301      	adds	r3, #1
 8002242:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002246:	e7de      	b.n	8002206 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800224e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002252:	2b09      	cmp	r3, #9
 8002254:	d84d      	bhi.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002256:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225a:	3301      	adds	r3, #1
 800225c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002260:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002264:	2b09      	cmp	r3, #9
 8002266:	d83e      	bhi.n	80022e6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002268:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002272:	4413      	add	r3, r2
 8002274:	3b30      	subs	r3, #48	; 0x30
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002284:	4413      	add	r3, r2
 8002286:	3b30      	subs	r3, #48	; 0x30
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002294:	d521      	bpl.n	80022da <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002296:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a0:	4413      	add	r3, r2
 80022a2:	3b30      	subs	r3, #48	; 0x30
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022b6:	440a      	add	r2, r1
 80022b8:	3a30      	subs	r2, #48	; 0x30
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022c2:	440b      	add	r3, r1
 80022c4:	3b30      	subs	r3, #48	; 0x30
 80022c6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022d2:	4413      	add	r3, r2
 80022d4:	3b30      	subs	r3, #48	; 0x30
 80022d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022de:	3301      	adds	r3, #1
 80022e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e4:	e7bc      	b.n	8002260 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ea:	3301      	adds	r3, #1
 80022ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f0:	e7ad      	b.n	800224e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f93f 	bl	8000578 <__aeabi_f2d>
 80022fa:	a32a      	add	r3, pc, #168	; (adr r3, 80023a4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f992 	bl	8000628 <__aeabi_dmul>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	4625      	mov	r5, r4
 800230a:	461c      	mov	r4, r3
 800230c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f92d 	bl	8000578 <__aeabi_f2d>
 800231e:	a31c      	add	r3, pc, #112	; (adr r3, 8002390 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f980 	bl	8000628 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4620      	mov	r0, r4
 800232e:	4629      	mov	r1, r5
 8002330:	f7fd ffc4 	bl	80002bc <__adddf3>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc68 	bl	8000c18 <__aeabi_d2f>
 8002348:	4601      	mov	r1, r0
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002368:	3301      	adds	r3, #1
 800236a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800236e:	e742      	b.n	80021f6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002378:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	f3af 8000 	nop.w
 8002390:	66666666 	.word	0x66666666
 8002394:	3fee6666 	.word	0x3fee6666
 8002398:	20000220 	.word	0x20000220
 800239c:	20000214 	.word	0x20000214
 80023a0:	20000218 	.word	0x20000218
 80023a4:	9999999a 	.word	0x9999999a
 80023a8:	3fa99999 	.word	0x3fa99999

080023ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b0a9      	sub	sp, #164	; 0xa4
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f004 fe9f 	bl	80070f8 <HAL_Delay>

	lcd_clear();
 80023ba:	f7fe fe71 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fe7d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023c6:	48b1      	ldr	r0, [pc, #708]	; (800268c <_ZN10LineSensor11calibrationEv+0x2e0>)
 80023c8:	f7fe fea4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023cc:	2101      	movs	r1, #1
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fe76 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023d4:	48ae      	ldr	r0, [pc, #696]	; (8002690 <_ZN10LineSensor11calibrationEv+0x2e4>)
 80023d6:	f7fe fe9d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023da:	2300      	movs	r3, #0
 80023dc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80023e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023e4:	2b0d      	cmp	r3, #13
 80023e6:	d823      	bhi.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80023e8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	32b0      	adds	r2, #176	; 0xb0
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	440a      	add	r2, r1
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002400:	440b      	add	r3, r1
 8002402:	3b60      	subs	r3, #96	; 0x60
 8002404:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002406:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800240a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	32b0      	adds	r2, #176	; 0xb0
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	440a      	add	r2, r1
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800241e:	440b      	add	r3, r1
 8002420:	3b98      	subs	r3, #152	; 0x98
 8002422:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002424:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002428:	3301      	adds	r3, #1
 800242a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800242e:	e7d7      	b.n	80023e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fcb8 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800243c:	4603      	mov	r3, r0
 800243e:	2b02      	cmp	r3, #2
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d079      	beq.n	8002540 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800244c:	2300      	movs	r3, #0
 800244e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002452:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002456:	2b0d      	cmp	r3, #13
 8002458:	d850      	bhi.n	80024fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800245a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002464:	4413      	add	r3, r2
 8002466:	3b60      	subs	r3, #96	; 0x60
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	33b0      	adds	r3, #176	; 0xb0
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d50f      	bpl.n	80024a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002486:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800248a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	32b0      	adds	r2, #176	; 0xb0
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	440a      	add	r2, r1
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800249e:	440b      	add	r3, r1
 80024a0:	3b60      	subs	r3, #96	; 0x60
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e024      	b.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024b0:	4413      	add	r3, r2
 80024b2:	3b98      	subs	r3, #152	; 0x98
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	33b0      	adds	r3, #176	; 0xb0
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd0e      	ble.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024d2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	32b0      	adds	r2, #176	; 0xb0
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	440a      	add	r2, r1
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024ea:	440b      	add	r3, r1
 80024ec:	3b98      	subs	r3, #152	; 0x98
 80024ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024f0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024f4:	3301      	adds	r3, #1
 80024f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024fa:	e7aa      	b.n	8002452 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002502:	4618      	mov	r0, r3
 8002504:	f001 f87e 	bl	8003604 <_ZN12RotarySwitch8getValueEv>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800251e:	2201      	movs	r2, #1
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd61 	bl	8001fec <_ZN3LED2LREaa>
 800252a:	e781      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002532:	2200      	movs	r2, #0
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd57 	bl	8001fec <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800253e:	e777      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 8002540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002554:	3338      	adds	r3, #56	; 0x38
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800255a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800255e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002562:	429a      	cmp	r2, r3
 8002564:	d016      	beq.n	8002594 <_ZN10LineSensor11calibrationEv+0x1e8>
 8002566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800256e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ffff 	bl	8000578 <__aeabi_f2d>
 800257a:	4603      	mov	r3, r0
 800257c:	460c      	mov	r4, r1
 800257e:	461a      	mov	r2, r3
 8002580:	4623      	mov	r3, r4
 8002582:	4844      	ldr	r0, [pc, #272]	; (8002694 <_ZN10LineSensor11calibrationEv+0x2e8>)
 8002584:	f011 f996 	bl	80138b4 <iprintf>
	for(const auto &m : max_values){
 8002588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258c:	3304      	adds	r3, #4
 800258e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002592:	e7e2      	b.n	800255a <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 8002594:	200a      	movs	r0, #10
 8002596:	f011 f9a5 	bl	80138e4 <putchar>
	for(const auto &m : min_values){
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ae:	3338      	adds	r3, #56	; 0x38
 80025b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d014      	beq.n	80025e6 <_ZN10LineSensor11calibrationEv+0x23a>
 80025bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025c0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffd6 	bl	8000578 <__aeabi_f2d>
 80025cc:	4603      	mov	r3, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	461a      	mov	r2, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	482f      	ldr	r0, [pc, #188]	; (8002694 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025d6:	f011 f96d 	bl	80138b4 <iprintf>
	for(const auto &m : min_values){
 80025da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025de:	3304      	adds	r3, #4
 80025e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025e4:	e7e5      	b.n	80025b2 <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 80025e6:	200a      	movs	r0, #10
 80025e8:	f011 f97c 	bl	80138e4 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80025f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025f6:	2b0d      	cmp	r3, #13
 80025f8:	d826      	bhi.n	8002648 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002604:	4413      	add	r3, r2
 8002606:	3b60      	subs	r3, #96	; 0x60
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002616:	4413      	add	r3, r2
 8002618:	3b98      	subs	r3, #152	; 0x98
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002622:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002626:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002698 <_ZN10LineSensor11calibrationEv+0x2ec>
 800262a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	3392      	adds	r3, #146	; 0x92
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3304      	adds	r3, #4
 8002638:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800263c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002640:	3301      	adds	r3, #1
 8002642:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002646:	e7d4      	b.n	80025f2 <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002648:	2300      	movs	r3, #0
 800264a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800264e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002652:	2b0d      	cmp	r3, #13
 8002654:	d815      	bhi.n	8002682 <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 8002656:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800265a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002664:	440a      	add	r2, r1
 8002666:	3a98      	subs	r2, #152	; 0x98
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	33a0      	adds	r3, #160	; 0xa0
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3304      	adds	r3, #4
 8002674:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002676:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800267a:	3301      	adds	r3, #1
 800267c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002680:	e7e5      	b.n	800264e <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 8002682:	bf00      	nop
 8002684:	37a4      	adds	r7, #164	; 0xa4
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	08017acc 	.word	0x08017acc
 8002690:	08017ad8 	.word	0x08017ad8
 8002694:	08017ae4 	.word	0x08017ae4
 8002698:	447a0000 	.word	0x447a0000

0800269c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	3338      	adds	r3, #56	; 0x38
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d012      	beq.n	80026e8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002708 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	db02      	blt.n	80026e0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026da:	7ffb      	ldrb	r3, [r7, #31]
 80026dc:	3301      	adds	r3, #1
 80026de:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	3304      	adds	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e7e8      	b.n	80026ba <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	2b0d      	cmp	r3, #13
 80026ec:	d902      	bls.n	80026f4 <_ZN10LineSensor13emergencyStopEv+0x58>
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
 80026f2:	e001      	b.n	80026f8 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]

	return flag;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]

}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	44160000 	.word	0x44160000

0800270c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensor>:
float monitor_target_omega;
float monitor_r;

float mon_diff, mon_diff_lpf;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor) : kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0), excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0)
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	669a      	str	r2, [r3, #104]	; 0x68
{
	motor_ = motor;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	611a      	str	r2, [r3, #16]
}
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80027a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80027b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80027c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80027e4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002804:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002810:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800281c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002828:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800283c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002844:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe95 	bl	8000578 <__aeabi_f2d>
 800284e:	a318      	add	r3, pc, #96	; (adr r3, 80028b0 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fee8 	bl	8000628 <__aeabi_dmul>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	4625      	mov	r5, r4
 800285e:	461c      	mov	r4, r3
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe87 	bl	8000578 <__aeabi_f2d>
 800286a:	a313      	add	r3, pc, #76	; (adr r3, 80028b8 <_ZN9LineTrace9calcErrorEv+0x128>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd feda 	bl	8000628 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fd fd1e 	bl	80002bc <__adddf3>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	4618      	mov	r0, r3
 8002886:	4621      	mov	r1, r4
 8002888:	f7fe f9c6 	bl	8000c18 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002894:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <_ZN9LineTrace9calcErrorEv+0x134>)
 800289a:	6013      	str	r3, [r2, #0]

	return diff;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	ee07 3a90 	vmov	s15, r3

}
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	f3af 8000 	nop.w
 80028b0:	47ae147b 	.word	0x47ae147b
 80028b4:	3fb47ae1 	.word	0x3fb47ae1
 80028b8:	d70a3d71 	.word	0xd70a3d71
 80028bc:	3fed70a3 	.word	0x3fed70a3
 80028c0:	20000258 	.word	0x20000258
 80028c4:	20000260 	.word	0x20000260
 80028c8:	2000025c 	.word	0x2000025c
 80028cc:	00000000 	.word	0x00000000

080028d0 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff59 	bl	8002790 <_ZN9LineTrace9calcErrorEv>
 80028de:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	p = kp_ * diff;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002902:	ed97 7a05 	vldr	s14, [r7, #20]
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	ed93 7a06 	vldr	s14, [r3, #24]
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	edd7 6a05 	vldr	s13, [r7, #20]
 800291e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a32a      	add	r3, pc, #168	; (adr r3, 80029d8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd ffa2 	bl	800087c <__aeabi_ddiv>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4618      	mov	r0, r3
 800293e:	4621      	mov	r1, r4
 8002940:	f7fe f96a 	bl	8000c18 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fe13 	bl	8000578 <__aeabi_f2d>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ed93 7a07 	vldr	s14, [r3, #28]
 800295c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	ee17 0a90 	vmov	r0, s15
 8002968:	f7fd fe06 	bl	8000578 <__aeabi_f2d>
 800296c:	a31a      	add	r3, pc, #104	; (adr r3, 80029d8 <_ZN9LineTrace8pidTraceEv+0x108>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fe59 	bl	8000628 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd fc9d 	bl	80002bc <__adddf3>
 8002982:	4603      	mov	r3, r0
 8002984:	460c      	mov	r4, r1
 8002986:	4618      	mov	r0, r3
 8002988:	4621      	mov	r1, r4
 800298a:	f7fe f945 	bl	8000c18 <__aeabi_d2f>
 800298e:	4602      	mov	r2, r0
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002992:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002994:	ed97 7a04 	vldr	s14, [r7, #16]
 8002998:	edd7 7a03 	vldr	s15, [r7, #12]
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80029b8:	edd7 0a02 	vldr	s1, [r7, #8]
 80029bc:	eeb0 0a67 	vmov.f32	s0, s15
 80029c0:	4610      	mov	r0, r2
 80029c2:	f001 f95d 	bl	8003c80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <_ZN9LineTrace8pidTraceEv+0x114>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6013      	str	r3, [r2, #0]

}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}
 80029d4:	f3af 8000 	nop.w
 80029d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029dc:	3f50624d 	.word	0x3f50624d
 80029e0:	20000268 	.word	0x20000268
 80029e4:	20000264 	.word	0x20000264

080029e8 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2201      	movs	r2, #1
 80029f6:	4912      	ldr	r1, [pc, #72]	; (8002a40 <_ZN9LineTrace4initEv+0x58>)
 80029f8:	4812      	ldr	r0, [pc, #72]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 80029fa:	f7fe fe1f 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	2201      	movs	r2, #1
 8002a04:	4910      	ldr	r1, [pc, #64]	; (8002a48 <_ZN9LineTrace4initEv+0x60>)
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 8002a08:	f7fe fe18 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	2201      	movs	r2, #1
 8002a12:	490e      	ldr	r1, [pc, #56]	; (8002a4c <_ZN9LineTrace4initEv+0x64>)
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 8002a16:	f7fe fe11 	bl	800163c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a22:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a26:	eeb0 1a66 	vmov.f32	s2, s13
 8002a2a:	eef0 0a47 	vmov.f32	s1, s14
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f80c 	bl	8002a50 <_ZN9LineTrace7setGainEfff>

}
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08017b24 	.word	0x08017b24
 8002a44:	08017b2c 	.word	0x08017b2c
 8002a48:	08017b34 	.word	0x08017b34
 8002a4c:	08017b3c 	.word	0x08017b3c

08002a50 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a60:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	61da      	str	r2, [r3, #28]
	kd_ = kd;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	return kp_;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	ee07 3a90 	vmov	s15, r3
}
 8002a92:	eeb0 0a67 	vmov.f32	s0, s15
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN9LineTrace5getKiEv>:


float LineTrace::getKi()
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	return ki_;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	ee07 3a90 	vmov	s15, r3
}
 8002ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return kd_;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	ee07 3a90 	vmov	s15, r3
}
 8002ace:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <_ZN9LineTrace4flipEv+0x5c>
		pidTrace();
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fed0 	bl	80028d0 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fdb1 	bl	800269c <_ZN10LineSensor13emergencyStopEv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002b80 <_ZN9LineTrace4flipEv+0x68>
 8002b48:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002b80 <_ZN9LineTrace4flipEv+0x68>
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fa2f 	bl	8002fb0 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	330c      	adds	r3, #12
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fa45 	bl	8001fec <_ZN3LED2LREaa>
		else{
			led_.LR(0, -1);

		}
	}
}
 8002b62:	e007      	b.n	8002b74 <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	330c      	adds	r3, #12
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa3c 	bl	8001fec <_ZN3LED2LREaa>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f3af 8000 	nop.w
	...

08002b88 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	i_reset_flag_ = true;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	0000      	movs	r0, r0
	...

08002bb0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	motor_->setRatio(0, 0);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002be0 <_ZN9LineTrace4stopEv+0x30>
 8002bc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002be0 <_ZN9LineTrace4stopEv+0x30>
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f9ef 	bl	8002fb0 <_ZN5Motor8setRatioEdd>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
	...

08002be8 <_ZN9LineTrace8waitGoalEv>:

void LineTrace::waitGoal()
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	side_sensor_->resetWhiteLineCnt();
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fdef 	bl	80037d8 <_ZN10SideSensor17resetWhiteLineCntEv>

	while(1){
		if(side_sensor_->getWhiteLineCntR() == 2){
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fdde 	bl	80037c0 <_ZN10SideSensor16getWhiteLineCntREv>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d100      	bne.n	8002c16 <_ZN9LineTrace8waitGoalEv+0x2e>
 8002c14:	e7f1      	b.n	8002bfa <_ZN9LineTrace8waitGoalEv+0x12>
			break;
 8002c16:	bf00      	nop
		}
	}
	stop();
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ffc9 	bl	8002bb0 <_ZN9LineTrace4stopEv>

}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c3e:	3302      	adds	r3, #2
 8002c40:	2200      	movs	r2, #0
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c56:	3306      	adds	r3, #6
 8002c58:	2200      	movs	r2, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002c78:	f7fe fd6c 	bl	8001754 <sd_mount>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d019      	beq.n	8002cc0 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002c8c:	481b      	ldr	r0, [pc, #108]	; (8002cfc <_ZN6Logger10sdCardInitEv+0x90>)
 8002c8e:	f010 fe99 	bl	80139c4 <puts>

	  lcd_clear();
 8002c92:	f7fe fa05 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c96:	2100      	movs	r1, #0
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fe fa11 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002c9e:	4818      	ldr	r0, [pc, #96]	; (8002d00 <_ZN6Logger10sdCardInitEv+0x94>)
 8002ca0:	f7fe fa38 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe fa0a 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002cac:	4815      	ldr	r0, [pc, #84]	; (8002d04 <_ZN6Logger10sdCardInitEv+0x98>)
 8002cae:	f7fe fa31 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb6:	f004 fa1f 	bl	80070f8 <HAL_Delay>

	  ret = true;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e018      	b.n	8002cf2 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002cc0:	4811      	ldr	r0, [pc, #68]	; (8002d08 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002cc2:	f010 fe7f 	bl	80139c4 <puts>

	  lcd_clear();
 8002cc6:	f7fe f9eb 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fe f9f7 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <_ZN6Logger10sdCardInitEv+0x94>)
 8002cd4:	f7fe fa1e 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe f9f0 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002ce0:	480a      	ldr	r0, [pc, #40]	; (8002d0c <_ZN6Logger10sdCardInitEv+0xa0>)
 8002ce2:	f7fe fa17 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cea:	f004 fa05 	bl	80070f8 <HAL_Delay>

	  ret = false;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	08017b44 	.word	0x08017b44
 8002d00:	08017b54 	.word	0x08017b54
 8002d04:	08017b60 	.word	0x08017b60
 8002d08:	08017b68 	.word	0x08017b68
 8002d0c:	08017b78 	.word	0x08017b78

08002d10 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d024      	beq.n	8002d72 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d2e:	3302      	adds	r3, #2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d42:	3302      	adds	r3, #2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d50:	3302      	adds	r3, #2
 8002d52:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d905      	bls.n	8002d72 <_ZN6Logger8storeLogEf+0x62>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	2200      	movs	r2, #0
 8002d70:	801a      	strh	r2, [r3, #0]
	}
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d027      	beq.n	8002de6 <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002da6:	3310      	adds	r3, #16
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002db6:	3304      	adds	r3, #4
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002dce:	3304      	adds	r3, #4
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d905      	bls.n	8002de6 <_ZN6Logger9storeLog2Ef+0x68>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002de0:	3304      	adds	r3, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	801a      	strh	r2, [r3, #0]
	}
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af02      	add	r7, sp, #8
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	68b8      	ldr	r0, [r7, #8]
 8002e0e:	f7fe fbaf 	bl	8001570 <sd_write_array_float>
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af02      	add	r7, sp, #8
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	2200      	movs	r2, #0
 8002e30:	9200      	str	r2, [sp, #0]
 8002e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	68b8      	ldr	r0, [r7, #8]
 8002e3a:	f7fe fb99 	bl	8001570 <sd_write_array_float>
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af02      	add	r7, sp, #8
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002e5a:	3380      	adds	r3, #128	; 0x80
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	9200      	str	r2, [sp, #0]
 8002e60:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	68b8      	ldr	r0, [r7, #8]
 8002e68:	f7fe fb82 	bl	8001570 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 8002e72:	3340      	adds	r3, #64	; 0x40
 8002e74:	2200      	movs	r2, #0
 8002e76:	9200      	str	r2, [sp, #0]
 8002e78:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	68b8      	ldr	r0, [r7, #8]
 8002e80:	f7fe fb76 	bl	8001570 <sd_write_array_float>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	805a      	strh	r2, [r3, #2]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <_ZN5Motor4initEv>:

void Motor::init()
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002ef4:	2108      	movs	r1, #8
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <_ZN5Motor4initEv+0x20>)
 8002ef8:	f009 fac6 	bl	800c488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002efc:	210c      	movs	r1, #12
 8002efe:	4803      	ldr	r0, [pc, #12]	; (8002f0c <_ZN5Motor4initEv+0x20>)
 8002f00:	f009 fac2 	bl	800c488 <HAL_TIM_PWM_Start>

}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	2003987c 	.word	0x2003987c

08002f10 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da0d      	bge.n	8002f3e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f28:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f2a:	f005 fb7b 	bl	8008624 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	425b      	negs	r3, r3
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	81fb      	strh	r3, [r7, #14]
 8002f3c:	e00a      	b.n	8002f54 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f44:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f46:	f005 fb6d 	bl	8008624 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da0d      	bge.n	8002f7a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f64:	4810      	ldr	r0, [pc, #64]	; (8002fa8 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f66:	f005 fb5d 	bl	8008624 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	425b      	negs	r3, r3
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	81bb      	strh	r3, [r7, #12]
 8002f78:	e00a      	b.n	8002f90 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f80:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f82:	f005 fb4f 	bl	8008624 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002f90:	89fa      	ldrh	r2, [r7, #14]
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002f98:	89ba      	ldrh	r2, [r7, #12]
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	2003987c 	.word	0x2003987c

08002fb0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6178      	str	r0, [r7, #20]
 8002fb8:	ed87 0b02 	vstr	d0, [r7, #8]
 8002fbc:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fca:	f7fd fdbd 	bl	8000b48 <__aeabi_dcmpgt>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <_ZN5Motor8setRatioEdd+0x30>
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	4c2b      	ldr	r4, [pc, #172]	; (8003088 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fda:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002fde:	e00e      	b.n	8002ffe <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	4b29      	ldr	r3, [pc, #164]	; (800308c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fea:	f7fd fd8f 	bl	8000b0c <__aeabi_dcmplt>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <_ZN5Motor8setRatioEdd+0x4e>
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	4c24      	ldr	r4, [pc, #144]	; (800308c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ffa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <_ZN5Motor8setRatioEdd+0xd8>)
 8003004:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003008:	f7fd fd9e 	bl	8000b48 <__aeabi_dcmpgt>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <_ZN5Motor8setRatioEdd+0x6e>
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	4c1c      	ldr	r4, [pc, #112]	; (8003088 <_ZN5Motor8setRatioEdd+0xd8>)
 8003018:	e9c7 3400 	strd	r3, r4, [r7]
 800301c:	e00e      	b.n	800303c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <_ZN5Motor8setRatioEdd+0xdc>)
 8003024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003028:	f7fd fd70 	bl	8000b0c <__aeabi_dcmplt>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d004      	beq.n	800303c <_ZN5Motor8setRatioEdd+0x8c>
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	4c15      	ldr	r4, [pc, #84]	; (800308c <_ZN5Motor8setRatioEdd+0xdc>)
 8003038:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <_ZN5Motor8setRatioEdd+0xe0>)
 8003042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003046:	f7fd faef 	bl	8000628 <__aeabi_dmul>
 800304a:	4603      	mov	r3, r0
 800304c:	460c      	mov	r4, r1
 800304e:	4618      	mov	r0, r3
 8003050:	4621      	mov	r1, r4
 8003052:	f7fd fd99 	bl	8000b88 <__aeabi_d2iz>
 8003056:	4603      	mov	r3, r0
 8003058:	b21a      	sxth	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <_ZN5Motor8setRatioEdd+0xe0>)
 8003064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003068:	f7fd fade 	bl	8000628 <__aeabi_dmul>
 800306c:	4603      	mov	r3, r0
 800306e:	460c      	mov	r4, r1
 8003070:	4618      	mov	r0, r3
 8003072:	4621      	mov	r1, r4
 8003074:	f7fd fd88 	bl	8000b88 <__aeabi_d2iz>
 8003078:	4603      	mov	r3, r0
 800307a:	b21a      	sxth	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	805a      	strh	r2, [r3, #2]

}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	3ff00000 	.word	0x3ff00000
 800308c:	bff00000 	.word	0xbff00000
 8003090:	409c2000 	.word	0x409c2000

08003094 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8003094:	b490      	push	{r4, r7}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f04f 0400 	mov.w	r4, #0
 80030ba:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc90      	pop	{r4, r7}
 80030e8:	4770      	bx	lr
 80030ea:	0000      	movs	r0, r0
 80030ec:	0000      	movs	r0, r0
	...

080030f0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fcf6 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8003104:	ee10 3a10 	vmov	r3, s0
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fa35 	bl	8000578 <__aeabi_f2d>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f95e 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8003120:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8003124:	a357      	add	r3, pc, #348	; (adr r3, 8003284 <_ZN8Odometry12calcPotitionEv+0x194>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800312e:	f7fd fa7b 	bl	8000628 <__aeabi_dmul>
 8003132:	4603      	mov	r3, r0
 8003134:	460c      	mov	r4, r1
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7fd fa18 	bl	8000578 <__aeabi_f2d>
 8003148:	4682      	mov	sl, r0
 800314a:	468b      	mov	fp, r1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003160:	f7fd fb8c 	bl	800087c <__aeabi_ddiv>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4640      	mov	r0, r8
 800316a:	4649      	mov	r1, r9
 800316c:	f7fd f8a6 	bl	80002bc <__adddf3>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	ec43 2b17 	vmov	d7, r2, r3
 8003178:	eeb0 0a47 	vmov.f32	s0, s14
 800317c:	eef0 0a67 	vmov.f32	s1, s15
 8003180:	f00e fcc6 	bl	8011b10 <cos>
 8003184:	ec53 2b10 	vmov	r2, r3, d0
 8003188:	4650      	mov	r0, sl
 800318a:	4659      	mov	r1, fp
 800318c:	f7fd fa4c 	bl	8000628 <__aeabi_dmul>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4620      	mov	r0, r4
 8003196:	4629      	mov	r1, r5
 8003198:	f7fd f890 	bl	80002bc <__adddf3>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7fd f9e3 	bl	8000578 <__aeabi_f2d>
 80031b2:	4682      	mov	sl, r0
 80031b4:	468b      	mov	fp, r1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ca:	f7fd fb57 	bl	800087c <__aeabi_ddiv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4640      	mov	r0, r8
 80031d4:	4649      	mov	r1, r9
 80031d6:	f7fd f871 	bl	80002bc <__adddf3>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	ec43 2b17 	vmov	d7, r2, r3
 80031e2:	eeb0 0a47 	vmov.f32	s0, s14
 80031e6:	eef0 0a67 	vmov.f32	s1, s15
 80031ea:	f00e fcd5 	bl	8011b98 <sin>
 80031ee:	ec53 2b10 	vmov	r2, r3, d0
 80031f2:	4650      	mov	r0, sl
 80031f4:	4659      	mov	r1, fp
 80031f6:	f7fd fa17 	bl	8000628 <__aeabi_dmul>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4620      	mov	r0, r4
 8003200:	4629      	mov	r1, r5
 8003202:	f7fd f85b 	bl	80002bc <__adddf3>
 8003206:	4603      	mov	r3, r0
 8003208:	460c      	mov	r4, r1
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800321c:	461a      	mov	r2, r3
 800321e:	4623      	mov	r3, r4
 8003220:	f7fd f84c 	bl	80002bc <__adddf3>
 8003224:	4603      	mov	r3, r0
 8003226:	460c      	mov	r4, r1
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003234:	4618      	mov	r0, r3
 8003236:	4621      	mov	r1, r4
 8003238:	f7fd fcee 	bl	8000c18 <__aeabi_d2f>
 800323c:	4602      	mov	r2, r0
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003240:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003248:	4618      	mov	r0, r3
 800324a:	4621      	mov	r1, r4
 800324c:	f7fd fce4 	bl	8000c18 <__aeabi_d2f>
 8003250:	4602      	mov	r2, r0
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <_ZN8Odometry12calcPotitionEv+0x18c>)
 8003254:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800325c:	4618      	mov	r0, r3
 800325e:	4621      	mov	r1, r4
 8003260:	f7fd fcda 	bl	8000c18 <__aeabi_d2f>
 8003264:	4602      	mov	r2, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <_ZN8Odometry12calcPotitionEv+0x190>)
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003274:	f3af 8000 	nop.w
 8003278:	2000026c 	.word	0x2000026c
 800327c:	20000270 	.word	0x20000270
 8003280:	20000274 	.word	0x20000274
 8003284:	d2f1a9fc 	.word	0xd2f1a9fc
 8003288:	3f50624d 	.word	0x3f50624d

0800328c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff2b 	bl	80030f0 <_ZN8Odometry12calcPotitionEv>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80032a2:	b490      	push	{r4, r7}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
	x_ = 0;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc90      	pop	{r4, r7}
 80032dc:	4770      	bx	lr
	...

080032e0 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80032e0:	b490      	push	{r4, r7}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f04f 0400 	mov.w	r4, #0
 8003306:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	f04f 0400 	mov.w	r4, #0
 8003314:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800331e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003322:	2200      	movs	r2, #0
 8003324:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003326:	4a29      	ldr	r2, [pc, #164]	; (80033cc <_ZN13PathFollowingC1Ev+0xec>)
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <_ZN13PathFollowingC1Ev+0xec>)
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <_ZN13PathFollowingC1Ev+0xec>)
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <_ZN13PathFollowingC1Ev+0xf0>)
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	f04f 0400 	mov.w	r4, #0
 800335a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <_ZN13PathFollowingC1Ev+0xf0>)
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <_ZN13PathFollowingC1Ev+0xf0>)
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	f04f 0400 	mov.w	r4, #0
 8003376:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <_ZN13PathFollowingC1Ev+0xf0>)
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	f04f 0400 	mov.w	r4, #0
 8003384:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <_ZN13PathFollowingC1Ev+0xf0>)
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003396:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <_ZN13PathFollowingC1Ev+0xf0>)
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	f04f 0400 	mov.w	r4, #0
 80033a0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80033a4:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <_ZN13PathFollowingC1Ev+0xf4>)
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	f04f 0400 	mov.w	r4, #0
 80033ae:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <_ZN13PathFollowingC1Ev+0xf4>)
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	f04f 0400 	mov.w	r4, #0
 80033bc:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc90      	pop	{r4, r7}
 80033ca:	4770      	bx	lr
 80033cc:	20039d80 	.word	0x20039d80
 80033d0:	20039d10 	.word	0x20039d10
 80033d4:	20039d70 	.word	0x20039d70

080033d8 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80033e0:	f001 fcc2 	bl	8004d68 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80033e4:	f107 0318 	add.w	r3, r7, #24
 80033e8:	2201      	movs	r2, #1
 80033ea:	4915      	ldr	r1, [pc, #84]	; (8003440 <_ZN13PathFollowing4initEv+0x68>)
 80033ec:	4815      	ldr	r0, [pc, #84]	; (8003444 <_ZN13PathFollowing4initEv+0x6c>)
 80033ee:	f7fe f96b 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	2201      	movs	r2, #1
 80033f8:	4913      	ldr	r1, [pc, #76]	; (8003448 <_ZN13PathFollowing4initEv+0x70>)
 80033fa:	4812      	ldr	r0, [pc, #72]	; (8003444 <_ZN13PathFollowing4initEv+0x6c>)
 80033fc:	f7fe f964 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003400:	f107 0308 	add.w	r3, r7, #8
 8003404:	2201      	movs	r2, #1
 8003406:	4911      	ldr	r1, [pc, #68]	; (800344c <_ZN13PathFollowing4initEv+0x74>)
 8003408:	480e      	ldr	r0, [pc, #56]	; (8003444 <_ZN13PathFollowing4initEv+0x6c>)
 800340a:	f7fe f95d 	bl	80016c8 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800340e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003412:	ed97 6b04 	vldr	d6, [r7, #16]
 8003416:	ed97 5b02 	vldr	d5, [r7, #8]
 800341a:	eeb0 2a45 	vmov.f32	s4, s10
 800341e:	eef0 2a65 	vmov.f32	s5, s11
 8003422:	eeb0 1a46 	vmov.f32	s2, s12
 8003426:	eef0 1a66 	vmov.f32	s3, s13
 800342a:	eeb0 0a47 	vmov.f32	s0, s14
 800342e:	eef0 0a67 	vmov.f32	s1, s15
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f80c 	bl	8003450 <_ZN13PathFollowing7setGainEddd>
}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	08017b80 	.word	0x08017b80
 8003444:	08017b88 	.word	0x08017b88
 8003448:	08017b90 	.word	0x08017b90
 800344c:	08017b98 	.word	0x08017b98

08003450 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003450:	b490      	push	{r4, r7}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	61f8      	str	r0, [r7, #28]
 8003458:	ed87 0b04 	vstr	d0, [r7, #16]
 800345c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003460:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003464:	4a09      	ldr	r2, [pc, #36]	; (800348c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003466:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800346a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003470:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003474:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <_ZN13PathFollowing7setGainEddd+0x3c>)
 800347a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800347e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003482:	bf00      	nop
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bc90      	pop	{r4, r7}
 800348a:	4770      	bx	lr
 800348c:	20039d80 	.word	0x20039d80

08003490 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003490:	b490      	push	{r4, r7}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <_ZN13PathFollowing8getKxValEv+0x24>)
 800349a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800349e:	ec44 3b17 	vmov	d7, r3, r4
}
 80034a2:	eeb0 0a47 	vmov.f32	s0, s14
 80034a6:	eef0 0a67 	vmov.f32	s1, s15
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc90      	pop	{r4, r7}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20039d80 	.word	0x20039d80

080034b8 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 80034b8:	b490      	push	{r4, r7}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <_ZN13PathFollowing8getKyValEv+0x24>)
 80034c2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80034c6:	ec44 3b17 	vmov	d7, r3, r4
}
 80034ca:	eeb0 0a47 	vmov.f32	s0, s14
 80034ce:	eef0 0a67 	vmov.f32	s1, s15
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc90      	pop	{r4, r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20039d80 	.word	0x20039d80

080034e0 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 80034e0:	b490      	push	{r4, r7}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <_ZN13PathFollowing8getKtValEv+0x24>)
 80034ea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80034ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80034f2:	eeb0 0a47 	vmov.f32	s0, s14
 80034f6:	eef0 0a67 	vmov.f32	s1, s15
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc90      	pop	{r4, r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20039d80 	.word	0x20039d80

08003508 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003510:	2088      	movs	r0, #136	; 0x88
 8003512:	f7fe fc30 	bl	8001d76 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003516:	2080      	movs	r0, #128	; 0x80
 8003518:	f7fe fc2d 	bl	8001d76 <INA260_init>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	0000      	movs	r0, r0
	...

08003528 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003530:	2188      	movs	r1, #136	; 0x88
 8003532:	2002      	movs	r0, #2
 8003534:	f7fe fbbc 	bl	8001cb0 <INA260_read>
 8003538:	4603      	mov	r3, r0
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f80a 	bl	8000554 <__aeabi_i2d>
 8003540:	a30c      	add	r3, pc, #48	; (adr r3, 8003574 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f7fd f86f 	bl	8000628 <__aeabi_dmul>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	4618      	mov	r0, r3
 8003550:	4621      	mov	r1, r4
 8003552:	f7fd fb61 	bl	8000c18 <__aeabi_d2f>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a03      	ldr	r2, [pc, #12]	; (8003570 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	f3af 8000 	nop.w
 8003570:	20000278 	.word	0x20000278
 8003574:	47ae147b 	.word	0x47ae147b
 8003578:	3f547ae1 	.word	0x3f547ae1

0800357c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	ee07 3a90 	vmov	s15, r3

}
 800358c:	eeb0 0a67 	vmov.f32	s0, s15
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	0000      	movs	r0, r0
 800359c:	0000      	movs	r0, r0
	...

080035a0 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffe1 	bl	8000578 <__aeabi_f2d>
 80035b6:	a311      	add	r3, pc, #68	; (adr r3, 80035fc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fd faa6 	bl	8000b0c <__aeabi_dcmplt>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <_ZN11PowerSensor12butteryCheckEv+0x34>
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e002      	b.n	80035da <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2000027c 	.word	0x2000027c
 80035fc:	9999999a 	.word	0x9999999a
 8003600:	401d9999 	.word	0x401d9999

08003604 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003610:	2102      	movs	r1, #2
 8003612:	4822      	ldr	r0, [pc, #136]	; (800369c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003614:	f004 ffee 	bl	80085f4 <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003630:	2108      	movs	r1, #8
 8003632:	481a      	ldr	r0, [pc, #104]	; (800369c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003634:	f004 ffde 	bl	80085f4 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003650:	2110      	movs	r1, #16
 8003652:	4812      	ldr	r0, [pc, #72]	; (800369c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003654:	f004 ffce 	bl	80085f4 <HAL_GPIO_ReadPin>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	480a      	ldr	r0, [pc, #40]	; (800369c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003674:	f004 ffbe 	bl	80085f4 <HAL_GPIO_ReadPin>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003690:	89fb      	ldrh	r3, [r7, #14]

}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40020c00 	.word	0x40020c00

080036a0 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0)
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	801a      	strh	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	805a      	strh	r2, [r3, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	809a      	strh	r2, [r3, #4]
{

}
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d111      	bne.n	80036fe <_ZN10SideSensor12updateStatusEt+0x36>
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <_ZN10SideSensor12updateStatusEt+0xe4>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f083 0301 	eor.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80036f6:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <_ZN10SideSensor12updateStatusEt+0xe4>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e01a      	b.n	8003734 <_ZN10SideSensor12updateStatusEt+0x6c>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d117      	bne.n	8003734 <_ZN10SideSensor12updateStatusEt+0x6c>
 8003704:	4b29      	ldr	r3, [pc, #164]	; (80037ac <_ZN10SideSensor12updateStatusEt+0xe4>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <_ZN10SideSensor12updateStatusEt+0x6c>
		status_ ^= 0x01;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <_ZN10SideSensor12updateStatusEt+0xe4>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]

		white_line_cnt_r_++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	889b      	ldrh	r3, [r3, #4]
 8003724:	3301      	adds	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	809a      	strh	r2, [r3, #4]
		mon_cnt_r = white_line_cnt_r_;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	889a      	ldrh	r2, [r3, #4]
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <_ZN10SideSensor12updateStatusEt+0xe8>)
 8003732:	801a      	strh	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373a:	d111      	bne.n	8003760 <_ZN10SideSensor12updateStatusEt+0x98>
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <_ZN10SideSensor12updateStatusEt+0xec>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	f083 0301 	eor.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <_ZN10SideSensor12updateStatusEt+0x98>
		status_ |= 0x02;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <_ZN10SideSensor12updateStatusEt+0xec>)
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e01b      	b.n	8003798 <_ZN10SideSensor12updateStatusEt+0xd0>
	}
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d117      	bne.n	8003798 <_ZN10SideSensor12updateStatusEt+0xd0>
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <_ZN10SideSensor12updateStatusEt+0xec>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <_ZN10SideSensor12updateStatusEt+0xd0>
		status_ ^= 0x02;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	f083 0302 	eor.w	r3, r3, #2
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <_ZN10SideSensor12updateStatusEt+0xec>)
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]

		white_line_cnt_l_++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	885b      	ldrh	r3, [r3, #2]
 8003788:	3301      	adds	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	805a      	strh	r2, [r3, #2]
		mon_cnt_l = white_line_cnt_l_;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	885a      	ldrh	r2, [r3, #2]
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <_ZN10SideSensor12updateStatusEt+0xf0>)
 8003796:	801a      	strh	r2, [r3, #0]
	}

	mon_status = status_;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_ZN10SideSensor12updateStatusEt+0xf4>)
 800379e:	801a      	strh	r2, [r3, #0]

}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000284 	.word	0x20000284
 80037b0:	20000282 	.word	0x20000282
 80037b4:	20000285 	.word	0x20000285
 80037b8:	20000280 	.word	0x20000280
 80037bc:	2000027e 	.word	0x2000027e

080037c0 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	889b      	ldrh	r3, [r3, #4]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	809a      	strh	r2, [r3, #4]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003808:	3308      	adds	r3, #8
 800380a:	4611      	mov	r1, r2
 800380c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003810:	4618      	mov	r0, r3
 8003812:	f00f f9fd 	bl	8012c10 <memcpy>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	08017bbc 	.word	0x08017bbc

0800384c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	ed97 0a00 	vldr	s0, [r7]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fa50 	bl	8002d10 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800387a:	eeb0 0a67 	vmov.f32	s0, s15
 800387e:	4610      	mov	r0, r2
 8003880:	f7ff fa7d 	bl	8002d7e <_ZN6Logger9storeLog2Ef>
	}

}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff faa8 	bl	8002df2 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80038a8:	4904      	ldr	r1, [pc, #16]	; (80038bc <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fab5 	bl	8002e1a <_ZN6Logger9saveLogs2EPKcS1_>
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	08017db0 	.word	0x08017db0
 80038bc:	08017dbc 	.word	0x08017dbc
 80038c0:	08017dc8 	.word	0x08017dc8

080038c4 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d046      	beq.n	8003964 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80038e2:	461a      	mov	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3204      	adds	r2, #4
 80038e8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003904:	3301      	adds	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003916:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800391e:	2bf9      	cmp	r3, #249	; 0xf9
 8003920:	d903      	bls.n	800392a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	22fa      	movs	r2, #250	; 0xfa
 8003926:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685c      	ldr	r4, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fe1f 	bl	8000578 <__aeabi_f2d>
 800393a:	4605      	mov	r5, r0
 800393c:	460e      	mov	r6, r1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003944:	eef1 7a67 	vneg.f32	s15, s15
 8003948:	ee17 3a90 	vmov	r3, s15
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fe13 	bl	8000578 <__aeabi_f2d>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	ec43 2b11 	vmov	d1, r2, r3
 800395a:	ec46 5b10 	vmov	d0, r5, r6
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fb26 	bl	8002fb0 <_ZN5Motor8setRatioEdd>

	}

}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396c:	20000288 	.word	0x20000288

08003970 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fa75 	bl	8002e8c <_ZN6Logger5startEv>
	processing_flag_ = true;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	0000      	movs	r0, r0
 80039b4:	0000      	movs	r0, r0
	...

080039b8 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fa70 	bl	8002eaa <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80039f8 <_ZN20SystemIdentification4stopEv+0x40>
 80039e2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80039f8 <_ZN20SystemIdentification4stopEv+0x40>
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fae2 	bl	8002fb0 <_ZN5Motor8setRatioEdd>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	f3af 8000 	nop.w
	...

08003a00 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	615a      	str	r2, [r3, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	61da      	str	r2, [r3, #28]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	621a      	str	r2, [r3, #32]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38

}
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	f107 020c 	add.w	r2, r7, #12
 8003aa8:	f107 0110 	add.w	r1, r7, #16
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd fc81 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003abe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ac6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f7fc fd54 	bl	8000578 <__aeabi_f2d>
 8003ad0:	a30b      	add	r3, pc, #44	; (adr r3, 8003b00 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fda7 	bl	8000628 <__aeabi_dmul>
 8003ada:	4603      	mov	r3, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	f7fd f899 	bl	8000c18 <__aeabi_d2f>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	ee07 3a90 	vmov	s15, r3
}
 8003af4:	eeb0 0a67 	vmov.f32	s0, s15
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}
 8003afe:	bf00      	nop
 8003b00:	1ab1d998 	.word	0x1ab1d998
 8003b04:	3f7830b5 	.word	0x3f7830b5

08003b08 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b20:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b44:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8003b50:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fd0f 	bl	8000578 <__aeabi_f2d>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	460d      	mov	r5, r1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6c:	ee17 0a90 	vmov	r0, s15
 8003b70:	f7fc fd02 	bl	8000578 <__aeabi_f2d>
 8003b74:	a334      	add	r3, pc, #208	; (adr r3, 8003c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f7fc fd55 	bl	8000628 <__aeabi_dmul>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc fb99 	bl	80002bc <__adddf3>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4621      	mov	r1, r4
 8003b92:	f7fd f841 	bl	8000c18 <__aeabi_d2f>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003b9a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ba2:	4b2c      	ldr	r3, [pc, #176]	; (8003c54 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	edd7 6a05 	vldr	s13, [r7, #20]
 8003bac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	ee17 0a90 	vmov	r0, s15
 8003bb8:	f7fc fcde 	bl	8000578 <__aeabi_f2d>
 8003bbc:	a322      	add	r3, pc, #136	; (adr r3, 8003c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fe5b 	bl	800087c <__aeabi_ddiv>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4621      	mov	r1, r4
 8003bce:	f7fd f823 	bl	8000c18 <__aeabi_d2f>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8003bd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bec:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c02:	ee17 0a90 	vmov	r0, s15
 8003c06:	f7fc fcb7 	bl	8000578 <__aeabi_f2d>
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	460e      	mov	r6, r1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c14:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1c:	ee17 0a90 	vmov	r0, s15
 8003c20:	f7fc fcaa 	bl	8000578 <__aeabi_f2d>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	ec43 2b11 	vmov	d1, r2, r3
 8003c2c:	ec46 5b10 	vmov	d0, r5, r6
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7ff f9bd 	bl	8002fb0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c44:	f3af 8000 	nop.w
 8003c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8003c4c:	3f50624d 	.word	0x3f50624d
 8003c50:	20000290 	.word	0x20000290
 8003c54:	2000028c 	.word	0x2000028c

08003c58 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c64:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	605a      	str	r2, [r3, #4]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c8c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cb4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cb8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	615a      	str	r2, [r3, #20]
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ce6:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cea:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff febf 	bl	8003a98 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff feef 	bl	8003b08 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003d88 <_ZN12VelocityCtrl4stopEv+0x30>
 8003d70:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003d88 <_ZN12VelocityCtrl4stopEv+0x30>
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff f91b 	bl	8002fb0 <_ZN5Motor8setRatioEdd>

}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	f3af 8000 	nop.w
	...

08003d90 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	ee07 3a90 	vmov	s15, r3
}
 8003da0:	eeb0 0a67 	vmov.f32	s0, s15
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003db6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dba:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d013      	beq.n	8003dee <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003dc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dca:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003dce:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003dd6:	e000      	b.n	8003dda <ITM_SendChar+0x2c>
    {
      __NOP();
 8003dd8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003dda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f9      	beq.n	8003dd8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003de4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003dee:	687b      	ldr	r3, [r7, #4]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e009      	b.n	8003e22 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	60ba      	str	r2, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ffc9 	bl	8003dae <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	dbf1      	blt.n	8003e0e <_write+0x12>
  }
  return len;
 8003e2a:	687b      	ldr	r3, [r7, #4]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 ff1f 	bl	8005c84 <cppExit>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10e      	bne.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003e62:	f001 fe95 	bl	8005b90 <cppFlip1ms>

		tim6_timer++;
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e6e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d902      	bls.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003e8a:	f001 fed3 	bl	8005c34 <cppFlip100ns>

		tim7_timer++;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e96:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0f      	ldr	r2, [pc, #60]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003eb2:	f001 fec9 	bl	8005c48 <cppFlip10ms>

		tim13_timer++;
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ebe:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a06      	ldr	r2, [pc, #24]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d902      	bls.n	8003ed0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
	}

}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40001000 	.word	0x40001000
 8003edc:	200399ec 	.word	0x200399ec
 8003ee0:	0001869f 	.word	0x0001869f
 8003ee4:	40001400 	.word	0x40001400
 8003ee8:	20039a30 	.word	0x20039a30
 8003eec:	40001c00 	.word	0x40001c00
 8003ef0:	20039a34 	.word	0x20039a34

08003ef4 <init>:

void init()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <init+0x2c>)
 8003f00:	f004 fb90 	bl	8008624 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003f04:	4807      	ldr	r0, [pc, #28]	; (8003f24 <init+0x30>)
 8003f06:	f008 fa70 	bl	800c3ea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003f0a:	4807      	ldr	r0, [pc, #28]	; (8003f28 <init+0x34>)
 8003f0c:	f008 fa6d 	bl	800c3ea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003f10:	4806      	ldr	r0, [pc, #24]	; (8003f2c <init+0x38>)
 8003f12:	f008 fa6a 	bl	800c3ea <HAL_TIM_Base_Start_IT>

	cppInit();
 8003f16:	f001 fd91 	bl	8005a3c <cppInit>

	//path_following_initialize();

}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	20039b18 	.word	0x20039b18
 8003f28:	20039cbc 	.word	0x20039cbc
 8003f2c:	20039a38 	.word	0x20039a38

08003f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f34:	f003 f86e 	bl	8007014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f38:	f000 f82a 	bl	8003f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f3c:	f000 fdbc 	bl	8004ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f40:	f000 fd8a 	bl	8004a58 <MX_DMA_Init>
  MX_I2C2_Init();
 8003f44:	f000 f9e8 	bl	8004318 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003f48:	f000 fa14 	bl	8004374 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003f4c:	f000 fa32 	bl	80043b4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003f50:	f000 fa66 	bl	8004420 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003f54:	f000 fb70 	bl	8004638 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003f58:	f000 fc3c 	bl	80047d4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003f5c:	f000 fd52 	bl	8004a04 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003f60:	f00a fa16 	bl	800e390 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003f64:	f000 fbcc 	bl	8004700 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003f68:	f000 f9a8 	bl	80042bc <MX_I2C1_Init>
  MX_TIM3_Init();
 8003f6c:	f000 fb00 	bl	8004570 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003f70:	f000 fc88 	bl	8004884 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003f74:	f000 fcd4 	bl	8004920 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003f78:	f000 f898 	bl	80040ac <MX_ADC2_Init>
  MX_TIM7_Init();
 8003f7c:	f000 fbf6 	bl	800476c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003f80:	f000 fd1c 	bl	80049bc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003f84:	f7ff ffb6 	bl	8003ef4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003f88:	f001 fe92 	bl	8005cb0 <cppLoop>
 8003f8c:	e7fc      	b.n	8003f88 <main+0x58>
	...

08003f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0a4      	sub	sp, #144	; 0x90
 8003f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f9a:	2234      	movs	r2, #52	; 0x34
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f00e fe41 	bl	8012c26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	223c      	movs	r2, #60	; 0x3c
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f00e fe32 	bl	8012c26 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <SystemClock_Config+0x114>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a36      	ldr	r2, [pc, #216]	; (80040a4 <SystemClock_Config+0x114>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <SystemClock_Config+0x114>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <SystemClock_Config+0x118>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <SystemClock_Config+0x118>)
 8003fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <SystemClock_Config+0x118>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004002:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004004:	2302      	movs	r3, #2
 8004006:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004008:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800400c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800400e:	2308      	movs	r3, #8
 8004010:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004012:	23b4      	movs	r3, #180	; 0xb4
 8004014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004018:	2302      	movs	r3, #2
 800401a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800401e:	2308      	movs	r3, #8
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004024:	2302      	movs	r3, #2
 8004026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800402a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800402e:	4618      	mov	r0, r3
 8004030:	f005 ff32 	bl	8009e98 <HAL_RCC_OscConfig>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800403a:	f000 fe91 	bl	8004d60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800403e:	f005 faad 	bl	800959c <HAL_PWREx_EnableOverDrive>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004048:	f000 fe8a 	bl	8004d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800404c:	230f      	movs	r3, #15
 800404e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004050:	2302      	movs	r3, #2
 8004052:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004054:	2300      	movs	r3, #0
 8004056:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004058:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800405c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800405e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004062:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004064:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004068:	2105      	movs	r1, #5
 800406a:	4618      	mov	r0, r3
 800406c:	f005 fae6 	bl	800963c <HAL_RCC_ClockConfig>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004076:	f000 fe73 	bl	8004d60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800407a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800407e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004084:	2300      	movs	r3, #0
 8004086:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004088:	f107 030c 	add.w	r3, r7, #12
 800408c:	4618      	mov	r0, r3
 800408e:	f005 fcc5 	bl	8009a1c <HAL_RCCEx_PeriphCLKConfig>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004098:	f000 fe62 	bl	8004d60 <Error_Handler>
  }
}
 800409c:	bf00      	nop
 800409e:	3790      	adds	r7, #144	; 0x90
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40007000 	.word	0x40007000

080040ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040b2:	463b      	mov	r3, r7
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80040be:	4b7c      	ldr	r3, [pc, #496]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040c0:	4a7c      	ldr	r2, [pc, #496]	; (80042b4 <MX_ADC2_Init+0x208>)
 80040c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040c4:	4b7a      	ldr	r3, [pc, #488]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80040cc:	4b78      	ldr	r3, [pc, #480]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80040d2:	4b77      	ldr	r3, [pc, #476]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80040d8:	4b75      	ldr	r3, [pc, #468]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040da:	2201      	movs	r2, #1
 80040dc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80040de:	4b74      	ldr	r3, [pc, #464]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040ec:	4b70      	ldr	r3, [pc, #448]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040ee:	4a72      	ldr	r2, [pc, #456]	; (80042b8 <MX_ADC2_Init+0x20c>)
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040f2:	4b6f      	ldr	r3, [pc, #444]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80040f8:	4b6d      	ldr	r3, [pc, #436]	; (80042b0 <MX_ADC2_Init+0x204>)
 80040fa:	220e      	movs	r2, #14
 80040fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80040fe:	4b6c      	ldr	r3, [pc, #432]	; (80042b0 <MX_ADC2_Init+0x204>)
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004106:	4b6a      	ldr	r3, [pc, #424]	; (80042b0 <MX_ADC2_Init+0x204>)
 8004108:	2201      	movs	r2, #1
 800410a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800410c:	4868      	ldr	r0, [pc, #416]	; (80042b0 <MX_ADC2_Init+0x204>)
 800410e:	f003 f815 	bl	800713c <HAL_ADC_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004118:	f000 fe22 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800411c:	230a      	movs	r3, #10
 800411e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004120:	2301      	movs	r3, #1
 8004122:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004124:	2306      	movs	r3, #6
 8004126:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004128:	463b      	mov	r3, r7
 800412a:	4619      	mov	r1, r3
 800412c:	4860      	ldr	r0, [pc, #384]	; (80042b0 <MX_ADC2_Init+0x204>)
 800412e:	f003 f959 	bl	80073e4 <HAL_ADC_ConfigChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004138:	f000 fe12 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800413c:	230b      	movs	r3, #11
 800413e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004140:	2302      	movs	r3, #2
 8004142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004144:	463b      	mov	r3, r7
 8004146:	4619      	mov	r1, r3
 8004148:	4859      	ldr	r0, [pc, #356]	; (80042b0 <MX_ADC2_Init+0x204>)
 800414a:	f003 f94b 	bl	80073e4 <HAL_ADC_ConfigChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004154:	f000 fe04 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004158:	230c      	movs	r3, #12
 800415a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800415c:	2303      	movs	r3, #3
 800415e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004160:	463b      	mov	r3, r7
 8004162:	4619      	mov	r1, r3
 8004164:	4852      	ldr	r0, [pc, #328]	; (80042b0 <MX_ADC2_Init+0x204>)
 8004166:	f003 f93d 	bl	80073e4 <HAL_ADC_ConfigChannel>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004170:	f000 fdf6 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004174:	230d      	movs	r3, #13
 8004176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004178:	2304      	movs	r3, #4
 800417a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800417c:	463b      	mov	r3, r7
 800417e:	4619      	mov	r1, r3
 8004180:	484b      	ldr	r0, [pc, #300]	; (80042b0 <MX_ADC2_Init+0x204>)
 8004182:	f003 f92f 	bl	80073e4 <HAL_ADC_ConfigChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800418c:	f000 fde8 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004190:	2300      	movs	r3, #0
 8004192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004194:	2305      	movs	r3, #5
 8004196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004198:	463b      	mov	r3, r7
 800419a:	4619      	mov	r1, r3
 800419c:	4844      	ldr	r0, [pc, #272]	; (80042b0 <MX_ADC2_Init+0x204>)
 800419e:	f003 f921 	bl	80073e4 <HAL_ADC_ConfigChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80041a8:	f000 fdda 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80041ac:	2301      	movs	r3, #1
 80041ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80041b0:	2306      	movs	r3, #6
 80041b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041b4:	463b      	mov	r3, r7
 80041b6:	4619      	mov	r1, r3
 80041b8:	483d      	ldr	r0, [pc, #244]	; (80042b0 <MX_ADC2_Init+0x204>)
 80041ba:	f003 f913 	bl	80073e4 <HAL_ADC_ConfigChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80041c4:	f000 fdcc 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80041c8:	2302      	movs	r3, #2
 80041ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80041cc:	2307      	movs	r3, #7
 80041ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041d0:	463b      	mov	r3, r7
 80041d2:	4619      	mov	r1, r3
 80041d4:	4836      	ldr	r0, [pc, #216]	; (80042b0 <MX_ADC2_Init+0x204>)
 80041d6:	f003 f905 	bl	80073e4 <HAL_ADC_ConfigChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80041e0:	f000 fdbe 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80041e4:	2303      	movs	r3, #3
 80041e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80041e8:	2308      	movs	r3, #8
 80041ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041ec:	463b      	mov	r3, r7
 80041ee:	4619      	mov	r1, r3
 80041f0:	482f      	ldr	r0, [pc, #188]	; (80042b0 <MX_ADC2_Init+0x204>)
 80041f2:	f003 f8f7 	bl	80073e4 <HAL_ADC_ConfigChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80041fc:	f000 fdb0 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004200:	2304      	movs	r3, #4
 8004202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004204:	2309      	movs	r3, #9
 8004206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004208:	463b      	mov	r3, r7
 800420a:	4619      	mov	r1, r3
 800420c:	4828      	ldr	r0, [pc, #160]	; (80042b0 <MX_ADC2_Init+0x204>)
 800420e:	f003 f8e9 	bl	80073e4 <HAL_ADC_ConfigChannel>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004218:	f000 fda2 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800421c:	2305      	movs	r3, #5
 800421e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004220:	230a      	movs	r3, #10
 8004222:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004224:	463b      	mov	r3, r7
 8004226:	4619      	mov	r1, r3
 8004228:	4821      	ldr	r0, [pc, #132]	; (80042b0 <MX_ADC2_Init+0x204>)
 800422a:	f003 f8db 	bl	80073e4 <HAL_ADC_ConfigChannel>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004234:	f000 fd94 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004238:	2306      	movs	r3, #6
 800423a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800423c:	230b      	movs	r3, #11
 800423e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004240:	463b      	mov	r3, r7
 8004242:	4619      	mov	r1, r3
 8004244:	481a      	ldr	r0, [pc, #104]	; (80042b0 <MX_ADC2_Init+0x204>)
 8004246:	f003 f8cd 	bl	80073e4 <HAL_ADC_ConfigChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004250:	f000 fd86 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004254:	2307      	movs	r3, #7
 8004256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004258:	230c      	movs	r3, #12
 800425a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800425c:	463b      	mov	r3, r7
 800425e:	4619      	mov	r1, r3
 8004260:	4813      	ldr	r0, [pc, #76]	; (80042b0 <MX_ADC2_Init+0x204>)
 8004262:	f003 f8bf 	bl	80073e4 <HAL_ADC_ConfigChannel>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800426c:	f000 fd78 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004270:	2308      	movs	r3, #8
 8004272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004274:	230d      	movs	r3, #13
 8004276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004278:	463b      	mov	r3, r7
 800427a:	4619      	mov	r1, r3
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <MX_ADC2_Init+0x204>)
 800427e:	f003 f8b1 	bl	80073e4 <HAL_ADC_ConfigChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004288:	f000 fd6a 	bl	8004d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800428c:	2309      	movs	r3, #9
 800428e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004290:	230e      	movs	r3, #14
 8004292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004294:	463b      	mov	r3, r7
 8004296:	4619      	mov	r1, r3
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <MX_ADC2_Init+0x204>)
 800429a:	f003 f8a3 	bl	80073e4 <HAL_ADC_ConfigChannel>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80042a4:	f000 fd5c 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200398bc 	.word	0x200398bc
 80042b4:	40012100 	.word	0x40012100
 80042b8:	0f000001 	.word	0x0f000001

080042bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <MX_I2C1_Init+0x50>)
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <MX_I2C1_Init+0x54>)
 80042c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_I2C1_Init+0x50>)
 80042c8:	4a12      	ldr	r2, [pc, #72]	; (8004314 <MX_I2C1_Init+0x58>)
 80042ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_I2C1_Init+0x50>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_I2C1_Init+0x50>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <MX_I2C1_Init+0x50>)
 80042da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <MX_I2C1_Init+0x50>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <MX_I2C1_Init+0x50>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <MX_I2C1_Init+0x50>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <MX_I2C1_Init+0x50>)
 80042f4:	2280      	movs	r2, #128	; 0x80
 80042f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042f8:	4804      	ldr	r0, [pc, #16]	; (800430c <MX_I2C1_Init+0x50>)
 80042fa:	f004 f9c5 	bl	8008688 <HAL_I2C_Init>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004304:	f000 fd2c 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20039904 	.word	0x20039904
 8004310:	40005400 	.word	0x40005400
 8004314:	000186a0 	.word	0x000186a0

08004318 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <MX_I2C2_Init+0x50>)
 800431e:	4a13      	ldr	r2, [pc, #76]	; (800436c <MX_I2C2_Init+0x54>)
 8004320:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <MX_I2C2_Init+0x50>)
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <MX_I2C2_Init+0x58>)
 8004326:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <MX_I2C2_Init+0x50>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <MX_I2C2_Init+0x50>)
 8004330:	2200      	movs	r2, #0
 8004332:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <MX_I2C2_Init+0x50>)
 8004336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800433a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <MX_I2C2_Init+0x50>)
 800433e:	2200      	movs	r2, #0
 8004340:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <MX_I2C2_Init+0x50>)
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <MX_I2C2_Init+0x50>)
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <MX_I2C2_Init+0x50>)
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <MX_I2C2_Init+0x50>)
 8004356:	f004 f997 	bl	8008688 <HAL_I2C_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004360:	f000 fcfe 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20039998 	.word	0x20039998
 800436c:	40005800 	.word	0x40005800
 8004370:	000186a0 	.word	0x000186a0

08004374 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <MX_SDIO_SD_Init+0x3c>)
 800437c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 8004380:	2200      	movs	r2, #0
 8004382:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 800438c:	2200      	movs	r2, #0
 800438e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 8004398:	2200      	movs	r2, #0
 800439a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <MX_SDIO_SD_Init+0x38>)
 800439e:	2200      	movs	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	20039b98 	.word	0x20039b98
 80043b0:	40012c00 	.word	0x40012c00

080043b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80043b8:	4b17      	ldr	r3, [pc, #92]	; (8004418 <MX_SPI2_Init+0x64>)
 80043ba:	4a18      	ldr	r2, [pc, #96]	; (800441c <MX_SPI2_Init+0x68>)
 80043bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043be:	4b16      	ldr	r3, [pc, #88]	; (8004418 <MX_SPI2_Init+0x64>)
 80043c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <MX_SPI2_Init+0x64>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043cc:	4b12      	ldr	r3, [pc, #72]	; (8004418 <MX_SPI2_Init+0x64>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <MX_SPI2_Init+0x64>)
 80043d4:	2202      	movs	r2, #2
 80043d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <MX_SPI2_Init+0x64>)
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <MX_SPI2_Init+0x64>)
 80043e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <MX_SPI2_Init+0x64>)
 80043e8:	2228      	movs	r2, #40	; 0x28
 80043ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <MX_SPI2_Init+0x64>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <MX_SPI2_Init+0x64>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <MX_SPI2_Init+0x64>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <MX_SPI2_Init+0x64>)
 8004400:	220a      	movs	r2, #10
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004404:	4804      	ldr	r0, [pc, #16]	; (8004418 <MX_SPI2_Init+0x64>)
 8004406:	f007 fa71 	bl	800b8ec <HAL_SPI_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004410:	f000 fca6 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}
 8004418:	200397e4 	.word	0x200397e4
 800441c:	40003800 	.word	0x40003800

08004420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b09a      	sub	sp, #104	; 0x68
 8004424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004426:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f00e fbf9 	bl	8012c26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800443e:	f107 0320 	add.w	r3, r7, #32
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	615a      	str	r2, [r3, #20]
 8004450:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004452:	463b      	mov	r3, r7
 8004454:	2220      	movs	r2, #32
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f00e fbe4 	bl	8012c26 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800445e:	4b42      	ldr	r3, [pc, #264]	; (8004568 <MX_TIM1_Init+0x148>)
 8004460:	4a42      	ldr	r2, [pc, #264]	; (800456c <MX_TIM1_Init+0x14c>)
 8004462:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004464:	4b40      	ldr	r3, [pc, #256]	; (8004568 <MX_TIM1_Init+0x148>)
 8004466:	2200      	movs	r2, #0
 8004468:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <MX_TIM1_Init+0x148>)
 800446c:	2200      	movs	r2, #0
 800446e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004470:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <MX_TIM1_Init+0x148>)
 8004472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004476:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004478:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <MX_TIM1_Init+0x148>)
 800447a:	2200      	movs	r2, #0
 800447c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800447e:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <MX_TIM1_Init+0x148>)
 8004480:	2200      	movs	r2, #0
 8004482:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004484:	4b38      	ldr	r3, [pc, #224]	; (8004568 <MX_TIM1_Init+0x148>)
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800448a:	4837      	ldr	r0, [pc, #220]	; (8004568 <MX_TIM1_Init+0x148>)
 800448c:	f007 ffd1 	bl	800c432 <HAL_TIM_PWM_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004496:	f000 fc63 	bl	8004d60 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800449a:	2303      	movs	r3, #3
 800449c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800449e:	2300      	movs	r3, #0
 80044a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044a2:	2301      	movs	r3, #1
 80044a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044a6:	2300      	movs	r3, #0
 80044a8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044ae:	2300      	movs	r3, #0
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044b2:	2301      	movs	r3, #1
 80044b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044b6:	2300      	movs	r3, #0
 80044b8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80044be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044c2:	4619      	mov	r1, r3
 80044c4:	4828      	ldr	r0, [pc, #160]	; (8004568 <MX_TIM1_Init+0x148>)
 80044c6:	f008 f81d 	bl	800c504 <HAL_TIM_Encoder_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80044d0:	f000 fc46 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044e0:	4619      	mov	r1, r3
 80044e2:	4821      	ldr	r0, [pc, #132]	; (8004568 <MX_TIM1_Init+0x148>)
 80044e4:	f008 fd44 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80044ee:	f000 fc37 	bl	8004d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044f2:	2360      	movs	r3, #96	; 0x60
 80044f4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044fe:	2300      	movs	r3, #0
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800450e:	f107 0320 	add.w	r3, r7, #32
 8004512:	2208      	movs	r2, #8
 8004514:	4619      	mov	r1, r3
 8004516:	4814      	ldr	r0, [pc, #80]	; (8004568 <MX_TIM1_Init+0x148>)
 8004518:	f008 f9c6 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004522:	f000 fc1d 	bl	8004d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800453a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004544:	463b      	mov	r3, r7
 8004546:	4619      	mov	r1, r3
 8004548:	4807      	ldr	r0, [pc, #28]	; (8004568 <MX_TIM1_Init+0x148>)
 800454a:	f008 fd8d 	bl	800d068 <HAL_TIMEx_ConfigBreakDeadTime>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004554:	f000 fc04 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004558:	4803      	ldr	r0, [pc, #12]	; (8004568 <MX_TIM1_Init+0x148>)
 800455a:	f000 fff1 	bl	8005540 <HAL_TIM_MspPostInit>

}
 800455e:	bf00      	nop
 8004560:	3768      	adds	r7, #104	; 0x68
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20039b58 	.word	0x20039b58
 800456c:	40010000 	.word	0x40010000

08004570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004576:	f107 0320 	add.w	r3, r7, #32
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	611a      	str	r2, [r3, #16]
 800458e:	615a      	str	r2, [r3, #20]
 8004590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <MX_TIM3_Init+0xc0>)
 8004594:	4a27      	ldr	r2, [pc, #156]	; (8004634 <MX_TIM3_Init+0xc4>)
 8004596:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <MX_TIM3_Init+0xc0>)
 800459a:	2200      	movs	r2, #0
 800459c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80045b8:	481d      	ldr	r0, [pc, #116]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045ba:	f007 ff3a 	bl	800c432 <HAL_TIM_PWM_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80045c4:	f000 fbcc 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045d0:	f107 0320 	add.w	r3, r7, #32
 80045d4:	4619      	mov	r1, r3
 80045d6:	4816      	ldr	r0, [pc, #88]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045d8:	f008 fcca 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80045e2:	f000 fbbd 	bl	8004d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045e6:	2360      	movs	r3, #96	; 0x60
 80045e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	2200      	movs	r2, #0
 80045fa:	4619      	mov	r1, r3
 80045fc:	480c      	ldr	r0, [pc, #48]	; (8004630 <MX_TIM3_Init+0xc0>)
 80045fe:	f008 f953 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004608:	f000 fbaa 	bl	8004d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	2204      	movs	r2, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4807      	ldr	r0, [pc, #28]	; (8004630 <MX_TIM3_Init+0xc0>)
 8004614:	f008 f948 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800461e:	f000 fb9f 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004622:	4803      	ldr	r0, [pc, #12]	; (8004630 <MX_TIM3_Init+0xc0>)
 8004624:	f000 ff8c 	bl	8005540 <HAL_TIM_MspPostInit>

}
 8004628:	bf00      	nop
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	200399f0 	.word	0x200399f0
 8004634:	40000400 	.word	0x40000400

08004638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800463e:	f107 0320 	add.w	r3, r7, #32
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	615a      	str	r2, [r3, #20]
 8004658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <MX_TIM4_Init+0xc0>)
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <MX_TIM4_Init+0xc4>)
 800465e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <MX_TIM4_Init+0xc0>)
 8004662:	2200      	movs	r2, #0
 8004664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <MX_TIM4_Init+0xc0>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800466c:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <MX_TIM4_Init+0xc0>)
 800466e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004672:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004674:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <MX_TIM4_Init+0xc0>)
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800467a:	4b1f      	ldr	r3, [pc, #124]	; (80046f8 <MX_TIM4_Init+0xc0>)
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004680:	481d      	ldr	r0, [pc, #116]	; (80046f8 <MX_TIM4_Init+0xc0>)
 8004682:	f007 fed6 	bl	800c432 <HAL_TIM_PWM_Init>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800468c:	f000 fb68 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004698:	f107 0320 	add.w	r3, r7, #32
 800469c:	4619      	mov	r1, r3
 800469e:	4816      	ldr	r0, [pc, #88]	; (80046f8 <MX_TIM4_Init+0xc0>)
 80046a0:	f008 fc66 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80046aa:	f000 fb59 	bl	8004d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ae:	2360      	movs	r3, #96	; 0x60
 80046b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	2208      	movs	r2, #8
 80046c2:	4619      	mov	r1, r3
 80046c4:	480c      	ldr	r0, [pc, #48]	; (80046f8 <MX_TIM4_Init+0xc0>)
 80046c6:	f008 f8ef 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80046d0:	f000 fb46 	bl	8004d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046d4:	1d3b      	adds	r3, r7, #4
 80046d6:	220c      	movs	r2, #12
 80046d8:	4619      	mov	r1, r3
 80046da:	4807      	ldr	r0, [pc, #28]	; (80046f8 <MX_TIM4_Init+0xc0>)
 80046dc:	f008 f8e4 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80046e6:	f000 fb3b 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046ea:	4803      	ldr	r0, [pc, #12]	; (80046f8 <MX_TIM4_Init+0xc0>)
 80046ec:	f000 ff28 	bl	8005540 <HAL_TIM_MspPostInit>

}
 80046f0:	bf00      	nop
 80046f2:	3728      	adds	r7, #40	; 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	2003987c 	.word	0x2003987c
 80046fc:	40000800 	.word	0x40000800

08004700 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004706:	463b      	mov	r3, r7
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <MX_TIM6_Init+0x64>)
 8004710:	4a15      	ldr	r2, [pc, #84]	; (8004768 <MX_TIM6_Init+0x68>)
 8004712:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <MX_TIM6_Init+0x64>)
 8004716:	2259      	movs	r2, #89	; 0x59
 8004718:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <MX_TIM6_Init+0x64>)
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <MX_TIM6_Init+0x64>)
 8004722:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004726:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <MX_TIM6_Init+0x64>)
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800472e:	480d      	ldr	r0, [pc, #52]	; (8004764 <MX_TIM6_Init+0x64>)
 8004730:	f007 fe30 	bl	800c394 <HAL_TIM_Base_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800473a:	f000 fb11 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004746:	463b      	mov	r3, r7
 8004748:	4619      	mov	r1, r3
 800474a:	4806      	ldr	r0, [pc, #24]	; (8004764 <MX_TIM6_Init+0x64>)
 800474c:	f008 fc10 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004756:	f000 fb03 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20039b18 	.word	0x20039b18
 8004768:	40001000 	.word	0x40001000

0800476c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004772:	463b      	mov	r3, r7
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <MX_TIM7_Init+0x60>)
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <MX_TIM7_Init+0x64>)
 800477e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004780:	4b12      	ldr	r3, [pc, #72]	; (80047cc <MX_TIM7_Init+0x60>)
 8004782:	22b3      	movs	r2, #179	; 0xb3
 8004784:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <MX_TIM7_Init+0x60>)
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <MX_TIM7_Init+0x60>)
 800478e:	2231      	movs	r2, #49	; 0x31
 8004790:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <MX_TIM7_Init+0x60>)
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004798:	480c      	ldr	r0, [pc, #48]	; (80047cc <MX_TIM7_Init+0x60>)
 800479a:	f007 fdfb 	bl	800c394 <HAL_TIM_Base_Init>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80047a4:	f000 fadc 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047b0:	463b      	mov	r3, r7
 80047b2:	4619      	mov	r1, r3
 80047b4:	4805      	ldr	r0, [pc, #20]	; (80047cc <MX_TIM7_Init+0x60>)
 80047b6:	f008 fbdb 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80047c0:	f000 face 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20039cbc 	.word	0x20039cbc
 80047d0:	40001400 	.word	0x40001400

080047d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08c      	sub	sp, #48	; 0x30
 80047d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80047da:	f107 030c 	add.w	r3, r7, #12
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f00e fa1f 	bl	8012c26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047f0:	4b22      	ldr	r3, [pc, #136]	; (800487c <MX_TIM8_Init+0xa8>)
 80047f2:	4a23      	ldr	r2, [pc, #140]	; (8004880 <MX_TIM8_Init+0xac>)
 80047f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <MX_TIM8_Init+0xa8>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80047fc:	4b1f      	ldr	r3, [pc, #124]	; (800487c <MX_TIM8_Init+0xa8>)
 80047fe:	2210      	movs	r2, #16
 8004800:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004802:	4b1e      	ldr	r3, [pc, #120]	; (800487c <MX_TIM8_Init+0xa8>)
 8004804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004808:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <MX_TIM8_Init+0xa8>)
 800480c:	2200      	movs	r2, #0
 800480e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <MX_TIM8_Init+0xa8>)
 8004812:	2200      	movs	r2, #0
 8004814:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <MX_TIM8_Init+0xa8>)
 8004818:	2200      	movs	r2, #0
 800481a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800481c:	2303      	movs	r3, #3
 800481e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004830:	2300      	movs	r3, #0
 8004832:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004834:	2301      	movs	r3, #1
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004838:	2300      	movs	r3, #0
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	4619      	mov	r1, r3
 8004846:	480d      	ldr	r0, [pc, #52]	; (800487c <MX_TIM8_Init+0xa8>)
 8004848:	f007 fe5c 	bl	800c504 <HAL_TIM_Encoder_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004852:	f000 fa85 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	4619      	mov	r1, r3
 8004862:	4806      	ldr	r0, [pc, #24]	; (800487c <MX_TIM8_Init+0xa8>)
 8004864:	f008 fb84 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800486e:	f000 fa77 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004872:	bf00      	nop
 8004874:	3730      	adds	r7, #48	; 0x30
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	2003983c 	.word	0x2003983c
 8004880:	40010400 	.word	0x40010400

08004884 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
 8004898:	615a      	str	r2, [r3, #20]
 800489a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800489c:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <MX_TIM10_Init+0x94>)
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <MX_TIM10_Init+0x98>)
 80048a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <MX_TIM10_Init+0x94>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <MX_TIM10_Init+0x94>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <MX_TIM10_Init+0x94>)
 80048b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b6:	4b18      	ldr	r3, [pc, #96]	; (8004918 <MX_TIM10_Init+0x94>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048bc:	4b16      	ldr	r3, [pc, #88]	; (8004918 <MX_TIM10_Init+0x94>)
 80048be:	2200      	movs	r2, #0
 80048c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80048c2:	4815      	ldr	r0, [pc, #84]	; (8004918 <MX_TIM10_Init+0x94>)
 80048c4:	f007 fd66 	bl	800c394 <HAL_TIM_Base_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80048ce:	f000 fa47 	bl	8004d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80048d2:	4811      	ldr	r0, [pc, #68]	; (8004918 <MX_TIM10_Init+0x94>)
 80048d4:	f007 fdad 	bl	800c432 <HAL_TIM_PWM_Init>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80048de:	f000 fa3f 	bl	8004d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048e2:	2360      	movs	r3, #96	; 0x60
 80048e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	2200      	movs	r2, #0
 80048f6:	4619      	mov	r1, r3
 80048f8:	4807      	ldr	r0, [pc, #28]	; (8004918 <MX_TIM10_Init+0x94>)
 80048fa:	f007 ffd5 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004904:	f000 fa2c 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004908:	4803      	ldr	r0, [pc, #12]	; (8004918 <MX_TIM10_Init+0x94>)
 800490a:	f000 fe19 	bl	8005540 <HAL_TIM_MspPostInit>

}
 800490e:	bf00      	nop
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20039958 	.word	0x20039958
 800491c:	40014400 	.word	0x40014400

08004920 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	611a      	str	r2, [r3, #16]
 8004934:	615a      	str	r2, [r3, #20]
 8004936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <MX_TIM11_Init+0x94>)
 800493a:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <MX_TIM11_Init+0x98>)
 800493c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800493e:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <MX_TIM11_Init+0x94>)
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <MX_TIM11_Init+0x94>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <MX_TIM11_Init+0x94>)
 800494c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004950:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004952:	4b18      	ldr	r3, [pc, #96]	; (80049b4 <MX_TIM11_Init+0x94>)
 8004954:	2200      	movs	r2, #0
 8004956:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004958:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <MX_TIM11_Init+0x94>)
 800495a:	2200      	movs	r2, #0
 800495c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800495e:	4815      	ldr	r0, [pc, #84]	; (80049b4 <MX_TIM11_Init+0x94>)
 8004960:	f007 fd18 	bl	800c394 <HAL_TIM_Base_Init>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800496a:	f000 f9f9 	bl	8004d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800496e:	4811      	ldr	r0, [pc, #68]	; (80049b4 <MX_TIM11_Init+0x94>)
 8004970:	f007 fd5f 	bl	800c432 <HAL_TIM_PWM_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800497a:	f000 f9f1 	bl	8004d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800497e:	2360      	movs	r3, #96	; 0x60
 8004980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	2200      	movs	r2, #0
 8004992:	4619      	mov	r1, r3
 8004994:	4807      	ldr	r0, [pc, #28]	; (80049b4 <MX_TIM11_Init+0x94>)
 8004996:	f007 ff87 	bl	800c8a8 <HAL_TIM_PWM_ConfigChannel>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80049a0:	f000 f9de 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80049a4:	4803      	ldr	r0, [pc, #12]	; (80049b4 <MX_TIM11_Init+0x94>)
 80049a6:	f000 fdcb 	bl	8005540 <HAL_TIM_MspPostInit>

}
 80049aa:	bf00      	nop
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20039a78 	.word	0x20039a78
 80049b8:	40014800 	.word	0x40014800

080049bc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <MX_TIM13_Init+0x40>)
 80049c2:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <MX_TIM13_Init+0x44>)
 80049c4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80049c6:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <MX_TIM13_Init+0x40>)
 80049c8:	2259      	movs	r2, #89	; 0x59
 80049ca:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <MX_TIM13_Init+0x40>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <MX_TIM13_Init+0x40>)
 80049d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80049d8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <MX_TIM13_Init+0x40>)
 80049dc:	2200      	movs	r2, #0
 80049de:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <MX_TIM13_Init+0x40>)
 80049e2:	2280      	movs	r2, #128	; 0x80
 80049e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80049e6:	4805      	ldr	r0, [pc, #20]	; (80049fc <MX_TIM13_Init+0x40>)
 80049e8:	f007 fcd4 	bl	800c394 <HAL_TIM_Base_Init>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80049f2:	f000 f9b5 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20039a38 	.word	0x20039a38
 8004a00:	40001c00 	.word	0x40001c00

08004a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a0a:	4a12      	ldr	r2, [pc, #72]	; (8004a54 <MX_USART2_UART_Init+0x50>)
 8004a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a3a:	4805      	ldr	r0, [pc, #20]	; (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a3c:	f008 fb7a 	bl	800d134 <HAL_UART_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a46:	f000 f98b 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20039c1c 	.word	0x20039c1c
 8004a54:	40004400 	.word	0x40004400

08004a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <MX_DMA_Init+0x5c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <MX_DMA_Init+0x5c>)
 8004a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <MX_DMA_Init+0x5c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	203a      	movs	r0, #58	; 0x3a
 8004a80:	f003 f83b 	bl	8007afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004a84:	203a      	movs	r0, #58	; 0x3a
 8004a86:	f003 f854 	bl	8007b32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	203b      	movs	r0, #59	; 0x3b
 8004a90:	f003 f833 	bl	8007afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004a94:	203b      	movs	r0, #59	; 0x3b
 8004a96:	f003 f84c 	bl	8007b32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2045      	movs	r0, #69	; 0x45
 8004aa0:	f003 f82b 	bl	8007afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004aa4:	2045      	movs	r0, #69	; 0x45
 8004aa6:	f003 f844 	bl	8007b32 <HAL_NVIC_EnableIRQ>

}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800

08004ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08c      	sub	sp, #48	; 0x30
 8004abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	60da      	str	r2, [r3, #12]
 8004acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	4b9c      	ldr	r3, [pc, #624]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a9b      	ldr	r2, [pc, #620]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004ad8:	f043 0310 	orr.w	r3, r3, #16
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b99      	ldr	r3, [pc, #612]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	4b95      	ldr	r3, [pc, #596]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a94      	ldr	r2, [pc, #592]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b92      	ldr	r3, [pc, #584]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	4b8e      	ldr	r3, [pc, #568]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a8d      	ldr	r2, [pc, #564]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b8b      	ldr	r3, [pc, #556]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	4b87      	ldr	r3, [pc, #540]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a86      	ldr	r2, [pc, #536]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b84      	ldr	r3, [pc, #528]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	4b80      	ldr	r3, [pc, #512]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a7f      	ldr	r2, [pc, #508]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b7d      	ldr	r3, [pc, #500]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	4b79      	ldr	r3, [pc, #484]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	4a78      	ldr	r2, [pc, #480]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6a:	4b76      	ldr	r3, [pc, #472]	; (8004d44 <MX_GPIO_Init+0x28c>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004b76:	2200      	movs	r2, #0
 8004b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b7c:	4872      	ldr	r0, [pc, #456]	; (8004d48 <MX_GPIO_Init+0x290>)
 8004b7e:	f003 fd51 	bl	8008624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004b82:	2200      	movs	r2, #0
 8004b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b88:	4870      	ldr	r0, [pc, #448]	; (8004d4c <MX_GPIO_Init+0x294>)
 8004b8a:	f003 fd4b 	bl	8008624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b94:	486e      	ldr	r0, [pc, #440]	; (8004d50 <MX_GPIO_Init+0x298>)
 8004b96:	f003 fd45 	bl	8008624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004ba0:	486c      	ldr	r0, [pc, #432]	; (8004d54 <MX_GPIO_Init+0x29c>)
 8004ba2:	f003 fd3f 	bl	8008624 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004baa:	4b6b      	ldr	r3, [pc, #428]	; (8004d58 <MX_GPIO_Init+0x2a0>)
 8004bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bb2:	f107 031c 	add.w	r3, r7, #28
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4863      	ldr	r0, [pc, #396]	; (8004d48 <MX_GPIO_Init+0x290>)
 8004bba:	f003 fb71 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004bbe:	230f      	movs	r3, #15
 8004bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bca:	f107 031c 	add.w	r3, r7, #28
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4862      	ldr	r0, [pc, #392]	; (8004d5c <MX_GPIO_Init+0x2a4>)
 8004bd2:	f003 fb65 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004bd6:	23e1      	movs	r3, #225	; 0xe1
 8004bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	f107 031c 	add.w	r3, r7, #28
 8004be6:	4619      	mov	r1, r3
 8004be8:	485a      	ldr	r0, [pc, #360]	; (8004d54 <MX_GPIO_Init+0x29c>)
 8004bea:	f003 fb59 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfa:	f107 031c 	add.w	r3, r7, #28
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4852      	ldr	r0, [pc, #328]	; (8004d4c <MX_GPIO_Init+0x294>)
 8004c02:	f003 fb4d 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c06:	2304      	movs	r3, #4
 8004c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c12:	f107 031c 	add.w	r3, r7, #28
 8004c16:	4619      	mov	r1, r3
 8004c18:	484c      	ldr	r0, [pc, #304]	; (8004d4c <MX_GPIO_Init+0x294>)
 8004c1a:	f003 fb41 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004c1e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c24:	2300      	movs	r3, #0
 8004c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	4845      	ldr	r0, [pc, #276]	; (8004d48 <MX_GPIO_Init+0x290>)
 8004c34:	f003 fb34 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c46:	2300      	movs	r3, #0
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c4a:	f107 031c 	add.w	r3, r7, #28
 8004c4e:	4619      	mov	r1, r3
 8004c50:	483d      	ldr	r0, [pc, #244]	; (8004d48 <MX_GPIO_Init+0x290>)
 8004c52:	f003 fb25 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c64:	2300      	movs	r3, #0
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4837      	ldr	r0, [pc, #220]	; (8004d4c <MX_GPIO_Init+0x294>)
 8004c70:	f003 fb16 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004c7a:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <MX_GPIO_Init+0x2a0>)
 8004c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c82:	f107 031c 	add.w	r3, r7, #28
 8004c86:	4619      	mov	r1, r3
 8004c88:	4831      	ldr	r0, [pc, #196]	; (8004d50 <MX_GPIO_Init+0x298>)
 8004c8a:	f003 fb09 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c94:	2301      	movs	r3, #1
 8004c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca0:	f107 031c 	add.w	r3, r7, #28
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	482a      	ldr	r0, [pc, #168]	; (8004d50 <MX_GPIO_Init+0x298>)
 8004ca8:	f003 fafa 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cbe:	f107 031c 	add.w	r3, r7, #28
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4822      	ldr	r0, [pc, #136]	; (8004d50 <MX_GPIO_Init+0x298>)
 8004cc6:	f003 faeb 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004cca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004cce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cdc:	f107 031c 	add.w	r3, r7, #28
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	481c      	ldr	r0, [pc, #112]	; (8004d54 <MX_GPIO_Init+0x29c>)
 8004ce4:	f003 fadc 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf6:	f107 031c 	add.w	r3, r7, #28
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4815      	ldr	r0, [pc, #84]	; (8004d54 <MX_GPIO_Init+0x29c>)
 8004cfe:	f003 facf 	bl	80082a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004d02:	239b      	movs	r3, #155	; 0x9b
 8004d04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d0e:	f107 031c 	add.w	r3, r7, #28
 8004d12:	4619      	mov	r1, r3
 8004d14:	480e      	ldr	r0, [pc, #56]	; (8004d50 <MX_GPIO_Init+0x298>)
 8004d16:	f003 fac3 	bl	80082a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2008      	movs	r0, #8
 8004d20:	f002 feeb 	bl	8007afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004d24:	2008      	movs	r0, #8
 8004d26:	f002 ff04 	bl	8007b32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	2017      	movs	r0, #23
 8004d30:	f002 fee3 	bl	8007afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d34:	2017      	movs	r0, #23
 8004d36:	f002 fefc 	bl	8007b32 <HAL_NVIC_EnableIRQ>

}
 8004d3a:	bf00      	nop
 8004d3c:	3730      	adds	r7, #48	; 0x30
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40020400 	.word	0x40020400
 8004d50:	40020c00 	.word	0x40020c00
 8004d54:	40020000 	.word	0x40020000
 8004d58:	10310000 	.word	0x10310000
 8004d5c:	40020800 	.word	0x40020800

08004d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d64:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d66:	e7fe      	b.n	8004d66 <Error_Handler+0x6>

08004d68 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6413      	str	r3, [r2, #64]	; 0x40
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800

08004dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08c      	sub	sp, #48	; 0x30
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	f107 031c 	add.w	r3, r7, #28
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a4a      	ldr	r2, [pc, #296]	; (8004f10 <HAL_ADC_MspInit+0x148>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	f040 808e 	bne.w	8004f08 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfc:	4b45      	ldr	r3, [pc, #276]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	4a40      	ldr	r2, [pc, #256]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e12:	f043 0304 	orr.w	r3, r3, #4
 8004e16:	6313      	str	r3, [r2, #48]	; 0x30
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	4b3a      	ldr	r3, [pc, #232]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6313      	str	r3, [r2, #48]	; 0x30
 8004e34:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e4a:	f043 0302 	orr.w	r3, r3, #2
 8004e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e50:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_ADC_MspInit+0x14c>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004e5c:	230f      	movs	r3, #15
 8004e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e60:	2303      	movs	r3, #3
 8004e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e68:	f107 031c 	add.w	r3, r7, #28
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	482a      	ldr	r0, [pc, #168]	; (8004f18 <HAL_ADC_MspInit+0x150>)
 8004e70:	f003 fa16 	bl	80082a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e74:	23ff      	movs	r3, #255	; 0xff
 8004e76:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e80:	f107 031c 	add.w	r3, r7, #28
 8004e84:	4619      	mov	r1, r3
 8004e86:	4825      	ldr	r0, [pc, #148]	; (8004f1c <HAL_ADC_MspInit+0x154>)
 8004e88:	f003 fa0a 	bl	80082a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e90:	2303      	movs	r3, #3
 8004e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e98:	f107 031c 	add.w	r3, r7, #28
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4820      	ldr	r0, [pc, #128]	; (8004f20 <HAL_ADC_MspInit+0x158>)
 8004ea0:	f003 f9fe 	bl	80082a0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004ea4:	4b1f      	ldr	r3, [pc, #124]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ea6:	4a20      	ldr	r2, [pc, #128]	; (8004f28 <HAL_ADC_MspInit+0x160>)
 8004ea8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004eaa:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eb0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004ebe:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ecc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ed4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004edc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ee4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004eec:	480d      	ldr	r0, [pc, #52]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004eee:	f002 fe3b 	bl	8007b68 <HAL_DMA_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004ef8:	f7ff ff32 	bl	8004d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <HAL_ADC_MspInit+0x15c>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004f08:	bf00      	nop
 8004f0a:	3730      	adds	r7, #48	; 0x30
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40012100 	.word	0x40012100
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40020800 	.word	0x40020800
 8004f1c:	40020000 	.word	0x40020000
 8004f20:	40020400 	.word	0x40020400
 8004f24:	20039c5c 	.word	0x20039c5c
 8004f28:	40026440 	.word	0x40026440

08004f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f34:	f107 031c 	add.w	r3, r7, #28
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a32      	ldr	r2, [pc, #200]	; (8005014 <HAL_I2C_MspInit+0xe8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d12c      	bne.n	8004fa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	4a30      	ldr	r2, [pc, #192]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f6a:	23c0      	movs	r3, #192	; 0xc0
 8004f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f6e:	2312      	movs	r3, #18
 8004f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f72:	2301      	movs	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f76:	2303      	movs	r3, #3
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7e:	f107 031c 	add.w	r3, r7, #28
 8004f82:	4619      	mov	r1, r3
 8004f84:	4825      	ldr	r0, [pc, #148]	; (800501c <HAL_I2C_MspInit+0xf0>)
 8004f86:	f003 f98b 	bl	80082a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004fa6:	e031      	b.n	800500c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_I2C_MspInit+0xf4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d12c      	bne.n	800500c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004fce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fd4:	2312      	movs	r3, #18
 8004fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe4:	f107 031c 	add.w	r3, r7, #28
 8004fe8:	4619      	mov	r1, r3
 8004fea:	480c      	ldr	r0, [pc, #48]	; (800501c <HAL_I2C_MspInit+0xf0>)
 8004fec:	f003 f958 	bl	80082a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	4a07      	ldr	r2, [pc, #28]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8004ffa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_I2C_MspInit+0xec>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	bf00      	nop
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40005400 	.word	0x40005400
 8005018:	40023800 	.word	0x40023800
 800501c:	40020400 	.word	0x40020400
 8005020:	40005800 	.word	0x40005800

08005024 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a69      	ldr	r2, [pc, #420]	; (80051e8 <HAL_SD_MspInit+0x1c4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f040 80cb 	bne.w	80051de <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	4b67      	ldr	r3, [pc, #412]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	4a66      	ldr	r2, [pc, #408]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 8005052:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005056:	6453      	str	r3, [r2, #68]	; 0x44
 8005058:	4b64      	ldr	r3, [pc, #400]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	4b60      	ldr	r3, [pc, #384]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	4a5f      	ldr	r2, [pc, #380]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	6313      	str	r3, [r2, #48]	; 0x30
 8005074:	4b5d      	ldr	r3, [pc, #372]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	4b59      	ldr	r3, [pc, #356]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	4a58      	ldr	r2, [pc, #352]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 800508a:	f043 0308 	orr.w	r3, r3, #8
 800508e:	6313      	str	r3, [r2, #48]	; 0x30
 8005090:	4b56      	ldr	r3, [pc, #344]	; (80051ec <HAL_SD_MspInit+0x1c8>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800509c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80050a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80050ae:	230c      	movs	r3, #12
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050b2:	f107 0314 	add.w	r3, r7, #20
 80050b6:	4619      	mov	r1, r3
 80050b8:	484d      	ldr	r0, [pc, #308]	; (80051f0 <HAL_SD_MspInit+0x1cc>)
 80050ba:	f003 f8f1 	bl	80082a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050be:	2304      	movs	r3, #4
 80050c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ca:	2303      	movs	r3, #3
 80050cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80050ce:	230c      	movs	r3, #12
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	4846      	ldr	r0, [pc, #280]	; (80051f4 <HAL_SD_MspInit+0x1d0>)
 80050da:	f003 f8e1 	bl	80082a0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80050de:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 80050e0:	4a46      	ldr	r2, [pc, #280]	; (80051fc <HAL_SD_MspInit+0x1d8>)
 80050e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80050e4:	4b44      	ldr	r3, [pc, #272]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 80050e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ec:	4b42      	ldr	r3, [pc, #264]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f2:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050f8:	4b3f      	ldr	r3, [pc, #252]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 80050fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005102:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005106:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005108:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 800510a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800510e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005110:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005112:	2220      	movs	r2, #32
 8005114:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005118:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800511c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005120:	2204      	movs	r2, #4
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005124:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005126:	2203      	movs	r2, #3
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 800512c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005130:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005132:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005134:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800513a:	482f      	ldr	r0, [pc, #188]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 800513c:	f002 fd14 	bl	8007b68 <HAL_DMA_Init>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005146:	f7ff fe0b 	bl	8004d60 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2a      	ldr	r2, [pc, #168]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
 8005150:	4a29      	ldr	r2, [pc, #164]	; (80051f8 <HAL_SD_MspInit+0x1d4>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 8005158:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <HAL_SD_MspInit+0x1e0>)
 800515a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800515c:	4b28      	ldr	r3, [pc, #160]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 800515e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005162:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005164:	4b26      	ldr	r3, [pc, #152]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 8005166:	2240      	movs	r2, #64	; 0x40
 8005168:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800516a:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 800516c:	2200      	movs	r2, #0
 800516e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005170:	4b23      	ldr	r3, [pc, #140]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 8005172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005176:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005178:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 800517a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800517e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005180:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 8005182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005186:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005188:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 800518a:	2220      	movs	r2, #32
 800518c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800518e:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 8005190:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005194:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 8005198:	2204      	movs	r2, #4
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 800519e:	2203      	movs	r2, #3
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80051a2:	4b17      	ldr	r3, [pc, #92]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 80051a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 80051ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80051b2:	4813      	ldr	r0, [pc, #76]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 80051b4:	f002 fcd8 	bl	8007b68 <HAL_DMA_Init>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80051be:	f7ff fdcf 	bl	8004d60 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80051c8:	4a0d      	ldr	r2, [pc, #52]	; (8005200 <HAL_SD_MspInit+0x1dc>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80051ce:	2200      	movs	r2, #0
 80051d0:	2100      	movs	r1, #0
 80051d2:	2031      	movs	r0, #49	; 0x31
 80051d4:	f002 fc91 	bl	8007afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80051d8:	2031      	movs	r0, #49	; 0x31
 80051da:	f002 fcaa 	bl	8007b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80051de:	bf00      	nop
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40020800 	.word	0x40020800
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	20039784 	.word	0x20039784
 80051fc:	40026458 	.word	0x40026458
 8005200:	20039ab8 	.word	0x20039ab8
 8005204:	400264a0 	.word	0x400264a0

08005208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	609a      	str	r2, [r3, #8]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <HAL_SPI_MspInit+0x84>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d12c      	bne.n	8005284 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	4b18      	ldr	r3, [pc, #96]	; (8005290 <HAL_SPI_MspInit+0x88>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4a17      	ldr	r2, [pc, #92]	; (8005290 <HAL_SPI_MspInit+0x88>)
 8005234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005238:	6413      	str	r3, [r2, #64]	; 0x40
 800523a:	4b15      	ldr	r3, [pc, #84]	; (8005290 <HAL_SPI_MspInit+0x88>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_SPI_MspInit+0x88>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	4a10      	ldr	r2, [pc, #64]	; (8005290 <HAL_SPI_MspInit+0x88>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6313      	str	r3, [r2, #48]	; 0x30
 8005256:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <HAL_SPI_MspInit+0x88>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005262:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	2302      	movs	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005270:	2303      	movs	r3, #3
 8005272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005274:	2305      	movs	r3, #5
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	4619      	mov	r1, r3
 800527e:	4805      	ldr	r0, [pc, #20]	; (8005294 <HAL_SPI_MspInit+0x8c>)
 8005280:	f003 f80e 	bl	80082a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005284:	bf00      	nop
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40003800 	.word	0x40003800
 8005290:	40023800 	.word	0x40023800
 8005294:	40020400 	.word	0x40020400

08005298 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 031c 	add.w	r3, r7, #28
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2d      	ldr	r2, [pc, #180]	; (800536c <HAL_TIM_PWM_MspInit+0xd4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d12d      	bne.n	8005316 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	4a2b      	ldr	r2, [pc, #172]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6453      	str	r3, [r2, #68]	; 0x44
 80052ca:	4b29      	ldr	r3, [pc, #164]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	4a24      	ldr	r2, [pc, #144]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 80052e0:	f043 0310 	orr.w	r3, r3, #16
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30
 80052e6:	4b22      	ldr	r3, [pc, #136]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80052f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80052f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f8:	2302      	movs	r3, #2
 80052fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005300:	2300      	movs	r3, #0
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005304:	2301      	movs	r3, #1
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005308:	f107 031c 	add.w	r3, r7, #28
 800530c:	4619      	mov	r1, r3
 800530e:	4819      	ldr	r0, [pc, #100]	; (8005374 <HAL_TIM_PWM_MspInit+0xdc>)
 8005310:	f002 ffc6 	bl	80082a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005314:	e026      	b.n	8005364 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <HAL_TIM_PWM_MspInit+0xe0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10e      	bne.n	800533e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	4a11      	ldr	r2, [pc, #68]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	6413      	str	r3, [r2, #64]	; 0x40
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	693b      	ldr	r3, [r7, #16]
}
 800533c:	e012      	b.n	8005364 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_TIM_PWM_MspInit+0xe4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10d      	bne.n	8005364 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	4a07      	ldr	r2, [pc, #28]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 8005352:	f043 0304 	orr.w	r3, r3, #4
 8005356:	6413      	str	r3, [r2, #64]	; 0x40
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_TIM_PWM_MspInit+0xd8>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	bf00      	nop
 8005366:	3730      	adds	r7, #48	; 0x30
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40010000 	.word	0x40010000
 8005370:	40023800 	.word	0x40023800
 8005374:	40021000 	.word	0x40021000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800

08005380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3e      	ldr	r2, [pc, #248]	; (8005488 <HAL_TIM_Base_MspInit+0x108>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d116      	bne.n	80053c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	4b3d      	ldr	r3, [pc, #244]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a3c      	ldr	r2, [pc, #240]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 800539c:	f043 0310 	orr.w	r3, r3, #16
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b3a      	ldr	r3, [pc, #232]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2101      	movs	r1, #1
 80053b2:	2036      	movs	r0, #54	; 0x36
 80053b4:	f002 fba1 	bl	8007afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053b8:	2036      	movs	r0, #54	; 0x36
 80053ba:	f002 fbba 	bl	8007b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80053be:	e05e      	b.n	800547e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a32      	ldr	r2, [pc, #200]	; (8005490 <HAL_TIM_Base_MspInit+0x110>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d116      	bne.n	80053f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	4b2f      	ldr	r3, [pc, #188]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	4a2e      	ldr	r2, [pc, #184]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 80053d4:	f043 0320 	orr.w	r3, r3, #32
 80053d8:	6413      	str	r3, [r2, #64]	; 0x40
 80053da:	4b2c      	ldr	r3, [pc, #176]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80053e6:	2200      	movs	r2, #0
 80053e8:	2100      	movs	r1, #0
 80053ea:	2037      	movs	r0, #55	; 0x37
 80053ec:	f002 fb85 	bl	8007afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053f0:	2037      	movs	r0, #55	; 0x37
 80053f2:	f002 fb9e 	bl	8007b32 <HAL_NVIC_EnableIRQ>
}
 80053f6:	e042      	b.n	800547e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a25      	ldr	r2, [pc, #148]	; (8005494 <HAL_TIM_Base_MspInit+0x114>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	4a20      	ldr	r2, [pc, #128]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 800540c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005410:	6453      	str	r3, [r2, #68]	; 0x44
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]
}
 800541e:	e02e      	b.n	800547e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <HAL_TIM_Base_MspInit+0x118>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b14      	ldr	r3, [pc, #80]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	693b      	ldr	r3, [r7, #16]
}
 8005446:	e01a      	b.n	800547e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <HAL_TIM_Base_MspInit+0x11c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d115      	bne.n	800547e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_TIM_Base_MspInit+0x10c>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800546e:	2200      	movs	r2, #0
 8005470:	2100      	movs	r1, #0
 8005472:	202c      	movs	r0, #44	; 0x2c
 8005474:	f002 fb41 	bl	8007afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005478:	202c      	movs	r0, #44	; 0x2c
 800547a:	f002 fb5a 	bl	8007b32 <HAL_NVIC_EnableIRQ>
}
 800547e:	bf00      	nop
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40001000 	.word	0x40001000
 800548c:	40023800 	.word	0x40023800
 8005490:	40001400 	.word	0x40001400
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40001c00 	.word	0x40001c00

080054a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	609a      	str	r2, [r3, #8]
 80054b4:	60da      	str	r2, [r3, #12]
 80054b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <HAL_TIM_Encoder_MspInit+0x94>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d133      	bne.n	800552a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_TIM_Encoder_MspInit+0x98>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <HAL_TIM_Encoder_MspInit+0x98>)
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	6453      	str	r3, [r2, #68]	; 0x44
 80054d2:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_TIM_Encoder_MspInit+0x98>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_TIM_Encoder_MspInit+0x98>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	4a14      	ldr	r2, [pc, #80]	; (8005538 <HAL_TIM_Encoder_MspInit+0x98>)
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	6313      	str	r3, [r2, #48]	; 0x30
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_TIM_Encoder_MspInit+0x98>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054fa:	23c0      	movs	r3, #192	; 0xc0
 80054fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005506:	2300      	movs	r3, #0
 8005508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800550a:	2303      	movs	r3, #3
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800550e:	f107 0314 	add.w	r3, r7, #20
 8005512:	4619      	mov	r1, r3
 8005514:	4809      	ldr	r0, [pc, #36]	; (800553c <HAL_TIM_Encoder_MspInit+0x9c>)
 8005516:	f002 fec3 	bl	80082a0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	202c      	movs	r0, #44	; 0x2c
 8005520:	f002 faeb 	bl	8007afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005524:	202c      	movs	r0, #44	; 0x2c
 8005526:	f002 fb04 	bl	8007b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800552a:	bf00      	nop
 800552c:	3728      	adds	r7, #40	; 0x28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40010400 	.word	0x40010400
 8005538:	40023800 	.word	0x40023800
 800553c:	40020800 	.word	0x40020800

08005540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	; 0x30
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005548:	f107 031c 	add.w	r3, r7, #28
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a5c      	ldr	r2, [pc, #368]	; (80056d0 <HAL_TIM_MspPostInit+0x190>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d11f      	bne.n	80055a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	4b5b      	ldr	r3, [pc, #364]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	4a5a      	ldr	r2, [pc, #360]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 800556c:	f043 0310 	orr.w	r3, r3, #16
 8005570:	6313      	str	r3, [r2, #48]	; 0x30
 8005572:	4b58      	ldr	r3, [pc, #352]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800557e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005584:	2302      	movs	r3, #2
 8005586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558c:	2300      	movs	r3, #0
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005590:	2301      	movs	r3, #1
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005594:	f107 031c 	add.w	r3, r7, #28
 8005598:	4619      	mov	r1, r3
 800559a:	484f      	ldr	r0, [pc, #316]	; (80056d8 <HAL_TIM_MspPostInit+0x198>)
 800559c:	f002 fe80 	bl	80082a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80055a0:	e091      	b.n	80056c6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a4d      	ldr	r2, [pc, #308]	; (80056dc <HAL_TIM_MspPostInit+0x19c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d11e      	bne.n	80055ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	4b48      	ldr	r3, [pc, #288]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	4a47      	ldr	r2, [pc, #284]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	6313      	str	r3, [r2, #48]	; 0x30
 80055bc:	4b45      	ldr	r3, [pc, #276]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055c8:	2330      	movs	r3, #48	; 0x30
 80055ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055d8:	2302      	movs	r3, #2
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055dc:	f107 031c 	add.w	r3, r7, #28
 80055e0:	4619      	mov	r1, r3
 80055e2:	483f      	ldr	r0, [pc, #252]	; (80056e0 <HAL_TIM_MspPostInit+0x1a0>)
 80055e4:	f002 fe5c 	bl	80082a0 <HAL_GPIO_Init>
}
 80055e8:	e06d      	b.n	80056c6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <HAL_TIM_MspPostInit+0x1a4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d11f      	bne.n	8005634 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	4a35      	ldr	r2, [pc, #212]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 80055fe:	f043 0308 	orr.w	r3, r3, #8
 8005602:	6313      	str	r3, [r2, #48]	; 0x30
 8005604:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005610:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005616:	2302      	movs	r3, #2
 8005618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561e:	2300      	movs	r3, #0
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005622:	2302      	movs	r3, #2
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005626:	f107 031c 	add.w	r3, r7, #28
 800562a:	4619      	mov	r1, r3
 800562c:	482e      	ldr	r0, [pc, #184]	; (80056e8 <HAL_TIM_MspPostInit+0x1a8>)
 800562e:	f002 fe37 	bl	80082a0 <HAL_GPIO_Init>
}
 8005632:	e048      	b.n	80056c6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <HAL_TIM_MspPostInit+0x1ac>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d11f      	bne.n	800567e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6313      	str	r3, [r2, #48]	; 0x30
 800564e:	4b21      	ldr	r3, [pc, #132]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800565a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005668:	2300      	movs	r3, #0
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800566c:	2303      	movs	r3, #3
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005670:	f107 031c 	add.w	r3, r7, #28
 8005674:	4619      	mov	r1, r3
 8005676:	481a      	ldr	r0, [pc, #104]	; (80056e0 <HAL_TIM_MspPostInit+0x1a0>)
 8005678:	f002 fe12 	bl	80082a0 <HAL_GPIO_Init>
}
 800567c:	e023      	b.n	80056c6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_TIM_MspPostInit+0x1b0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d11e      	bne.n	80056c6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005688:	2300      	movs	r3, #0
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 8005692:	f043 0302 	orr.w	r3, r3, #2
 8005696:	6313      	str	r3, [r2, #48]	; 0x30
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <HAL_TIM_MspPostInit+0x194>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056aa:	2302      	movs	r3, #2
 80056ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b2:	2300      	movs	r3, #0
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80056b6:	2303      	movs	r3, #3
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ba:	f107 031c 	add.w	r3, r7, #28
 80056be:	4619      	mov	r1, r3
 80056c0:	4807      	ldr	r0, [pc, #28]	; (80056e0 <HAL_TIM_MspPostInit+0x1a0>)
 80056c2:	f002 fded 	bl	80082a0 <HAL_GPIO_Init>
}
 80056c6:	bf00      	nop
 80056c8:	3730      	adds	r7, #48	; 0x30
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40023800 	.word	0x40023800
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40020400 	.word	0x40020400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40020c00 	.word	0x40020c00
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	; 0x28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056fc:	f107 0314 	add.w	r3, r7, #20
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a19      	ldr	r2, [pc, #100]	; (8005778 <HAL_UART_MspInit+0x84>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d12b      	bne.n	800576e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <HAL_UART_MspInit+0x88>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_UART_MspInit+0x88>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005724:	6413      	str	r3, [r2, #64]	; 0x40
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <HAL_UART_MspInit+0x88>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_UART_MspInit+0x88>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	4a10      	ldr	r2, [pc, #64]	; (800577c <HAL_UART_MspInit+0x88>)
 800573c:	f043 0308 	orr.w	r3, r3, #8
 8005740:	6313      	str	r3, [r2, #48]	; 0x30
 8005742:	4b0e      	ldr	r3, [pc, #56]	; (800577c <HAL_UART_MspInit+0x88>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800574e:	2360      	movs	r3, #96	; 0x60
 8005750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005752:	2302      	movs	r3, #2
 8005754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800575a:	2303      	movs	r3, #3
 800575c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800575e:	2307      	movs	r3, #7
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	4619      	mov	r1, r3
 8005768:	4805      	ldr	r0, [pc, #20]	; (8005780 <HAL_UART_MspInit+0x8c>)
 800576a:	f002 fd99 	bl	80082a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800576e:	bf00      	nop
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40004400 	.word	0x40004400
 800577c:	40023800 	.word	0x40023800
 8005780:	40020c00 	.word	0x40020c00

08005784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005788:	e7fe      	b.n	8005788 <NMI_Handler+0x4>

0800578a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800578e:	e7fe      	b.n	800578e <HardFault_Handler+0x4>

08005790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005794:	e7fe      	b.n	8005794 <MemManage_Handler+0x4>

08005796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005796:	b480      	push	{r7}
 8005798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800579a:	e7fe      	b.n	800579a <BusFault_Handler+0x4>

0800579c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a0:	e7fe      	b.n	80057a0 <UsageFault_Handler+0x4>

080057a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057a2:	b480      	push	{r7}
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057d0:	f001 fc72 	bl	80070b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057d4:	bf00      	nop
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80057dc:	2004      	movs	r0, #4
 80057de:	f002 ff3b 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057ee:	f002 ff33 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057fc:	4803      	ldr	r0, [pc, #12]	; (800580c <TIM8_UP_TIM13_IRQHandler+0x14>)
 80057fe:	f006 ff4a 	bl	800c696 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005802:	4803      	ldr	r0, [pc, #12]	; (8005810 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005804:	f006 ff47 	bl	800c696 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	bd80      	pop	{r7, pc}
 800580c:	2003983c 	.word	0x2003983c
 8005810:	20039a38 	.word	0x20039a38

08005814 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005818:	4802      	ldr	r0, [pc, #8]	; (8005824 <SDIO_IRQHandler+0x10>)
 800581a:	f004 ffe3 	bl	800a7e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20039b98 	.word	0x20039b98

08005828 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800582c:	4802      	ldr	r0, [pc, #8]	; (8005838 <TIM6_DAC_IRQHandler+0x10>)
 800582e:	f006 ff32 	bl	800c696 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20039b18 	.word	0x20039b18

0800583c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005840:	4802      	ldr	r0, [pc, #8]	; (800584c <TIM7_IRQHandler+0x10>)
 8005842:	f006 ff28 	bl	800c696 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20039cbc 	.word	0x20039cbc

08005850 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005854:	4802      	ldr	r0, [pc, #8]	; (8005860 <DMA2_Stream2_IRQHandler+0x10>)
 8005856:	f002 faaf 	bl	8007db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20039c5c 	.word	0x20039c5c

08005864 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005868:	4802      	ldr	r0, [pc, #8]	; (8005874 <DMA2_Stream3_IRQHandler+0x10>)
 800586a:	f002 faa5 	bl	8007db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20039784 	.word	0x20039784

08005878 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800587c:	4802      	ldr	r0, [pc, #8]	; (8005888 <DMA2_Stream6_IRQHandler+0x10>)
 800587e:	f002 fa9b 	bl	8007db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20039ab8 	.word	0x20039ab8

0800588c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e00a      	b.n	80058b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800589e:	f3af 8000 	nop.w
 80058a2:	4601      	mov	r1, r0
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	60ba      	str	r2, [r7, #8]
 80058aa:	b2ca      	uxtb	r2, r1
 80058ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	3301      	adds	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	dbf0      	blt.n	800589e <_read+0x12>
	}

return len;
 80058bc:	687b      	ldr	r3, [r7, #4]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
	return -1;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ee:	605a      	str	r2, [r3, #4]
	return 0;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <_isatty>:

int _isatty(int file)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
	return 1;
 8005906:	2301      	movs	r3, #1
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
	return 0;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <_sbrk+0x5c>)
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <_sbrk+0x60>)
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <_sbrk+0x64>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <_sbrk+0x64>)
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <_sbrk+0x68>)
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <_sbrk+0x64>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	429a      	cmp	r2, r3
 800595e:	d207      	bcs.n	8005970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005960:	f00d f92c 	bl	8012bbc <__errno>
 8005964:	4602      	mov	r2, r0
 8005966:	230c      	movs	r3, #12
 8005968:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	e009      	b.n	8005984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <_sbrk+0x64>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005976:	4b07      	ldr	r3, [pc, #28]	; (8005994 <_sbrk+0x64>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	4a05      	ldr	r2, [pc, #20]	; (8005994 <_sbrk+0x64>)
 8005980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20050000 	.word	0x20050000
 8005990:	00000800 	.word	0x00000800
 8005994:	20000294 	.word	0x20000294
 8005998:	2003be10 	.word	0x2003be10

0800599c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059a0:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <SystemInit+0x28>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <SystemInit+0x28>)
 80059a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <SystemInit+0x28>)
 80059b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059b6:	609a      	str	r2, [r3, #8]
#endif
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	lcd_clear();
 80059cc:	f7fb fb68 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80059d0:	2100      	movs	r1, #0
 80059d2:	2000      	movs	r0, #0
 80059d4:	f7fb fb74 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80059d8:	4814      	ldr	r0, [pc, #80]	; (8005a2c <batteryLowMode+0x64>)
 80059da:	f7fb fb9b 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059de:	2101      	movs	r1, #1
 80059e0:	2000      	movs	r0, #0
 80059e2:	f7fb fb6d 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80059e6:	4812      	ldr	r0, [pc, #72]	; (8005a30 <batteryLowMode+0x68>)
 80059e8:	f7fb fb94 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80059ec:	2152      	movs	r1, #82	; 0x52
 80059ee:	4811      	ldr	r0, [pc, #68]	; (8005a34 <batteryLowMode+0x6c>)
 80059f0:	f7fc fa40 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059f4:	2064      	movs	r0, #100	; 0x64
 80059f6:	f001 fb7f 	bl	80070f8 <HAL_Delay>
		led.fullColor('Y');
 80059fa:	2159      	movs	r1, #89	; 0x59
 80059fc:	480d      	ldr	r0, [pc, #52]	; (8005a34 <batteryLowMode+0x6c>)
 80059fe:	f7fc fa39 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a02:	2064      	movs	r0, #100	; 0x64
 8005a04:	f001 fb78 	bl	80070f8 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <batteryLowMode+0x70>)
 8005a0a:	f7fc f9cf 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0e6      	beq.n	80059ec <batteryLowMode+0x24>
			HAL_Delay(500);
 8005a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a22:	f001 fb69 	bl	80070f8 <HAL_Delay>
			break;
 8005a26:	bf00      	nop
		}
	}
}
 8005a28:	bf00      	nop
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	08017dd4 	.word	0x08017dd4
 8005a30:	08017ddc 	.word	0x08017ddc
 8005a34:	200005a4 	.word	0x200005a4
 8005a38:	20000598 	.word	0x20000598

08005a3c <cppInit>:

void cppInit(void)
{
 8005a3c:	b598      	push	{r3, r4, r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
	lcd_init();
 8005a40:	f7fb faea 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005a44:	483f      	ldr	r0, [pc, #252]	; (8005b44 <cppInit+0x108>)
 8005a46:	f7fd fd5f 	bl	8003508 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005a4a:	2064      	movs	r0, #100	; 0x64
 8005a4c:	f001 fb54 	bl	80070f8 <HAL_Delay>
	power_sensor.updateValues();
 8005a50:	483c      	ldr	r0, [pc, #240]	; (8005b44 <cppInit+0x108>)
 8005a52:	f7fd fd69 	bl	8003528 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8005a56:	f7fb fb23 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f7fb fb2f 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005a62:	4839      	ldr	r0, [pc, #228]	; (8005b48 <cppInit+0x10c>)
 8005a64:	f7fb fb56 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005a68:	2101      	movs	r1, #1
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f7fb fb28 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005a70:	4834      	ldr	r0, [pc, #208]	; (8005b44 <cppInit+0x108>)
 8005a72:	f7fd fd83 	bl	800357c <_ZN11PowerSensor17getButteryVoltageEv>
 8005a76:	ee10 3a10 	vmov	r3, s0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fa fd7c 	bl	8000578 <__aeabi_f2d>
 8005a80:	4603      	mov	r3, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	461a      	mov	r2, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	4830      	ldr	r0, [pc, #192]	; (8005b4c <cppInit+0x110>)
 8005a8a:	f7fb fb43 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8005a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a92:	f001 fb31 	bl	80070f8 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005a96:	482b      	ldr	r0, [pc, #172]	; (8005b44 <cppInit+0x108>)
 8005a98:	f7fd fd82 	bl	80035a0 <_ZN11PowerSensor12butteryCheckEv>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <cppInit+0x6a>
 8005aa2:	f7ff ff91 	bl	80059c8 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005aa6:	482a      	ldr	r0, [pc, #168]	; (8005b50 <cppInit+0x114>)
 8005aa8:	f7fd f8e0 	bl	8002c6c <_ZN6Logger10sdCardInitEv>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <cppInit+0x86>
		led.fullColor('G');
 8005ab2:	2147      	movs	r1, #71	; 0x47
 8005ab4:	4827      	ldr	r0, [pc, #156]	; (8005b54 <cppInit+0x118>)
 8005ab6:	f7fc f9dd 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005aba:	2064      	movs	r0, #100	; 0x64
 8005abc:	f001 fb1c 	bl	80070f8 <HAL_Delay>
 8005ac0:	e006      	b.n	8005ad0 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005ac2:	2152      	movs	r1, #82	; 0x52
 8005ac4:	4823      	ldr	r0, [pc, #140]	; (8005b54 <cppInit+0x118>)
 8005ac6:	f7fc f9d5 	bl	8001e74 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005aca:	2064      	movs	r0, #100	; 0x64
 8005acc:	f001 fb14 	bl	80070f8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005ad0:	4821      	ldr	r0, [pc, #132]	; (8005b58 <cppInit+0x11c>)
 8005ad2:	f7fc fb2b 	bl	800212c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005ad6:	4821      	ldr	r0, [pc, #132]	; (8005b5c <cppInit+0x120>)
 8005ad8:	f7fd fa08 	bl	8002eec <_ZN5Motor4initEv>
	encoder.init();
 8005adc:	4820      	ldr	r0, [pc, #128]	; (8005b60 <cppInit+0x124>)
 8005ade:	f7fb fb5d 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 8005ae2:	4820      	ldr	r0, [pc, #128]	; (8005b64 <cppInit+0x128>)
 8005ae4:	f7fb ff7e 	bl	80019e4 <_ZN3IMU4initEv>
	line_trace.init();
 8005ae8:	481f      	ldr	r0, [pc, #124]	; (8005b68 <cppInit+0x12c>)
 8005aea:	f7fc ff7d 	bl	80029e8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8005aee:	481a      	ldr	r0, [pc, #104]	; (8005b58 <cppInit+0x11c>)
 8005af0:	f7fc fc5c 	bl	80023ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005af8:	f001 fafe 	bl	80070f8 <HAL_Delay>

	led.fullColor('M');
 8005afc:	214d      	movs	r1, #77	; 0x4d
 8005afe:	4815      	ldr	r0, [pc, #84]	; (8005b54 <cppInit+0x118>)
 8005b00:	f7fc f9b8 	bl	8001e74 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005b04:	4817      	ldr	r0, [pc, #92]	; (8005b64 <cppInit+0x128>)
 8005b06:	f7fc f83d 	bl	8001b84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8005b0a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005b6c <cppInit+0x130>
 8005b0e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005b70 <cppInit+0x134>
 8005b12:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005b74 <cppInit+0x138>
 8005b16:	4818      	ldr	r0, [pc, #96]	; (8005b78 <cppInit+0x13c>)
 8005b18:	f7fe f8c6 	bl	8003ca8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8005b1c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8005b7c <cppInit+0x140>
 8005b20:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005b80 <cppInit+0x144>
 8005b24:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8005b84 <cppInit+0x148>
 8005b28:	4813      	ldr	r0, [pc, #76]	; (8005b78 <cppInit+0x13c>)
 8005b2a:	f7fe f8d6 	bl	8003cda <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005b2e:	480c      	ldr	r0, [pc, #48]	; (8005b60 <cppInit+0x124>)
 8005b30:	f7fb fc63 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005b34:	4814      	ldr	r0, [pc, #80]	; (8005b88 <cppInit+0x14c>)
 8005b36:	f7fd fbb4 	bl	80032a2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005b3a:	4814      	ldr	r0, [pc, #80]	; (8005b8c <cppInit+0x150>)
 8005b3c:	f7fd fc4c 	bl	80033d8 <_ZN13PathFollowing4initEv>

}
 8005b40:	bf00      	nop
 8005b42:	bd98      	pop	{r3, r4, r7, pc}
 8005b44:	200005a8 	.word	0x200005a8
 8005b48:	08017de0 	.word	0x08017de0
 8005b4c:	08017de8 	.word	0x08017de8
 8005b50:	200005c8 	.word	0x200005c8
 8005b54:	200005a4 	.word	0x200005a4
 8005b58:	20000298 	.word	0x20000298
 8005b5c:	200005a0 	.word	0x200005a0
 8005b60:	2001f9d0 	.word	0x2001f9d0
 8005b64:	200005b4 	.word	0x200005b4
 8005b68:	2001fa24 	.word	0x2001fa24
 8005b6c:	3cceca68 	.word	0x3cceca68
 8005b70:	4180f06f 	.word	0x4180f06f
 8005b74:	3fea2d0e 	.word	0x3fea2d0e
 8005b78:	2001f9e8 	.word	0x2001f9e8
 8005b7c:	3ab7dacd 	.word	0x3ab7dacd
 8005b80:	3f5e3fbc 	.word	0x3f5e3fbc
 8005b84:	3d8eefa2 	.word	0x3d8eefa2
 8005b88:	2001fa90 	.word	0x2001fa90
 8005b8c:	2001fcd0 	.word	0x2001fcd0

08005b90 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005b94:	481d      	ldr	r0, [pc, #116]	; (8005c0c <cppFlip1ms+0x7c>)
 8005b96:	f7fc fb27 	bl	80021e8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005b9a:	481d      	ldr	r0, [pc, #116]	; (8005c10 <cppFlip1ms+0x80>)
 8005b9c:	f7fb ff50 	bl	8001a40 <_ZN3IMU12updateValuesEv>
	//mon_zg = imu.getOmega();
	//mon_offset = imu.getOffsetVal();
	encoder.updateCnt();
 8005ba0:	481c      	ldr	r0, [pc, #112]	; (8005c14 <cppFlip1ms+0x84>)
 8005ba2:	f7fb fb1d 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005ba6:	481c      	ldr	r0, [pc, #112]	; (8005c18 <cppFlip1ms+0x88>)
 8005ba8:	f7fc ffb6 	bl	8002b18 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005bac:	481b      	ldr	r0, [pc, #108]	; (8005c1c <cppFlip1ms+0x8c>)
 8005bae:	f7fe f8ad 	bl	8003d0c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005bb2:	481b      	ldr	r0, [pc, #108]	; (8005c20 <cppFlip1ms+0x90>)
 8005bb4:	f7fd fb6a 	bl	800328c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005bb8:	481a      	ldr	r0, [pc, #104]	; (8005c24 <cppFlip1ms+0x94>)
 8005bba:	f7fd f9a9 	bl	8002f10 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(velocity_ctrl.getCurrentVelocity());
 8005bbe:	4817      	ldr	r0, [pc, #92]	; (8005c1c <cppFlip1ms+0x8c>)
 8005bc0:	f7fe f8e6 	bl	8003d90 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8005bc4:	eef0 7a40 	vmov.f32	s15, s0
 8005bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8005bcc:	4816      	ldr	r0, [pc, #88]	; (8005c28 <cppFlip1ms+0x98>)
 8005bce:	f7fd f89f 	bl	8002d10 <_ZN6Logger8storeLogEf>
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8005bd2:	4b16      	ldr	r3, [pc, #88]	; (8005c2c <cppFlip1ms+0x9c>)
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <cppFlip1ms+0x9c>)
 8005bdc:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <cppFlip1ms+0x9c>)
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d90c      	bls.n	8005c00 <cppFlip1ms+0x70>
		sys_ident.inOutputStore(imu.getOmega());
 8005be6:	480a      	ldr	r0, [pc, #40]	; (8005c10 <cppFlip1ms+0x80>)
 8005be8:	f7fb ff82 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005bec:	eef0 7a40 	vmov.f32	s15, s0
 8005bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8005bf4:	480e      	ldr	r0, [pc, #56]	; (8005c30 <cppFlip1ms+0xa0>)
 8005bf6:	f7fd fe29 	bl	800384c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <cppFlip1ms+0x9c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005c00:	4804      	ldr	r0, [pc, #16]	; (8005c14 <cppFlip1ms+0x84>)
 8005c02:	f7fb fc09 	bl	8001418 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000298 	.word	0x20000298
 8005c10:	200005b4 	.word	0x200005b4
 8005c14:	2001f9d0 	.word	0x2001f9d0
 8005c18:	2001fa24 	.word	0x2001fa24
 8005c1c:	2001f9e8 	.word	0x2001f9e8
 8005c20:	2001fa90 	.word	0x2001fa90
 8005c24:	200005a0 	.word	0x200005a0
 8005c28:	200005c8 	.word	0x200005c8
 8005c2c:	200373fa 	.word	0x200373fa
 8005c30:	2001fac0 	.word	0x2001fac0

08005c34 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005c38:	4802      	ldr	r0, [pc, #8]	; (8005c44 <cppFlip100ns+0x10>)
 8005c3a:	f7fc fa87 	bl	800214c <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000298 	.word	0x20000298

08005c48 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <cppFlip10ms+0x30>)
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <cppFlip10ms+0x30>)
 8005c56:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <cppFlip10ms+0x30>)
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	2b06      	cmp	r3, #6
 8005c5e:	d905      	bls.n	8005c6c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005c60:	4806      	ldr	r0, [pc, #24]	; (8005c7c <cppFlip10ms+0x34>)
 8005c62:	f7fd fe2f 	bl	80038c4 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8005c66:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <cppFlip10ms+0x30>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <cppFlip10ms+0x30>)
 8005c6e:	881a      	ldrh	r2, [r3, #0]
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <cppFlip10ms+0x38>)
 8005c72:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005c74:	bf00      	nop
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	200373fc 	.word	0x200373fc
 8005c7c:	2001fac0 	.word	0x2001fac0
 8005c80:	200373f8 	.word	0x200373f8

08005c84 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	4619      	mov	r1, r3
 8005c92:	4805      	ldr	r0, [pc, #20]	; (8005ca8 <cppExit+0x24>)
 8005c94:	f7fd fd18 	bl	80036c8 <_ZN10SideSensor12updateStatusEt>
	printf("intertuptin\n");
 8005c98:	4804      	ldr	r0, [pc, #16]	; (8005cac <cppExit+0x28>)
 8005c9a:	f00d fe93 	bl	80139c4 <puts>
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000590 	.word	0x20000590
 8005cac:	08017dec 	.word	0x08017dec

08005cb0 <cppLoop>:

void cppLoop(void)
{
 8005cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cb4:	b08b      	sub	sp, #44	; 0x2c
 8005cb6:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005cb8:	48bf      	ldr	r0, [pc, #764]	; (8005fb8 <cppLoop+0x308>)
 8005cba:	f7fd fca3 	bl	8003604 <_ZN12RotarySwitch8getValueEv>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	f201 80c7 	bhi.w	8006e54 <cppLoop+0x11a4>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <cppLoop+0x1c>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	080061e7 	.word	0x080061e7
 8005cd4:	0800626d 	.word	0x0800626d
 8005cd8:	0800635d 	.word	0x0800635d
 8005cdc:	0800640d 	.word	0x0800640d
 8005ce0:	0800649b 	.word	0x0800649b
 8005ce4:	08006561 	.word	0x08006561
 8005ce8:	08006675 	.word	0x08006675
 8005cec:	08006715 	.word	0x08006715
 8005cf0:	08006c4d 	.word	0x08006c4d
 8005cf4:	08006ce9 	.word	0x08006ce9
 8005cf8:	08006d83 	.word	0x08006d83
 8005cfc:	08006dad 	.word	0x08006dad
 8005d00:	08006dd7 	.word	0x08006dd7
 8005d04:	08006e01 	.word	0x08006e01
 8005d08:	08006e2b 	.word	0x08006e2b
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8005d0c:	2152      	movs	r1, #82	; 0x52
 8005d0e:	48ab      	ldr	r0, [pc, #684]	; (8005fbc <cppLoop+0x30c>)
 8005d10:	f7fc f8b0 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005d14:	f7fb f9c4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d18:	2100      	movs	r1, #0
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f7fb f9d0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8005d20:	48a7      	ldr	r0, [pc, #668]	; (8005fc0 <cppLoop+0x310>)
 8005d22:	f7fc feae 	bl	8002a82 <_ZN9LineTrace5getKpEv>
 8005d26:	eeb0 7a40 	vmov.f32	s14, s0
 8005d2a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8005fc4 <cppLoop+0x314>
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	ee17 0a90 	vmov	r0, s15
 8005d36:	f7fa fc1f 	bl	8000578 <__aeabi_f2d>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4623      	mov	r3, r4
 8005d42:	48a1      	ldr	r0, [pc, #644]	; (8005fc8 <cppLoop+0x318>)
 8005d44:	f7fb f9e6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d48:	2101      	movs	r1, #1
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fb f9b8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8005d50:	489b      	ldr	r0, [pc, #620]	; (8005fc0 <cppLoop+0x310>)
 8005d52:	f7fc fea5 	bl	8002aa0 <_ZN9LineTrace5getKiEv>
 8005d56:	eeb0 7a40 	vmov.f32	s14, s0
 8005d5a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8005fcc <cppLoop+0x31c>
 8005d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d62:	ee17 0a90 	vmov	r0, s15
 8005d66:	f7fa fc07 	bl	8000578 <__aeabi_f2d>
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	460e      	mov	r6, r1
 8005d6e:	4894      	ldr	r0, [pc, #592]	; (8005fc0 <cppLoop+0x310>)
 8005d70:	f7fc fea5 	bl	8002abe <_ZN9LineTrace5getKdEv>
 8005d74:	eeb0 7a40 	vmov.f32	s14, s0
 8005d78:	eddf 7a95 	vldr	s15, [pc, #596]	; 8005fd0 <cppLoop+0x320>
 8005d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d80:	ee17 0a90 	vmov	r0, s15
 8005d84:	f7fa fbf8 	bl	8000578 <__aeabi_f2d>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	e9cd 3400 	strd	r3, r4, [sp]
 8005d90:	462a      	mov	r2, r5
 8005d92:	4633      	mov	r3, r6
 8005d94:	488f      	ldr	r0, [pc, #572]	; (8005fd4 <cppLoop+0x324>)
 8005d96:	f7fb f9bd 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8005d9a:	4b8f      	ldr	r3, [pc, #572]	; (8005fd8 <cppLoop+0x328>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f3bf 8f5b 	dmb	ish
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d015      	beq.n	8005de2 <cppLoop+0x132>
 8005db6:	4888      	ldr	r0, [pc, #544]	; (8005fd8 <cppLoop+0x328>)
 8005db8:	f00b fe9b 	bl	8011af2 <__cxa_guard_acquire>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <cppLoop+0x132>
 8005dcc:	487c      	ldr	r0, [pc, #496]	; (8005fc0 <cppLoop+0x310>)
 8005dce:	f7fc fe58 	bl	8002a82 <_ZN9LineTrace5getKpEv>
 8005dd2:	eef0 7a40 	vmov.f32	s15, s0
 8005dd6:	4b81      	ldr	r3, [pc, #516]	; (8005fdc <cppLoop+0x32c>)
 8005dd8:	edc3 7a00 	vstr	s15, [r3]
 8005ddc:	487e      	ldr	r0, [pc, #504]	; (8005fd8 <cppLoop+0x328>)
 8005dde:	f00b fe94 	bl	8011b0a <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8005de2:	4b7f      	ldr	r3, [pc, #508]	; (8005fe0 <cppLoop+0x330>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f3bf 8f5b 	dmb	ish
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <cppLoop+0x17a>
 8005dfe:	4878      	ldr	r0, [pc, #480]	; (8005fe0 <cppLoop+0x330>)
 8005e00:	f00b fe77 	bl	8011af2 <__cxa_guard_acquire>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bf14      	ite	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	2300      	moveq	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <cppLoop+0x17a>
 8005e14:	486a      	ldr	r0, [pc, #424]	; (8005fc0 <cppLoop+0x310>)
 8005e16:	f7fc fe43 	bl	8002aa0 <_ZN9LineTrace5getKiEv>
 8005e1a:	eef0 7a40 	vmov.f32	s15, s0
 8005e1e:	4b71      	ldr	r3, [pc, #452]	; (8005fe4 <cppLoop+0x334>)
 8005e20:	edc3 7a00 	vstr	s15, [r3]
 8005e24:	486e      	ldr	r0, [pc, #440]	; (8005fe0 <cppLoop+0x330>)
 8005e26:	f00b fe70 	bl	8011b0a <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8005e2a:	4b6f      	ldr	r3, [pc, #444]	; (8005fe8 <cppLoop+0x338>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f3bf 8f5b 	dmb	ish
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d015      	beq.n	8005e72 <cppLoop+0x1c2>
 8005e46:	4868      	ldr	r0, [pc, #416]	; (8005fe8 <cppLoop+0x338>)
 8005e48:	f00b fe53 	bl	8011af2 <__cxa_guard_acquire>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bf14      	ite	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	2300      	moveq	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <cppLoop+0x1c2>
 8005e5c:	4858      	ldr	r0, [pc, #352]	; (8005fc0 <cppLoop+0x310>)
 8005e5e:	f7fc fe2e 	bl	8002abe <_ZN9LineTrace5getKdEv>
 8005e62:	eef0 7a40 	vmov.f32	s15, s0
 8005e66:	4b61      	ldr	r3, [pc, #388]	; (8005fec <cppLoop+0x33c>)
 8005e68:	edc3 7a00 	vstr	s15, [r3]
 8005e6c:	485e      	ldr	r0, [pc, #376]	; (8005fe8 <cppLoop+0x338>)
 8005e6e:	f00b fe4c 	bl	8011b0a <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005e72:	485f      	ldr	r0, [pc, #380]	; (8005ff0 <cppLoop+0x340>)
 8005e74:	f7fb ff9a 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d022      	beq.n	8005ece <cppLoop+0x21e>
			led.LR(-1, 1);
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e8e:	484b      	ldr	r0, [pc, #300]	; (8005fbc <cppLoop+0x30c>)
 8005e90:	f7fc f8ac 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005e98:	f001 f92e 	bl	80070f8 <HAL_Delay>

			selector++;
 8005e9c:	4b55      	ldr	r3, [pc, #340]	; (8005ff4 <cppLoop+0x344>)
 8005e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	4b52      	ldr	r3, [pc, #328]	; (8005ff4 <cppLoop+0x344>)
 8005eac:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005eae:	4b51      	ldr	r3, [pc, #324]	; (8005ff4 <cppLoop+0x344>)
 8005eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	dd02      	ble.n	8005ebe <cppLoop+0x20e>
 8005eb8:	4b4e      	ldr	r3, [pc, #312]	; (8005ff4 <cppLoop+0x344>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec4:	483d      	ldr	r0, [pc, #244]	; (8005fbc <cppLoop+0x30c>)
 8005ec6:	f7fc f891 	bl	8001fec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8005eca:	f000 bfc5 	b.w	8006e58 <cppLoop+0x11a8>
		else if(joy_stick.getValue() == JOY_R){
 8005ece:	4848      	ldr	r0, [pc, #288]	; (8005ff0 <cppLoop+0x340>)
 8005ed0:	f7fb ff6c 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8089 	beq.w	8005ff8 <cppLoop+0x348>
			led.LR(-1, 1);
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8005eec:	4833      	ldr	r0, [pc, #204]	; (8005fbc <cppLoop+0x30c>)
 8005eee:	f7fc f87d 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8005ef2:	2064      	movs	r0, #100	; 0x64
 8005ef4:	f001 f900 	bl	80070f8 <HAL_Delay>
			if(selector == 0){
 8005ef8:	4b3e      	ldr	r3, [pc, #248]	; (8005ff4 <cppLoop+0x344>)
 8005efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d113      	bne.n	8005f2a <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 8005f02:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <cppLoop+0x32c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fb36 	bl	8000578 <__aeabi_f2d>
 8005f0c:	a324      	add	r3, pc, #144	; (adr r3, 8005fa0 <cppLoop+0x2f0>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f9d3 	bl	80002bc <__adddf3>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f7fa fe7b 	bl	8000c18 <__aeabi_d2f>
 8005f22:	4602      	mov	r2, r0
 8005f24:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <cppLoop+0x32c>)
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e02b      	b.n	8005f82 <cppLoop+0x2d2>
			else if(selector == 1){
 8005f2a:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <cppLoop+0x344>)
 8005f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d113      	bne.n	8005f5c <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 8005f34:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <cppLoop+0x334>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fa fb1d 	bl	8000578 <__aeabi_f2d>
 8005f3e:	a31a      	add	r3, pc, #104	; (adr r3, 8005fa8 <cppLoop+0x2f8>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa f9ba 	bl	80002bc <__adddf3>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	4621      	mov	r1, r4
 8005f50:	f7fa fe62 	bl	8000c18 <__aeabi_d2f>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <cppLoop+0x334>)
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e012      	b.n	8005f82 <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 8005f5c:	4b23      	ldr	r3, [pc, #140]	; (8005fec <cppLoop+0x33c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fa fb09 	bl	8000578 <__aeabi_f2d>
 8005f66:	a312      	add	r3, pc, #72	; (adr r3, 8005fb0 <cppLoop+0x300>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f9a6 	bl	80002bc <__adddf3>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4618      	mov	r0, r3
 8005f76:	4621      	mov	r1, r4
 8005f78:	f7fa fe4e 	bl	8000c18 <__aeabi_d2f>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <cppLoop+0x33c>)
 8005f80:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8005f82:	2152      	movs	r1, #82	; 0x52
 8005f84:	480d      	ldr	r0, [pc, #52]	; (8005fbc <cppLoop+0x30c>)
 8005f86:	f7fb ff75 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f90:	480a      	ldr	r0, [pc, #40]	; (8005fbc <cppLoop+0x30c>)
 8005f92:	f7fc f82b 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8005f96:	f000 bf5f 	b.w	8006e58 <cppLoop+0x11a8>
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	88e368f1 	.word	0x88e368f1
 8005fa4:	3ee4f8b5 	.word	0x3ee4f8b5
 8005fa8:	eb1c432d 	.word	0xeb1c432d
 8005fac:	3f1a36e2 	.word	0x3f1a36e2
 8005fb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8005fb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8005fb8:	2000059c 	.word	0x2000059c
 8005fbc:	200005a4 	.word	0x200005a4
 8005fc0:	2001fa24 	.word	0x2001fa24
 8005fc4:	447a0000 	.word	0x447a0000
 8005fc8:	08017df8 	.word	0x08017df8
 8005fcc:	42c80000 	.word	0x42c80000
 8005fd0:	461c4000 	.word	0x461c4000
 8005fd4:	08017e04 	.word	0x08017e04
 8005fd8:	20037404 	.word	0x20037404
 8005fdc:	20037400 	.word	0x20037400
 8005fe0:	2003740c 	.word	0x2003740c
 8005fe4:	20037408 	.word	0x20037408
 8005fe8:	20037414 	.word	0x20037414
 8005fec:	20037410 	.word	0x20037410
 8005ff0:	20000598 	.word	0x20000598
 8005ff4:	200373fe 	.word	0x200373fe
		else if(joy_stick.getValue() == JOY_L){
 8005ff8:	48c5      	ldr	r0, [pc, #788]	; (8006310 <cppLoop+0x660>)
 8005ffa:	f7fb fed7 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d059      	beq.n	80060c2 <cppLoop+0x412>
			led.LR(-1, 1);
 800600e:	2201      	movs	r2, #1
 8006010:	f04f 31ff 	mov.w	r1, #4294967295
 8006014:	48bf      	ldr	r0, [pc, #764]	; (8006314 <cppLoop+0x664>)
 8006016:	f7fb ffe9 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800601a:	2064      	movs	r0, #100	; 0x64
 800601c:	f001 f86c 	bl	80070f8 <HAL_Delay>
			if(selector == 0){
 8006020:	4bbd      	ldr	r3, [pc, #756]	; (8006318 <cppLoop+0x668>)
 8006022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d113      	bne.n	8006052 <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 800602a:	4bbc      	ldr	r3, [pc, #752]	; (800631c <cppLoop+0x66c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fa faa2 	bl	8000578 <__aeabi_f2d>
 8006034:	a3b0      	add	r3, pc, #704	; (adr r3, 80062f8 <cppLoop+0x648>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa f93d 	bl	80002b8 <__aeabi_dsub>
 800603e:	4603      	mov	r3, r0
 8006040:	460c      	mov	r4, r1
 8006042:	4618      	mov	r0, r3
 8006044:	4621      	mov	r1, r4
 8006046:	f7fa fde7 	bl	8000c18 <__aeabi_d2f>
 800604a:	4602      	mov	r2, r0
 800604c:	4bb3      	ldr	r3, [pc, #716]	; (800631c <cppLoop+0x66c>)
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e02b      	b.n	80060aa <cppLoop+0x3fa>
			else if(selector == 1){
 8006052:	4bb1      	ldr	r3, [pc, #708]	; (8006318 <cppLoop+0x668>)
 8006054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d113      	bne.n	8006084 <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 800605c:	4bb0      	ldr	r3, [pc, #704]	; (8006320 <cppLoop+0x670>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fa fa89 	bl	8000578 <__aeabi_f2d>
 8006066:	a3a6      	add	r3, pc, #664	; (adr r3, 8006300 <cppLoop+0x650>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa f924 	bl	80002b8 <__aeabi_dsub>
 8006070:	4603      	mov	r3, r0
 8006072:	460c      	mov	r4, r1
 8006074:	4618      	mov	r0, r3
 8006076:	4621      	mov	r1, r4
 8006078:	f7fa fdce 	bl	8000c18 <__aeabi_d2f>
 800607c:	4602      	mov	r2, r0
 800607e:	4ba8      	ldr	r3, [pc, #672]	; (8006320 <cppLoop+0x670>)
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e012      	b.n	80060aa <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 8006084:	4ba7      	ldr	r3, [pc, #668]	; (8006324 <cppLoop+0x674>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f7fa fa75 	bl	8000578 <__aeabi_f2d>
 800608e:	a39e      	add	r3, pc, #632	; (adr r3, 8006308 <cppLoop+0x658>)
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f7fa f910 	bl	80002b8 <__aeabi_dsub>
 8006098:	4603      	mov	r3, r0
 800609a:	460c      	mov	r4, r1
 800609c:	4618      	mov	r0, r3
 800609e:	4621      	mov	r1, r4
 80060a0:	f7fa fdba 	bl	8000c18 <__aeabi_d2f>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b9f      	ldr	r3, [pc, #636]	; (8006324 <cppLoop+0x674>)
 80060a8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80060aa:	2152      	movs	r1, #82	; 0x52
 80060ac:	4899      	ldr	r0, [pc, #612]	; (8006314 <cppLoop+0x664>)
 80060ae:	f7fb fee1 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80060b2:	2200      	movs	r2, #0
 80060b4:	f04f 31ff 	mov.w	r1, #4294967295
 80060b8:	4896      	ldr	r0, [pc, #600]	; (8006314 <cppLoop+0x664>)
 80060ba:	f7fb ff97 	bl	8001fec <_ZN3LED2LREaa>
		break;
 80060be:	f000 becb 	b.w	8006e58 <cppLoop+0x11a8>
		else if(joy_stick.getValue() == JOY_D){
 80060c2:	4893      	ldr	r0, [pc, #588]	; (8006310 <cppLoop+0x660>)
 80060c4:	f7fb fe72 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d03e      	beq.n	8006156 <cppLoop+0x4a6>
			led.LR(-1, 1);
 80060d8:	2201      	movs	r2, #1
 80060da:	f04f 31ff 	mov.w	r1, #4294967295
 80060de:	488d      	ldr	r0, [pc, #564]	; (8006314 <cppLoop+0x664>)
 80060e0:	f7fb ff84 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80060e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80060e8:	f001 f806 	bl	80070f8 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80060ec:	f107 031c 	add.w	r3, r7, #28
 80060f0:	2201      	movs	r2, #1
 80060f2:	498d      	ldr	r1, [pc, #564]	; (8006328 <cppLoop+0x678>)
 80060f4:	488d      	ldr	r0, [pc, #564]	; (800632c <cppLoop+0x67c>)
 80060f6:	f7fb faa1 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80060fa:	f107 0318 	add.w	r3, r7, #24
 80060fe:	2201      	movs	r2, #1
 8006100:	498b      	ldr	r1, [pc, #556]	; (8006330 <cppLoop+0x680>)
 8006102:	488a      	ldr	r0, [pc, #552]	; (800632c <cppLoop+0x67c>)
 8006104:	f7fb fa9a 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	2201      	movs	r2, #1
 800610e:	4989      	ldr	r1, [pc, #548]	; (8006334 <cppLoop+0x684>)
 8006110:	4886      	ldr	r0, [pc, #536]	; (800632c <cppLoop+0x67c>)
 8006112:	f7fb fa93 	bl	800163c <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8006116:	edd7 7a07 	vldr	s15, [r7, #28]
 800611a:	ed97 7a06 	vldr	s14, [r7, #24]
 800611e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006122:	eeb0 1a66 	vmov.f32	s2, s13
 8006126:	eef0 0a47 	vmov.f32	s1, s14
 800612a:	eeb0 0a67 	vmov.f32	s0, s15
 800612e:	4882      	ldr	r0, [pc, #520]	; (8006338 <cppLoop+0x688>)
 8006130:	f7fc fc8e 	bl	8002a50 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4a79      	ldr	r2, [pc, #484]	; (800631c <cppLoop+0x66c>)
 8006138:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4a78      	ldr	r2, [pc, #480]	; (8006320 <cppLoop+0x670>)
 800613e:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4a78      	ldr	r2, [pc, #480]	; (8006324 <cppLoop+0x674>)
 8006144:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006146:	2200      	movs	r2, #0
 8006148:	f04f 31ff 	mov.w	r1, #4294967295
 800614c:	4871      	ldr	r0, [pc, #452]	; (8006314 <cppLoop+0x664>)
 800614e:	f7fb ff4d 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006152:	f000 be81 	b.w	8006e58 <cppLoop+0x11a8>
		else if(joy_stick.getValue() == JOY_C){
 8006156:	486e      	ldr	r0, [pc, #440]	; (8006310 <cppLoop+0x660>)
 8006158:	f7fb fe28 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800615c:	4603      	mov	r3, r0
 800615e:	2b02      	cmp	r3, #2
 8006160:	bf0c      	ite	eq
 8006162:	2301      	moveq	r3, #1
 8006164:	2300      	movne	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8675 	beq.w	8006e58 <cppLoop+0x11a8>
			led.LR(-1, 1);
 800616e:	2201      	movs	r2, #1
 8006170:	f04f 31ff 	mov.w	r1, #4294967295
 8006174:	4867      	ldr	r0, [pc, #412]	; (8006314 <cppLoop+0x664>)
 8006176:	f7fb ff39 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800617a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800617e:	f000 ffbb 	bl	80070f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006182:	2300      	movs	r3, #0
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	4b65      	ldr	r3, [pc, #404]	; (800631c <cppLoop+0x66c>)
 8006188:	2201      	movs	r2, #1
 800618a:	4967      	ldr	r1, [pc, #412]	; (8006328 <cppLoop+0x678>)
 800618c:	4867      	ldr	r0, [pc, #412]	; (800632c <cppLoop+0x67c>)
 800618e:	f7fb f9ef 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006192:	2300      	movs	r3, #0
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4b62      	ldr	r3, [pc, #392]	; (8006320 <cppLoop+0x670>)
 8006198:	2201      	movs	r2, #1
 800619a:	4965      	ldr	r1, [pc, #404]	; (8006330 <cppLoop+0x680>)
 800619c:	4863      	ldr	r0, [pc, #396]	; (800632c <cppLoop+0x67c>)
 800619e:	f7fb f9e7 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80061a2:	2300      	movs	r3, #0
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	4b5f      	ldr	r3, [pc, #380]	; (8006324 <cppLoop+0x674>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	4962      	ldr	r1, [pc, #392]	; (8006334 <cppLoop+0x684>)
 80061ac:	485f      	ldr	r0, [pc, #380]	; (800632c <cppLoop+0x67c>)
 80061ae:	f7fb f9df 	bl	8001570 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80061b2:	4b5a      	ldr	r3, [pc, #360]	; (800631c <cppLoop+0x66c>)
 80061b4:	edd3 7a00 	vldr	s15, [r3]
 80061b8:	4b59      	ldr	r3, [pc, #356]	; (8006320 <cppLoop+0x670>)
 80061ba:	ed93 7a00 	vldr	s14, [r3]
 80061be:	4b59      	ldr	r3, [pc, #356]	; (8006324 <cppLoop+0x674>)
 80061c0:	edd3 6a00 	vldr	s13, [r3]
 80061c4:	eeb0 1a66 	vmov.f32	s2, s13
 80061c8:	eef0 0a47 	vmov.f32	s1, s14
 80061cc:	eeb0 0a67 	vmov.f32	s0, s15
 80061d0:	4859      	ldr	r0, [pc, #356]	; (8006338 <cppLoop+0x688>)
 80061d2:	f7fc fc3d 	bl	8002a50 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80061d6:	2200      	movs	r2, #0
 80061d8:	f04f 31ff 	mov.w	r1, #4294967295
 80061dc:	484d      	ldr	r0, [pc, #308]	; (8006314 <cppLoop+0x664>)
 80061de:	f7fb ff05 	bl	8001fec <_ZN3LED2LREaa>
		break;
 80061e2:	f000 be39 	b.w	8006e58 <cppLoop+0x11a8>

	case 1:
		led.fullColor('G');
 80061e6:	2147      	movs	r1, #71	; 0x47
 80061e8:	484a      	ldr	r0, [pc, #296]	; (8006314 <cppLoop+0x664>)
 80061ea:	f7fb fe43 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 80061ee:	f7fa ff57 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80061f2:	2100      	movs	r1, #0
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7fa ff63 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 80061fa:	4850      	ldr	r0, [pc, #320]	; (800633c <cppLoop+0x68c>)
 80061fc:	f7fa ff8a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006200:	2101      	movs	r1, #1
 8006202:	2000      	movs	r0, #0
 8006204:	f7fa ff5c 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006208:	484d      	ldr	r0, [pc, #308]	; (8006340 <cppLoop+0x690>)
 800620a:	f7fa ff83 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800620e:	4840      	ldr	r0, [pc, #256]	; (8006310 <cppLoop+0x660>)
 8006210:	f7fb fdcc 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006214:	4603      	mov	r3, r0
 8006216:	2b02      	cmp	r3, #2
 8006218:	bf0c      	ite	eq
 800621a:	2301      	moveq	r3, #1
 800621c:	2300      	movne	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 861b 	beq.w	8006e5c <cppLoop+0x11ac>
			HAL_Delay(500);
 8006226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800622a:	f000 ff65 	bl	80070f8 <HAL_Delay>

			line_trace.start();
 800622e:	4842      	ldr	r0, [pc, #264]	; (8006338 <cppLoop+0x688>)
 8006230:	f7fc fcaa 	bl	8002b88 <_ZN9LineTrace5startEv>
			velocity_ctrl.start();
 8006234:	4843      	ldr	r0, [pc, #268]	; (8006344 <cppLoop+0x694>)
 8006236:	f7fd fd7c 	bl	8003d32 <_ZN12VelocityCtrl5startEv>
			line_trace.setTargetVelocity(1.4);
 800623a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8006348 <cppLoop+0x698>
 800623e:	483e      	ldr	r0, [pc, #248]	; (8006338 <cppLoop+0x688>)
 8006240:	f7fc fc5b 	bl	8002afa <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006244:	f04f 32ff 	mov.w	r2, #4294967295
 8006248:	2101      	movs	r1, #1
 800624a:	4832      	ldr	r0, [pc, #200]	; (8006314 <cppLoop+0x664>)
 800624c:	f7fb fece 	bl	8001fec <_ZN3LED2LREaa>

			line_trace.waitGoal();
 8006250:	4839      	ldr	r0, [pc, #228]	; (8006338 <cppLoop+0x688>)
 8006252:	f7fc fcc9 	bl	8002be8 <_ZN9LineTrace8waitGoalEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			velocity_ctrl.stop();
 8006256:	483b      	ldr	r0, [pc, #236]	; (8006344 <cppLoop+0x694>)
 8006258:	f7fd fd7e 	bl	8003d58 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	2100      	movs	r1, #0
 8006262:	482c      	ldr	r0, [pc, #176]	; (8006314 <cppLoop+0x664>)
 8006264:	f7fb fec2 	bl	8001fec <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006268:	f000 bdf8 	b.w	8006e5c <cppLoop+0x11ac>

	case 2:
		led.fullColor('B');
 800626c:	2142      	movs	r1, #66	; 0x42
 800626e:	4829      	ldr	r0, [pc, #164]	; (8006314 <cppLoop+0x664>)
 8006270:	f7fb fe00 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006274:	f7fa ff14 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006278:	2100      	movs	r1, #0
 800627a:	2000      	movs	r0, #0
 800627c:	f7fa ff20 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8006280:	4832      	ldr	r0, [pc, #200]	; (800634c <cppLoop+0x69c>)
 8006282:	f7fa ff47 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006286:	2101      	movs	r1, #1
 8006288:	2000      	movs	r0, #0
 800628a:	f7fa ff19 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800628e:	4830      	ldr	r0, [pc, #192]	; (8006350 <cppLoop+0x6a0>)
 8006290:	f7fa ff40 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006294:	481e      	ldr	r0, [pc, #120]	; (8006310 <cppLoop+0x660>)
 8006296:	f7fb fd89 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800629a:	4603      	mov	r3, r0
 800629c:	2b02      	cmp	r3, #2
 800629e:	bf0c      	ite	eq
 80062a0:	2301      	moveq	r3, #1
 80062a2:	2300      	movne	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 85da 	beq.w	8006e60 <cppLoop+0x11b0>
			led.LR(-1, 1);
 80062ac:	2201      	movs	r2, #1
 80062ae:	f04f 31ff 	mov.w	r1, #4294967295
 80062b2:	4818      	ldr	r0, [pc, #96]	; (8006314 <cppLoop+0x664>)
 80062b4:	f7fb fe9a 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80062b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80062bc:	f000 ff1c 	bl	80070f8 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80062c0:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8006354 <cppLoop+0x6a4>
 80062c4:	4824      	ldr	r0, [pc, #144]	; (8006358 <cppLoop+0x6a8>)
 80062c6:	f7fd fb53 	bl	8003970 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80062ca:	4823      	ldr	r0, [pc, #140]	; (8006358 <cppLoop+0x6a8>)
 80062cc:	f7fd fb60 	bl	8003990 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80062d0:	f244 405c 	movw	r0, #17500	; 0x445c
 80062d4:	f000 ff10 	bl	80070f8 <HAL_Delay>
			sys_ident.stop();
 80062d8:	481f      	ldr	r0, [pc, #124]	; (8006358 <cppLoop+0x6a8>)
 80062da:	f7fd fb6d 	bl	80039b8 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80062de:	481e      	ldr	r0, [pc, #120]	; (8006358 <cppLoop+0x6a8>)
 80062e0:	f7fd fad4 	bl	800388c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80062e4:	2200      	movs	r2, #0
 80062e6:	f04f 31ff 	mov.w	r1, #4294967295
 80062ea:	480a      	ldr	r0, [pc, #40]	; (8006314 <cppLoop+0x664>)
 80062ec:	f7fb fe7e 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 80062f0:	f000 bdb6 	b.w	8006e60 <cppLoop+0x11b0>
 80062f4:	f3af 8000 	nop.w
 80062f8:	88e368f1 	.word	0x88e368f1
 80062fc:	3ee4f8b5 	.word	0x3ee4f8b5
 8006300:	eb1c432d 	.word	0xeb1c432d
 8006304:	3f1a36e2 	.word	0x3f1a36e2
 8006308:	a0b5ed8d 	.word	0xa0b5ed8d
 800630c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006310:	20000598 	.word	0x20000598
 8006314:	200005a4 	.word	0x200005a4
 8006318:	200373fe 	.word	0x200373fe
 800631c:	20037400 	.word	0x20037400
 8006320:	20037408 	.word	0x20037408
 8006324:	20037410 	.word	0x20037410
 8006328:	08017e14 	.word	0x08017e14
 800632c:	08017e1c 	.word	0x08017e1c
 8006330:	08017e24 	.word	0x08017e24
 8006334:	08017e2c 	.word	0x08017e2c
 8006338:	2001fa24 	.word	0x2001fa24
 800633c:	08017e34 	.word	0x08017e34
 8006340:	08017e40 	.word	0x08017e40
 8006344:	2001f9e8 	.word	0x2001f9e8
 8006348:	3fb33333 	.word	0x3fb33333
 800634c:	08017e48 	.word	0x08017e48
 8006350:	08017e50 	.word	0x08017e50
 8006354:	3e99999a 	.word	0x3e99999a
 8006358:	2001fac0 	.word	0x2001fac0

	case 3:
		led.fullColor('M');
 800635c:	214d      	movs	r1, #77	; 0x4d
 800635e:	48af      	ldr	r0, [pc, #700]	; (800661c <cppLoop+0x96c>)
 8006360:	f7fb fd88 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006364:	f7fa fe9c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006368:	2100      	movs	r1, #0
 800636a:	2000      	movs	r0, #0
 800636c:	f7fa fea8 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006370:	48ab      	ldr	r0, [pc, #684]	; (8006620 <cppLoop+0x970>)
 8006372:	f7fa fecf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006376:	2101      	movs	r1, #1
 8006378:	2000      	movs	r0, #0
 800637a:	f7fa fea1 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800637e:	48a9      	ldr	r0, [pc, #676]	; (8006624 <cppLoop+0x974>)
 8006380:	f7fa fec8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006384:	48a8      	ldr	r0, [pc, #672]	; (8006628 <cppLoop+0x978>)
 8006386:	f7fb fd11 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800638a:	4603      	mov	r3, r0
 800638c:	2b02      	cmp	r3, #2
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8564 	beq.w	8006e64 <cppLoop+0x11b4>
			led.LR(-1, 1);
 800639c:	2201      	movs	r2, #1
 800639e:	f04f 31ff 	mov.w	r1, #4294967295
 80063a2:	489e      	ldr	r0, [pc, #632]	; (800661c <cppLoop+0x96c>)
 80063a4:	f7fb fe22 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ac:	f000 fea4 	bl	80070f8 <HAL_Delay>

			logger.start();
 80063b0:	489e      	ldr	r0, [pc, #632]	; (800662c <cppLoop+0x97c>)
 80063b2:	f7fc fd6b 	bl	8002e8c <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 80063b6:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006630 <cppLoop+0x980>
 80063ba:	489e      	ldr	r0, [pc, #632]	; (8006634 <cppLoop+0x984>)
 80063bc:	f7fc fb8e 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80063c0:	489c      	ldr	r0, [pc, #624]	; (8006634 <cppLoop+0x984>)
 80063c2:	f7fc fbe1 	bl	8002b88 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 80063c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80063ca:	f000 fe95 	bl	80070f8 <HAL_Delay>

			logger.stop();
 80063ce:	4897      	ldr	r0, [pc, #604]	; (800662c <cppLoop+0x97c>)
 80063d0:	f7fc fd6b 	bl	8002eaa <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 80063d4:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006630 <cppLoop+0x980>
 80063d8:	4896      	ldr	r0, [pc, #600]	; (8006634 <cppLoop+0x984>)
 80063da:	f7fc fb7f 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80063de:	4895      	ldr	r0, [pc, #596]	; (8006634 <cppLoop+0x984>)
 80063e0:	f7fc fbe6 	bl	8002bb0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	2101      	movs	r1, #1
 80063ea:	488c      	ldr	r0, [pc, #560]	; (800661c <cppLoop+0x96c>)
 80063ec:	f7fb fdfe 	bl	8001fec <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	2100      	movs	r1, #0
 80063f6:	4889      	ldr	r0, [pc, #548]	; (800661c <cppLoop+0x96c>)
 80063f8:	f7fb fdf8 	bl	8001fec <_ZN3LED2LREaa>

			led.LR(-1, 0);
 80063fc:	2200      	movs	r2, #0
 80063fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006402:	4886      	ldr	r0, [pc, #536]	; (800661c <cppLoop+0x96c>)
 8006404:	f7fb fdf2 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 8006408:	f000 bd2c 	b.w	8006e64 <cppLoop+0x11b4>

	case 4:
		led.fullColor('Y');
 800640c:	2159      	movs	r1, #89	; 0x59
 800640e:	4883      	ldr	r0, [pc, #524]	; (800661c <cppLoop+0x96c>)
 8006410:	f7fb fd30 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006414:	f7fa fe44 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006418:	2100      	movs	r1, #0
 800641a:	2000      	movs	r0, #0
 800641c:	f7fa fe50 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006420:	4885      	ldr	r0, [pc, #532]	; (8006638 <cppLoop+0x988>)
 8006422:	f7fa fe77 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006426:	2101      	movs	r1, #1
 8006428:	2000      	movs	r0, #0
 800642a:	f7fa fe49 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800642e:	487d      	ldr	r0, [pc, #500]	; (8006624 <cppLoop+0x974>)
 8006430:	f7fa fe70 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006434:	487c      	ldr	r0, [pc, #496]	; (8006628 <cppLoop+0x978>)
 8006436:	f7fb fcb9 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800643a:	4603      	mov	r3, r0
 800643c:	2b02      	cmp	r3, #2
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 850e 	beq.w	8006e68 <cppLoop+0x11b8>
			led.LR(-1, 1);
 800644c:	2201      	movs	r2, #1
 800644e:	f04f 31ff 	mov.w	r1, #4294967295
 8006452:	4872      	ldr	r0, [pc, #456]	; (800661c <cppLoop+0x96c>)
 8006454:	f7fb fdca 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800645c:	f000 fe4c 	bl	80070f8 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006460:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006630 <cppLoop+0x980>
 8006464:	4873      	ldr	r0, [pc, #460]	; (8006634 <cppLoop+0x984>)
 8006466:	f7fc fb48 	bl	8002afa <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 800646a:	4874      	ldr	r0, [pc, #464]	; (800663c <cppLoop+0x98c>)
 800646c:	f7fd fc61 	bl	8003d32 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006470:	4870      	ldr	r0, [pc, #448]	; (8006634 <cppLoop+0x984>)
 8006472:	f7fc fb89 	bl	8002b88 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006476:	f242 7010 	movw	r0, #10000	; 0x2710
 800647a:	f000 fe3d 	bl	80070f8 <HAL_Delay>

			line_trace.stop();
 800647e:	486d      	ldr	r0, [pc, #436]	; (8006634 <cppLoop+0x984>)
 8006480:	f7fc fb96 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006484:	486d      	ldr	r0, [pc, #436]	; (800663c <cppLoop+0x98c>)
 8006486:	f7fd fc67 	bl	8003d58 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 800648a:	2200      	movs	r2, #0
 800648c:	f04f 31ff 	mov.w	r1, #4294967295
 8006490:	4862      	ldr	r0, [pc, #392]	; (800661c <cppLoop+0x96c>)
 8006492:	f7fb fdab 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 8006496:	f000 bce7 	b.w	8006e68 <cppLoop+0x11b8>

	case 5:
		led.fullColor('C');
 800649a:	2143      	movs	r1, #67	; 0x43
 800649c:	485f      	ldr	r0, [pc, #380]	; (800661c <cppLoop+0x96c>)
 800649e:	f7fb fce9 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 80064a2:	f7fa fdfd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80064a6:	2100      	movs	r1, #0
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7fa fe09 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80064ae:	4864      	ldr	r0, [pc, #400]	; (8006640 <cppLoop+0x990>)
 80064b0:	f7fa fe30 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80064b4:	2101      	movs	r1, #1
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7fa fe02 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80064bc:	4861      	ldr	r0, [pc, #388]	; (8006644 <cppLoop+0x994>)
 80064be:	f7fa fe29 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80064c2:	4859      	ldr	r0, [pc, #356]	; (8006628 <cppLoop+0x978>)
 80064c4:	f7fb fc72 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 84c9 	beq.w	8006e6c <cppLoop+0x11bc>
			led.LR(-1, 1);
 80064da:	2201      	movs	r2, #1
 80064dc:	f04f 31ff 	mov.w	r1, #4294967295
 80064e0:	484e      	ldr	r0, [pc, #312]	; (800661c <cppLoop+0x96c>)
 80064e2:	f7fb fd83 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 80064e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064ea:	f000 fe05 	bl	80070f8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80064ee:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006648 <cppLoop+0x998>
 80064f2:	4850      	ldr	r0, [pc, #320]	; (8006634 <cppLoop+0x984>)
 80064f4:	f7fc faf2 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80064f8:	484e      	ldr	r0, [pc, #312]	; (8006634 <cppLoop+0x984>)
 80064fa:	f7fc fb45 	bl	8002b88 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80064fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006502:	f000 fdf9 	bl	80070f8 <HAL_Delay>

			led.fullColor('R');
 8006506:	2152      	movs	r1, #82	; 0x52
 8006508:	4844      	ldr	r0, [pc, #272]	; (800661c <cppLoop+0x96c>)
 800650a:	f7fb fcb3 	bl	8001e74 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 800650e:	484f      	ldr	r0, [pc, #316]	; (800664c <cppLoop+0x99c>)
 8006510:	f7fa ffa4 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006514:	484d      	ldr	r0, [pc, #308]	; (800664c <cppLoop+0x99c>)
 8006516:	f7fa ff70 	bl	80013fa <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800651a:	f242 7010 	movw	r0, #10000	; 0x2710
 800651e:	f000 fdeb 	bl	80070f8 <HAL_Delay>

			line_trace.stop();
 8006522:	4844      	ldr	r0, [pc, #272]	; (8006634 <cppLoop+0x984>)
 8006524:	f7fc fb44 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006528:	4949      	ldr	r1, [pc, #292]	; (8006650 <cppLoop+0x9a0>)
 800652a:	484a      	ldr	r0, [pc, #296]	; (8006654 <cppLoop+0x9a4>)
 800652c:	f7fa ffac 	bl	8001488 <user_fopen>
			float d = encoder.getDistance();
 8006530:	4846      	ldr	r0, [pc, #280]	; (800664c <cppLoop+0x99c>)
 8006532:	f7fa ff53 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8006536:	eef0 7a40 	vmov.f32	s15, s0
 800653a:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 800653e:	f107 0310 	add.w	r3, r7, #16
 8006542:	2201      	movs	r2, #1
 8006544:	4619      	mov	r1, r3
 8006546:	2001      	movs	r0, #1
 8006548:	f7fa ffc0 	bl	80014cc <sd_write_float>
			user_fclose();
 800654c:	f7fa ffae 	bl	80014ac <user_fclose>

			led.LR(-1, 0);
 8006550:	2200      	movs	r2, #0
 8006552:	f04f 31ff 	mov.w	r1, #4294967295
 8006556:	4831      	ldr	r0, [pc, #196]	; (800661c <cppLoop+0x96c>)
 8006558:	f7fb fd48 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 800655c:	f000 bc86 	b.w	8006e6c <cppLoop+0x11bc>

	case 6:
		led.fullColor('R');
 8006560:	2152      	movs	r1, #82	; 0x52
 8006562:	482e      	ldr	r0, [pc, #184]	; (800661c <cppLoop+0x96c>)
 8006564:	f7fb fc86 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006568:	f7fa fd9a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800656c:	2100      	movs	r1, #0
 800656e:	2000      	movs	r0, #0
 8006570:	f7fa fda6 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006574:	4838      	ldr	r0, [pc, #224]	; (8006658 <cppLoop+0x9a8>)
 8006576:	f7fa fdcd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800657a:	2101      	movs	r1, #1
 800657c:	2000      	movs	r0, #0
 800657e:	f7fa fd9f 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006582:	4836      	ldr	r0, [pc, #216]	; (800665c <cppLoop+0x9ac>)
 8006584:	f7fa fdc6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006588:	4827      	ldr	r0, [pc, #156]	; (8006628 <cppLoop+0x978>)
 800658a:	f7fb fc0f 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800658e:	4603      	mov	r3, r0
 8006590:	2b02      	cmp	r3, #2
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8468 	beq.w	8006e70 <cppLoop+0x11c0>
			HAL_Delay(500);
 80065a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065a4:	f000 fda8 	bl	80070f8 <HAL_Delay>
			led.LR(-1, 1);
 80065a8:	2201      	movs	r2, #1
 80065aa:	f04f 31ff 	mov.w	r1, #4294967295
 80065ae:	481b      	ldr	r0, [pc, #108]	; (800661c <cppLoop+0x96c>)
 80065b0:	f7fb fd1c 	bl	8001fec <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 80065b4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006660 <cppLoop+0x9b0>
 80065b8:	481e      	ldr	r0, [pc, #120]	; (8006634 <cppLoop+0x984>)
 80065ba:	f7fc fa8f 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80065be:	481d      	ldr	r0, [pc, #116]	; (8006634 <cppLoop+0x984>)
 80065c0:	f7fc fae2 	bl	8002b88 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80065c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065c8:	f000 fd96 	bl	80070f8 <HAL_Delay>

			led.fullColor('R');
 80065cc:	2152      	movs	r1, #82	; 0x52
 80065ce:	4813      	ldr	r0, [pc, #76]	; (800661c <cppLoop+0x96c>)
 80065d0:	f7fb fc50 	bl	8001e74 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80065d4:	481d      	ldr	r0, [pc, #116]	; (800664c <cppLoop+0x99c>)
 80065d6:	f7fa ff41 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80065da:	481c      	ldr	r0, [pc, #112]	; (800664c <cppLoop+0x99c>)
 80065dc:	f7fa ff0d 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80065e0:	4820      	ldr	r0, [pc, #128]	; (8006664 <cppLoop+0x9b4>)
 80065e2:	f7fc fe5e 	bl	80032a2 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80065e6:	4811      	ldr	r0, [pc, #68]	; (800662c <cppLoop+0x97c>)
 80065e8:	f7fc fc50 	bl	8002e8c <_ZN6Logger5startEv>

			HAL_Delay(3000);
 80065ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80065f0:	f000 fd82 	bl	80070f8 <HAL_Delay>

			line_trace.stop();
 80065f4:	480f      	ldr	r0, [pc, #60]	; (8006634 <cppLoop+0x984>)
 80065f6:	f7fc fadb 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			logger.stop();
 80065fa:	480c      	ldr	r0, [pc, #48]	; (800662c <cppLoop+0x97c>)
 80065fc:	f7fc fc55 	bl	8002eaa <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006600:	4b19      	ldr	r3, [pc, #100]	; (8006668 <cppLoop+0x9b8>)
 8006602:	4a1a      	ldr	r2, [pc, #104]	; (800666c <cppLoop+0x9bc>)
 8006604:	491a      	ldr	r1, [pc, #104]	; (8006670 <cppLoop+0x9c0>)
 8006606:	4809      	ldr	r0, [pc, #36]	; (800662c <cppLoop+0x97c>)
 8006608:	f7fc fc1d 	bl	8002e46 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 800660c:	2200      	movs	r2, #0
 800660e:	f04f 31ff 	mov.w	r1, #4294967295
 8006612:	4802      	ldr	r0, [pc, #8]	; (800661c <cppLoop+0x96c>)
 8006614:	f7fb fcea 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 8006618:	f000 bc2a 	b.w	8006e70 <cppLoop+0x11c0>
 800661c:	200005a4 	.word	0x200005a4
 8006620:	08017e58 	.word	0x08017e58
 8006624:	08017e60 	.word	0x08017e60
 8006628:	20000598 	.word	0x20000598
 800662c:	200005c8 	.word	0x200005c8
 8006630:	3dcccccd 	.word	0x3dcccccd
 8006634:	2001fa24 	.word	0x2001fa24
 8006638:	08017e68 	.word	0x08017e68
 800663c:	2001f9e8 	.word	0x2001f9e8
 8006640:	08017e74 	.word	0x08017e74
 8006644:	08017e7c 	.word	0x08017e7c
 8006648:	00000000 	.word	0x00000000
 800664c:	2001f9d0 	.word	0x2001f9d0
 8006650:	08017e88 	.word	0x08017e88
 8006654:	08017e90 	.word	0x08017e90
 8006658:	08017e9c 	.word	0x08017e9c
 800665c:	08017e50 	.word	0x08017e50
 8006660:	3d8f5c29 	.word	0x3d8f5c29
 8006664:	2001fa90 	.word	0x2001fa90
 8006668:	08017ea8 	.word	0x08017ea8
 800666c:	08017eb4 	.word	0x08017eb4
 8006670:	08017ec0 	.word	0x08017ec0

	case 7:
		led.fullColor('G');
 8006674:	2147      	movs	r1, #71	; 0x47
 8006676:	48b4      	ldr	r0, [pc, #720]	; (8006948 <cppLoop+0xc98>)
 8006678:	f7fb fbfc 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 800667c:	f7fa fd10 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006680:	2100      	movs	r1, #0
 8006682:	2000      	movs	r0, #0
 8006684:	f7fa fd1c 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006688:	48b0      	ldr	r0, [pc, #704]	; (800694c <cppLoop+0xc9c>)
 800668a:	f7fa fd43 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800668e:	2101      	movs	r1, #1
 8006690:	2000      	movs	r0, #0
 8006692:	f7fa fd15 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006696:	48ae      	ldr	r0, [pc, #696]	; (8006950 <cppLoop+0xca0>)
 8006698:	f7fa fd3c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800669c:	48ad      	ldr	r0, [pc, #692]	; (8006954 <cppLoop+0xca4>)
 800669e:	f7fb fb85 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 83e0 	beq.w	8006e74 <cppLoop+0x11c4>
			led.LR(-1, 1);
 80066b4:	2201      	movs	r2, #1
 80066b6:	f04f 31ff 	mov.w	r1, #4294967295
 80066ba:	48a3      	ldr	r0, [pc, #652]	; (8006948 <cppLoop+0xc98>)
 80066bc:	f7fb fc96 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(500);
 80066c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066c4:	f000 fd18 	bl	80070f8 <HAL_Delay>

			led.fullColor('R');
 80066c8:	2152      	movs	r1, #82	; 0x52
 80066ca:	489f      	ldr	r0, [pc, #636]	; (8006948 <cppLoop+0xc98>)
 80066cc:	f7fb fbd2 	bl	8001e74 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 80066d0:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8006958 <cppLoop+0xca8>
 80066d4:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 800695c <cppLoop+0xcac>
 80066d8:	48a1      	ldr	r0, [pc, #644]	; (8006960 <cppLoop+0xcb0>)
 80066da:	f7fd fabd 	bl	8003c58 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 80066de:	48a0      	ldr	r0, [pc, #640]	; (8006960 <cppLoop+0xcb0>)
 80066e0:	f7fd fb27 	bl	8003d32 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 80066e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066e8:	f000 fd06 	bl	80070f8 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 80066ec:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800695c <cppLoop+0xcac>
 80066f0:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800695c <cppLoop+0xcac>
 80066f4:	489a      	ldr	r0, [pc, #616]	; (8006960 <cppLoop+0xcb0>)
 80066f6:	f7fd faaf 	bl	8003c58 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 80066fa:	2064      	movs	r0, #100	; 0x64
 80066fc:	f000 fcfc 	bl	80070f8 <HAL_Delay>
			velocity_ctrl.stop();
 8006700:	4897      	ldr	r0, [pc, #604]	; (8006960 <cppLoop+0xcb0>)
 8006702:	f7fd fb29 	bl	8003d58 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006706:	2200      	movs	r2, #0
 8006708:	f04f 31ff 	mov.w	r1, #4294967295
 800670c:	488e      	ldr	r0, [pc, #568]	; (8006948 <cppLoop+0xc98>)
 800670e:	f7fb fc6d 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 8006712:	e3af      	b.n	8006e74 <cppLoop+0x11c4>

	case 8:
		led.fullColor('B');
 8006714:	2142      	movs	r1, #66	; 0x42
 8006716:	488c      	ldr	r0, [pc, #560]	; (8006948 <cppLoop+0xc98>)
 8006718:	f7fb fbac 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 800671c:	f7fa fcc0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006720:	2100      	movs	r1, #0
 8006722:	2000      	movs	r0, #0
 8006724:	f7fa fccc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006728:	488e      	ldr	r0, [pc, #568]	; (8006964 <cppLoop+0xcb4>)
 800672a:	f7fc feb1 	bl	8003490 <_ZN13PathFollowing8getKxValEv>
 800672e:	ec51 0b10 	vmov	r0, r1, d0
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	4b8c      	ldr	r3, [pc, #560]	; (8006968 <cppLoop+0xcb8>)
 8006738:	f7f9 ff76 	bl	8000628 <__aeabi_dmul>
 800673c:	4603      	mov	r3, r0
 800673e:	460c      	mov	r4, r1
 8006740:	461a      	mov	r2, r3
 8006742:	4623      	mov	r3, r4
 8006744:	4889      	ldr	r0, [pc, #548]	; (800696c <cppLoop+0xcbc>)
 8006746:	f7fa fce5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800674a:	2101      	movs	r1, #1
 800674c:	2000      	movs	r0, #0
 800674e:	f7fa fcb7 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006752:	4884      	ldr	r0, [pc, #528]	; (8006964 <cppLoop+0xcb4>)
 8006754:	f7fc feb0 	bl	80034b8 <_ZN13PathFollowing8getKyValEv>
 8006758:	ec51 0b10 	vmov	r0, r1, d0
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	4b81      	ldr	r3, [pc, #516]	; (8006968 <cppLoop+0xcb8>)
 8006762:	f7f9 ff61 	bl	8000628 <__aeabi_dmul>
 8006766:	4603      	mov	r3, r0
 8006768:	460c      	mov	r4, r1
 800676a:	461d      	mov	r5, r3
 800676c:	4626      	mov	r6, r4
 800676e:	487d      	ldr	r0, [pc, #500]	; (8006964 <cppLoop+0xcb4>)
 8006770:	f7fc feb6 	bl	80034e0 <_ZN13PathFollowing8getKtValEv>
 8006774:	ec51 0b10 	vmov	r0, r1, d0
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	4b7a      	ldr	r3, [pc, #488]	; (8006968 <cppLoop+0xcb8>)
 800677e:	f7f9 ff53 	bl	8000628 <__aeabi_dmul>
 8006782:	4603      	mov	r3, r0
 8006784:	460c      	mov	r4, r1
 8006786:	e9cd 3400 	strd	r3, r4, [sp]
 800678a:	462a      	mov	r2, r5
 800678c:	4633      	mov	r3, r6
 800678e:	4878      	ldr	r0, [pc, #480]	; (8006970 <cppLoop+0xcc0>)
 8006790:	f7fa fcc0 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006794:	4b77      	ldr	r3, [pc, #476]	; (8006974 <cppLoop+0xcc4>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	f3bf 8f5b 	dmb	ish
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d019      	beq.n	80067e4 <cppLoop+0xb34>
 80067b0:	4870      	ldr	r0, [pc, #448]	; (8006974 <cppLoop+0xcc4>)
 80067b2:	f00b f99e 	bl	8011af2 <__cxa_guard_acquire>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf14      	ite	ne
 80067bc:	2301      	movne	r3, #1
 80067be:	2300      	moveq	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <cppLoop+0xb34>
 80067c6:	4867      	ldr	r0, [pc, #412]	; (8006964 <cppLoop+0xcb4>)
 80067c8:	f7fc fe62 	bl	8003490 <_ZN13PathFollowing8getKxValEv>
 80067cc:	ec54 3b10 	vmov	r3, r4, d0
 80067d0:	4618      	mov	r0, r3
 80067d2:	4621      	mov	r1, r4
 80067d4:	f7fa fa20 	bl	8000c18 <__aeabi_d2f>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b67      	ldr	r3, [pc, #412]	; (8006978 <cppLoop+0xcc8>)
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	4865      	ldr	r0, [pc, #404]	; (8006974 <cppLoop+0xcc4>)
 80067e0:	f00b f993 	bl	8011b0a <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 80067e4:	4b65      	ldr	r3, [pc, #404]	; (800697c <cppLoop+0xccc>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f3bf 8f5b 	dmb	ish
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d019      	beq.n	8006834 <cppLoop+0xb84>
 8006800:	485e      	ldr	r0, [pc, #376]	; (800697c <cppLoop+0xccc>)
 8006802:	f00b f976 	bl	8011af2 <__cxa_guard_acquire>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <cppLoop+0xb84>
 8006816:	4853      	ldr	r0, [pc, #332]	; (8006964 <cppLoop+0xcb4>)
 8006818:	f7fc fe4e 	bl	80034b8 <_ZN13PathFollowing8getKyValEv>
 800681c:	ec54 3b10 	vmov	r3, r4, d0
 8006820:	4618      	mov	r0, r3
 8006822:	4621      	mov	r1, r4
 8006824:	f7fa f9f8 	bl	8000c18 <__aeabi_d2f>
 8006828:	4602      	mov	r2, r0
 800682a:	4b55      	ldr	r3, [pc, #340]	; (8006980 <cppLoop+0xcd0>)
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	4853      	ldr	r0, [pc, #332]	; (800697c <cppLoop+0xccc>)
 8006830:	f00b f96b 	bl	8011b0a <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006834:	4b53      	ldr	r3, [pc, #332]	; (8006984 <cppLoop+0xcd4>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	f3bf 8f5b 	dmb	ish
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d019      	beq.n	8006884 <cppLoop+0xbd4>
 8006850:	484c      	ldr	r0, [pc, #304]	; (8006984 <cppLoop+0xcd4>)
 8006852:	f00b f94e 	bl	8011af2 <__cxa_guard_acquire>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00e      	beq.n	8006884 <cppLoop+0xbd4>
 8006866:	483f      	ldr	r0, [pc, #252]	; (8006964 <cppLoop+0xcb4>)
 8006868:	f7fc fe3a 	bl	80034e0 <_ZN13PathFollowing8getKtValEv>
 800686c:	ec54 3b10 	vmov	r3, r4, d0
 8006870:	4618      	mov	r0, r3
 8006872:	4621      	mov	r1, r4
 8006874:	f7fa f9d0 	bl	8000c18 <__aeabi_d2f>
 8006878:	4602      	mov	r2, r0
 800687a:	4b43      	ldr	r3, [pc, #268]	; (8006988 <cppLoop+0xcd8>)
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	4841      	ldr	r0, [pc, #260]	; (8006984 <cppLoop+0xcd4>)
 8006880:	f00b f943 	bl	8011b0a <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006884:	4833      	ldr	r0, [pc, #204]	; (8006954 <cppLoop+0xca4>)
 8006886:	f7fb fa91 	bl	8001dac <_ZN8JoyStick8getValueEv>
 800688a:	4603      	mov	r3, r0
 800688c:	2b08      	cmp	r3, #8
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d021      	beq.n	80068de <cppLoop+0xc2e>
			led.LR(-1, 1);
 800689a:	2201      	movs	r2, #1
 800689c:	f04f 31ff 	mov.w	r1, #4294967295
 80068a0:	4829      	ldr	r0, [pc, #164]	; (8006948 <cppLoop+0xc98>)
 80068a2:	f7fb fba3 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80068a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80068aa:	f000 fc25 	bl	80070f8 <HAL_Delay>

			selector++;
 80068ae:	4b37      	ldr	r3, [pc, #220]	; (800698c <cppLoop+0xcdc>)
 80068b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	b21a      	sxth	r2, r3
 80068bc:	4b33      	ldr	r3, [pc, #204]	; (800698c <cppLoop+0xcdc>)
 80068be:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80068c0:	4b32      	ldr	r3, [pc, #200]	; (800698c <cppLoop+0xcdc>)
 80068c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	dd02      	ble.n	80068d0 <cppLoop+0xc20>
 80068ca:	4b30      	ldr	r3, [pc, #192]	; (800698c <cppLoop+0xcdc>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80068d0:	2200      	movs	r2, #0
 80068d2:	f04f 31ff 	mov.w	r1, #4294967295
 80068d6:	481c      	ldr	r0, [pc, #112]	; (8006948 <cppLoop+0xc98>)
 80068d8:	f7fb fb88 	bl	8001fec <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80068dc:	e2cc      	b.n	8006e78 <cppLoop+0x11c8>
		else if(joy_stick.getValue() == JOY_R){
 80068de:	481d      	ldr	r0, [pc, #116]	; (8006954 <cppLoop+0xca4>)
 80068e0:	f7fb fa64 	bl	8001dac <_ZN8JoyStick8getValueEv>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	bf0c      	ite	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	2300      	movne	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8084 	beq.w	80069fe <cppLoop+0xd4e>
			led.LR(-1, 1);
 80068f6:	2201      	movs	r2, #1
 80068f8:	f04f 31ff 	mov.w	r1, #4294967295
 80068fc:	4812      	ldr	r0, [pc, #72]	; (8006948 <cppLoop+0xc98>)
 80068fe:	f7fb fb75 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006902:	2064      	movs	r0, #100	; 0x64
 8006904:	f000 fbf8 	bl	80070f8 <HAL_Delay>
			if(selector == 0){
 8006908:	4b20      	ldr	r3, [pc, #128]	; (800698c <cppLoop+0xcdc>)
 800690a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d13e      	bne.n	8006990 <cppLoop+0xce0>
				adj_kx = adj_kx + 0.00001;
 8006912:	4b19      	ldr	r3, [pc, #100]	; (8006978 <cppLoop+0xcc8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fe2e 	bl	8000578 <__aeabi_f2d>
 800691c:	a308      	add	r3, pc, #32	; (adr r3, 8006940 <cppLoop+0xc90>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f7f9 fccb 	bl	80002bc <__adddf3>
 8006926:	4603      	mov	r3, r0
 8006928:	460c      	mov	r4, r1
 800692a:	4618      	mov	r0, r3
 800692c:	4621      	mov	r1, r4
 800692e:	f7fa f973 	bl	8000c18 <__aeabi_d2f>
 8006932:	4602      	mov	r2, r0
 8006934:	4b10      	ldr	r3, [pc, #64]	; (8006978 <cppLoop+0xcc8>)
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e056      	b.n	80069e8 <cppLoop+0xd38>
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w
 8006940:	88e368f1 	.word	0x88e368f1
 8006944:	3ee4f8b5 	.word	0x3ee4f8b5
 8006948:	200005a4 	.word	0x200005a4
 800694c:	08017ec4 	.word	0x08017ec4
 8006950:	08017ed0 	.word	0x08017ed0
 8006954:	20000598 	.word	0x20000598
 8006958:	3fc8f5c3 	.word	0x3fc8f5c3
 800695c:	00000000 	.word	0x00000000
 8006960:	2001f9e8 	.word	0x2001f9e8
 8006964:	2001fcd0 	.word	0x2001fcd0
 8006968:	408f4000 	.word	0x408f4000
 800696c:	08017df8 	.word	0x08017df8
 8006970:	08017e04 	.word	0x08017e04
 8006974:	2003741c 	.word	0x2003741c
 8006978:	20037418 	.word	0x20037418
 800697c:	20037424 	.word	0x20037424
 8006980:	20037420 	.word	0x20037420
 8006984:	2003742c 	.word	0x2003742c
 8006988:	20037428 	.word	0x20037428
 800698c:	200373fe 	.word	0x200373fe
			else if(selector == 1){
 8006990:	4ba3      	ldr	r3, [pc, #652]	; (8006c20 <cppLoop+0xf70>)
 8006992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d113      	bne.n	80069c2 <cppLoop+0xd12>
				adj_ky = adj_ky + 0.00001;
 800699a:	4ba2      	ldr	r3, [pc, #648]	; (8006c24 <cppLoop+0xf74>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7f9 fdea 	bl	8000578 <__aeabi_f2d>
 80069a4:	a39c      	add	r3, pc, #624	; (adr r3, 8006c18 <cppLoop+0xf68>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f7f9 fc87 	bl	80002bc <__adddf3>
 80069ae:	4603      	mov	r3, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	4618      	mov	r0, r3
 80069b4:	4621      	mov	r1, r4
 80069b6:	f7fa f92f 	bl	8000c18 <__aeabi_d2f>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b99      	ldr	r3, [pc, #612]	; (8006c24 <cppLoop+0xf74>)
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e012      	b.n	80069e8 <cppLoop+0xd38>
				adj_kt = adj_kt + 0.00001;
 80069c2:	4b99      	ldr	r3, [pc, #612]	; (8006c28 <cppLoop+0xf78>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7f9 fdd6 	bl	8000578 <__aeabi_f2d>
 80069cc:	a392      	add	r3, pc, #584	; (adr r3, 8006c18 <cppLoop+0xf68>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f7f9 fc73 	bl	80002bc <__adddf3>
 80069d6:	4603      	mov	r3, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	4618      	mov	r0, r3
 80069dc:	4621      	mov	r1, r4
 80069de:	f7fa f91b 	bl	8000c18 <__aeabi_d2f>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4b90      	ldr	r3, [pc, #576]	; (8006c28 <cppLoop+0xf78>)
 80069e6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80069e8:	2152      	movs	r1, #82	; 0x52
 80069ea:	4890      	ldr	r0, [pc, #576]	; (8006c2c <cppLoop+0xf7c>)
 80069ec:	f7fb fa42 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80069f0:	2200      	movs	r2, #0
 80069f2:	f04f 31ff 	mov.w	r1, #4294967295
 80069f6:	488d      	ldr	r0, [pc, #564]	; (8006c2c <cppLoop+0xf7c>)
 80069f8:	f7fb faf8 	bl	8001fec <_ZN3LED2LREaa>
		break;
 80069fc:	e23c      	b.n	8006e78 <cppLoop+0x11c8>
		else if(joy_stick.getValue() == JOY_L){
 80069fe:	488c      	ldr	r0, [pc, #560]	; (8006c30 <cppLoop+0xf80>)
 8006a00:	f7fb f9d4 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d058      	beq.n	8006ac6 <cppLoop+0xe16>
			led.LR(-1, 1);
 8006a14:	2201      	movs	r2, #1
 8006a16:	f04f 31ff 	mov.w	r1, #4294967295
 8006a1a:	4884      	ldr	r0, [pc, #528]	; (8006c2c <cppLoop+0xf7c>)
 8006a1c:	f7fb fae6 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006a20:	2064      	movs	r0, #100	; 0x64
 8006a22:	f000 fb69 	bl	80070f8 <HAL_Delay>
			if(selector == 0){
 8006a26:	4b7e      	ldr	r3, [pc, #504]	; (8006c20 <cppLoop+0xf70>)
 8006a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d113      	bne.n	8006a58 <cppLoop+0xda8>
				adj_kx = adj_kx - 0.00001;
 8006a30:	4b80      	ldr	r3, [pc, #512]	; (8006c34 <cppLoop+0xf84>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7f9 fd9f 	bl	8000578 <__aeabi_f2d>
 8006a3a:	a377      	add	r3, pc, #476	; (adr r3, 8006c18 <cppLoop+0xf68>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fc3a 	bl	80002b8 <__aeabi_dsub>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f7fa f8e4 	bl	8000c18 <__aeabi_d2f>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b78      	ldr	r3, [pc, #480]	; (8006c34 <cppLoop+0xf84>)
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e02b      	b.n	8006ab0 <cppLoop+0xe00>
			else if(selector == 1){
 8006a58:	4b71      	ldr	r3, [pc, #452]	; (8006c20 <cppLoop+0xf70>)
 8006a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d113      	bne.n	8006a8a <cppLoop+0xdda>
				adj_ky = adj_ky - 0.00001;
 8006a62:	4b70      	ldr	r3, [pc, #448]	; (8006c24 <cppLoop+0xf74>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fd86 	bl	8000578 <__aeabi_f2d>
 8006a6c:	a36a      	add	r3, pc, #424	; (adr r3, 8006c18 <cppLoop+0xf68>)
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f7f9 fc21 	bl	80002b8 <__aeabi_dsub>
 8006a76:	4603      	mov	r3, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	f7fa f8cb 	bl	8000c18 <__aeabi_d2f>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b67      	ldr	r3, [pc, #412]	; (8006c24 <cppLoop+0xf74>)
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e012      	b.n	8006ab0 <cppLoop+0xe00>
				adj_kt = adj_kt - 0.00001;
 8006a8a:	4b67      	ldr	r3, [pc, #412]	; (8006c28 <cppLoop+0xf78>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7f9 fd72 	bl	8000578 <__aeabi_f2d>
 8006a94:	a360      	add	r3, pc, #384	; (adr r3, 8006c18 <cppLoop+0xf68>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fc0d 	bl	80002b8 <__aeabi_dsub>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	f7fa f8b7 	bl	8000c18 <__aeabi_d2f>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	4b5e      	ldr	r3, [pc, #376]	; (8006c28 <cppLoop+0xf78>)
 8006aae:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006ab0:	2152      	movs	r1, #82	; 0x52
 8006ab2:	485e      	ldr	r0, [pc, #376]	; (8006c2c <cppLoop+0xf7c>)
 8006ab4:	f7fb f9de 	bl	8001e74 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f04f 31ff 	mov.w	r1, #4294967295
 8006abe:	485b      	ldr	r0, [pc, #364]	; (8006c2c <cppLoop+0xf7c>)
 8006ac0:	f7fb fa94 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006ac4:	e1d8      	b.n	8006e78 <cppLoop+0x11c8>
		else if(joy_stick.getValue() == JOY_D){
 8006ac6:	485a      	ldr	r0, [pc, #360]	; (8006c30 <cppLoop+0xf80>)
 8006ac8:	f7fb f970 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	bf0c      	ite	eq
 8006ad2:	2301      	moveq	r3, #1
 8006ad4:	2300      	movne	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d048      	beq.n	8006b6e <cppLoop+0xebe>
			led.LR(-1, 1);
 8006adc:	2201      	movs	r2, #1
 8006ade:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae2:	4852      	ldr	r0, [pc, #328]	; (8006c2c <cppLoop+0xf7c>)
 8006ae4:	f7fb fa82 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006ae8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006aec:	f000 fb04 	bl	80070f8 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8006af0:	f107 030c 	add.w	r3, r7, #12
 8006af4:	2201      	movs	r2, #1
 8006af6:	4950      	ldr	r1, [pc, #320]	; (8006c38 <cppLoop+0xf88>)
 8006af8:	4850      	ldr	r0, [pc, #320]	; (8006c3c <cppLoop+0xf8c>)
 8006afa:	f7fa fd9f 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	2201      	movs	r2, #1
 8006b04:	494e      	ldr	r1, [pc, #312]	; (8006c40 <cppLoop+0xf90>)
 8006b06:	484d      	ldr	r0, [pc, #308]	; (8006c3c <cppLoop+0xf8c>)
 8006b08:	f7fa fd98 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8006b0c:	1d3b      	adds	r3, r7, #4
 8006b0e:	2201      	movs	r2, #1
 8006b10:	494c      	ldr	r1, [pc, #304]	; (8006c44 <cppLoop+0xf94>)
 8006b12:	484a      	ldr	r0, [pc, #296]	; (8006c3c <cppLoop+0xf8c>)
 8006b14:	f7fa fd92 	bl	800163c <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7f9 fd2c 	bl	8000578 <__aeabi_f2d>
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7f9 fd26 	bl	8000578 <__aeabi_f2d>
 8006b2c:	4680      	mov	r8, r0
 8006b2e:	4689      	mov	r9, r1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fd20 	bl	8000578 <__aeabi_f2d>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	ec43 2b12 	vmov	d2, r2, r3
 8006b40:	ec49 8b11 	vmov	d1, r8, r9
 8006b44:	ec45 4b10 	vmov	d0, r4, r5
 8006b48:	483f      	ldr	r0, [pc, #252]	; (8006c48 <cppLoop+0xf98>)
 8006b4a:	f7fc fc81 	bl	8003450 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a38      	ldr	r2, [pc, #224]	; (8006c34 <cppLoop+0xf84>)
 8006b52:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <cppLoop+0xf74>)
 8006b58:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a32      	ldr	r2, [pc, #200]	; (8006c28 <cppLoop+0xf78>)
 8006b5e:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	f04f 31ff 	mov.w	r1, #4294967295
 8006b66:	4831      	ldr	r0, [pc, #196]	; (8006c2c <cppLoop+0xf7c>)
 8006b68:	f7fb fa40 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006b6c:	e184      	b.n	8006e78 <cppLoop+0x11c8>
		else if(joy_stick.getValue() == JOY_C){
 8006b6e:	4830      	ldr	r0, [pc, #192]	; (8006c30 <cppLoop+0xf80>)
 8006b70:	f7fb f91c 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	bf0c      	ite	eq
 8006b7a:	2301      	moveq	r3, #1
 8006b7c:	2300      	movne	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8179 	beq.w	8006e78 <cppLoop+0x11c8>
			led.LR(-1, 1);
 8006b86:	2201      	movs	r2, #1
 8006b88:	f04f 31ff 	mov.w	r1, #4294967295
 8006b8c:	4827      	ldr	r0, [pc, #156]	; (8006c2c <cppLoop+0xf7c>)
 8006b8e:	f7fb fa2d 	bl	8001fec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006b92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b96:	f000 faaf 	bl	80070f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <cppLoop+0xf84>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4925      	ldr	r1, [pc, #148]	; (8006c38 <cppLoop+0xf88>)
 8006ba4:	4825      	ldr	r0, [pc, #148]	; (8006c3c <cppLoop+0xf8c>)
 8006ba6:	f7fa fce3 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8006baa:	2300      	movs	r3, #0
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <cppLoop+0xf74>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	4923      	ldr	r1, [pc, #140]	; (8006c40 <cppLoop+0xf90>)
 8006bb4:	4821      	ldr	r0, [pc, #132]	; (8006c3c <cppLoop+0xf8c>)
 8006bb6:	f7fa fcdb 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <cppLoop+0xf78>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4920      	ldr	r1, [pc, #128]	; (8006c44 <cppLoop+0xf94>)
 8006bc4:	481d      	ldr	r0, [pc, #116]	; (8006c3c <cppLoop+0xf8c>)
 8006bc6:	f7fa fcd3 	bl	8001570 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006bca:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <cppLoop+0xf84>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7f9 fcd2 	bl	8000578 <__aeabi_f2d>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <cppLoop+0xf74>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7f9 fccb 	bl	8000578 <__aeabi_f2d>
 8006be2:	4680      	mov	r8, r0
 8006be4:	4689      	mov	r9, r1
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <cppLoop+0xf78>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7f9 fcc4 	bl	8000578 <__aeabi_f2d>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	ec43 2b12 	vmov	d2, r2, r3
 8006bf8:	ec49 8b11 	vmov	d1, r8, r9
 8006bfc:	ec45 4b10 	vmov	d0, r4, r5
 8006c00:	4811      	ldr	r0, [pc, #68]	; (8006c48 <cppLoop+0xf98>)
 8006c02:	f7fc fc25 	bl	8003450 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8006c06:	2200      	movs	r2, #0
 8006c08:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0c:	4807      	ldr	r0, [pc, #28]	; (8006c2c <cppLoop+0xf7c>)
 8006c0e:	f7fb f9ed 	bl	8001fec <_ZN3LED2LREaa>
		break;
 8006c12:	e131      	b.n	8006e78 <cppLoop+0x11c8>
 8006c14:	f3af 8000 	nop.w
 8006c18:	88e368f1 	.word	0x88e368f1
 8006c1c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006c20:	200373fe 	.word	0x200373fe
 8006c24:	20037420 	.word	0x20037420
 8006c28:	20037428 	.word	0x20037428
 8006c2c:	200005a4 	.word	0x200005a4
 8006c30:	20000598 	.word	0x20000598
 8006c34:	20037418 	.word	0x20037418
 8006c38:	08017ed8 	.word	0x08017ed8
 8006c3c:	08017e1c 	.word	0x08017e1c
 8006c40:	08017ee0 	.word	0x08017ee0
 8006c44:	08017ee8 	.word	0x08017ee8
 8006c48:	2001fcd0 	.word	0x2001fcd0

	case 9:
		led.fullColor('M');
 8006c4c:	214d      	movs	r1, #77	; 0x4d
 8006c4e:	4898      	ldr	r0, [pc, #608]	; (8006eb0 <cppLoop+0x1200>)
 8006c50:	f7fb f910 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c54:	f7fa fa24 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f7fa fa30 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006c60:	4894      	ldr	r0, [pc, #592]	; (8006eb4 <cppLoop+0x1204>)
 8006c62:	f7fa fa57 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c66:	2101      	movs	r1, #1
 8006c68:	2000      	movs	r0, #0
 8006c6a:	f7fa fa29 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006c6e:	4892      	ldr	r0, [pc, #584]	; (8006eb8 <cppLoop+0x1208>)
 8006c70:	f7fa fa50 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c74:	4891      	ldr	r0, [pc, #580]	; (8006ebc <cppLoop+0x120c>)
 8006c76:	f7fb f899 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 80f8 	beq.w	8006e7c <cppLoop+0x11cc>
			HAL_Delay(1500);
 8006c8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006c90:	f000 fa32 	bl	80070f8 <HAL_Delay>
			led.LR(-1, 1);
 8006c94:	2201      	movs	r2, #1
 8006c96:	f04f 31ff 	mov.w	r1, #4294967295
 8006c9a:	4885      	ldr	r0, [pc, #532]	; (8006eb0 <cppLoop+0x1200>)
 8006c9c:	f7fb f9a6 	bl	8001fec <_ZN3LED2LREaa>

			logger.start();
 8006ca0:	4887      	ldr	r0, [pc, #540]	; (8006ec0 <cppLoop+0x1210>)
 8006ca2:	f7fc f8f3 	bl	8002e8c <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006ca6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8006e98 <cppLoop+0x11e8>
 8006caa:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8006ea0 <cppLoop+0x11f0>
 8006cae:	4885      	ldr	r0, [pc, #532]	; (8006ec4 <cppLoop+0x1214>)
 8006cb0:	f7fc f97e 	bl	8002fb0 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cb8:	f000 fa1e 	bl	80070f8 <HAL_Delay>

			logger.stop();
 8006cbc:	4880      	ldr	r0, [pc, #512]	; (8006ec0 <cppLoop+0x1210>)
 8006cbe:	f7fc f8f4 	bl	8002eaa <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8006cc2:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8006ea8 <cppLoop+0x11f8>
 8006cc6:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8006ea8 <cppLoop+0x11f8>
 8006cca:	487e      	ldr	r0, [pc, #504]	; (8006ec4 <cppLoop+0x1214>)
 8006ccc:	f7fc f970 	bl	8002fb0 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8006cd0:	4a7d      	ldr	r2, [pc, #500]	; (8006ec8 <cppLoop+0x1218>)
 8006cd2:	497e      	ldr	r1, [pc, #504]	; (8006ecc <cppLoop+0x121c>)
 8006cd4:	487a      	ldr	r0, [pc, #488]	; (8006ec0 <cppLoop+0x1210>)
 8006cd6:	f7fc f88c 	bl	8002df2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ce0:	4873      	ldr	r0, [pc, #460]	; (8006eb0 <cppLoop+0x1200>)
 8006ce2:	f7fb f983 	bl	8001fec <_ZN3LED2LREaa>
		}
		break;
 8006ce6:	e0c9      	b.n	8006e7c <cppLoop+0x11cc>

	case 10:
		led.fullColor('Y');
 8006ce8:	2159      	movs	r1, #89	; 0x59
 8006cea:	4871      	ldr	r0, [pc, #452]	; (8006eb0 <cppLoop+0x1200>)
 8006cec:	f7fb f8c2 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006cf0:	f7fa f9d6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7fa f9e2 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006cfc:	4874      	ldr	r0, [pc, #464]	; (8006ed0 <cppLoop+0x1220>)
 8006cfe:	f7fa fa09 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d02:	2101      	movs	r1, #1
 8006d04:	2000      	movs	r0, #0
 8006d06:	f7fa f9db 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006d0a:	4872      	ldr	r0, [pc, #456]	; (8006ed4 <cppLoop+0x1224>)
 8006d0c:	f7fa fa02 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d10:	486a      	ldr	r0, [pc, #424]	; (8006ebc <cppLoop+0x120c>)
 8006d12:	f7fb f84b 	bl	8001dac <_ZN8JoyStick8getValueEv>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2301      	moveq	r3, #1
 8006d1e:	2300      	movne	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80ac 	beq.w	8006e80 <cppLoop+0x11d0>
			HAL_Delay(1500);
 8006d28:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006d2c:	f000 f9e4 	bl	80070f8 <HAL_Delay>
			led.LR(-1, 1);
 8006d30:	2201      	movs	r2, #1
 8006d32:	f04f 31ff 	mov.w	r1, #4294967295
 8006d36:	485e      	ldr	r0, [pc, #376]	; (8006eb0 <cppLoop+0x1200>)
 8006d38:	f7fb f958 	bl	8001fec <_ZN3LED2LREaa>

			logger.start();
 8006d3c:	4860      	ldr	r0, [pc, #384]	; (8006ec0 <cppLoop+0x1210>)
 8006d3e:	f7fc f8a5 	bl	8002e8c <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006d42:	4865      	ldr	r0, [pc, #404]	; (8006ed8 <cppLoop+0x1228>)
 8006d44:	f7fc fff5 	bl	8003d32 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8006d48:	eddf 0a64 	vldr	s1, [pc, #400]	; 8006edc <cppLoop+0x122c>
 8006d4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d50:	4861      	ldr	r0, [pc, #388]	; (8006ed8 <cppLoop+0x1228>)
 8006d52:	f7fc ff81 	bl	8003c58 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d5a:	f000 f9cd 	bl	80070f8 <HAL_Delay>

			logger.stop();
 8006d5e:	4858      	ldr	r0, [pc, #352]	; (8006ec0 <cppLoop+0x1210>)
 8006d60:	f7fc f8a3 	bl	8002eaa <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006d64:	485c      	ldr	r0, [pc, #368]	; (8006ed8 <cppLoop+0x1228>)
 8006d66:	f7fc fff7 	bl	8003d58 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006d6a:	4a5d      	ldr	r2, [pc, #372]	; (8006ee0 <cppLoop+0x1230>)
 8006d6c:	4957      	ldr	r1, [pc, #348]	; (8006ecc <cppLoop+0x121c>)
 8006d6e:	4854      	ldr	r0, [pc, #336]	; (8006ec0 <cppLoop+0x1210>)
 8006d70:	f7fc f83f 	bl	8002df2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006d74:	2200      	movs	r2, #0
 8006d76:	f04f 31ff 	mov.w	r1, #4294967295
 8006d7a:	484d      	ldr	r0, [pc, #308]	; (8006eb0 <cppLoop+0x1200>)
 8006d7c:	f7fb f936 	bl	8001fec <_ZN3LED2LREaa>
		}

		break;
 8006d80:	e07e      	b.n	8006e80 <cppLoop+0x11d0>

	case 11:
		led.fullColor('C');
 8006d82:	2143      	movs	r1, #67	; 0x43
 8006d84:	484a      	ldr	r0, [pc, #296]	; (8006eb0 <cppLoop+0x1200>)
 8006d86:	f7fb f875 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d8a:	f7fa f989 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d8e:	2100      	movs	r1, #0
 8006d90:	2000      	movs	r0, #0
 8006d92:	f7fa f995 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 8006d96:	4853      	ldr	r0, [pc, #332]	; (8006ee4 <cppLoop+0x1234>)
 8006d98:	f7fa f9bc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f7fa f98e 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006da4:	4850      	ldr	r0, [pc, #320]	; (8006ee8 <cppLoop+0x1238>)
 8006da6:	f7fa f9b5 	bl	8001114 <lcd_printf>

		break;
 8006daa:	e06a      	b.n	8006e82 <cppLoop+0x11d2>

	case 12:
		led.fullColor('R');
 8006dac:	2152      	movs	r1, #82	; 0x52
 8006dae:	4840      	ldr	r0, [pc, #256]	; (8006eb0 <cppLoop+0x1200>)
 8006db0:	f7fb f860 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006db4:	f7fa f974 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006db8:	2100      	movs	r1, #0
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f7fa f980 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8006dc0:	484a      	ldr	r0, [pc, #296]	; (8006eec <cppLoop+0x123c>)
 8006dc2:	f7fa f9a7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f7fa f979 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006dce:	4846      	ldr	r0, [pc, #280]	; (8006ee8 <cppLoop+0x1238>)
 8006dd0:	f7fa f9a0 	bl	8001114 <lcd_printf>

		break;
 8006dd4:	e055      	b.n	8006e82 <cppLoop+0x11d2>

	case 13:
		led.fullColor('G');
 8006dd6:	2147      	movs	r1, #71	; 0x47
 8006dd8:	4835      	ldr	r0, [pc, #212]	; (8006eb0 <cppLoop+0x1200>)
 8006dda:	f7fb f84b 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006dde:	f7fa f95f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006de2:	2100      	movs	r1, #0
 8006de4:	2000      	movs	r0, #0
 8006de6:	f7fa f96b 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8006dea:	4841      	ldr	r0, [pc, #260]	; (8006ef0 <cppLoop+0x1240>)
 8006dec:	f7fa f992 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006df0:	2101      	movs	r1, #1
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7fa f964 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006df8:	483b      	ldr	r0, [pc, #236]	; (8006ee8 <cppLoop+0x1238>)
 8006dfa:	f7fa f98b 	bl	8001114 <lcd_printf>

		break;
 8006dfe:	e040      	b.n	8006e82 <cppLoop+0x11d2>

	case 14:
		led.fullColor('B');
 8006e00:	2142      	movs	r1, #66	; 0x42
 8006e02:	482b      	ldr	r0, [pc, #172]	; (8006eb0 <cppLoop+0x1200>)
 8006e04:	f7fb f836 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e08:	f7fa f94a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f7fa f956 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8006e14:	4837      	ldr	r0, [pc, #220]	; (8006ef4 <cppLoop+0x1244>)
 8006e16:	f7fa f97d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7fa f94f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006e22:	4831      	ldr	r0, [pc, #196]	; (8006ee8 <cppLoop+0x1238>)
 8006e24:	f7fa f976 	bl	8001114 <lcd_printf>

		break;
 8006e28:	e02b      	b.n	8006e82 <cppLoop+0x11d2>

	case 15:
		led.fullColor('M');
 8006e2a:	214d      	movs	r1, #77	; 0x4d
 8006e2c:	4820      	ldr	r0, [pc, #128]	; (8006eb0 <cppLoop+0x1200>)
 8006e2e:	f7fb f821 	bl	8001e74 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e32:	f7fa f935 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e36:	2100      	movs	r1, #0
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f7fa f941 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8006e3e:	482e      	ldr	r0, [pc, #184]	; (8006ef8 <cppLoop+0x1248>)
 8006e40:	f7fa f968 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e44:	2101      	movs	r1, #1
 8006e46:	2000      	movs	r0, #0
 8006e48:	f7fa f93a 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006e4c:	4826      	ldr	r0, [pc, #152]	; (8006ee8 <cppLoop+0x1238>)
 8006e4e:	f7fa f961 	bl	8001114 <lcd_printf>

		break;
 8006e52:	e016      	b.n	8006e82 <cppLoop+0x11d2>

	default:
		break;
 8006e54:	bf00      	nop
 8006e56:	e014      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e58:	bf00      	nop
 8006e5a:	e012      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e5c:	bf00      	nop
 8006e5e:	e010      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e60:	bf00      	nop
 8006e62:	e00e      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e64:	bf00      	nop
 8006e66:	e00c      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e68:	bf00      	nop
 8006e6a:	e00a      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e6c:	bf00      	nop
 8006e6e:	e008      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e70:	bf00      	nop
 8006e72:	e006      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e74:	bf00      	nop
 8006e76:	e004      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <cppLoop+0x11d2>
		break;
 8006e80:	bf00      	nop

	}

	HAL_Delay(30);
 8006e82:	201e      	movs	r0, #30
 8006e84:	f000 f938 	bl	80070f8 <HAL_Delay>

}
 8006e88:	bf00      	nop
 8006e8a:	3724      	adds	r7, #36	; 0x24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	33333333 	.word	0x33333333
 8006e9c:	bfd33333 	.word	0xbfd33333
 8006ea0:	33333333 	.word	0x33333333
 8006ea4:	3fd33333 	.word	0x3fd33333
	...
 8006eb0:	200005a4 	.word	0x200005a4
 8006eb4:	08017ef0 	.word	0x08017ef0
 8006eb8:	08017e50 	.word	0x08017e50
 8006ebc:	20000598 	.word	0x20000598
 8006ec0:	200005c8 	.word	0x200005c8
 8006ec4:	200005a0 	.word	0x200005a0
 8006ec8:	08017ef8 	.word	0x08017ef8
 8006ecc:	08017f04 	.word	0x08017f04
 8006ed0:	08017f10 	.word	0x08017f10
 8006ed4:	08017f14 	.word	0x08017f14
 8006ed8:	2001f9e8 	.word	0x2001f9e8
 8006edc:	00000000 	.word	0x00000000
 8006ee0:	08017f20 	.word	0x08017f20
 8006ee4:	08017f2c 	.word	0x08017f2c
 8006ee8:	08017f38 	.word	0x08017f38
 8006eec:	08017f44 	.word	0x08017f44
 8006ef0:	08017f50 	.word	0x08017f50
 8006ef4:	08017f5c 	.word	0x08017f5c
 8006ef8:	08017f68 	.word	0x08017f68

08006efc <_Z41__static_initialization_and_destruction_0ii>:
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d135      	bne.n	8006f78 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d130      	bne.n	8006f78 <_Z41__static_initialization_and_destruction_0ii+0x7c>
LineSensor line_sensor;
 8006f16:	481a      	ldr	r0, [pc, #104]	; (8006f80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006f18:	f7fb f8a0 	bl	800205c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006f1c:	4819      	ldr	r0, [pc, #100]	; (8006f84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006f1e:	f7fc fbbf 	bl	80036a0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006f22:	4819      	ldr	r0, [pc, #100]	; (8006f88 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006f24:	f7fa ff36 	bl	8001d94 <_ZN8JoyStickC1Ev>
Motor motor;
 8006f28:	4818      	ldr	r0, [pc, #96]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f2a:	f7fb ffcd 	bl	8002ec8 <_ZN5MotorC1Ev>
IMU imu;
 8006f2e:	4818      	ldr	r0, [pc, #96]	; (8006f90 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006f30:	f7fa fd36 	bl	80019a0 <_ZN3IMUC1Ev>
Logger logger;
 8006f34:	4817      	ldr	r0, [pc, #92]	; (8006f94 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006f36:	f7fb fe76 	bl	8002c26 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006f3a:	4817      	ldr	r0, [pc, #92]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f3c:	f7fa f90a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f44:	4911      	ldr	r1, [pc, #68]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f46:	4815      	ldr	r0, [pc, #84]	; (8006f9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006f48:	f7fc fd5a 	bl	8003a00 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor);
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006f52:	4a0b      	ldr	r2, [pc, #44]	; (8006f80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006f54:	490d      	ldr	r1, [pc, #52]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f56:	4812      	ldr	r0, [pc, #72]	; (8006fa0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006f58:	f7fb fbd8 	bl	800270c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensor>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006f5e:	4a0c      	ldr	r2, [pc, #48]	; (8006f90 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006f60:	490d      	ldr	r1, [pc, #52]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f62:	4810      	ldr	r0, [pc, #64]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006f64:	f7fc f896 	bl	8003094 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006f68:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f6a:	490a      	ldr	r1, [pc, #40]	; (8006f94 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006f6c:	480e      	ldr	r0, [pc, #56]	; (8006fa8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006f6e:	f7fc fc43 	bl	80037f8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006f72:	480e      	ldr	r0, [pc, #56]	; (8006fac <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8006f74:	f7fc f9b4 	bl	80032e0 <_ZN13PathFollowingC1Ev>
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000298 	.word	0x20000298
 8006f84:	20000590 	.word	0x20000590
 8006f88:	20000598 	.word	0x20000598
 8006f8c:	200005a0 	.word	0x200005a0
 8006f90:	200005b4 	.word	0x200005b4
 8006f94:	200005c8 	.word	0x200005c8
 8006f98:	2001f9d0 	.word	0x2001f9d0
 8006f9c:	2001f9e8 	.word	0x2001f9e8
 8006fa0:	2001fa24 	.word	0x2001fa24
 8006fa4:	2001fa90 	.word	0x2001fa90
 8006fa8:	2001fac0 	.word	0x2001fac0
 8006fac:	2001fcd0 	.word	0x2001fcd0

08006fb0 <_GLOBAL__sub_I_line_sensor>:
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f7ff ff9f 	bl	8006efc <_Z41__static_initialization_and_destruction_0ii>
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006fc6:	e003      	b.n	8006fd0 <LoopCopyDataInit>

08006fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006fce:	3104      	adds	r1, #4

08006fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006fd0:	480b      	ldr	r0, [pc, #44]	; (8007000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006fd8:	d3f6      	bcc.n	8006fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8006fda:	4a0b      	ldr	r2, [pc, #44]	; (8007008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006fdc:	e002      	b.n	8006fe4 <LoopFillZerobss>

08006fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006fe0:	f842 3b04 	str.w	r3, [r2], #4

08006fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006fe4:	4b09      	ldr	r3, [pc, #36]	; (800700c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006fe8:	d3f9      	bcc.n	8006fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006fea:	f7fe fcd7 	bl	800599c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006fee:	f00b fdeb 	bl	8012bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ff2:	f7fc ff9d 	bl	8003f30 <main>
  bx  lr    
 8006ff6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ff8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006ffc:	08018570 	.word	0x08018570
  ldr  r0, =_sdata
 8007000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007004:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007008:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800700c:	2003be10 	.word	0x2003be10

08007010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007010:	e7fe      	b.n	8007010 <ADC_IRQHandler>
	...

08007014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007018:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <HAL_Init+0x40>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a0d      	ldr	r2, [pc, #52]	; (8007054 <HAL_Init+0x40>)
 800701e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <HAL_Init+0x40>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <HAL_Init+0x40>)
 800702a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800702e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007030:	4b08      	ldr	r3, [pc, #32]	; (8007054 <HAL_Init+0x40>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a07      	ldr	r2, [pc, #28]	; (8007054 <HAL_Init+0x40>)
 8007036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800703c:	2003      	movs	r0, #3
 800703e:	f000 fd51 	bl	8007ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007042:	2000      	movs	r0, #0
 8007044:	f000 f808 	bl	8007058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007048:	f7fd fe96 	bl	8004d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40023c00 	.word	0x40023c00

08007058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007060:	4b12      	ldr	r3, [pc, #72]	; (80070ac <HAL_InitTick+0x54>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <HAL_InitTick+0x58>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	4619      	mov	r1, r3
 800706a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800706e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fd69 	bl	8007b4e <HAL_SYSTICK_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e00e      	b.n	80070a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b0f      	cmp	r3, #15
 800708a:	d80a      	bhi.n	80070a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800708c:	2200      	movs	r2, #0
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	f000 fd31 	bl	8007afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007098:	4a06      	ldr	r2, [pc, #24]	; (80070b4 <HAL_InitTick+0x5c>)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e000      	b.n	80070a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000000 	.word	0x20000000
 80070b0:	20000008 	.word	0x20000008
 80070b4:	20000004 	.word	0x20000004

080070b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <HAL_IncTick+0x20>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_IncTick+0x24>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4413      	add	r3, r2
 80070c8:	4a04      	ldr	r2, [pc, #16]	; (80070dc <HAL_IncTick+0x24>)
 80070ca:	6013      	str	r3, [r2, #0]
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20000008 	.word	0x20000008
 80070dc:	20039d98 	.word	0x20039d98

080070e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  return uwTick;
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <HAL_GetTick+0x14>)
 80070e6:	681b      	ldr	r3, [r3, #0]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20039d98 	.word	0x20039d98

080070f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007100:	f7ff ffee 	bl	80070e0 <HAL_GetTick>
 8007104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d005      	beq.n	800711e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <HAL_Delay+0x40>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800711e:	bf00      	nop
 8007120:	f7ff ffde 	bl	80070e0 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d8f7      	bhi.n	8007120 <HAL_Delay+0x28>
  {
  }
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000008 	.word	0x20000008

0800713c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e033      	b.n	80071ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fd fe34 	bl	8004dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b00      	cmp	r3, #0
 8007178:	d118      	bne.n	80071ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007182:	f023 0302 	bic.w	r3, r3, #2
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa5a 	bl	8007648 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f023 0303 	bic.w	r3, r3, #3
 80071a2:	f043 0201 	orr.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
 80071aa:	e001      	b.n	80071b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_ADC_Start_DMA+0x1e>
 80071de:	2302      	movs	r3, #2
 80071e0:	e0cc      	b.n	800737c <HAL_ADC_Start_DMA+0x1b8>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d018      	beq.n	800722a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007208:	4b5e      	ldr	r3, [pc, #376]	; (8007384 <HAL_ADC_Start_DMA+0x1c0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5e      	ldr	r2, [pc, #376]	; (8007388 <HAL_ADC_Start_DMA+0x1c4>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	0c9a      	lsrs	r2, r3, #18
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800721c:	e002      	b.n	8007224 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3b01      	subs	r3, #1
 8007222:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f9      	bne.n	800721e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	f040 80a0 	bne.w	800737a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007242:	f023 0301 	bic.w	r3, r3, #1
 8007246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007258:	2b00      	cmp	r3, #0
 800725a:	d007      	beq.n	800726c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007264:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	d106      	bne.n	8007288 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727e:	f023 0206 	bic.w	r2, r3, #6
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
 8007286:	e002      	b.n	800728e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007296:	4b3d      	ldr	r3, [pc, #244]	; (800738c <HAL_ADC_Start_DMA+0x1c8>)
 8007298:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	4a3c      	ldr	r2, [pc, #240]	; (8007390 <HAL_ADC_Start_DMA+0x1cc>)
 80072a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	4a3b      	ldr	r2, [pc, #236]	; (8007394 <HAL_ADC_Start_DMA+0x1d0>)
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	4a3a      	ldr	r2, [pc, #232]	; (8007398 <HAL_ADC_Start_DMA+0x1d4>)
 80072b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80072ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80072ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	334c      	adds	r3, #76	; 0x4c
 80072e6:	4619      	mov	r1, r3
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f000 fcea 	bl	8007cc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d12a      	bne.n	8007352 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a26      	ldr	r2, [pc, #152]	; (800739c <HAL_ADC_Start_DMA+0x1d8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d015      	beq.n	8007332 <HAL_ADC_Start_DMA+0x16e>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a25      	ldr	r2, [pc, #148]	; (80073a0 <HAL_ADC_Start_DMA+0x1dc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d105      	bne.n	800731c <HAL_ADC_Start_DMA+0x158>
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_ADC_Start_DMA+0x1c8>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a20      	ldr	r2, [pc, #128]	; (80073a4 <HAL_ADC_Start_DMA+0x1e0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d129      	bne.n	800737a <HAL_ADC_Start_DMA+0x1b6>
 8007326:	4b19      	ldr	r3, [pc, #100]	; (800738c <HAL_ADC_Start_DMA+0x1c8>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2b0f      	cmp	r3, #15
 8007330:	d823      	bhi.n	800737a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d11c      	bne.n	800737a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	e013      	b.n	800737a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a11      	ldr	r2, [pc, #68]	; (800739c <HAL_ADC_Start_DMA+0x1d8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d10e      	bne.n	800737a <HAL_ADC_Start_DMA+0x1b6>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007378:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000000 	.word	0x20000000
 8007388:	431bde83 	.word	0x431bde83
 800738c:	40012300 	.word	0x40012300
 8007390:	08007841 	.word	0x08007841
 8007394:	080078fb 	.word	0x080078fb
 8007398:	08007917 	.word	0x08007917
 800739c:	40012000 	.word	0x40012000
 80073a0:	40012100 	.word	0x40012100
 80073a4:	40012200 	.word	0x40012200

080073a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_ADC_ConfigChannel+0x1c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e113      	b.n	8007628 <HAL_ADC_ConfigChannel+0x244>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b09      	cmp	r3, #9
 800740e:	d925      	bls.n	800745c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68d9      	ldr	r1, [r3, #12]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	3b1e      	subs	r3, #30
 8007426:	2207      	movs	r2, #7
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	43da      	mvns	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	400a      	ands	r2, r1
 8007434:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68d9      	ldr	r1, [r3, #12]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	4618      	mov	r0, r3
 8007448:	4603      	mov	r3, r0
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	4403      	add	r3, r0
 800744e:	3b1e      	subs	r3, #30
 8007450:	409a      	lsls	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	e022      	b.n	80074a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6919      	ldr	r1, [r3, #16]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	4613      	mov	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	4413      	add	r3, r2
 8007470:	2207      	movs	r2, #7
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43da      	mvns	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	400a      	ands	r2, r1
 800747e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6919      	ldr	r1, [r3, #16]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	4618      	mov	r0, r3
 8007492:	4603      	mov	r3, r0
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4403      	add	r3, r0
 8007498:	409a      	lsls	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b06      	cmp	r3, #6
 80074a8:	d824      	bhi.n	80074f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	3b05      	subs	r3, #5
 80074bc:	221f      	movs	r2, #31
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43da      	mvns	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	400a      	ands	r2, r1
 80074ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	4618      	mov	r0, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	3b05      	subs	r3, #5
 80074e6:	fa00 f203 	lsl.w	r2, r0, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	635a      	str	r2, [r3, #52]	; 0x34
 80074f2:	e04c      	b.n	800758e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2b0c      	cmp	r3, #12
 80074fa:	d824      	bhi.n	8007546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	3b23      	subs	r3, #35	; 0x23
 800750e:	221f      	movs	r2, #31
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	43da      	mvns	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	400a      	ands	r2, r1
 800751c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	4618      	mov	r0, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	3b23      	subs	r3, #35	; 0x23
 8007538:	fa00 f203 	lsl.w	r2, r0, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
 8007544:	e023      	b.n	800758e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	3b41      	subs	r3, #65	; 0x41
 8007558:	221f      	movs	r2, #31
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43da      	mvns	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	400a      	ands	r2, r1
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	4618      	mov	r0, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	3b41      	subs	r3, #65	; 0x41
 8007582:	fa00 f203 	lsl.w	r2, r0, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <HAL_ADC_ConfigChannel+0x250>)
 8007590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a28      	ldr	r2, [pc, #160]	; (8007638 <HAL_ADC_ConfigChannel+0x254>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d10f      	bne.n	80075bc <HAL_ADC_ConfigChannel+0x1d8>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b12      	cmp	r3, #18
 80075a2:	d10b      	bne.n	80075bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <HAL_ADC_ConfigChannel+0x254>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d12b      	bne.n	800761e <HAL_ADC_ConfigChannel+0x23a>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1c      	ldr	r2, [pc, #112]	; (800763c <HAL_ADC_ConfigChannel+0x258>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <HAL_ADC_ConfigChannel+0x1f4>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b11      	cmp	r3, #17
 80075d6:	d122      	bne.n	800761e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a11      	ldr	r2, [pc, #68]	; (800763c <HAL_ADC_ConfigChannel+0x258>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d111      	bne.n	800761e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80075fa:	4b11      	ldr	r3, [pc, #68]	; (8007640 <HAL_ADC_ConfigChannel+0x25c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a11      	ldr	r2, [pc, #68]	; (8007644 <HAL_ADC_ConfigChannel+0x260>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	0c9a      	lsrs	r2, r3, #18
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007610:	e002      	b.n	8007618 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	3b01      	subs	r3, #1
 8007616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f9      	bne.n	8007612 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40012300 	.word	0x40012300
 8007638:	40012000 	.word	0x40012000
 800763c:	10000012 	.word	0x10000012
 8007640:	20000000 	.word	0x20000000
 8007644:	431bde83 	.word	0x431bde83

08007648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007650:	4b79      	ldr	r3, [pc, #484]	; (8007838 <ADC_Init+0x1f0>)
 8007652:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	431a      	orrs	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800767c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6859      	ldr	r1, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	021a      	lsls	r2, r3, #8
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80076a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6859      	ldr	r1, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6899      	ldr	r1, [r3, #8]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	4a58      	ldr	r2, [pc, #352]	; (800783c <ADC_Init+0x1f4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d022      	beq.n	8007726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6899      	ldr	r1, [r3, #8]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6899      	ldr	r1, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	e00f      	b.n	8007746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007744:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0202 	bic.w	r2, r2, #2
 8007754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6899      	ldr	r1, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7e1b      	ldrb	r3, [r3, #24]
 8007760:	005a      	lsls	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01b      	beq.n	80077ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007782:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6859      	ldr	r1, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	3b01      	subs	r3, #1
 80077a0:	035a      	lsls	r2, r3, #13
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	e007      	b.n	80077bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	051a      	lsls	r2, r3, #20
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6899      	ldr	r1, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077fe:	025a      	lsls	r2, r3, #9
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6899      	ldr	r1, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	029a      	lsls	r2, r3, #10
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	609a      	str	r2, [r3, #8]
}
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40012300 	.word	0x40012300
 800783c:	0f000001 	.word	0x0f000001

08007840 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007856:	2b00      	cmp	r3, #0
 8007858:	d13c      	bne.n	80078d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d12b      	bne.n	80078cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007878:	2b00      	cmp	r3, #0
 800787a:	d127      	bne.n	80078cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007886:	2b00      	cmp	r3, #0
 8007888:	d006      	beq.n	8007898 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007894:	2b00      	cmp	r3, #0
 8007896:	d119      	bne.n	80078cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0220 	bic.w	r2, r2, #32
 80078a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f043 0201 	orr.w	r2, r3, #1
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff fd6b 	bl	80073a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80078d2:	e00e      	b.n	80078f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff fd75 	bl	80073d0 <HAL_ADC_ErrorCallback>
}
 80078e6:	e004      	b.n	80078f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff fd57 	bl	80073bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2240      	movs	r2, #64	; 0x40
 8007928:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792e:	f043 0204 	orr.w	r2, r3, #4
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff fd4a 	bl	80073d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <__NVIC_SetPriorityGrouping>:
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <__NVIC_SetPriorityGrouping+0x44>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007960:	4013      	ands	r3, r2
 8007962:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800796c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007976:	4a04      	ldr	r2, [pc, #16]	; (8007988 <__NVIC_SetPriorityGrouping+0x44>)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	60d3      	str	r3, [r2, #12]
}
 800797c:	bf00      	nop
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	e000ed00 	.word	0xe000ed00

0800798c <__NVIC_GetPriorityGrouping>:
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <__NVIC_GetPriorityGrouping+0x18>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	f003 0307 	and.w	r3, r3, #7
}
 800799a:	4618      	mov	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <__NVIC_EnableIRQ>:
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	db0b      	blt.n	80079d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	f003 021f 	and.w	r2, r3, #31
 80079c0:	4907      	ldr	r1, [pc, #28]	; (80079e0 <__NVIC_EnableIRQ+0x38>)
 80079c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	2001      	movs	r0, #1
 80079ca:	fa00 f202 	lsl.w	r2, r0, r2
 80079ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e100 	.word	0xe000e100

080079e4 <__NVIC_SetPriority>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	db0a      	blt.n	8007a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	490c      	ldr	r1, [pc, #48]	; (8007a30 <__NVIC_SetPriority+0x4c>)
 80079fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a02:	0112      	lsls	r2, r2, #4
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	440b      	add	r3, r1
 8007a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a0c:	e00a      	b.n	8007a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4908      	ldr	r1, [pc, #32]	; (8007a34 <__NVIC_SetPriority+0x50>)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	3b04      	subs	r3, #4
 8007a1c:	0112      	lsls	r2, r2, #4
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	440b      	add	r3, r1
 8007a22:	761a      	strb	r2, [r3, #24]
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000e100 	.word	0xe000e100
 8007a34:	e000ed00 	.word	0xe000ed00

08007a38 <NVIC_EncodePriority>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b089      	sub	sp, #36	; 0x24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f1c3 0307 	rsb	r3, r3, #7
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	bf28      	it	cs
 8007a56:	2304      	movcs	r3, #4
 8007a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d902      	bls.n	8007a68 <NVIC_EncodePriority+0x30>
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3b03      	subs	r3, #3
 8007a66:	e000      	b.n	8007a6a <NVIC_EncodePriority+0x32>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43da      	mvns	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a80:	f04f 31ff 	mov.w	r1, #4294967295
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8a:	43d9      	mvns	r1, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a90:	4313      	orrs	r3, r2
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3724      	adds	r7, #36	; 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <SysTick_Config>:
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ab0:	d301      	bcc.n	8007ab6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e00f      	b.n	8007ad6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ab6:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <SysTick_Config+0x40>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007abe:	210f      	movs	r1, #15
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	f7ff ff8e 	bl	80079e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <SysTick_Config+0x40>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <SysTick_Config+0x40>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010

08007ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff ff29 	bl	8007944 <__NVIC_SetPriorityGrouping>
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4603      	mov	r3, r0
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b0c:	f7ff ff3e 	bl	800798c <__NVIC_GetPriorityGrouping>
 8007b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	6978      	ldr	r0, [r7, #20]
 8007b18:	f7ff ff8e 	bl	8007a38 <NVIC_EncodePriority>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff ff5d 	bl	80079e4 <__NVIC_SetPriority>
}
 8007b2a:	bf00      	nop
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	4603      	mov	r3, r0
 8007b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff ff31 	bl	80079a8 <__NVIC_EnableIRQ>
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ffa2 	bl	8007aa0 <SysTick_Config>
 8007b5c:	4603      	mov	r3, r0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b74:	f7ff fab4 	bl	80070e0 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e099      	b.n	8007cb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0201 	bic.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ba4:	e00f      	b.n	8007bc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ba6:	f7ff fa9b 	bl	80070e0 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b05      	cmp	r3, #5
 8007bb2:	d908      	bls.n	8007bc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e078      	b.n	8007cb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e8      	bne.n	8007ba6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4b38      	ldr	r3, [pc, #224]	; (8007cc0 <HAL_DMA_Init+0x158>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d107      	bne.n	8007c30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d117      	bne.n	8007c8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00e      	beq.n	8007c8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa9d 	bl	80081ac <DMA_CheckFifoParam>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2240      	movs	r2, #64	; 0x40
 8007c7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c86:	2301      	movs	r3, #1
 8007c88:	e016      	b.n	8007cb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa54 	bl	8008140 <DMA_CalcBaseAndBitshift>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca0:	223f      	movs	r2, #63	; 0x3f
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	f010803f 	.word	0xf010803f

08007cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_DMA_Start_IT+0x26>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e040      	b.n	8007d6c <HAL_DMA_Start_IT+0xa8>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d12f      	bne.n	8007d5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f9e6 	bl	80080e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	223f      	movs	r2, #63	; 0x3f
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0216 	orr.w	r2, r2, #22
 8007d32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0208 	orr.w	r2, r2, #8
 8007d4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e005      	b.n	8007d6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
 8007d68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d004      	beq.n	8007d92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2280      	movs	r2, #128	; 0x80
 8007d8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e00c      	b.n	8007dac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2205      	movs	r2, #5
 8007d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007dc4:	4b92      	ldr	r3, [pc, #584]	; (8008010 <HAL_DMA_IRQHandler+0x258>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a92      	ldr	r2, [pc, #584]	; (8008014 <HAL_DMA_IRQHandler+0x25c>)
 8007dca:	fba2 2303 	umull	r2, r3, r2, r3
 8007dce:	0a9b      	lsrs	r3, r3, #10
 8007dd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	2208      	movs	r2, #8
 8007de4:	409a      	lsls	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d01a      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d013      	beq.n	8007e24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0204 	bic.w	r2, r2, #4
 8007e0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e10:	2208      	movs	r2, #8
 8007e12:	409a      	lsls	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	f043 0201 	orr.w	r2, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e28:	2201      	movs	r2, #1
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d012      	beq.n	8007e5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e46:	2201      	movs	r2, #1
 8007e48:	409a      	lsls	r2, r3
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	f043 0202 	orr.w	r2, r3, #2
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	2204      	movs	r2, #4
 8007e60:	409a      	lsls	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d012      	beq.n	8007e90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	409a      	lsls	r2, r3
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	f043 0204 	orr.w	r2, r3, #4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e94:	2210      	movs	r2, #16
 8007e96:	409a      	lsls	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d043      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d03c      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb2:	2210      	movs	r2, #16
 8007eb4:	409a      	lsls	r2, r3
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d018      	beq.n	8007efa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d108      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d024      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
 8007ee6:	e01f      	b.n	8007f28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01b      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
 8007ef8:	e016      	b.n	8007f28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d107      	bne.n	8007f18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0208 	bic.w	r2, r2, #8
 8007f16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 808e 	beq.w	8008056 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8086 	beq.w	8008056 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4e:	2220      	movs	r2, #32
 8007f50:	409a      	lsls	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d136      	bne.n	8007fd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0216 	bic.w	r2, r2, #22
 8007f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695a      	ldr	r2, [r3, #20]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d103      	bne.n	8007f92 <HAL_DMA_IRQHandler+0x1da>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0208 	bic.w	r2, r2, #8
 8007fa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa6:	223f      	movs	r2, #63	; 0x3f
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d07d      	beq.n	80080c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
        }
        return;
 8007fce:	e078      	b.n	80080c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d01c      	beq.n	8008018 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d108      	bne.n	8007ffe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d030      	beq.n	8008056 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
 8007ffc:	e02b      	b.n	8008056 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d027      	beq.n	8008056 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
 800800e:	e022      	b.n	8008056 <HAL_DMA_IRQHandler+0x29e>
 8008010:	20000000 	.word	0x20000000
 8008014:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10f      	bne.n	8008046 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0210 	bic.w	r2, r2, #16
 8008034:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	2b00      	cmp	r3, #0
 800805c:	d032      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d022      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2205      	movs	r2, #5
 800806e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	3301      	adds	r3, #1
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	429a      	cmp	r2, r3
 800808c:	d307      	bcc.n	800809e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f2      	bne.n	8008082 <HAL_DMA_IRQHandler+0x2ca>
 800809c:	e000      	b.n	80080a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800809e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
 80080c0:	e000      	b.n	80080c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80080c2:	bf00      	nop
    }
  }
}
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop

080080cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008100:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d108      	bne.n	8008124 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008122:	e007      	b.n	8008134 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	60da      	str	r2, [r3, #12]
}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	3b10      	subs	r3, #16
 8008150:	4a14      	ldr	r2, [pc, #80]	; (80081a4 <DMA_CalcBaseAndBitshift+0x64>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	091b      	lsrs	r3, r3, #4
 8008158:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800815a:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <DMA_CalcBaseAndBitshift+0x68>)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d909      	bls.n	8008182 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	1d1a      	adds	r2, r3, #4
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	659a      	str	r2, [r3, #88]	; 0x58
 8008180:	e007      	b.n	8008192 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	aaaaaaab 	.word	0xaaaaaaab
 80081a8:	08017fa8 	.word	0x08017fa8

080081ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d11f      	bne.n	8008206 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d855      	bhi.n	8008278 <DMA_CheckFifoParam+0xcc>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <DMA_CheckFifoParam+0x28>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	080081e5 	.word	0x080081e5
 80081d8:	080081f7 	.word	0x080081f7
 80081dc:	080081e5 	.word	0x080081e5
 80081e0:	08008279 	.word	0x08008279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d045      	beq.n	800827c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081f4:	e042      	b.n	800827c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081fe:	d13f      	bne.n	8008280 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008204:	e03c      	b.n	8008280 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820e:	d121      	bne.n	8008254 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b03      	cmp	r3, #3
 8008214:	d836      	bhi.n	8008284 <DMA_CheckFifoParam+0xd8>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <DMA_CheckFifoParam+0x70>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800822d 	.word	0x0800822d
 8008220:	08008233 	.word	0x08008233
 8008224:	0800822d 	.word	0x0800822d
 8008228:	08008245 	.word	0x08008245
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]
      break;
 8008230:	e02f      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d024      	beq.n	8008288 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008242:	e021      	b.n	8008288 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800824c:	d11e      	bne.n	800828c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008252:	e01b      	b.n	800828c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d902      	bls.n	8008260 <DMA_CheckFifoParam+0xb4>
 800825a:	2b03      	cmp	r3, #3
 800825c:	d003      	beq.n	8008266 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800825e:	e018      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
      break;
 8008264:	e015      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00e      	beq.n	8008290 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
      break;
 8008276:	e00b      	b.n	8008290 <DMA_CheckFifoParam+0xe4>
      break;
 8008278:	bf00      	nop
 800827a:	e00a      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      break;
 800827c:	bf00      	nop
 800827e:	e008      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      break;
 8008280:	bf00      	nop
 8008282:	e006      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      break;
 8008284:	bf00      	nop
 8008286:	e004      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      break;
 8008288:	bf00      	nop
 800828a:	e002      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      break;   
 800828c:	bf00      	nop
 800828e:	e000      	b.n	8008292 <DMA_CheckFifoParam+0xe6>
      break;
 8008290:	bf00      	nop
    }
  } 
  
  return status; 
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b089      	sub	sp, #36	; 0x24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	e177      	b.n	80085ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082bc:	2201      	movs	r2, #1
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	fa02 f303 	lsl.w	r3, r2, r3
 80082c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4013      	ands	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	f040 8166 	bne.w	80085a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d00b      	beq.n	80082fa <HAL_GPIO_Init+0x5a>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d007      	beq.n	80082fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082ee:	2b11      	cmp	r3, #17
 80082f0:	d003      	beq.n	80082fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b12      	cmp	r3, #18
 80082f8:	d130      	bne.n	800835c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	2203      	movs	r2, #3
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	43db      	mvns	r3, r3
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	4013      	ands	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	fa02 f303 	lsl.w	r3, r2, r3
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	4313      	orrs	r3, r2
 8008322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008330:	2201      	movs	r2, #1
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	fa02 f303 	lsl.w	r3, r2, r3
 8008338:	43db      	mvns	r3, r3
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	4013      	ands	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	f003 0201 	and.w	r2, r3, #1
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	4313      	orrs	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	2203      	movs	r2, #3
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	4013      	ands	r3, r2
 8008372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	4313      	orrs	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d003      	beq.n	800839c <HAL_GPIO_Init+0xfc>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b12      	cmp	r3, #18
 800839a:	d123      	bne.n	80083e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	08da      	lsrs	r2, r3, #3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3208      	adds	r2, #8
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	220f      	movs	r2, #15
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	43db      	mvns	r3, r3
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	4013      	ands	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	08da      	lsrs	r2, r3, #3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3208      	adds	r2, #8
 80083de:	69b9      	ldr	r1, [r7, #24]
 80083e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	2203      	movs	r2, #3
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	43db      	mvns	r3, r3
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	4013      	ands	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f003 0203 	and.w	r2, r3, #3
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4313      	orrs	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80c0 	beq.w	80085a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	4b65      	ldr	r3, [pc, #404]	; (80085c0 <HAL_GPIO_Init+0x320>)
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	4a64      	ldr	r2, [pc, #400]	; (80085c0 <HAL_GPIO_Init+0x320>)
 8008430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008434:	6453      	str	r3, [r2, #68]	; 0x44
 8008436:	4b62      	ldr	r3, [pc, #392]	; (80085c0 <HAL_GPIO_Init+0x320>)
 8008438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008442:	4a60      	ldr	r2, [pc, #384]	; (80085c4 <HAL_GPIO_Init+0x324>)
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	089b      	lsrs	r3, r3, #2
 8008448:	3302      	adds	r3, #2
 800844a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	220f      	movs	r2, #15
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	43db      	mvns	r3, r3
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	4013      	ands	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a57      	ldr	r2, [pc, #348]	; (80085c8 <HAL_GPIO_Init+0x328>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d037      	beq.n	80084de <HAL_GPIO_Init+0x23e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a56      	ldr	r2, [pc, #344]	; (80085cc <HAL_GPIO_Init+0x32c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d031      	beq.n	80084da <HAL_GPIO_Init+0x23a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a55      	ldr	r2, [pc, #340]	; (80085d0 <HAL_GPIO_Init+0x330>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d02b      	beq.n	80084d6 <HAL_GPIO_Init+0x236>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a54      	ldr	r2, [pc, #336]	; (80085d4 <HAL_GPIO_Init+0x334>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d025      	beq.n	80084d2 <HAL_GPIO_Init+0x232>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a53      	ldr	r2, [pc, #332]	; (80085d8 <HAL_GPIO_Init+0x338>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d01f      	beq.n	80084ce <HAL_GPIO_Init+0x22e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a52      	ldr	r2, [pc, #328]	; (80085dc <HAL_GPIO_Init+0x33c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d019      	beq.n	80084ca <HAL_GPIO_Init+0x22a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a51      	ldr	r2, [pc, #324]	; (80085e0 <HAL_GPIO_Init+0x340>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d013      	beq.n	80084c6 <HAL_GPIO_Init+0x226>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a50      	ldr	r2, [pc, #320]	; (80085e4 <HAL_GPIO_Init+0x344>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00d      	beq.n	80084c2 <HAL_GPIO_Init+0x222>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a4f      	ldr	r2, [pc, #316]	; (80085e8 <HAL_GPIO_Init+0x348>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d007      	beq.n	80084be <HAL_GPIO_Init+0x21e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a4e      	ldr	r2, [pc, #312]	; (80085ec <HAL_GPIO_Init+0x34c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d101      	bne.n	80084ba <HAL_GPIO_Init+0x21a>
 80084b6:	2309      	movs	r3, #9
 80084b8:	e012      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084ba:	230a      	movs	r3, #10
 80084bc:	e010      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084be:	2308      	movs	r3, #8
 80084c0:	e00e      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084c2:	2307      	movs	r3, #7
 80084c4:	e00c      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084c6:	2306      	movs	r3, #6
 80084c8:	e00a      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084ca:	2305      	movs	r3, #5
 80084cc:	e008      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084ce:	2304      	movs	r3, #4
 80084d0:	e006      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084d2:	2303      	movs	r3, #3
 80084d4:	e004      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e002      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084da:	2301      	movs	r3, #1
 80084dc:	e000      	b.n	80084e0 <HAL_GPIO_Init+0x240>
 80084de:	2300      	movs	r3, #0
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	f002 0203 	and.w	r2, r2, #3
 80084e6:	0092      	lsls	r2, r2, #2
 80084e8:	4093      	lsls	r3, r2
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084f0:	4934      	ldr	r1, [pc, #208]	; (80085c4 <HAL_GPIO_Init+0x324>)
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	089b      	lsrs	r3, r3, #2
 80084f6:	3302      	adds	r3, #2
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084fe:	4b3c      	ldr	r3, [pc, #240]	; (80085f0 <HAL_GPIO_Init+0x350>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	43db      	mvns	r3, r3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	4013      	ands	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008522:	4a33      	ldr	r2, [pc, #204]	; (80085f0 <HAL_GPIO_Init+0x350>)
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008528:	4b31      	ldr	r3, [pc, #196]	; (80085f0 <HAL_GPIO_Init+0x350>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	43db      	mvns	r3, r3
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	4013      	ands	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800854c:	4a28      	ldr	r2, [pc, #160]	; (80085f0 <HAL_GPIO_Init+0x350>)
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008552:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <HAL_GPIO_Init+0x350>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	43db      	mvns	r3, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4013      	ands	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008576:	4a1e      	ldr	r2, [pc, #120]	; (80085f0 <HAL_GPIO_Init+0x350>)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800857c:	4b1c      	ldr	r3, [pc, #112]	; (80085f0 <HAL_GPIO_Init+0x350>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	43db      	mvns	r3, r3
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4013      	ands	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4313      	orrs	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <HAL_GPIO_Init+0x350>)
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3301      	adds	r3, #1
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b0f      	cmp	r3, #15
 80085b0:	f67f ae84 	bls.w	80082bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80085b4:	bf00      	nop
 80085b6:	3724      	adds	r7, #36	; 0x24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	40023800 	.word	0x40023800
 80085c4:	40013800 	.word	0x40013800
 80085c8:	40020000 	.word	0x40020000
 80085cc:	40020400 	.word	0x40020400
 80085d0:	40020800 	.word	0x40020800
 80085d4:	40020c00 	.word	0x40020c00
 80085d8:	40021000 	.word	0x40021000
 80085dc:	40021400 	.word	0x40021400
 80085e0:	40021800 	.word	0x40021800
 80085e4:	40021c00 	.word	0x40021c00
 80085e8:	40022000 	.word	0x40022000
 80085ec:	40022400 	.word	0x40022400
 80085f0:	40013c00 	.word	0x40013c00

080085f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	887b      	ldrh	r3, [r7, #2]
 8008606:	4013      	ands	r3, r2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
 8008610:	e001      	b.n	8008616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008616:	7bfb      	ldrb	r3, [r7, #15]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	807b      	strh	r3, [r7, #2]
 8008630:	4613      	mov	r3, r2
 8008632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008634:	787b      	ldrb	r3, [r7, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800863a:	887a      	ldrh	r2, [r7, #2]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008640:	e003      	b.n	800864a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008642:	887b      	ldrh	r3, [r7, #2]
 8008644:	041a      	lsls	r2, r3, #16
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	619a      	str	r2, [r3, #24]
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
	...

08008658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008664:	695a      	ldr	r2, [r3, #20]
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d006      	beq.n	800867c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800866e:	4a05      	ldr	r2, [pc, #20]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	4618      	mov	r0, r3
 8008678:	f7fb fbdc 	bl	8003e34 <HAL_GPIO_EXTI_Callback>
  }
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40013c00 	.word	0x40013c00

08008688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e11f      	b.n	80088da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fc fc3c 	bl	8004f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2224      	movs	r2, #36	; 0x24
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0201 	bic.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80086ec:	f001 f96e 	bl	80099cc <HAL_RCC_GetPCLK1Freq>
 80086f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4a7b      	ldr	r2, [pc, #492]	; (80088e4 <HAL_I2C_Init+0x25c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d807      	bhi.n	800870c <HAL_I2C_Init+0x84>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a7a      	ldr	r2, [pc, #488]	; (80088e8 <HAL_I2C_Init+0x260>)
 8008700:	4293      	cmp	r3, r2
 8008702:	bf94      	ite	ls
 8008704:	2301      	movls	r3, #1
 8008706:	2300      	movhi	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	e006      	b.n	800871a <HAL_I2C_Init+0x92>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a77      	ldr	r2, [pc, #476]	; (80088ec <HAL_I2C_Init+0x264>)
 8008710:	4293      	cmp	r3, r2
 8008712:	bf94      	ite	ls
 8008714:	2301      	movls	r3, #1
 8008716:	2300      	movhi	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e0db      	b.n	80088da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a72      	ldr	r2, [pc, #456]	; (80088f0 <HAL_I2C_Init+0x268>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	0c9b      	lsrs	r3, r3, #18
 800872c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a64      	ldr	r2, [pc, #400]	; (80088e4 <HAL_I2C_Init+0x25c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d802      	bhi.n	800875c <HAL_I2C_Init+0xd4>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	3301      	adds	r3, #1
 800875a:	e009      	b.n	8008770 <HAL_I2C_Init+0xe8>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	4a63      	ldr	r2, [pc, #396]	; (80088f4 <HAL_I2C_Init+0x26c>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	099b      	lsrs	r3, r3, #6
 800876e:	3301      	adds	r3, #1
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	430b      	orrs	r3, r1
 8008776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4956      	ldr	r1, [pc, #344]	; (80088e4 <HAL_I2C_Init+0x25c>)
 800878c:	428b      	cmp	r3, r1
 800878e:	d80d      	bhi.n	80087ac <HAL_I2C_Init+0x124>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1e59      	subs	r1, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	fbb1 f3f3 	udiv	r3, r1, r3
 800879e:	3301      	adds	r3, #1
 80087a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	bf38      	it	cc
 80087a8:	2304      	movcc	r3, #4
 80087aa:	e04f      	b.n	800884c <HAL_I2C_Init+0x1c4>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d111      	bne.n	80087d8 <HAL_I2C_Init+0x150>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	1e58      	subs	r0, r3, #1
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6859      	ldr	r1, [r3, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	440b      	add	r3, r1
 80087c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80087c6:	3301      	adds	r3, #1
 80087c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bf0c      	ite	eq
 80087d0:	2301      	moveq	r3, #1
 80087d2:	2300      	movne	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	e012      	b.n	80087fe <HAL_I2C_Init+0x176>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	1e58      	subs	r0, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6859      	ldr	r1, [r3, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	0099      	lsls	r1, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80087ee:	3301      	adds	r3, #1
 80087f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_I2C_Init+0x17e>
 8008802:	2301      	movs	r3, #1
 8008804:	e022      	b.n	800884c <HAL_I2C_Init+0x1c4>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10e      	bne.n	800882c <HAL_I2C_Init+0x1a4>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1e58      	subs	r0, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6859      	ldr	r1, [r3, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	440b      	add	r3, r1
 800881c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008820:	3301      	adds	r3, #1
 8008822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800882a:	e00f      	b.n	800884c <HAL_I2C_Init+0x1c4>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	1e58      	subs	r0, r3, #1
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6859      	ldr	r1, [r3, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	0099      	lsls	r1, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008842:	3301      	adds	r3, #1
 8008844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	6809      	ldr	r1, [r1, #0]
 8008850:	4313      	orrs	r3, r2
 8008852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	69da      	ldr	r2, [r3, #28]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800887a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6911      	ldr	r1, [r2, #16]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68d2      	ldr	r2, [r2, #12]
 8008886:	4311      	orrs	r1, r2
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	430b      	orrs	r3, r1
 800888e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695a      	ldr	r2, [r3, #20]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0201 	orr.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	000186a0 	.word	0x000186a0
 80088e8:	001e847f 	.word	0x001e847f
 80088ec:	003d08ff 	.word	0x003d08ff
 80088f0:	431bde83 	.word	0x431bde83
 80088f4:	10624dd3 	.word	0x10624dd3

080088f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	461a      	mov	r2, r3
 8008904:	460b      	mov	r3, r1
 8008906:	817b      	strh	r3, [r7, #10]
 8008908:	4613      	mov	r3, r2
 800890a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800890c:	f7fe fbe8 	bl	80070e0 <HAL_GetTick>
 8008910:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b20      	cmp	r3, #32
 800891c:	f040 80e0 	bne.w	8008ae0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2319      	movs	r3, #25
 8008926:	2201      	movs	r2, #1
 8008928:	4970      	ldr	r1, [pc, #448]	; (8008aec <HAL_I2C_Master_Transmit+0x1f4>)
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fc58 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008936:	2302      	movs	r3, #2
 8008938:	e0d3      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_I2C_Master_Transmit+0x50>
 8008944:	2302      	movs	r3, #2
 8008946:	e0cc      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x1ea>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b01      	cmp	r3, #1
 800895c:	d007      	beq.n	800896e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0201 	orr.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800897c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2221      	movs	r2, #33	; 0x21
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2210      	movs	r2, #16
 800898a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	893a      	ldrh	r2, [r7, #8]
 800899e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4a50      	ldr	r2, [pc, #320]	; (8008af0 <HAL_I2C_Master_Transmit+0x1f8>)
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089b0:	8979      	ldrh	r1, [r7, #10]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a3a      	ldr	r2, [r7, #32]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fac2 	bl	8008f40 <I2C_MasterRequestWrite>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e08d      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c6:	2300      	movs	r3, #0
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	613b      	str	r3, [r7, #16]
 80089da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089dc:	e066      	b.n	8008aac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	6a39      	ldr	r1, [r7, #32]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fcd2 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d107      	bne.n	8008a06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e06b      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d11b      	bne.n	8008a80 <HAL_I2C_Master_Transmit+0x188>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d017      	beq.n	8008a80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	781a      	ldrb	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	6a39      	ldr	r1, [r7, #32]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fcc2 	bl	800940e <I2C_WaitOnBTFFlagUntilTimeout>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00d      	beq.n	8008aac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d107      	bne.n	8008aa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e01a      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d194      	bne.n	80089de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e000      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008ae0:	2302      	movs	r3, #2
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	00100002 	.word	0x00100002
 8008af0:	ffff0000 	.word	0xffff0000

08008af4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08c      	sub	sp, #48	; 0x30
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	461a      	mov	r2, r3
 8008b00:	460b      	mov	r3, r1
 8008b02:	817b      	strh	r3, [r7, #10]
 8008b04:	4613      	mov	r3, r2
 8008b06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b08:	f7fe faea 	bl	80070e0 <HAL_GetTick>
 8008b0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	f040 820b 	bne.w	8008f32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2319      	movs	r3, #25
 8008b22:	2201      	movs	r2, #1
 8008b24:	497c      	ldr	r1, [pc, #496]	; (8008d18 <HAL_I2C_Master_Receive+0x224>)
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fb5a 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
 8008b34:	e1fe      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <HAL_I2C_Master_Receive+0x50>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e1f7      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d007      	beq.n	8008b6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f042 0201 	orr.w	r2, r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2222      	movs	r2, #34	; 0x22
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2210      	movs	r2, #16
 8008b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	893a      	ldrh	r2, [r7, #8]
 8008b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4a5c      	ldr	r2, [pc, #368]	; (8008d1c <HAL_I2C_Master_Receive+0x228>)
 8008baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bac:	8979      	ldrh	r1, [r7, #10]
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fa46 	bl	8009044 <I2C_MasterRequestRead>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e1b8      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d113      	bne.n	8008bf2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bca:	2300      	movs	r3, #0
 8008bcc:	623b      	str	r3, [r7, #32]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	623b      	str	r3, [r7, #32]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	623b      	str	r3, [r7, #32]
 8008bde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e18c      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d11b      	bne.n	8008c32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	61fb      	str	r3, [r7, #28]
 8008c1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e16c      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d11b      	bne.n	8008c72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	61bb      	str	r3, [r7, #24]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	e14c      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c98:	e138      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	f200 80f1 	bhi.w	8008e86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d123      	bne.n	8008cf4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fbed 	bl	8009490 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e139      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691a      	ldr	r2, [r3, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cf2:	e10b      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d14e      	bne.n	8008d9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	2200      	movs	r2, #0
 8008d04:	4906      	ldr	r1, [pc, #24]	; (8008d20 <HAL_I2C_Master_Receive+0x22c>)
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fa6a 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d008      	beq.n	8008d24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e10e      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
 8008d16:	bf00      	nop
 8008d18:	00100002 	.word	0x00100002
 8008d1c:	ffff0000 	.word	0xffff0000
 8008d20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	b2d2      	uxtb	r2, r2
 8008d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d98:	e0b8      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	2200      	movs	r2, #0
 8008da2:	4966      	ldr	r1, [pc, #408]	; (8008f3c <HAL_I2C_Master_Receive+0x448>)
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 fa1b 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e0bf      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	494f      	ldr	r1, [pc, #316]	; (8008f3c <HAL_I2C_Master_Receive+0x448>)
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 f9ed 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e091      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691a      	ldr	r2, [r3, #16]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	691a      	ldr	r2, [r3, #16]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e84:	e042      	b.n	8008f0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 fb00 	bl	8009490 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e04c      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d118      	bne.n	8008f0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f aec2 	bne.w	8008c9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e000      	b.n	8008f34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008f32:	2302      	movs	r3, #2
  }
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3728      	adds	r7, #40	; 0x28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	00010004 	.word	0x00010004

08008f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	607a      	str	r2, [r7, #4]
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d006      	beq.n	8008f6a <I2C_MasterRequestWrite+0x2a>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d003      	beq.n	8008f6a <I2C_MasterRequestWrite+0x2a>
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f68:	d108      	bne.n	8008f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e00b      	b.n	8008f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	2b12      	cmp	r3, #18
 8008f82:	d107      	bne.n	8008f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f91d 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00d      	beq.n	8008fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fba:	d103      	bne.n	8008fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e035      	b.n	8009034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fd0:	d108      	bne.n	8008fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fd2:	897b      	ldrh	r3, [r7, #10]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fe0:	611a      	str	r2, [r3, #16]
 8008fe2:	e01b      	b.n	800901c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008fe4:	897b      	ldrh	r3, [r7, #10]
 8008fe6:	11db      	asrs	r3, r3, #7
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 0306 	and.w	r3, r3, #6
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f063 030f 	orn	r3, r3, #15
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	490e      	ldr	r1, [pc, #56]	; (800903c <I2C_MasterRequestWrite+0xfc>)
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f943 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e010      	b.n	8009034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009012:	897b      	ldrh	r3, [r7, #10]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4907      	ldr	r1, [pc, #28]	; (8009040 <I2C_MasterRequestWrite+0x100>)
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f933 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	00010008 	.word	0x00010008
 8009040:	00010002 	.word	0x00010002

08009044 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	460b      	mov	r3, r1
 8009052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009068:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b08      	cmp	r3, #8
 800906e:	d006      	beq.n	800907e <I2C_MasterRequestRead+0x3a>
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d003      	beq.n	800907e <I2C_MasterRequestRead+0x3a>
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800907c:	d108      	bne.n	8009090 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e00b      	b.n	80090a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	2b11      	cmp	r3, #17
 8009096:	d107      	bne.n	80090a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f893 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00d      	beq.n	80090dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ce:	d103      	bne.n	80090d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e079      	b.n	80091d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090e4:	d108      	bne.n	80090f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090e6:	897b      	ldrh	r3, [r7, #10]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	f043 0301 	orr.w	r3, r3, #1
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	611a      	str	r2, [r3, #16]
 80090f6:	e05f      	b.n	80091b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090f8:	897b      	ldrh	r3, [r7, #10]
 80090fa:	11db      	asrs	r3, r3, #7
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	f003 0306 	and.w	r3, r3, #6
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f063 030f 	orn	r3, r3, #15
 8009108:	b2da      	uxtb	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4930      	ldr	r1, [pc, #192]	; (80091d8 <I2C_MasterRequestRead+0x194>)
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f8b9 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e054      	b.n	80091d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009126:	897b      	ldrh	r3, [r7, #10]
 8009128:	b2da      	uxtb	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4929      	ldr	r1, [pc, #164]	; (80091dc <I2C_MasterRequestRead+0x198>)
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 f8a9 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e044      	b.n	80091d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800916a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f831 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00d      	beq.n	80091a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009192:	d103      	bne.n	800919c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800919a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e017      	b.n	80091d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80091a0:	897b      	ldrh	r3, [r7, #10]
 80091a2:	11db      	asrs	r3, r3, #7
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	f003 0306 	and.w	r3, r3, #6
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f063 030e 	orn	r3, r3, #14
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4907      	ldr	r1, [pc, #28]	; (80091dc <I2C_MasterRequestRead+0x198>)
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 f865 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	00010008 	.word	0x00010008
 80091dc:	00010002 	.word	0x00010002

080091e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	4613      	mov	r3, r2
 80091ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091f0:	e025      	b.n	800923e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d021      	beq.n	800923e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091fa:	f7fd ff71 	bl	80070e0 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d302      	bcc.n	8009210 <I2C_WaitOnFlagUntilTimeout+0x30>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d116      	bne.n	800923e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f043 0220 	orr.w	r2, r3, #32
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e023      	b.n	8009286 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	0c1b      	lsrs	r3, r3, #16
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d10d      	bne.n	8009264 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	43da      	mvns	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf0c      	ite	eq
 800925a:	2301      	moveq	r3, #1
 800925c:	2300      	movne	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	e00c      	b.n	800927e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	43da      	mvns	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4013      	ands	r3, r2
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf0c      	ite	eq
 8009276:	2301      	moveq	r3, #1
 8009278:	2300      	movne	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	461a      	mov	r2, r3
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	429a      	cmp	r2, r3
 8009282:	d0b6      	beq.n	80091f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800929c:	e051      	b.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ac:	d123      	bne.n	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	f043 0204 	orr.w	r2, r3, #4
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e046      	b.n	8009384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fc:	d021      	beq.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092fe:	f7fd feef 	bl	80070e0 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d302      	bcc.n	8009314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d116      	bne.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932e:	f043 0220 	orr.w	r2, r3, #32
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e020      	b.n	8009384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10c      	bne.n	8009366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	43da      	mvns	r2, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	bf14      	ite	ne
 800935e:	2301      	movne	r3, #1
 8009360:	2300      	moveq	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	e00b      	b.n	800937e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	43da      	mvns	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4013      	ands	r3, r2
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d18d      	bne.n	800929e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009398:	e02d      	b.n	80093f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f8ce 	bl	800953c <I2C_IsAcknowledgeFailed>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e02d      	b.n	8009406 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d021      	beq.n	80093f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b2:	f7fd fe95 	bl	80070e0 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d116      	bne.n	80093f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e007      	b.n	8009406 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d1ca      	bne.n	800939a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800941a:	e02d      	b.n	8009478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f88d 	bl	800953c <I2C_IsAcknowledgeFailed>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e02d      	b.n	8009488 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d021      	beq.n	8009478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009434:	f7fd fe54 	bl	80070e0 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	429a      	cmp	r2, r3
 8009442:	d302      	bcc.n	800944a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d116      	bne.n	8009478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2220      	movs	r2, #32
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	f043 0220 	orr.w	r2, r3, #32
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e007      	b.n	8009488 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b04      	cmp	r3, #4
 8009484:	d1ca      	bne.n	800941c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800949c:	e042      	b.n	8009524 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	2b10      	cmp	r3, #16
 80094aa:	d119      	bne.n	80094e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0210 	mvn.w	r2, #16
 80094b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2220      	movs	r2, #32
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e029      	b.n	8009534 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094e0:	f7fd fdfe 	bl	80070e0 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d302      	bcc.n	80094f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d116      	bne.n	8009524 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	f043 0220 	orr.w	r2, r3, #32
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e007      	b.n	8009534 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952e:	2b40      	cmp	r3, #64	; 0x40
 8009530:	d1b5      	bne.n	800949e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800954e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009552:	d11b      	bne.n	800958c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800955c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	f043 0204 	orr.w	r2, r3, #4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80095a6:	2300      	movs	r3, #0
 80095a8:	603b      	str	r3, [r7, #0]
 80095aa:	4b20      	ldr	r3, [pc, #128]	; (800962c <HAL_PWREx_EnableOverDrive+0x90>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	4a1f      	ldr	r2, [pc, #124]	; (800962c <HAL_PWREx_EnableOverDrive+0x90>)
 80095b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b4:	6413      	str	r3, [r2, #64]	; 0x40
 80095b6:	4b1d      	ldr	r3, [pc, #116]	; (800962c <HAL_PWREx_EnableOverDrive+0x90>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <HAL_PWREx_EnableOverDrive+0x94>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095c8:	f7fd fd8a 	bl	80070e0 <HAL_GetTick>
 80095cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095ce:	e009      	b.n	80095e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80095d0:	f7fd fd86 	bl	80070e0 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095de:	d901      	bls.n	80095e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e01f      	b.n	8009624 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095e4:	4b13      	ldr	r3, [pc, #76]	; (8009634 <HAL_PWREx_EnableOverDrive+0x98>)
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f0:	d1ee      	bne.n	80095d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80095f2:	4b11      	ldr	r3, [pc, #68]	; (8009638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095f4:	2201      	movs	r2, #1
 80095f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095f8:	f7fd fd72 	bl	80070e0 <HAL_GetTick>
 80095fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095fe:	e009      	b.n	8009614 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009600:	f7fd fd6e 	bl	80070e0 <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800960e:	d901      	bls.n	8009614 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e007      	b.n	8009624 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009614:	4b07      	ldr	r3, [pc, #28]	; (8009634 <HAL_PWREx_EnableOverDrive+0x98>)
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800961c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009620:	d1ee      	bne.n	8009600 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	40023800 	.word	0x40023800
 8009630:	420e0040 	.word	0x420e0040
 8009634:	40007000 	.word	0x40007000
 8009638:	420e0044 	.word	0x420e0044

0800963c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e0cc      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009650:	4b68      	ldr	r3, [pc, #416]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d90c      	bls.n	8009678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800965e:	4b65      	ldr	r3, [pc, #404]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009666:	4b63      	ldr	r3, [pc, #396]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 030f 	and.w	r3, r3, #15
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d001      	beq.n	8009678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0b8      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d020      	beq.n	80096c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009690:	4b59      	ldr	r3, [pc, #356]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	4a58      	ldr	r2, [pc, #352]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800969a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096a8:	4b53      	ldr	r3, [pc, #332]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a52      	ldr	r2, [pc, #328]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096b4:	4b50      	ldr	r3, [pc, #320]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	494d      	ldr	r1, [pc, #308]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d044      	beq.n	800975c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d107      	bne.n	80096ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096da:	4b47      	ldr	r3, [pc, #284]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d119      	bne.n	800971a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e07f      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d003      	beq.n	80096fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d107      	bne.n	800970a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096fa:	4b3f      	ldr	r3, [pc, #252]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e06f      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800970a:	4b3b      	ldr	r3, [pc, #236]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e067      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800971a:	4b37      	ldr	r3, [pc, #220]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f023 0203 	bic.w	r2, r3, #3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4934      	ldr	r1, [pc, #208]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009728:	4313      	orrs	r3, r2
 800972a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800972c:	f7fd fcd8 	bl	80070e0 <HAL_GetTick>
 8009730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009732:	e00a      	b.n	800974a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009734:	f7fd fcd4 	bl	80070e0 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009742:	4293      	cmp	r3, r2
 8009744:	d901      	bls.n	800974a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e04f      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974a:	4b2b      	ldr	r3, [pc, #172]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 020c 	and.w	r2, r3, #12
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	429a      	cmp	r2, r3
 800975a:	d1eb      	bne.n	8009734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800975c:	4b25      	ldr	r3, [pc, #148]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 030f 	and.w	r3, r3, #15
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d20c      	bcs.n	8009784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800976a:	4b22      	ldr	r3, [pc, #136]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009772:	4b20      	ldr	r3, [pc, #128]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d001      	beq.n	8009784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e032      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009790:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	4916      	ldr	r1, [pc, #88]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	490e      	ldr	r1, [pc, #56]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097c2:	f000 f821 	bl	8009808 <HAL_RCC_GetSysClockFreq>
 80097c6:	4601      	mov	r1, r0
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	091b      	lsrs	r3, r3, #4
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	4a0a      	ldr	r2, [pc, #40]	; (80097fc <HAL_RCC_ClockConfig+0x1c0>)
 80097d4:	5cd3      	ldrb	r3, [r2, r3]
 80097d6:	fa21 f303 	lsr.w	r3, r1, r3
 80097da:	4a09      	ldr	r2, [pc, #36]	; (8009800 <HAL_RCC_ClockConfig+0x1c4>)
 80097dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <HAL_RCC_ClockConfig+0x1c8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd fc38 	bl	8007058 <HAL_InitTick>

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40023c00 	.word	0x40023c00
 80097f8:	40023800 	.word	0x40023800
 80097fc:	08017f90 	.word	0x08017f90
 8009800:	20000000 	.word	0x20000000
 8009804:	20000004 	.word	0x20000004

08009808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	2300      	movs	r3, #0
 8009818:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800981e:	4b63      	ldr	r3, [pc, #396]	; (80099ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 030c 	and.w	r3, r3, #12
 8009826:	2b04      	cmp	r3, #4
 8009828:	d007      	beq.n	800983a <HAL_RCC_GetSysClockFreq+0x32>
 800982a:	2b08      	cmp	r3, #8
 800982c:	d008      	beq.n	8009840 <HAL_RCC_GetSysClockFreq+0x38>
 800982e:	2b00      	cmp	r3, #0
 8009830:	f040 80b4 	bne.w	800999c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009834:	4b5e      	ldr	r3, [pc, #376]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009836:	60bb      	str	r3, [r7, #8]
       break;
 8009838:	e0b3      	b.n	80099a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800983a:	4b5d      	ldr	r3, [pc, #372]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800983c:	60bb      	str	r3, [r7, #8]
      break;
 800983e:	e0b0      	b.n	80099a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009840:	4b5a      	ldr	r3, [pc, #360]	; (80099ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009848:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800984a:	4b58      	ldr	r3, [pc, #352]	; (80099ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d04a      	beq.n	80098ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009856:	4b55      	ldr	r3, [pc, #340]	; (80099ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	099b      	lsrs	r3, r3, #6
 800985c:	f04f 0400 	mov.w	r4, #0
 8009860:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009864:	f04f 0200 	mov.w	r2, #0
 8009868:	ea03 0501 	and.w	r5, r3, r1
 800986c:	ea04 0602 	and.w	r6, r4, r2
 8009870:	4629      	mov	r1, r5
 8009872:	4632      	mov	r2, r6
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	f04f 0400 	mov.w	r4, #0
 800987c:	0154      	lsls	r4, r2, #5
 800987e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009882:	014b      	lsls	r3, r1, #5
 8009884:	4619      	mov	r1, r3
 8009886:	4622      	mov	r2, r4
 8009888:	1b49      	subs	r1, r1, r5
 800988a:	eb62 0206 	sbc.w	r2, r2, r6
 800988e:	f04f 0300 	mov.w	r3, #0
 8009892:	f04f 0400 	mov.w	r4, #0
 8009896:	0194      	lsls	r4, r2, #6
 8009898:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800989c:	018b      	lsls	r3, r1, #6
 800989e:	1a5b      	subs	r3, r3, r1
 80098a0:	eb64 0402 	sbc.w	r4, r4, r2
 80098a4:	f04f 0100 	mov.w	r1, #0
 80098a8:	f04f 0200 	mov.w	r2, #0
 80098ac:	00e2      	lsls	r2, r4, #3
 80098ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80098b2:	00d9      	lsls	r1, r3, #3
 80098b4:	460b      	mov	r3, r1
 80098b6:	4614      	mov	r4, r2
 80098b8:	195b      	adds	r3, r3, r5
 80098ba:	eb44 0406 	adc.w	r4, r4, r6
 80098be:	f04f 0100 	mov.w	r1, #0
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	02a2      	lsls	r2, r4, #10
 80098c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80098cc:	0299      	lsls	r1, r3, #10
 80098ce:	460b      	mov	r3, r1
 80098d0:	4614      	mov	r4, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	4621      	mov	r1, r4
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f04f 0400 	mov.w	r4, #0
 80098dc:	461a      	mov	r2, r3
 80098de:	4623      	mov	r3, r4
 80098e0:	f7f7 f9ea 	bl	8000cb8 <__aeabi_uldivmod>
 80098e4:	4603      	mov	r3, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e049      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098ec:	4b2f      	ldr	r3, [pc, #188]	; (80099ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	099b      	lsrs	r3, r3, #6
 80098f2:	f04f 0400 	mov.w	r4, #0
 80098f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80098fa:	f04f 0200 	mov.w	r2, #0
 80098fe:	ea03 0501 	and.w	r5, r3, r1
 8009902:	ea04 0602 	and.w	r6, r4, r2
 8009906:	4629      	mov	r1, r5
 8009908:	4632      	mov	r2, r6
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	f04f 0400 	mov.w	r4, #0
 8009912:	0154      	lsls	r4, r2, #5
 8009914:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009918:	014b      	lsls	r3, r1, #5
 800991a:	4619      	mov	r1, r3
 800991c:	4622      	mov	r2, r4
 800991e:	1b49      	subs	r1, r1, r5
 8009920:	eb62 0206 	sbc.w	r2, r2, r6
 8009924:	f04f 0300 	mov.w	r3, #0
 8009928:	f04f 0400 	mov.w	r4, #0
 800992c:	0194      	lsls	r4, r2, #6
 800992e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009932:	018b      	lsls	r3, r1, #6
 8009934:	1a5b      	subs	r3, r3, r1
 8009936:	eb64 0402 	sbc.w	r4, r4, r2
 800993a:	f04f 0100 	mov.w	r1, #0
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	00e2      	lsls	r2, r4, #3
 8009944:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009948:	00d9      	lsls	r1, r3, #3
 800994a:	460b      	mov	r3, r1
 800994c:	4614      	mov	r4, r2
 800994e:	195b      	adds	r3, r3, r5
 8009950:	eb44 0406 	adc.w	r4, r4, r6
 8009954:	f04f 0100 	mov.w	r1, #0
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	02a2      	lsls	r2, r4, #10
 800995e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009962:	0299      	lsls	r1, r3, #10
 8009964:	460b      	mov	r3, r1
 8009966:	4614      	mov	r4, r2
 8009968:	4618      	mov	r0, r3
 800996a:	4621      	mov	r1, r4
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f04f 0400 	mov.w	r4, #0
 8009972:	461a      	mov	r2, r3
 8009974:	4623      	mov	r3, r4
 8009976:	f7f7 f99f 	bl	8000cb8 <__aeabi_uldivmod>
 800997a:	4603      	mov	r3, r0
 800997c:	460c      	mov	r4, r1
 800997e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	0c1b      	lsrs	r3, r3, #16
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	3301      	adds	r3, #1
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	60bb      	str	r3, [r7, #8]
      break;
 800999a:	e002      	b.n	80099a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800999c:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800999e:	60bb      	str	r3, [r7, #8]
      break;
 80099a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099a2:	68bb      	ldr	r3, [r7, #8]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ac:	40023800 	.word	0x40023800
 80099b0:	00f42400 	.word	0x00f42400

080099b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099b8:	4b03      	ldr	r3, [pc, #12]	; (80099c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80099ba:	681b      	ldr	r3, [r3, #0]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000000 	.word	0x20000000

080099cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80099d0:	f7ff fff0 	bl	80099b4 <HAL_RCC_GetHCLKFreq>
 80099d4:	4601      	mov	r1, r0
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	0a9b      	lsrs	r3, r3, #10
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099e2:	5cd3      	ldrb	r3, [r2, r3]
 80099e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	40023800 	.word	0x40023800
 80099f0:	08017fa0 	.word	0x08017fa0

080099f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80099f8:	f7ff ffdc 	bl	80099b4 <HAL_RCC_GetHCLKFreq>
 80099fc:	4601      	mov	r1, r0
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	0b5b      	lsrs	r3, r3, #13
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	4a03      	ldr	r2, [pc, #12]	; (8009a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a0a:	5cd3      	ldrb	r3, [r2, r3]
 8009a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40023800 	.word	0x40023800
 8009a18:	08017fa0 	.word	0x08017fa0

08009a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00a      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a44:	4b66      	ldr	r3, [pc, #408]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a4a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a52:	4963      	ldr	r1, [pc, #396]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009a66:	4b5e      	ldr	r3, [pc, #376]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a74:	495a      	ldr	r1, [pc, #360]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10b      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d075      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009aa0:	4b50      	ldr	r3, [pc, #320]	; (8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009aa6:	f7fd fb1b 	bl	80070e0 <HAL_GetTick>
 8009aaa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009aac:	e008      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009aae:	f7fd fb17 	bl	80070e0 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e1dc      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ac0:	4b47      	ldr	r3, [pc, #284]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f0      	bne.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d009      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	019a      	lsls	r2, r3, #6
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	071b      	lsls	r3, r3, #28
 8009ae4:	493e      	ldr	r1, [pc, #248]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01f      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009af8:	4b39      	ldr	r3, [pc, #228]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009afe:	0f1b      	lsrs	r3, r3, #28
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	019a      	lsls	r2, r3, #6
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	061b      	lsls	r3, r3, #24
 8009b12:	431a      	orrs	r2, r3
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	071b      	lsls	r3, r3, #28
 8009b18:	4931      	ldr	r1, [pc, #196]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009b20:	4b2f      	ldr	r3, [pc, #188]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b26:	f023 021f 	bic.w	r2, r3, #31
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	492b      	ldr	r1, [pc, #172]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00d      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	019a      	lsls	r2, r3, #6
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	061b      	lsls	r3, r3, #24
 8009b50:	431a      	orrs	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	071b      	lsls	r3, r3, #28
 8009b58:	4921      	ldr	r1, [pc, #132]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b60:	4b20      	ldr	r3, [pc, #128]	; (8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009b62:	2201      	movs	r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b66:	f7fd fabb 	bl	80070e0 <HAL_GetTick>
 8009b6a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b6c:	e008      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b6e:	f7fd fab7 	bl	80070e0 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d901      	bls.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e17c      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b80:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0f0      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d112      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10c      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80ce 	beq.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bba:	f040 80c8 	bne.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009bbe:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009bc4:	f7fd fa8c 	bl	80070e0 <HAL_GetTick>
 8009bc8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009bca:	e00f      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009bcc:	f7fd fa88 	bl	80070e0 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d908      	bls.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e14d      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009bde:	bf00      	nop
 8009be0:	40023800 	.word	0x40023800
 8009be4:	42470068 	.word	0x42470068
 8009be8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009bec:	4ba5      	ldr	r3, [pc, #660]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bf8:	d0e8      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d02e      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009c06:	4b9f      	ldr	r3, [pc, #636]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0c:	0c1b      	lsrs	r3, r3, #16
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	3301      	adds	r3, #1
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c18:	4b9a      	ldr	r3, [pc, #616]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1e:	0f1b      	lsrs	r3, r3, #28
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	019a      	lsls	r2, r3, #6
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	3b01      	subs	r3, #1
 8009c32:	041b      	lsls	r3, r3, #16
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	061b      	lsls	r3, r3, #24
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	071b      	lsls	r3, r3, #28
 8009c42:	4990      	ldr	r1, [pc, #576]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c4a:	4b8e      	ldr	r3, [pc, #568]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	021b      	lsls	r3, r3, #8
 8009c5c:	4989      	ldr	r1, [pc, #548]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0308 	and.w	r3, r3, #8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d02c      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009c70:	4b84      	ldr	r3, [pc, #528]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c82:	4b80      	ldr	r3, [pc, #512]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c88:	0e1b      	lsrs	r3, r3, #24
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	019a      	lsls	r2, r3, #6
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	061b      	lsls	r3, r3, #24
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	071b      	lsls	r3, r3, #28
 8009cac:	4975      	ldr	r1, [pc, #468]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009cb4:	4b73      	ldr	r3, [pc, #460]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	4970      	ldr	r1, [pc, #448]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d024      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cde:	d11f      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ce0:	4b68      	ldr	r3, [pc, #416]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce6:	0e1b      	lsrs	r3, r3, #24
 8009ce8:	f003 030f 	and.w	r3, r3, #15
 8009cec:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009cee:	4b65      	ldr	r3, [pc, #404]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf4:	0f1b      	lsrs	r3, r3, #28
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	019a      	lsls	r2, r3, #6
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	041b      	lsls	r3, r3, #16
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	061b      	lsls	r3, r3, #24
 8009d12:	431a      	orrs	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	071b      	lsls	r3, r3, #28
 8009d18:	495a      	ldr	r1, [pc, #360]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009d20:	4b59      	ldr	r3, [pc, #356]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d26:	f7fd f9db 	bl	80070e0 <HAL_GetTick>
 8009d2a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d2c:	e008      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009d2e:	f7fd f9d7 	bl	80070e0 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e09c      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d40:	4b50      	ldr	r3, [pc, #320]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d4c:	d1ef      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8083 	beq.w	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60bb      	str	r3, [r7, #8]
 8009d60:	4b48      	ldr	r3, [pc, #288]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d64:	4a47      	ldr	r2, [pc, #284]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8009d6c:	4b45      	ldr	r3, [pc, #276]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d74:	60bb      	str	r3, [r7, #8]
 8009d76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009d78:	4b44      	ldr	r3, [pc, #272]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a43      	ldr	r2, [pc, #268]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d82:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d84:	f7fd f9ac 	bl	80070e0 <HAL_GetTick>
 8009d88:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d8a:	e008      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d8c:	f7fd f9a8 	bl	80070e0 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e06d      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d9e:	4b3b      	ldr	r3, [pc, #236]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0f0      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009daa:	4b36      	ldr	r3, [pc, #216]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009db2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d02f      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d028      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dc8:	4b2e      	ldr	r3, [pc, #184]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009dd2:	4b2f      	ldr	r3, [pc, #188]	; (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009dd8:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009dde:	4a29      	ldr	r2, [pc, #164]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009de4:	4b27      	ldr	r3, [pc, #156]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d114      	bne.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009df0:	f7fd f976 	bl	80070e0 <HAL_GetTick>
 8009df4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009df6:	e00a      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009df8:	f7fd f972 	bl	80070e0 <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e035      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0ee      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e26:	d10d      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009e28:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e3c:	4911      	ldr	r1, [pc, #68]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	608b      	str	r3, [r1, #8]
 8009e42:	e005      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009e44:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	4a0e      	ldr	r2, [pc, #56]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009e4e:	6093      	str	r3, [r2, #8]
 8009e50:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e5c:	4909      	ldr	r1, [pc, #36]	; (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009e74:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009e76:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3720      	adds	r7, #32
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40023800 	.word	0x40023800
 8009e88:	42470070 	.word	0x42470070
 8009e8c:	40007000 	.word	0x40007000
 8009e90:	42470e40 	.word	0x42470e40
 8009e94:	424711e0 	.word	0x424711e0

08009e98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d075      	beq.n	8009f9c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009eb0:	4ba2      	ldr	r3, [pc, #648]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 030c 	and.w	r3, r3, #12
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d00c      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ebc:	4b9f      	ldr	r3, [pc, #636]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d112      	bne.n	8009eee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ec8:	4b9c      	ldr	r3, [pc, #624]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ed4:	d10b      	bne.n	8009eee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed6:	4b99      	ldr	r3, [pc, #612]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d05b      	beq.n	8009f9a <HAL_RCC_OscConfig+0x102>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d157      	bne.n	8009f9a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e20b      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef6:	d106      	bne.n	8009f06 <HAL_RCC_OscConfig+0x6e>
 8009ef8:	4b90      	ldr	r3, [pc, #576]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a8f      	ldr	r2, [pc, #572]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	e01d      	b.n	8009f42 <HAL_RCC_OscConfig+0xaa>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f0e:	d10c      	bne.n	8009f2a <HAL_RCC_OscConfig+0x92>
 8009f10:	4b8a      	ldr	r3, [pc, #552]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a89      	ldr	r2, [pc, #548]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	4b87      	ldr	r3, [pc, #540]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a86      	ldr	r2, [pc, #536]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	e00b      	b.n	8009f42 <HAL_RCC_OscConfig+0xaa>
 8009f2a:	4b84      	ldr	r3, [pc, #528]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a83      	ldr	r2, [pc, #524]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	4b81      	ldr	r3, [pc, #516]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a80      	ldr	r2, [pc, #512]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d013      	beq.n	8009f72 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4a:	f7fd f8c9 	bl	80070e0 <HAL_GetTick>
 8009f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f52:	f7fd f8c5 	bl	80070e0 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b64      	cmp	r3, #100	; 0x64
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e1d0      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f64:	4b75      	ldr	r3, [pc, #468]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0f0      	beq.n	8009f52 <HAL_RCC_OscConfig+0xba>
 8009f70:	e014      	b.n	8009f9c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f72:	f7fd f8b5 	bl	80070e0 <HAL_GetTick>
 8009f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f78:	e008      	b.n	8009f8c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f7a:	f7fd f8b1 	bl	80070e0 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b64      	cmp	r3, #100	; 0x64
 8009f86:	d901      	bls.n	8009f8c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e1bc      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f8c:	4b6b      	ldr	r3, [pc, #428]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f0      	bne.n	8009f7a <HAL_RCC_OscConfig+0xe2>
 8009f98:	e000      	b.n	8009f9c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d063      	beq.n	800a070 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009fa8:	4b64      	ldr	r3, [pc, #400]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f003 030c 	and.w	r3, r3, #12
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fb4:	4b61      	ldr	r3, [pc, #388]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d11c      	bne.n	8009ffa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fc0:	4b5e      	ldr	r3, [pc, #376]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d116      	bne.n	8009ffa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fcc:	4b5b      	ldr	r3, [pc, #364]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0302 	and.w	r3, r3, #2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x14c>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d001      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e190      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fe4:	4b55      	ldr	r3, [pc, #340]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	4952      	ldr	r1, [pc, #328]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ff8:	e03a      	b.n	800a070 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d020      	beq.n	800a044 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a002:	4b4f      	ldr	r3, [pc, #316]	; (800a140 <HAL_RCC_OscConfig+0x2a8>)
 800a004:	2201      	movs	r2, #1
 800a006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a008:	f7fd f86a 	bl	80070e0 <HAL_GetTick>
 800a00c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a00e:	e008      	b.n	800a022 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a010:	f7fd f866 	bl	80070e0 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e171      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a022:	4b46      	ldr	r3, [pc, #280]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0f0      	beq.n	800a010 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a02e:	4b43      	ldr	r3, [pc, #268]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	493f      	ldr	r1, [pc, #252]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	600b      	str	r3, [r1, #0]
 800a042:	e015      	b.n	800a070 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a044:	4b3e      	ldr	r3, [pc, #248]	; (800a140 <HAL_RCC_OscConfig+0x2a8>)
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a04a:	f7fd f849 	bl	80070e0 <HAL_GetTick>
 800a04e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a050:	e008      	b.n	800a064 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a052:	f7fd f845 	bl	80070e0 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d901      	bls.n	800a064 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e150      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a064:	4b35      	ldr	r3, [pc, #212]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f0      	bne.n	800a052 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d030      	beq.n	800a0de <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d016      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a084:	4b2f      	ldr	r3, [pc, #188]	; (800a144 <HAL_RCC_OscConfig+0x2ac>)
 800a086:	2201      	movs	r2, #1
 800a088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a08a:	f7fd f829 	bl	80070e0 <HAL_GetTick>
 800a08e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a090:	e008      	b.n	800a0a4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a092:	f7fd f825 	bl	80070e0 <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d901      	bls.n	800a0a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e130      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0a4:	4b25      	ldr	r3, [pc, #148]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0f0      	beq.n	800a092 <HAL_RCC_OscConfig+0x1fa>
 800a0b0:	e015      	b.n	800a0de <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0b2:	4b24      	ldr	r3, [pc, #144]	; (800a144 <HAL_RCC_OscConfig+0x2ac>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0b8:	f7fd f812 	bl	80070e0 <HAL_GetTick>
 800a0bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0c0:	f7fd f80e 	bl	80070e0 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e119      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0d2:	4b1a      	ldr	r3, [pc, #104]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d6:	f003 0302 	and.w	r3, r3, #2
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1f0      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0304 	and.w	r3, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 809f 	beq.w	800a22a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0f0:	4b12      	ldr	r3, [pc, #72]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10f      	bne.n	800a11c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]
 800a100:	4b0e      	ldr	r3, [pc, #56]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a10a:	6413      	str	r3, [r2, #64]	; 0x40
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <HAL_RCC_OscConfig+0x2a4>)
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <HAL_RCC_OscConfig+0x2b0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a124:	2b00      	cmp	r3, #0
 800a126:	d120      	bne.n	800a16a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a128:	4b07      	ldr	r3, [pc, #28]	; (800a148 <HAL_RCC_OscConfig+0x2b0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a06      	ldr	r2, [pc, #24]	; (800a148 <HAL_RCC_OscConfig+0x2b0>)
 800a12e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a132:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a134:	f7fc ffd4 	bl	80070e0 <HAL_GetTick>
 800a138:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a13a:	e010      	b.n	800a15e <HAL_RCC_OscConfig+0x2c6>
 800a13c:	40023800 	.word	0x40023800
 800a140:	42470000 	.word	0x42470000
 800a144:	42470e80 	.word	0x42470e80
 800a148:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a14c:	f7fc ffc8 	bl	80070e0 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e0d3      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a15e:	4b6c      	ldr	r3, [pc, #432]	; (800a310 <HAL_RCC_OscConfig+0x478>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0f0      	beq.n	800a14c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d106      	bne.n	800a180 <HAL_RCC_OscConfig+0x2e8>
 800a172:	4b68      	ldr	r3, [pc, #416]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a176:	4a67      	ldr	r2, [pc, #412]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a178:	f043 0301 	orr.w	r3, r3, #1
 800a17c:	6713      	str	r3, [r2, #112]	; 0x70
 800a17e:	e01c      	b.n	800a1ba <HAL_RCC_OscConfig+0x322>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	2b05      	cmp	r3, #5
 800a186:	d10c      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x30a>
 800a188:	4b62      	ldr	r3, [pc, #392]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	4a61      	ldr	r2, [pc, #388]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a18e:	f043 0304 	orr.w	r3, r3, #4
 800a192:	6713      	str	r3, [r2, #112]	; 0x70
 800a194:	4b5f      	ldr	r3, [pc, #380]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a198:	4a5e      	ldr	r2, [pc, #376]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	6713      	str	r3, [r2, #112]	; 0x70
 800a1a0:	e00b      	b.n	800a1ba <HAL_RCC_OscConfig+0x322>
 800a1a2:	4b5c      	ldr	r3, [pc, #368]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a6:	4a5b      	ldr	r2, [pc, #364]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ae:	4b59      	ldr	r3, [pc, #356]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	4a58      	ldr	r2, [pc, #352]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a1b4:	f023 0304 	bic.w	r3, r3, #4
 800a1b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d015      	beq.n	800a1ee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1c2:	f7fc ff8d 	bl	80070e0 <HAL_GetTick>
 800a1c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1c8:	e00a      	b.n	800a1e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1ca:	f7fc ff89 	bl	80070e0 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e092      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1e0:	4b4c      	ldr	r3, [pc, #304]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0ee      	beq.n	800a1ca <HAL_RCC_OscConfig+0x332>
 800a1ec:	e014      	b.n	800a218 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ee:	f7fc ff77 	bl	80070e0 <HAL_GetTick>
 800a1f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1f4:	e00a      	b.n	800a20c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1f6:	f7fc ff73 	bl	80070e0 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	f241 3288 	movw	r2, #5000	; 0x1388
 800a204:	4293      	cmp	r3, r2
 800a206:	d901      	bls.n	800a20c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e07c      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a20c:	4b41      	ldr	r3, [pc, #260]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1ee      	bne.n	800a1f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d105      	bne.n	800a22a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a21e:	4b3d      	ldr	r3, [pc, #244]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	4a3c      	ldr	r2, [pc, #240]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d068      	beq.n	800a304 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a232:	4b38      	ldr	r3, [pc, #224]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f003 030c 	and.w	r3, r3, #12
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d060      	beq.n	800a300 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	2b02      	cmp	r3, #2
 800a244:	d145      	bne.n	800a2d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a246:	4b34      	ldr	r3, [pc, #208]	; (800a318 <HAL_RCC_OscConfig+0x480>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24c:	f7fc ff48 	bl	80070e0 <HAL_GetTick>
 800a250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a254:	f7fc ff44 	bl	80070e0 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e04f      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a266:	4b2b      	ldr	r3, [pc, #172]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f0      	bne.n	800a254 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69da      	ldr	r2, [r3, #28]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	019b      	lsls	r3, r3, #6
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	3b01      	subs	r3, #1
 800a28c:	041b      	lsls	r3, r3, #16
 800a28e:	431a      	orrs	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	061b      	lsls	r3, r3, #24
 800a296:	431a      	orrs	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29c:	071b      	lsls	r3, r3, #28
 800a29e:	491d      	ldr	r1, [pc, #116]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2a4:	4b1c      	ldr	r3, [pc, #112]	; (800a318 <HAL_RCC_OscConfig+0x480>)
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2aa:	f7fc ff19 	bl	80070e0 <HAL_GetTick>
 800a2ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2b0:	e008      	b.n	800a2c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2b2:	f7fc ff15 	bl	80070e0 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d901      	bls.n	800a2c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e020      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2c4:	4b13      	ldr	r3, [pc, #76]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0f0      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x41a>
 800a2d0:	e018      	b.n	800a304 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2d2:	4b11      	ldr	r3, [pc, #68]	; (800a318 <HAL_RCC_OscConfig+0x480>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d8:	f7fc ff02 	bl	80070e0 <HAL_GetTick>
 800a2dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2de:	e008      	b.n	800a2f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2e0:	f7fc fefe 	bl	80070e0 <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e009      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <HAL_RCC_OscConfig+0x47c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f0      	bne.n	800a2e0 <HAL_RCC_OscConfig+0x448>
 800a2fe:	e001      	b.n	800a304 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e000      	b.n	800a306 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	40007000 	.word	0x40007000
 800a314:	40023800 	.word	0x40023800
 800a318:	42470060 	.word	0x42470060

0800a31c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e022      	b.n	800a374 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d105      	bne.n	800a346 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7fa fe6f 	bl	8005024 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2203      	movs	r2, #3
 800a34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f814 	bl	800a37c <HAL_SD_InitCard>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e00a      	b.n	800a374 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a37c:	b5b0      	push	{r4, r5, r7, lr}
 800a37e:	b08e      	sub	sp, #56	; 0x38
 800a380:	af04      	add	r7, sp, #16
 800a382:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a384:	2300      	movs	r3, #0
 800a386:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a38c:	2300      	movs	r3, #0
 800a38e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a390:	2300      	movs	r3, #0
 800a392:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a394:	2300      	movs	r3, #0
 800a396:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a398:	2376      	movs	r3, #118	; 0x76
 800a39a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681d      	ldr	r5, [r3, #0]
 800a3a0:	466c      	mov	r4, sp
 800a3a2:	f107 0314 	add.w	r3, r7, #20
 800a3a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a3ae:	f107 0308 	add.w	r3, r7, #8
 800a3b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f003 fa87 	bl	800d8c8 <SDIO_Init>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e031      	b.n	800a430 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <HAL_SD_InitCard+0xbc>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f003 fabf 	bl	800d95a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a3dc:	4b16      	ldr	r3, [pc, #88]	; (800a438 <HAL_SD_InitCard+0xbc>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 ffc6 	bl	800b374 <SD_PowerON>
 800a3e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	431a      	orrs	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e013      	b.n	800a430 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fee5 	bl	800b1d8 <SD_InitCard>
 800a40e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e000      	b.n	800a430 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3728      	adds	r7, #40	; 0x28
 800a434:	46bd      	mov	sp, r7
 800a436:	bdb0      	pop	{r4, r5, r7, pc}
 800a438:	422580a0 	.word	0x422580a0

0800a43c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08c      	sub	sp, #48	; 0x30
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d107      	bne.n	800a464 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e0c7      	b.n	800a5f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	f040 80c0 	bne.w	800a5f2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	441a      	add	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a482:	429a      	cmp	r2, r3
 800a484:	d907      	bls.n	800a496 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e0ae      	b.n	800a5f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2203      	movs	r2, #3
 800a49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a4b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ba:	4a50      	ldr	r2, [pc, #320]	; (800a5fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a4bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	4a4f      	ldr	r2, [pc, #316]	; (800a600 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a4c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3380      	adds	r3, #128	; 0x80
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	025b      	lsls	r3, r3, #9
 800a4e0:	089b      	lsrs	r3, r3, #2
 800a4e2:	f7fd fbef 	bl	8007cc4 <HAL_DMA_Start_IT>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d017      	beq.n	800a51c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a4fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a40      	ldr	r2, [pc, #256]	; (800a604 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a508:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e06b      	b.n	800a5f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a51c:	4b3a      	ldr	r3, [pc, #232]	; (800a608 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a51e:	2201      	movs	r2, #1
 800a520:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a526:	2b01      	cmp	r3, #1
 800a528:	d002      	beq.n	800a530 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	025b      	lsls	r3, r3, #9
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a538:	4618      	mov	r0, r3
 800a53a:	f003 faa1 	bl	800da80 <SDMMC_CmdBlockLength>
 800a53e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00f      	beq.n	800a566 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a2e      	ldr	r2, [pc, #184]	; (800a604 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a54c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	431a      	orrs	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e046      	b.n	800a5f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a566:	f04f 33ff 	mov.w	r3, #4294967295
 800a56a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	025b      	lsls	r3, r3, #9
 800a570:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a572:	2390      	movs	r3, #144	; 0x90
 800a574:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a576:	2302      	movs	r3, #2
 800a578:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a57e:	2301      	movs	r3, #1
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f107 0210 	add.w	r2, r7, #16
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f003 fa4b 	bl	800da28 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d90a      	bls.n	800a5ae <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2282      	movs	r2, #130	; 0x82
 800a59c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f003 faaf 	bl	800db08 <SDMMC_CmdReadMultiBlock>
 800a5aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a5ac:	e009      	b.n	800a5c2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2281      	movs	r2, #129	; 0x81
 800a5b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f003 fa82 	bl	800dac4 <SDMMC_CmdReadSingleBlock>
 800a5c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d012      	beq.n	800a5ee <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a0d      	ldr	r2, [pc, #52]	; (800a604 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e002      	b.n	800a5f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e000      	b.n	800a5f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a5f2:	2302      	movs	r3, #2
  }
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3730      	adds	r7, #48	; 0x30
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	0800afe7 	.word	0x0800afe7
 800a600:	0800b059 	.word	0x0800b059
 800a604:	004005ff 	.word	0x004005ff
 800a608:	4225858c 	.word	0x4225858c

0800a60c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	; 0x30
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d107      	bne.n	800a634 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e0ca      	b.n	800a7ca <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	f040 80c3 	bne.w	800a7c8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	441a      	add	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a652:	429a      	cmp	r2, r3
 800a654:	d907      	bls.n	800a666 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e0b1      	b.n	800a7ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2203      	movs	r2, #3
 800a66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f042 021a 	orr.w	r2, r2, #26
 800a684:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68a:	4a52      	ldr	r2, [pc, #328]	; (800a7d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a68c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	4a51      	ldr	r2, [pc, #324]	; (800a7d8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a694:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69a:	2200      	movs	r2, #0
 800a69c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d002      	beq.n	800a6ac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	025b      	lsls	r3, r3, #9
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f003 f9e3 	bl	800da80 <SDMMC_CmdBlockLength>
 800a6ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00f      	beq.n	800a6e2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a45      	ldr	r2, [pc, #276]	; (800a7dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a6c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e073      	b.n	800a7ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d90a      	bls.n	800a6fe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	22a0      	movs	r2, #160	; 0xa0
 800a6ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f003 fa4b 	bl	800db90 <SDMMC_CmdWriteMultiBlock>
 800a6fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a6fc:	e009      	b.n	800a712 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2290      	movs	r2, #144	; 0x90
 800a702:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a70a:	4618      	mov	r0, r3
 800a70c:	f003 fa1e 	bl	800db4c <SDMMC_CmdWriteSingleBlock>
 800a710:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d012      	beq.n	800a73e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a2f      	ldr	r2, [pc, #188]	; (800a7dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a71e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	431a      	orrs	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e045      	b.n	800a7ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a73e:	4b28      	ldr	r3, [pc, #160]	; (800a7e0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a748:	68b9      	ldr	r1, [r7, #8]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3380      	adds	r3, #128	; 0x80
 800a750:	461a      	mov	r2, r3
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	025b      	lsls	r3, r3, #9
 800a756:	089b      	lsrs	r3, r3, #2
 800a758:	f7fd fab4 	bl	8007cc4 <HAL_DMA_Start_IT>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01a      	beq.n	800a798 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 021a 	bic.w	r2, r2, #26
 800a770:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a19      	ldr	r2, [pc, #100]	; (800a7dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a778:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e018      	b.n	800a7ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a798:	f04f 33ff 	mov.w	r3, #4294967295
 800a79c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	025b      	lsls	r3, r3, #9
 800a7a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a7a4:	2390      	movs	r3, #144	; 0x90
 800a7a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f107 0210 	add.w	r2, r7, #16
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f003 f932 	bl	800da28 <SDIO_ConfigData>

      return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e000      	b.n	800a7ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a7c8:	2302      	movs	r3, #2
  }
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3730      	adds	r7, #48	; 0x30
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800afbd 	.word	0x0800afbd
 800a7d8:	0800b059 	.word	0x0800b059
 800a7dc:	004005ff 	.word	0x004005ff
 800a7e0:	4225858c 	.word	0x4225858c

0800a7e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d008      	beq.n	800a812 <HAL_SD_IRQHandler+0x2e>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f003 0308 	and.w	r3, r3, #8
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 ffc8 	bl	800b7a0 <SD_Read_IT>
 800a810:	e155      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 808f 	beq.w	800a940 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a82a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	6812      	ldr	r2, [r2, #0]
 800a836:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a83a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a83e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0201 	bic.w	r2, r2, #1
 800a84e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f003 0308 	and.w	r3, r3, #8
 800a856:	2b00      	cmp	r3, #0
 800a858:	d039      	beq.n	800a8ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d104      	bne.n	800a86e <HAL_SD_IRQHandler+0x8a>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d011      	beq.n	800a892 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f003 f9ae 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800a878:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d008      	beq.n	800a892 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	431a      	orrs	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f91f 	bl	800aad0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f240 523a 	movw	r2, #1338	; 0x53a
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d104      	bne.n	800a8be <HAL_SD_IRQHandler+0xda>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f003 fe04 	bl	800e4cc <HAL_SD_RxCpltCallback>
 800a8c4:	e0fb      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f003 fdf6 	bl	800e4b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a8cc:	e0f7      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 80f2 	beq.w	800aabe <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f003 0320 	and.w	r3, r3, #32
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d011      	beq.n	800a908 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f003 f973 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800a8ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d008      	beq.n	800a908 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f8e4 	bl	800aad0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 80d5 	bne.w	800aabe <HAL_SD_IRQHandler+0x2da>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f040 80cf 	bne.w	800aabe <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0208 	bic.w	r2, r2, #8
 800a92e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f003 fdbd 	bl	800e4b8 <HAL_SD_TxCpltCallback>
}
 800a93e:	e0be      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d008      	beq.n	800a960 <HAL_SD_IRQHandler+0x17c>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 ff72 	bl	800b842 <SD_Write_IT>
 800a95e:	e0ae      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a966:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 80a7 	beq.w	800aabe <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	f043 0202 	orr.w	r2, r3, #2
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99c:	f043 0208 	orr.w	r2, r3, #8
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9aa:	f003 0320 	and.w	r3, r3, #32
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d005      	beq.n	800a9be <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b6:	f043 0220 	orr.w	r2, r3, #32
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c4:	f003 0310 	and.w	r3, r3, #16
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	f043 0210 	orr.w	r2, r3, #16
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f240 523a 	movw	r2, #1338	; 0x53a
 800a9e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a9f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f003 f8ec 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	431a      	orrs	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f003 0308 	and.w	r3, r3, #8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f855 	bl	800aad0 <HAL_SD_ErrorCallback>
}
 800aa26:	e04a      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d045      	beq.n	800aabe <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <HAL_SD_IRQHandler+0x262>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d011      	beq.n	800aa6a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4a:	4a1f      	ldr	r2, [pc, #124]	; (800aac8 <HAL_SD_IRQHandler+0x2e4>)
 800aa4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd f98e 	bl	8007d74 <HAL_DMA_Abort_IT>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d02f      	beq.n	800aabe <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 fb4a 	bl	800b0fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aa68:	e029      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d104      	bne.n	800aa7e <HAL_SD_IRQHandler+0x29a>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d011      	beq.n	800aaa2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	4a12      	ldr	r2, [pc, #72]	; (800aacc <HAL_SD_IRQHandler+0x2e8>)
 800aa84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fd f972 	bl	8007d74 <HAL_DMA_Abort_IT>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d013      	beq.n	800aabe <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 fb65 	bl	800b16a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aaa0:	e00d      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f003 fcf4 	bl	800e4a4 <HAL_SD_AbortCallback>
}
 800aabc:	e7ff      	b.n	800aabe <HAL_SD_IRQHandler+0x2da>
 800aabe:	bf00      	nop
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	0800b0fd 	.word	0x0800b0fd
 800aacc:	0800b16b 	.word	0x0800b16b

0800aad0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaf2:	0f9b      	lsrs	r3, r3, #30
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aafe:	0e9b      	lsrs	r3, r3, #26
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab10:	0e1b      	lsrs	r3, r3, #24
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab22:	0c1b      	lsrs	r3, r3, #16
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab44:	0d1b      	lsrs	r3, r3, #20
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab50:	0c1b      	lsrs	r3, r3, #16
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f003 030f 	and.w	r3, r3, #15
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab62:	0bdb      	lsrs	r3, r3, #15
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab74:	0b9b      	lsrs	r3, r3, #14
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab86:	0b5b      	lsrs	r3, r3, #13
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab98:	0b1b      	lsrs	r3, r3, #12
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2200      	movs	r2, #0
 800abaa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d163      	bne.n	800ac7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abb8:	009a      	lsls	r2, r3, #2
 800abba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800abbe:	4013      	ands	r3, r2
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800abc4:	0f92      	lsrs	r2, r2, #30
 800abc6:	431a      	orrs	r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abd0:	0edb      	lsrs	r3, r3, #27
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe2:	0e1b      	lsrs	r3, r3, #24
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	b2da      	uxtb	r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf4:	0d5b      	lsrs	r3, r3, #21
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac06:	0c9b      	lsrs	r3, r3, #18
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 0307 	and.w	r3, r3, #7
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac18:	0bdb      	lsrs	r3, r3, #15
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f003 0307 	and.w	r3, r3, #7
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	7e1b      	ldrb	r3, [r3, #24]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	3302      	adds	r3, #2
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ac46:	fb02 f203 	mul.w	r2, r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	7a1b      	ldrb	r3, [r3, #8]
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f003 030f 	and.w	r3, r3, #15
 800ac58:	2201      	movs	r2, #1
 800ac5a:	409a      	lsls	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ac68:	0a52      	lsrs	r2, r2, #9
 800ac6a:	fb02 f203 	mul.w	r2, r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac78:	661a      	str	r2, [r3, #96]	; 0x60
 800ac7a:	e031      	b.n	800ace0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d11d      	bne.n	800acc0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac88:	041b      	lsls	r3, r3, #16
 800ac8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac92:	0c1b      	lsrs	r3, r3, #16
 800ac94:	431a      	orrs	r2, r3
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	029a      	lsls	r2, r3, #10
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	661a      	str	r2, [r3, #96]	; 0x60
 800acbe:	e00f      	b.n	800ace0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a58      	ldr	r2, [pc, #352]	; (800ae28 <HAL_SD_GetCardCSD+0x344>)
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e09d      	b.n	800ae1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace4:	0b9b      	lsrs	r3, r3, #14
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf6:	09db      	lsrs	r3, r3, #7
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad18:	0fdb      	lsrs	r3, r3, #31
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad24:	0f5b      	lsrs	r3, r3, #29
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 0303 	and.w	r3, r3, #3
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad36:	0e9b      	lsrs	r3, r3, #26
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	0d9b      	lsrs	r3, r3, #22
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad5a:	0d5b      	lsrs	r3, r3, #21
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad76:	0c1b      	lsrs	r3, r3, #16
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8a:	0bdb      	lsrs	r3, r3, #15
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9e:	0b9b      	lsrs	r3, r3, #14
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb2:	0b5b      	lsrs	r3, r3, #13
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc6:	0b1b      	lsrs	r3, r3, #12
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	b2da      	uxtb	r2, r3
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adda:	0a9b      	lsrs	r3, r3, #10
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adee:	0a1b      	lsrs	r3, r3, #8
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f003 0303 	and.w	r3, r3, #3
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	004005ff 	.word	0x004005ff

0800ae2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae84:	b5b0      	push	{r4, r5, r7, lr}
 800ae86:	b08e      	sub	sp, #56	; 0x38
 800ae88:	af04      	add	r7, sp, #16
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2203      	movs	r2, #3
 800ae92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d02e      	beq.n	800aefc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea4:	d106      	bne.n	800aeb4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38
 800aeb2:	e029      	b.n	800af08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeba:	d10a      	bne.n	800aed2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fb0f 	bl	800b4e0 <SD_WideBus_Enable>
 800aec2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	431a      	orrs	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	639a      	str	r2, [r3, #56]	; 0x38
 800aed0:	e01a      	b.n	800af08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb4c 	bl	800b576 <SD_WideBus_Disable>
 800aede:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	431a      	orrs	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	639a      	str	r2, [r3, #56]	; 0x38
 800aeec:	e00c      	b.n	800af08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38
 800aefa:	e005      	b.n	800af08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a18      	ldr	r2, [pc, #96]	; (800af78 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800af16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e024      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681d      	ldr	r5, [r3, #0]
 800af4a:	466c      	mov	r4, sp
 800af4c:	f107 0318 	add.w	r3, r7, #24
 800af50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af58:	f107 030c 	add.w	r3, r7, #12
 800af5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af5e:	4628      	mov	r0, r5
 800af60:	f002 fcb2 	bl	800d8c8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3728      	adds	r7, #40	; 0x28
 800af72:	46bd      	mov	sp, r7
 800af74:	bdb0      	pop	{r4, r5, r7, pc}
 800af76:	bf00      	nop
 800af78:	004005ff 	.word	0x004005ff

0800af7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fa7e 	bl	800b490 <SD_SendStatus>
 800af94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d005      	beq.n	800afa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	0a5b      	lsrs	r3, r3, #9
 800afac:	f003 030f 	and.w	r3, r3, #15
 800afb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800afb2:	693b      	ldr	r3, [r7, #16]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afd8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800afda:	bf00      	nop
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff8:	2b82      	cmp	r3, #130	; 0x82
 800affa:	d111      	bne.n	800b020 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	f002 fde7 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800b006:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d008      	beq.n	800b020 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	431a      	orrs	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff fd58 	bl	800aad0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f022 0208 	bic.w	r2, r2, #8
 800b02e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f240 523a 	movw	r2, #1338	; 0x53a
 800b038:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f003 fa3f 	bl	800e4cc <HAL_SD_RxCpltCallback>
#endif
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7fd f830 	bl	80080cc <HAL_DMA_GetError>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d03e      	beq.n	800b0f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b078:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b080:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d002      	beq.n	800b08e <SD_DMAError+0x36>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d12d      	bne.n	800b0ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a19      	ldr	r2, [pc, #100]	; (800b0f8 <SD_DMAError+0xa0>)
 800b094:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b0a4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b0b2:	6978      	ldr	r0, [r7, #20]
 800b0b4:	f7ff ff62 	bl	800af7c <HAL_SD_GetCardState>
 800b0b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b06      	cmp	r3, #6
 800b0be:	d002      	beq.n	800b0c6 <SD_DMAError+0x6e>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	d10a      	bne.n	800b0dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f002 fd82 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b0ea:	6978      	ldr	r0, [r7, #20]
 800b0ec:	f7ff fcf0 	bl	800aad0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b0f0:	bf00      	nop
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	004005ff 	.word	0x004005ff

0800b0fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f240 523a 	movw	r2, #1338	; 0x53a
 800b112:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff ff31 	bl	800af7c <HAL_SD_GetCardState>
 800b11a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b06      	cmp	r3, #6
 800b12e:	d002      	beq.n	800b136 <SD_DMATxAbort+0x3a>
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b05      	cmp	r3, #5
 800b134:	d10a      	bne.n	800b14c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f002 fd4a 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800b140:	4602      	mov	r2, r0
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b146:	431a      	orrs	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f003 f9a5 	bl	800e4a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b15a:	e002      	b.n	800b162 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7ff fcb7 	bl	800aad0 <HAL_SD_ErrorCallback>
}
 800b162:	bf00      	nop
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b176:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f240 523a 	movw	r2, #1338	; 0x53a
 800b180:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff fefa 	bl	800af7c <HAL_SD_GetCardState>
 800b188:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b06      	cmp	r3, #6
 800b19c:	d002      	beq.n	800b1a4 <SD_DMARxAbort+0x3a>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b05      	cmp	r3, #5
 800b1a2:	d10a      	bne.n	800b1ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f002 fd13 	bl	800dbd4 <SDMMC_CmdStopTransfer>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d103      	bne.n	800b1ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f003 f96e 	bl	800e4a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b1c8:	e002      	b.n	800b1d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff fc80 	bl	800aad0 <HAL_SD_ErrorCallback>
}
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b1d8:	b5b0      	push	{r4, r5, r7, lr}
 800b1da:	b094      	sub	sp, #80	; 0x50
 800b1dc:	af04      	add	r7, sp, #16
 800b1de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f002 fbc5 	bl	800d978 <SDIO_GetPowerState>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b1f8:	e0b7      	b.n	800b36a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d02f      	beq.n	800b262 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f002 fdee 	bl	800dde8 <SDMMC_CmdSendCID>
 800b20c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <SD_InitCard+0x40>
    {
      return errorstate;
 800b214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b216:	e0a8      	b.n	800b36a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2100      	movs	r1, #0
 800b21e:	4618      	mov	r0, r3
 800b220:	f002 fbef 	bl	800da02 <SDIO_GetResponse>
 800b224:	4602      	mov	r2, r0
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2104      	movs	r1, #4
 800b230:	4618      	mov	r0, r3
 800b232:	f002 fbe6 	bl	800da02 <SDIO_GetResponse>
 800b236:	4602      	mov	r2, r0
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2108      	movs	r1, #8
 800b242:	4618      	mov	r0, r3
 800b244:	f002 fbdd 	bl	800da02 <SDIO_GetResponse>
 800b248:	4602      	mov	r2, r0
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	210c      	movs	r1, #12
 800b254:	4618      	mov	r0, r3
 800b256:	f002 fbd4 	bl	800da02 <SDIO_GetResponse>
 800b25a:	4602      	mov	r2, r0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	2b03      	cmp	r3, #3
 800b268:	d00d      	beq.n	800b286 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f107 020e 	add.w	r2, r7, #14
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f002 fdf4 	bl	800de62 <SDMMC_CmdSetRelAdd>
 800b27a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <SD_InitCard+0xae>
    {
      return errorstate;
 800b282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b284:	e071      	b.n	800b36a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	d036      	beq.n	800b2fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b28e:	89fb      	ldrh	r3, [r7, #14]
 800b290:	461a      	mov	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29e:	041b      	lsls	r3, r3, #16
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	f002 fdbe 	bl	800de24 <SDMMC_CmdSendCSD>
 800b2a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b2:	e05a      	b.n	800b36a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f002 fba1 	bl	800da02 <SDIO_GetResponse>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2104      	movs	r1, #4
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f002 fb98 	bl	800da02 <SDIO_GetResponse>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2108      	movs	r1, #8
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f002 fb8f 	bl	800da02 <SDIO_GetResponse>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	210c      	movs	r1, #12
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f002 fb86 	bl	800da02 <SDIO_GetResponse>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2104      	movs	r1, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f002 fb7d 	bl	800da02 <SDIO_GetResponse>
 800b308:	4603      	mov	r3, r0
 800b30a:	0d1a      	lsrs	r2, r3, #20
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b310:	f107 0310 	add.w	r3, r7, #16
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff fbe4 	bl	800aae4 <HAL_SD_GetCardCSD>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b322:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b326:	e020      	b.n	800b36a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6819      	ldr	r1, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b330:	041b      	lsls	r3, r3, #16
 800b332:	f04f 0400 	mov.w	r4, #0
 800b336:	461a      	mov	r2, r3
 800b338:	4623      	mov	r3, r4
 800b33a:	4608      	mov	r0, r1
 800b33c:	f002 fc6c 	bl	800dc18 <SDMMC_CmdSelDesel>
 800b340:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <SD_InitCard+0x174>
  {
    return errorstate;
 800b348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34a:	e00e      	b.n	800b36a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681d      	ldr	r5, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	466c      	mov	r4, sp
 800b354:	f103 0210 	add.w	r2, r3, #16
 800b358:	ca07      	ldmia	r2, {r0, r1, r2}
 800b35a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b35e:	3304      	adds	r3, #4
 800b360:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b362:	4628      	mov	r0, r5
 800b364:	f002 fab0 	bl	800d8c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3740      	adds	r7, #64	; 0x40
 800b36e:	46bd      	mov	sp, r7
 800b370:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b374 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	2300      	movs	r3, #0
 800b386:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f002 fc66 	bl	800dc5e <SDMMC_CmdGoIdleState>
 800b392:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	e072      	b.n	800b484 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f002 fc79 	bl	800dc9a <SDMMC_CmdOperCond>
 800b3a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00d      	beq.n	800b3cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f002 fc4f 	bl	800dc5e <SDMMC_CmdGoIdleState>
 800b3c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	e05b      	b.n	800b484 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d137      	bne.n	800b44a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2100      	movs	r1, #0
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f002 fc79 	bl	800dcd8 <SDMMC_CmdAppCommand>
 800b3e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d02d      	beq.n	800b44a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3f2:	e047      	b.n	800b484 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f002 fc6c 	bl	800dcd8 <SDMMC_CmdAppCommand>
 800b400:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <SD_PowerON+0x98>
    {
      return errorstate;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	e03b      	b.n	800b484 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	491e      	ldr	r1, [pc, #120]	; (800b48c <SD_PowerON+0x118>)
 800b412:	4618      	mov	r0, r3
 800b414:	f002 fc82 	bl	800dd1c <SDMMC_CmdAppOperCommand>
 800b418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b424:	e02e      	b.n	800b484 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2100      	movs	r1, #0
 800b42c:	4618      	mov	r0, r3
 800b42e:	f002 fae8 	bl	800da02 <SDIO_GetResponse>
 800b432:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	0fdb      	lsrs	r3, r3, #31
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <SD_PowerON+0xcc>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e000      	b.n	800b442 <SD_PowerON+0xce>
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]

    count++;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	3301      	adds	r3, #1
 800b448:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b450:	4293      	cmp	r3, r2
 800b452:	d802      	bhi.n	800b45a <SD_PowerON+0xe6>
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0cc      	beq.n	800b3f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b460:	4293      	cmp	r3, r2
 800b462:	d902      	bls.n	800b46a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b468:	e00c      	b.n	800b484 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	645a      	str	r2, [r3, #68]	; 0x44
 800b47a:	e002      	b.n	800b482 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	c1100000 	.word	0xc1100000

0800b490 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d102      	bne.n	800b4a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b4a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4a4:	e018      	b.n	800b4d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ae:	041b      	lsls	r3, r3, #16
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f002 fcf6 	bl	800dea4 <SDMMC_CmdSendStatus>
 800b4b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	e009      	b.n	800b4d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f002 fa99 	bl	800da02 <SDIO_GetResponse>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f002 fa83 	bl	800da02 <SDIO_GetResponse>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b506:	d102      	bne.n	800b50e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b50c:	e02f      	b.n	800b56e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f879 	bl	800b60c <SD_FindSCR>
 800b51a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	e023      	b.n	800b56e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01c      	beq.n	800b56a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b538:	041b      	lsls	r3, r3, #16
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f002 fbcb 	bl	800dcd8 <SDMMC_CmdAppCommand>
 800b542:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	e00f      	b.n	800b56e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2102      	movs	r1, #2
 800b554:	4618      	mov	r0, r3
 800b556:	f002 fc04 	bl	800dd62 <SDMMC_CmdBusWidth>
 800b55a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	e003      	b.n	800b56e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b566:	2300      	movs	r3, #0
 800b568:	e001      	b.n	800b56e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b56a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b086      	sub	sp, #24
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	2300      	movs	r3, #0
 800b584:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f002 fa38 	bl	800da02 <SDIO_GetResponse>
 800b592:	4603      	mov	r3, r0
 800b594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b59c:	d102      	bne.n	800b5a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b59e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5a2:	e02f      	b.n	800b604 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b5a4:	f107 030c 	add.w	r3, r7, #12
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f82e 	bl	800b60c <SD_FindSCR>
 800b5b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	e023      	b.n	800b604 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d01c      	beq.n	800b600 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ce:	041b      	lsls	r3, r3, #16
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	f002 fb80 	bl	800dcd8 <SDMMC_CmdAppCommand>
 800b5d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	e00f      	b.n	800b604 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f002 fbb9 	bl	800dd62 <SDMMC_CmdBusWidth>
 800b5f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	e003      	b.n	800b604 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	e001      	b.n	800b604 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b600:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b604:	4618      	mov	r0, r3
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b60c:	b590      	push	{r4, r7, lr}
 800b60e:	b08f      	sub	sp, #60	; 0x3c
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b616:	f7fb fd63 	bl	80070e0 <HAL_GetTick>
 800b61a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b620:	2300      	movs	r3, #0
 800b622:	60bb      	str	r3, [r7, #8]
 800b624:	2300      	movs	r3, #0
 800b626:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2108      	movs	r1, #8
 800b632:	4618      	mov	r0, r3
 800b634:	f002 fa24 	bl	800da80 <SDMMC_CmdBlockLength>
 800b638:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	e0a9      	b.n	800b798 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f002 fb41 	bl	800dcd8 <SDMMC_CmdAppCommand>
 800b656:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	e09a      	b.n	800b798 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b662:	f04f 33ff 	mov.w	r3, #4294967295
 800b666:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b668:	2308      	movs	r3, #8
 800b66a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b66c:	2330      	movs	r3, #48	; 0x30
 800b66e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b670:	2302      	movs	r3, #2
 800b672:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b674:	2300      	movs	r3, #0
 800b676:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b678:	2301      	movs	r3, #1
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f107 0210 	add.w	r2, r7, #16
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f002 f9ce 	bl	800da28 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4618      	mov	r0, r3
 800b692:	f002 fb88 	bl	800dda6 <SDMMC_CmdSendSCR>
 800b696:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d022      	beq.n	800b6e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	e07a      	b.n	800b798 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00e      	beq.n	800b6ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6819      	ldr	r1, [r3, #0]
 800b6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	f107 0208 	add.w	r2, r7, #8
 800b6bc:	18d4      	adds	r4, r2, r3
 800b6be:	4608      	mov	r0, r1
 800b6c0:	f002 f92d 	bl	800d91e <SDIO_ReadFIFO>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	6023      	str	r3, [r4, #0]
      index++;
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6ce:	f7fb fd07 	bl	80070e0 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d102      	bne.n	800b6e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6e2:	e059      	b.n	800b798 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6ea:	f240 432a 	movw	r3, #1066	; 0x42a
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0d6      	beq.n	800b6a2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fa:	f003 0308 	and.w	r3, r3, #8
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2208      	movs	r2, #8
 800b708:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b70a:	2308      	movs	r3, #8
 800b70c:	e044      	b.n	800b798 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b714:	f003 0302 	and.w	r3, r3, #2
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d005      	beq.n	800b728 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2202      	movs	r2, #2
 800b722:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b724:	2302      	movs	r3, #2
 800b726:	e037      	b.n	800b798 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	f003 0320 	and.w	r3, r3, #32
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2220      	movs	r2, #32
 800b73c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b73e:	2320      	movs	r3, #32
 800b740:	e02a      	b.n	800b798 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f240 523a 	movw	r2, #1338	; 0x53a
 800b74a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	061a      	lsls	r2, r3, #24
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b758:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b762:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	0e1b      	lsrs	r3, r3, #24
 800b768:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	601a      	str	r2, [r3, #0]
    scr++;
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	3304      	adds	r3, #4
 800b772:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	061a      	lsls	r2, r3, #24
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	021b      	lsls	r3, r3, #8
 800b77c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b780:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	0a1b      	lsrs	r3, r3, #8
 800b786:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b78a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	0e1b      	lsrs	r3, r3, #24
 800b790:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b794:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	373c      	adds	r7, #60	; 0x3c
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd90      	pop	{r4, r7, pc}

0800b7a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d03f      	beq.n	800b83a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
 800b7be:	e033      	b.n	800b828 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f002 f8aa 	bl	800d91e <SDIO_ReadFIFO>
 800b7ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	0a1b      	lsrs	r3, r3, #8
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	0c1b      	lsrs	r3, r3, #16
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	3b01      	subs	r3, #1
 800b80a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	0e1b      	lsrs	r3, r3, #24
 800b810:	b2da      	uxtb	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3b01      	subs	r3, #1
 800b820:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3301      	adds	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2b07      	cmp	r3, #7
 800b82c:	d9c8      	bls.n	800b7c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b83a:	bf00      	nop
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d043      	beq.n	800b8e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e037      	b.n	800b8d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	3b01      	subs	r3, #1
 800b872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	021a      	lsls	r2, r3, #8
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3301      	adds	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3b01      	subs	r3, #1
 800b88a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	041a      	lsls	r2, r3, #16
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	4313      	orrs	r3, r2
 800b896:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	061a      	lsls	r2, r3, #24
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f107 0208 	add.w	r2, r7, #8
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f002 f836 	bl	800d938 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	617b      	str	r3, [r7, #20]
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b07      	cmp	r3, #7
 800b8d6:	d9c4      	bls.n	800b862 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b8e4:	bf00      	nop
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e056      	b.n	800b9ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d106      	bne.n	800b91e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7f9 fc75 	bl	8005208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2202      	movs	r2, #2
 800b922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b934:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	685a      	ldr	r2, [r3, #4]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	431a      	orrs	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	431a      	orrs	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	431a      	orrs	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	431a      	orrs	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	431a      	orrs	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	ea42 0103 	orr.w	r1, r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	0c1b      	lsrs	r3, r3, #16
 800b97c:	f003 0104 	and.w	r1, r3, #4
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	430a      	orrs	r2, r1
 800b98a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	69da      	ldr	r2, [r3, #28]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b99a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d101      	bne.n	800b9d6 <HAL_SPI_Transmit+0x22>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e11e      	b.n	800bc14 <HAL_SPI_Transmit+0x260>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9de:	f7fb fb7f 	bl	80070e0 <HAL_GetTick>
 800b9e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b9e4:	88fb      	ldrh	r3, [r7, #6]
 800b9e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d002      	beq.n	800b9fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b9f8:	e103      	b.n	800bc02 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <HAL_SPI_Transmit+0x52>
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba0a:	e0fa      	b.n	800bc02 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2203      	movs	r2, #3
 800ba10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	88fa      	ldrh	r2, [r7, #6]
 800ba24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	88fa      	ldrh	r2, [r7, #6]
 800ba2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba52:	d107      	bne.n	800ba64 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba6e:	2b40      	cmp	r3, #64	; 0x40
 800ba70:	d007      	beq.n	800ba82 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba8a:	d14b      	bne.n	800bb24 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <HAL_SPI_Transmit+0xe6>
 800ba94:	8afb      	ldrh	r3, [r7, #22]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d13e      	bne.n	800bb18 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9e:	881a      	ldrh	r2, [r3, #0]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	1c9a      	adds	r2, r3, #2
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	3b01      	subs	r3, #1
 800bab8:	b29a      	uxth	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800babe:	e02b      	b.n	800bb18 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d112      	bne.n	800baf4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	881a      	ldrh	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	1c9a      	adds	r2, r3, #2
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bae8:	b29b      	uxth	r3, r3
 800baea:	3b01      	subs	r3, #1
 800baec:	b29a      	uxth	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	86da      	strh	r2, [r3, #54]	; 0x36
 800baf2:	e011      	b.n	800bb18 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baf4:	f7fb faf4 	bl	80070e0 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d803      	bhi.n	800bb0c <HAL_SPI_Transmit+0x158>
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d102      	bne.n	800bb12 <HAL_SPI_Transmit+0x15e>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d102      	bne.n	800bb18 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb16:	e074      	b.n	800bc02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1ce      	bne.n	800bac0 <HAL_SPI_Transmit+0x10c>
 800bb22:	e04c      	b.n	800bbbe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <HAL_SPI_Transmit+0x17e>
 800bb2c:	8afb      	ldrh	r3, [r7, #22]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d140      	bne.n	800bbb4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	330c      	adds	r3, #12
 800bb3c:	7812      	ldrb	r2, [r2, #0]
 800bb3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bb58:	e02c      	b.n	800bbb4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f003 0302 	and.w	r3, r3, #2
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d113      	bne.n	800bb90 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	330c      	adds	r3, #12
 800bb72:	7812      	ldrb	r2, [r2, #0]
 800bb74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	3b01      	subs	r3, #1
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb8e:	e011      	b.n	800bbb4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb90:	f7fb faa6 	bl	80070e0 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d803      	bhi.n	800bba8 <HAL_SPI_Transmit+0x1f4>
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d102      	bne.n	800bbae <HAL_SPI_Transmit+0x1fa>
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d102      	bne.n	800bbb4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bbb2:	e026      	b.n	800bc02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1cd      	bne.n	800bb5a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbbe:	69ba      	ldr	r2, [r7, #24]
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 fba4 	bl	800c310 <SPI_EndRxTxTransaction>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10a      	bne.n	800bbf2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbdc:	2300      	movs	r3, #0
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d002      	beq.n	800bc00 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	77fb      	strb	r3, [r7, #31]
 800bbfe:	e000      	b.n	800bc02 <HAL_SPI_Transmit+0x24e>
  }

error:
 800bc00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc12:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc38:	d112      	bne.n	800bc60 <HAL_SPI_Receive+0x44>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10e      	bne.n	800bc60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2204      	movs	r2, #4
 800bc46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc4a:	88fa      	ldrh	r2, [r7, #6]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	4613      	mov	r3, r2
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 f8e9 	bl	800be2e <HAL_SPI_TransmitReceive>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	e0e2      	b.n	800be26 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <HAL_SPI_Receive+0x52>
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	e0db      	b.n	800be26 <HAL_SPI_Receive+0x20a>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc76:	f7fb fa33 	bl	80070e0 <HAL_GetTick>
 800bc7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d002      	beq.n	800bc8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bc88:	2302      	movs	r3, #2
 800bc8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc8c:	e0c2      	b.n	800be14 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <HAL_SPI_Receive+0x7e>
 800bc94:	88fb      	ldrh	r3, [r7, #6]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc9e:	e0b9      	b.n	800be14 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2204      	movs	r2, #4
 800bca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	88fa      	ldrh	r2, [r7, #6]
 800bcb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	88fa      	ldrh	r2, [r7, #6]
 800bcbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce6:	d107      	bne.n	800bcf8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bcf6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd02:	2b40      	cmp	r3, #64	; 0x40
 800bd04:	d007      	beq.n	800bd16 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d162      	bne.n	800bde4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bd1e:	e02e      	b.n	800bd7e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d115      	bne.n	800bd5a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f103 020c 	add.w	r2, r3, #12
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	7812      	ldrb	r2, [r2, #0]
 800bd3c:	b2d2      	uxtb	r2, r2
 800bd3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd58:	e011      	b.n	800bd7e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd5a:	f7fb f9c1 	bl	80070e0 <HAL_GetTick>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d803      	bhi.n	800bd72 <HAL_SPI_Receive+0x156>
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd70:	d102      	bne.n	800bd78 <HAL_SPI_Receive+0x15c>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d102      	bne.n	800bd7e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd7c:	e04a      	b.n	800be14 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1cb      	bne.n	800bd20 <HAL_SPI_Receive+0x104>
 800bd88:	e031      	b.n	800bdee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d113      	bne.n	800bdc0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68da      	ldr	r2, [r3, #12]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	b292      	uxth	r2, r2
 800bda4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdaa:	1c9a      	adds	r2, r3, #2
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdbe:	e011      	b.n	800bde4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdc0:	f7fb f98e 	bl	80070e0 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d803      	bhi.n	800bdd8 <HAL_SPI_Receive+0x1bc>
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd6:	d102      	bne.n	800bdde <HAL_SPI_Receive+0x1c2>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d102      	bne.n	800bde4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bde2:	e017      	b.n	800be14 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1cd      	bne.n	800bd8a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 fa27 	bl	800c246 <SPI_EndRxTransaction>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2220      	movs	r2, #32
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	75fb      	strb	r3, [r7, #23]
 800be10:	e000      	b.n	800be14 <HAL_SPI_Receive+0x1f8>
  }

error :
 800be12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b08c      	sub	sp, #48	; 0x30
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	607a      	str	r2, [r7, #4]
 800be3a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be3c:	2301      	movs	r3, #1
 800be3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d101      	bne.n	800be54 <HAL_SPI_TransmitReceive+0x26>
 800be50:	2302      	movs	r3, #2
 800be52:	e18a      	b.n	800c16a <HAL_SPI_TransmitReceive+0x33c>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be5c:	f7fb f940 	bl	80070e0 <HAL_GetTick>
 800be60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800be72:	887b      	ldrh	r3, [r7, #2]
 800be74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d00f      	beq.n	800be9e <HAL_SPI_TransmitReceive+0x70>
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be84:	d107      	bne.n	800be96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d103      	bne.n	800be96 <HAL_SPI_TransmitReceive+0x68>
 800be8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be92:	2b04      	cmp	r3, #4
 800be94:	d003      	beq.n	800be9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800be96:	2302      	movs	r3, #2
 800be98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be9c:	e15b      	b.n	800c156 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <HAL_SPI_TransmitReceive+0x82>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <HAL_SPI_TransmitReceive+0x82>
 800beaa:	887b      	ldrh	r3, [r7, #2]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d103      	bne.n	800beb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800beb6:	e14e      	b.n	800c156 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d003      	beq.n	800becc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2205      	movs	r2, #5
 800bec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	887a      	ldrh	r2, [r7, #2]
 800bedc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	887a      	ldrh	r2, [r7, #2]
 800bee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	887a      	ldrh	r2, [r7, #2]
 800beee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	887a      	ldrh	r2, [r7, #2]
 800bef4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0c:	2b40      	cmp	r3, #64	; 0x40
 800bf0e:	d007      	beq.n	800bf20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf28:	d178      	bne.n	800c01c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <HAL_SPI_TransmitReceive+0x10a>
 800bf32:	8b7b      	ldrh	r3, [r7, #26]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d166      	bne.n	800c006 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3c:	881a      	ldrh	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf48:	1c9a      	adds	r2, r3, #2
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	3b01      	subs	r3, #1
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf5c:	e053      	b.n	800c006 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d11b      	bne.n	800bfa4 <HAL_SPI_TransmitReceive+0x176>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d016      	beq.n	800bfa4 <HAL_SPI_TransmitReceive+0x176>
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d113      	bne.n	800bfa4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf80:	881a      	ldrh	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8c:	1c9a      	adds	r2, r3, #2
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d119      	bne.n	800bfe6 <HAL_SPI_TransmitReceive+0x1b8>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d014      	beq.n	800bfe6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc6:	b292      	uxth	r2, r2
 800bfc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfce:	1c9a      	adds	r2, r3, #2
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bfe6:	f7fb f87b 	bl	80070e0 <HAL_GetTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d807      	bhi.n	800c006 <HAL_SPI_TransmitReceive+0x1d8>
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d003      	beq.n	800c006 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bffe:	2303      	movs	r3, #3
 800c000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c004:	e0a7      	b.n	800c156 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1a6      	bne.n	800bf5e <HAL_SPI_TransmitReceive+0x130>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c014:	b29b      	uxth	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1a1      	bne.n	800bf5e <HAL_SPI_TransmitReceive+0x130>
 800c01a:	e07c      	b.n	800c116 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <HAL_SPI_TransmitReceive+0x1fc>
 800c024:	8b7b      	ldrh	r3, [r7, #26]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d16b      	bne.n	800c102 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	330c      	adds	r3, #12
 800c034:	7812      	ldrb	r2, [r2, #0]
 800c036:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c046:	b29b      	uxth	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c050:	e057      	b.n	800c102 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d11c      	bne.n	800c09a <HAL_SPI_TransmitReceive+0x26c>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c064:	b29b      	uxth	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d017      	beq.n	800c09a <HAL_SPI_TransmitReceive+0x26c>
 800c06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d114      	bne.n	800c09a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	330c      	adds	r3, #12
 800c07a:	7812      	ldrb	r2, [r2, #0]
 800c07c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c096:	2300      	movs	r3, #0
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d119      	bne.n	800c0dc <HAL_SPI_TransmitReceive+0x2ae>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d014      	beq.n	800c0dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68da      	ldr	r2, [r3, #12]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c0dc:	f7fb f800 	bl	80070e0 <HAL_GetTick>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d803      	bhi.n	800c0f4 <HAL_SPI_TransmitReceive+0x2c6>
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f2:	d102      	bne.n	800c0fa <HAL_SPI_TransmitReceive+0x2cc>
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c100:	e029      	b.n	800c156 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c106:	b29b      	uxth	r3, r3
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1a2      	bne.n	800c052 <HAL_SPI_TransmitReceive+0x224>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c110:	b29b      	uxth	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d19d      	bne.n	800c052 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 f8f8 	bl	800c310 <SPI_EndRxTxTransaction>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d006      	beq.n	800c134 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2220      	movs	r2, #32
 800c130:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c132:	e010      	b.n	800c156 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10b      	bne.n	800c154 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c13c:	2300      	movs	r3, #0
 800c13e:	617b      	str	r3, [r7, #20]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	e000      	b.n	800c156 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c154:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3730      	adds	r7, #48	; 0x30
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	603b      	str	r3, [r7, #0]
 800c17e:	4613      	mov	r3, r2
 800c180:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c182:	e04c      	b.n	800c21e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18a:	d048      	beq.n	800c21e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c18c:	f7fa ffa8 	bl	80070e0 <HAL_GetTick>
 800c190:	4602      	mov	r2, r0
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d902      	bls.n	800c1a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d13d      	bne.n	800c21e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ba:	d111      	bne.n	800c1e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1c4:	d004      	beq.n	800c1d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ce:	d107      	bne.n	800c1e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1e8:	d10f      	bne.n	800c20a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e00f      	b.n	800c23e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	689a      	ldr	r2, [r3, #8]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	4013      	ands	r3, r2
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	bf0c      	ite	eq
 800c22e:	2301      	moveq	r3, #1
 800c230:	2300      	movne	r3, #0
 800c232:	b2db      	uxtb	r3, r3
 800c234:	461a      	mov	r2, r3
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d1a3      	bne.n	800c184 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b086      	sub	sp, #24
 800c24a:	af02      	add	r7, sp, #8
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c25a:	d111      	bne.n	800c280 <SPI_EndRxTransaction+0x3a>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c264:	d004      	beq.n	800c270 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c26e:	d107      	bne.n	800c280 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c27e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c288:	d12a      	bne.n	800c2e0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c292:	d012      	beq.n	800c2ba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2200      	movs	r2, #0
 800c29c:	2180      	movs	r1, #128	; 0x80
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f7ff ff67 	bl	800c172 <SPI_WaitFlagStateUntilTimeout>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d02d      	beq.n	800c306 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ae:	f043 0220 	orr.w	r2, r3, #32
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e026      	b.n	800c308 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f7ff ff54 	bl	800c172 <SPI_WaitFlagStateUntilTimeout>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01a      	beq.n	800c306 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d4:	f043 0220 	orr.w	r2, r3, #32
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e013      	b.n	800c308 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f7ff ff41 	bl	800c172 <SPI_WaitFlagStateUntilTimeout>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	f043 0220 	orr.w	r2, r3, #32
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e000      	b.n	800c308 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af02      	add	r7, sp, #8
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c31c:	4b1b      	ldr	r3, [pc, #108]	; (800c38c <SPI_EndRxTxTransaction+0x7c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a1b      	ldr	r2, [pc, #108]	; (800c390 <SPI_EndRxTxTransaction+0x80>)
 800c322:	fba2 2303 	umull	r2, r3, r2, r3
 800c326:	0d5b      	lsrs	r3, r3, #21
 800c328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c32c:	fb02 f303 	mul.w	r3, r2, r3
 800c330:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c33a:	d112      	bne.n	800c362 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2200      	movs	r2, #0
 800c344:	2180      	movs	r1, #128	; 0x80
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff ff13 	bl	800c172 <SPI_WaitFlagStateUntilTimeout>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d016      	beq.n	800c380 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c356:	f043 0220 	orr.w	r2, r3, #32
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e00f      	b.n	800c382 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c378:	2b80      	cmp	r3, #128	; 0x80
 800c37a:	d0f2      	beq.n	800c362 <SPI_EndRxTxTransaction+0x52>
 800c37c:	e000      	b.n	800c380 <SPI_EndRxTxTransaction+0x70>
        break;
 800c37e:	bf00      	nop
  }

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20000000 	.word	0x20000000
 800c390:	165e9f81 	.word	0x165e9f81

0800c394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e01d      	b.n	800c3e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7f8 ffe0 	bl	8005380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f000 fb56 	bl	800ca84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0201 	orr.w	r2, r2, #1
 800c400:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f003 0307 	and.w	r3, r3, #7
 800c40c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b06      	cmp	r3, #6
 800c412:	d007      	beq.n	800c424 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f042 0201 	orr.w	r2, r2, #1
 800c422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e01d      	b.n	800c480 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7f8 ff1d 	bl	8005298 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2202      	movs	r2, #2
 800c462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3304      	adds	r3, #4
 800c46e:	4619      	mov	r1, r3
 800c470:	4610      	mov	r0, r2
 800c472:	f000 fb07 	bl	800ca84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2201      	movs	r2, #1
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 fd42 	bl	800cf24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a15      	ldr	r2, [pc, #84]	; (800c4fc <HAL_TIM_PWM_Start+0x74>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d004      	beq.n	800c4b4 <HAL_TIM_PWM_Start+0x2c>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a14      	ldr	r2, [pc, #80]	; (800c500 <HAL_TIM_PWM_Start+0x78>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d101      	bne.n	800c4b8 <HAL_TIM_PWM_Start+0x30>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e000      	b.n	800c4ba <HAL_TIM_PWM_Start+0x32>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f003 0307 	and.w	r3, r3, #7
 800c4d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b06      	cmp	r3, #6
 800c4de:	d007      	beq.n	800c4f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0201 	orr.w	r2, r2, #1
 800c4ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	40010000 	.word	0x40010000
 800c500:	40010400 	.word	0x40010400

0800c504 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	e083      	b.n	800c620 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7f8 ffb7 	bl	80054a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2202      	movs	r2, #2
 800c536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	6812      	ldr	r2, [r2, #0]
 800c544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c548:	f023 0307 	bic.w	r3, r3, #7
 800c54c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f000 fa93 	bl	800ca84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6a1b      	ldr	r3, [r3, #32]
 800c574:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c586:	f023 0303 	bic.w	r3, r3, #3
 800c58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	689a      	ldr	r2, [r3, #8]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	021b      	lsls	r3, r3, #8
 800c596:	4313      	orrs	r3, r2
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c5a4:	f023 030c 	bic.w	r3, r3, #12
 800c5a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68da      	ldr	r2, [r3, #12]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	69db      	ldr	r3, [r3, #28]
 800c5be:	021b      	lsls	r3, r3, #8
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	011a      	lsls	r2, r3, #4
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	031b      	lsls	r3, r3, #12
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c5e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c5ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685a      	ldr	r2, [r3, #4]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	695b      	ldr	r3, [r3, #20]
 800c5f4:	011b      	lsls	r3, r3, #4
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <HAL_TIM_Encoder_Start+0x16>
 800c638:	2b04      	cmp	r3, #4
 800c63a:	d008      	beq.n	800c64e <HAL_TIM_Encoder_Start+0x26>
 800c63c:	e00f      	b.n	800c65e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2201      	movs	r2, #1
 800c644:	2100      	movs	r1, #0
 800c646:	4618      	mov	r0, r3
 800c648:	f000 fc6c 	bl	800cf24 <TIM_CCxChannelCmd>
      break;
 800c64c:	e016      	b.n	800c67c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2201      	movs	r2, #1
 800c654:	2104      	movs	r1, #4
 800c656:	4618      	mov	r0, r3
 800c658:	f000 fc64 	bl	800cf24 <TIM_CCxChannelCmd>
      break;
 800c65c:	e00e      	b.n	800c67c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2201      	movs	r2, #1
 800c664:	2100      	movs	r1, #0
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fc5c 	bl	800cf24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2201      	movs	r2, #1
 800c672:	2104      	movs	r1, #4
 800c674:	4618      	mov	r0, r3
 800c676:	f000 fc55 	bl	800cf24 <TIM_CCxChannelCmd>
      break;
 800c67a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f042 0201 	orr.w	r2, r2, #1
 800c68a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b082      	sub	sp, #8
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	691b      	ldr	r3, [r3, #16]
 800c6a4:	f003 0302 	and.w	r3, r3, #2
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d122      	bne.n	800c6f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	f003 0302 	and.w	r3, r3, #2
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d11b      	bne.n	800c6f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f06f 0202 	mvn.w	r2, #2
 800c6c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f9b5 	bl	800ca48 <HAL_TIM_IC_CaptureCallback>
 800c6de:	e005      	b.n	800c6ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f9a7 	bl	800ca34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f9b8 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d122      	bne.n	800c746 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f003 0304 	and.w	r3, r3, #4
 800c70a:	2b04      	cmp	r3, #4
 800c70c:	d11b      	bne.n	800c746 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f06f 0204 	mvn.w	r2, #4
 800c716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f98b 	bl	800ca48 <HAL_TIM_IC_CaptureCallback>
 800c732:	e005      	b.n	800c740 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f97d 	bl	800ca34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f98e 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	f003 0308 	and.w	r3, r3, #8
 800c750:	2b08      	cmp	r3, #8
 800c752:	d122      	bne.n	800c79a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f003 0308 	and.w	r3, r3, #8
 800c75e:	2b08      	cmp	r3, #8
 800c760:	d11b      	bne.n	800c79a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f06f 0208 	mvn.w	r2, #8
 800c76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2204      	movs	r2, #4
 800c770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	f003 0303 	and.w	r3, r3, #3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f961 	bl	800ca48 <HAL_TIM_IC_CaptureCallback>
 800c786:	e005      	b.n	800c794 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f953 	bl	800ca34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f964 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	f003 0310 	and.w	r3, r3, #16
 800c7a4:	2b10      	cmp	r3, #16
 800c7a6:	d122      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f003 0310 	and.w	r3, r3, #16
 800c7b2:	2b10      	cmp	r3, #16
 800c7b4:	d11b      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f06f 0210 	mvn.w	r2, #16
 800c7be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2208      	movs	r2, #8
 800c7c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f937 	bl	800ca48 <HAL_TIM_IC_CaptureCallback>
 800c7da:	e005      	b.n	800c7e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f929 	bl	800ca34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f93a 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d10e      	bne.n	800c81a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b01      	cmp	r3, #1
 800c808:	d107      	bne.n	800c81a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0201 	mvn.w	r2, #1
 800c812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7f7 fb1b 	bl	8003e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c824:	2b80      	cmp	r3, #128	; 0x80
 800c826:	d10e      	bne.n	800c846 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c832:	2b80      	cmp	r3, #128	; 0x80
 800c834:	d107      	bne.n	800c846 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c83e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fc6d 	bl	800d120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c850:	2b40      	cmp	r3, #64	; 0x40
 800c852:	d10e      	bne.n	800c872 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c85e:	2b40      	cmp	r3, #64	; 0x40
 800c860:	d107      	bne.n	800c872 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f8ff 	bl	800ca70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	f003 0320 	and.w	r3, r3, #32
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	d10e      	bne.n	800c89e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	f003 0320 	and.w	r3, r3, #32
 800c88a:	2b20      	cmp	r3, #32
 800c88c:	d107      	bne.n	800c89e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f06f 0220 	mvn.w	r2, #32
 800c896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fc37 	bl	800d10c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d101      	bne.n	800c8c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c8be:	2302      	movs	r3, #2
 800c8c0:	e0b4      	b.n	800ca2c <HAL_TIM_PWM_ConfigChannel+0x184>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b0c      	cmp	r3, #12
 800c8d6:	f200 809f 	bhi.w	800ca18 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c915 	.word	0x0800c915
 800c8e4:	0800ca19 	.word	0x0800ca19
 800c8e8:	0800ca19 	.word	0x0800ca19
 800c8ec:	0800ca19 	.word	0x0800ca19
 800c8f0:	0800c955 	.word	0x0800c955
 800c8f4:	0800ca19 	.word	0x0800ca19
 800c8f8:	0800ca19 	.word	0x0800ca19
 800c8fc:	0800ca19 	.word	0x0800ca19
 800c900:	0800c997 	.word	0x0800c997
 800c904:	0800ca19 	.word	0x0800ca19
 800c908:	0800ca19 	.word	0x0800ca19
 800c90c:	0800ca19 	.word	0x0800ca19
 800c910:	0800c9d7 	.word	0x0800c9d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68b9      	ldr	r1, [r7, #8]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f952 	bl	800cbc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	699a      	ldr	r2, [r3, #24]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f042 0208 	orr.w	r2, r2, #8
 800c92e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	699a      	ldr	r2, [r3, #24]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f022 0204 	bic.w	r2, r2, #4
 800c93e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6999      	ldr	r1, [r3, #24]
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	691a      	ldr	r2, [r3, #16]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	430a      	orrs	r2, r1
 800c950:	619a      	str	r2, [r3, #24]
      break;
 800c952:	e062      	b.n	800ca1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68b9      	ldr	r1, [r7, #8]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 f9a2 	bl	800cca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	699a      	ldr	r2, [r3, #24]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c96e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c97e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6999      	ldr	r1, [r3, #24]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	021a      	lsls	r2, r3, #8
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	430a      	orrs	r2, r1
 800c992:	619a      	str	r2, [r3, #24]
      break;
 800c994:	e041      	b.n	800ca1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68b9      	ldr	r1, [r7, #8]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 f9f7 	bl	800cd90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	69da      	ldr	r2, [r3, #28]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f042 0208 	orr.w	r2, r2, #8
 800c9b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	69da      	ldr	r2, [r3, #28]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f022 0204 	bic.w	r2, r2, #4
 800c9c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69d9      	ldr	r1, [r3, #28]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	691a      	ldr	r2, [r3, #16]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	61da      	str	r2, [r3, #28]
      break;
 800c9d4:	e021      	b.n	800ca1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68b9      	ldr	r1, [r7, #8]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 fa4b 	bl	800ce78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	69da      	ldr	r2, [r3, #28]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69da      	ldr	r2, [r3, #28]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69d9      	ldr	r1, [r3, #28]
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	021a      	lsls	r2, r3, #8
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	61da      	str	r2, [r3, #28]
      break;
 800ca16:	e000      	b.n	800ca1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ca18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a40      	ldr	r2, [pc, #256]	; (800cb98 <TIM_Base_SetConfig+0x114>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d013      	beq.n	800cac4 <TIM_Base_SetConfig+0x40>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caa2:	d00f      	beq.n	800cac4 <TIM_Base_SetConfig+0x40>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a3d      	ldr	r2, [pc, #244]	; (800cb9c <TIM_Base_SetConfig+0x118>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d00b      	beq.n	800cac4 <TIM_Base_SetConfig+0x40>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a3c      	ldr	r2, [pc, #240]	; (800cba0 <TIM_Base_SetConfig+0x11c>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d007      	beq.n	800cac4 <TIM_Base_SetConfig+0x40>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a3b      	ldr	r2, [pc, #236]	; (800cba4 <TIM_Base_SetConfig+0x120>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d003      	beq.n	800cac4 <TIM_Base_SetConfig+0x40>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a3a      	ldr	r2, [pc, #232]	; (800cba8 <TIM_Base_SetConfig+0x124>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d108      	bne.n	800cad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a2f      	ldr	r2, [pc, #188]	; (800cb98 <TIM_Base_SetConfig+0x114>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d02b      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cae4:	d027      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a2c      	ldr	r2, [pc, #176]	; (800cb9c <TIM_Base_SetConfig+0x118>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d023      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a2b      	ldr	r2, [pc, #172]	; (800cba0 <TIM_Base_SetConfig+0x11c>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d01f      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a2a      	ldr	r2, [pc, #168]	; (800cba4 <TIM_Base_SetConfig+0x120>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d01b      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a29      	ldr	r2, [pc, #164]	; (800cba8 <TIM_Base_SetConfig+0x124>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d017      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a28      	ldr	r2, [pc, #160]	; (800cbac <TIM_Base_SetConfig+0x128>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d013      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a27      	ldr	r2, [pc, #156]	; (800cbb0 <TIM_Base_SetConfig+0x12c>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d00f      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a26      	ldr	r2, [pc, #152]	; (800cbb4 <TIM_Base_SetConfig+0x130>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d00b      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a25      	ldr	r2, [pc, #148]	; (800cbb8 <TIM_Base_SetConfig+0x134>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d007      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a24      	ldr	r2, [pc, #144]	; (800cbbc <TIM_Base_SetConfig+0x138>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d003      	beq.n	800cb36 <TIM_Base_SetConfig+0xb2>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a23      	ldr	r2, [pc, #140]	; (800cbc0 <TIM_Base_SetConfig+0x13c>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d108      	bne.n	800cb48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	689a      	ldr	r2, [r3, #8]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a0a      	ldr	r2, [pc, #40]	; (800cb98 <TIM_Base_SetConfig+0x114>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d003      	beq.n	800cb7c <TIM_Base_SetConfig+0xf8>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a0c      	ldr	r2, [pc, #48]	; (800cba8 <TIM_Base_SetConfig+0x124>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d103      	bne.n	800cb84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	691a      	ldr	r2, [r3, #16]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	615a      	str	r2, [r3, #20]
}
 800cb8a:	bf00      	nop
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	40010000 	.word	0x40010000
 800cb9c:	40000400 	.word	0x40000400
 800cba0:	40000800 	.word	0x40000800
 800cba4:	40000c00 	.word	0x40000c00
 800cba8:	40010400 	.word	0x40010400
 800cbac:	40014000 	.word	0x40014000
 800cbb0:	40014400 	.word	0x40014400
 800cbb4:	40014800 	.word	0x40014800
 800cbb8:	40001800 	.word	0x40001800
 800cbbc:	40001c00 	.word	0x40001c00
 800cbc0:	40002000 	.word	0x40002000

0800cbc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	f023 0201 	bic.w	r2, r3, #1
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f023 0303 	bic.w	r3, r3, #3
 800cbfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f023 0302 	bic.w	r3, r3, #2
 800cc0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a20      	ldr	r2, [pc, #128]	; (800cc9c <TIM_OC1_SetConfig+0xd8>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d003      	beq.n	800cc28 <TIM_OC1_SetConfig+0x64>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a1f      	ldr	r2, [pc, #124]	; (800cca0 <TIM_OC1_SetConfig+0xdc>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d10c      	bne.n	800cc42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	f023 0308 	bic.w	r3, r3, #8
 800cc2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	697a      	ldr	r2, [r7, #20]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f023 0304 	bic.w	r3, r3, #4
 800cc40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a15      	ldr	r2, [pc, #84]	; (800cc9c <TIM_OC1_SetConfig+0xd8>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d003      	beq.n	800cc52 <TIM_OC1_SetConfig+0x8e>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a14      	ldr	r2, [pc, #80]	; (800cca0 <TIM_OC1_SetConfig+0xdc>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d111      	bne.n	800cc76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	693a      	ldr	r2, [r7, #16]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	621a      	str	r2, [r3, #32]
}
 800cc90:	bf00      	nop
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	40010000 	.word	0x40010000
 800cca0:	40010400 	.word	0x40010400

0800cca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	f023 0210 	bic.w	r2, r3, #16
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a1b      	ldr	r3, [r3, #32]
 800ccbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	021b      	lsls	r3, r3, #8
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f023 0320 	bic.w	r3, r3, #32
 800ccee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	011b      	lsls	r3, r3, #4
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a22      	ldr	r2, [pc, #136]	; (800cd88 <TIM_OC2_SetConfig+0xe4>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d003      	beq.n	800cd0c <TIM_OC2_SetConfig+0x68>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a21      	ldr	r2, [pc, #132]	; (800cd8c <TIM_OC2_SetConfig+0xe8>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d10d      	bne.n	800cd28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	011b      	lsls	r3, r3, #4
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a17      	ldr	r2, [pc, #92]	; (800cd88 <TIM_OC2_SetConfig+0xe4>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d003      	beq.n	800cd38 <TIM_OC2_SetConfig+0x94>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a16      	ldr	r2, [pc, #88]	; (800cd8c <TIM_OC2_SetConfig+0xe8>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d113      	bne.n	800cd60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	685a      	ldr	r2, [r3, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	621a      	str	r2, [r3, #32]
}
 800cd7a:	bf00      	nop
 800cd7c:	371c      	adds	r7, #28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	40010000 	.word	0x40010000
 800cd8c:	40010400 	.word	0x40010400

0800cd90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	021b      	lsls	r3, r3, #8
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a21      	ldr	r2, [pc, #132]	; (800ce70 <TIM_OC3_SetConfig+0xe0>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d003      	beq.n	800cdf6 <TIM_OC3_SetConfig+0x66>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4a20      	ldr	r2, [pc, #128]	; (800ce74 <TIM_OC3_SetConfig+0xe4>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d10d      	bne.n	800ce12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	021b      	lsls	r3, r3, #8
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <TIM_OC3_SetConfig+0xe0>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d003      	beq.n	800ce22 <TIM_OC3_SetConfig+0x92>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a15      	ldr	r2, [pc, #84]	; (800ce74 <TIM_OC3_SetConfig+0xe4>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d113      	bne.n	800ce4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	011b      	lsls	r3, r3, #4
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	011b      	lsls	r3, r3, #4
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	697a      	ldr	r2, [r7, #20]
 800ce62:	621a      	str	r2, [r3, #32]
}
 800ce64:	bf00      	nop
 800ce66:	371c      	adds	r7, #28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr
 800ce70:	40010000 	.word	0x40010000
 800ce74:	40010400 	.word	0x40010400

0800ce78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	021b      	lsls	r3, r3, #8
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	031b      	lsls	r3, r3, #12
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	4313      	orrs	r3, r2
 800cece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a12      	ldr	r2, [pc, #72]	; (800cf1c <TIM_OC4_SetConfig+0xa4>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d003      	beq.n	800cee0 <TIM_OC4_SetConfig+0x68>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a11      	ldr	r2, [pc, #68]	; (800cf20 <TIM_OC4_SetConfig+0xa8>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d109      	bne.n	800cef4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	019b      	lsls	r3, r3, #6
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	685a      	ldr	r2, [r3, #4]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	693a      	ldr	r2, [r7, #16]
 800cf0c:	621a      	str	r2, [r3, #32]
}
 800cf0e:	bf00      	nop
 800cf10:	371c      	adds	r7, #28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	40010000 	.word	0x40010000
 800cf20:	40010400 	.word	0x40010400

0800cf24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f003 031f 	and.w	r3, r3, #31
 800cf36:	2201      	movs	r2, #1
 800cf38:	fa02 f303 	lsl.w	r3, r2, r3
 800cf3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6a1a      	ldr	r2, [r3, #32]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	43db      	mvns	r3, r3
 800cf46:	401a      	ands	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6a1a      	ldr	r2, [r3, #32]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	f003 031f 	and.w	r3, r3, #31
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	fa01 f303 	lsl.w	r3, r1, r3
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	621a      	str	r2, [r3, #32]
}
 800cf62:	bf00      	nop
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
	...

0800cf70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d101      	bne.n	800cf88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf84:	2302      	movs	r3, #2
 800cf86:	e05a      	b.n	800d03e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a21      	ldr	r2, [pc, #132]	; (800d04c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d022      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfd4:	d01d      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a1d      	ldr	r2, [pc, #116]	; (800d050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d018      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a1b      	ldr	r2, [pc, #108]	; (800d054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d013      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a1a      	ldr	r2, [pc, #104]	; (800d058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d00e      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a18      	ldr	r2, [pc, #96]	; (800d05c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d009      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a17      	ldr	r2, [pc, #92]	; (800d060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d004      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a15      	ldr	r2, [pc, #84]	; (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d10c      	bne.n	800d02c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	4313      	orrs	r3, r2
 800d022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	40010000 	.word	0x40010000
 800d050:	40000400 	.word	0x40000400
 800d054:	40000800 	.word	0x40000800
 800d058:	40000c00 	.word	0x40000c00
 800d05c:	40010400 	.word	0x40010400
 800d060:	40014000 	.word	0x40014000
 800d064:	40001800 	.word	0x40001800

0800d068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d072:	2300      	movs	r3, #0
 800d074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d101      	bne.n	800d084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d080:	2302      	movs	r3, #2
 800d082:	e03d      	b.n	800d100 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	4313      	orrs	r3, r2
 800d098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	695b      	ldr	r3, [r3, #20]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e03f      	b.n	800d1c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7f8 faca 	bl	80056f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2224      	movs	r2, #36	; 0x24
 800d164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68da      	ldr	r2, [r3, #12]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f829 	bl	800d1d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	691a      	ldr	r2, [r3, #16]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d18c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	695a      	ldr	r2, [r3, #20]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d19c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	68da      	ldr	r2, [r3, #12]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	b085      	sub	sp, #20
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	68da      	ldr	r2, [r3, #12]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	430a      	orrs	r2, r1
 800d1ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689a      	ldr	r2, [r3, #8]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	431a      	orrs	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	4313      	orrs	r3, r2
 800d206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d212:	f023 030c 	bic.w	r3, r3, #12
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	6812      	ldr	r2, [r2, #0]
 800d21a:	68f9      	ldr	r1, [r7, #12]
 800d21c:	430b      	orrs	r3, r1
 800d21e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	430a      	orrs	r2, r1
 800d234:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	69db      	ldr	r3, [r3, #28]
 800d23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d23e:	f040 818b 	bne.w	800d558 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4ac1      	ldr	r2, [pc, #772]	; (800d54c <UART_SetConfig+0x37c>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d005      	beq.n	800d258 <UART_SetConfig+0x88>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4abf      	ldr	r2, [pc, #764]	; (800d550 <UART_SetConfig+0x380>)
 800d252:	4293      	cmp	r3, r2
 800d254:	f040 80bd 	bne.w	800d3d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d258:	f7fc fbcc 	bl	80099f4 <HAL_RCC_GetPCLK2Freq>
 800d25c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	461d      	mov	r5, r3
 800d262:	f04f 0600 	mov.w	r6, #0
 800d266:	46a8      	mov	r8, r5
 800d268:	46b1      	mov	r9, r6
 800d26a:	eb18 0308 	adds.w	r3, r8, r8
 800d26e:	eb49 0409 	adc.w	r4, r9, r9
 800d272:	4698      	mov	r8, r3
 800d274:	46a1      	mov	r9, r4
 800d276:	eb18 0805 	adds.w	r8, r8, r5
 800d27a:	eb49 0906 	adc.w	r9, r9, r6
 800d27e:	f04f 0100 	mov.w	r1, #0
 800d282:	f04f 0200 	mov.w	r2, #0
 800d286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d28a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d28e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d292:	4688      	mov	r8, r1
 800d294:	4691      	mov	r9, r2
 800d296:	eb18 0005 	adds.w	r0, r8, r5
 800d29a:	eb49 0106 	adc.w	r1, r9, r6
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	461d      	mov	r5, r3
 800d2a4:	f04f 0600 	mov.w	r6, #0
 800d2a8:	196b      	adds	r3, r5, r5
 800d2aa:	eb46 0406 	adc.w	r4, r6, r6
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	4623      	mov	r3, r4
 800d2b2:	f7f3 fd01 	bl	8000cb8 <__aeabi_uldivmod>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	460c      	mov	r4, r1
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	4ba5      	ldr	r3, [pc, #660]	; (800d554 <UART_SetConfig+0x384>)
 800d2be:	fba3 2302 	umull	r2, r3, r3, r2
 800d2c2:	095b      	lsrs	r3, r3, #5
 800d2c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	461d      	mov	r5, r3
 800d2cc:	f04f 0600 	mov.w	r6, #0
 800d2d0:	46a9      	mov	r9, r5
 800d2d2:	46b2      	mov	sl, r6
 800d2d4:	eb19 0309 	adds.w	r3, r9, r9
 800d2d8:	eb4a 040a 	adc.w	r4, sl, sl
 800d2dc:	4699      	mov	r9, r3
 800d2de:	46a2      	mov	sl, r4
 800d2e0:	eb19 0905 	adds.w	r9, r9, r5
 800d2e4:	eb4a 0a06 	adc.w	sl, sl, r6
 800d2e8:	f04f 0100 	mov.w	r1, #0
 800d2ec:	f04f 0200 	mov.w	r2, #0
 800d2f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2fc:	4689      	mov	r9, r1
 800d2fe:	4692      	mov	sl, r2
 800d300:	eb19 0005 	adds.w	r0, r9, r5
 800d304:	eb4a 0106 	adc.w	r1, sl, r6
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	461d      	mov	r5, r3
 800d30e:	f04f 0600 	mov.w	r6, #0
 800d312:	196b      	adds	r3, r5, r5
 800d314:	eb46 0406 	adc.w	r4, r6, r6
 800d318:	461a      	mov	r2, r3
 800d31a:	4623      	mov	r3, r4
 800d31c:	f7f3 fccc 	bl	8000cb8 <__aeabi_uldivmod>
 800d320:	4603      	mov	r3, r0
 800d322:	460c      	mov	r4, r1
 800d324:	461a      	mov	r2, r3
 800d326:	4b8b      	ldr	r3, [pc, #556]	; (800d554 <UART_SetConfig+0x384>)
 800d328:	fba3 1302 	umull	r1, r3, r3, r2
 800d32c:	095b      	lsrs	r3, r3, #5
 800d32e:	2164      	movs	r1, #100	; 0x64
 800d330:	fb01 f303 	mul.w	r3, r1, r3
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	3332      	adds	r3, #50	; 0x32
 800d33a:	4a86      	ldr	r2, [pc, #536]	; (800d554 <UART_SetConfig+0x384>)
 800d33c:	fba2 2303 	umull	r2, r3, r2, r3
 800d340:	095b      	lsrs	r3, r3, #5
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d348:	4498      	add	r8, r3
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	461d      	mov	r5, r3
 800d34e:	f04f 0600 	mov.w	r6, #0
 800d352:	46a9      	mov	r9, r5
 800d354:	46b2      	mov	sl, r6
 800d356:	eb19 0309 	adds.w	r3, r9, r9
 800d35a:	eb4a 040a 	adc.w	r4, sl, sl
 800d35e:	4699      	mov	r9, r3
 800d360:	46a2      	mov	sl, r4
 800d362:	eb19 0905 	adds.w	r9, r9, r5
 800d366:	eb4a 0a06 	adc.w	sl, sl, r6
 800d36a:	f04f 0100 	mov.w	r1, #0
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d37a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d37e:	4689      	mov	r9, r1
 800d380:	4692      	mov	sl, r2
 800d382:	eb19 0005 	adds.w	r0, r9, r5
 800d386:	eb4a 0106 	adc.w	r1, sl, r6
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	461d      	mov	r5, r3
 800d390:	f04f 0600 	mov.w	r6, #0
 800d394:	196b      	adds	r3, r5, r5
 800d396:	eb46 0406 	adc.w	r4, r6, r6
 800d39a:	461a      	mov	r2, r3
 800d39c:	4623      	mov	r3, r4
 800d39e:	f7f3 fc8b 	bl	8000cb8 <__aeabi_uldivmod>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	4b6a      	ldr	r3, [pc, #424]	; (800d554 <UART_SetConfig+0x384>)
 800d3aa:	fba3 1302 	umull	r1, r3, r3, r2
 800d3ae:	095b      	lsrs	r3, r3, #5
 800d3b0:	2164      	movs	r1, #100	; 0x64
 800d3b2:	fb01 f303 	mul.w	r3, r1, r3
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	3332      	adds	r3, #50	; 0x32
 800d3bc:	4a65      	ldr	r2, [pc, #404]	; (800d554 <UART_SetConfig+0x384>)
 800d3be:	fba2 2303 	umull	r2, r3, r2, r3
 800d3c2:	095b      	lsrs	r3, r3, #5
 800d3c4:	f003 0207 	and.w	r2, r3, #7
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4442      	add	r2, r8
 800d3ce:	609a      	str	r2, [r3, #8]
 800d3d0:	e26f      	b.n	800d8b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d3d2:	f7fc fafb 	bl	80099cc <HAL_RCC_GetPCLK1Freq>
 800d3d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	461d      	mov	r5, r3
 800d3dc:	f04f 0600 	mov.w	r6, #0
 800d3e0:	46a8      	mov	r8, r5
 800d3e2:	46b1      	mov	r9, r6
 800d3e4:	eb18 0308 	adds.w	r3, r8, r8
 800d3e8:	eb49 0409 	adc.w	r4, r9, r9
 800d3ec:	4698      	mov	r8, r3
 800d3ee:	46a1      	mov	r9, r4
 800d3f0:	eb18 0805 	adds.w	r8, r8, r5
 800d3f4:	eb49 0906 	adc.w	r9, r9, r6
 800d3f8:	f04f 0100 	mov.w	r1, #0
 800d3fc:	f04f 0200 	mov.w	r2, #0
 800d400:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d404:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d408:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d40c:	4688      	mov	r8, r1
 800d40e:	4691      	mov	r9, r2
 800d410:	eb18 0005 	adds.w	r0, r8, r5
 800d414:	eb49 0106 	adc.w	r1, r9, r6
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	461d      	mov	r5, r3
 800d41e:	f04f 0600 	mov.w	r6, #0
 800d422:	196b      	adds	r3, r5, r5
 800d424:	eb46 0406 	adc.w	r4, r6, r6
 800d428:	461a      	mov	r2, r3
 800d42a:	4623      	mov	r3, r4
 800d42c:	f7f3 fc44 	bl	8000cb8 <__aeabi_uldivmod>
 800d430:	4603      	mov	r3, r0
 800d432:	460c      	mov	r4, r1
 800d434:	461a      	mov	r2, r3
 800d436:	4b47      	ldr	r3, [pc, #284]	; (800d554 <UART_SetConfig+0x384>)
 800d438:	fba3 2302 	umull	r2, r3, r3, r2
 800d43c:	095b      	lsrs	r3, r3, #5
 800d43e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	461d      	mov	r5, r3
 800d446:	f04f 0600 	mov.w	r6, #0
 800d44a:	46a9      	mov	r9, r5
 800d44c:	46b2      	mov	sl, r6
 800d44e:	eb19 0309 	adds.w	r3, r9, r9
 800d452:	eb4a 040a 	adc.w	r4, sl, sl
 800d456:	4699      	mov	r9, r3
 800d458:	46a2      	mov	sl, r4
 800d45a:	eb19 0905 	adds.w	r9, r9, r5
 800d45e:	eb4a 0a06 	adc.w	sl, sl, r6
 800d462:	f04f 0100 	mov.w	r1, #0
 800d466:	f04f 0200 	mov.w	r2, #0
 800d46a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d46e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d476:	4689      	mov	r9, r1
 800d478:	4692      	mov	sl, r2
 800d47a:	eb19 0005 	adds.w	r0, r9, r5
 800d47e:	eb4a 0106 	adc.w	r1, sl, r6
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	461d      	mov	r5, r3
 800d488:	f04f 0600 	mov.w	r6, #0
 800d48c:	196b      	adds	r3, r5, r5
 800d48e:	eb46 0406 	adc.w	r4, r6, r6
 800d492:	461a      	mov	r2, r3
 800d494:	4623      	mov	r3, r4
 800d496:	f7f3 fc0f 	bl	8000cb8 <__aeabi_uldivmod>
 800d49a:	4603      	mov	r3, r0
 800d49c:	460c      	mov	r4, r1
 800d49e:	461a      	mov	r2, r3
 800d4a0:	4b2c      	ldr	r3, [pc, #176]	; (800d554 <UART_SetConfig+0x384>)
 800d4a2:	fba3 1302 	umull	r1, r3, r3, r2
 800d4a6:	095b      	lsrs	r3, r3, #5
 800d4a8:	2164      	movs	r1, #100	; 0x64
 800d4aa:	fb01 f303 	mul.w	r3, r1, r3
 800d4ae:	1ad3      	subs	r3, r2, r3
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	3332      	adds	r3, #50	; 0x32
 800d4b4:	4a27      	ldr	r2, [pc, #156]	; (800d554 <UART_SetConfig+0x384>)
 800d4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ba:	095b      	lsrs	r3, r3, #5
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d4c2:	4498      	add	r8, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	461d      	mov	r5, r3
 800d4c8:	f04f 0600 	mov.w	r6, #0
 800d4cc:	46a9      	mov	r9, r5
 800d4ce:	46b2      	mov	sl, r6
 800d4d0:	eb19 0309 	adds.w	r3, r9, r9
 800d4d4:	eb4a 040a 	adc.w	r4, sl, sl
 800d4d8:	4699      	mov	r9, r3
 800d4da:	46a2      	mov	sl, r4
 800d4dc:	eb19 0905 	adds.w	r9, r9, r5
 800d4e0:	eb4a 0a06 	adc.w	sl, sl, r6
 800d4e4:	f04f 0100 	mov.w	r1, #0
 800d4e8:	f04f 0200 	mov.w	r2, #0
 800d4ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d4f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d4f8:	4689      	mov	r9, r1
 800d4fa:	4692      	mov	sl, r2
 800d4fc:	eb19 0005 	adds.w	r0, r9, r5
 800d500:	eb4a 0106 	adc.w	r1, sl, r6
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	461d      	mov	r5, r3
 800d50a:	f04f 0600 	mov.w	r6, #0
 800d50e:	196b      	adds	r3, r5, r5
 800d510:	eb46 0406 	adc.w	r4, r6, r6
 800d514:	461a      	mov	r2, r3
 800d516:	4623      	mov	r3, r4
 800d518:	f7f3 fbce 	bl	8000cb8 <__aeabi_uldivmod>
 800d51c:	4603      	mov	r3, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	461a      	mov	r2, r3
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <UART_SetConfig+0x384>)
 800d524:	fba3 1302 	umull	r1, r3, r3, r2
 800d528:	095b      	lsrs	r3, r3, #5
 800d52a:	2164      	movs	r1, #100	; 0x64
 800d52c:	fb01 f303 	mul.w	r3, r1, r3
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	3332      	adds	r3, #50	; 0x32
 800d536:	4a07      	ldr	r2, [pc, #28]	; (800d554 <UART_SetConfig+0x384>)
 800d538:	fba2 2303 	umull	r2, r3, r2, r3
 800d53c:	095b      	lsrs	r3, r3, #5
 800d53e:	f003 0207 	and.w	r2, r3, #7
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4442      	add	r2, r8
 800d548:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d54a:	e1b2      	b.n	800d8b2 <UART_SetConfig+0x6e2>
 800d54c:	40011000 	.word	0x40011000
 800d550:	40011400 	.word	0x40011400
 800d554:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4ad7      	ldr	r2, [pc, #860]	; (800d8bc <UART_SetConfig+0x6ec>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d005      	beq.n	800d56e <UART_SetConfig+0x39e>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4ad6      	ldr	r2, [pc, #856]	; (800d8c0 <UART_SetConfig+0x6f0>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	f040 80d1 	bne.w	800d710 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d56e:	f7fc fa41 	bl	80099f4 <HAL_RCC_GetPCLK2Freq>
 800d572:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	469a      	mov	sl, r3
 800d578:	f04f 0b00 	mov.w	fp, #0
 800d57c:	46d0      	mov	r8, sl
 800d57e:	46d9      	mov	r9, fp
 800d580:	eb18 0308 	adds.w	r3, r8, r8
 800d584:	eb49 0409 	adc.w	r4, r9, r9
 800d588:	4698      	mov	r8, r3
 800d58a:	46a1      	mov	r9, r4
 800d58c:	eb18 080a 	adds.w	r8, r8, sl
 800d590:	eb49 090b 	adc.w	r9, r9, fp
 800d594:	f04f 0100 	mov.w	r1, #0
 800d598:	f04f 0200 	mov.w	r2, #0
 800d59c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d5a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d5a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d5a8:	4688      	mov	r8, r1
 800d5aa:	4691      	mov	r9, r2
 800d5ac:	eb1a 0508 	adds.w	r5, sl, r8
 800d5b0:	eb4b 0609 	adc.w	r6, fp, r9
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	f04f 0200 	mov.w	r2, #0
 800d5be:	f04f 0300 	mov.w	r3, #0
 800d5c2:	f04f 0400 	mov.w	r4, #0
 800d5c6:	0094      	lsls	r4, r2, #2
 800d5c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5cc:	008b      	lsls	r3, r1, #2
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	4623      	mov	r3, r4
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	f7f3 fb6f 	bl	8000cb8 <__aeabi_uldivmod>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	460c      	mov	r4, r1
 800d5de:	461a      	mov	r2, r3
 800d5e0:	4bb8      	ldr	r3, [pc, #736]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d5e2:	fba3 2302 	umull	r2, r3, r3, r2
 800d5e6:	095b      	lsrs	r3, r3, #5
 800d5e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	469b      	mov	fp, r3
 800d5f0:	f04f 0c00 	mov.w	ip, #0
 800d5f4:	46d9      	mov	r9, fp
 800d5f6:	46e2      	mov	sl, ip
 800d5f8:	eb19 0309 	adds.w	r3, r9, r9
 800d5fc:	eb4a 040a 	adc.w	r4, sl, sl
 800d600:	4699      	mov	r9, r3
 800d602:	46a2      	mov	sl, r4
 800d604:	eb19 090b 	adds.w	r9, r9, fp
 800d608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d60c:	f04f 0100 	mov.w	r1, #0
 800d610:	f04f 0200 	mov.w	r2, #0
 800d614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d61c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d620:	4689      	mov	r9, r1
 800d622:	4692      	mov	sl, r2
 800d624:	eb1b 0509 	adds.w	r5, fp, r9
 800d628:	eb4c 060a 	adc.w	r6, ip, sl
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	4619      	mov	r1, r3
 800d632:	f04f 0200 	mov.w	r2, #0
 800d636:	f04f 0300 	mov.w	r3, #0
 800d63a:	f04f 0400 	mov.w	r4, #0
 800d63e:	0094      	lsls	r4, r2, #2
 800d640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d644:	008b      	lsls	r3, r1, #2
 800d646:	461a      	mov	r2, r3
 800d648:	4623      	mov	r3, r4
 800d64a:	4628      	mov	r0, r5
 800d64c:	4631      	mov	r1, r6
 800d64e:	f7f3 fb33 	bl	8000cb8 <__aeabi_uldivmod>
 800d652:	4603      	mov	r3, r0
 800d654:	460c      	mov	r4, r1
 800d656:	461a      	mov	r2, r3
 800d658:	4b9a      	ldr	r3, [pc, #616]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d65a:	fba3 1302 	umull	r1, r3, r3, r2
 800d65e:	095b      	lsrs	r3, r3, #5
 800d660:	2164      	movs	r1, #100	; 0x64
 800d662:	fb01 f303 	mul.w	r3, r1, r3
 800d666:	1ad3      	subs	r3, r2, r3
 800d668:	011b      	lsls	r3, r3, #4
 800d66a:	3332      	adds	r3, #50	; 0x32
 800d66c:	4a95      	ldr	r2, [pc, #596]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d66e:	fba2 2303 	umull	r2, r3, r2, r3
 800d672:	095b      	lsrs	r3, r3, #5
 800d674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d678:	4498      	add	r8, r3
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	469b      	mov	fp, r3
 800d67e:	f04f 0c00 	mov.w	ip, #0
 800d682:	46d9      	mov	r9, fp
 800d684:	46e2      	mov	sl, ip
 800d686:	eb19 0309 	adds.w	r3, r9, r9
 800d68a:	eb4a 040a 	adc.w	r4, sl, sl
 800d68e:	4699      	mov	r9, r3
 800d690:	46a2      	mov	sl, r4
 800d692:	eb19 090b 	adds.w	r9, r9, fp
 800d696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d69a:	f04f 0100 	mov.w	r1, #0
 800d69e:	f04f 0200 	mov.w	r2, #0
 800d6a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d6a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d6aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d6ae:	4689      	mov	r9, r1
 800d6b0:	4692      	mov	sl, r2
 800d6b2:	eb1b 0509 	adds.w	r5, fp, r9
 800d6b6:	eb4c 060a 	adc.w	r6, ip, sl
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f04f 0200 	mov.w	r2, #0
 800d6c4:	f04f 0300 	mov.w	r3, #0
 800d6c8:	f04f 0400 	mov.w	r4, #0
 800d6cc:	0094      	lsls	r4, r2, #2
 800d6ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6d2:	008b      	lsls	r3, r1, #2
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	4623      	mov	r3, r4
 800d6d8:	4628      	mov	r0, r5
 800d6da:	4631      	mov	r1, r6
 800d6dc:	f7f3 faec 	bl	8000cb8 <__aeabi_uldivmod>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	4b77      	ldr	r3, [pc, #476]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800d6ec:	095b      	lsrs	r3, r3, #5
 800d6ee:	2164      	movs	r1, #100	; 0x64
 800d6f0:	fb01 f303 	mul.w	r3, r1, r3
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	011b      	lsls	r3, r3, #4
 800d6f8:	3332      	adds	r3, #50	; 0x32
 800d6fa:	4a72      	ldr	r2, [pc, #456]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d700:	095b      	lsrs	r3, r3, #5
 800d702:	f003 020f 	and.w	r2, r3, #15
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4442      	add	r2, r8
 800d70c:	609a      	str	r2, [r3, #8]
 800d70e:	e0d0      	b.n	800d8b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d710:	f7fc f95c 	bl	80099cc <HAL_RCC_GetPCLK1Freq>
 800d714:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	469a      	mov	sl, r3
 800d71a:	f04f 0b00 	mov.w	fp, #0
 800d71e:	46d0      	mov	r8, sl
 800d720:	46d9      	mov	r9, fp
 800d722:	eb18 0308 	adds.w	r3, r8, r8
 800d726:	eb49 0409 	adc.w	r4, r9, r9
 800d72a:	4698      	mov	r8, r3
 800d72c:	46a1      	mov	r9, r4
 800d72e:	eb18 080a 	adds.w	r8, r8, sl
 800d732:	eb49 090b 	adc.w	r9, r9, fp
 800d736:	f04f 0100 	mov.w	r1, #0
 800d73a:	f04f 0200 	mov.w	r2, #0
 800d73e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d742:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d74a:	4688      	mov	r8, r1
 800d74c:	4691      	mov	r9, r2
 800d74e:	eb1a 0508 	adds.w	r5, sl, r8
 800d752:	eb4b 0609 	adc.w	r6, fp, r9
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	4619      	mov	r1, r3
 800d75c:	f04f 0200 	mov.w	r2, #0
 800d760:	f04f 0300 	mov.w	r3, #0
 800d764:	f04f 0400 	mov.w	r4, #0
 800d768:	0094      	lsls	r4, r2, #2
 800d76a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d76e:	008b      	lsls	r3, r1, #2
 800d770:	461a      	mov	r2, r3
 800d772:	4623      	mov	r3, r4
 800d774:	4628      	mov	r0, r5
 800d776:	4631      	mov	r1, r6
 800d778:	f7f3 fa9e 	bl	8000cb8 <__aeabi_uldivmod>
 800d77c:	4603      	mov	r3, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	461a      	mov	r2, r3
 800d782:	4b50      	ldr	r3, [pc, #320]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d784:	fba3 2302 	umull	r2, r3, r3, r2
 800d788:	095b      	lsrs	r3, r3, #5
 800d78a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	469b      	mov	fp, r3
 800d792:	f04f 0c00 	mov.w	ip, #0
 800d796:	46d9      	mov	r9, fp
 800d798:	46e2      	mov	sl, ip
 800d79a:	eb19 0309 	adds.w	r3, r9, r9
 800d79e:	eb4a 040a 	adc.w	r4, sl, sl
 800d7a2:	4699      	mov	r9, r3
 800d7a4:	46a2      	mov	sl, r4
 800d7a6:	eb19 090b 	adds.w	r9, r9, fp
 800d7aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d7ae:	f04f 0100 	mov.w	r1, #0
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d7be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d7c2:	4689      	mov	r9, r1
 800d7c4:	4692      	mov	sl, r2
 800d7c6:	eb1b 0509 	adds.w	r5, fp, r9
 800d7ca:	eb4c 060a 	adc.w	r6, ip, sl
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	f04f 0400 	mov.w	r4, #0
 800d7e0:	0094      	lsls	r4, r2, #2
 800d7e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7e6:	008b      	lsls	r3, r1, #2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4623      	mov	r3, r4
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	f7f3 fa62 	bl	8000cb8 <__aeabi_uldivmod>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4b32      	ldr	r3, [pc, #200]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d7fc:	fba3 1302 	umull	r1, r3, r3, r2
 800d800:	095b      	lsrs	r3, r3, #5
 800d802:	2164      	movs	r1, #100	; 0x64
 800d804:	fb01 f303 	mul.w	r3, r1, r3
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	011b      	lsls	r3, r3, #4
 800d80c:	3332      	adds	r3, #50	; 0x32
 800d80e:	4a2d      	ldr	r2, [pc, #180]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d810:	fba2 2303 	umull	r2, r3, r2, r3
 800d814:	095b      	lsrs	r3, r3, #5
 800d816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d81a:	4498      	add	r8, r3
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	469b      	mov	fp, r3
 800d820:	f04f 0c00 	mov.w	ip, #0
 800d824:	46d9      	mov	r9, fp
 800d826:	46e2      	mov	sl, ip
 800d828:	eb19 0309 	adds.w	r3, r9, r9
 800d82c:	eb4a 040a 	adc.w	r4, sl, sl
 800d830:	4699      	mov	r9, r3
 800d832:	46a2      	mov	sl, r4
 800d834:	eb19 090b 	adds.w	r9, r9, fp
 800d838:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d83c:	f04f 0100 	mov.w	r1, #0
 800d840:	f04f 0200 	mov.w	r2, #0
 800d844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d84c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d850:	4689      	mov	r9, r1
 800d852:	4692      	mov	sl, r2
 800d854:	eb1b 0509 	adds.w	r5, fp, r9
 800d858:	eb4c 060a 	adc.w	r6, ip, sl
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	4619      	mov	r1, r3
 800d862:	f04f 0200 	mov.w	r2, #0
 800d866:	f04f 0300 	mov.w	r3, #0
 800d86a:	f04f 0400 	mov.w	r4, #0
 800d86e:	0094      	lsls	r4, r2, #2
 800d870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d874:	008b      	lsls	r3, r1, #2
 800d876:	461a      	mov	r2, r3
 800d878:	4623      	mov	r3, r4
 800d87a:	4628      	mov	r0, r5
 800d87c:	4631      	mov	r1, r6
 800d87e:	f7f3 fa1b 	bl	8000cb8 <__aeabi_uldivmod>
 800d882:	4603      	mov	r3, r0
 800d884:	460c      	mov	r4, r1
 800d886:	461a      	mov	r2, r3
 800d888:	4b0e      	ldr	r3, [pc, #56]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d88a:	fba3 1302 	umull	r1, r3, r3, r2
 800d88e:	095b      	lsrs	r3, r3, #5
 800d890:	2164      	movs	r1, #100	; 0x64
 800d892:	fb01 f303 	mul.w	r3, r1, r3
 800d896:	1ad3      	subs	r3, r2, r3
 800d898:	011b      	lsls	r3, r3, #4
 800d89a:	3332      	adds	r3, #50	; 0x32
 800d89c:	4a09      	ldr	r2, [pc, #36]	; (800d8c4 <UART_SetConfig+0x6f4>)
 800d89e:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a2:	095b      	lsrs	r3, r3, #5
 800d8a4:	f003 020f 	and.w	r2, r3, #15
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4442      	add	r2, r8
 800d8ae:	609a      	str	r2, [r3, #8]
}
 800d8b0:	e7ff      	b.n	800d8b2 <UART_SetConfig+0x6e2>
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8bc:	40011000 	.word	0x40011000
 800d8c0:	40011400 	.word	0x40011400
 800d8c4:	51eb851f 	.word	0x51eb851f

0800d8c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	b480      	push	{r7}
 800d8cc:	b085      	sub	sp, #20
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	f107 001c 	add.w	r0, r7, #28
 800d8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d8de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d8e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d8e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d8ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d8ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d8f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	431a      	orrs	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	b004      	add	sp, #16
 800d91c:	4770      	bx	lr

0800d91e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d91e:	b480      	push	{r7}
 800d920:	b083      	sub	sp, #12
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2203      	movs	r2, #3
 800d966:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d968:	2002      	movs	r0, #2
 800d96a:	f7f9 fbc5 	bl	80070f8 <HAL_Delay>
  
  return HAL_OK;
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0303 	and.w	r3, r3, #3
}
 800d988:	4618      	mov	r0, r3
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d9b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d9be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d9ce:	f023 030f 	bic.w	r3, r3, #15
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d9da:	2300      	movs	r3, #0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	b2db      	uxtb	r3, r3
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	370c      	adds	r7, #12
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800da02:	b480      	push	{r7}
 800da04:	b085      	sub	sp, #20
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3314      	adds	r3, #20
 800da10:	461a      	mov	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	4413      	add	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
}  
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800da54:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800da5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	4313      	orrs	r3, r2
 800da60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da66:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	431a      	orrs	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da72:	2300      	movs	r3, #0

}
 800da74:	4618      	mov	r0, r3
 800da76:	3714      	adds	r7, #20
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b088      	sub	sp, #32
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da8e:	2310      	movs	r3, #16
 800da90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da92:	2340      	movs	r3, #64	; 0x40
 800da94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da96:	2300      	movs	r3, #0
 800da98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daa0:	f107 0308 	add.w	r3, r7, #8
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7ff ff74 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800daac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab0:	2110      	movs	r1, #16
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 fa40 	bl	800df38 <SDMMC_GetCmdResp1>
 800dab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daba:	69fb      	ldr	r3, [r7, #28]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3720      	adds	r7, #32
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dad2:	2311      	movs	r3, #17
 800dad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dad6:	2340      	movs	r3, #64	; 0x40
 800dad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dada:	2300      	movs	r3, #0
 800dadc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dae4:	f107 0308 	add.w	r3, r7, #8
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff ff52 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800daf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800daf4:	2111      	movs	r1, #17
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fa1e 	bl	800df38 <SDMMC_GetCmdResp1>
 800dafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dafe:	69fb      	ldr	r3, [r7, #28]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3720      	adds	r7, #32
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800db16:	2312      	movs	r3, #18
 800db18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db1a:	2340      	movs	r3, #64	; 0x40
 800db1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db1e:	2300      	movs	r3, #0
 800db20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db28:	f107 0308 	add.w	r3, r7, #8
 800db2c:	4619      	mov	r1, r3
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff ff30 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800db34:	f241 3288 	movw	r2, #5000	; 0x1388
 800db38:	2112      	movs	r1, #18
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f9fc 	bl	800df38 <SDMMC_GetCmdResp1>
 800db40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db42:	69fb      	ldr	r3, [r7, #28]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800db5a:	2318      	movs	r3, #24
 800db5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db5e:	2340      	movs	r3, #64	; 0x40
 800db60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db6c:	f107 0308 	add.w	r3, r7, #8
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7ff ff0e 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800db78:	f241 3288 	movw	r2, #5000	; 0x1388
 800db7c:	2118      	movs	r1, #24
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f9da 	bl	800df38 <SDMMC_GetCmdResp1>
 800db84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db86:	69fb      	ldr	r3, [r7, #28]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3720      	adds	r7, #32
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db9e:	2319      	movs	r3, #25
 800dba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dba2:	2340      	movs	r3, #64	; 0x40
 800dba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dba6:	2300      	movs	r3, #0
 800dba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbb0:	f107 0308 	add.w	r3, r7, #8
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff feec 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbc0:	2119      	movs	r1, #25
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f9b8 	bl	800df38 <SDMMC_GetCmdResp1>
 800dbc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbca:	69fb      	ldr	r3, [r7, #28]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3720      	adds	r7, #32
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dbe0:	230c      	movs	r3, #12
 800dbe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbe4:	2340      	movs	r3, #64	; 0x40
 800dbe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbf0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbf2:	f107 0308 	add.w	r3, r7, #8
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff fecb 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dbfe:	4a05      	ldr	r2, [pc, #20]	; (800dc14 <SDMMC_CmdStopTransfer+0x40>)
 800dc00:	210c      	movs	r1, #12
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f998 	bl	800df38 <SDMMC_GetCmdResp1>
 800dc08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc0a:	69fb      	ldr	r3, [r7, #28]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3720      	adds	r7, #32
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	05f5e100 	.word	0x05f5e100

0800dc18 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08a      	sub	sp, #40	; 0x28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dc28:	2307      	movs	r3, #7
 800dc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc2c:	2340      	movs	r3, #64	; 0x40
 800dc2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc30:	2300      	movs	r3, #0
 800dc32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc38:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc3a:	f107 0310 	add.w	r3, r7, #16
 800dc3e:	4619      	mov	r1, r3
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7ff fea7 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dc46:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc4a:	2107      	movs	r1, #7
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f000 f973 	bl	800df38 <SDMMC_GetCmdResp1>
 800dc52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3728      	adds	r7, #40	; 0x28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b088      	sub	sp, #32
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dc66:	2300      	movs	r3, #0
 800dc68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc72:	2300      	movs	r3, #0
 800dc74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc7c:	f107 0308 	add.w	r3, r7, #8
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7ff fe86 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 f92d 	bl	800dee8 <SDMMC_GetCmdError>
 800dc8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc90:	69fb      	ldr	r3, [r7, #28]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3720      	adds	r7, #32
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b088      	sub	sp, #32
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dca2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dca8:	2308      	movs	r3, #8
 800dcaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcac:	2340      	movs	r3, #64	; 0x40
 800dcae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcba:	f107 0308 	add.w	r3, r7, #8
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff fe67 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fb16 	bl	800e2f8 <SDMMC_GetCmdResp7>
 800dccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcce:	69fb      	ldr	r3, [r7, #28]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3720      	adds	r7, #32
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b088      	sub	sp, #32
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dce6:	2337      	movs	r3, #55	; 0x37
 800dce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcea:	2340      	movs	r3, #64	; 0x40
 800dcec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff fe48 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dd04:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd08:	2137      	movs	r1, #55	; 0x37
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f914 	bl	800df38 <SDMMC_GetCmdResp1>
 800dd10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd12:	69fb      	ldr	r3, [r7, #28]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3720      	adds	r7, #32
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dd32:	2329      	movs	r3, #41	; 0x29
 800dd34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd36:	2340      	movs	r3, #64	; 0x40
 800dd38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd44:	f107 0308 	add.w	r3, r7, #8
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fe22 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 fa23 	bl	800e19c <SDMMC_GetCmdResp3>
 800dd56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd58:	69fb      	ldr	r3, [r7, #28]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3720      	adds	r7, #32
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b088      	sub	sp, #32
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd70:	2306      	movs	r3, #6
 800dd72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd74:	2340      	movs	r3, #64	; 0x40
 800dd76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd82:	f107 0308 	add.w	r3, r7, #8
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff fe03 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800dd8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd92:	2106      	movs	r1, #6
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f8cf 	bl	800df38 <SDMMC_GetCmdResp1>
 800dd9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3720      	adds	r7, #32
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b088      	sub	sp, #32
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ddb2:	2333      	movs	r3, #51	; 0x33
 800ddb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddb6:	2340      	movs	r3, #64	; 0x40
 800ddb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddc4:	f107 0308 	add.w	r3, r7, #8
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff fde2 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ddd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddd4:	2133      	movs	r1, #51	; 0x33
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 f8ae 	bl	800df38 <SDMMC_GetCmdResp1>
 800dddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddde:	69fb      	ldr	r3, [r7, #28]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3720      	adds	r7, #32
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b088      	sub	sp, #32
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ddf8:	23c0      	movs	r3, #192	; 0xc0
 800ddfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de06:	f107 0308 	add.w	r3, r7, #8
 800de0a:	4619      	mov	r1, r3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff fdc1 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 f97c 	bl	800e110 <SDMMC_GetCmdResp2>
 800de18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de1a:	69fb      	ldr	r3, [r7, #28]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3720      	adds	r7, #32
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800de32:	2309      	movs	r3, #9
 800de34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800de36:	23c0      	movs	r3, #192	; 0xc0
 800de38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de3a:	2300      	movs	r3, #0
 800de3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de44:	f107 0308 	add.w	r3, r7, #8
 800de48:	4619      	mov	r1, r3
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7ff fda2 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f95d 	bl	800e110 <SDMMC_GetCmdResp2>
 800de56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de58:	69fb      	ldr	r3, [r7, #28]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3720      	adds	r7, #32
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b088      	sub	sp, #32
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de6c:	2300      	movs	r3, #0
 800de6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de70:	2303      	movs	r3, #3
 800de72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de74:	2340      	movs	r3, #64	; 0x40
 800de76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fd83 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	2103      	movs	r1, #3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f9bc 	bl	800e210 <SDMMC_GetCmdResp6>
 800de98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de9a:	69fb      	ldr	r3, [r7, #28]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3720      	adds	r7, #32
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b088      	sub	sp, #32
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800deb2:	230d      	movs	r3, #13
 800deb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800deb6:	2340      	movs	r3, #64	; 0x40
 800deb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800deba:	2300      	movs	r3, #0
 800debc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800debe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dec2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dec4:	f107 0308 	add.w	r3, r7, #8
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff fd62 	bl	800d994 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ded0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ded4:	210d      	movs	r1, #13
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 f82e 	bl	800df38 <SDMMC_GetCmdResp1>
 800dedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dede:	69fb      	ldr	r3, [r7, #28]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dee8:	b490      	push	{r4, r7}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800def0:	4b0f      	ldr	r3, [pc, #60]	; (800df30 <SDMMC_GetCmdError+0x48>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a0f      	ldr	r2, [pc, #60]	; (800df34 <SDMMC_GetCmdError+0x4c>)
 800def6:	fba2 2303 	umull	r2, r3, r2, r3
 800defa:	0a5b      	lsrs	r3, r3, #9
 800defc:	f241 3288 	movw	r2, #5000	; 0x1388
 800df00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df04:	4623      	mov	r3, r4
 800df06:	1e5c      	subs	r4, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df10:	e009      	b.n	800df26 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0f2      	beq.n	800df04 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	22c5      	movs	r2, #197	; 0xc5
 800df22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bc90      	pop	{r4, r7}
 800df2e:	4770      	bx	lr
 800df30:	20000000 	.word	0x20000000
 800df34:	10624dd3 	.word	0x10624dd3

0800df38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df38:	b590      	push	{r4, r7, lr}
 800df3a:	b087      	sub	sp, #28
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	460b      	mov	r3, r1
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df46:	4b6f      	ldr	r3, [pc, #444]	; (800e104 <SDMMC_GetCmdResp1+0x1cc>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a6f      	ldr	r2, [pc, #444]	; (800e108 <SDMMC_GetCmdResp1+0x1d0>)
 800df4c:	fba2 2303 	umull	r2, r3, r2, r3
 800df50:	0a5b      	lsrs	r3, r3, #9
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df58:	4623      	mov	r3, r4
 800df5a:	1e5c      	subs	r4, r3, #1
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d102      	bne.n	800df66 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df64:	e0c9      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0f0      	beq.n	800df58 <SDMMC_GetCmdResp1+0x20>
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1eb      	bne.n	800df58 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d004      	beq.n	800df96 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2204      	movs	r2, #4
 800df90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df92:	2304      	movs	r3, #4
 800df94:	e0b1      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d004      	beq.n	800dfac <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e0a6      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	22c5      	movs	r2, #197	; 0xc5
 800dfb0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7ff fd18 	bl	800d9e8 <SDIO_GetCommandResponse>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	461a      	mov	r2, r3
 800dfbc:	7afb      	ldrb	r3, [r7, #11]
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d001      	beq.n	800dfc6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e099      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff fd1a 	bl	800da02 <SDIO_GetResponse>
 800dfce:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	4b4e      	ldr	r3, [pc, #312]	; (800e10c <SDMMC_GetCmdResp1+0x1d4>)
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	e08d      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	da02      	bge.n	800dfea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dfe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dfe8:	e087      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dff4:	2340      	movs	r3, #64	; 0x40
 800dff6:	e080      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e002:	2380      	movs	r3, #128	; 0x80
 800e004:	e079      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e014:	e071      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e020:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e024:	e069      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e034:	e061      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e044:	e059      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e054:	e051      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e064:	e049      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e074:	e041      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e084:	e039      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e094:	e031      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0a4:	e029      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e0b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e0b4:	e021      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e0c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e0c4:	e019      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e0d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e0d4:	e011      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e0e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e0e4:	e009      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	f003 0308 	and.w	r3, r3, #8
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e0f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e0f4:	e001      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	371c      	adds	r7, #28
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd90      	pop	{r4, r7, pc}
 800e102:	bf00      	nop
 800e104:	20000000 	.word	0x20000000
 800e108:	10624dd3 	.word	0x10624dd3
 800e10c:	fdffe008 	.word	0xfdffe008

0800e110 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e110:	b490      	push	{r4, r7}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e118:	4b1e      	ldr	r3, [pc, #120]	; (800e194 <SDMMC_GetCmdResp2+0x84>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a1e      	ldr	r2, [pc, #120]	; (800e198 <SDMMC_GetCmdResp2+0x88>)
 800e11e:	fba2 2303 	umull	r2, r3, r2, r3
 800e122:	0a5b      	lsrs	r3, r3, #9
 800e124:	f241 3288 	movw	r2, #5000	; 0x1388
 800e128:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e12c:	4623      	mov	r3, r4
 800e12e:	1e5c      	subs	r4, r3, #1
 800e130:	2b00      	cmp	r3, #0
 800e132:	d102      	bne.n	800e13a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e138:	e026      	b.n	800e188 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e146:	2b00      	cmp	r3, #0
 800e148:	d0f0      	beq.n	800e12c <SDMMC_GetCmdResp2+0x1c>
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1eb      	bne.n	800e12c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d004      	beq.n	800e16a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2204      	movs	r2, #4
 800e164:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e166:	2304      	movs	r3, #4
 800e168:	e00e      	b.n	800e188 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e16e:	f003 0301 	and.w	r3, r3, #1
 800e172:	2b00      	cmp	r3, #0
 800e174:	d004      	beq.n	800e180 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e003      	b.n	800e188 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	22c5      	movs	r2, #197	; 0xc5
 800e184:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bc90      	pop	{r4, r7}
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	20000000 	.word	0x20000000
 800e198:	10624dd3 	.word	0x10624dd3

0800e19c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e19c:	b490      	push	{r4, r7}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1a4:	4b18      	ldr	r3, [pc, #96]	; (800e208 <SDMMC_GetCmdResp3+0x6c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a18      	ldr	r2, [pc, #96]	; (800e20c <SDMMC_GetCmdResp3+0x70>)
 800e1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ae:	0a5b      	lsrs	r3, r3, #9
 800e1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e1b8:	4623      	mov	r3, r4
 800e1ba:	1e5c      	subs	r4, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d102      	bne.n	800e1c6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1c4:	e01b      	b.n	800e1fe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d0f0      	beq.n	800e1b8 <SDMMC_GetCmdResp3+0x1c>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1eb      	bne.n	800e1b8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1e4:	f003 0304 	and.w	r3, r3, #4
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d004      	beq.n	800e1f6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2204      	movs	r2, #4
 800e1f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1f2:	2304      	movs	r3, #4
 800e1f4:	e003      	b.n	800e1fe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	22c5      	movs	r2, #197	; 0xc5
 800e1fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bc90      	pop	{r4, r7}
 800e206:	4770      	bx	lr
 800e208:	20000000 	.word	0x20000000
 800e20c:	10624dd3 	.word	0x10624dd3

0800e210 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	460b      	mov	r3, r1
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e21e:	4b34      	ldr	r3, [pc, #208]	; (800e2f0 <SDMMC_GetCmdResp6+0xe0>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a34      	ldr	r2, [pc, #208]	; (800e2f4 <SDMMC_GetCmdResp6+0xe4>)
 800e224:	fba2 2303 	umull	r2, r3, r2, r3
 800e228:	0a5b      	lsrs	r3, r3, #9
 800e22a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e22e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e232:	4623      	mov	r3, r4
 800e234:	1e5c      	subs	r4, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d102      	bne.n	800e240 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e23a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e23e:	e052      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e244:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d0f0      	beq.n	800e232 <SDMMC_GetCmdResp6+0x22>
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1eb      	bne.n	800e232 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25e:	f003 0304 	and.w	r3, r3, #4
 800e262:	2b00      	cmp	r3, #0
 800e264:	d004      	beq.n	800e270 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2204      	movs	r2, #4
 800e26a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e26c:	2304      	movs	r3, #4
 800e26e:	e03a      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d004      	beq.n	800e286 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2201      	movs	r2, #1
 800e280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e282:	2301      	movs	r3, #1
 800e284:	e02f      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7ff fbae 	bl	800d9e8 <SDIO_GetCommandResponse>
 800e28c:	4603      	mov	r3, r0
 800e28e:	461a      	mov	r2, r3
 800e290:	7afb      	ldrb	r3, [r7, #11]
 800e292:	4293      	cmp	r3, r2
 800e294:	d001      	beq.n	800e29a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e296:	2301      	movs	r3, #1
 800e298:	e025      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	22c5      	movs	r2, #197	; 0xc5
 800e29e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff fbad 	bl	800da02 <SDIO_GetResponse>
 800e2a8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d106      	bne.n	800e2c2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	0c1b      	lsrs	r3, r3, #16
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e011      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2d0:	e009      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2e0:	e001      	b.n	800e2e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	371c      	adds	r7, #28
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd90      	pop	{r4, r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000000 	.word	0x20000000
 800e2f4:	10624dd3 	.word	0x10624dd3

0800e2f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e2f8:	b490      	push	{r4, r7}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e300:	4b21      	ldr	r3, [pc, #132]	; (800e388 <SDMMC_GetCmdResp7+0x90>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a21      	ldr	r2, [pc, #132]	; (800e38c <SDMMC_GetCmdResp7+0x94>)
 800e306:	fba2 2303 	umull	r2, r3, r2, r3
 800e30a:	0a5b      	lsrs	r3, r3, #9
 800e30c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e310:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e314:	4623      	mov	r3, r4
 800e316:	1e5c      	subs	r4, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e31c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e320:	e02c      	b.n	800e37c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e326:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d0f0      	beq.n	800e314 <SDMMC_GetCmdResp7+0x1c>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1eb      	bne.n	800e314 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e340:	f003 0304 	and.w	r3, r3, #4
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2204      	movs	r2, #4
 800e34c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e34e:	2304      	movs	r3, #4
 800e350:	e014      	b.n	800e37c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e356:	f003 0301 	and.w	r3, r3, #1
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d004      	beq.n	800e368 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2201      	movs	r2, #1
 800e362:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e364:	2301      	movs	r3, #1
 800e366:	e009      	b.n	800e37c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2240      	movs	r2, #64	; 0x40
 800e378:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e37a:	2300      	movs	r3, #0
  
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bc90      	pop	{r4, r7}
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	20000000 	.word	0x20000000
 800e38c:	10624dd3 	.word	0x10624dd3

0800e390 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e394:	4904      	ldr	r1, [pc, #16]	; (800e3a8 <MX_FATFS_Init+0x18>)
 800e396:	4805      	ldr	r0, [pc, #20]	; (800e3ac <MX_FATFS_Init+0x1c>)
 800e398:	f003 fb9c 	bl	8011ad4 <FATFS_LinkDriver>
 800e39c:	4603      	mov	r3, r0
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <MX_FATFS_Init+0x20>)
 800e3a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e3a4:	bf00      	nop
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20039da0 	.word	0x20039da0
 800e3ac:	08017fb0 	.word	0x08017fb0
 800e3b0:	20039d9c 	.word	0x20039d9c

0800e3b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e3be:	f000 f896 	bl	800e4ee <BSP_SD_IsDetected>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d001      	beq.n	800e3cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e012      	b.n	800e3f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e3cc:	480b      	ldr	r0, [pc, #44]	; (800e3fc <BSP_SD_Init+0x48>)
 800e3ce:	f7fb ffa5 	bl	800a31c <HAL_SD_Init>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d109      	bne.n	800e3f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e3dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e3e0:	4806      	ldr	r0, [pc, #24]	; (800e3fc <BSP_SD_Init+0x48>)
 800e3e2:	f7fc fd4f 	bl	800ae84 <HAL_SD_ConfigWideBusOperation>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e3f0:	79fb      	ldrb	r3, [r7, #7]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	20039b98 	.word	0x20039b98

0800e400 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	68f9      	ldr	r1, [r7, #12]
 800e416:	4806      	ldr	r0, [pc, #24]	; (800e430 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e418:	f7fc f810 	bl	800a43c <HAL_SD_ReadBlocks_DMA>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	20039b98 	.word	0x20039b98

0800e434 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e440:	2300      	movs	r3, #0
 800e442:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	68f9      	ldr	r1, [r7, #12]
 800e44a:	4806      	ldr	r0, [pc, #24]	; (800e464 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e44c:	f7fc f8de 	bl	800a60c <HAL_SD_WriteBlocks_DMA>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	20039b98 	.word	0x20039b98

0800e468 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e46c:	4805      	ldr	r0, [pc, #20]	; (800e484 <BSP_SD_GetCardState+0x1c>)
 800e46e:	f7fc fd85 	bl	800af7c <HAL_SD_GetCardState>
 800e472:	4603      	mov	r3, r0
 800e474:	2b04      	cmp	r3, #4
 800e476:	bf14      	ite	ne
 800e478:	2301      	movne	r3, #1
 800e47a:	2300      	moveq	r3, #0
 800e47c:	b2db      	uxtb	r3, r3
}
 800e47e:	4618      	mov	r0, r3
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20039b98 	.word	0x20039b98

0800e488 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	4803      	ldr	r0, [pc, #12]	; (800e4a0 <BSP_SD_GetCardInfo+0x18>)
 800e494:	f7fc fcca 	bl	800ae2c <HAL_SD_GetCardInfo>
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	20039b98 	.word	0x20039b98

0800e4a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e4ac:	f000 f818 	bl	800e4e0 <BSP_SD_AbortCallback>
}
 800e4b0:	bf00      	nop
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e4c0:	f000 f9a8 	bl	800e814 <BSP_SD_WriteCpltCallback>
}
 800e4c4:	bf00      	nop
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e4d4:	f000 f9aa 	bl	800e82c <BSP_SD_ReadCpltCallback>
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	af00      	add	r7, sp, #0

}
 800e4e4:	bf00      	nop
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e4f8:	f000 f80c 	bl	800e514 <BSP_PlatformIsDetected>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e502:	2300      	movs	r3, #0
 800e504:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e506:	79fb      	ldrb	r3, [r7, #7]
 800e508:	b2db      	uxtb	r3, r3
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
	...

0800e514 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e51a:	2301      	movs	r3, #1
 800e51c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e51e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e522:	4806      	ldr	r0, [pc, #24]	; (800e53c <BSP_PlatformIsDetected+0x28>)
 800e524:	f7fa f866 	bl	80085f4 <HAL_GPIO_ReadPin>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e52e:	2300      	movs	r3, #0
 800e530:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e532:	79fb      	ldrb	r3, [r7, #7]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	40020000 	.word	0x40020000

0800e540 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e548:	f7f8 fdca 	bl	80070e0 <HAL_GetTick>
 800e54c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e54e:	e006      	b.n	800e55e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e550:	f7ff ff8a 	bl	800e468 <BSP_SD_GetCardState>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d101      	bne.n	800e55e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	e009      	b.n	800e572 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e55e:	f7f8 fdbf 	bl	80070e0 <HAL_GetTick>
 800e562:	4602      	mov	r2, r0
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d8f0      	bhi.n	800e550 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e56e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
	...

0800e57c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e586:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <SD_CheckStatus+0x38>)
 800e588:	2201      	movs	r2, #1
 800e58a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e58c:	f7ff ff6c 	bl	800e468 <BSP_SD_GetCardState>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d107      	bne.n	800e5a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e596:	4b07      	ldr	r3, [pc, #28]	; (800e5b4 <SD_CheckStatus+0x38>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	f023 0301 	bic.w	r3, r3, #1
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	4b04      	ldr	r3, [pc, #16]	; (800e5b4 <SD_CheckStatus+0x38>)
 800e5a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e5a6:	4b03      	ldr	r3, [pc, #12]	; (800e5b4 <SD_CheckStatus+0x38>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	b2db      	uxtb	r3, r3
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20000009 	.word	0x20000009

0800e5b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	4603      	mov	r3, r0
 800e5c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e5c2:	f7ff fef7 	bl	800e3b4 <BSP_SD_Init>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d107      	bne.n	800e5dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e5cc:	79fb      	ldrb	r3, [r7, #7]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7ff ffd4 	bl	800e57c <SD_CheckStatus>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	4b04      	ldr	r3, [pc, #16]	; (800e5ec <SD_initialize+0x34>)
 800e5da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e5dc:	4b03      	ldr	r3, [pc, #12]	; (800e5ec <SD_initialize+0x34>)
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	b2db      	uxtb	r3, r3
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20000009 	.word	0x20000009

0800e5f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7ff ffbd 	bl	800e57c <SD_CheckStatus>
 800e602:	4603      	mov	r3, r0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b086      	sub	sp, #24
 800e610:	af00      	add	r7, sp, #0
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	607a      	str	r2, [r7, #4]
 800e616:	603b      	str	r3, [r7, #0]
 800e618:	4603      	mov	r3, r0
 800e61a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e620:	f247 5030 	movw	r0, #30000	; 0x7530
 800e624:	f7ff ff8c 	bl	800e540 <SD_CheckStatusWithTimeout>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	da01      	bge.n	800e632 <SD_read+0x26>
  {
    return res;
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	e03b      	b.n	800e6aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	6879      	ldr	r1, [r7, #4]
 800e636:	68b8      	ldr	r0, [r7, #8]
 800e638:	f7ff fee2 	bl	800e400 <BSP_SD_ReadBlocks_DMA>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d132      	bne.n	800e6a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e642:	4b1c      	ldr	r3, [pc, #112]	; (800e6b4 <SD_read+0xa8>)
 800e644:	2200      	movs	r2, #0
 800e646:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e648:	f7f8 fd4a 	bl	80070e0 <HAL_GetTick>
 800e64c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e64e:	bf00      	nop
 800e650:	4b18      	ldr	r3, [pc, #96]	; (800e6b4 <SD_read+0xa8>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d108      	bne.n	800e66a <SD_read+0x5e>
 800e658:	f7f8 fd42 	bl	80070e0 <HAL_GetTick>
 800e65c:	4602      	mov	r2, r0
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	f247 522f 	movw	r2, #29999	; 0x752f
 800e666:	4293      	cmp	r3, r2
 800e668:	d9f2      	bls.n	800e650 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e66a:	4b12      	ldr	r3, [pc, #72]	; (800e6b4 <SD_read+0xa8>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d102      	bne.n	800e678 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	75fb      	strb	r3, [r7, #23]
 800e676:	e017      	b.n	800e6a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e678:	4b0e      	ldr	r3, [pc, #56]	; (800e6b4 <SD_read+0xa8>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e67e:	f7f8 fd2f 	bl	80070e0 <HAL_GetTick>
 800e682:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e684:	e007      	b.n	800e696 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e686:	f7ff feef 	bl	800e468 <BSP_SD_GetCardState>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <SD_read+0x8a>
          {
            res = RES_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e694:	e008      	b.n	800e6a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e696:	f7f8 fd23 	bl	80070e0 <HAL_GetTick>
 800e69a:	4602      	mov	r2, r0
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d9ee      	bls.n	800e686 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20037434 	.word	0x20037434

0800e6b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
 800e6c2:	603b      	str	r3, [r7, #0]
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e6cc:	4b24      	ldr	r3, [pc, #144]	; (800e760 <SD_write+0xa8>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e6d2:	f247 5030 	movw	r0, #30000	; 0x7530
 800e6d6:	f7ff ff33 	bl	800e540 <SD_CheckStatusWithTimeout>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da01      	bge.n	800e6e4 <SD_write+0x2c>
  {
    return res;
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	e038      	b.n	800e756 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	68b8      	ldr	r0, [r7, #8]
 800e6ea:	f7ff fea3 	bl	800e434 <BSP_SD_WriteBlocks_DMA>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d12f      	bne.n	800e754 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e6f4:	f7f8 fcf4 	bl	80070e0 <HAL_GetTick>
 800e6f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e6fa:	bf00      	nop
 800e6fc:	4b18      	ldr	r3, [pc, #96]	; (800e760 <SD_write+0xa8>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d108      	bne.n	800e716 <SD_write+0x5e>
 800e704:	f7f8 fcec 	bl	80070e0 <HAL_GetTick>
 800e708:	4602      	mov	r2, r0
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e712:	4293      	cmp	r3, r2
 800e714:	d9f2      	bls.n	800e6fc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e716:	4b12      	ldr	r3, [pc, #72]	; (800e760 <SD_write+0xa8>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d102      	bne.n	800e724 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e71e:	2301      	movs	r3, #1
 800e720:	75fb      	strb	r3, [r7, #23]
 800e722:	e017      	b.n	800e754 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e724:	4b0e      	ldr	r3, [pc, #56]	; (800e760 <SD_write+0xa8>)
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e72a:	f7f8 fcd9 	bl	80070e0 <HAL_GetTick>
 800e72e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e730:	e007      	b.n	800e742 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e732:	f7ff fe99 	bl	800e468 <BSP_SD_GetCardState>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d102      	bne.n	800e742 <SD_write+0x8a>
          {
            res = RES_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	75fb      	strb	r3, [r7, #23]
            break;
 800e740:	e008      	b.n	800e754 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e742:	f7f8 fccd 	bl	80070e0 <HAL_GetTick>
 800e746:	4602      	mov	r2, r0
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e750:	4293      	cmp	r3, r2
 800e752:	d9ee      	bls.n	800e732 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e754:	7dfb      	ldrb	r3, [r7, #23]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20037430 	.word	0x20037430

0800e764 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b08c      	sub	sp, #48	; 0x30
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	603a      	str	r2, [r7, #0]
 800e76e:	71fb      	strb	r3, [r7, #7]
 800e770:	460b      	mov	r3, r1
 800e772:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e77a:	4b25      	ldr	r3, [pc, #148]	; (800e810 <SD_ioctl+0xac>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	f003 0301 	and.w	r3, r3, #1
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <SD_ioctl+0x28>
 800e788:	2303      	movs	r3, #3
 800e78a:	e03c      	b.n	800e806 <SD_ioctl+0xa2>

  switch (cmd)
 800e78c:	79bb      	ldrb	r3, [r7, #6]
 800e78e:	2b03      	cmp	r3, #3
 800e790:	d834      	bhi.n	800e7fc <SD_ioctl+0x98>
 800e792:	a201      	add	r2, pc, #4	; (adr r2, 800e798 <SD_ioctl+0x34>)
 800e794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e798:	0800e7a9 	.word	0x0800e7a9
 800e79c:	0800e7b1 	.word	0x0800e7b1
 800e7a0:	0800e7c9 	.word	0x0800e7c9
 800e7a4:	0800e7e3 	.word	0x0800e7e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7ae:	e028      	b.n	800e802 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7b0:	f107 030c 	add.w	r3, r7, #12
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff fe67 	bl	800e488 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7c6:	e01c      	b.n	800e802 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7c8:	f107 030c 	add.w	r3, r7, #12
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff fe5b 	bl	800e488 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7e0:	e00f      	b.n	800e802 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7e2:	f107 030c 	add.w	r3, r7, #12
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff fe4e 	bl	800e488 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	0a5a      	lsrs	r2, r3, #9
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7fa:	e002      	b.n	800e802 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e7fc:	2304      	movs	r3, #4
 800e7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e806:	4618      	mov	r0, r3
 800e808:	3730      	adds	r7, #48	; 0x30
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	20000009 	.word	0x20000009

0800e814 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e818:	4b03      	ldr	r3, [pc, #12]	; (800e828 <BSP_SD_WriteCpltCallback+0x14>)
 800e81a:	2201      	movs	r2, #1
 800e81c:	601a      	str	r2, [r3, #0]
}
 800e81e:	bf00      	nop
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	20037430 	.word	0x20037430

0800e82c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e830:	4b03      	ldr	r3, [pc, #12]	; (800e840 <BSP_SD_ReadCpltCallback+0x14>)
 800e832:	2201      	movs	r2, #1
 800e834:	601a      	str	r2, [r3, #0]
}
 800e836:	bf00      	nop
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	20037434 	.word	0x20037434

0800e844 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	4a08      	ldr	r2, [pc, #32]	; (800e874 <disk_status+0x30>)
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	4413      	add	r3, r2
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	79fa      	ldrb	r2, [r7, #7]
 800e85c:	4905      	ldr	r1, [pc, #20]	; (800e874 <disk_status+0x30>)
 800e85e:	440a      	add	r2, r1
 800e860:	7a12      	ldrb	r2, [r2, #8]
 800e862:	4610      	mov	r0, r2
 800e864:	4798      	blx	r3
 800e866:	4603      	mov	r3, r0
 800e868:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20037460 	.word	0x20037460

0800e878 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	4a0d      	ldr	r2, [pc, #52]	; (800e8c0 <disk_initialize+0x48>)
 800e88a:	5cd3      	ldrb	r3, [r2, r3]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d111      	bne.n	800e8b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e890:	79fb      	ldrb	r3, [r7, #7]
 800e892:	4a0b      	ldr	r2, [pc, #44]	; (800e8c0 <disk_initialize+0x48>)
 800e894:	2101      	movs	r1, #1
 800e896:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	4a09      	ldr	r2, [pc, #36]	; (800e8c0 <disk_initialize+0x48>)
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	79fa      	ldrb	r2, [r7, #7]
 800e8a6:	4906      	ldr	r1, [pc, #24]	; (800e8c0 <disk_initialize+0x48>)
 800e8a8:	440a      	add	r2, r1
 800e8aa:	7a12      	ldrb	r2, [r2, #8]
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20037460 	.word	0x20037460

0800e8c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e8c4:	b590      	push	{r4, r7, lr}
 800e8c6:	b087      	sub	sp, #28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60b9      	str	r1, [r7, #8]
 800e8cc:	607a      	str	r2, [r7, #4]
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e8d4:	7bfb      	ldrb	r3, [r7, #15]
 800e8d6:	4a0a      	ldr	r2, [pc, #40]	; (800e900 <disk_read+0x3c>)
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	689c      	ldr	r4, [r3, #8]
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
 800e8e2:	4a07      	ldr	r2, [pc, #28]	; (800e900 <disk_read+0x3c>)
 800e8e4:	4413      	add	r3, r2
 800e8e6:	7a18      	ldrb	r0, [r3, #8]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	68b9      	ldr	r1, [r7, #8]
 800e8ee:	47a0      	blx	r4
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	371c      	adds	r7, #28
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd90      	pop	{r4, r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20037460 	.word	0x20037460

0800e904 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e904:	b590      	push	{r4, r7, lr}
 800e906:	b087      	sub	sp, #28
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60b9      	str	r1, [r7, #8]
 800e90c:	607a      	str	r2, [r7, #4]
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	4a0a      	ldr	r2, [pc, #40]	; (800e940 <disk_write+0x3c>)
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4413      	add	r3, r2
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	68dc      	ldr	r4, [r3, #12]
 800e920:	7bfb      	ldrb	r3, [r7, #15]
 800e922:	4a07      	ldr	r2, [pc, #28]	; (800e940 <disk_write+0x3c>)
 800e924:	4413      	add	r3, r2
 800e926:	7a18      	ldrb	r0, [r3, #8]
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	68b9      	ldr	r1, [r7, #8]
 800e92e:	47a0      	blx	r4
 800e930:	4603      	mov	r3, r0
 800e932:	75fb      	strb	r3, [r7, #23]
  return res;
 800e934:	7dfb      	ldrb	r3, [r7, #23]
}
 800e936:	4618      	mov	r0, r3
 800e938:	371c      	adds	r7, #28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd90      	pop	{r4, r7, pc}
 800e93e:	bf00      	nop
 800e940:	20037460 	.word	0x20037460

0800e944 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	603a      	str	r2, [r7, #0]
 800e94e:	71fb      	strb	r3, [r7, #7]
 800e950:	460b      	mov	r3, r1
 800e952:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e954:	79fb      	ldrb	r3, [r7, #7]
 800e956:	4a09      	ldr	r2, [pc, #36]	; (800e97c <disk_ioctl+0x38>)
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	79fa      	ldrb	r2, [r7, #7]
 800e962:	4906      	ldr	r1, [pc, #24]	; (800e97c <disk_ioctl+0x38>)
 800e964:	440a      	add	r2, r1
 800e966:	7a10      	ldrb	r0, [r2, #8]
 800e968:	79b9      	ldrb	r1, [r7, #6]
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	4798      	blx	r3
 800e96e:	4603      	mov	r3, r0
 800e970:	73fb      	strb	r3, [r7, #15]
  return res;
 800e972:	7bfb      	ldrb	r3, [r7, #15]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	20037460 	.word	0x20037460

0800e980 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	3301      	adds	r3, #1
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e990:	89fb      	ldrh	r3, [r7, #14]
 800e992:	021b      	lsls	r3, r3, #8
 800e994:	b21a      	sxth	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	b21b      	sxth	r3, r3
 800e99c:	4313      	orrs	r3, r2
 800e99e:	b21b      	sxth	r3, r3
 800e9a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e9a2:	89fb      	ldrh	r3, [r7, #14]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3303      	adds	r3, #3
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	021b      	lsls	r3, r3, #8
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	3202      	adds	r2, #2
 800e9c8:	7812      	ldrb	r2, [r2, #0]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	021b      	lsls	r3, r3, #8
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	3201      	adds	r2, #1
 800e9d6:	7812      	ldrb	r2, [r2, #0]
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	021b      	lsls	r3, r3, #8
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	7812      	ldrb	r2, [r2, #0]
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	460b      	mov	r3, r1
 800ea00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	887a      	ldrh	r2, [r7, #2]
 800ea0a:	b2d2      	uxtb	r2, r2
 800ea0c:	701a      	strb	r2, [r3, #0]
 800ea0e:	887b      	ldrh	r3, [r7, #2]
 800ea10:	0a1b      	lsrs	r3, r3, #8
 800ea12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	1c5a      	adds	r2, r3, #1
 800ea18:	607a      	str	r2, [r7, #4]
 800ea1a:	887a      	ldrh	r2, [r7, #2]
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	701a      	strb	r2, [r3, #0]
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	b2d2      	uxtb	r2, r2
 800ea40:	701a      	strb	r2, [r3, #0]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	0a1b      	lsrs	r3, r3, #8
 800ea46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	607a      	str	r2, [r7, #4]
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	b2d2      	uxtb	r2, r2
 800ea52:	701a      	strb	r2, [r3, #0]
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	0a1b      	lsrs	r3, r3, #8
 800ea58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	1c5a      	adds	r2, r3, #1
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	683a      	ldr	r2, [r7, #0]
 800ea62:	b2d2      	uxtb	r2, r2
 800ea64:	701a      	strb	r2, [r3, #0]
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	0a1b      	lsrs	r3, r3, #8
 800ea6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	607a      	str	r2, [r7, #4]
 800ea72:	683a      	ldr	r2, [r7, #0]
 800ea74:	b2d2      	uxtb	r2, r2
 800ea76:	701a      	strb	r2, [r3, #0]
}
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea84:	b480      	push	{r7}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00d      	beq.n	800eaba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ea9e:	693a      	ldr	r2, [r7, #16]
 800eaa0:	1c53      	adds	r3, r2, #1
 800eaa2:	613b      	str	r3, [r7, #16]
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	1c59      	adds	r1, r3, #1
 800eaa8:	6179      	str	r1, [r7, #20]
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	607b      	str	r3, [r7, #4]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1f1      	bne.n	800ea9e <mem_cpy+0x1a>
	}
}
 800eaba:	bf00      	nop
 800eabc:	371c      	adds	r7, #28
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eac6:	b480      	push	{r7}
 800eac8:	b087      	sub	sp, #28
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	617a      	str	r2, [r7, #20]
 800eadc:	68ba      	ldr	r2, [r7, #8]
 800eade:	b2d2      	uxtb	r2, r2
 800eae0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3b01      	subs	r3, #1
 800eae6:	607b      	str	r3, [r7, #4]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1f3      	bne.n	800ead6 <mem_set+0x10>
}
 800eaee:	bf00      	nop
 800eaf0:	371c      	adds	r7, #28
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr

0800eafa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eafa:	b480      	push	{r7}
 800eafc:	b089      	sub	sp, #36	; 0x24
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	60f8      	str	r0, [r7, #12]
 800eb02:	60b9      	str	r1, [r7, #8]
 800eb04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	61fb      	str	r3, [r7, #28]
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	1c5a      	adds	r2, r3, #1
 800eb16:	61fa      	str	r2, [r7, #28]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	61ba      	str	r2, [r7, #24]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	1acb      	subs	r3, r1, r3
 800eb26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	607b      	str	r3, [r7, #4]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <mem_cmp+0x40>
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0eb      	beq.n	800eb12 <mem_cmp+0x18>

	return r;
 800eb3a:	697b      	ldr	r3, [r7, #20]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3724      	adds	r7, #36	; 0x24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eb52:	e002      	b.n	800eb5a <chk_chr+0x12>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3301      	adds	r3, #1
 800eb58:	607b      	str	r3, [r7, #4]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d005      	beq.n	800eb6e <chk_chr+0x26>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	461a      	mov	r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d1f2      	bne.n	800eb54 <chk_chr+0xc>
	return *str;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	781b      	ldrb	r3, [r3, #0]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
	...

0800eb80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	60bb      	str	r3, [r7, #8]
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	e029      	b.n	800ebe8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eb94:	4a27      	ldr	r2, [pc, #156]	; (800ec34 <chk_lock+0xb4>)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	011b      	lsls	r3, r3, #4
 800eb9a:	4413      	add	r3, r2
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d01d      	beq.n	800ebde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eba2:	4a24      	ldr	r2, [pc, #144]	; (800ec34 <chk_lock+0xb4>)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	011b      	lsls	r3, r3, #4
 800eba8:	4413      	add	r3, r2
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d116      	bne.n	800ebe2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ebb4:	4a1f      	ldr	r2, [pc, #124]	; (800ec34 <chk_lock+0xb4>)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	011b      	lsls	r3, r3, #4
 800ebba:	4413      	add	r3, r2
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d10c      	bne.n	800ebe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ebc8:	4a1a      	ldr	r2, [pc, #104]	; (800ec34 <chk_lock+0xb4>)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	011b      	lsls	r3, r3, #4
 800ebce:	4413      	add	r3, r2
 800ebd0:	3308      	adds	r3, #8
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d102      	bne.n	800ebe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ebdc:	e007      	b.n	800ebee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d9d2      	bls.n	800eb94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d109      	bne.n	800ec08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d102      	bne.n	800ec00 <chk_lock+0x80>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d101      	bne.n	800ec04 <chk_lock+0x84>
 800ec00:	2300      	movs	r3, #0
 800ec02:	e010      	b.n	800ec26 <chk_lock+0xa6>
 800ec04:	2312      	movs	r3, #18
 800ec06:	e00e      	b.n	800ec26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d108      	bne.n	800ec20 <chk_lock+0xa0>
 800ec0e:	4a09      	ldr	r2, [pc, #36]	; (800ec34 <chk_lock+0xb4>)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	011b      	lsls	r3, r3, #4
 800ec14:	4413      	add	r3, r2
 800ec16:	330c      	adds	r3, #12
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec1e:	d101      	bne.n	800ec24 <chk_lock+0xa4>
 800ec20:	2310      	movs	r3, #16
 800ec22:	e000      	b.n	800ec26 <chk_lock+0xa6>
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	20037440 	.word	0x20037440

0800ec38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	607b      	str	r3, [r7, #4]
 800ec42:	e002      	b.n	800ec4a <enq_lock+0x12>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3301      	adds	r3, #1
 800ec48:	607b      	str	r3, [r7, #4]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d806      	bhi.n	800ec5e <enq_lock+0x26>
 800ec50:	4a09      	ldr	r2, [pc, #36]	; (800ec78 <enq_lock+0x40>)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	011b      	lsls	r3, r3, #4
 800ec56:	4413      	add	r3, r2
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1f2      	bne.n	800ec44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	bf14      	ite	ne
 800ec64:	2301      	movne	r3, #1
 800ec66:	2300      	moveq	r3, #0
 800ec68:	b2db      	uxtb	r3, r3
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	20037440 	.word	0x20037440

0800ec7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec86:	2300      	movs	r3, #0
 800ec88:	60fb      	str	r3, [r7, #12]
 800ec8a:	e01f      	b.n	800eccc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ec8c:	4a41      	ldr	r2, [pc, #260]	; (800ed94 <inc_lock+0x118>)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	011b      	lsls	r3, r3, #4
 800ec92:	4413      	add	r3, r2
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d113      	bne.n	800ecc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ec9e:	4a3d      	ldr	r2, [pc, #244]	; (800ed94 <inc_lock+0x118>)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	011b      	lsls	r3, r3, #4
 800eca4:	4413      	add	r3, r2
 800eca6:	3304      	adds	r3, #4
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d109      	bne.n	800ecc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ecb2:	4a38      	ldr	r2, [pc, #224]	; (800ed94 <inc_lock+0x118>)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	011b      	lsls	r3, r3, #4
 800ecb8:	4413      	add	r3, r2
 800ecba:	3308      	adds	r3, #8
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d006      	beq.n	800ecd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	60fb      	str	r3, [r7, #12]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d9dc      	bls.n	800ec8c <inc_lock+0x10>
 800ecd2:	e000      	b.n	800ecd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ecd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d132      	bne.n	800ed42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e002      	b.n	800ece8 <inc_lock+0x6c>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3301      	adds	r3, #1
 800ece6:	60fb      	str	r3, [r7, #12]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d806      	bhi.n	800ecfc <inc_lock+0x80>
 800ecee:	4a29      	ldr	r2, [pc, #164]	; (800ed94 <inc_lock+0x118>)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	011b      	lsls	r3, r3, #4
 800ecf4:	4413      	add	r3, r2
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1f2      	bne.n	800ece2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d101      	bne.n	800ed06 <inc_lock+0x8a>
 800ed02:	2300      	movs	r3, #0
 800ed04:	e040      	b.n	800ed88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	4922      	ldr	r1, [pc, #136]	; (800ed94 <inc_lock+0x118>)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	011b      	lsls	r3, r3, #4
 800ed10:	440b      	add	r3, r1
 800ed12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	491e      	ldr	r1, [pc, #120]	; (800ed94 <inc_lock+0x118>)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	011b      	lsls	r3, r3, #4
 800ed1e:	440b      	add	r3, r1
 800ed20:	3304      	adds	r3, #4
 800ed22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	695a      	ldr	r2, [r3, #20]
 800ed28:	491a      	ldr	r1, [pc, #104]	; (800ed94 <inc_lock+0x118>)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	440b      	add	r3, r1
 800ed30:	3308      	adds	r3, #8
 800ed32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ed34:	4a17      	ldr	r2, [pc, #92]	; (800ed94 <inc_lock+0x118>)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	011b      	lsls	r3, r3, #4
 800ed3a:	4413      	add	r3, r2
 800ed3c:	330c      	adds	r3, #12
 800ed3e:	2200      	movs	r2, #0
 800ed40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d009      	beq.n	800ed5c <inc_lock+0xe0>
 800ed48:	4a12      	ldr	r2, [pc, #72]	; (800ed94 <inc_lock+0x118>)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	011b      	lsls	r3, r3, #4
 800ed4e:	4413      	add	r3, r2
 800ed50:	330c      	adds	r3, #12
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <inc_lock+0xe0>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	e015      	b.n	800ed88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d108      	bne.n	800ed74 <inc_lock+0xf8>
 800ed62:	4a0c      	ldr	r2, [pc, #48]	; (800ed94 <inc_lock+0x118>)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	011b      	lsls	r3, r3, #4
 800ed68:	4413      	add	r3, r2
 800ed6a:	330c      	adds	r3, #12
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	e001      	b.n	800ed78 <inc_lock+0xfc>
 800ed74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed78:	4906      	ldr	r1, [pc, #24]	; (800ed94 <inc_lock+0x118>)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	011b      	lsls	r3, r3, #4
 800ed7e:	440b      	add	r3, r1
 800ed80:	330c      	adds	r3, #12
 800ed82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3301      	adds	r3, #1
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	20037440 	.word	0x20037440

0800ed98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3b01      	subs	r3, #1
 800eda4:	607b      	str	r3, [r7, #4]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d825      	bhi.n	800edf8 <dec_lock+0x60>
		n = Files[i].ctr;
 800edac:	4a17      	ldr	r2, [pc, #92]	; (800ee0c <dec_lock+0x74>)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	011b      	lsls	r3, r3, #4
 800edb2:	4413      	add	r3, r2
 800edb4:	330c      	adds	r3, #12
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800edba:	89fb      	ldrh	r3, [r7, #14]
 800edbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edc0:	d101      	bne.n	800edc6 <dec_lock+0x2e>
 800edc2:	2300      	movs	r3, #0
 800edc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800edc6:	89fb      	ldrh	r3, [r7, #14]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <dec_lock+0x3a>
 800edcc:	89fb      	ldrh	r3, [r7, #14]
 800edce:	3b01      	subs	r3, #1
 800edd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800edd2:	4a0e      	ldr	r2, [pc, #56]	; (800ee0c <dec_lock+0x74>)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	011b      	lsls	r3, r3, #4
 800edd8:	4413      	add	r3, r2
 800edda:	330c      	adds	r3, #12
 800eddc:	89fa      	ldrh	r2, [r7, #14]
 800edde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ede0:	89fb      	ldrh	r3, [r7, #14]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d105      	bne.n	800edf2 <dec_lock+0x5a>
 800ede6:	4a09      	ldr	r2, [pc, #36]	; (800ee0c <dec_lock+0x74>)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	011b      	lsls	r3, r3, #4
 800edec:	4413      	add	r3, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	737b      	strb	r3, [r7, #13]
 800edf6:	e001      	b.n	800edfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800edf8:	2302      	movs	r3, #2
 800edfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800edfc:	7b7b      	ldrb	r3, [r7, #13]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	20037440 	.word	0x20037440

0800ee10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee18:	2300      	movs	r3, #0
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	e010      	b.n	800ee40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee1e:	4a0d      	ldr	r2, [pc, #52]	; (800ee54 <clear_lock+0x44>)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	011b      	lsls	r3, r3, #4
 800ee24:	4413      	add	r3, r2
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d105      	bne.n	800ee3a <clear_lock+0x2a>
 800ee2e:	4a09      	ldr	r2, [pc, #36]	; (800ee54 <clear_lock+0x44>)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	011b      	lsls	r3, r3, #4
 800ee34:	4413      	add	r3, r2
 800ee36:	2200      	movs	r2, #0
 800ee38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d9eb      	bls.n	800ee1e <clear_lock+0xe>
	}
}
 800ee46:	bf00      	nop
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	20037440 	.word	0x20037440

0800ee58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	78db      	ldrb	r3, [r3, #3]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d034      	beq.n	800eed6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	7858      	ldrb	r0, [r3, #1]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	697a      	ldr	r2, [r7, #20]
 800ee80:	f7ff fd40 	bl	800e904 <disk_write>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d002      	beq.n	800ee90 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	73fb      	strb	r3, [r7, #15]
 800ee8e:	e022      	b.n	800eed6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	1ad2      	subs	r2, r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d217      	bcs.n	800eed6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	789b      	ldrb	r3, [r3, #2]
 800eeaa:	613b      	str	r3, [r7, #16]
 800eeac:	e010      	b.n	800eed0 <sync_window+0x78>
					wsect += fs->fsize;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	697a      	ldr	r2, [r7, #20]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	7858      	ldrb	r0, [r3, #1]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eec2:	2301      	movs	r3, #1
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	f7ff fd1d 	bl	800e904 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	3b01      	subs	r3, #1
 800eece:	613b      	str	r3, [r7, #16]
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d8eb      	bhi.n	800eeae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef2:	683a      	ldr	r2, [r7, #0]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d01b      	beq.n	800ef30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7ff ffad 	bl	800ee58 <sync_window>
 800eefe:	4603      	mov	r3, r0
 800ef00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d113      	bne.n	800ef30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	7858      	ldrb	r0, [r3, #1]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef12:	2301      	movs	r3, #1
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	f7ff fcd5 	bl	800e8c4 <disk_read>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d004      	beq.n	800ef2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef20:	f04f 33ff 	mov.w	r3, #4294967295
 800ef24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ef30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
	...

0800ef3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff ff87 	bl	800ee58 <sync_window>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d159      	bne.n	800f008 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b03      	cmp	r3, #3
 800ef5a:	d149      	bne.n	800eff0 <sync_fs+0xb4>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	791b      	ldrb	r3, [r3, #4]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d145      	bne.n	800eff0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	899b      	ldrh	r3, [r3, #12]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	2100      	movs	r1, #0
 800ef72:	f7ff fda8 	bl	800eac6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3338      	adds	r3, #56	; 0x38
 800ef7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7ff fd37 	bl	800e9f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3338      	adds	r3, #56	; 0x38
 800ef8c:	4921      	ldr	r1, [pc, #132]	; (800f014 <sync_fs+0xd8>)
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff fd4c 	bl	800ea2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	3338      	adds	r3, #56	; 0x38
 800ef98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef9c:	491e      	ldr	r1, [pc, #120]	; (800f018 <sync_fs+0xdc>)
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7ff fd44 	bl	800ea2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	3338      	adds	r3, #56	; 0x38
 800efa8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	695b      	ldr	r3, [r3, #20]
 800efb0:	4619      	mov	r1, r3
 800efb2:	4610      	mov	r0, r2
 800efb4:	f7ff fd3a 	bl	800ea2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	3338      	adds	r3, #56	; 0x38
 800efbc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	4619      	mov	r1, r3
 800efc6:	4610      	mov	r0, r2
 800efc8:	f7ff fd30 	bl	800ea2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7858      	ldrb	r0, [r3, #1]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efe4:	2301      	movs	r3, #1
 800efe6:	f7ff fc8d 	bl	800e904 <disk_write>
			fs->fsi_flag = 0;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	785b      	ldrb	r3, [r3, #1]
 800eff4:	2200      	movs	r2, #0
 800eff6:	2100      	movs	r1, #0
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff fca3 	bl	800e944 <disk_ioctl>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <sync_fs+0xcc>
 800f004:	2301      	movs	r3, #1
 800f006:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f008:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	41615252 	.word	0x41615252
 800f018:	61417272 	.word	0x61417272

0800f01c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	3b02      	subs	r3, #2
 800f02a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	3b02      	subs	r3, #2
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	429a      	cmp	r2, r3
 800f036:	d301      	bcc.n	800f03c <clust2sect+0x20>
 800f038:	2300      	movs	r3, #0
 800f03a:	e008      	b.n	800f04e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	895b      	ldrh	r3, [r3, #10]
 800f040:	461a      	mov	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	fb03 f202 	mul.w	r2, r3, r2
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f04c:	4413      	add	r3, r2
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b086      	sub	sp, #24
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d904      	bls.n	800f07a <get_fat+0x20>
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	69db      	ldr	r3, [r3, #28]
 800f074:	683a      	ldr	r2, [r7, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	d302      	bcc.n	800f080 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f07a:	2301      	movs	r3, #1
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	e0b7      	b.n	800f1f0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f080:	f04f 33ff 	mov.w	r3, #4294967295
 800f084:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d05a      	beq.n	800f144 <get_fat+0xea>
 800f08e:	2b03      	cmp	r3, #3
 800f090:	d07d      	beq.n	800f18e <get_fat+0x134>
 800f092:	2b01      	cmp	r3, #1
 800f094:	f040 80a2 	bne.w	800f1dc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	085b      	lsrs	r3, r3, #1
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	899b      	ldrh	r3, [r3, #12]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	6938      	ldr	r0, [r7, #16]
 800f0bc:	f7ff ff10 	bl	800eee0 <move_window>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f040 808d 	bne.w	800f1e2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	1c5a      	adds	r2, r3, #1
 800f0cc:	60fa      	str	r2, [r7, #12]
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	8992      	ldrh	r2, [r2, #12]
 800f0d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0d6:	fb02 f201 	mul.w	r2, r2, r1
 800f0da:	1a9b      	subs	r3, r3, r2
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	4413      	add	r3, r2
 800f0e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	899b      	ldrh	r3, [r3, #12]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0f6:	4413      	add	r3, r2
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	6938      	ldr	r0, [r7, #16]
 800f0fc:	f7ff fef0 	bl	800eee0 <move_window>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d16f      	bne.n	800f1e6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	899b      	ldrh	r3, [r3, #12]
 800f10a:	461a      	mov	r2, r3
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f112:	fb02 f201 	mul.w	r2, r2, r1
 800f116:	1a9b      	subs	r3, r3, r2
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	4413      	add	r3, r2
 800f11c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f120:	021b      	lsls	r3, r3, #8
 800f122:	461a      	mov	r2, r3
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	4313      	orrs	r3, r2
 800f128:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	d002      	beq.n	800f13a <get_fat+0xe0>
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	091b      	lsrs	r3, r3, #4
 800f138:	e002      	b.n	800f140 <get_fat+0xe6>
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f140:	617b      	str	r3, [r7, #20]
			break;
 800f142:	e055      	b.n	800f1f0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	899b      	ldrh	r3, [r3, #12]
 800f14c:	085b      	lsrs	r3, r3, #1
 800f14e:	b29b      	uxth	r3, r3
 800f150:	4619      	mov	r1, r3
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	fbb3 f3f1 	udiv	r3, r3, r1
 800f158:	4413      	add	r3, r2
 800f15a:	4619      	mov	r1, r3
 800f15c:	6938      	ldr	r0, [r7, #16]
 800f15e:	f7ff febf 	bl	800eee0 <move_window>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d140      	bne.n	800f1ea <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	005b      	lsls	r3, r3, #1
 800f172:	693a      	ldr	r2, [r7, #16]
 800f174:	8992      	ldrh	r2, [r2, #12]
 800f176:	fbb3 f0f2 	udiv	r0, r3, r2
 800f17a:	fb02 f200 	mul.w	r2, r2, r0
 800f17e:	1a9b      	subs	r3, r3, r2
 800f180:	440b      	add	r3, r1
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff fbfc 	bl	800e980 <ld_word>
 800f188:	4603      	mov	r3, r0
 800f18a:	617b      	str	r3, [r7, #20]
			break;
 800f18c:	e030      	b.n	800f1f0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	899b      	ldrh	r3, [r3, #12]
 800f196:	089b      	lsrs	r3, r3, #2
 800f198:	b29b      	uxth	r3, r3
 800f19a:	4619      	mov	r1, r3
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1a2:	4413      	add	r3, r2
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	6938      	ldr	r0, [r7, #16]
 800f1a8:	f7ff fe9a 	bl	800eee0 <move_window>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d11d      	bne.n	800f1ee <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	8992      	ldrh	r2, [r2, #12]
 800f1c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1c4:	fb02 f200 	mul.w	r2, r2, r0
 800f1c8:	1a9b      	subs	r3, r3, r2
 800f1ca:	440b      	add	r3, r1
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff fbef 	bl	800e9b0 <ld_dword>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f1d8:	617b      	str	r3, [r7, #20]
			break;
 800f1da:	e009      	b.n	800f1f0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f1dc:	2301      	movs	r3, #1
 800f1de:	617b      	str	r3, [r7, #20]
 800f1e0:	e006      	b.n	800f1f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1e2:	bf00      	nop
 800f1e4:	e004      	b.n	800f1f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1e6:	bf00      	nop
 800f1e8:	e002      	b.n	800f1f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1ea:	bf00      	nop
 800f1ec:	e000      	b.n	800f1f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1ee:	bf00      	nop
		}
	}

	return val;
 800f1f0:	697b      	ldr	r3, [r7, #20]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3718      	adds	r7, #24
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f1fa:	b590      	push	{r4, r7, lr}
 800f1fc:	b089      	sub	sp, #36	; 0x24
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	60f8      	str	r0, [r7, #12]
 800f202:	60b9      	str	r1, [r7, #8]
 800f204:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f206:	2302      	movs	r3, #2
 800f208:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	f240 8106 	bls.w	800f41e <put_fat+0x224>
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	69db      	ldr	r3, [r3, #28]
 800f216:	68ba      	ldr	r2, [r7, #8]
 800f218:	429a      	cmp	r2, r3
 800f21a:	f080 8100 	bcs.w	800f41e <put_fat+0x224>
		switch (fs->fs_type) {
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	2b02      	cmp	r3, #2
 800f224:	f000 8088 	beq.w	800f338 <put_fat+0x13e>
 800f228:	2b03      	cmp	r3, #3
 800f22a:	f000 80b0 	beq.w	800f38e <put_fat+0x194>
 800f22e:	2b01      	cmp	r3, #1
 800f230:	f040 80f5 	bne.w	800f41e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	61bb      	str	r3, [r7, #24]
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	085b      	lsrs	r3, r3, #1
 800f23c:	69ba      	ldr	r2, [r7, #24]
 800f23e:	4413      	add	r3, r2
 800f240:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	899b      	ldrh	r3, [r3, #12]
 800f24a:	4619      	mov	r1, r3
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f252:	4413      	add	r3, r2
 800f254:	4619      	mov	r1, r3
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7ff fe42 	bl	800eee0 <move_window>
 800f25c:	4603      	mov	r3, r0
 800f25e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f260:	7ffb      	ldrb	r3, [r7, #31]
 800f262:	2b00      	cmp	r3, #0
 800f264:	f040 80d4 	bne.w	800f410 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	61ba      	str	r2, [r7, #24]
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	8992      	ldrh	r2, [r2, #12]
 800f278:	fbb3 f0f2 	udiv	r0, r3, r2
 800f27c:	fb02 f200 	mul.w	r2, r2, r0
 800f280:	1a9b      	subs	r3, r3, r2
 800f282:	440b      	add	r3, r1
 800f284:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f003 0301 	and.w	r3, r3, #1
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00d      	beq.n	800f2ac <put_fat+0xb2>
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	b25b      	sxtb	r3, r3
 800f296:	f003 030f 	and.w	r3, r3, #15
 800f29a:	b25a      	sxtb	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	011b      	lsls	r3, r3, #4
 800f2a2:	b25b      	sxtb	r3, r3
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	b25b      	sxtb	r3, r3
 800f2a8:	b2db      	uxtb	r3, r3
 800f2aa:	e001      	b.n	800f2b0 <put_fat+0xb6>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	899b      	ldrh	r3, [r3, #12]
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2ca:	4413      	add	r3, r2
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f7ff fe06 	bl	800eee0 <move_window>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2d8:	7ffb      	ldrb	r3, [r7, #31]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f040 809a 	bne.w	800f414 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	899b      	ldrh	r3, [r3, #12]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2f2:	fb02 f200 	mul.w	r2, r2, r0
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	440b      	add	r3, r1
 800f2fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <put_fat+0x114>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	091b      	lsrs	r3, r3, #4
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	e00e      	b.n	800f32c <put_fat+0x132>
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	b25b      	sxtb	r3, r3
 800f314:	f023 030f 	bic.w	r3, r3, #15
 800f318:	b25a      	sxtb	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	0a1b      	lsrs	r3, r3, #8
 800f31e:	b25b      	sxtb	r3, r3
 800f320:	f003 030f 	and.w	r3, r3, #15
 800f324:	b25b      	sxtb	r3, r3
 800f326:	4313      	orrs	r3, r2
 800f328:	b25b      	sxtb	r3, r3
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2201      	movs	r2, #1
 800f334:	70da      	strb	r2, [r3, #3]
			break;
 800f336:	e072      	b.n	800f41e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	899b      	ldrh	r3, [r3, #12]
 800f340:	085b      	lsrs	r3, r3, #1
 800f342:	b29b      	uxth	r3, r3
 800f344:	4619      	mov	r1, r3
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	fbb3 f3f1 	udiv	r3, r3, r1
 800f34c:	4413      	add	r3, r2
 800f34e:	4619      	mov	r1, r3
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7ff fdc5 	bl	800eee0 <move_window>
 800f356:	4603      	mov	r3, r0
 800f358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f35a:	7ffb      	ldrb	r3, [r7, #31]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d15b      	bne.n	800f418 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	005b      	lsls	r3, r3, #1
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	8992      	ldrh	r2, [r2, #12]
 800f36e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f372:	fb02 f200 	mul.w	r2, r2, r0
 800f376:	1a9b      	subs	r3, r3, r2
 800f378:	440b      	add	r3, r1
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	b292      	uxth	r2, r2
 800f37e:	4611      	mov	r1, r2
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fb38 	bl	800e9f6 <st_word>
			fs->wflag = 1;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2201      	movs	r2, #1
 800f38a:	70da      	strb	r2, [r3, #3]
			break;
 800f38c:	e047      	b.n	800f41e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	899b      	ldrh	r3, [r3, #12]
 800f396:	089b      	lsrs	r3, r3, #2
 800f398:	b29b      	uxth	r3, r3
 800f39a:	4619      	mov	r1, r3
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7ff fd9a 	bl	800eee0 <move_window>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3b0:	7ffb      	ldrb	r3, [r7, #31]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d132      	bne.n	800f41c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	8992      	ldrh	r2, [r2, #12]
 800f3ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3ce:	fb02 f200 	mul.w	r2, r2, r0
 800f3d2:	1a9b      	subs	r3, r3, r2
 800f3d4:	440b      	add	r3, r1
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff faea 	bl	800e9b0 <ld_dword>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f3e2:	4323      	orrs	r3, r4
 800f3e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	8992      	ldrh	r2, [r2, #12]
 800f3f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3f8:	fb02 f200 	mul.w	r2, r2, r0
 800f3fc:	1a9b      	subs	r3, r3, r2
 800f3fe:	440b      	add	r3, r1
 800f400:	6879      	ldr	r1, [r7, #4]
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fb12 	bl	800ea2c <st_dword>
			fs->wflag = 1;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2201      	movs	r2, #1
 800f40c:	70da      	strb	r2, [r3, #3]
			break;
 800f40e:	e006      	b.n	800f41e <put_fat+0x224>
			if (res != FR_OK) break;
 800f410:	bf00      	nop
 800f412:	e004      	b.n	800f41e <put_fat+0x224>
			if (res != FR_OK) break;
 800f414:	bf00      	nop
 800f416:	e002      	b.n	800f41e <put_fat+0x224>
			if (res != FR_OK) break;
 800f418:	bf00      	nop
 800f41a:	e000      	b.n	800f41e <put_fat+0x224>
			if (res != FR_OK) break;
 800f41c:	bf00      	nop
		}
	}
	return res;
 800f41e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3724      	adds	r7, #36	; 0x24
 800f424:	46bd      	mov	sp, r7
 800f426:	bd90      	pop	{r4, r7, pc}

0800f428 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d904      	bls.n	800f44e <remove_chain+0x26>
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	69db      	ldr	r3, [r3, #28]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d301      	bcc.n	800f452 <remove_chain+0x2a>
 800f44e:	2302      	movs	r3, #2
 800f450:	e04b      	b.n	800f4ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00c      	beq.n	800f472 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f458:	f04f 32ff 	mov.w	r2, #4294967295
 800f45c:	6879      	ldr	r1, [r7, #4]
 800f45e:	69b8      	ldr	r0, [r7, #24]
 800f460:	f7ff fecb 	bl	800f1fa <put_fat>
 800f464:	4603      	mov	r3, r0
 800f466:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f468:	7ffb      	ldrb	r3, [r7, #31]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <remove_chain+0x4a>
 800f46e:	7ffb      	ldrb	r3, [r7, #31]
 800f470:	e03b      	b.n	800f4ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f472:	68b9      	ldr	r1, [r7, #8]
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f7ff fdf0 	bl	800f05a <get_fat>
 800f47a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d031      	beq.n	800f4e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d101      	bne.n	800f48c <remove_chain+0x64>
 800f488:	2302      	movs	r3, #2
 800f48a:	e02e      	b.n	800f4ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d101      	bne.n	800f498 <remove_chain+0x70>
 800f494:	2301      	movs	r3, #1
 800f496:	e028      	b.n	800f4ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f498:	2200      	movs	r2, #0
 800f49a:	68b9      	ldr	r1, [r7, #8]
 800f49c:	69b8      	ldr	r0, [r7, #24]
 800f49e:	f7ff feac 	bl	800f1fa <put_fat>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f4a6:	7ffb      	ldrb	r3, [r7, #31]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <remove_chain+0x88>
 800f4ac:	7ffb      	ldrb	r3, [r7, #31]
 800f4ae:	e01c      	b.n	800f4ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	695a      	ldr	r2, [r3, #20]
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	69db      	ldr	r3, [r3, #28]
 800f4b8:	3b02      	subs	r3, #2
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d20b      	bcs.n	800f4d6 <remove_chain+0xae>
			fs->free_clst++;
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	791b      	ldrb	r3, [r3, #4]
 800f4cc:	f043 0301 	orr.w	r3, r3, #1
 800f4d0:	b2da      	uxtb	r2, r3
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	69db      	ldr	r3, [r3, #28]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d3c6      	bcc.n	800f472 <remove_chain+0x4a>
 800f4e4:	e000      	b.n	800f4e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f4e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3720      	adds	r7, #32
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b088      	sub	sp, #32
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
 800f4fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10d      	bne.n	800f524 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d004      	beq.n	800f51e <create_chain+0x2c>
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	69db      	ldr	r3, [r3, #28]
 800f518:	69ba      	ldr	r2, [r7, #24]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d31b      	bcc.n	800f556 <create_chain+0x64>
 800f51e:	2301      	movs	r3, #1
 800f520:	61bb      	str	r3, [r7, #24]
 800f522:	e018      	b.n	800f556 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7ff fd97 	bl	800f05a <get_fat>
 800f52c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d801      	bhi.n	800f538 <create_chain+0x46>
 800f534:	2301      	movs	r3, #1
 800f536:	e070      	b.n	800f61a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d101      	bne.n	800f544 <create_chain+0x52>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	e06a      	b.n	800f61a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	69db      	ldr	r3, [r3, #28]
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d201      	bcs.n	800f552 <create_chain+0x60>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	e063      	b.n	800f61a <create_chain+0x128>
		scl = clst;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	3301      	adds	r3, #1
 800f55e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	69fa      	ldr	r2, [r7, #28]
 800f566:	429a      	cmp	r2, r3
 800f568:	d307      	bcc.n	800f57a <create_chain+0x88>
				ncl = 2;
 800f56a:	2302      	movs	r3, #2
 800f56c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f56e:	69fa      	ldr	r2, [r7, #28]
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	429a      	cmp	r2, r3
 800f574:	d901      	bls.n	800f57a <create_chain+0x88>
 800f576:	2300      	movs	r3, #0
 800f578:	e04f      	b.n	800f61a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f57a:	69f9      	ldr	r1, [r7, #28]
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7ff fd6c 	bl	800f05a <get_fat>
 800f582:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00e      	beq.n	800f5a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d003      	beq.n	800f598 <create_chain+0xa6>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f596:	d101      	bne.n	800f59c <create_chain+0xaa>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	e03e      	b.n	800f61a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f59c:	69fa      	ldr	r2, [r7, #28]
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d1da      	bne.n	800f55a <create_chain+0x68>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e038      	b.n	800f61a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f5a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ae:	69f9      	ldr	r1, [r7, #28]
 800f5b0:	6938      	ldr	r0, [r7, #16]
 800f5b2:	f7ff fe22 	bl	800f1fa <put_fat>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f5ba:	7dfb      	ldrb	r3, [r7, #23]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d109      	bne.n	800f5d4 <create_chain+0xe2>
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d006      	beq.n	800f5d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f5c6:	69fa      	ldr	r2, [r7, #28]
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6938      	ldr	r0, [r7, #16]
 800f5cc:	f7ff fe15 	bl	800f1fa <put_fat>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f5d4:	7dfb      	ldrb	r3, [r7, #23]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d116      	bne.n	800f608 <create_chain+0x116>
		fs->last_clst = ncl;
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	69fa      	ldr	r2, [r7, #28]
 800f5de:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	695a      	ldr	r2, [r3, #20]
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	3b02      	subs	r3, #2
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d804      	bhi.n	800f5f8 <create_chain+0x106>
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	1e5a      	subs	r2, r3, #1
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	791b      	ldrb	r3, [r3, #4]
 800f5fc:	f043 0301 	orr.w	r3, r3, #1
 800f600:	b2da      	uxtb	r2, r3
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	711a      	strb	r2, [r3, #4]
 800f606:	e007      	b.n	800f618 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f608:	7dfb      	ldrb	r3, [r7, #23]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d102      	bne.n	800f614 <create_chain+0x122>
 800f60e:	f04f 33ff 	mov.w	r3, #4294967295
 800f612:	e000      	b.n	800f616 <create_chain+0x124>
 800f614:	2301      	movs	r3, #1
 800f616:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f618:	69fb      	ldr	r3, [r7, #28]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3720      	adds	r7, #32
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f622:	b480      	push	{r7}
 800f624:	b087      	sub	sp, #28
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f636:	3304      	adds	r3, #4
 800f638:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	899b      	ldrh	r3, [r3, #12]
 800f63e:	461a      	mov	r2, r3
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	fbb3 f3f2 	udiv	r3, r3, r2
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	8952      	ldrh	r2, [r2, #10]
 800f64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f64e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	1d1a      	adds	r2, r3, #4
 800f654:	613a      	str	r2, [r7, #16]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d101      	bne.n	800f664 <clmt_clust+0x42>
 800f660:	2300      	movs	r3, #0
 800f662:	e010      	b.n	800f686 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f664:	697a      	ldr	r2, [r7, #20]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d307      	bcc.n	800f67c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	1ad3      	subs	r3, r2, r3
 800f672:	617b      	str	r3, [r7, #20]
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	3304      	adds	r3, #4
 800f678:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f67a:	e7e9      	b.n	800f650 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f67c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	4413      	add	r3, r2
}
 800f686:	4618      	mov	r0, r3
 800f688:	371c      	adds	r7, #28
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b086      	sub	sp, #24
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6a8:	d204      	bcs.n	800f6b4 <dir_sdi+0x22>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	f003 031f 	and.w	r3, r3, #31
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d001      	beq.n	800f6b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	e071      	b.n	800f79c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <dir_sdi+0x46>
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d902      	bls.n	800f6d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d10c      	bne.n	800f6f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	095b      	lsrs	r3, r3, #5
 800f6e2:	693a      	ldr	r2, [r7, #16]
 800f6e4:	8912      	ldrh	r2, [r2, #8]
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d301      	bcc.n	800f6ee <dir_sdi+0x5c>
 800f6ea:	2302      	movs	r3, #2
 800f6ec:	e056      	b.n	800f79c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	61da      	str	r2, [r3, #28]
 800f6f6:	e02d      	b.n	800f754 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	895b      	ldrh	r3, [r3, #10]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	fb03 f302 	mul.w	r3, r3, r2
 800f706:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f708:	e019      	b.n	800f73e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6979      	ldr	r1, [r7, #20]
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff fca3 	bl	800f05a <get_fat>
 800f714:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71c:	d101      	bne.n	800f722 <dir_sdi+0x90>
 800f71e:	2301      	movs	r3, #1
 800f720:	e03c      	b.n	800f79c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d904      	bls.n	800f732 <dir_sdi+0xa0>
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d301      	bcc.n	800f736 <dir_sdi+0xa4>
 800f732:	2302      	movs	r3, #2
 800f734:	e032      	b.n	800f79c <dir_sdi+0x10a>
			ofs -= csz;
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	429a      	cmp	r2, r3
 800f744:	d2e1      	bcs.n	800f70a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f746:	6979      	ldr	r1, [r7, #20]
 800f748:	6938      	ldr	r0, [r7, #16]
 800f74a:	f7ff fc67 	bl	800f01c <clust2sect>
 800f74e:	4602      	mov	r2, r0
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	69db      	ldr	r3, [r3, #28]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d101      	bne.n	800f766 <dir_sdi+0xd4>
 800f762:	2302      	movs	r3, #2
 800f764:	e01a      	b.n	800f79c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	69da      	ldr	r2, [r3, #28]
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	899b      	ldrh	r3, [r3, #12]
 800f76e:	4619      	mov	r1, r3
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	fbb3 f3f1 	udiv	r3, r3, r1
 800f776:	441a      	add	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	899b      	ldrh	r3, [r3, #12]
 800f786:	461a      	mov	r2, r3
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f78e:	fb02 f200 	mul.w	r2, r2, r0
 800f792:	1a9b      	subs	r3, r3, r2
 800f794:	18ca      	adds	r2, r1, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	3320      	adds	r3, #32
 800f7ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	69db      	ldr	r3, [r3, #28]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d003      	beq.n	800f7cc <dir_next+0x28>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f7ca:	d301      	bcc.n	800f7d0 <dir_next+0x2c>
 800f7cc:	2304      	movs	r3, #4
 800f7ce:	e0bb      	b.n	800f948 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	899b      	ldrh	r3, [r3, #12]
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7dc:	fb02 f201 	mul.w	r2, r2, r1
 800f7e0:	1a9b      	subs	r3, r3, r2
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f040 809d 	bne.w	800f922 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	1c5a      	adds	r2, r3, #1
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	699b      	ldr	r3, [r3, #24]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10b      	bne.n	800f812 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	095b      	lsrs	r3, r3, #5
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	8912      	ldrh	r2, [r2, #8]
 800f802:	4293      	cmp	r3, r2
 800f804:	f0c0 808d 	bcc.w	800f922 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	61da      	str	r2, [r3, #28]
 800f80e:	2304      	movs	r3, #4
 800f810:	e09a      	b.n	800f948 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	899b      	ldrh	r3, [r3, #12]
 800f816:	461a      	mov	r2, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	8952      	ldrh	r2, [r2, #10]
 800f822:	3a01      	subs	r2, #1
 800f824:	4013      	ands	r3, r2
 800f826:	2b00      	cmp	r3, #0
 800f828:	d17b      	bne.n	800f922 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	699b      	ldr	r3, [r3, #24]
 800f830:	4619      	mov	r1, r3
 800f832:	4610      	mov	r0, r2
 800f834:	f7ff fc11 	bl	800f05a <get_fat>
 800f838:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d801      	bhi.n	800f844 <dir_next+0xa0>
 800f840:	2302      	movs	r3, #2
 800f842:	e081      	b.n	800f948 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f84a:	d101      	bne.n	800f850 <dir_next+0xac>
 800f84c:	2301      	movs	r3, #1
 800f84e:	e07b      	b.n	800f948 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	69db      	ldr	r3, [r3, #28]
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	429a      	cmp	r2, r3
 800f858:	d359      	bcc.n	800f90e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d104      	bne.n	800f86a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	61da      	str	r2, [r3, #28]
 800f866:	2304      	movs	r3, #4
 800f868:	e06e      	b.n	800f948 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	699b      	ldr	r3, [r3, #24]
 800f870:	4619      	mov	r1, r3
 800f872:	4610      	mov	r0, r2
 800f874:	f7ff fe3d 	bl	800f4f2 <create_chain>
 800f878:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d101      	bne.n	800f884 <dir_next+0xe0>
 800f880:	2307      	movs	r3, #7
 800f882:	e061      	b.n	800f948 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d101      	bne.n	800f88e <dir_next+0xea>
 800f88a:	2302      	movs	r3, #2
 800f88c:	e05c      	b.n	800f948 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f894:	d101      	bne.n	800f89a <dir_next+0xf6>
 800f896:	2301      	movs	r3, #1
 800f898:	e056      	b.n	800f948 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7ff fadc 	bl	800ee58 <sync_window>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <dir_next+0x106>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e04e      	b.n	800f948 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	899b      	ldrh	r3, [r3, #12]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	f7ff f905 	bl	800eac6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8bc:	2300      	movs	r3, #0
 800f8be:	613b      	str	r3, [r7, #16]
 800f8c0:	6979      	ldr	r1, [r7, #20]
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f7ff fbaa 	bl	800f01c <clust2sect>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	635a      	str	r2, [r3, #52]	; 0x34
 800f8ce:	e012      	b.n	800f8f6 <dir_next+0x152>
						fs->wflag = 1;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff fabe 	bl	800ee58 <sync_window>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d001      	beq.n	800f8e6 <dir_next+0x142>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e030      	b.n	800f948 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	613b      	str	r3, [r7, #16]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	635a      	str	r2, [r3, #52]	; 0x34
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	895b      	ldrh	r3, [r3, #10]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d3e6      	bcc.n	800f8d0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	1ad2      	subs	r2, r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f914:	6979      	ldr	r1, [r7, #20]
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f7ff fb80 	bl	800f01c <clust2sect>
 800f91c:	4602      	mov	r2, r0
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	899b      	ldrh	r3, [r3, #12]
 800f932:	461a      	mov	r2, r3
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	fbb3 f0f2 	udiv	r0, r3, r2
 800f93a:	fb02 f200 	mul.w	r2, r2, r0
 800f93e:	1a9b      	subs	r3, r3, r2
 800f940:	18ca      	adds	r2, r1, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3718      	adds	r7, #24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f960:	2100      	movs	r1, #0
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7ff fe95 	bl	800f692 <dir_sdi>
 800f968:	4603      	mov	r3, r0
 800f96a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d12b      	bne.n	800f9ca <dir_alloc+0x7a>
		n = 0;
 800f972:	2300      	movs	r3, #0
 800f974:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	69db      	ldr	r3, [r3, #28]
 800f97a:	4619      	mov	r1, r3
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7ff faaf 	bl	800eee0 <move_window>
 800f982:	4603      	mov	r3, r0
 800f984:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d11d      	bne.n	800f9c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a1b      	ldr	r3, [r3, #32]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2be5      	cmp	r3, #229	; 0xe5
 800f994:	d004      	beq.n	800f9a0 <dir_alloc+0x50>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a1b      	ldr	r3, [r3, #32]
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d107      	bne.n	800f9b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	613b      	str	r3, [r7, #16]
 800f9a6:	693a      	ldr	r2, [r7, #16]
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d102      	bne.n	800f9b4 <dir_alloc+0x64>
 800f9ae:	e00c      	b.n	800f9ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7ff fef4 	bl	800f7a4 <dir_next>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f9c0:	7dfb      	ldrb	r3, [r7, #23]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d0d7      	beq.n	800f976 <dir_alloc+0x26>
 800f9c6:	e000      	b.n	800f9ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f9c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	2b04      	cmp	r3, #4
 800f9ce:	d101      	bne.n	800f9d4 <dir_alloc+0x84>
 800f9d0:	2307      	movs	r3, #7
 800f9d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3718      	adds	r7, #24
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b084      	sub	sp, #16
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	331a      	adds	r3, #26
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fe ffc7 	bl	800e980 <ld_word>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b03      	cmp	r3, #3
 800f9fc:	d109      	bne.n	800fa12 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	3314      	adds	r3, #20
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fe ffbc 	bl	800e980 <ld_word>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	041b      	lsls	r3, r3, #16
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fa12:	68fb      	ldr	r3, [r7, #12]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	331a      	adds	r3, #26
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	b292      	uxth	r2, r2
 800fa30:	4611      	mov	r1, r2
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe ffdf 	bl	800e9f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b03      	cmp	r3, #3
 800fa3e:	d109      	bne.n	800fa54 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	f103 0214 	add.w	r2, r3, #20
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	0c1b      	lsrs	r3, r3, #16
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4610      	mov	r0, r2
 800fa50:	f7fe ffd1 	bl	800e9f6 <st_word>
	}
}
 800fa54:	bf00      	nop
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b086      	sub	sp, #24
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fa66:	2304      	movs	r3, #4
 800fa68:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fa70:	e03c      	b.n	800faec <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	69db      	ldr	r3, [r3, #28]
 800fa76:	4619      	mov	r1, r3
 800fa78:	6938      	ldr	r0, [r7, #16]
 800fa7a:	f7ff fa31 	bl	800eee0 <move_window>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa82:	7dfb      	ldrb	r3, [r7, #23]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d136      	bne.n	800faf6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6a1b      	ldr	r3, [r3, #32]
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d102      	bne.n	800fa9c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fa96:	2304      	movs	r3, #4
 800fa98:	75fb      	strb	r3, [r7, #23]
 800fa9a:	e031      	b.n	800fb00 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a1b      	ldr	r3, [r3, #32]
 800faa0:	330b      	adds	r3, #11
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faa8:	73bb      	strb	r3, [r7, #14]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7bba      	ldrb	r2, [r7, #14]
 800faae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	2be5      	cmp	r3, #229	; 0xe5
 800fab4:	d011      	beq.n	800fada <dir_read+0x7e>
 800fab6:	7bfb      	ldrb	r3, [r7, #15]
 800fab8:	2b2e      	cmp	r3, #46	; 0x2e
 800faba:	d00e      	beq.n	800fada <dir_read+0x7e>
 800fabc:	7bbb      	ldrb	r3, [r7, #14]
 800fabe:	2b0f      	cmp	r3, #15
 800fac0:	d00b      	beq.n	800fada <dir_read+0x7e>
 800fac2:	7bbb      	ldrb	r3, [r7, #14]
 800fac4:	f023 0320 	bic.w	r3, r3, #32
 800fac8:	2b08      	cmp	r3, #8
 800faca:	bf0c      	ite	eq
 800facc:	2301      	moveq	r3, #1
 800face:	2300      	movne	r3, #0
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	461a      	mov	r2, r3
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d00f      	beq.n	800fafa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fada:	2100      	movs	r1, #0
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff fe61 	bl	800f7a4 <dir_next>
 800fae2:	4603      	mov	r3, r0
 800fae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fae6:	7dfb      	ldrb	r3, [r7, #23]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d108      	bne.n	800fafe <dir_read+0xa2>
	while (dp->sect) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	69db      	ldr	r3, [r3, #28]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1be      	bne.n	800fa72 <dir_read+0x16>
 800faf4:	e004      	b.n	800fb00 <dir_read+0xa4>
		if (res != FR_OK) break;
 800faf6:	bf00      	nop
 800faf8:	e002      	b.n	800fb00 <dir_read+0xa4>
				break;
 800fafa:	bf00      	nop
 800fafc:	e000      	b.n	800fb00 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fafe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d002      	beq.n	800fb0c <dir_read+0xb0>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	61da      	str	r2, [r3, #28]
	return res;
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3718      	adds	r7, #24
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b086      	sub	sp, #24
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fb24:	2100      	movs	r1, #0
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff fdb3 	bl	800f692 <dir_sdi>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <dir_find+0x24>
 800fb36:	7dfb      	ldrb	r3, [r7, #23]
 800fb38:	e03e      	b.n	800fbb8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	69db      	ldr	r3, [r3, #28]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	6938      	ldr	r0, [r7, #16]
 800fb42:	f7ff f9cd 	bl	800eee0 <move_window>
 800fb46:	4603      	mov	r3, r0
 800fb48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fb4a:	7dfb      	ldrb	r3, [r7, #23]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d12f      	bne.n	800fbb0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a1b      	ldr	r3, [r3, #32]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d102      	bne.n	800fb64 <dir_find+0x4e>
 800fb5e:	2304      	movs	r3, #4
 800fb60:	75fb      	strb	r3, [r7, #23]
 800fb62:	e028      	b.n	800fbb6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a1b      	ldr	r3, [r3, #32]
 800fb68:	330b      	adds	r3, #11
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb70:	b2da      	uxtb	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	330b      	adds	r3, #11
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	f003 0308 	and.w	r3, r3, #8
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10a      	bne.n	800fb9c <dir_find+0x86>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a18      	ldr	r0, [r3, #32]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3324      	adds	r3, #36	; 0x24
 800fb8e:	220b      	movs	r2, #11
 800fb90:	4619      	mov	r1, r3
 800fb92:	f7fe ffb2 	bl	800eafa <mem_cmp>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00b      	beq.n	800fbb4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7ff fe00 	bl	800f7a4 <dir_next>
 800fba4:	4603      	mov	r3, r0
 800fba6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fba8:	7dfb      	ldrb	r3, [r7, #23]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d0c5      	beq.n	800fb3a <dir_find+0x24>
 800fbae:	e002      	b.n	800fbb6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fbb0:	bf00      	nop
 800fbb2:	e000      	b.n	800fbb6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fbb4:	bf00      	nop

	return res;
 800fbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3718      	adds	r7, #24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fbce:	2101      	movs	r1, #1
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7ff febd 	bl	800f950 <dir_alloc>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d11c      	bne.n	800fc1a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	68b8      	ldr	r0, [r7, #8]
 800fbe8:	f7ff f97a 	bl	800eee0 <move_window>
 800fbec:	4603      	mov	r3, r0
 800fbee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fbf0:	7bfb      	ldrb	r3, [r7, #15]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d111      	bne.n	800fc1a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6a1b      	ldr	r3, [r3, #32]
 800fbfa:	2220      	movs	r2, #32
 800fbfc:	2100      	movs	r1, #0
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fe ff61 	bl	800eac6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6a18      	ldr	r0, [r3, #32]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	3324      	adds	r3, #36	; 0x24
 800fc0c:	220b      	movs	r2, #11
 800fc0e:	4619      	mov	r1, r3
 800fc10:	f7fe ff38 	bl	800ea84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	2201      	movs	r2, #1
 800fc18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3710      	adds	r7, #16
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	69db      	ldr	r3, [r3, #28]
 800fc36:	4619      	mov	r1, r3
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f7ff f951 	bl	800eee0 <move_window>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800fc42:	7afb      	ldrb	r3, [r7, #11]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d106      	bne.n	800fc56 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a1b      	ldr	r3, [r3, #32]
 800fc4c:	22e5      	movs	r2, #229	; 0xe5
 800fc4e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2201      	movs	r2, #1
 800fc54:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800fc56:	7afb      	ldrb	r3, [r7, #11]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	60fb      	str	r3, [r7, #12]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	3324      	adds	r3, #36	; 0x24
 800fc74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fc76:	220b      	movs	r2, #11
 800fc78:	2120      	movs	r1, #32
 800fc7a:	68b8      	ldr	r0, [r7, #8]
 800fc7c:	f7fe ff23 	bl	800eac6 <mem_set>
	si = i = 0; ni = 8;
 800fc80:	2300      	movs	r3, #0
 800fc82:	613b      	str	r3, [r7, #16]
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	617b      	str	r3, [r7, #20]
 800fc88:	2308      	movs	r3, #8
 800fc8a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	4413      	add	r3, r2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b2e      	cmp	r3, #46	; 0x2e
 800fc96:	d12f      	bne.n	800fcf8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	1c5a      	adds	r2, r3, #1
 800fc9c:	617a      	str	r2, [r7, #20]
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	4413      	add	r3, r2
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800fca6:	7ffb      	ldrb	r3, [r7, #31]
 800fca8:	2b2e      	cmp	r3, #46	; 0x2e
 800fcaa:	d10a      	bne.n	800fcc2 <create_name+0x62>
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d807      	bhi.n	800fcc2 <create_name+0x62>
			sfn[i++] = c;
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	1c5a      	adds	r2, r3, #1
 800fcb6:	613a      	str	r2, [r7, #16]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	4413      	add	r3, r2
 800fcbc:	7ffa      	ldrb	r2, [r7, #31]
 800fcbe:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800fcc0:	e7ea      	b.n	800fc98 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800fcc2:	7ffb      	ldrb	r3, [r7, #31]
 800fcc4:	2b2f      	cmp	r3, #47	; 0x2f
 800fcc6:	d007      	beq.n	800fcd8 <create_name+0x78>
 800fcc8:	7ffb      	ldrb	r3, [r7, #31]
 800fcca:	2b5c      	cmp	r3, #92	; 0x5c
 800fccc:	d004      	beq.n	800fcd8 <create_name+0x78>
 800fcce:	7ffb      	ldrb	r3, [r7, #31]
 800fcd0:	2b20      	cmp	r3, #32
 800fcd2:	d901      	bls.n	800fcd8 <create_name+0x78>
 800fcd4:	2306      	movs	r3, #6
 800fcd6:	e084      	b.n	800fde2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	441a      	add	r2, r3
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800fce2:	7ffb      	ldrb	r3, [r7, #31]
 800fce4:	2b20      	cmp	r3, #32
 800fce6:	d801      	bhi.n	800fcec <create_name+0x8c>
 800fce8:	2224      	movs	r2, #36	; 0x24
 800fcea:	e000      	b.n	800fcee <create_name+0x8e>
 800fcec:	2220      	movs	r2, #32
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	330b      	adds	r3, #11
 800fcf2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e074      	b.n	800fde2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	617a      	str	r2, [r7, #20]
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	4413      	add	r3, r2
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fd06:	7ffb      	ldrb	r3, [r7, #31]
 800fd08:	2b20      	cmp	r3, #32
 800fd0a:	d94e      	bls.n	800fdaa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fd0c:	7ffb      	ldrb	r3, [r7, #31]
 800fd0e:	2b2f      	cmp	r3, #47	; 0x2f
 800fd10:	d006      	beq.n	800fd20 <create_name+0xc0>
 800fd12:	7ffb      	ldrb	r3, [r7, #31]
 800fd14:	2b5c      	cmp	r3, #92	; 0x5c
 800fd16:	d110      	bne.n	800fd3a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fd18:	e002      	b.n	800fd20 <create_name+0xc0>
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	617b      	str	r3, [r7, #20]
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	4413      	add	r3, r2
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b2f      	cmp	r3, #47	; 0x2f
 800fd2a:	d0f6      	beq.n	800fd1a <create_name+0xba>
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	4413      	add	r3, r2
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	2b5c      	cmp	r3, #92	; 0x5c
 800fd36:	d0f0      	beq.n	800fd1a <create_name+0xba>
			break;
 800fd38:	e038      	b.n	800fdac <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fd3a:	7ffb      	ldrb	r3, [r7, #31]
 800fd3c:	2b2e      	cmp	r3, #46	; 0x2e
 800fd3e:	d003      	beq.n	800fd48 <create_name+0xe8>
 800fd40:	693a      	ldr	r2, [r7, #16]
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d30c      	bcc.n	800fd62 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fd48:	69bb      	ldr	r3, [r7, #24]
 800fd4a:	2b0b      	cmp	r3, #11
 800fd4c:	d002      	beq.n	800fd54 <create_name+0xf4>
 800fd4e:	7ffb      	ldrb	r3, [r7, #31]
 800fd50:	2b2e      	cmp	r3, #46	; 0x2e
 800fd52:	d001      	beq.n	800fd58 <create_name+0xf8>
 800fd54:	2306      	movs	r3, #6
 800fd56:	e044      	b.n	800fde2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800fd58:	2308      	movs	r3, #8
 800fd5a:	613b      	str	r3, [r7, #16]
 800fd5c:	230b      	movs	r3, #11
 800fd5e:	61bb      	str	r3, [r7, #24]
			continue;
 800fd60:	e022      	b.n	800fda8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fd62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	da04      	bge.n	800fd74 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fd6a:	7ffb      	ldrb	r3, [r7, #31]
 800fd6c:	3b80      	subs	r3, #128	; 0x80
 800fd6e:	4a1f      	ldr	r2, [pc, #124]	; (800fdec <create_name+0x18c>)
 800fd70:	5cd3      	ldrb	r3, [r2, r3]
 800fd72:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fd74:	7ffb      	ldrb	r3, [r7, #31]
 800fd76:	4619      	mov	r1, r3
 800fd78:	481d      	ldr	r0, [pc, #116]	; (800fdf0 <create_name+0x190>)
 800fd7a:	f7fe fee5 	bl	800eb48 <chk_chr>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <create_name+0x128>
 800fd84:	2306      	movs	r3, #6
 800fd86:	e02c      	b.n	800fde2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fd88:	7ffb      	ldrb	r3, [r7, #31]
 800fd8a:	2b60      	cmp	r3, #96	; 0x60
 800fd8c:	d905      	bls.n	800fd9a <create_name+0x13a>
 800fd8e:	7ffb      	ldrb	r3, [r7, #31]
 800fd90:	2b7a      	cmp	r3, #122	; 0x7a
 800fd92:	d802      	bhi.n	800fd9a <create_name+0x13a>
 800fd94:	7ffb      	ldrb	r3, [r7, #31]
 800fd96:	3b20      	subs	r3, #32
 800fd98:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	613a      	str	r2, [r7, #16]
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	4413      	add	r3, r2
 800fda4:	7ffa      	ldrb	r2, [r7, #31]
 800fda6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fda8:	e7a6      	b.n	800fcf8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fdaa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	441a      	add	r2, r3
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d101      	bne.n	800fdc0 <create_name+0x160>
 800fdbc:	2306      	movs	r3, #6
 800fdbe:	e010      	b.n	800fde2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	2be5      	cmp	r3, #229	; 0xe5
 800fdc6:	d102      	bne.n	800fdce <create_name+0x16e>
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	2205      	movs	r2, #5
 800fdcc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fdce:	7ffb      	ldrb	r3, [r7, #31]
 800fdd0:	2b20      	cmp	r3, #32
 800fdd2:	d801      	bhi.n	800fdd8 <create_name+0x178>
 800fdd4:	2204      	movs	r2, #4
 800fdd6:	e000      	b.n	800fdda <create_name+0x17a>
 800fdd8:	2200      	movs	r2, #0
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	330b      	adds	r3, #11
 800fdde:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fde0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3720      	adds	r7, #32
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	08017fc4 	.word	0x08017fc4
 800fdf0:	08017f74 	.word	0x08017f74

0800fdf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b2f      	cmp	r3, #47	; 0x2f
 800fe0e:	d00b      	beq.n	800fe28 <follow_path+0x34>
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	2b5c      	cmp	r3, #92	; 0x5c
 800fe16:	d007      	beq.n	800fe28 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	699a      	ldr	r2, [r3, #24]
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	609a      	str	r2, [r3, #8]
 800fe20:	e00d      	b.n	800fe3e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	3301      	adds	r3, #1
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2b2f      	cmp	r3, #47	; 0x2f
 800fe2e:	d0f8      	beq.n	800fe22 <follow_path+0x2e>
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2b5c      	cmp	r3, #92	; 0x5c
 800fe36:	d0f4      	beq.n	800fe22 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	2b1f      	cmp	r3, #31
 800fe44:	d80a      	bhi.n	800fe5c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2280      	movs	r2, #128	; 0x80
 800fe4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fe4e:	2100      	movs	r1, #0
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff fc1e 	bl	800f692 <dir_sdi>
 800fe56:	4603      	mov	r3, r0
 800fe58:	75fb      	strb	r3, [r7, #23]
 800fe5a:	e05b      	b.n	800ff14 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe5c:	463b      	mov	r3, r7
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7ff fefd 	bl	800fc60 <create_name>
 800fe66:	4603      	mov	r3, r0
 800fe68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fe6a:	7dfb      	ldrb	r3, [r7, #23]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d14c      	bne.n	800ff0a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7ff fe50 	bl	800fb16 <dir_find>
 800fe76:	4603      	mov	r3, r0
 800fe78:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe80:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d01b      	beq.n	800fec0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fe88:	7dfb      	ldrb	r3, [r7, #23]
 800fe8a:	2b04      	cmp	r3, #4
 800fe8c:	d13f      	bne.n	800ff0e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fe8e:	7afb      	ldrb	r3, [r7, #11]
 800fe90:	f003 0320 	and.w	r3, r3, #32
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00b      	beq.n	800feb0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fe98:	7afb      	ldrb	r3, [r7, #11]
 800fe9a:	f003 0304 	and.w	r3, r3, #4
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d031      	beq.n	800ff06 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2280      	movs	r2, #128	; 0x80
 800fea6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800feaa:	2300      	movs	r3, #0
 800feac:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800feae:	e02e      	b.n	800ff0e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800feb0:	7afb      	ldrb	r3, [r7, #11]
 800feb2:	f003 0304 	and.w	r3, r3, #4
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d129      	bne.n	800ff0e <follow_path+0x11a>
 800feba:	2305      	movs	r3, #5
 800febc:	75fb      	strb	r3, [r7, #23]
				break;
 800febe:	e026      	b.n	800ff0e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fec0:	7afb      	ldrb	r3, [r7, #11]
 800fec2:	f003 0304 	and.w	r3, r3, #4
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d123      	bne.n	800ff12 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	799b      	ldrb	r3, [r3, #6]
 800fece:	f003 0310 	and.w	r3, r3, #16
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d102      	bne.n	800fedc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fed6:	2305      	movs	r3, #5
 800fed8:	75fb      	strb	r3, [r7, #23]
 800feda:	e01b      	b.n	800ff14 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	8992      	ldrh	r2, [r2, #12]
 800feea:	fbb3 f0f2 	udiv	r0, r3, r2
 800feee:	fb02 f200 	mul.w	r2, r2, r0
 800fef2:	1a9b      	subs	r3, r3, r2
 800fef4:	440b      	add	r3, r1
 800fef6:	4619      	mov	r1, r3
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f7ff fd70 	bl	800f9de <ld_clust>
 800fefe:	4602      	mov	r2, r0
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	609a      	str	r2, [r3, #8]
 800ff04:	e7aa      	b.n	800fe5c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ff06:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff08:	e7a8      	b.n	800fe5c <follow_path+0x68>
			if (res != FR_OK) break;
 800ff0a:	bf00      	nop
 800ff0c:	e002      	b.n	800ff14 <follow_path+0x120>
				break;
 800ff0e:	bf00      	nop
 800ff10:	e000      	b.n	800ff14 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff12:	bf00      	nop
			}
		}
	}

	return res;
 800ff14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b087      	sub	sp, #28
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ff26:	f04f 33ff 	mov.w	r3, #4294967295
 800ff2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d031      	beq.n	800ff98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	617b      	str	r3, [r7, #20]
 800ff3a:	e002      	b.n	800ff42 <get_ldnumber+0x24>
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	3301      	adds	r3, #1
 800ff40:	617b      	str	r3, [r7, #20]
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	2b20      	cmp	r3, #32
 800ff48:	d903      	bls.n	800ff52 <get_ldnumber+0x34>
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	2b3a      	cmp	r3, #58	; 0x3a
 800ff50:	d1f4      	bne.n	800ff3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b3a      	cmp	r3, #58	; 0x3a
 800ff58:	d11c      	bne.n	800ff94 <get_ldnumber+0x76>
			tp = *path;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	1c5a      	adds	r2, r3, #1
 800ff64:	60fa      	str	r2, [r7, #12]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	3b30      	subs	r3, #48	; 0x30
 800ff6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	2b09      	cmp	r3, #9
 800ff70:	d80e      	bhi.n	800ff90 <get_ldnumber+0x72>
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d10a      	bne.n	800ff90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d107      	bne.n	800ff90 <get_ldnumber+0x72>
					vol = (int)i;
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	3301      	adds	r3, #1
 800ff88:	617b      	str	r3, [r7, #20]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	697a      	ldr	r2, [r7, #20]
 800ff8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	e002      	b.n	800ff9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ff94:	2300      	movs	r3, #0
 800ff96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ff98:	693b      	ldr	r3, [r7, #16]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	371c      	adds	r7, #28
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
	...

0800ffa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	70da      	strb	r2, [r3, #3]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f04f 32ff 	mov.w	r2, #4294967295
 800ffbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ffc0:	6839      	ldr	r1, [r7, #0]
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7fe ff8c 	bl	800eee0 <move_window>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <check_fs+0x2a>
 800ffce:	2304      	movs	r3, #4
 800ffd0:	e038      	b.n	8010044 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3338      	adds	r3, #56	; 0x38
 800ffd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fe fcd0 	bl	800e980 <ld_word>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d001      	beq.n	800fff0 <check_fs+0x48>
 800ffec:	2303      	movs	r3, #3
 800ffee:	e029      	b.n	8010044 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fff6:	2be9      	cmp	r3, #233	; 0xe9
 800fff8:	d009      	beq.n	801000e <check_fs+0x66>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010000:	2beb      	cmp	r3, #235	; 0xeb
 8010002:	d11e      	bne.n	8010042 <check_fs+0x9a>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801000a:	2b90      	cmp	r3, #144	; 0x90
 801000c:	d119      	bne.n	8010042 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	3338      	adds	r3, #56	; 0x38
 8010012:	3336      	adds	r3, #54	; 0x36
 8010014:	4618      	mov	r0, r3
 8010016:	f7fe fccb 	bl	800e9b0 <ld_dword>
 801001a:	4603      	mov	r3, r0
 801001c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010020:	4a0a      	ldr	r2, [pc, #40]	; (801004c <check_fs+0xa4>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d101      	bne.n	801002a <check_fs+0x82>
 8010026:	2300      	movs	r3, #0
 8010028:	e00c      	b.n	8010044 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	3338      	adds	r3, #56	; 0x38
 801002e:	3352      	adds	r3, #82	; 0x52
 8010030:	4618      	mov	r0, r3
 8010032:	f7fe fcbd 	bl	800e9b0 <ld_dword>
 8010036:	4602      	mov	r2, r0
 8010038:	4b05      	ldr	r3, [pc, #20]	; (8010050 <check_fs+0xa8>)
 801003a:	429a      	cmp	r2, r3
 801003c:	d101      	bne.n	8010042 <check_fs+0x9a>
 801003e:	2300      	movs	r3, #0
 8010040:	e000      	b.n	8010044 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010042:	2302      	movs	r3, #2
}
 8010044:	4618      	mov	r0, r3
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	00544146 	.word	0x00544146
 8010050:	33544146 	.word	0x33544146

08010054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b096      	sub	sp, #88	; 0x58
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	4613      	mov	r3, r2
 8010060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2200      	movs	r2, #0
 8010066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7ff ff58 	bl	800ff1e <get_ldnumber>
 801006e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010072:	2b00      	cmp	r3, #0
 8010074:	da01      	bge.n	801007a <find_volume+0x26>
 8010076:	230b      	movs	r3, #11
 8010078:	e268      	b.n	801054c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801007a:	4ab0      	ldr	r2, [pc, #704]	; (801033c <find_volume+0x2e8>)
 801007c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801007e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010082:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010086:	2b00      	cmp	r3, #0
 8010088:	d101      	bne.n	801008e <find_volume+0x3a>
 801008a:	230c      	movs	r3, #12
 801008c:	e25e      	b.n	801054c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010092:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010094:	79fb      	ldrb	r3, [r7, #7]
 8010096:	f023 0301 	bic.w	r3, r3, #1
 801009a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801009c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d01a      	beq.n	80100da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	785b      	ldrb	r3, [r3, #1]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fe fbcb 	bl	800e844 <disk_status>
 80100ae:	4603      	mov	r3, r0
 80100b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80100b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10c      	bne.n	80100da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80100c0:	79fb      	ldrb	r3, [r7, #7]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d007      	beq.n	80100d6 <find_volume+0x82>
 80100c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100ca:	f003 0304 	and.w	r3, r3, #4
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80100d2:	230a      	movs	r3, #10
 80100d4:	e23a      	b.n	801054c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80100d6:	2300      	movs	r3, #0
 80100d8:	e238      	b.n	801054c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80100da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100dc:	2200      	movs	r2, #0
 80100de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80100e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e2:	b2da      	uxtb	r2, r3
 80100e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80100e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ea:	785b      	ldrb	r3, [r3, #1]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fe fbc3 	bl	800e878 <disk_initialize>
 80100f2:	4603      	mov	r3, r0
 80100f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80100f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100fc:	f003 0301 	and.w	r3, r3, #1
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010104:	2303      	movs	r3, #3
 8010106:	e221      	b.n	801054c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010108:	79fb      	ldrb	r3, [r7, #7]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d007      	beq.n	801011e <find_volume+0xca>
 801010e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010112:	f003 0304 	and.w	r3, r3, #4
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801011a:	230a      	movs	r3, #10
 801011c:	e216      	b.n	801054c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	7858      	ldrb	r0, [r3, #1]
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	330c      	adds	r3, #12
 8010126:	461a      	mov	r2, r3
 8010128:	2102      	movs	r1, #2
 801012a:	f7fe fc0b 	bl	800e944 <disk_ioctl>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <find_volume+0xe4>
 8010134:	2301      	movs	r3, #1
 8010136:	e209      	b.n	801054c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013a:	899b      	ldrh	r3, [r3, #12]
 801013c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010140:	d80d      	bhi.n	801015e <find_volume+0x10a>
 8010142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010144:	899b      	ldrh	r3, [r3, #12]
 8010146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801014a:	d308      	bcc.n	801015e <find_volume+0x10a>
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	899b      	ldrh	r3, [r3, #12]
 8010150:	461a      	mov	r2, r3
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	899b      	ldrh	r3, [r3, #12]
 8010156:	3b01      	subs	r3, #1
 8010158:	4013      	ands	r3, r2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <find_volume+0x10e>
 801015e:	2301      	movs	r3, #1
 8010160:	e1f4      	b.n	801054c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801016a:	f7ff ff1d 	bl	800ffa8 <check_fs>
 801016e:	4603      	mov	r3, r0
 8010170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010178:	2b02      	cmp	r3, #2
 801017a:	d14b      	bne.n	8010214 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801017c:	2300      	movs	r3, #0
 801017e:	643b      	str	r3, [r7, #64]	; 0x40
 8010180:	e01f      	b.n	80101c2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801018a:	011b      	lsls	r3, r3, #4
 801018c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010190:	4413      	add	r3, r2
 8010192:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010196:	3304      	adds	r3, #4
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d006      	beq.n	80101ac <find_volume+0x158>
 801019e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a0:	3308      	adds	r3, #8
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fe fc04 	bl	800e9b0 <ld_dword>
 80101a8:	4602      	mov	r2, r0
 80101aa:	e000      	b.n	80101ae <find_volume+0x15a>
 80101ac:	2200      	movs	r2, #0
 80101ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80101b6:	440b      	add	r3, r1
 80101b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80101bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101be:	3301      	adds	r3, #1
 80101c0:	643b      	str	r3, [r7, #64]	; 0x40
 80101c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101c4:	2b03      	cmp	r3, #3
 80101c6:	d9dc      	bls.n	8010182 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80101c8:	2300      	movs	r3, #0
 80101ca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80101cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d002      	beq.n	80101d8 <find_volume+0x184>
 80101d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101d4:	3b01      	subs	r3, #1
 80101d6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80101d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80101e0:	4413      	add	r3, r2
 80101e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80101e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80101e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d005      	beq.n	80101fa <find_volume+0x1a6>
 80101ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101f2:	f7ff fed9 	bl	800ffa8 <check_fs>
 80101f6:	4603      	mov	r3, r0
 80101f8:	e000      	b.n	80101fc <find_volume+0x1a8>
 80101fa:	2303      	movs	r3, #3
 80101fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010204:	2b01      	cmp	r3, #1
 8010206:	d905      	bls.n	8010214 <find_volume+0x1c0>
 8010208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801020a:	3301      	adds	r3, #1
 801020c:	643b      	str	r3, [r7, #64]	; 0x40
 801020e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010210:	2b03      	cmp	r3, #3
 8010212:	d9e1      	bls.n	80101d8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010218:	2b04      	cmp	r3, #4
 801021a:	d101      	bne.n	8010220 <find_volume+0x1cc>
 801021c:	2301      	movs	r3, #1
 801021e:	e195      	b.n	801054c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010224:	2b01      	cmp	r3, #1
 8010226:	d901      	bls.n	801022c <find_volume+0x1d8>
 8010228:	230d      	movs	r3, #13
 801022a:	e18f      	b.n	801054c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	3338      	adds	r3, #56	; 0x38
 8010230:	330b      	adds	r3, #11
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe fba4 	bl	800e980 <ld_word>
 8010238:	4603      	mov	r3, r0
 801023a:	461a      	mov	r2, r3
 801023c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023e:	899b      	ldrh	r3, [r3, #12]
 8010240:	429a      	cmp	r2, r3
 8010242:	d001      	beq.n	8010248 <find_volume+0x1f4>
 8010244:	230d      	movs	r3, #13
 8010246:	e181      	b.n	801054c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024a:	3338      	adds	r3, #56	; 0x38
 801024c:	3316      	adds	r3, #22
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe fb96 	bl	800e980 <ld_word>
 8010254:	4603      	mov	r3, r0
 8010256:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801025a:	2b00      	cmp	r3, #0
 801025c:	d106      	bne.n	801026c <find_volume+0x218>
 801025e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010260:	3338      	adds	r3, #56	; 0x38
 8010262:	3324      	adds	r3, #36	; 0x24
 8010264:	4618      	mov	r0, r3
 8010266:	f7fe fba3 	bl	800e9b0 <ld_dword>
 801026a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010270:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010274:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801027c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027e:	789b      	ldrb	r3, [r3, #2]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d005      	beq.n	8010290 <find_volume+0x23c>
 8010284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010286:	789b      	ldrb	r3, [r3, #2]
 8010288:	2b02      	cmp	r3, #2
 801028a:	d001      	beq.n	8010290 <find_volume+0x23c>
 801028c:	230d      	movs	r3, #13
 801028e:	e15d      	b.n	801054c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	789b      	ldrb	r3, [r3, #2]
 8010294:	461a      	mov	r2, r3
 8010296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010298:	fb02 f303 	mul.w	r3, r2, r3
 801029c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801029e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	895b      	ldrh	r3, [r3, #10]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d008      	beq.n	80102c4 <find_volume+0x270>
 80102b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b4:	895b      	ldrh	r3, [r3, #10]
 80102b6:	461a      	mov	r2, r3
 80102b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ba:	895b      	ldrh	r3, [r3, #10]
 80102bc:	3b01      	subs	r3, #1
 80102be:	4013      	ands	r3, r2
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d001      	beq.n	80102c8 <find_volume+0x274>
 80102c4:	230d      	movs	r3, #13
 80102c6:	e141      	b.n	801054c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	3338      	adds	r3, #56	; 0x38
 80102cc:	3311      	adds	r3, #17
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe fb56 	bl	800e980 <ld_word>
 80102d4:	4603      	mov	r3, r0
 80102d6:	461a      	mov	r2, r3
 80102d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80102dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102de:	891b      	ldrh	r3, [r3, #8]
 80102e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102e2:	8992      	ldrh	r2, [r2, #12]
 80102e4:	0952      	lsrs	r2, r2, #5
 80102e6:	b292      	uxth	r2, r2
 80102e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80102ec:	fb02 f201 	mul.w	r2, r2, r1
 80102f0:	1a9b      	subs	r3, r3, r2
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <find_volume+0x2a8>
 80102f8:	230d      	movs	r3, #13
 80102fa:	e127      	b.n	801054c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80102fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fe:	3338      	adds	r3, #56	; 0x38
 8010300:	3313      	adds	r3, #19
 8010302:	4618      	mov	r0, r3
 8010304:	f7fe fb3c 	bl	800e980 <ld_word>
 8010308:	4603      	mov	r3, r0
 801030a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801030c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <find_volume+0x2cc>
 8010312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010314:	3338      	adds	r3, #56	; 0x38
 8010316:	3320      	adds	r3, #32
 8010318:	4618      	mov	r0, r3
 801031a:	f7fe fb49 	bl	800e9b0 <ld_dword>
 801031e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	3338      	adds	r3, #56	; 0x38
 8010324:	330e      	adds	r3, #14
 8010326:	4618      	mov	r0, r3
 8010328:	f7fe fb2a 	bl	800e980 <ld_word>
 801032c:	4603      	mov	r3, r0
 801032e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010330:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010332:	2b00      	cmp	r3, #0
 8010334:	d104      	bne.n	8010340 <find_volume+0x2ec>
 8010336:	230d      	movs	r3, #13
 8010338:	e108      	b.n	801054c <find_volume+0x4f8>
 801033a:	bf00      	nop
 801033c:	20037438 	.word	0x20037438

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010340:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010344:	4413      	add	r3, r2
 8010346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010348:	8911      	ldrh	r1, [r2, #8]
 801034a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801034c:	8992      	ldrh	r2, [r2, #12]
 801034e:	0952      	lsrs	r2, r2, #5
 8010350:	b292      	uxth	r2, r2
 8010352:	fbb1 f2f2 	udiv	r2, r1, r2
 8010356:	b292      	uxth	r2, r2
 8010358:	4413      	add	r3, r2
 801035a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801035c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801035e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010360:	429a      	cmp	r2, r3
 8010362:	d201      	bcs.n	8010368 <find_volume+0x314>
 8010364:	230d      	movs	r3, #13
 8010366:	e0f1      	b.n	801054c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	1ad3      	subs	r3, r2, r3
 801036e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010370:	8952      	ldrh	r2, [r2, #10]
 8010372:	fbb3 f3f2 	udiv	r3, r3, r2
 8010376:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <find_volume+0x32e>
 801037e:	230d      	movs	r3, #13
 8010380:	e0e4      	b.n	801054c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010382:	2303      	movs	r3, #3
 8010384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801038e:	4293      	cmp	r3, r2
 8010390:	d802      	bhi.n	8010398 <find_volume+0x344>
 8010392:	2302      	movs	r3, #2
 8010394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801039e:	4293      	cmp	r3, r2
 80103a0:	d802      	bhi.n	80103a8 <find_volume+0x354>
 80103a2:	2301      	movs	r3, #1
 80103a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	1c9a      	adds	r2, r3, #2
 80103ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80103b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103b4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80103b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ba:	441a      	add	r2, r3
 80103bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103be:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80103c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c4:	441a      	add	r2, r3
 80103c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80103ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103ce:	2b03      	cmp	r3, #3
 80103d0:	d11e      	bne.n	8010410 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80103d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d4:	3338      	adds	r3, #56	; 0x38
 80103d6:	332a      	adds	r3, #42	; 0x2a
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fe fad1 	bl	800e980 <ld_word>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d001      	beq.n	80103e8 <find_volume+0x394>
 80103e4:	230d      	movs	r3, #13
 80103e6:	e0b1      	b.n	801054c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80103e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ea:	891b      	ldrh	r3, [r3, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d001      	beq.n	80103f4 <find_volume+0x3a0>
 80103f0:	230d      	movs	r3, #13
 80103f2:	e0ab      	b.n	801054c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80103f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f6:	3338      	adds	r3, #56	; 0x38
 80103f8:	332c      	adds	r3, #44	; 0x2c
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fe fad8 	bl	800e9b0 <ld_dword>
 8010400:	4602      	mov	r2, r0
 8010402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010404:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010408:	69db      	ldr	r3, [r3, #28]
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	647b      	str	r3, [r7, #68]	; 0x44
 801040e:	e01f      	b.n	8010450 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010412:	891b      	ldrh	r3, [r3, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d101      	bne.n	801041c <find_volume+0x3c8>
 8010418:	230d      	movs	r3, #13
 801041a:	e097      	b.n	801054c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801041c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010422:	441a      	add	r2, r3
 8010424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010426:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801042c:	2b02      	cmp	r3, #2
 801042e:	d103      	bne.n	8010438 <find_volume+0x3e4>
 8010430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010432:	69db      	ldr	r3, [r3, #28]
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	e00a      	b.n	801044e <find_volume+0x3fa>
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	69da      	ldr	r2, [r3, #28]
 801043c:	4613      	mov	r3, r2
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	4413      	add	r3, r2
 8010442:	085a      	lsrs	r2, r3, #1
 8010444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010446:	69db      	ldr	r3, [r3, #28]
 8010448:	f003 0301 	and.w	r3, r3, #1
 801044c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801044e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010452:	6a1a      	ldr	r2, [r3, #32]
 8010454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010456:	899b      	ldrh	r3, [r3, #12]
 8010458:	4619      	mov	r1, r3
 801045a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801045c:	440b      	add	r3, r1
 801045e:	3b01      	subs	r3, #1
 8010460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010462:	8989      	ldrh	r1, [r1, #12]
 8010464:	fbb3 f3f1 	udiv	r3, r3, r1
 8010468:	429a      	cmp	r2, r3
 801046a:	d201      	bcs.n	8010470 <find_volume+0x41c>
 801046c:	230d      	movs	r3, #13
 801046e:	e06d      	b.n	801054c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010472:	f04f 32ff 	mov.w	r2, #4294967295
 8010476:	615a      	str	r2, [r3, #20]
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	695a      	ldr	r2, [r3, #20]
 801047c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010482:	2280      	movs	r2, #128	; 0x80
 8010484:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010486:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801048a:	2b03      	cmp	r3, #3
 801048c:	d149      	bne.n	8010522 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801048e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010490:	3338      	adds	r3, #56	; 0x38
 8010492:	3330      	adds	r3, #48	; 0x30
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fa73 	bl	800e980 <ld_word>
 801049a:	4603      	mov	r3, r0
 801049c:	2b01      	cmp	r3, #1
 801049e:	d140      	bne.n	8010522 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80104a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104a2:	3301      	adds	r3, #1
 80104a4:	4619      	mov	r1, r3
 80104a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104a8:	f7fe fd1a 	bl	800eee0 <move_window>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d137      	bne.n	8010522 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	2200      	movs	r2, #0
 80104b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	3338      	adds	r3, #56	; 0x38
 80104bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fe fa5d 	bl	800e980 <ld_word>
 80104c6:	4603      	mov	r3, r0
 80104c8:	461a      	mov	r2, r3
 80104ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d127      	bne.n	8010522 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80104d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d4:	3338      	adds	r3, #56	; 0x38
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe fa6a 	bl	800e9b0 <ld_dword>
 80104dc:	4602      	mov	r2, r0
 80104de:	4b1d      	ldr	r3, [pc, #116]	; (8010554 <find_volume+0x500>)
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d11e      	bne.n	8010522 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80104e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e6:	3338      	adds	r3, #56	; 0x38
 80104e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fe fa5f 	bl	800e9b0 <ld_dword>
 80104f2:	4602      	mov	r2, r0
 80104f4:	4b18      	ldr	r3, [pc, #96]	; (8010558 <find_volume+0x504>)
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d113      	bne.n	8010522 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80104fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fc:	3338      	adds	r3, #56	; 0x38
 80104fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010502:	4618      	mov	r0, r3
 8010504:	f7fe fa54 	bl	800e9b0 <ld_dword>
 8010508:	4602      	mov	r2, r0
 801050a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	3338      	adds	r3, #56	; 0x38
 8010512:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe fa4a 	bl	800e9b0 <ld_dword>
 801051c:	4602      	mov	r2, r0
 801051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010520:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010528:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801052a:	4b0c      	ldr	r3, [pc, #48]	; (801055c <find_volume+0x508>)
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	3301      	adds	r3, #1
 8010530:	b29a      	uxth	r2, r3
 8010532:	4b0a      	ldr	r3, [pc, #40]	; (801055c <find_volume+0x508>)
 8010534:	801a      	strh	r2, [r3, #0]
 8010536:	4b09      	ldr	r3, [pc, #36]	; (801055c <find_volume+0x508>)
 8010538:	881a      	ldrh	r2, [r3, #0]
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801053e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010540:	2200      	movs	r2, #0
 8010542:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010546:	f7fe fc63 	bl	800ee10 <clear_lock>
#endif
	return FR_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3758      	adds	r7, #88	; 0x58
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	41615252 	.word	0x41615252
 8010558:	61417272 	.word	0x61417272
 801055c:	2003743c 	.word	0x2003743c

08010560 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801056a:	2309      	movs	r3, #9
 801056c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d01c      	beq.n	80105ae <validate+0x4e>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d018      	beq.n	80105ae <validate+0x4e>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d013      	beq.n	80105ae <validate+0x4e>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	889a      	ldrh	r2, [r3, #4]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	88db      	ldrh	r3, [r3, #6]
 8010590:	429a      	cmp	r2, r3
 8010592:	d10c      	bne.n	80105ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	785b      	ldrb	r3, [r3, #1]
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe f952 	bl	800e844 <disk_status>
 80105a0:	4603      	mov	r3, r0
 80105a2:	f003 0301 	and.w	r3, r3, #1
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <validate+0x4e>
			res = FR_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80105ae:	7bfb      	ldrb	r3, [r7, #15]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d102      	bne.n	80105ba <validate+0x5a>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	e000      	b.n	80105bc <validate+0x5c>
 80105ba:	2300      	movs	r3, #0
 80105bc:	683a      	ldr	r2, [r7, #0]
 80105be:	6013      	str	r3, [r2, #0]
	return res;
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
	...

080105cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b088      	sub	sp, #32
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	4613      	mov	r3, r2
 80105d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80105de:	f107 0310 	add.w	r3, r7, #16
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7ff fc9b 	bl	800ff1e <get_ldnumber>
 80105e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	da01      	bge.n	80105f4 <f_mount+0x28>
 80105f0:	230b      	movs	r3, #11
 80105f2:	e02b      	b.n	801064c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80105f4:	4a17      	ldr	r2, [pc, #92]	; (8010654 <f_mount+0x88>)
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d005      	beq.n	8010610 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010604:	69b8      	ldr	r0, [r7, #24]
 8010606:	f7fe fc03 	bl	800ee10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	2200      	movs	r2, #0
 801060e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d002      	beq.n	801061c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2200      	movs	r2, #0
 801061a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	490d      	ldr	r1, [pc, #52]	; (8010654 <f_mount+0x88>)
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <f_mount+0x66>
 801062c:	79fb      	ldrb	r3, [r7, #7]
 801062e:	2b01      	cmp	r3, #1
 8010630:	d001      	beq.n	8010636 <f_mount+0x6a>
 8010632:	2300      	movs	r3, #0
 8010634:	e00a      	b.n	801064c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010636:	f107 010c 	add.w	r1, r7, #12
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	2200      	movs	r2, #0
 8010640:	4618      	mov	r0, r3
 8010642:	f7ff fd07 	bl	8010054 <find_volume>
 8010646:	4603      	mov	r3, r0
 8010648:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801064a:	7dfb      	ldrb	r3, [r7, #23]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3720      	adds	r7, #32
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	20037438 	.word	0x20037438

08010658 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b098      	sub	sp, #96	; 0x60
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4613      	mov	r3, r2
 8010664:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d101      	bne.n	8010670 <f_open+0x18>
 801066c:	2309      	movs	r3, #9
 801066e:	e1ba      	b.n	80109e6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010676:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010678:	79fa      	ldrb	r2, [r7, #7]
 801067a:	f107 0110 	add.w	r1, r7, #16
 801067e:	f107 0308 	add.w	r3, r7, #8
 8010682:	4618      	mov	r0, r3
 8010684:	f7ff fce6 	bl	8010054 <find_volume>
 8010688:	4603      	mov	r3, r0
 801068a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801068e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010692:	2b00      	cmp	r3, #0
 8010694:	f040 819e 	bne.w	80109d4 <f_open+0x37c>
		dj.obj.fs = fs;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	f107 0314 	add.w	r3, r7, #20
 80106a2:	4611      	mov	r1, r2
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff fba5 	bl	800fdf4 <follow_path>
 80106aa:	4603      	mov	r3, r0
 80106ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80106b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d11a      	bne.n	80106ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80106b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80106bc:	b25b      	sxtb	r3, r3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	da03      	bge.n	80106ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80106c2:	2306      	movs	r3, #6
 80106c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80106c8:	e011      	b.n	80106ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80106ca:	79fb      	ldrb	r3, [r7, #7]
 80106cc:	f023 0301 	bic.w	r3, r3, #1
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	bf14      	ite	ne
 80106d4:	2301      	movne	r3, #1
 80106d6:	2300      	moveq	r3, #0
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	461a      	mov	r2, r3
 80106dc:	f107 0314 	add.w	r3, r7, #20
 80106e0:	4611      	mov	r1, r2
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fe fa4c 	bl	800eb80 <chk_lock>
 80106e8:	4603      	mov	r3, r0
 80106ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80106ee:	79fb      	ldrb	r3, [r7, #7]
 80106f0:	f003 031c 	and.w	r3, r3, #28
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d07e      	beq.n	80107f6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80106f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d017      	beq.n	8010730 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010704:	2b04      	cmp	r3, #4
 8010706:	d10e      	bne.n	8010726 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010708:	f7fe fa96 	bl	800ec38 <enq_lock>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d006      	beq.n	8010720 <f_open+0xc8>
 8010712:	f107 0314 	add.w	r3, r7, #20
 8010716:	4618      	mov	r0, r3
 8010718:	f7ff fa52 	bl	800fbc0 <dir_register>
 801071c:	4603      	mov	r3, r0
 801071e:	e000      	b.n	8010722 <f_open+0xca>
 8010720:	2312      	movs	r3, #18
 8010722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010726:	79fb      	ldrb	r3, [r7, #7]
 8010728:	f043 0308 	orr.w	r3, r3, #8
 801072c:	71fb      	strb	r3, [r7, #7]
 801072e:	e010      	b.n	8010752 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010730:	7ebb      	ldrb	r3, [r7, #26]
 8010732:	f003 0311 	and.w	r3, r3, #17
 8010736:	2b00      	cmp	r3, #0
 8010738:	d003      	beq.n	8010742 <f_open+0xea>
					res = FR_DENIED;
 801073a:	2307      	movs	r3, #7
 801073c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010740:	e007      	b.n	8010752 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010742:	79fb      	ldrb	r3, [r7, #7]
 8010744:	f003 0304 	and.w	r3, r3, #4
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <f_open+0xfa>
 801074c:	2308      	movs	r3, #8
 801074e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010756:	2b00      	cmp	r3, #0
 8010758:	d167      	bne.n	801082a <f_open+0x1d2>
 801075a:	79fb      	ldrb	r3, [r7, #7]
 801075c:	f003 0308 	and.w	r3, r3, #8
 8010760:	2b00      	cmp	r3, #0
 8010762:	d062      	beq.n	801082a <f_open+0x1d2>
				dw = GET_FATTIME();
 8010764:	4ba2      	ldr	r3, [pc, #648]	; (80109f0 <f_open+0x398>)
 8010766:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801076a:	330e      	adds	r3, #14
 801076c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801076e:	4618      	mov	r0, r3
 8010770:	f7fe f95c 	bl	800ea2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010776:	3316      	adds	r3, #22
 8010778:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801077a:	4618      	mov	r0, r3
 801077c:	f7fe f956 	bl	800ea2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	330b      	adds	r3, #11
 8010784:	2220      	movs	r2, #32
 8010786:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801078c:	4611      	mov	r1, r2
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff f925 	bl	800f9de <ld_clust>
 8010794:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801079a:	2200      	movs	r2, #0
 801079c:	4618      	mov	r0, r3
 801079e:	f7ff f93d 	bl	800fa1c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80107a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a4:	331c      	adds	r3, #28
 80107a6:	2100      	movs	r1, #0
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe f93f 	bl	800ea2c <st_dword>
					fs->wflag = 1;
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	2201      	movs	r2, #1
 80107b2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80107b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d037      	beq.n	801082a <f_open+0x1d2>
						dw = fs->winsect;
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107be:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80107c0:	f107 0314 	add.w	r3, r7, #20
 80107c4:	2200      	movs	r2, #0
 80107c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fe fe2d 	bl	800f428 <remove_chain>
 80107ce:	4603      	mov	r3, r0
 80107d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80107d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d126      	bne.n	801082a <f_open+0x1d2>
							res = move_window(fs, dw);
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fe fb7d 	bl	800eee0 <move_window>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107f0:	3a01      	subs	r2, #1
 80107f2:	611a      	str	r2, [r3, #16]
 80107f4:	e019      	b.n	801082a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80107f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d115      	bne.n	801082a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80107fe:	7ebb      	ldrb	r3, [r7, #26]
 8010800:	f003 0310 	and.w	r3, r3, #16
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <f_open+0x1b8>
					res = FR_NO_FILE;
 8010808:	2304      	movs	r3, #4
 801080a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801080e:	e00c      	b.n	801082a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010810:	79fb      	ldrb	r3, [r7, #7]
 8010812:	f003 0302 	and.w	r3, r3, #2
 8010816:	2b00      	cmp	r3, #0
 8010818:	d007      	beq.n	801082a <f_open+0x1d2>
 801081a:	7ebb      	ldrb	r3, [r7, #26]
 801081c:	f003 0301 	and.w	r3, r3, #1
 8010820:	2b00      	cmp	r3, #0
 8010822:	d002      	beq.n	801082a <f_open+0x1d2>
						res = FR_DENIED;
 8010824:	2307      	movs	r3, #7
 8010826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801082a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801082e:	2b00      	cmp	r3, #0
 8010830:	d128      	bne.n	8010884 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010832:	79fb      	ldrb	r3, [r7, #7]
 8010834:	f003 0308 	and.w	r3, r3, #8
 8010838:	2b00      	cmp	r3, #0
 801083a:	d003      	beq.n	8010844 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801083c:	79fb      	ldrb	r3, [r7, #7]
 801083e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010842:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801084c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010852:	79fb      	ldrb	r3, [r7, #7]
 8010854:	f023 0301 	bic.w	r3, r3, #1
 8010858:	2b00      	cmp	r3, #0
 801085a:	bf14      	ite	ne
 801085c:	2301      	movne	r3, #1
 801085e:	2300      	moveq	r3, #0
 8010860:	b2db      	uxtb	r3, r3
 8010862:	461a      	mov	r2, r3
 8010864:	f107 0314 	add.w	r3, r7, #20
 8010868:	4611      	mov	r1, r2
 801086a:	4618      	mov	r0, r3
 801086c:	f7fe fa06 	bl	800ec7c <inc_lock>
 8010870:	4602      	mov	r2, r0
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	691b      	ldr	r3, [r3, #16]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d102      	bne.n	8010884 <f_open+0x22c>
 801087e:	2302      	movs	r3, #2
 8010880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010888:	2b00      	cmp	r3, #0
 801088a:	f040 80a3 	bne.w	80109d4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010892:	4611      	mov	r1, r2
 8010894:	4618      	mov	r0, r3
 8010896:	f7ff f8a2 	bl	800f9de <ld_clust>
 801089a:	4602      	mov	r2, r0
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80108a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a2:	331c      	adds	r3, #28
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fe f883 	bl	800e9b0 <ld_dword>
 80108aa:	4602      	mov	r2, r0
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2200      	movs	r2, #0
 80108b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80108b6:	693a      	ldr	r2, [r7, #16]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	88da      	ldrh	r2, [r3, #6]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	79fa      	ldrb	r2, [r7, #7]
 80108c8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	2200      	movs	r2, #0
 80108ce:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2200      	movs	r2, #0
 80108d4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2200      	movs	r2, #0
 80108da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	3330      	adds	r3, #48	; 0x30
 80108e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80108e4:	2100      	movs	r1, #0
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fe f8ed 	bl	800eac6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80108ec:	79fb      	ldrb	r3, [r7, #7]
 80108ee:	f003 0320 	and.w	r3, r3, #32
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d06e      	beq.n	80109d4 <f_open+0x37c>
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d06a      	beq.n	80109d4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	68da      	ldr	r2, [r3, #12]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	895b      	ldrh	r3, [r3, #10]
 801090a:	461a      	mov	r2, r3
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	899b      	ldrh	r3, [r3, #12]
 8010910:	fb03 f302 	mul.w	r3, r3, r2
 8010914:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	689b      	ldr	r3, [r3, #8]
 801091a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	657b      	str	r3, [r7, #84]	; 0x54
 8010922:	e016      	b.n	8010952 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010928:	4618      	mov	r0, r3
 801092a:	f7fe fb96 	bl	800f05a <get_fat>
 801092e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010932:	2b01      	cmp	r3, #1
 8010934:	d802      	bhi.n	801093c <f_open+0x2e4>
 8010936:	2302      	movs	r3, #2
 8010938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801093c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801093e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010942:	d102      	bne.n	801094a <f_open+0x2f2>
 8010944:	2301      	movs	r3, #1
 8010946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801094a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801094c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	657b      	str	r3, [r7, #84]	; 0x54
 8010952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010956:	2b00      	cmp	r3, #0
 8010958:	d103      	bne.n	8010962 <f_open+0x30a>
 801095a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801095c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801095e:	429a      	cmp	r2, r3
 8010960:	d8e0      	bhi.n	8010924 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010966:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801096c:	2b00      	cmp	r3, #0
 801096e:	d131      	bne.n	80109d4 <f_open+0x37c>
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	899b      	ldrh	r3, [r3, #12]
 8010974:	461a      	mov	r2, r3
 8010976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010978:	fbb3 f1f2 	udiv	r1, r3, r2
 801097c:	fb02 f201 	mul.w	r2, r2, r1
 8010980:	1a9b      	subs	r3, r3, r2
 8010982:	2b00      	cmp	r3, #0
 8010984:	d026      	beq.n	80109d4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801098a:	4618      	mov	r0, r3
 801098c:	f7fe fb46 	bl	800f01c <clust2sect>
 8010990:	6478      	str	r0, [r7, #68]	; 0x44
 8010992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010994:	2b00      	cmp	r3, #0
 8010996:	d103      	bne.n	80109a0 <f_open+0x348>
						res = FR_INT_ERR;
 8010998:	2302      	movs	r3, #2
 801099a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801099e:	e019      	b.n	80109d4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	899b      	ldrh	r3, [r3, #12]
 80109a4:	461a      	mov	r2, r3
 80109a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80109ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ae:	441a      	add	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	7858      	ldrb	r0, [r3, #1]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a1a      	ldr	r2, [r3, #32]
 80109c2:	2301      	movs	r3, #1
 80109c4:	f7fd ff7e 	bl	800e8c4 <disk_read>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d002      	beq.n	80109d4 <f_open+0x37c>
 80109ce:	2301      	movs	r3, #1
 80109d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80109d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <f_open+0x38a>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80109e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3760      	adds	r7, #96	; 0x60
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	274a0000 	.word	0x274a0000

080109f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b08e      	sub	sp, #56	; 0x38
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
 8010a00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f107 0214 	add.w	r2, r7, #20
 8010a12:	4611      	mov	r1, r2
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff fda3 	bl	8010560 <validate>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d107      	bne.n	8010a38 <f_read+0x44>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	7d5b      	ldrb	r3, [r3, #21]
 8010a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <f_read+0x4a>
 8010a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a3c:	e135      	b.n	8010caa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	7d1b      	ldrb	r3, [r3, #20]
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d101      	bne.n	8010a4e <f_read+0x5a>
 8010a4a:	2307      	movs	r3, #7
 8010a4c:	e12d      	b.n	8010caa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	68da      	ldr	r2, [r3, #12]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	699b      	ldr	r3, [r3, #24]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	6a3b      	ldr	r3, [r7, #32]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	f240 811e 	bls.w	8010ca0 <f_read+0x2ac>
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010a68:	e11a      	b.n	8010ca0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	699b      	ldr	r3, [r3, #24]
 8010a6e:	697a      	ldr	r2, [r7, #20]
 8010a70:	8992      	ldrh	r2, [r2, #12]
 8010a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a76:	fb02 f201 	mul.w	r2, r2, r1
 8010a7a:	1a9b      	subs	r3, r3, r2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f040 80d5 	bne.w	8010c2c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	697a      	ldr	r2, [r7, #20]
 8010a88:	8992      	ldrh	r2, [r2, #12]
 8010a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	8952      	ldrh	r2, [r2, #10]
 8010a92:	3a01      	subs	r2, #1
 8010a94:	4013      	ands	r3, r2
 8010a96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d12f      	bne.n	8010afe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	699b      	ldr	r3, [r3, #24]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d103      	bne.n	8010aae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8010aac:	e013      	b.n	8010ad6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d007      	beq.n	8010ac6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	699b      	ldr	r3, [r3, #24]
 8010aba:	4619      	mov	r1, r3
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f7fe fdb0 	bl	800f622 <clmt_clust>
 8010ac2:	6338      	str	r0, [r7, #48]	; 0x30
 8010ac4:	e007      	b.n	8010ad6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010ac6:	68fa      	ldr	r2, [r7, #12]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	69db      	ldr	r3, [r3, #28]
 8010acc:	4619      	mov	r1, r3
 8010ace:	4610      	mov	r0, r2
 8010ad0:	f7fe fac3 	bl	800f05a <get_fat>
 8010ad4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d804      	bhi.n	8010ae6 <f_read+0xf2>
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2202      	movs	r2, #2
 8010ae0:	755a      	strb	r2, [r3, #21]
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	e0e1      	b.n	8010caa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aec:	d104      	bne.n	8010af8 <f_read+0x104>
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2201      	movs	r2, #1
 8010af2:	755a      	strb	r2, [r3, #21]
 8010af4:	2301      	movs	r3, #1
 8010af6:	e0d8      	b.n	8010caa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010afc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	69db      	ldr	r3, [r3, #28]
 8010b04:	4619      	mov	r1, r3
 8010b06:	4610      	mov	r0, r2
 8010b08:	f7fe fa88 	bl	800f01c <clust2sect>
 8010b0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d104      	bne.n	8010b1e <f_read+0x12a>
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2202      	movs	r2, #2
 8010b18:	755a      	strb	r2, [r3, #21]
 8010b1a:	2302      	movs	r3, #2
 8010b1c:	e0c5      	b.n	8010caa <f_read+0x2b6>
			sect += csect;
 8010b1e:	69ba      	ldr	r2, [r7, #24]
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	4413      	add	r3, r2
 8010b24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	899b      	ldrh	r3, [r3, #12]
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b32:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d041      	beq.n	8010bbe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010b3a:	69fa      	ldr	r2, [r7, #28]
 8010b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3e:	4413      	add	r3, r2
 8010b40:	697a      	ldr	r2, [r7, #20]
 8010b42:	8952      	ldrh	r2, [r2, #10]
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d905      	bls.n	8010b54 <f_read+0x160>
					cc = fs->csize - csect;
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	895b      	ldrh	r3, [r3, #10]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	7858      	ldrb	r0, [r3, #1]
 8010b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b5e:	f7fd feb1 	bl	800e8c4 <disk_read>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d004      	beq.n	8010b72 <f_read+0x17e>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	755a      	strb	r2, [r3, #21]
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e09b      	b.n	8010caa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	7d1b      	ldrb	r3, [r3, #20]
 8010b76:	b25b      	sxtb	r3, r3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	da18      	bge.n	8010bae <f_read+0x1ba>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6a1a      	ldr	r2, [r3, #32]
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	1ad3      	subs	r3, r2, r3
 8010b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d911      	bls.n	8010bae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6a1a      	ldr	r2, [r3, #32]
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	8992      	ldrh	r2, [r2, #12]
 8010b96:	fb02 f303 	mul.w	r3, r2, r3
 8010b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b9c:	18d0      	adds	r0, r2, r3
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	899b      	ldrh	r3, [r3, #12]
 8010ba8:	461a      	mov	r2, r3
 8010baa:	f7fd ff6b 	bl	800ea84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	899b      	ldrh	r3, [r3, #12]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	fb02 f303 	mul.w	r3, r2, r3
 8010bba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010bbc:	e05c      	b.n	8010c78 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6a1b      	ldr	r3, [r3, #32]
 8010bc2:	69ba      	ldr	r2, [r7, #24]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d02e      	beq.n	8010c26 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	7d1b      	ldrb	r3, [r3, #20]
 8010bcc:	b25b      	sxtb	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	da18      	bge.n	8010c04 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	7858      	ldrb	r0, [r3, #1]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6a1a      	ldr	r2, [r3, #32]
 8010be0:	2301      	movs	r3, #1
 8010be2:	f7fd fe8f 	bl	800e904 <disk_write>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d004      	beq.n	8010bf6 <f_read+0x202>
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	755a      	strb	r2, [r3, #21]
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e059      	b.n	8010caa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	7d1b      	ldrb	r3, [r3, #20]
 8010bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	7858      	ldrb	r0, [r3, #1]
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c0e:	2301      	movs	r3, #1
 8010c10:	69ba      	ldr	r2, [r7, #24]
 8010c12:	f7fd fe57 	bl	800e8c4 <disk_read>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d004      	beq.n	8010c26 <f_read+0x232>
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	755a      	strb	r2, [r3, #21]
 8010c22:	2301      	movs	r3, #1
 8010c24:	e041      	b.n	8010caa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	69ba      	ldr	r2, [r7, #24]
 8010c2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	899b      	ldrh	r3, [r3, #12]
 8010c30:	4618      	mov	r0, r3
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	697a      	ldr	r2, [r7, #20]
 8010c38:	8992      	ldrh	r2, [r2, #12]
 8010c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c3e:	fb02 f201 	mul.w	r2, r2, r1
 8010c42:	1a9b      	subs	r3, r3, r2
 8010c44:	1ac3      	subs	r3, r0, r3
 8010c46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d901      	bls.n	8010c54 <f_read+0x260>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	699b      	ldr	r3, [r3, #24]
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	8992      	ldrh	r2, [r2, #12]
 8010c62:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c66:	fb02 f200 	mul.w	r2, r2, r0
 8010c6a:	1a9b      	subs	r3, r3, r2
 8010c6c:	440b      	add	r3, r1
 8010c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c70:	4619      	mov	r1, r3
 8010c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c74:	f7fd ff06 	bl	800ea84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7c:	4413      	add	r3, r2
 8010c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	699a      	ldr	r2, [r3, #24]
 8010c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c86:	441a      	add	r2, r3
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	619a      	str	r2, [r3, #24]
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c92:	441a      	add	r2, r3
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	601a      	str	r2, [r3, #0]
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f47f aee1 	bne.w	8010a6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3738      	adds	r7, #56	; 0x38
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b08c      	sub	sp, #48	; 0x30
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	60f8      	str	r0, [r7, #12]
 8010cba:	60b9      	str	r1, [r7, #8]
 8010cbc:	607a      	str	r2, [r7, #4]
 8010cbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f107 0210 	add.w	r2, r7, #16
 8010cd0:	4611      	mov	r1, r2
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7ff fc44 	bl	8010560 <validate>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d107      	bne.n	8010cf6 <f_write+0x44>
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	7d5b      	ldrb	r3, [r3, #21]
 8010cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <f_write+0x4a>
 8010cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cfa:	e16a      	b.n	8010fd2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	7d1b      	ldrb	r3, [r3, #20]
 8010d00:	f003 0302 	and.w	r3, r3, #2
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <f_write+0x5a>
 8010d08:	2307      	movs	r3, #7
 8010d0a:	e162      	b.n	8010fd2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	699a      	ldr	r2, [r3, #24]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	441a      	add	r2, r3
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	699b      	ldr	r3, [r3, #24]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	f080 814c 	bcs.w	8010fb6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	43db      	mvns	r3, r3
 8010d24:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010d26:	e146      	b.n	8010fb6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	699b      	ldr	r3, [r3, #24]
 8010d2c:	693a      	ldr	r2, [r7, #16]
 8010d2e:	8992      	ldrh	r2, [r2, #12]
 8010d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d34:	fb02 f201 	mul.w	r2, r2, r1
 8010d38:	1a9b      	subs	r3, r3, r2
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f040 80f1 	bne.w	8010f22 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	699b      	ldr	r3, [r3, #24]
 8010d44:	693a      	ldr	r2, [r7, #16]
 8010d46:	8992      	ldrh	r2, [r2, #12]
 8010d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d4c:	693a      	ldr	r2, [r7, #16]
 8010d4e:	8952      	ldrh	r2, [r2, #10]
 8010d50:	3a01      	subs	r2, #1
 8010d52:	4013      	ands	r3, r2
 8010d54:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d143      	bne.n	8010de4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	699b      	ldr	r3, [r3, #24]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d10c      	bne.n	8010d7e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d11a      	bne.n	8010da6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2100      	movs	r1, #0
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fe fbbc 	bl	800f4f2 <create_chain>
 8010d7a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d7c:	e013      	b.n	8010da6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d007      	beq.n	8010d96 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f7fe fc48 	bl	800f622 <clmt_clust>
 8010d92:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d94:	e007      	b.n	8010da6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	69db      	ldr	r3, [r3, #28]
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f7fe fba7 	bl	800f4f2 <create_chain>
 8010da4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 8109 	beq.w	8010fc0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d104      	bne.n	8010dbe <f_write+0x10c>
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2202      	movs	r2, #2
 8010db8:	755a      	strb	r2, [r3, #21]
 8010dba:	2302      	movs	r3, #2
 8010dbc:	e109      	b.n	8010fd2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc4:	d104      	bne.n	8010dd0 <f_write+0x11e>
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	755a      	strb	r2, [r3, #21]
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e100      	b.n	8010fd2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dd4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d102      	bne.n	8010de4 <f_write+0x132>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010de2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	7d1b      	ldrb	r3, [r3, #20]
 8010de8:	b25b      	sxtb	r3, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	da18      	bge.n	8010e20 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	7858      	ldrb	r0, [r3, #1]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6a1a      	ldr	r2, [r3, #32]
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	f7fd fd81 	bl	800e904 <disk_write>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <f_write+0x160>
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	755a      	strb	r2, [r3, #21]
 8010e0e:	2301      	movs	r3, #1
 8010e10:	e0df      	b.n	8010fd2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	7d1b      	ldrb	r3, [r3, #20]
 8010e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	69db      	ldr	r3, [r3, #28]
 8010e26:	4619      	mov	r1, r3
 8010e28:	4610      	mov	r0, r2
 8010e2a:	f7fe f8f7 	bl	800f01c <clust2sect>
 8010e2e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d104      	bne.n	8010e40 <f_write+0x18e>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2202      	movs	r2, #2
 8010e3a:	755a      	strb	r2, [r3, #21]
 8010e3c:	2302      	movs	r3, #2
 8010e3e:	e0c8      	b.n	8010fd2 <f_write+0x320>
			sect += csect;
 8010e40:	697a      	ldr	r2, [r7, #20]
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	4413      	add	r3, r2
 8010e46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	899b      	ldrh	r3, [r3, #12]
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e54:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010e56:	6a3b      	ldr	r3, [r7, #32]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d043      	beq.n	8010ee4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010e5c:	69ba      	ldr	r2, [r7, #24]
 8010e5e:	6a3b      	ldr	r3, [r7, #32]
 8010e60:	4413      	add	r3, r2
 8010e62:	693a      	ldr	r2, [r7, #16]
 8010e64:	8952      	ldrh	r2, [r2, #10]
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d905      	bls.n	8010e76 <f_write+0x1c4>
					cc = fs->csize - csect;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	895b      	ldrh	r3, [r3, #10]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	7858      	ldrb	r0, [r3, #1]
 8010e7a:	6a3b      	ldr	r3, [r7, #32]
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	69f9      	ldr	r1, [r7, #28]
 8010e80:	f7fd fd40 	bl	800e904 <disk_write>
 8010e84:	4603      	mov	r3, r0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d004      	beq.n	8010e94 <f_write+0x1e2>
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	755a      	strb	r2, [r3, #21]
 8010e90:	2301      	movs	r3, #1
 8010e92:	e09e      	b.n	8010fd2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6a1a      	ldr	r2, [r3, #32]
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	6a3a      	ldr	r2, [r7, #32]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d918      	bls.n	8010ed4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	6a1a      	ldr	r2, [r3, #32]
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	693a      	ldr	r2, [r7, #16]
 8010eb2:	8992      	ldrh	r2, [r2, #12]
 8010eb4:	fb02 f303 	mul.w	r3, r2, r3
 8010eb8:	69fa      	ldr	r2, [r7, #28]
 8010eba:	18d1      	adds	r1, r2, r3
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	899b      	ldrh	r3, [r3, #12]
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	f7fd fddf 	bl	800ea84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	7d1b      	ldrb	r3, [r3, #20]
 8010eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	899b      	ldrh	r3, [r3, #12]
 8010ed8:	461a      	mov	r2, r3
 8010eda:	6a3b      	ldr	r3, [r7, #32]
 8010edc:	fb02 f303 	mul.w	r3, r2, r3
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010ee2:	e04b      	b.n	8010f7c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6a1b      	ldr	r3, [r3, #32]
 8010ee8:	697a      	ldr	r2, [r7, #20]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d016      	beq.n	8010f1c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	699a      	ldr	r2, [r3, #24]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d210      	bcs.n	8010f1c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	7858      	ldrb	r0, [r3, #1]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f04:	2301      	movs	r3, #1
 8010f06:	697a      	ldr	r2, [r7, #20]
 8010f08:	f7fd fcdc 	bl	800e8c4 <disk_read>
 8010f0c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d004      	beq.n	8010f1c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2201      	movs	r2, #1
 8010f16:	755a      	strb	r2, [r3, #21]
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e05a      	b.n	8010fd2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	899b      	ldrh	r3, [r3, #12]
 8010f26:	4618      	mov	r0, r3
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	699b      	ldr	r3, [r3, #24]
 8010f2c:	693a      	ldr	r2, [r7, #16]
 8010f2e:	8992      	ldrh	r2, [r2, #12]
 8010f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f34:	fb02 f201 	mul.w	r2, r2, r1
 8010f38:	1a9b      	subs	r3, r3, r2
 8010f3a:	1ac3      	subs	r3, r0, r3
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d901      	bls.n	8010f4a <f_write+0x298>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	699b      	ldr	r3, [r3, #24]
 8010f54:	693a      	ldr	r2, [r7, #16]
 8010f56:	8992      	ldrh	r2, [r2, #12]
 8010f58:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f5c:	fb02 f200 	mul.w	r2, r2, r0
 8010f60:	1a9b      	subs	r3, r3, r2
 8010f62:	440b      	add	r3, r1
 8010f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f66:	69f9      	ldr	r1, [r7, #28]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fd fd8b 	bl	800ea84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	7d1b      	ldrb	r3, [r3, #20]
 8010f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010f7c:	69fa      	ldr	r2, [r7, #28]
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f80:	4413      	add	r3, r2
 8010f82:	61fb      	str	r3, [r7, #28]
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	699a      	ldr	r2, [r3, #24]
 8010f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8a:	441a      	add	r2, r3
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	619a      	str	r2, [r3, #24]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	68da      	ldr	r2, [r3, #12]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	699b      	ldr	r3, [r3, #24]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	bf38      	it	cc
 8010f9c:	461a      	movcc	r2, r3
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	60da      	str	r2, [r3, #12]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa8:	441a      	add	r2, r3
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f47f aeb5 	bne.w	8010d28 <f_write+0x76>
 8010fbe:	e000      	b.n	8010fc2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010fc0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	7d1b      	ldrb	r3, [r3, #20]
 8010fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010fd0:	2300      	movs	r3, #0
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3730      	adds	r7, #48	; 0x30
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
	...

08010fdc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b086      	sub	sp, #24
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f107 0208 	add.w	r2, r7, #8
 8010fea:	4611      	mov	r1, r2
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fab7 	bl	8010560 <validate>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ff6:	7dfb      	ldrb	r3, [r7, #23]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d167      	bne.n	80110cc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	7d1b      	ldrb	r3, [r3, #20]
 8011000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011004:	2b00      	cmp	r3, #0
 8011006:	d061      	beq.n	80110cc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	7d1b      	ldrb	r3, [r3, #20]
 801100c:	b25b      	sxtb	r3, r3
 801100e:	2b00      	cmp	r3, #0
 8011010:	da15      	bge.n	801103e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	7858      	ldrb	r0, [r3, #1]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6a1a      	ldr	r2, [r3, #32]
 8011020:	2301      	movs	r3, #1
 8011022:	f7fd fc6f 	bl	800e904 <disk_write>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d001      	beq.n	8011030 <f_sync+0x54>
 801102c:	2301      	movs	r3, #1
 801102e:	e04e      	b.n	80110ce <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	7d1b      	ldrb	r3, [r3, #20]
 8011034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011038:	b2da      	uxtb	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801103e:	4b26      	ldr	r3, [pc, #152]	; (80110d8 <f_sync+0xfc>)
 8011040:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011042:	68ba      	ldr	r2, [r7, #8]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011048:	4619      	mov	r1, r3
 801104a:	4610      	mov	r0, r2
 801104c:	f7fd ff48 	bl	800eee0 <move_window>
 8011050:	4603      	mov	r3, r0
 8011052:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011054:	7dfb      	ldrb	r3, [r7, #23]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d138      	bne.n	80110cc <f_sync+0xf0>
					dir = fp->dir_ptr;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	330b      	adds	r3, #11
 8011064:	781a      	ldrb	r2, [r3, #0]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	330b      	adds	r3, #11
 801106a:	f042 0220 	orr.w	r2, r2, #32
 801106e:	b2d2      	uxtb	r2, r2
 8011070:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6818      	ldr	r0, [r3, #0]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	461a      	mov	r2, r3
 801107c:	68f9      	ldr	r1, [r7, #12]
 801107e:	f7fe fccd 	bl	800fa1c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f103 021c 	add.w	r2, r3, #28
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	4619      	mov	r1, r3
 801108e:	4610      	mov	r0, r2
 8011090:	f7fd fccc 	bl	800ea2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3316      	adds	r3, #22
 8011098:	6939      	ldr	r1, [r7, #16]
 801109a:	4618      	mov	r0, r3
 801109c:	f7fd fcc6 	bl	800ea2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	3312      	adds	r3, #18
 80110a4:	2100      	movs	r1, #0
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fd fca5 	bl	800e9f6 <st_word>
					fs->wflag = 1;
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	2201      	movs	r2, #1
 80110b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fd ff41 	bl	800ef3c <sync_fs>
 80110ba:	4603      	mov	r3, r0
 80110bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	7d1b      	ldrb	r3, [r3, #20]
 80110c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110c6:	b2da      	uxtb	r2, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80110cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	274a0000 	.word	0x274a0000

080110dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff ff79 	bl	8010fdc <f_sync>
 80110ea:	4603      	mov	r3, r0
 80110ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80110ee:	7bfb      	ldrb	r3, [r7, #15]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d118      	bne.n	8011126 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f107 0208 	add.w	r2, r7, #8
 80110fa:	4611      	mov	r1, r2
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7ff fa2f 	bl	8010560 <validate>
 8011102:	4603      	mov	r3, r0
 8011104:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011106:	7bfb      	ldrb	r3, [r7, #15]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10c      	bne.n	8011126 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	4618      	mov	r0, r3
 8011112:	f7fd fe41 	bl	800ed98 <dec_lock>
 8011116:	4603      	mov	r3, r0
 8011118:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801111a:	7bfb      	ldrb	r3, [r7, #15]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d102      	bne.n	8011126 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011126:	7bfb      	ldrb	r3, [r7, #15]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011130:	b590      	push	{r4, r7, lr}
 8011132:	b091      	sub	sp, #68	; 0x44
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011138:	f107 0108 	add.w	r1, r7, #8
 801113c:	1d3b      	adds	r3, r7, #4
 801113e:	2200      	movs	r2, #0
 8011140:	4618      	mov	r0, r3
 8011142:	f7fe ff87 	bl	8010054 <find_volume>
 8011146:	4603      	mov	r3, r0
 8011148:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801114c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011150:	2b00      	cmp	r3, #0
 8011152:	d131      	bne.n	80111b8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	f107 030c 	add.w	r3, r7, #12
 801115e:	4611      	mov	r1, r2
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe fe47 	bl	800fdf4 <follow_path>
 8011166:	4603      	mov	r3, r0
 8011168:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801116c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011170:	2b00      	cmp	r3, #0
 8011172:	d11a      	bne.n	80111aa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011174:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011178:	b25b      	sxtb	r3, r3
 801117a:	2b00      	cmp	r3, #0
 801117c:	da03      	bge.n	8011186 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	697a      	ldr	r2, [r7, #20]
 8011182:	619a      	str	r2, [r3, #24]
 8011184:	e011      	b.n	80111aa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011186:	7cbb      	ldrb	r3, [r7, #18]
 8011188:	f003 0310 	and.w	r3, r3, #16
 801118c:	2b00      	cmp	r3, #0
 801118e:	d009      	beq.n	80111a4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011194:	68bc      	ldr	r4, [r7, #8]
 8011196:	4611      	mov	r1, r2
 8011198:	4618      	mov	r0, r3
 801119a:	f7fe fc20 	bl	800f9de <ld_clust>
 801119e:	4603      	mov	r3, r0
 80111a0:	61a3      	str	r3, [r4, #24]
 80111a2:	e002      	b.n	80111aa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80111a4:	2305      	movs	r3, #5
 80111a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80111aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111ae:	2b04      	cmp	r3, #4
 80111b0:	d102      	bne.n	80111b8 <f_chdir+0x88>
 80111b2:	2305      	movs	r3, #5
 80111b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80111b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3744      	adds	r7, #68	; 0x44
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd90      	pop	{r4, r7, pc}

080111c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b090      	sub	sp, #64	; 0x40
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f107 0208 	add.w	r2, r7, #8
 80111d4:	4611      	mov	r1, r2
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff f9c2 	bl	8010560 <validate>
 80111dc:	4603      	mov	r3, r0
 80111de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80111e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d103      	bne.n	80111f2 <f_lseek+0x2e>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	7d5b      	ldrb	r3, [r3, #21]
 80111ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80111f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d002      	beq.n	8011200 <f_lseek+0x3c>
 80111fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111fe:	e201      	b.n	8011604 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 80d9 	beq.w	80113bc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011210:	d15a      	bne.n	80112c8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011216:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	1d1a      	adds	r2, r3, #4
 801121c:	627a      	str	r2, [r7, #36]	; 0x24
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	617b      	str	r3, [r7, #20]
 8011222:	2302      	movs	r3, #2
 8011224:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122e:	2b00      	cmp	r3, #0
 8011230:	d03a      	beq.n	80112a8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011234:	613b      	str	r3, [r7, #16]
 8011236:	2300      	movs	r3, #0
 8011238:	62fb      	str	r3, [r7, #44]	; 0x2c
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	3302      	adds	r3, #2
 801123e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011242:	60fb      	str	r3, [r7, #12]
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	3301      	adds	r3, #1
 8011248:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801124e:	4618      	mov	r0, r3
 8011250:	f7fd ff03 	bl	800f05a <get_fat>
 8011254:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011258:	2b01      	cmp	r3, #1
 801125a:	d804      	bhi.n	8011266 <f_lseek+0xa2>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2202      	movs	r2, #2
 8011260:	755a      	strb	r2, [r3, #21]
 8011262:	2302      	movs	r3, #2
 8011264:	e1ce      	b.n	8011604 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126c:	d104      	bne.n	8011278 <f_lseek+0xb4>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2201      	movs	r2, #1
 8011272:	755a      	strb	r2, [r3, #21]
 8011274:	2301      	movs	r3, #1
 8011276:	e1c5      	b.n	8011604 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	3301      	adds	r3, #1
 801127c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801127e:	429a      	cmp	r2, r3
 8011280:	d0de      	beq.n	8011240 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	429a      	cmp	r2, r3
 8011288:	d809      	bhi.n	801129e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	1d1a      	adds	r2, r3, #4
 801128e:	627a      	str	r2, [r7, #36]	; 0x24
 8011290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011296:	1d1a      	adds	r2, r3, #4
 8011298:	627a      	str	r2, [r7, #36]	; 0x24
 801129a:	693a      	ldr	r2, [r7, #16]
 801129c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	69db      	ldr	r3, [r3, #28]
 80112a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d3c4      	bcc.n	8011232 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112ae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80112b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d803      	bhi.n	80112c0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	e19f      	b.n	8011600 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80112c0:	2311      	movs	r3, #17
 80112c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80112c6:	e19b      	b.n	8011600 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d902      	bls.n	80112d8 <f_lseek+0x114>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	f000 818d 	beq.w	8011600 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	3b01      	subs	r3, #1
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7fe f998 	bl	800f622 <clmt_clust>
 80112f2:	4602      	mov	r2, r0
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	69db      	ldr	r3, [r3, #28]
 80112fe:	4619      	mov	r1, r3
 8011300:	4610      	mov	r0, r2
 8011302:	f7fd fe8b 	bl	800f01c <clust2sect>
 8011306:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d104      	bne.n	8011318 <f_lseek+0x154>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2202      	movs	r2, #2
 8011312:	755a      	strb	r2, [r3, #21]
 8011314:	2302      	movs	r3, #2
 8011316:	e175      	b.n	8011604 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	3b01      	subs	r3, #1
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	8992      	ldrh	r2, [r2, #12]
 8011320:	fbb3 f3f2 	udiv	r3, r3, r2
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	8952      	ldrh	r2, [r2, #10]
 8011328:	3a01      	subs	r2, #1
 801132a:	4013      	ands	r3, r2
 801132c:	69ba      	ldr	r2, [r7, #24]
 801132e:	4413      	add	r3, r2
 8011330:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	699b      	ldr	r3, [r3, #24]
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	8992      	ldrh	r2, [r2, #12]
 801133a:	fbb3 f1f2 	udiv	r1, r3, r2
 801133e:	fb02 f201 	mul.w	r2, r2, r1
 8011342:	1a9b      	subs	r3, r3, r2
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 815b 	beq.w	8011600 <f_lseek+0x43c>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a1b      	ldr	r3, [r3, #32]
 801134e:	69ba      	ldr	r2, [r7, #24]
 8011350:	429a      	cmp	r2, r3
 8011352:	f000 8155 	beq.w	8011600 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	7d1b      	ldrb	r3, [r3, #20]
 801135a:	b25b      	sxtb	r3, r3
 801135c:	2b00      	cmp	r3, #0
 801135e:	da18      	bge.n	8011392 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	7858      	ldrb	r0, [r3, #1]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6a1a      	ldr	r2, [r3, #32]
 801136e:	2301      	movs	r3, #1
 8011370:	f7fd fac8 	bl	800e904 <disk_write>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d004      	beq.n	8011384 <f_lseek+0x1c0>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2201      	movs	r2, #1
 801137e:	755a      	strb	r2, [r3, #21]
 8011380:	2301      	movs	r3, #1
 8011382:	e13f      	b.n	8011604 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	7d1b      	ldrb	r3, [r3, #20]
 8011388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801138c:	b2da      	uxtb	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	7858      	ldrb	r0, [r3, #1]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801139c:	2301      	movs	r3, #1
 801139e:	69ba      	ldr	r2, [r7, #24]
 80113a0:	f7fd fa90 	bl	800e8c4 <disk_read>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d004      	beq.n	80113b4 <f_lseek+0x1f0>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2201      	movs	r2, #1
 80113ae:	755a      	strb	r2, [r3, #21]
 80113b0:	2301      	movs	r3, #1
 80113b2:	e127      	b.n	8011604 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	621a      	str	r2, [r3, #32]
 80113ba:	e121      	b.n	8011600 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d908      	bls.n	80113d8 <f_lseek+0x214>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7d1b      	ldrb	r3, [r3, #20]
 80113ca:	f003 0302 	and.w	r3, r3, #2
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d102      	bne.n	80113d8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	699b      	ldr	r3, [r3, #24]
 80113dc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80113de:	2300      	movs	r3, #0
 80113e0:	637b      	str	r3, [r7, #52]	; 0x34
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113e6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	f000 80b5 	beq.w	801155a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	895b      	ldrh	r3, [r3, #10]
 80113f4:	461a      	mov	r2, r3
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	899b      	ldrh	r3, [r3, #12]
 80113fa:	fb03 f302 	mul.w	r3, r3, r2
 80113fe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011400:	6a3b      	ldr	r3, [r7, #32]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d01b      	beq.n	801143e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	1e5a      	subs	r2, r3, #1
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011410:	6a3b      	ldr	r3, [r7, #32]
 8011412:	1e59      	subs	r1, r3, #1
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801141a:	429a      	cmp	r2, r3
 801141c:	d30f      	bcc.n	801143e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801141e:	6a3b      	ldr	r3, [r7, #32]
 8011420:	1e5a      	subs	r2, r3, #1
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	425b      	negs	r3, r3
 8011426:	401a      	ands	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	699b      	ldr	r3, [r3, #24]
 8011430:	683a      	ldr	r2, [r7, #0]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	69db      	ldr	r3, [r3, #28]
 801143a:	63bb      	str	r3, [r7, #56]	; 0x38
 801143c:	e022      	b.n	8011484 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	2b00      	cmp	r3, #0
 8011448:	d119      	bne.n	801147e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2100      	movs	r1, #0
 801144e:	4618      	mov	r0, r3
 8011450:	f7fe f84f 	bl	800f4f2 <create_chain>
 8011454:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011458:	2b01      	cmp	r3, #1
 801145a:	d104      	bne.n	8011466 <f_lseek+0x2a2>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2202      	movs	r2, #2
 8011460:	755a      	strb	r2, [r3, #21]
 8011462:	2302      	movs	r3, #2
 8011464:	e0ce      	b.n	8011604 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801146c:	d104      	bne.n	8011478 <f_lseek+0x2b4>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2201      	movs	r2, #1
 8011472:	755a      	strb	r2, [r3, #21]
 8011474:	2301      	movs	r3, #1
 8011476:	e0c5      	b.n	8011604 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801147c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011482:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011486:	2b00      	cmp	r3, #0
 8011488:	d067      	beq.n	801155a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801148a:	e03a      	b.n	8011502 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801148c:	683a      	ldr	r2, [r7, #0]
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	1ad3      	subs	r3, r2, r3
 8011492:	603b      	str	r3, [r7, #0]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	699a      	ldr	r2, [r3, #24]
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	441a      	add	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7d1b      	ldrb	r3, [r3, #20]
 80114a4:	f003 0302 	and.w	r3, r3, #2
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00b      	beq.n	80114c4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fe f81e 	bl	800f4f2 <create_chain>
 80114b6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80114b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d108      	bne.n	80114d0 <f_lseek+0x30c>
							ofs = 0; break;
 80114be:	2300      	movs	r3, #0
 80114c0:	603b      	str	r3, [r7, #0]
 80114c2:	e022      	b.n	801150a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fd fdc6 	bl	800f05a <get_fat>
 80114ce:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114d6:	d104      	bne.n	80114e2 <f_lseek+0x31e>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2201      	movs	r2, #1
 80114dc:	755a      	strb	r2, [r3, #21]
 80114de:	2301      	movs	r3, #1
 80114e0:	e090      	b.n	8011604 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80114e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d904      	bls.n	80114f2 <f_lseek+0x32e>
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	69db      	ldr	r3, [r3, #28]
 80114ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d304      	bcc.n	80114fc <f_lseek+0x338>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2202      	movs	r2, #2
 80114f6:	755a      	strb	r2, [r3, #21]
 80114f8:	2302      	movs	r3, #2
 80114fa:	e083      	b.n	8011604 <f_lseek+0x440>
					fp->clust = clst;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011500:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011502:	683a      	ldr	r2, [r7, #0]
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	429a      	cmp	r2, r3
 8011508:	d8c0      	bhi.n	801148c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	699a      	ldr	r2, [r3, #24]
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	441a      	add	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	899b      	ldrh	r3, [r3, #12]
 801151a:	461a      	mov	r2, r3
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011522:	fb02 f201 	mul.w	r2, r2, r1
 8011526:	1a9b      	subs	r3, r3, r2
 8011528:	2b00      	cmp	r3, #0
 801152a:	d016      	beq.n	801155a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011530:	4618      	mov	r0, r3
 8011532:	f7fd fd73 	bl	800f01c <clust2sect>
 8011536:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153a:	2b00      	cmp	r3, #0
 801153c:	d104      	bne.n	8011548 <f_lseek+0x384>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2202      	movs	r2, #2
 8011542:	755a      	strb	r2, [r3, #21]
 8011544:	2302      	movs	r3, #2
 8011546:	e05d      	b.n	8011604 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	899b      	ldrh	r3, [r3, #12]
 801154c:	461a      	mov	r2, r3
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	fbb3 f3f2 	udiv	r3, r3, r2
 8011554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011556:	4413      	add	r3, r2
 8011558:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	699a      	ldr	r2, [r3, #24]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	429a      	cmp	r2, r3
 8011564:	d90a      	bls.n	801157c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	699a      	ldr	r2, [r3, #24]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	7d1b      	ldrb	r3, [r3, #20]
 8011572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011576:	b2da      	uxtb	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	68ba      	ldr	r2, [r7, #8]
 8011582:	8992      	ldrh	r2, [r2, #12]
 8011584:	fbb3 f1f2 	udiv	r1, r3, r2
 8011588:	fb02 f201 	mul.w	r2, r2, r1
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	2b00      	cmp	r3, #0
 8011590:	d036      	beq.n	8011600 <f_lseek+0x43c>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011598:	429a      	cmp	r2, r3
 801159a:	d031      	beq.n	8011600 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	7d1b      	ldrb	r3, [r3, #20]
 80115a0:	b25b      	sxtb	r3, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	da18      	bge.n	80115d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	7858      	ldrb	r0, [r3, #1]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a1a      	ldr	r2, [r3, #32]
 80115b4:	2301      	movs	r3, #1
 80115b6:	f7fd f9a5 	bl	800e904 <disk_write>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d004      	beq.n	80115ca <f_lseek+0x406>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2201      	movs	r2, #1
 80115c4:	755a      	strb	r2, [r3, #21]
 80115c6:	2301      	movs	r3, #1
 80115c8:	e01c      	b.n	8011604 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	7d1b      	ldrb	r3, [r3, #20]
 80115ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	7858      	ldrb	r0, [r3, #1]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115e2:	2301      	movs	r3, #1
 80115e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115e6:	f7fd f96d 	bl	800e8c4 <disk_read>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d004      	beq.n	80115fa <f_lseek+0x436>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2201      	movs	r2, #1
 80115f4:	755a      	strb	r2, [r3, #21]
 80115f6:	2301      	movs	r3, #1
 80115f8:	e004      	b.n	8011604 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011604:	4618      	mov	r0, r3
 8011606:	3740      	adds	r7, #64	; 0x40
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b09e      	sub	sp, #120	; 0x78
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011614:	2300      	movs	r3, #0
 8011616:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011618:	f107 010c 	add.w	r1, r7, #12
 801161c:	1d3b      	adds	r3, r7, #4
 801161e:	2202      	movs	r2, #2
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe fd17 	bl	8010054 <find_volume>
 8011626:	4603      	mov	r3, r0
 8011628:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011630:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011634:	2b00      	cmp	r3, #0
 8011636:	f040 80a4 	bne.w	8011782 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011640:	4611      	mov	r1, r2
 8011642:	4618      	mov	r0, r3
 8011644:	f7fe fbd6 	bl	800fdf4 <follow_path>
 8011648:	4603      	mov	r3, r0
 801164a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801164e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011652:	2b00      	cmp	r3, #0
 8011654:	d108      	bne.n	8011668 <f_unlink+0x5c>
 8011656:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801165a:	f003 0320 	and.w	r3, r3, #32
 801165e:	2b00      	cmp	r3, #0
 8011660:	d002      	beq.n	8011668 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011662:	2306      	movs	r3, #6
 8011664:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011668:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801166c:	2b00      	cmp	r3, #0
 801166e:	d108      	bne.n	8011682 <f_unlink+0x76>
 8011670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011674:	2102      	movs	r1, #2
 8011676:	4618      	mov	r0, r3
 8011678:	f7fd fa82 	bl	800eb80 <chk_lock>
 801167c:	4603      	mov	r3, r0
 801167e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011682:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011686:	2b00      	cmp	r3, #0
 8011688:	d17b      	bne.n	8011782 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801168a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801168e:	b25b      	sxtb	r3, r3
 8011690:	2b00      	cmp	r3, #0
 8011692:	da03      	bge.n	801169c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011694:	2306      	movs	r3, #6
 8011696:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801169a:	e008      	b.n	80116ae <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801169c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80116a0:	f003 0301 	and.w	r3, r3, #1
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80116a8:	2307      	movs	r3, #7
 80116aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80116ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d13d      	bne.n	8011732 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe f98e 	bl	800f9de <ld_clust>
 80116c2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80116c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80116c8:	f003 0310 	and.w	r3, r3, #16
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d030      	beq.n	8011732 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	699b      	ldr	r3, [r3, #24]
 80116d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d103      	bne.n	80116e2 <f_unlink+0xd6>
						res = FR_DENIED;
 80116da:	2307      	movs	r3, #7
 80116dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80116e0:	e027      	b.n	8011732 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80116e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116e8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80116ea:	f107 0310 	add.w	r3, r7, #16
 80116ee:	2100      	movs	r1, #0
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fd ffce 	bl	800f692 <dir_sdi>
 80116f6:	4603      	mov	r3, r0
 80116f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80116fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011700:	2b00      	cmp	r3, #0
 8011702:	d116      	bne.n	8011732 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011704:	f107 0310 	add.w	r3, r7, #16
 8011708:	2100      	movs	r1, #0
 801170a:	4618      	mov	r0, r3
 801170c:	f7fe f9a6 	bl	800fa5c <dir_read>
 8011710:	4603      	mov	r3, r0
 8011712:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011716:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801171a:	2b00      	cmp	r3, #0
 801171c:	d102      	bne.n	8011724 <f_unlink+0x118>
 801171e:	2307      	movs	r3, #7
 8011720:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011724:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011728:	2b04      	cmp	r3, #4
 801172a:	d102      	bne.n	8011732 <f_unlink+0x126>
 801172c:	2300      	movs	r3, #0
 801172e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011732:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011736:	2b00      	cmp	r3, #0
 8011738:	d123      	bne.n	8011782 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801173a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fa70 	bl	800fc24 <dir_remove>
 8011744:	4603      	mov	r3, r0
 8011746:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801174a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10c      	bne.n	801176c <f_unlink+0x160>
 8011752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011754:	2b00      	cmp	r3, #0
 8011756:	d009      	beq.n	801176c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801175c:	2200      	movs	r2, #0
 801175e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011760:	4618      	mov	r0, r3
 8011762:	f7fd fe61 	bl	800f428 <remove_chain>
 8011766:	4603      	mov	r3, r0
 8011768:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801176c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011770:	2b00      	cmp	r3, #0
 8011772:	d106      	bne.n	8011782 <f_unlink+0x176>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	4618      	mov	r0, r3
 8011778:	f7fd fbe0 	bl	800ef3c <sync_fs>
 801177c:	4603      	mov	r3, r0
 801177e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011782:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011786:	4618      	mov	r0, r3
 8011788:	3778      	adds	r7, #120	; 0x78
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
	...

08011790 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b096      	sub	sp, #88	; 0x58
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011798:	f107 0108 	add.w	r1, r7, #8
 801179c:	1d3b      	adds	r3, r7, #4
 801179e:	2202      	movs	r2, #2
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fe fc57 	bl	8010054 <find_volume>
 80117a6:	4603      	mov	r3, r0
 80117a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80117b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f040 80fe 	bne.w	80119b6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	f107 030c 	add.w	r3, r7, #12
 80117c0:	4611      	mov	r1, r2
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe fb16 	bl	800fdf4 <follow_path>
 80117c8:	4603      	mov	r3, r0
 80117ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80117ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d102      	bne.n	80117dc <f_mkdir+0x4c>
 80117d6:	2308      	movs	r3, #8
 80117d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80117dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117e0:	2b04      	cmp	r3, #4
 80117e2:	d108      	bne.n	80117f6 <f_mkdir+0x66>
 80117e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80117e8:	f003 0320 	and.w	r3, r3, #32
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80117f0:	2306      	movs	r3, #6
 80117f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80117f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117fa:	2b04      	cmp	r3, #4
 80117fc:	f040 80db 	bne.w	80119b6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011800:	f107 030c 	add.w	r3, r7, #12
 8011804:	2100      	movs	r1, #0
 8011806:	4618      	mov	r0, r3
 8011808:	f7fd fe73 	bl	800f4f2 <create_chain>
 801180c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	895b      	ldrh	r3, [r3, #10]
 8011812:	461a      	mov	r2, r3
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	899b      	ldrh	r3, [r3, #12]
 8011818:	fb03 f302 	mul.w	r3, r3, r2
 801181c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801181e:	2300      	movs	r3, #0
 8011820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011826:	2b00      	cmp	r3, #0
 8011828:	d102      	bne.n	8011830 <f_mkdir+0xa0>
 801182a:	2307      	movs	r3, #7
 801182c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011832:	2b01      	cmp	r3, #1
 8011834:	d102      	bne.n	801183c <f_mkdir+0xac>
 8011836:	2302      	movs	r3, #2
 8011838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801183c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011842:	d102      	bne.n	801184a <f_mkdir+0xba>
 8011844:	2301      	movs	r3, #1
 8011846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801184a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801184e:	2b00      	cmp	r3, #0
 8011850:	d106      	bne.n	8011860 <f_mkdir+0xd0>
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	4618      	mov	r0, r3
 8011856:	f7fd faff 	bl	800ee58 <sync_window>
 801185a:	4603      	mov	r3, r0
 801185c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011860:	4b58      	ldr	r3, [pc, #352]	; (80119c4 <f_mkdir+0x234>)
 8011862:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011868:	2b00      	cmp	r3, #0
 801186a:	d16c      	bne.n	8011946 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011870:	4618      	mov	r0, r3
 8011872:	f7fd fbd3 	bl	800f01c <clust2sect>
 8011876:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	3338      	adds	r3, #56	; 0x38
 801187c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	899b      	ldrh	r3, [r3, #12]
 8011882:	461a      	mov	r2, r3
 8011884:	2100      	movs	r1, #0
 8011886:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011888:	f7fd f91d 	bl	800eac6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801188c:	220b      	movs	r2, #11
 801188e:	2120      	movs	r1, #32
 8011890:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011892:	f7fd f918 	bl	800eac6 <mem_set>
					dir[DIR_Name] = '.';
 8011896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011898:	222e      	movs	r2, #46	; 0x2e
 801189a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801189c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801189e:	330b      	adds	r3, #11
 80118a0:	2210      	movs	r2, #16
 80118a2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80118a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a6:	3316      	adds	r3, #22
 80118a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fd f8be 	bl	800ea2c <st_dword>
					st_clust(fs, dir, dcl);
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe f8b0 	bl	800fa1c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80118bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118be:	3320      	adds	r3, #32
 80118c0:	2220      	movs	r2, #32
 80118c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fd f8dd 	bl	800ea84 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80118ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118cc:	3321      	adds	r3, #33	; 0x21
 80118ce:	222e      	movs	r2, #46	; 0x2e
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d106      	bne.n	80118ec <f_mkdir+0x15c>
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d101      	bne.n	80118ec <f_mkdir+0x15c>
 80118e8:	2300      	movs	r3, #0
 80118ea:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80118ec:	68b8      	ldr	r0, [r7, #8]
 80118ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f0:	3320      	adds	r3, #32
 80118f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118f4:	4619      	mov	r1, r3
 80118f6:	f7fe f891 	bl	800fa1c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	895b      	ldrh	r3, [r3, #10]
 80118fe:	653b      	str	r3, [r7, #80]	; 0x50
 8011900:	e01c      	b.n	801193c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011904:	1c5a      	adds	r2, r3, #1
 8011906:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	2201      	movs	r2, #1
 8011910:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	4618      	mov	r0, r3
 8011916:	f7fd fa9f 	bl	800ee58 <sync_window>
 801191a:	4603      	mov	r3, r0
 801191c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011924:	2b00      	cmp	r3, #0
 8011926:	d10d      	bne.n	8011944 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	899b      	ldrh	r3, [r3, #12]
 801192c:	461a      	mov	r2, r3
 801192e:	2100      	movs	r1, #0
 8011930:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011932:	f7fd f8c8 	bl	800eac6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011938:	3b01      	subs	r3, #1
 801193a:	653b      	str	r3, [r7, #80]	; 0x50
 801193c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1df      	bne.n	8011902 <f_mkdir+0x172>
 8011942:	e000      	b.n	8011946 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011944:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801194e:	f107 030c 	add.w	r3, r7, #12
 8011952:	4618      	mov	r0, r3
 8011954:	f7fe f934 	bl	800fbc0 <dir_register>
 8011958:	4603      	mov	r3, r0
 801195a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801195e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011962:	2b00      	cmp	r3, #0
 8011964:	d120      	bne.n	80119a8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011968:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801196c:	3316      	adds	r3, #22
 801196e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011970:	4618      	mov	r0, r3
 8011972:	f7fd f85b 	bl	800ea2c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801197a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801197c:	4618      	mov	r0, r3
 801197e:	f7fe f84d 	bl	800fa1c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011984:	330b      	adds	r3, #11
 8011986:	2210      	movs	r2, #16
 8011988:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	2201      	movs	r2, #1
 801198e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011994:	2b00      	cmp	r3, #0
 8011996:	d10e      	bne.n	80119b6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	4618      	mov	r0, r3
 801199c:	f7fd face 	bl	800ef3c <sync_fs>
 80119a0:	4603      	mov	r3, r0
 80119a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80119a6:	e006      	b.n	80119b6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80119a8:	f107 030c 	add.w	r3, r7, #12
 80119ac:	2200      	movs	r2, #0
 80119ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fd fd39 	bl	800f428 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80119b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3758      	adds	r7, #88	; 0x58
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	274a0000 	.word	0x274a0000

080119c8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b088      	sub	sp, #32
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80119dc:	e017      	b.n	8011a0e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80119de:	f107 0310 	add.w	r3, r7, #16
 80119e2:	f107 0114 	add.w	r1, r7, #20
 80119e6:	2201      	movs	r2, #1
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff f803 	bl	80109f4 <f_read>
		if (rc != 1) break;
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d112      	bne.n	8011a1a <f_gets+0x52>
		c = s[0];
 80119f4:	7d3b      	ldrb	r3, [r7, #20]
 80119f6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	61ba      	str	r2, [r7, #24]
 80119fe:	7dfa      	ldrb	r2, [r7, #23]
 8011a00:	701a      	strb	r2, [r3, #0]
		n++;
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	3301      	adds	r3, #1
 8011a06:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011a08:	7dfb      	ldrb	r3, [r7, #23]
 8011a0a:	2b0a      	cmp	r3, #10
 8011a0c:	d007      	beq.n	8011a1e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	3b01      	subs	r3, #1
 8011a12:	69fa      	ldr	r2, [r7, #28]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	dbe2      	blt.n	80119de <f_gets+0x16>
 8011a18:	e002      	b.n	8011a20 <f_gets+0x58>
		if (rc != 1) break;
 8011a1a:	bf00      	nop
 8011a1c:	e000      	b.n	8011a20 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011a1e:	bf00      	nop
	}
	*p = 0;
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	2200      	movs	r2, #0
 8011a24:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011a26:	69fb      	ldr	r3, [r7, #28]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <f_gets+0x68>
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	e000      	b.n	8011a32 <f_gets+0x6a>
 8011a30:	2300      	movs	r3, #0
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3720      	adds	r7, #32
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
	...

08011a3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b087      	sub	sp, #28
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	4613      	mov	r3, r2
 8011a48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a52:	4b1f      	ldr	r3, [pc, #124]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a54:	7a5b      	ldrb	r3, [r3, #9]
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d131      	bne.n	8011ac0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a5c:	4b1c      	ldr	r3, [pc, #112]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a5e:	7a5b      	ldrb	r3, [r3, #9]
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	461a      	mov	r2, r3
 8011a64:	4b1a      	ldr	r3, [pc, #104]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a66:	2100      	movs	r1, #0
 8011a68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a6a:	4b19      	ldr	r3, [pc, #100]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a6c:	7a5b      	ldrb	r3, [r3, #9]
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	4a17      	ldr	r2, [pc, #92]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	4413      	add	r3, r2
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a7a:	4b15      	ldr	r3, [pc, #84]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a7c:	7a5b      	ldrb	r3, [r3, #9]
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	461a      	mov	r2, r3
 8011a82:	4b13      	ldr	r3, [pc, #76]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a84:	4413      	add	r3, r2
 8011a86:	79fa      	ldrb	r2, [r7, #7]
 8011a88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a8a:	4b11      	ldr	r3, [pc, #68]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a8c:	7a5b      	ldrb	r3, [r3, #9]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	1c5a      	adds	r2, r3, #1
 8011a92:	b2d1      	uxtb	r1, r2
 8011a94:	4a0e      	ldr	r2, [pc, #56]	; (8011ad0 <FATFS_LinkDriverEx+0x94>)
 8011a96:	7251      	strb	r1, [r2, #9]
 8011a98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a9a:	7dbb      	ldrb	r3, [r7, #22]
 8011a9c:	3330      	adds	r3, #48	; 0x30
 8011a9e:	b2da      	uxtb	r2, r3
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	223a      	movs	r2, #58	; 0x3a
 8011aaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	3302      	adds	r3, #2
 8011ab0:	222f      	movs	r2, #47	; 0x2f
 8011ab2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	3303      	adds	r3, #3
 8011ab8:	2200      	movs	r2, #0
 8011aba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011abc:	2300      	movs	r3, #0
 8011abe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	371c      	adds	r7, #28
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop
 8011ad0:	20037460 	.word	0x20037460

08011ad4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011ade:	2200      	movs	r2, #0
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ff ffaa 	bl	8011a3c <FATFS_LinkDriverEx>
 8011ae8:	4603      	mov	r3, r0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <__cxa_guard_acquire>:
 8011af2:	6803      	ldr	r3, [r0, #0]
 8011af4:	07db      	lsls	r3, r3, #31
 8011af6:	d406      	bmi.n	8011b06 <__cxa_guard_acquire+0x14>
 8011af8:	7843      	ldrb	r3, [r0, #1]
 8011afa:	b103      	cbz	r3, 8011afe <__cxa_guard_acquire+0xc>
 8011afc:	deff      	udf	#255	; 0xff
 8011afe:	2301      	movs	r3, #1
 8011b00:	7043      	strb	r3, [r0, #1]
 8011b02:	4618      	mov	r0, r3
 8011b04:	4770      	bx	lr
 8011b06:	2000      	movs	r0, #0
 8011b08:	4770      	bx	lr

08011b0a <__cxa_guard_release>:
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	6003      	str	r3, [r0, #0]
 8011b0e:	4770      	bx	lr

08011b10 <cos>:
 8011b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b12:	ec51 0b10 	vmov	r0, r1, d0
 8011b16:	4a1e      	ldr	r2, [pc, #120]	; (8011b90 <cos+0x80>)
 8011b18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	dc06      	bgt.n	8011b2e <cos+0x1e>
 8011b20:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011b88 <cos+0x78>
 8011b24:	f000 fa74 	bl	8012010 <__kernel_cos>
 8011b28:	ec51 0b10 	vmov	r0, r1, d0
 8011b2c:	e007      	b.n	8011b3e <cos+0x2e>
 8011b2e:	4a19      	ldr	r2, [pc, #100]	; (8011b94 <cos+0x84>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	dd09      	ble.n	8011b48 <cos+0x38>
 8011b34:	ee10 2a10 	vmov	r2, s0
 8011b38:	460b      	mov	r3, r1
 8011b3a:	f7ee fbbd 	bl	80002b8 <__aeabi_dsub>
 8011b3e:	ec41 0b10 	vmov	d0, r0, r1
 8011b42:	b005      	add	sp, #20
 8011b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b48:	4668      	mov	r0, sp
 8011b4a:	f000 f86d 	bl	8011c28 <__ieee754_rem_pio2>
 8011b4e:	f000 0003 	and.w	r0, r0, #3
 8011b52:	2801      	cmp	r0, #1
 8011b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b58:	ed9d 0b00 	vldr	d0, [sp]
 8011b5c:	d007      	beq.n	8011b6e <cos+0x5e>
 8011b5e:	2802      	cmp	r0, #2
 8011b60:	d00e      	beq.n	8011b80 <cos+0x70>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d0de      	beq.n	8011b24 <cos+0x14>
 8011b66:	2001      	movs	r0, #1
 8011b68:	f000 fe5a 	bl	8012820 <__kernel_sin>
 8011b6c:	e7dc      	b.n	8011b28 <cos+0x18>
 8011b6e:	f000 fe57 	bl	8012820 <__kernel_sin>
 8011b72:	ec53 2b10 	vmov	r2, r3, d0
 8011b76:	ee10 0a10 	vmov	r0, s0
 8011b7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b7e:	e7de      	b.n	8011b3e <cos+0x2e>
 8011b80:	f000 fa46 	bl	8012010 <__kernel_cos>
 8011b84:	e7f5      	b.n	8011b72 <cos+0x62>
 8011b86:	bf00      	nop
	...
 8011b90:	3fe921fb 	.word	0x3fe921fb
 8011b94:	7fefffff 	.word	0x7fefffff

08011b98 <sin>:
 8011b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b9a:	ec51 0b10 	vmov	r0, r1, d0
 8011b9e:	4a20      	ldr	r2, [pc, #128]	; (8011c20 <sin+0x88>)
 8011ba0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	dc07      	bgt.n	8011bb8 <sin+0x20>
 8011ba8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011c18 <sin+0x80>
 8011bac:	2000      	movs	r0, #0
 8011bae:	f000 fe37 	bl	8012820 <__kernel_sin>
 8011bb2:	ec51 0b10 	vmov	r0, r1, d0
 8011bb6:	e007      	b.n	8011bc8 <sin+0x30>
 8011bb8:	4a1a      	ldr	r2, [pc, #104]	; (8011c24 <sin+0x8c>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	dd09      	ble.n	8011bd2 <sin+0x3a>
 8011bbe:	ee10 2a10 	vmov	r2, s0
 8011bc2:	460b      	mov	r3, r1
 8011bc4:	f7ee fb78 	bl	80002b8 <__aeabi_dsub>
 8011bc8:	ec41 0b10 	vmov	d0, r0, r1
 8011bcc:	b005      	add	sp, #20
 8011bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bd2:	4668      	mov	r0, sp
 8011bd4:	f000 f828 	bl	8011c28 <__ieee754_rem_pio2>
 8011bd8:	f000 0003 	and.w	r0, r0, #3
 8011bdc:	2801      	cmp	r0, #1
 8011bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011be2:	ed9d 0b00 	vldr	d0, [sp]
 8011be6:	d004      	beq.n	8011bf2 <sin+0x5a>
 8011be8:	2802      	cmp	r0, #2
 8011bea:	d005      	beq.n	8011bf8 <sin+0x60>
 8011bec:	b970      	cbnz	r0, 8011c0c <sin+0x74>
 8011bee:	2001      	movs	r0, #1
 8011bf0:	e7dd      	b.n	8011bae <sin+0x16>
 8011bf2:	f000 fa0d 	bl	8012010 <__kernel_cos>
 8011bf6:	e7dc      	b.n	8011bb2 <sin+0x1a>
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	f000 fe11 	bl	8012820 <__kernel_sin>
 8011bfe:	ec53 2b10 	vmov	r2, r3, d0
 8011c02:	ee10 0a10 	vmov	r0, s0
 8011c06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c0a:	e7dd      	b.n	8011bc8 <sin+0x30>
 8011c0c:	f000 fa00 	bl	8012010 <__kernel_cos>
 8011c10:	e7f5      	b.n	8011bfe <sin+0x66>
 8011c12:	bf00      	nop
 8011c14:	f3af 8000 	nop.w
	...
 8011c20:	3fe921fb 	.word	0x3fe921fb
 8011c24:	7fefffff 	.word	0x7fefffff

08011c28 <__ieee754_rem_pio2>:
 8011c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2c:	ec57 6b10 	vmov	r6, r7, d0
 8011c30:	4bc3      	ldr	r3, [pc, #780]	; (8011f40 <__ieee754_rem_pio2+0x318>)
 8011c32:	b08d      	sub	sp, #52	; 0x34
 8011c34:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011c38:	4598      	cmp	r8, r3
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	9704      	str	r7, [sp, #16]
 8011c3e:	dc07      	bgt.n	8011c50 <__ieee754_rem_pio2+0x28>
 8011c40:	2200      	movs	r2, #0
 8011c42:	2300      	movs	r3, #0
 8011c44:	ed84 0b00 	vstr	d0, [r4]
 8011c48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011c4c:	2500      	movs	r5, #0
 8011c4e:	e027      	b.n	8011ca0 <__ieee754_rem_pio2+0x78>
 8011c50:	4bbc      	ldr	r3, [pc, #752]	; (8011f44 <__ieee754_rem_pio2+0x31c>)
 8011c52:	4598      	cmp	r8, r3
 8011c54:	dc75      	bgt.n	8011d42 <__ieee754_rem_pio2+0x11a>
 8011c56:	9b04      	ldr	r3, [sp, #16]
 8011c58:	4dbb      	ldr	r5, [pc, #748]	; (8011f48 <__ieee754_rem_pio2+0x320>)
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	ee10 0a10 	vmov	r0, s0
 8011c60:	a3a9      	add	r3, pc, #676	; (adr r3, 8011f08 <__ieee754_rem_pio2+0x2e0>)
 8011c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c66:	4639      	mov	r1, r7
 8011c68:	dd36      	ble.n	8011cd8 <__ieee754_rem_pio2+0xb0>
 8011c6a:	f7ee fb25 	bl	80002b8 <__aeabi_dsub>
 8011c6e:	45a8      	cmp	r8, r5
 8011c70:	4606      	mov	r6, r0
 8011c72:	460f      	mov	r7, r1
 8011c74:	d018      	beq.n	8011ca8 <__ieee754_rem_pio2+0x80>
 8011c76:	a3a6      	add	r3, pc, #664	; (adr r3, 8011f10 <__ieee754_rem_pio2+0x2e8>)
 8011c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7c:	f7ee fb1c 	bl	80002b8 <__aeabi_dsub>
 8011c80:	4602      	mov	r2, r0
 8011c82:	460b      	mov	r3, r1
 8011c84:	e9c4 2300 	strd	r2, r3, [r4]
 8011c88:	4630      	mov	r0, r6
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	f7ee fb14 	bl	80002b8 <__aeabi_dsub>
 8011c90:	a39f      	add	r3, pc, #636	; (adr r3, 8011f10 <__ieee754_rem_pio2+0x2e8>)
 8011c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c96:	f7ee fb0f 	bl	80002b8 <__aeabi_dsub>
 8011c9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c9e:	2501      	movs	r5, #1
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	b00d      	add	sp, #52	; 0x34
 8011ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca8:	a39b      	add	r3, pc, #620	; (adr r3, 8011f18 <__ieee754_rem_pio2+0x2f0>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	f7ee fb03 	bl	80002b8 <__aeabi_dsub>
 8011cb2:	a39b      	add	r3, pc, #620	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2f8>)
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	4606      	mov	r6, r0
 8011cba:	460f      	mov	r7, r1
 8011cbc:	f7ee fafc 	bl	80002b8 <__aeabi_dsub>
 8011cc0:	4602      	mov	r2, r0
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	e9c4 2300 	strd	r2, r3, [r4]
 8011cc8:	4630      	mov	r0, r6
 8011cca:	4639      	mov	r1, r7
 8011ccc:	f7ee faf4 	bl	80002b8 <__aeabi_dsub>
 8011cd0:	a393      	add	r3, pc, #588	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2f8>)
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	e7de      	b.n	8011c96 <__ieee754_rem_pio2+0x6e>
 8011cd8:	f7ee faf0 	bl	80002bc <__adddf3>
 8011cdc:	45a8      	cmp	r8, r5
 8011cde:	4606      	mov	r6, r0
 8011ce0:	460f      	mov	r7, r1
 8011ce2:	d016      	beq.n	8011d12 <__ieee754_rem_pio2+0xea>
 8011ce4:	a38a      	add	r3, pc, #552	; (adr r3, 8011f10 <__ieee754_rem_pio2+0x2e8>)
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	f7ee fae7 	bl	80002bc <__adddf3>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	e9c4 2300 	strd	r2, r3, [r4]
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	4639      	mov	r1, r7
 8011cfa:	f7ee fadd 	bl	80002b8 <__aeabi_dsub>
 8011cfe:	a384      	add	r3, pc, #528	; (adr r3, 8011f10 <__ieee754_rem_pio2+0x2e8>)
 8011d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d04:	f7ee fada 	bl	80002bc <__adddf3>
 8011d08:	f04f 35ff 	mov.w	r5, #4294967295
 8011d0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d10:	e7c6      	b.n	8011ca0 <__ieee754_rem_pio2+0x78>
 8011d12:	a381      	add	r3, pc, #516	; (adr r3, 8011f18 <__ieee754_rem_pio2+0x2f0>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	f7ee fad0 	bl	80002bc <__adddf3>
 8011d1c:	a380      	add	r3, pc, #512	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2f8>)
 8011d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d22:	4606      	mov	r6, r0
 8011d24:	460f      	mov	r7, r1
 8011d26:	f7ee fac9 	bl	80002bc <__adddf3>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	e9c4 2300 	strd	r2, r3, [r4]
 8011d32:	4630      	mov	r0, r6
 8011d34:	4639      	mov	r1, r7
 8011d36:	f7ee fabf 	bl	80002b8 <__aeabi_dsub>
 8011d3a:	a379      	add	r3, pc, #484	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2f8>)
 8011d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d40:	e7e0      	b.n	8011d04 <__ieee754_rem_pio2+0xdc>
 8011d42:	4b82      	ldr	r3, [pc, #520]	; (8011f4c <__ieee754_rem_pio2+0x324>)
 8011d44:	4598      	cmp	r8, r3
 8011d46:	f300 80d0 	bgt.w	8011eea <__ieee754_rem_pio2+0x2c2>
 8011d4a:	f000 fe23 	bl	8012994 <fabs>
 8011d4e:	ec57 6b10 	vmov	r6, r7, d0
 8011d52:	ee10 0a10 	vmov	r0, s0
 8011d56:	a374      	add	r3, pc, #464	; (adr r3, 8011f28 <__ieee754_rem_pio2+0x300>)
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	f7ee fc63 	bl	8000628 <__aeabi_dmul>
 8011d62:	2200      	movs	r2, #0
 8011d64:	4b7a      	ldr	r3, [pc, #488]	; (8011f50 <__ieee754_rem_pio2+0x328>)
 8011d66:	f7ee faa9 	bl	80002bc <__adddf3>
 8011d6a:	f7ee ff0d 	bl	8000b88 <__aeabi_d2iz>
 8011d6e:	4605      	mov	r5, r0
 8011d70:	f7ee fbf0 	bl	8000554 <__aeabi_i2d>
 8011d74:	a364      	add	r3, pc, #400	; (adr r3, 8011f08 <__ieee754_rem_pio2+0x2e0>)
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d7e:	f7ee fc53 	bl	8000628 <__aeabi_dmul>
 8011d82:	4602      	mov	r2, r0
 8011d84:	460b      	mov	r3, r1
 8011d86:	4630      	mov	r0, r6
 8011d88:	4639      	mov	r1, r7
 8011d8a:	f7ee fa95 	bl	80002b8 <__aeabi_dsub>
 8011d8e:	a360      	add	r3, pc, #384	; (adr r3, 8011f10 <__ieee754_rem_pio2+0x2e8>)
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	4682      	mov	sl, r0
 8011d96:	468b      	mov	fp, r1
 8011d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d9c:	f7ee fc44 	bl	8000628 <__aeabi_dmul>
 8011da0:	2d1f      	cmp	r5, #31
 8011da2:	4606      	mov	r6, r0
 8011da4:	460f      	mov	r7, r1
 8011da6:	dc0c      	bgt.n	8011dc2 <__ieee754_rem_pio2+0x19a>
 8011da8:	1e6a      	subs	r2, r5, #1
 8011daa:	4b6a      	ldr	r3, [pc, #424]	; (8011f54 <__ieee754_rem_pio2+0x32c>)
 8011dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011db0:	4543      	cmp	r3, r8
 8011db2:	d006      	beq.n	8011dc2 <__ieee754_rem_pio2+0x19a>
 8011db4:	4632      	mov	r2, r6
 8011db6:	463b      	mov	r3, r7
 8011db8:	4650      	mov	r0, sl
 8011dba:	4659      	mov	r1, fp
 8011dbc:	f7ee fa7c 	bl	80002b8 <__aeabi_dsub>
 8011dc0:	e00e      	b.n	8011de0 <__ieee754_rem_pio2+0x1b8>
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	4650      	mov	r0, sl
 8011dc8:	4659      	mov	r1, fp
 8011dca:	f7ee fa75 	bl	80002b8 <__aeabi_dsub>
 8011dce:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011dd2:	9305      	str	r3, [sp, #20]
 8011dd4:	9a05      	ldr	r2, [sp, #20]
 8011dd6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	2b10      	cmp	r3, #16
 8011dde:	dc02      	bgt.n	8011de6 <__ieee754_rem_pio2+0x1be>
 8011de0:	e9c4 0100 	strd	r0, r1, [r4]
 8011de4:	e039      	b.n	8011e5a <__ieee754_rem_pio2+0x232>
 8011de6:	a34c      	add	r3, pc, #304	; (adr r3, 8011f18 <__ieee754_rem_pio2+0x2f0>)
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011df0:	f7ee fc1a 	bl	8000628 <__aeabi_dmul>
 8011df4:	4606      	mov	r6, r0
 8011df6:	460f      	mov	r7, r1
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4650      	mov	r0, sl
 8011dfe:	4659      	mov	r1, fp
 8011e00:	f7ee fa5a 	bl	80002b8 <__aeabi_dsub>
 8011e04:	4602      	mov	r2, r0
 8011e06:	460b      	mov	r3, r1
 8011e08:	4680      	mov	r8, r0
 8011e0a:	4689      	mov	r9, r1
 8011e0c:	4650      	mov	r0, sl
 8011e0e:	4659      	mov	r1, fp
 8011e10:	f7ee fa52 	bl	80002b8 <__aeabi_dsub>
 8011e14:	4632      	mov	r2, r6
 8011e16:	463b      	mov	r3, r7
 8011e18:	f7ee fa4e 	bl	80002b8 <__aeabi_dsub>
 8011e1c:	a340      	add	r3, pc, #256	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2f8>)
 8011e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e22:	4606      	mov	r6, r0
 8011e24:	460f      	mov	r7, r1
 8011e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e2a:	f7ee fbfd 	bl	8000628 <__aeabi_dmul>
 8011e2e:	4632      	mov	r2, r6
 8011e30:	463b      	mov	r3, r7
 8011e32:	f7ee fa41 	bl	80002b8 <__aeabi_dsub>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460f      	mov	r7, r1
 8011e3e:	4640      	mov	r0, r8
 8011e40:	4649      	mov	r1, r9
 8011e42:	f7ee fa39 	bl	80002b8 <__aeabi_dsub>
 8011e46:	9a05      	ldr	r2, [sp, #20]
 8011e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	2b31      	cmp	r3, #49	; 0x31
 8011e50:	dc20      	bgt.n	8011e94 <__ieee754_rem_pio2+0x26c>
 8011e52:	e9c4 0100 	strd	r0, r1, [r4]
 8011e56:	46c2      	mov	sl, r8
 8011e58:	46cb      	mov	fp, r9
 8011e5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011e5e:	4650      	mov	r0, sl
 8011e60:	4642      	mov	r2, r8
 8011e62:	464b      	mov	r3, r9
 8011e64:	4659      	mov	r1, fp
 8011e66:	f7ee fa27 	bl	80002b8 <__aeabi_dsub>
 8011e6a:	463b      	mov	r3, r7
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	f7ee fa23 	bl	80002b8 <__aeabi_dsub>
 8011e72:	9b04      	ldr	r3, [sp, #16]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e7a:	f6bf af11 	bge.w	8011ca0 <__ieee754_rem_pio2+0x78>
 8011e7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e82:	6063      	str	r3, [r4, #4]
 8011e84:	f8c4 8000 	str.w	r8, [r4]
 8011e88:	60a0      	str	r0, [r4, #8]
 8011e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e8e:	60e3      	str	r3, [r4, #12]
 8011e90:	426d      	negs	r5, r5
 8011e92:	e705      	b.n	8011ca0 <__ieee754_rem_pio2+0x78>
 8011e94:	a326      	add	r3, pc, #152	; (adr r3, 8011f30 <__ieee754_rem_pio2+0x308>)
 8011e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e9e:	f7ee fbc3 	bl	8000628 <__aeabi_dmul>
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	460f      	mov	r7, r1
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	4640      	mov	r0, r8
 8011eac:	4649      	mov	r1, r9
 8011eae:	f7ee fa03 	bl	80002b8 <__aeabi_dsub>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4682      	mov	sl, r0
 8011eb8:	468b      	mov	fp, r1
 8011eba:	4640      	mov	r0, r8
 8011ebc:	4649      	mov	r1, r9
 8011ebe:	f7ee f9fb 	bl	80002b8 <__aeabi_dsub>
 8011ec2:	4632      	mov	r2, r6
 8011ec4:	463b      	mov	r3, r7
 8011ec6:	f7ee f9f7 	bl	80002b8 <__aeabi_dsub>
 8011eca:	a31b      	add	r3, pc, #108	; (adr r3, 8011f38 <__ieee754_rem_pio2+0x310>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	4606      	mov	r6, r0
 8011ed2:	460f      	mov	r7, r1
 8011ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ed8:	f7ee fba6 	bl	8000628 <__aeabi_dmul>
 8011edc:	4632      	mov	r2, r6
 8011ede:	463b      	mov	r3, r7
 8011ee0:	f7ee f9ea 	bl	80002b8 <__aeabi_dsub>
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460f      	mov	r7, r1
 8011ee8:	e764      	b.n	8011db4 <__ieee754_rem_pio2+0x18c>
 8011eea:	4b1b      	ldr	r3, [pc, #108]	; (8011f58 <__ieee754_rem_pio2+0x330>)
 8011eec:	4598      	cmp	r8, r3
 8011eee:	dd35      	ble.n	8011f5c <__ieee754_rem_pio2+0x334>
 8011ef0:	ee10 2a10 	vmov	r2, s0
 8011ef4:	463b      	mov	r3, r7
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	4639      	mov	r1, r7
 8011efa:	f7ee f9dd 	bl	80002b8 <__aeabi_dsub>
 8011efe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f02:	e9c4 0100 	strd	r0, r1, [r4]
 8011f06:	e6a1      	b.n	8011c4c <__ieee754_rem_pio2+0x24>
 8011f08:	54400000 	.word	0x54400000
 8011f0c:	3ff921fb 	.word	0x3ff921fb
 8011f10:	1a626331 	.word	0x1a626331
 8011f14:	3dd0b461 	.word	0x3dd0b461
 8011f18:	1a600000 	.word	0x1a600000
 8011f1c:	3dd0b461 	.word	0x3dd0b461
 8011f20:	2e037073 	.word	0x2e037073
 8011f24:	3ba3198a 	.word	0x3ba3198a
 8011f28:	6dc9c883 	.word	0x6dc9c883
 8011f2c:	3fe45f30 	.word	0x3fe45f30
 8011f30:	2e000000 	.word	0x2e000000
 8011f34:	3ba3198a 	.word	0x3ba3198a
 8011f38:	252049c1 	.word	0x252049c1
 8011f3c:	397b839a 	.word	0x397b839a
 8011f40:	3fe921fb 	.word	0x3fe921fb
 8011f44:	4002d97b 	.word	0x4002d97b
 8011f48:	3ff921fb 	.word	0x3ff921fb
 8011f4c:	413921fb 	.word	0x413921fb
 8011f50:	3fe00000 	.word	0x3fe00000
 8011f54:	08018044 	.word	0x08018044
 8011f58:	7fefffff 	.word	0x7fefffff
 8011f5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011f60:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011f64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011f68:	4630      	mov	r0, r6
 8011f6a:	460f      	mov	r7, r1
 8011f6c:	f7ee fe0c 	bl	8000b88 <__aeabi_d2iz>
 8011f70:	f7ee faf0 	bl	8000554 <__aeabi_i2d>
 8011f74:	4602      	mov	r2, r0
 8011f76:	460b      	mov	r3, r1
 8011f78:	4630      	mov	r0, r6
 8011f7a:	4639      	mov	r1, r7
 8011f7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f80:	f7ee f99a 	bl	80002b8 <__aeabi_dsub>
 8011f84:	2200      	movs	r2, #0
 8011f86:	4b1f      	ldr	r3, [pc, #124]	; (8012004 <__ieee754_rem_pio2+0x3dc>)
 8011f88:	f7ee fb4e 	bl	8000628 <__aeabi_dmul>
 8011f8c:	460f      	mov	r7, r1
 8011f8e:	4606      	mov	r6, r0
 8011f90:	f7ee fdfa 	bl	8000b88 <__aeabi_d2iz>
 8011f94:	f7ee fade 	bl	8000554 <__aeabi_i2d>
 8011f98:	4602      	mov	r2, r0
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	4639      	mov	r1, r7
 8011fa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011fa4:	f7ee f988 	bl	80002b8 <__aeabi_dsub>
 8011fa8:	2200      	movs	r2, #0
 8011faa:	4b16      	ldr	r3, [pc, #88]	; (8012004 <__ieee754_rem_pio2+0x3dc>)
 8011fac:	f7ee fb3c 	bl	8000628 <__aeabi_dmul>
 8011fb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011fb4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011fb8:	f04f 0803 	mov.w	r8, #3
 8011fbc:	2600      	movs	r6, #0
 8011fbe:	2700      	movs	r7, #0
 8011fc0:	4632      	mov	r2, r6
 8011fc2:	463b      	mov	r3, r7
 8011fc4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011fc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8011fcc:	f7ee fd94 	bl	8000af8 <__aeabi_dcmpeq>
 8011fd0:	b9b0      	cbnz	r0, 8012000 <__ieee754_rem_pio2+0x3d8>
 8011fd2:	4b0d      	ldr	r3, [pc, #52]	; (8012008 <__ieee754_rem_pio2+0x3e0>)
 8011fd4:	9301      	str	r3, [sp, #4]
 8011fd6:	2302      	movs	r3, #2
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	462a      	mov	r2, r5
 8011fdc:	4643      	mov	r3, r8
 8011fde:	4621      	mov	r1, r4
 8011fe0:	a806      	add	r0, sp, #24
 8011fe2:	f000 f8dd 	bl	80121a0 <__kernel_rem_pio2>
 8011fe6:	9b04      	ldr	r3, [sp, #16]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	4605      	mov	r5, r0
 8011fec:	f6bf ae58 	bge.w	8011ca0 <__ieee754_rem_pio2+0x78>
 8011ff0:	6863      	ldr	r3, [r4, #4]
 8011ff2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011ff6:	6063      	str	r3, [r4, #4]
 8011ff8:	68e3      	ldr	r3, [r4, #12]
 8011ffa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011ffe:	e746      	b.n	8011e8e <__ieee754_rem_pio2+0x266>
 8012000:	46d0      	mov	r8, sl
 8012002:	e7dd      	b.n	8011fc0 <__ieee754_rem_pio2+0x398>
 8012004:	41700000 	.word	0x41700000
 8012008:	080180c4 	.word	0x080180c4
 801200c:	00000000 	.word	0x00000000

08012010 <__kernel_cos>:
 8012010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012014:	ec59 8b10 	vmov	r8, r9, d0
 8012018:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801201c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012020:	ed2d 8b02 	vpush	{d8}
 8012024:	eeb0 8a41 	vmov.f32	s16, s2
 8012028:	eef0 8a61 	vmov.f32	s17, s3
 801202c:	da07      	bge.n	801203e <__kernel_cos+0x2e>
 801202e:	ee10 0a10 	vmov	r0, s0
 8012032:	4649      	mov	r1, r9
 8012034:	f7ee fda8 	bl	8000b88 <__aeabi_d2iz>
 8012038:	2800      	cmp	r0, #0
 801203a:	f000 8089 	beq.w	8012150 <__kernel_cos+0x140>
 801203e:	4642      	mov	r2, r8
 8012040:	464b      	mov	r3, r9
 8012042:	4640      	mov	r0, r8
 8012044:	4649      	mov	r1, r9
 8012046:	f7ee faef 	bl	8000628 <__aeabi_dmul>
 801204a:	2200      	movs	r2, #0
 801204c:	4b4e      	ldr	r3, [pc, #312]	; (8012188 <__kernel_cos+0x178>)
 801204e:	4604      	mov	r4, r0
 8012050:	460d      	mov	r5, r1
 8012052:	f7ee fae9 	bl	8000628 <__aeabi_dmul>
 8012056:	a340      	add	r3, pc, #256	; (adr r3, 8012158 <__kernel_cos+0x148>)
 8012058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205c:	4682      	mov	sl, r0
 801205e:	468b      	mov	fp, r1
 8012060:	4620      	mov	r0, r4
 8012062:	4629      	mov	r1, r5
 8012064:	f7ee fae0 	bl	8000628 <__aeabi_dmul>
 8012068:	a33d      	add	r3, pc, #244	; (adr r3, 8012160 <__kernel_cos+0x150>)
 801206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206e:	f7ee f925 	bl	80002bc <__adddf3>
 8012072:	4622      	mov	r2, r4
 8012074:	462b      	mov	r3, r5
 8012076:	f7ee fad7 	bl	8000628 <__aeabi_dmul>
 801207a:	a33b      	add	r3, pc, #236	; (adr r3, 8012168 <__kernel_cos+0x158>)
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	f7ee f91a 	bl	80002b8 <__aeabi_dsub>
 8012084:	4622      	mov	r2, r4
 8012086:	462b      	mov	r3, r5
 8012088:	f7ee face 	bl	8000628 <__aeabi_dmul>
 801208c:	a338      	add	r3, pc, #224	; (adr r3, 8012170 <__kernel_cos+0x160>)
 801208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012092:	f7ee f913 	bl	80002bc <__adddf3>
 8012096:	4622      	mov	r2, r4
 8012098:	462b      	mov	r3, r5
 801209a:	f7ee fac5 	bl	8000628 <__aeabi_dmul>
 801209e:	a336      	add	r3, pc, #216	; (adr r3, 8012178 <__kernel_cos+0x168>)
 80120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a4:	f7ee f908 	bl	80002b8 <__aeabi_dsub>
 80120a8:	4622      	mov	r2, r4
 80120aa:	462b      	mov	r3, r5
 80120ac:	f7ee fabc 	bl	8000628 <__aeabi_dmul>
 80120b0:	a333      	add	r3, pc, #204	; (adr r3, 8012180 <__kernel_cos+0x170>)
 80120b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b6:	f7ee f901 	bl	80002bc <__adddf3>
 80120ba:	4622      	mov	r2, r4
 80120bc:	462b      	mov	r3, r5
 80120be:	f7ee fab3 	bl	8000628 <__aeabi_dmul>
 80120c2:	4622      	mov	r2, r4
 80120c4:	462b      	mov	r3, r5
 80120c6:	f7ee faaf 	bl	8000628 <__aeabi_dmul>
 80120ca:	ec53 2b18 	vmov	r2, r3, d8
 80120ce:	4604      	mov	r4, r0
 80120d0:	460d      	mov	r5, r1
 80120d2:	4640      	mov	r0, r8
 80120d4:	4649      	mov	r1, r9
 80120d6:	f7ee faa7 	bl	8000628 <__aeabi_dmul>
 80120da:	460b      	mov	r3, r1
 80120dc:	4602      	mov	r2, r0
 80120de:	4629      	mov	r1, r5
 80120e0:	4620      	mov	r0, r4
 80120e2:	f7ee f8e9 	bl	80002b8 <__aeabi_dsub>
 80120e6:	4b29      	ldr	r3, [pc, #164]	; (801218c <__kernel_cos+0x17c>)
 80120e8:	429e      	cmp	r6, r3
 80120ea:	4680      	mov	r8, r0
 80120ec:	4689      	mov	r9, r1
 80120ee:	dc11      	bgt.n	8012114 <__kernel_cos+0x104>
 80120f0:	4602      	mov	r2, r0
 80120f2:	460b      	mov	r3, r1
 80120f4:	4650      	mov	r0, sl
 80120f6:	4659      	mov	r1, fp
 80120f8:	f7ee f8de 	bl	80002b8 <__aeabi_dsub>
 80120fc:	460b      	mov	r3, r1
 80120fe:	4924      	ldr	r1, [pc, #144]	; (8012190 <__kernel_cos+0x180>)
 8012100:	4602      	mov	r2, r0
 8012102:	2000      	movs	r0, #0
 8012104:	f7ee f8d8 	bl	80002b8 <__aeabi_dsub>
 8012108:	ecbd 8b02 	vpop	{d8}
 801210c:	ec41 0b10 	vmov	d0, r0, r1
 8012110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012114:	4b1f      	ldr	r3, [pc, #124]	; (8012194 <__kernel_cos+0x184>)
 8012116:	491e      	ldr	r1, [pc, #120]	; (8012190 <__kernel_cos+0x180>)
 8012118:	429e      	cmp	r6, r3
 801211a:	bfcc      	ite	gt
 801211c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012198 <__kernel_cos+0x188>)
 801211e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012122:	2400      	movs	r4, #0
 8012124:	4622      	mov	r2, r4
 8012126:	462b      	mov	r3, r5
 8012128:	2000      	movs	r0, #0
 801212a:	f7ee f8c5 	bl	80002b8 <__aeabi_dsub>
 801212e:	4622      	mov	r2, r4
 8012130:	4606      	mov	r6, r0
 8012132:	460f      	mov	r7, r1
 8012134:	462b      	mov	r3, r5
 8012136:	4650      	mov	r0, sl
 8012138:	4659      	mov	r1, fp
 801213a:	f7ee f8bd 	bl	80002b8 <__aeabi_dsub>
 801213e:	4642      	mov	r2, r8
 8012140:	464b      	mov	r3, r9
 8012142:	f7ee f8b9 	bl	80002b8 <__aeabi_dsub>
 8012146:	4602      	mov	r2, r0
 8012148:	460b      	mov	r3, r1
 801214a:	4630      	mov	r0, r6
 801214c:	4639      	mov	r1, r7
 801214e:	e7d9      	b.n	8012104 <__kernel_cos+0xf4>
 8012150:	2000      	movs	r0, #0
 8012152:	490f      	ldr	r1, [pc, #60]	; (8012190 <__kernel_cos+0x180>)
 8012154:	e7d8      	b.n	8012108 <__kernel_cos+0xf8>
 8012156:	bf00      	nop
 8012158:	be8838d4 	.word	0xbe8838d4
 801215c:	bda8fae9 	.word	0xbda8fae9
 8012160:	bdb4b1c4 	.word	0xbdb4b1c4
 8012164:	3e21ee9e 	.word	0x3e21ee9e
 8012168:	809c52ad 	.word	0x809c52ad
 801216c:	3e927e4f 	.word	0x3e927e4f
 8012170:	19cb1590 	.word	0x19cb1590
 8012174:	3efa01a0 	.word	0x3efa01a0
 8012178:	16c15177 	.word	0x16c15177
 801217c:	3f56c16c 	.word	0x3f56c16c
 8012180:	5555554c 	.word	0x5555554c
 8012184:	3fa55555 	.word	0x3fa55555
 8012188:	3fe00000 	.word	0x3fe00000
 801218c:	3fd33332 	.word	0x3fd33332
 8012190:	3ff00000 	.word	0x3ff00000
 8012194:	3fe90000 	.word	0x3fe90000
 8012198:	3fd20000 	.word	0x3fd20000
 801219c:	00000000 	.word	0x00000000

080121a0 <__kernel_rem_pio2>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	ed2d 8b02 	vpush	{d8}
 80121a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80121ac:	1ed4      	subs	r4, r2, #3
 80121ae:	9308      	str	r3, [sp, #32]
 80121b0:	9101      	str	r1, [sp, #4]
 80121b2:	4bc5      	ldr	r3, [pc, #788]	; (80124c8 <__kernel_rem_pio2+0x328>)
 80121b4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80121b6:	9009      	str	r0, [sp, #36]	; 0x24
 80121b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121bc:	9304      	str	r3, [sp, #16]
 80121be:	9b08      	ldr	r3, [sp, #32]
 80121c0:	3b01      	subs	r3, #1
 80121c2:	9307      	str	r3, [sp, #28]
 80121c4:	2318      	movs	r3, #24
 80121c6:	fb94 f4f3 	sdiv	r4, r4, r3
 80121ca:	f06f 0317 	mvn.w	r3, #23
 80121ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80121d2:	fb04 3303 	mla	r3, r4, r3, r3
 80121d6:	eb03 0a02 	add.w	sl, r3, r2
 80121da:	9b04      	ldr	r3, [sp, #16]
 80121dc:	9a07      	ldr	r2, [sp, #28]
 80121de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80124b8 <__kernel_rem_pio2+0x318>
 80121e2:	eb03 0802 	add.w	r8, r3, r2
 80121e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80121e8:	1aa7      	subs	r7, r4, r2
 80121ea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80121ee:	ae22      	add	r6, sp, #136	; 0x88
 80121f0:	2500      	movs	r5, #0
 80121f2:	4545      	cmp	r5, r8
 80121f4:	dd13      	ble.n	801221e <__kernel_rem_pio2+0x7e>
 80121f6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80124b8 <__kernel_rem_pio2+0x318>
 80121fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80121fe:	2600      	movs	r6, #0
 8012200:	9b04      	ldr	r3, [sp, #16]
 8012202:	429e      	cmp	r6, r3
 8012204:	dc32      	bgt.n	801226c <__kernel_rem_pio2+0xcc>
 8012206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012208:	9302      	str	r3, [sp, #8]
 801220a:	9b08      	ldr	r3, [sp, #32]
 801220c:	199d      	adds	r5, r3, r6
 801220e:	ab22      	add	r3, sp, #136	; 0x88
 8012210:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012214:	9306      	str	r3, [sp, #24]
 8012216:	ec59 8b18 	vmov	r8, r9, d8
 801221a:	2700      	movs	r7, #0
 801221c:	e01f      	b.n	801225e <__kernel_rem_pio2+0xbe>
 801221e:	42ef      	cmn	r7, r5
 8012220:	d407      	bmi.n	8012232 <__kernel_rem_pio2+0x92>
 8012222:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012226:	f7ee f995 	bl	8000554 <__aeabi_i2d>
 801222a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801222e:	3501      	adds	r5, #1
 8012230:	e7df      	b.n	80121f2 <__kernel_rem_pio2+0x52>
 8012232:	ec51 0b18 	vmov	r0, r1, d8
 8012236:	e7f8      	b.n	801222a <__kernel_rem_pio2+0x8a>
 8012238:	9906      	ldr	r1, [sp, #24]
 801223a:	9d02      	ldr	r5, [sp, #8]
 801223c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012240:	9106      	str	r1, [sp, #24]
 8012242:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012246:	9502      	str	r5, [sp, #8]
 8012248:	f7ee f9ee 	bl	8000628 <__aeabi_dmul>
 801224c:	4602      	mov	r2, r0
 801224e:	460b      	mov	r3, r1
 8012250:	4640      	mov	r0, r8
 8012252:	4649      	mov	r1, r9
 8012254:	f7ee f832 	bl	80002bc <__adddf3>
 8012258:	3701      	adds	r7, #1
 801225a:	4680      	mov	r8, r0
 801225c:	4689      	mov	r9, r1
 801225e:	9b07      	ldr	r3, [sp, #28]
 8012260:	429f      	cmp	r7, r3
 8012262:	dde9      	ble.n	8012238 <__kernel_rem_pio2+0x98>
 8012264:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012268:	3601      	adds	r6, #1
 801226a:	e7c9      	b.n	8012200 <__kernel_rem_pio2+0x60>
 801226c:	9b04      	ldr	r3, [sp, #16]
 801226e:	aa0e      	add	r2, sp, #56	; 0x38
 8012270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012274:	930c      	str	r3, [sp, #48]	; 0x30
 8012276:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012278:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801227c:	9c04      	ldr	r4, [sp, #16]
 801227e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012280:	ab9a      	add	r3, sp, #616	; 0x268
 8012282:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012286:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801228a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801228e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012292:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012296:	ab9a      	add	r3, sp, #616	; 0x268
 8012298:	445b      	add	r3, fp
 801229a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801229e:	2500      	movs	r5, #0
 80122a0:	1b63      	subs	r3, r4, r5
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	dc78      	bgt.n	8012398 <__kernel_rem_pio2+0x1f8>
 80122a6:	4650      	mov	r0, sl
 80122a8:	ec49 8b10 	vmov	d0, r8, r9
 80122ac:	f000 fc00 	bl	8012ab0 <scalbn>
 80122b0:	ec57 6b10 	vmov	r6, r7, d0
 80122b4:	2200      	movs	r2, #0
 80122b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80122ba:	ee10 0a10 	vmov	r0, s0
 80122be:	4639      	mov	r1, r7
 80122c0:	f7ee f9b2 	bl	8000628 <__aeabi_dmul>
 80122c4:	ec41 0b10 	vmov	d0, r0, r1
 80122c8:	f000 fb6e 	bl	80129a8 <floor>
 80122cc:	2200      	movs	r2, #0
 80122ce:	ec51 0b10 	vmov	r0, r1, d0
 80122d2:	4b7e      	ldr	r3, [pc, #504]	; (80124cc <__kernel_rem_pio2+0x32c>)
 80122d4:	f7ee f9a8 	bl	8000628 <__aeabi_dmul>
 80122d8:	4602      	mov	r2, r0
 80122da:	460b      	mov	r3, r1
 80122dc:	4630      	mov	r0, r6
 80122de:	4639      	mov	r1, r7
 80122e0:	f7ed ffea 	bl	80002b8 <__aeabi_dsub>
 80122e4:	460f      	mov	r7, r1
 80122e6:	4606      	mov	r6, r0
 80122e8:	f7ee fc4e 	bl	8000b88 <__aeabi_d2iz>
 80122ec:	9006      	str	r0, [sp, #24]
 80122ee:	f7ee f931 	bl	8000554 <__aeabi_i2d>
 80122f2:	4602      	mov	r2, r0
 80122f4:	460b      	mov	r3, r1
 80122f6:	4630      	mov	r0, r6
 80122f8:	4639      	mov	r1, r7
 80122fa:	f7ed ffdd 	bl	80002b8 <__aeabi_dsub>
 80122fe:	f1ba 0f00 	cmp.w	sl, #0
 8012302:	4606      	mov	r6, r0
 8012304:	460f      	mov	r7, r1
 8012306:	dd6c      	ble.n	80123e2 <__kernel_rem_pio2+0x242>
 8012308:	1e62      	subs	r2, r4, #1
 801230a:	ab0e      	add	r3, sp, #56	; 0x38
 801230c:	f1ca 0118 	rsb	r1, sl, #24
 8012310:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012314:	9d06      	ldr	r5, [sp, #24]
 8012316:	fa40 f301 	asr.w	r3, r0, r1
 801231a:	441d      	add	r5, r3
 801231c:	408b      	lsls	r3, r1
 801231e:	1ac0      	subs	r0, r0, r3
 8012320:	ab0e      	add	r3, sp, #56	; 0x38
 8012322:	9506      	str	r5, [sp, #24]
 8012324:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012328:	f1ca 0317 	rsb	r3, sl, #23
 801232c:	fa40 f303 	asr.w	r3, r0, r3
 8012330:	9302      	str	r3, [sp, #8]
 8012332:	9b02      	ldr	r3, [sp, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	dd62      	ble.n	80123fe <__kernel_rem_pio2+0x25e>
 8012338:	9b06      	ldr	r3, [sp, #24]
 801233a:	2200      	movs	r2, #0
 801233c:	3301      	adds	r3, #1
 801233e:	9306      	str	r3, [sp, #24]
 8012340:	4615      	mov	r5, r2
 8012342:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012346:	4294      	cmp	r4, r2
 8012348:	f300 8095 	bgt.w	8012476 <__kernel_rem_pio2+0x2d6>
 801234c:	f1ba 0f00 	cmp.w	sl, #0
 8012350:	dd07      	ble.n	8012362 <__kernel_rem_pio2+0x1c2>
 8012352:	f1ba 0f01 	cmp.w	sl, #1
 8012356:	f000 80a2 	beq.w	801249e <__kernel_rem_pio2+0x2fe>
 801235a:	f1ba 0f02 	cmp.w	sl, #2
 801235e:	f000 80c1 	beq.w	80124e4 <__kernel_rem_pio2+0x344>
 8012362:	9b02      	ldr	r3, [sp, #8]
 8012364:	2b02      	cmp	r3, #2
 8012366:	d14a      	bne.n	80123fe <__kernel_rem_pio2+0x25e>
 8012368:	4632      	mov	r2, r6
 801236a:	463b      	mov	r3, r7
 801236c:	2000      	movs	r0, #0
 801236e:	4958      	ldr	r1, [pc, #352]	; (80124d0 <__kernel_rem_pio2+0x330>)
 8012370:	f7ed ffa2 	bl	80002b8 <__aeabi_dsub>
 8012374:	4606      	mov	r6, r0
 8012376:	460f      	mov	r7, r1
 8012378:	2d00      	cmp	r5, #0
 801237a:	d040      	beq.n	80123fe <__kernel_rem_pio2+0x25e>
 801237c:	4650      	mov	r0, sl
 801237e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80124c0 <__kernel_rem_pio2+0x320>
 8012382:	f000 fb95 	bl	8012ab0 <scalbn>
 8012386:	4630      	mov	r0, r6
 8012388:	4639      	mov	r1, r7
 801238a:	ec53 2b10 	vmov	r2, r3, d0
 801238e:	f7ed ff93 	bl	80002b8 <__aeabi_dsub>
 8012392:	4606      	mov	r6, r0
 8012394:	460f      	mov	r7, r1
 8012396:	e032      	b.n	80123fe <__kernel_rem_pio2+0x25e>
 8012398:	2200      	movs	r2, #0
 801239a:	4b4e      	ldr	r3, [pc, #312]	; (80124d4 <__kernel_rem_pio2+0x334>)
 801239c:	4640      	mov	r0, r8
 801239e:	4649      	mov	r1, r9
 80123a0:	f7ee f942 	bl	8000628 <__aeabi_dmul>
 80123a4:	f7ee fbf0 	bl	8000b88 <__aeabi_d2iz>
 80123a8:	f7ee f8d4 	bl	8000554 <__aeabi_i2d>
 80123ac:	2200      	movs	r2, #0
 80123ae:	4b4a      	ldr	r3, [pc, #296]	; (80124d8 <__kernel_rem_pio2+0x338>)
 80123b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123b4:	f7ee f938 	bl	8000628 <__aeabi_dmul>
 80123b8:	4602      	mov	r2, r0
 80123ba:	460b      	mov	r3, r1
 80123bc:	4640      	mov	r0, r8
 80123be:	4649      	mov	r1, r9
 80123c0:	f7ed ff7a 	bl	80002b8 <__aeabi_dsub>
 80123c4:	f7ee fbe0 	bl	8000b88 <__aeabi_d2iz>
 80123c8:	ab0e      	add	r3, sp, #56	; 0x38
 80123ca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80123ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80123d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123d6:	f7ed ff71 	bl	80002bc <__adddf3>
 80123da:	3501      	adds	r5, #1
 80123dc:	4680      	mov	r8, r0
 80123de:	4689      	mov	r9, r1
 80123e0:	e75e      	b.n	80122a0 <__kernel_rem_pio2+0x100>
 80123e2:	d105      	bne.n	80123f0 <__kernel_rem_pio2+0x250>
 80123e4:	1e63      	subs	r3, r4, #1
 80123e6:	aa0e      	add	r2, sp, #56	; 0x38
 80123e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80123ec:	15c3      	asrs	r3, r0, #23
 80123ee:	e79f      	b.n	8012330 <__kernel_rem_pio2+0x190>
 80123f0:	2200      	movs	r2, #0
 80123f2:	4b3a      	ldr	r3, [pc, #232]	; (80124dc <__kernel_rem_pio2+0x33c>)
 80123f4:	f7ee fb9e 	bl	8000b34 <__aeabi_dcmpge>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d139      	bne.n	8012470 <__kernel_rem_pio2+0x2d0>
 80123fc:	9002      	str	r0, [sp, #8]
 80123fe:	2200      	movs	r2, #0
 8012400:	2300      	movs	r3, #0
 8012402:	4630      	mov	r0, r6
 8012404:	4639      	mov	r1, r7
 8012406:	f7ee fb77 	bl	8000af8 <__aeabi_dcmpeq>
 801240a:	2800      	cmp	r0, #0
 801240c:	f000 80c7 	beq.w	801259e <__kernel_rem_pio2+0x3fe>
 8012410:	1e65      	subs	r5, r4, #1
 8012412:	462b      	mov	r3, r5
 8012414:	2200      	movs	r2, #0
 8012416:	9904      	ldr	r1, [sp, #16]
 8012418:	428b      	cmp	r3, r1
 801241a:	da6a      	bge.n	80124f2 <__kernel_rem_pio2+0x352>
 801241c:	2a00      	cmp	r2, #0
 801241e:	f000 8088 	beq.w	8012532 <__kernel_rem_pio2+0x392>
 8012422:	ab0e      	add	r3, sp, #56	; 0x38
 8012424:	f1aa 0a18 	sub.w	sl, sl, #24
 8012428:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801242c:	2b00      	cmp	r3, #0
 801242e:	f000 80b4 	beq.w	801259a <__kernel_rem_pio2+0x3fa>
 8012432:	4650      	mov	r0, sl
 8012434:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80124c0 <__kernel_rem_pio2+0x320>
 8012438:	f000 fb3a 	bl	8012ab0 <scalbn>
 801243c:	00ec      	lsls	r4, r5, #3
 801243e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012440:	191e      	adds	r6, r3, r4
 8012442:	ec59 8b10 	vmov	r8, r9, d0
 8012446:	f106 0a08 	add.w	sl, r6, #8
 801244a:	462f      	mov	r7, r5
 801244c:	2f00      	cmp	r7, #0
 801244e:	f280 80df 	bge.w	8012610 <__kernel_rem_pio2+0x470>
 8012452:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80124b8 <__kernel_rem_pio2+0x318>
 8012456:	f04f 0a00 	mov.w	sl, #0
 801245a:	eba5 030a 	sub.w	r3, r5, sl
 801245e:	2b00      	cmp	r3, #0
 8012460:	f2c0 810a 	blt.w	8012678 <__kernel_rem_pio2+0x4d8>
 8012464:	f8df b078 	ldr.w	fp, [pc, #120]	; 80124e0 <__kernel_rem_pio2+0x340>
 8012468:	ec59 8b18 	vmov	r8, r9, d8
 801246c:	2700      	movs	r7, #0
 801246e:	e0f5      	b.n	801265c <__kernel_rem_pio2+0x4bc>
 8012470:	2302      	movs	r3, #2
 8012472:	9302      	str	r3, [sp, #8]
 8012474:	e760      	b.n	8012338 <__kernel_rem_pio2+0x198>
 8012476:	ab0e      	add	r3, sp, #56	; 0x38
 8012478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801247c:	b94d      	cbnz	r5, 8012492 <__kernel_rem_pio2+0x2f2>
 801247e:	b12b      	cbz	r3, 801248c <__kernel_rem_pio2+0x2ec>
 8012480:	a80e      	add	r0, sp, #56	; 0x38
 8012482:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012486:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801248a:	2301      	movs	r3, #1
 801248c:	3201      	adds	r2, #1
 801248e:	461d      	mov	r5, r3
 8012490:	e759      	b.n	8012346 <__kernel_rem_pio2+0x1a6>
 8012492:	a80e      	add	r0, sp, #56	; 0x38
 8012494:	1acb      	subs	r3, r1, r3
 8012496:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801249a:	462b      	mov	r3, r5
 801249c:	e7f6      	b.n	801248c <__kernel_rem_pio2+0x2ec>
 801249e:	1e62      	subs	r2, r4, #1
 80124a0:	ab0e      	add	r3, sp, #56	; 0x38
 80124a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80124aa:	a90e      	add	r1, sp, #56	; 0x38
 80124ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80124b0:	e757      	b.n	8012362 <__kernel_rem_pio2+0x1c2>
 80124b2:	bf00      	nop
 80124b4:	f3af 8000 	nop.w
	...
 80124c4:	3ff00000 	.word	0x3ff00000
 80124c8:	08018210 	.word	0x08018210
 80124cc:	40200000 	.word	0x40200000
 80124d0:	3ff00000 	.word	0x3ff00000
 80124d4:	3e700000 	.word	0x3e700000
 80124d8:	41700000 	.word	0x41700000
 80124dc:	3fe00000 	.word	0x3fe00000
 80124e0:	080181d0 	.word	0x080181d0
 80124e4:	1e62      	subs	r2, r4, #1
 80124e6:	ab0e      	add	r3, sp, #56	; 0x38
 80124e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80124f0:	e7db      	b.n	80124aa <__kernel_rem_pio2+0x30a>
 80124f2:	a90e      	add	r1, sp, #56	; 0x38
 80124f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80124f8:	3b01      	subs	r3, #1
 80124fa:	430a      	orrs	r2, r1
 80124fc:	e78b      	b.n	8012416 <__kernel_rem_pio2+0x276>
 80124fe:	3301      	adds	r3, #1
 8012500:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012504:	2900      	cmp	r1, #0
 8012506:	d0fa      	beq.n	80124fe <__kernel_rem_pio2+0x35e>
 8012508:	9a08      	ldr	r2, [sp, #32]
 801250a:	4422      	add	r2, r4
 801250c:	00d2      	lsls	r2, r2, #3
 801250e:	a922      	add	r1, sp, #136	; 0x88
 8012510:	18e3      	adds	r3, r4, r3
 8012512:	9206      	str	r2, [sp, #24]
 8012514:	440a      	add	r2, r1
 8012516:	9302      	str	r3, [sp, #8]
 8012518:	f10b 0108 	add.w	r1, fp, #8
 801251c:	f102 0308 	add.w	r3, r2, #8
 8012520:	1c66      	adds	r6, r4, #1
 8012522:	910a      	str	r1, [sp, #40]	; 0x28
 8012524:	2500      	movs	r5, #0
 8012526:	930d      	str	r3, [sp, #52]	; 0x34
 8012528:	9b02      	ldr	r3, [sp, #8]
 801252a:	42b3      	cmp	r3, r6
 801252c:	da04      	bge.n	8012538 <__kernel_rem_pio2+0x398>
 801252e:	461c      	mov	r4, r3
 8012530:	e6a6      	b.n	8012280 <__kernel_rem_pio2+0xe0>
 8012532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012534:	2301      	movs	r3, #1
 8012536:	e7e3      	b.n	8012500 <__kernel_rem_pio2+0x360>
 8012538:	9b06      	ldr	r3, [sp, #24]
 801253a:	18ef      	adds	r7, r5, r3
 801253c:	ab22      	add	r3, sp, #136	; 0x88
 801253e:	441f      	add	r7, r3
 8012540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012542:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012546:	f7ee f805 	bl	8000554 <__aeabi_i2d>
 801254a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801254c:	461c      	mov	r4, r3
 801254e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012550:	e9c7 0100 	strd	r0, r1, [r7]
 8012554:	eb03 0b05 	add.w	fp, r3, r5
 8012558:	2700      	movs	r7, #0
 801255a:	f04f 0800 	mov.w	r8, #0
 801255e:	f04f 0900 	mov.w	r9, #0
 8012562:	9b07      	ldr	r3, [sp, #28]
 8012564:	429f      	cmp	r7, r3
 8012566:	dd08      	ble.n	801257a <__kernel_rem_pio2+0x3da>
 8012568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801256a:	aa72      	add	r2, sp, #456	; 0x1c8
 801256c:	18eb      	adds	r3, r5, r3
 801256e:	4413      	add	r3, r2
 8012570:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012574:	3601      	adds	r6, #1
 8012576:	3508      	adds	r5, #8
 8012578:	e7d6      	b.n	8012528 <__kernel_rem_pio2+0x388>
 801257a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801257e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012582:	f7ee f851 	bl	8000628 <__aeabi_dmul>
 8012586:	4602      	mov	r2, r0
 8012588:	460b      	mov	r3, r1
 801258a:	4640      	mov	r0, r8
 801258c:	4649      	mov	r1, r9
 801258e:	f7ed fe95 	bl	80002bc <__adddf3>
 8012592:	3701      	adds	r7, #1
 8012594:	4680      	mov	r8, r0
 8012596:	4689      	mov	r9, r1
 8012598:	e7e3      	b.n	8012562 <__kernel_rem_pio2+0x3c2>
 801259a:	3d01      	subs	r5, #1
 801259c:	e741      	b.n	8012422 <__kernel_rem_pio2+0x282>
 801259e:	f1ca 0000 	rsb	r0, sl, #0
 80125a2:	ec47 6b10 	vmov	d0, r6, r7
 80125a6:	f000 fa83 	bl	8012ab0 <scalbn>
 80125aa:	ec57 6b10 	vmov	r6, r7, d0
 80125ae:	2200      	movs	r2, #0
 80125b0:	4b99      	ldr	r3, [pc, #612]	; (8012818 <__kernel_rem_pio2+0x678>)
 80125b2:	ee10 0a10 	vmov	r0, s0
 80125b6:	4639      	mov	r1, r7
 80125b8:	f7ee fabc 	bl	8000b34 <__aeabi_dcmpge>
 80125bc:	b1f8      	cbz	r0, 80125fe <__kernel_rem_pio2+0x45e>
 80125be:	2200      	movs	r2, #0
 80125c0:	4b96      	ldr	r3, [pc, #600]	; (801281c <__kernel_rem_pio2+0x67c>)
 80125c2:	4630      	mov	r0, r6
 80125c4:	4639      	mov	r1, r7
 80125c6:	f7ee f82f 	bl	8000628 <__aeabi_dmul>
 80125ca:	f7ee fadd 	bl	8000b88 <__aeabi_d2iz>
 80125ce:	4680      	mov	r8, r0
 80125d0:	f7ed ffc0 	bl	8000554 <__aeabi_i2d>
 80125d4:	2200      	movs	r2, #0
 80125d6:	4b90      	ldr	r3, [pc, #576]	; (8012818 <__kernel_rem_pio2+0x678>)
 80125d8:	f7ee f826 	bl	8000628 <__aeabi_dmul>
 80125dc:	460b      	mov	r3, r1
 80125de:	4602      	mov	r2, r0
 80125e0:	4639      	mov	r1, r7
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7ed fe68 	bl	80002b8 <__aeabi_dsub>
 80125e8:	f7ee face 	bl	8000b88 <__aeabi_d2iz>
 80125ec:	1c65      	adds	r5, r4, #1
 80125ee:	ab0e      	add	r3, sp, #56	; 0x38
 80125f0:	f10a 0a18 	add.w	sl, sl, #24
 80125f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80125f8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80125fc:	e719      	b.n	8012432 <__kernel_rem_pio2+0x292>
 80125fe:	4630      	mov	r0, r6
 8012600:	4639      	mov	r1, r7
 8012602:	f7ee fac1 	bl	8000b88 <__aeabi_d2iz>
 8012606:	ab0e      	add	r3, sp, #56	; 0x38
 8012608:	4625      	mov	r5, r4
 801260a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801260e:	e710      	b.n	8012432 <__kernel_rem_pio2+0x292>
 8012610:	ab0e      	add	r3, sp, #56	; 0x38
 8012612:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012616:	f7ed ff9d 	bl	8000554 <__aeabi_i2d>
 801261a:	4642      	mov	r2, r8
 801261c:	464b      	mov	r3, r9
 801261e:	f7ee f803 	bl	8000628 <__aeabi_dmul>
 8012622:	2200      	movs	r2, #0
 8012624:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012628:	4b7c      	ldr	r3, [pc, #496]	; (801281c <__kernel_rem_pio2+0x67c>)
 801262a:	4640      	mov	r0, r8
 801262c:	4649      	mov	r1, r9
 801262e:	f7ed fffb 	bl	8000628 <__aeabi_dmul>
 8012632:	3f01      	subs	r7, #1
 8012634:	4680      	mov	r8, r0
 8012636:	4689      	mov	r9, r1
 8012638:	e708      	b.n	801244c <__kernel_rem_pio2+0x2ac>
 801263a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012642:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012646:	f7ed ffef 	bl	8000628 <__aeabi_dmul>
 801264a:	4602      	mov	r2, r0
 801264c:	460b      	mov	r3, r1
 801264e:	4640      	mov	r0, r8
 8012650:	4649      	mov	r1, r9
 8012652:	f7ed fe33 	bl	80002bc <__adddf3>
 8012656:	3701      	adds	r7, #1
 8012658:	4680      	mov	r8, r0
 801265a:	4689      	mov	r9, r1
 801265c:	9b04      	ldr	r3, [sp, #16]
 801265e:	429f      	cmp	r7, r3
 8012660:	dc01      	bgt.n	8012666 <__kernel_rem_pio2+0x4c6>
 8012662:	45ba      	cmp	sl, r7
 8012664:	dae9      	bge.n	801263a <__kernel_rem_pio2+0x49a>
 8012666:	ab4a      	add	r3, sp, #296	; 0x128
 8012668:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801266c:	e9c3 8900 	strd	r8, r9, [r3]
 8012670:	f10a 0a01 	add.w	sl, sl, #1
 8012674:	3e08      	subs	r6, #8
 8012676:	e6f0      	b.n	801245a <__kernel_rem_pio2+0x2ba>
 8012678:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801267a:	2b03      	cmp	r3, #3
 801267c:	d85b      	bhi.n	8012736 <__kernel_rem_pio2+0x596>
 801267e:	e8df f003 	tbb	[pc, r3]
 8012682:	264a      	.short	0x264a
 8012684:	0226      	.short	0x0226
 8012686:	ab9a      	add	r3, sp, #616	; 0x268
 8012688:	441c      	add	r4, r3
 801268a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801268e:	46a2      	mov	sl, r4
 8012690:	46ab      	mov	fp, r5
 8012692:	f1bb 0f00 	cmp.w	fp, #0
 8012696:	dc6c      	bgt.n	8012772 <__kernel_rem_pio2+0x5d2>
 8012698:	46a2      	mov	sl, r4
 801269a:	46ab      	mov	fp, r5
 801269c:	f1bb 0f01 	cmp.w	fp, #1
 80126a0:	f300 8086 	bgt.w	80127b0 <__kernel_rem_pio2+0x610>
 80126a4:	2000      	movs	r0, #0
 80126a6:	2100      	movs	r1, #0
 80126a8:	2d01      	cmp	r5, #1
 80126aa:	f300 80a0 	bgt.w	80127ee <__kernel_rem_pio2+0x64e>
 80126ae:	9b02      	ldr	r3, [sp, #8]
 80126b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80126b4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	f040 809e 	bne.w	80127fa <__kernel_rem_pio2+0x65a>
 80126be:	9b01      	ldr	r3, [sp, #4]
 80126c0:	e9c3 7800 	strd	r7, r8, [r3]
 80126c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80126c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80126cc:	e033      	b.n	8012736 <__kernel_rem_pio2+0x596>
 80126ce:	3408      	adds	r4, #8
 80126d0:	ab4a      	add	r3, sp, #296	; 0x128
 80126d2:	441c      	add	r4, r3
 80126d4:	462e      	mov	r6, r5
 80126d6:	2000      	movs	r0, #0
 80126d8:	2100      	movs	r1, #0
 80126da:	2e00      	cmp	r6, #0
 80126dc:	da3a      	bge.n	8012754 <__kernel_rem_pio2+0x5b4>
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d03d      	beq.n	8012760 <__kernel_rem_pio2+0x5c0>
 80126e4:	4602      	mov	r2, r0
 80126e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126ea:	9c01      	ldr	r4, [sp, #4]
 80126ec:	e9c4 2300 	strd	r2, r3, [r4]
 80126f0:	4602      	mov	r2, r0
 80126f2:	460b      	mov	r3, r1
 80126f4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80126f8:	f7ed fdde 	bl	80002b8 <__aeabi_dsub>
 80126fc:	ae4c      	add	r6, sp, #304	; 0x130
 80126fe:	2401      	movs	r4, #1
 8012700:	42a5      	cmp	r5, r4
 8012702:	da30      	bge.n	8012766 <__kernel_rem_pio2+0x5c6>
 8012704:	9b02      	ldr	r3, [sp, #8]
 8012706:	b113      	cbz	r3, 801270e <__kernel_rem_pio2+0x56e>
 8012708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801270c:	4619      	mov	r1, r3
 801270e:	9b01      	ldr	r3, [sp, #4]
 8012710:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012714:	e00f      	b.n	8012736 <__kernel_rem_pio2+0x596>
 8012716:	ab9a      	add	r3, sp, #616	; 0x268
 8012718:	441c      	add	r4, r3
 801271a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801271e:	2000      	movs	r0, #0
 8012720:	2100      	movs	r1, #0
 8012722:	2d00      	cmp	r5, #0
 8012724:	da10      	bge.n	8012748 <__kernel_rem_pio2+0x5a8>
 8012726:	9b02      	ldr	r3, [sp, #8]
 8012728:	b113      	cbz	r3, 8012730 <__kernel_rem_pio2+0x590>
 801272a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801272e:	4619      	mov	r1, r3
 8012730:	9b01      	ldr	r3, [sp, #4]
 8012732:	e9c3 0100 	strd	r0, r1, [r3]
 8012736:	9b06      	ldr	r3, [sp, #24]
 8012738:	f003 0007 	and.w	r0, r3, #7
 801273c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012740:	ecbd 8b02 	vpop	{d8}
 8012744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012748:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801274c:	f7ed fdb6 	bl	80002bc <__adddf3>
 8012750:	3d01      	subs	r5, #1
 8012752:	e7e6      	b.n	8012722 <__kernel_rem_pio2+0x582>
 8012754:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012758:	f7ed fdb0 	bl	80002bc <__adddf3>
 801275c:	3e01      	subs	r6, #1
 801275e:	e7bc      	b.n	80126da <__kernel_rem_pio2+0x53a>
 8012760:	4602      	mov	r2, r0
 8012762:	460b      	mov	r3, r1
 8012764:	e7c1      	b.n	80126ea <__kernel_rem_pio2+0x54a>
 8012766:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801276a:	f7ed fda7 	bl	80002bc <__adddf3>
 801276e:	3401      	adds	r4, #1
 8012770:	e7c6      	b.n	8012700 <__kernel_rem_pio2+0x560>
 8012772:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012776:	ed3a 7b02 	vldmdb	sl!, {d7}
 801277a:	4640      	mov	r0, r8
 801277c:	ec53 2b17 	vmov	r2, r3, d7
 8012780:	4649      	mov	r1, r9
 8012782:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012786:	f7ed fd99 	bl	80002bc <__adddf3>
 801278a:	4602      	mov	r2, r0
 801278c:	460b      	mov	r3, r1
 801278e:	4606      	mov	r6, r0
 8012790:	460f      	mov	r7, r1
 8012792:	4640      	mov	r0, r8
 8012794:	4649      	mov	r1, r9
 8012796:	f7ed fd8f 	bl	80002b8 <__aeabi_dsub>
 801279a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801279e:	f7ed fd8d 	bl	80002bc <__adddf3>
 80127a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127a6:	e9ca 0100 	strd	r0, r1, [sl]
 80127aa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80127ae:	e770      	b.n	8012692 <__kernel_rem_pio2+0x4f2>
 80127b0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80127b4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80127b8:	4630      	mov	r0, r6
 80127ba:	ec53 2b17 	vmov	r2, r3, d7
 80127be:	4639      	mov	r1, r7
 80127c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80127c4:	f7ed fd7a 	bl	80002bc <__adddf3>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4680      	mov	r8, r0
 80127ce:	4689      	mov	r9, r1
 80127d0:	4630      	mov	r0, r6
 80127d2:	4639      	mov	r1, r7
 80127d4:	f7ed fd70 	bl	80002b8 <__aeabi_dsub>
 80127d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127dc:	f7ed fd6e 	bl	80002bc <__adddf3>
 80127e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127e4:	e9ca 0100 	strd	r0, r1, [sl]
 80127e8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80127ec:	e756      	b.n	801269c <__kernel_rem_pio2+0x4fc>
 80127ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80127f2:	f7ed fd63 	bl	80002bc <__adddf3>
 80127f6:	3d01      	subs	r5, #1
 80127f8:	e756      	b.n	80126a8 <__kernel_rem_pio2+0x508>
 80127fa:	9b01      	ldr	r3, [sp, #4]
 80127fc:	9a01      	ldr	r2, [sp, #4]
 80127fe:	601f      	str	r7, [r3, #0]
 8012800:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012804:	605c      	str	r4, [r3, #4]
 8012806:	609d      	str	r5, [r3, #8]
 8012808:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801280c:	60d3      	str	r3, [r2, #12]
 801280e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012812:	6110      	str	r0, [r2, #16]
 8012814:	6153      	str	r3, [r2, #20]
 8012816:	e78e      	b.n	8012736 <__kernel_rem_pio2+0x596>
 8012818:	41700000 	.word	0x41700000
 801281c:	3e700000 	.word	0x3e700000

08012820 <__kernel_sin>:
 8012820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012824:	ec55 4b10 	vmov	r4, r5, d0
 8012828:	b085      	sub	sp, #20
 801282a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801282e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012832:	ed8d 1b00 	vstr	d1, [sp]
 8012836:	9002      	str	r0, [sp, #8]
 8012838:	da06      	bge.n	8012848 <__kernel_sin+0x28>
 801283a:	ee10 0a10 	vmov	r0, s0
 801283e:	4629      	mov	r1, r5
 8012840:	f7ee f9a2 	bl	8000b88 <__aeabi_d2iz>
 8012844:	2800      	cmp	r0, #0
 8012846:	d051      	beq.n	80128ec <__kernel_sin+0xcc>
 8012848:	4622      	mov	r2, r4
 801284a:	462b      	mov	r3, r5
 801284c:	4620      	mov	r0, r4
 801284e:	4629      	mov	r1, r5
 8012850:	f7ed feea 	bl	8000628 <__aeabi_dmul>
 8012854:	4682      	mov	sl, r0
 8012856:	468b      	mov	fp, r1
 8012858:	4602      	mov	r2, r0
 801285a:	460b      	mov	r3, r1
 801285c:	4620      	mov	r0, r4
 801285e:	4629      	mov	r1, r5
 8012860:	f7ed fee2 	bl	8000628 <__aeabi_dmul>
 8012864:	a341      	add	r3, pc, #260	; (adr r3, 801296c <__kernel_sin+0x14c>)
 8012866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286a:	4680      	mov	r8, r0
 801286c:	4689      	mov	r9, r1
 801286e:	4650      	mov	r0, sl
 8012870:	4659      	mov	r1, fp
 8012872:	f7ed fed9 	bl	8000628 <__aeabi_dmul>
 8012876:	a33f      	add	r3, pc, #252	; (adr r3, 8012974 <__kernel_sin+0x154>)
 8012878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287c:	f7ed fd1c 	bl	80002b8 <__aeabi_dsub>
 8012880:	4652      	mov	r2, sl
 8012882:	465b      	mov	r3, fp
 8012884:	f7ed fed0 	bl	8000628 <__aeabi_dmul>
 8012888:	a33c      	add	r3, pc, #240	; (adr r3, 801297c <__kernel_sin+0x15c>)
 801288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288e:	f7ed fd15 	bl	80002bc <__adddf3>
 8012892:	4652      	mov	r2, sl
 8012894:	465b      	mov	r3, fp
 8012896:	f7ed fec7 	bl	8000628 <__aeabi_dmul>
 801289a:	a33a      	add	r3, pc, #232	; (adr r3, 8012984 <__kernel_sin+0x164>)
 801289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a0:	f7ed fd0a 	bl	80002b8 <__aeabi_dsub>
 80128a4:	4652      	mov	r2, sl
 80128a6:	465b      	mov	r3, fp
 80128a8:	f7ed febe 	bl	8000628 <__aeabi_dmul>
 80128ac:	a337      	add	r3, pc, #220	; (adr r3, 801298c <__kernel_sin+0x16c>)
 80128ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b2:	f7ed fd03 	bl	80002bc <__adddf3>
 80128b6:	9b02      	ldr	r3, [sp, #8]
 80128b8:	4606      	mov	r6, r0
 80128ba:	460f      	mov	r7, r1
 80128bc:	b9db      	cbnz	r3, 80128f6 <__kernel_sin+0xd6>
 80128be:	4602      	mov	r2, r0
 80128c0:	460b      	mov	r3, r1
 80128c2:	4650      	mov	r0, sl
 80128c4:	4659      	mov	r1, fp
 80128c6:	f7ed feaf 	bl	8000628 <__aeabi_dmul>
 80128ca:	a325      	add	r3, pc, #148	; (adr r3, 8012960 <__kernel_sin+0x140>)
 80128cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d0:	f7ed fcf2 	bl	80002b8 <__aeabi_dsub>
 80128d4:	4642      	mov	r2, r8
 80128d6:	464b      	mov	r3, r9
 80128d8:	f7ed fea6 	bl	8000628 <__aeabi_dmul>
 80128dc:	4602      	mov	r2, r0
 80128de:	460b      	mov	r3, r1
 80128e0:	4620      	mov	r0, r4
 80128e2:	4629      	mov	r1, r5
 80128e4:	f7ed fcea 	bl	80002bc <__adddf3>
 80128e8:	4604      	mov	r4, r0
 80128ea:	460d      	mov	r5, r1
 80128ec:	ec45 4b10 	vmov	d0, r4, r5
 80128f0:	b005      	add	sp, #20
 80128f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f6:	2200      	movs	r2, #0
 80128f8:	4b1b      	ldr	r3, [pc, #108]	; (8012968 <__kernel_sin+0x148>)
 80128fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128fe:	f7ed fe93 	bl	8000628 <__aeabi_dmul>
 8012902:	4632      	mov	r2, r6
 8012904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012908:	463b      	mov	r3, r7
 801290a:	4640      	mov	r0, r8
 801290c:	4649      	mov	r1, r9
 801290e:	f7ed fe8b 	bl	8000628 <__aeabi_dmul>
 8012912:	4602      	mov	r2, r0
 8012914:	460b      	mov	r3, r1
 8012916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801291a:	f7ed fccd 	bl	80002b8 <__aeabi_dsub>
 801291e:	4652      	mov	r2, sl
 8012920:	465b      	mov	r3, fp
 8012922:	f7ed fe81 	bl	8000628 <__aeabi_dmul>
 8012926:	e9dd 2300 	ldrd	r2, r3, [sp]
 801292a:	f7ed fcc5 	bl	80002b8 <__aeabi_dsub>
 801292e:	a30c      	add	r3, pc, #48	; (adr r3, 8012960 <__kernel_sin+0x140>)
 8012930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	4640      	mov	r0, r8
 801293a:	4649      	mov	r1, r9
 801293c:	f7ed fe74 	bl	8000628 <__aeabi_dmul>
 8012940:	4602      	mov	r2, r0
 8012942:	460b      	mov	r3, r1
 8012944:	4630      	mov	r0, r6
 8012946:	4639      	mov	r1, r7
 8012948:	f7ed fcb8 	bl	80002bc <__adddf3>
 801294c:	4602      	mov	r2, r0
 801294e:	460b      	mov	r3, r1
 8012950:	4620      	mov	r0, r4
 8012952:	4629      	mov	r1, r5
 8012954:	f7ed fcb0 	bl	80002b8 <__aeabi_dsub>
 8012958:	e7c6      	b.n	80128e8 <__kernel_sin+0xc8>
 801295a:	bf00      	nop
 801295c:	f3af 8000 	nop.w
 8012960:	55555549 	.word	0x55555549
 8012964:	3fc55555 	.word	0x3fc55555
 8012968:	3fe00000 	.word	0x3fe00000
 801296c:	5acfd57c 	.word	0x5acfd57c
 8012970:	3de5d93a 	.word	0x3de5d93a
 8012974:	8a2b9ceb 	.word	0x8a2b9ceb
 8012978:	3e5ae5e6 	.word	0x3e5ae5e6
 801297c:	57b1fe7d 	.word	0x57b1fe7d
 8012980:	3ec71de3 	.word	0x3ec71de3
 8012984:	19c161d5 	.word	0x19c161d5
 8012988:	3f2a01a0 	.word	0x3f2a01a0
 801298c:	1110f8a6 	.word	0x1110f8a6
 8012990:	3f811111 	.word	0x3f811111

08012994 <fabs>:
 8012994:	ec51 0b10 	vmov	r0, r1, d0
 8012998:	ee10 2a10 	vmov	r2, s0
 801299c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129a0:	ec43 2b10 	vmov	d0, r2, r3
 80129a4:	4770      	bx	lr
	...

080129a8 <floor>:
 80129a8:	ec51 0b10 	vmov	r0, r1, d0
 80129ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80129b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80129b8:	2e13      	cmp	r6, #19
 80129ba:	460c      	mov	r4, r1
 80129bc:	ee10 5a10 	vmov	r5, s0
 80129c0:	4680      	mov	r8, r0
 80129c2:	dc34      	bgt.n	8012a2e <floor+0x86>
 80129c4:	2e00      	cmp	r6, #0
 80129c6:	da16      	bge.n	80129f6 <floor+0x4e>
 80129c8:	a335      	add	r3, pc, #212	; (adr r3, 8012aa0 <floor+0xf8>)
 80129ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ce:	f7ed fc75 	bl	80002bc <__adddf3>
 80129d2:	2200      	movs	r2, #0
 80129d4:	2300      	movs	r3, #0
 80129d6:	f7ee f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 80129da:	b148      	cbz	r0, 80129f0 <floor+0x48>
 80129dc:	2c00      	cmp	r4, #0
 80129de:	da59      	bge.n	8012a94 <floor+0xec>
 80129e0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129e4:	4a30      	ldr	r2, [pc, #192]	; (8012aa8 <floor+0x100>)
 80129e6:	432b      	orrs	r3, r5
 80129e8:	2500      	movs	r5, #0
 80129ea:	42ab      	cmp	r3, r5
 80129ec:	bf18      	it	ne
 80129ee:	4614      	movne	r4, r2
 80129f0:	4621      	mov	r1, r4
 80129f2:	4628      	mov	r0, r5
 80129f4:	e025      	b.n	8012a42 <floor+0x9a>
 80129f6:	4f2d      	ldr	r7, [pc, #180]	; (8012aac <floor+0x104>)
 80129f8:	4137      	asrs	r7, r6
 80129fa:	ea01 0307 	and.w	r3, r1, r7
 80129fe:	4303      	orrs	r3, r0
 8012a00:	d01f      	beq.n	8012a42 <floor+0x9a>
 8012a02:	a327      	add	r3, pc, #156	; (adr r3, 8012aa0 <floor+0xf8>)
 8012a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a08:	f7ed fc58 	bl	80002bc <__adddf3>
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	2300      	movs	r3, #0
 8012a10:	f7ee f89a 	bl	8000b48 <__aeabi_dcmpgt>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d0eb      	beq.n	80129f0 <floor+0x48>
 8012a18:	2c00      	cmp	r4, #0
 8012a1a:	bfbe      	ittt	lt
 8012a1c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012a20:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a24:	19a4      	addlt	r4, r4, r6
 8012a26:	ea24 0407 	bic.w	r4, r4, r7
 8012a2a:	2500      	movs	r5, #0
 8012a2c:	e7e0      	b.n	80129f0 <floor+0x48>
 8012a2e:	2e33      	cmp	r6, #51	; 0x33
 8012a30:	dd0b      	ble.n	8012a4a <floor+0xa2>
 8012a32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a36:	d104      	bne.n	8012a42 <floor+0x9a>
 8012a38:	ee10 2a10 	vmov	r2, s0
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	f7ed fc3d 	bl	80002bc <__adddf3>
 8012a42:	ec41 0b10 	vmov	d0, r0, r1
 8012a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a4a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a52:	fa23 f707 	lsr.w	r7, r3, r7
 8012a56:	4207      	tst	r7, r0
 8012a58:	d0f3      	beq.n	8012a42 <floor+0x9a>
 8012a5a:	a311      	add	r3, pc, #68	; (adr r3, 8012aa0 <floor+0xf8>)
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	f7ed fc2c 	bl	80002bc <__adddf3>
 8012a64:	2200      	movs	r2, #0
 8012a66:	2300      	movs	r3, #0
 8012a68:	f7ee f86e 	bl	8000b48 <__aeabi_dcmpgt>
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	d0bf      	beq.n	80129f0 <floor+0x48>
 8012a70:	2c00      	cmp	r4, #0
 8012a72:	da02      	bge.n	8012a7a <floor+0xd2>
 8012a74:	2e14      	cmp	r6, #20
 8012a76:	d103      	bne.n	8012a80 <floor+0xd8>
 8012a78:	3401      	adds	r4, #1
 8012a7a:	ea25 0507 	bic.w	r5, r5, r7
 8012a7e:	e7b7      	b.n	80129f0 <floor+0x48>
 8012a80:	2301      	movs	r3, #1
 8012a82:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a86:	fa03 f606 	lsl.w	r6, r3, r6
 8012a8a:	4435      	add	r5, r6
 8012a8c:	4545      	cmp	r5, r8
 8012a8e:	bf38      	it	cc
 8012a90:	18e4      	addcc	r4, r4, r3
 8012a92:	e7f2      	b.n	8012a7a <floor+0xd2>
 8012a94:	2500      	movs	r5, #0
 8012a96:	462c      	mov	r4, r5
 8012a98:	e7aa      	b.n	80129f0 <floor+0x48>
 8012a9a:	bf00      	nop
 8012a9c:	f3af 8000 	nop.w
 8012aa0:	8800759c 	.word	0x8800759c
 8012aa4:	7e37e43c 	.word	0x7e37e43c
 8012aa8:	bff00000 	.word	0xbff00000
 8012aac:	000fffff 	.word	0x000fffff

08012ab0 <scalbn>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	ec55 4b10 	vmov	r4, r5, d0
 8012ab6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012aba:	4606      	mov	r6, r0
 8012abc:	462b      	mov	r3, r5
 8012abe:	b9aa      	cbnz	r2, 8012aec <scalbn+0x3c>
 8012ac0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012ac4:	4323      	orrs	r3, r4
 8012ac6:	d03b      	beq.n	8012b40 <scalbn+0x90>
 8012ac8:	4b31      	ldr	r3, [pc, #196]	; (8012b90 <scalbn+0xe0>)
 8012aca:	4629      	mov	r1, r5
 8012acc:	2200      	movs	r2, #0
 8012ace:	ee10 0a10 	vmov	r0, s0
 8012ad2:	f7ed fda9 	bl	8000628 <__aeabi_dmul>
 8012ad6:	4b2f      	ldr	r3, [pc, #188]	; (8012b94 <scalbn+0xe4>)
 8012ad8:	429e      	cmp	r6, r3
 8012ada:	4604      	mov	r4, r0
 8012adc:	460d      	mov	r5, r1
 8012ade:	da12      	bge.n	8012b06 <scalbn+0x56>
 8012ae0:	a327      	add	r3, pc, #156	; (adr r3, 8012b80 <scalbn+0xd0>)
 8012ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae6:	f7ed fd9f 	bl	8000628 <__aeabi_dmul>
 8012aea:	e009      	b.n	8012b00 <scalbn+0x50>
 8012aec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012af0:	428a      	cmp	r2, r1
 8012af2:	d10c      	bne.n	8012b0e <scalbn+0x5e>
 8012af4:	ee10 2a10 	vmov	r2, s0
 8012af8:	4620      	mov	r0, r4
 8012afa:	4629      	mov	r1, r5
 8012afc:	f7ed fbde 	bl	80002bc <__adddf3>
 8012b00:	4604      	mov	r4, r0
 8012b02:	460d      	mov	r5, r1
 8012b04:	e01c      	b.n	8012b40 <scalbn+0x90>
 8012b06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	3a36      	subs	r2, #54	; 0x36
 8012b0e:	4432      	add	r2, r6
 8012b10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012b14:	428a      	cmp	r2, r1
 8012b16:	dd0b      	ble.n	8012b30 <scalbn+0x80>
 8012b18:	ec45 4b11 	vmov	d1, r4, r5
 8012b1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012b88 <scalbn+0xd8>
 8012b20:	f000 f83c 	bl	8012b9c <copysign>
 8012b24:	a318      	add	r3, pc, #96	; (adr r3, 8012b88 <scalbn+0xd8>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	ec51 0b10 	vmov	r0, r1, d0
 8012b2e:	e7da      	b.n	8012ae6 <scalbn+0x36>
 8012b30:	2a00      	cmp	r2, #0
 8012b32:	dd08      	ble.n	8012b46 <scalbn+0x96>
 8012b34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b40:	ec45 4b10 	vmov	d0, r4, r5
 8012b44:	bd70      	pop	{r4, r5, r6, pc}
 8012b46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b4a:	da0d      	bge.n	8012b68 <scalbn+0xb8>
 8012b4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b50:	429e      	cmp	r6, r3
 8012b52:	ec45 4b11 	vmov	d1, r4, r5
 8012b56:	dce1      	bgt.n	8012b1c <scalbn+0x6c>
 8012b58:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012b80 <scalbn+0xd0>
 8012b5c:	f000 f81e 	bl	8012b9c <copysign>
 8012b60:	a307      	add	r3, pc, #28	; (adr r3, 8012b80 <scalbn+0xd0>)
 8012b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b66:	e7e0      	b.n	8012b2a <scalbn+0x7a>
 8012b68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b6c:	3236      	adds	r2, #54	; 0x36
 8012b6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b76:	4620      	mov	r0, r4
 8012b78:	4629      	mov	r1, r5
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	4b06      	ldr	r3, [pc, #24]	; (8012b98 <scalbn+0xe8>)
 8012b7e:	e7b2      	b.n	8012ae6 <scalbn+0x36>
 8012b80:	c2f8f359 	.word	0xc2f8f359
 8012b84:	01a56e1f 	.word	0x01a56e1f
 8012b88:	8800759c 	.word	0x8800759c
 8012b8c:	7e37e43c 	.word	0x7e37e43c
 8012b90:	43500000 	.word	0x43500000
 8012b94:	ffff3cb0 	.word	0xffff3cb0
 8012b98:	3c900000 	.word	0x3c900000

08012b9c <copysign>:
 8012b9c:	ec51 0b10 	vmov	r0, r1, d0
 8012ba0:	ee11 0a90 	vmov	r0, s3
 8012ba4:	ee10 2a10 	vmov	r2, s0
 8012ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012bac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012bb0:	ea41 0300 	orr.w	r3, r1, r0
 8012bb4:	ec43 2b10 	vmov	d0, r2, r3
 8012bb8:	4770      	bx	lr
	...

08012bbc <__errno>:
 8012bbc:	4b01      	ldr	r3, [pc, #4]	; (8012bc4 <__errno+0x8>)
 8012bbe:	6818      	ldr	r0, [r3, #0]
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	2000000c 	.word	0x2000000c

08012bc8 <__libc_init_array>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	4e0d      	ldr	r6, [pc, #52]	; (8012c00 <__libc_init_array+0x38>)
 8012bcc:	4c0d      	ldr	r4, [pc, #52]	; (8012c04 <__libc_init_array+0x3c>)
 8012bce:	1ba4      	subs	r4, r4, r6
 8012bd0:	10a4      	asrs	r4, r4, #2
 8012bd2:	2500      	movs	r5, #0
 8012bd4:	42a5      	cmp	r5, r4
 8012bd6:	d109      	bne.n	8012bec <__libc_init_array+0x24>
 8012bd8:	4e0b      	ldr	r6, [pc, #44]	; (8012c08 <__libc_init_array+0x40>)
 8012bda:	4c0c      	ldr	r4, [pc, #48]	; (8012c0c <__libc_init_array+0x44>)
 8012bdc:	f004 ff38 	bl	8017a50 <_init>
 8012be0:	1ba4      	subs	r4, r4, r6
 8012be2:	10a4      	asrs	r4, r4, #2
 8012be4:	2500      	movs	r5, #0
 8012be6:	42a5      	cmp	r5, r4
 8012be8:	d105      	bne.n	8012bf6 <__libc_init_array+0x2e>
 8012bea:	bd70      	pop	{r4, r5, r6, pc}
 8012bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012bf0:	4798      	blx	r3
 8012bf2:	3501      	adds	r5, #1
 8012bf4:	e7ee      	b.n	8012bd4 <__libc_init_array+0xc>
 8012bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012bfa:	4798      	blx	r3
 8012bfc:	3501      	adds	r5, #1
 8012bfe:	e7f2      	b.n	8012be6 <__libc_init_array+0x1e>
 8012c00:	08018564 	.word	0x08018564
 8012c04:	08018564 	.word	0x08018564
 8012c08:	08018564 	.word	0x08018564
 8012c0c:	0801856c 	.word	0x0801856c

08012c10 <memcpy>:
 8012c10:	b510      	push	{r4, lr}
 8012c12:	1e43      	subs	r3, r0, #1
 8012c14:	440a      	add	r2, r1
 8012c16:	4291      	cmp	r1, r2
 8012c18:	d100      	bne.n	8012c1c <memcpy+0xc>
 8012c1a:	bd10      	pop	{r4, pc}
 8012c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c24:	e7f7      	b.n	8012c16 <memcpy+0x6>

08012c26 <memset>:
 8012c26:	4402      	add	r2, r0
 8012c28:	4603      	mov	r3, r0
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d100      	bne.n	8012c30 <memset+0xa>
 8012c2e:	4770      	bx	lr
 8012c30:	f803 1b01 	strb.w	r1, [r3], #1
 8012c34:	e7f9      	b.n	8012c2a <memset+0x4>

08012c36 <__cvt>:
 8012c36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c3a:	ec55 4b10 	vmov	r4, r5, d0
 8012c3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012c40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012c44:	2d00      	cmp	r5, #0
 8012c46:	460e      	mov	r6, r1
 8012c48:	4691      	mov	r9, r2
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	bfb8      	it	lt
 8012c4e:	4622      	movlt	r2, r4
 8012c50:	462b      	mov	r3, r5
 8012c52:	f027 0720 	bic.w	r7, r7, #32
 8012c56:	bfbb      	ittet	lt
 8012c58:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012c5c:	461d      	movlt	r5, r3
 8012c5e:	2300      	movge	r3, #0
 8012c60:	232d      	movlt	r3, #45	; 0x2d
 8012c62:	bfb8      	it	lt
 8012c64:	4614      	movlt	r4, r2
 8012c66:	2f46      	cmp	r7, #70	; 0x46
 8012c68:	700b      	strb	r3, [r1, #0]
 8012c6a:	d004      	beq.n	8012c76 <__cvt+0x40>
 8012c6c:	2f45      	cmp	r7, #69	; 0x45
 8012c6e:	d100      	bne.n	8012c72 <__cvt+0x3c>
 8012c70:	3601      	adds	r6, #1
 8012c72:	2102      	movs	r1, #2
 8012c74:	e000      	b.n	8012c78 <__cvt+0x42>
 8012c76:	2103      	movs	r1, #3
 8012c78:	ab03      	add	r3, sp, #12
 8012c7a:	9301      	str	r3, [sp, #4]
 8012c7c:	ab02      	add	r3, sp, #8
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	4632      	mov	r2, r6
 8012c82:	4653      	mov	r3, sl
 8012c84:	ec45 4b10 	vmov	d0, r4, r5
 8012c88:	f001 ffb2 	bl	8014bf0 <_dtoa_r>
 8012c8c:	2f47      	cmp	r7, #71	; 0x47
 8012c8e:	4680      	mov	r8, r0
 8012c90:	d102      	bne.n	8012c98 <__cvt+0x62>
 8012c92:	f019 0f01 	tst.w	r9, #1
 8012c96:	d026      	beq.n	8012ce6 <__cvt+0xb0>
 8012c98:	2f46      	cmp	r7, #70	; 0x46
 8012c9a:	eb08 0906 	add.w	r9, r8, r6
 8012c9e:	d111      	bne.n	8012cc4 <__cvt+0x8e>
 8012ca0:	f898 3000 	ldrb.w	r3, [r8]
 8012ca4:	2b30      	cmp	r3, #48	; 0x30
 8012ca6:	d10a      	bne.n	8012cbe <__cvt+0x88>
 8012ca8:	2200      	movs	r2, #0
 8012caa:	2300      	movs	r3, #0
 8012cac:	4620      	mov	r0, r4
 8012cae:	4629      	mov	r1, r5
 8012cb0:	f7ed ff22 	bl	8000af8 <__aeabi_dcmpeq>
 8012cb4:	b918      	cbnz	r0, 8012cbe <__cvt+0x88>
 8012cb6:	f1c6 0601 	rsb	r6, r6, #1
 8012cba:	f8ca 6000 	str.w	r6, [sl]
 8012cbe:	f8da 3000 	ldr.w	r3, [sl]
 8012cc2:	4499      	add	r9, r3
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	4620      	mov	r0, r4
 8012cca:	4629      	mov	r1, r5
 8012ccc:	f7ed ff14 	bl	8000af8 <__aeabi_dcmpeq>
 8012cd0:	b938      	cbnz	r0, 8012ce2 <__cvt+0xac>
 8012cd2:	2230      	movs	r2, #48	; 0x30
 8012cd4:	9b03      	ldr	r3, [sp, #12]
 8012cd6:	454b      	cmp	r3, r9
 8012cd8:	d205      	bcs.n	8012ce6 <__cvt+0xb0>
 8012cda:	1c59      	adds	r1, r3, #1
 8012cdc:	9103      	str	r1, [sp, #12]
 8012cde:	701a      	strb	r2, [r3, #0]
 8012ce0:	e7f8      	b.n	8012cd4 <__cvt+0x9e>
 8012ce2:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ce6:	9b03      	ldr	r3, [sp, #12]
 8012ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012cea:	eba3 0308 	sub.w	r3, r3, r8
 8012cee:	4640      	mov	r0, r8
 8012cf0:	6013      	str	r3, [r2, #0]
 8012cf2:	b004      	add	sp, #16
 8012cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012cf8 <__exponent>:
 8012cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cfa:	2900      	cmp	r1, #0
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	bfba      	itte	lt
 8012d00:	4249      	neglt	r1, r1
 8012d02:	232d      	movlt	r3, #45	; 0x2d
 8012d04:	232b      	movge	r3, #43	; 0x2b
 8012d06:	2909      	cmp	r1, #9
 8012d08:	f804 2b02 	strb.w	r2, [r4], #2
 8012d0c:	7043      	strb	r3, [r0, #1]
 8012d0e:	dd20      	ble.n	8012d52 <__exponent+0x5a>
 8012d10:	f10d 0307 	add.w	r3, sp, #7
 8012d14:	461f      	mov	r7, r3
 8012d16:	260a      	movs	r6, #10
 8012d18:	fb91 f5f6 	sdiv	r5, r1, r6
 8012d1c:	fb06 1115 	mls	r1, r6, r5, r1
 8012d20:	3130      	adds	r1, #48	; 0x30
 8012d22:	2d09      	cmp	r5, #9
 8012d24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012d28:	f103 32ff 	add.w	r2, r3, #4294967295
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	dc09      	bgt.n	8012d44 <__exponent+0x4c>
 8012d30:	3130      	adds	r1, #48	; 0x30
 8012d32:	3b02      	subs	r3, #2
 8012d34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012d38:	42bb      	cmp	r3, r7
 8012d3a:	4622      	mov	r2, r4
 8012d3c:	d304      	bcc.n	8012d48 <__exponent+0x50>
 8012d3e:	1a10      	subs	r0, r2, r0
 8012d40:	b003      	add	sp, #12
 8012d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d44:	4613      	mov	r3, r2
 8012d46:	e7e7      	b.n	8012d18 <__exponent+0x20>
 8012d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d4c:	f804 2b01 	strb.w	r2, [r4], #1
 8012d50:	e7f2      	b.n	8012d38 <__exponent+0x40>
 8012d52:	2330      	movs	r3, #48	; 0x30
 8012d54:	4419      	add	r1, r3
 8012d56:	7083      	strb	r3, [r0, #2]
 8012d58:	1d02      	adds	r2, r0, #4
 8012d5a:	70c1      	strb	r1, [r0, #3]
 8012d5c:	e7ef      	b.n	8012d3e <__exponent+0x46>
	...

08012d60 <_printf_float>:
 8012d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d64:	b08d      	sub	sp, #52	; 0x34
 8012d66:	460c      	mov	r4, r1
 8012d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012d6c:	4616      	mov	r6, r2
 8012d6e:	461f      	mov	r7, r3
 8012d70:	4605      	mov	r5, r0
 8012d72:	f003 f9a9 	bl	80160c8 <_localeconv_r>
 8012d76:	6803      	ldr	r3, [r0, #0]
 8012d78:	9304      	str	r3, [sp, #16]
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7ed fa40 	bl	8000200 <strlen>
 8012d80:	2300      	movs	r3, #0
 8012d82:	930a      	str	r3, [sp, #40]	; 0x28
 8012d84:	f8d8 3000 	ldr.w	r3, [r8]
 8012d88:	9005      	str	r0, [sp, #20]
 8012d8a:	3307      	adds	r3, #7
 8012d8c:	f023 0307 	bic.w	r3, r3, #7
 8012d90:	f103 0208 	add.w	r2, r3, #8
 8012d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012d98:	f8d4 b000 	ldr.w	fp, [r4]
 8012d9c:	f8c8 2000 	str.w	r2, [r8]
 8012da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012da8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012dac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012db0:	9307      	str	r3, [sp, #28]
 8012db2:	f8cd 8018 	str.w	r8, [sp, #24]
 8012db6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dba:	4ba7      	ldr	r3, [pc, #668]	; (8013058 <_printf_float+0x2f8>)
 8012dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dc0:	f7ed fecc 	bl	8000b5c <__aeabi_dcmpun>
 8012dc4:	bb70      	cbnz	r0, 8012e24 <_printf_float+0xc4>
 8012dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dca:	4ba3      	ldr	r3, [pc, #652]	; (8013058 <_printf_float+0x2f8>)
 8012dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dd0:	f7ed fea6 	bl	8000b20 <__aeabi_dcmple>
 8012dd4:	bb30      	cbnz	r0, 8012e24 <_printf_float+0xc4>
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	2300      	movs	r3, #0
 8012dda:	4640      	mov	r0, r8
 8012ddc:	4649      	mov	r1, r9
 8012dde:	f7ed fe95 	bl	8000b0c <__aeabi_dcmplt>
 8012de2:	b110      	cbz	r0, 8012dea <_printf_float+0x8a>
 8012de4:	232d      	movs	r3, #45	; 0x2d
 8012de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012dea:	4a9c      	ldr	r2, [pc, #624]	; (801305c <_printf_float+0x2fc>)
 8012dec:	4b9c      	ldr	r3, [pc, #624]	; (8013060 <_printf_float+0x300>)
 8012dee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012df2:	bf8c      	ite	hi
 8012df4:	4690      	movhi	r8, r2
 8012df6:	4698      	movls	r8, r3
 8012df8:	2303      	movs	r3, #3
 8012dfa:	f02b 0204 	bic.w	r2, fp, #4
 8012dfe:	6123      	str	r3, [r4, #16]
 8012e00:	6022      	str	r2, [r4, #0]
 8012e02:	f04f 0900 	mov.w	r9, #0
 8012e06:	9700      	str	r7, [sp, #0]
 8012e08:	4633      	mov	r3, r6
 8012e0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012e0c:	4621      	mov	r1, r4
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f000 f9e6 	bl	80131e0 <_printf_common>
 8012e14:	3001      	adds	r0, #1
 8012e16:	f040 808d 	bne.w	8012f34 <_printf_float+0x1d4>
 8012e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012e1e:	b00d      	add	sp, #52	; 0x34
 8012e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e24:	4642      	mov	r2, r8
 8012e26:	464b      	mov	r3, r9
 8012e28:	4640      	mov	r0, r8
 8012e2a:	4649      	mov	r1, r9
 8012e2c:	f7ed fe96 	bl	8000b5c <__aeabi_dcmpun>
 8012e30:	b110      	cbz	r0, 8012e38 <_printf_float+0xd8>
 8012e32:	4a8c      	ldr	r2, [pc, #560]	; (8013064 <_printf_float+0x304>)
 8012e34:	4b8c      	ldr	r3, [pc, #560]	; (8013068 <_printf_float+0x308>)
 8012e36:	e7da      	b.n	8012dee <_printf_float+0x8e>
 8012e38:	6861      	ldr	r1, [r4, #4]
 8012e3a:	1c4b      	adds	r3, r1, #1
 8012e3c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012e40:	a80a      	add	r0, sp, #40	; 0x28
 8012e42:	d13e      	bne.n	8012ec2 <_printf_float+0x162>
 8012e44:	2306      	movs	r3, #6
 8012e46:	6063      	str	r3, [r4, #4]
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012e4e:	ab09      	add	r3, sp, #36	; 0x24
 8012e50:	9300      	str	r3, [sp, #0]
 8012e52:	ec49 8b10 	vmov	d0, r8, r9
 8012e56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012e5a:	6022      	str	r2, [r4, #0]
 8012e5c:	f8cd a004 	str.w	sl, [sp, #4]
 8012e60:	6861      	ldr	r1, [r4, #4]
 8012e62:	4628      	mov	r0, r5
 8012e64:	f7ff fee7 	bl	8012c36 <__cvt>
 8012e68:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012e6c:	2b47      	cmp	r3, #71	; 0x47
 8012e6e:	4680      	mov	r8, r0
 8012e70:	d109      	bne.n	8012e86 <_printf_float+0x126>
 8012e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e74:	1cd8      	adds	r0, r3, #3
 8012e76:	db02      	blt.n	8012e7e <_printf_float+0x11e>
 8012e78:	6862      	ldr	r2, [r4, #4]
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	dd47      	ble.n	8012f0e <_printf_float+0x1ae>
 8012e7e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012e82:	fa5f fa8a 	uxtb.w	sl, sl
 8012e86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e8c:	d824      	bhi.n	8012ed8 <_printf_float+0x178>
 8012e8e:	3901      	subs	r1, #1
 8012e90:	4652      	mov	r2, sl
 8012e92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e96:	9109      	str	r1, [sp, #36]	; 0x24
 8012e98:	f7ff ff2e 	bl	8012cf8 <__exponent>
 8012e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e9e:	1813      	adds	r3, r2, r0
 8012ea0:	2a01      	cmp	r2, #1
 8012ea2:	4681      	mov	r9, r0
 8012ea4:	6123      	str	r3, [r4, #16]
 8012ea6:	dc02      	bgt.n	8012eae <_printf_float+0x14e>
 8012ea8:	6822      	ldr	r2, [r4, #0]
 8012eaa:	07d1      	lsls	r1, r2, #31
 8012eac:	d501      	bpl.n	8012eb2 <_printf_float+0x152>
 8012eae:	3301      	adds	r3, #1
 8012eb0:	6123      	str	r3, [r4, #16]
 8012eb2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d0a5      	beq.n	8012e06 <_printf_float+0xa6>
 8012eba:	232d      	movs	r3, #45	; 0x2d
 8012ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ec0:	e7a1      	b.n	8012e06 <_printf_float+0xa6>
 8012ec2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012ec6:	f000 8177 	beq.w	80131b8 <_printf_float+0x458>
 8012eca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012ece:	d1bb      	bne.n	8012e48 <_printf_float+0xe8>
 8012ed0:	2900      	cmp	r1, #0
 8012ed2:	d1b9      	bne.n	8012e48 <_printf_float+0xe8>
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	e7b6      	b.n	8012e46 <_printf_float+0xe6>
 8012ed8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012edc:	d119      	bne.n	8012f12 <_printf_float+0x1b2>
 8012ede:	2900      	cmp	r1, #0
 8012ee0:	6863      	ldr	r3, [r4, #4]
 8012ee2:	dd0c      	ble.n	8012efe <_printf_float+0x19e>
 8012ee4:	6121      	str	r1, [r4, #16]
 8012ee6:	b913      	cbnz	r3, 8012eee <_printf_float+0x18e>
 8012ee8:	6822      	ldr	r2, [r4, #0]
 8012eea:	07d2      	lsls	r2, r2, #31
 8012eec:	d502      	bpl.n	8012ef4 <_printf_float+0x194>
 8012eee:	3301      	adds	r3, #1
 8012ef0:	440b      	add	r3, r1
 8012ef2:	6123      	str	r3, [r4, #16]
 8012ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ef6:	65a3      	str	r3, [r4, #88]	; 0x58
 8012ef8:	f04f 0900 	mov.w	r9, #0
 8012efc:	e7d9      	b.n	8012eb2 <_printf_float+0x152>
 8012efe:	b913      	cbnz	r3, 8012f06 <_printf_float+0x1a6>
 8012f00:	6822      	ldr	r2, [r4, #0]
 8012f02:	07d0      	lsls	r0, r2, #31
 8012f04:	d501      	bpl.n	8012f0a <_printf_float+0x1aa>
 8012f06:	3302      	adds	r3, #2
 8012f08:	e7f3      	b.n	8012ef2 <_printf_float+0x192>
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e7f1      	b.n	8012ef2 <_printf_float+0x192>
 8012f0e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012f12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012f16:	4293      	cmp	r3, r2
 8012f18:	db05      	blt.n	8012f26 <_printf_float+0x1c6>
 8012f1a:	6822      	ldr	r2, [r4, #0]
 8012f1c:	6123      	str	r3, [r4, #16]
 8012f1e:	07d1      	lsls	r1, r2, #31
 8012f20:	d5e8      	bpl.n	8012ef4 <_printf_float+0x194>
 8012f22:	3301      	adds	r3, #1
 8012f24:	e7e5      	b.n	8012ef2 <_printf_float+0x192>
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	bfd4      	ite	le
 8012f2a:	f1c3 0302 	rsble	r3, r3, #2
 8012f2e:	2301      	movgt	r3, #1
 8012f30:	4413      	add	r3, r2
 8012f32:	e7de      	b.n	8012ef2 <_printf_float+0x192>
 8012f34:	6823      	ldr	r3, [r4, #0]
 8012f36:	055a      	lsls	r2, r3, #21
 8012f38:	d407      	bmi.n	8012f4a <_printf_float+0x1ea>
 8012f3a:	6923      	ldr	r3, [r4, #16]
 8012f3c:	4642      	mov	r2, r8
 8012f3e:	4631      	mov	r1, r6
 8012f40:	4628      	mov	r0, r5
 8012f42:	47b8      	blx	r7
 8012f44:	3001      	adds	r0, #1
 8012f46:	d12b      	bne.n	8012fa0 <_printf_float+0x240>
 8012f48:	e767      	b.n	8012e1a <_printf_float+0xba>
 8012f4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012f4e:	f240 80dc 	bls.w	801310a <_printf_float+0x3aa>
 8012f52:	2200      	movs	r2, #0
 8012f54:	2300      	movs	r3, #0
 8012f56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f5a:	f7ed fdcd 	bl	8000af8 <__aeabi_dcmpeq>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d033      	beq.n	8012fca <_printf_float+0x26a>
 8012f62:	2301      	movs	r3, #1
 8012f64:	4a41      	ldr	r2, [pc, #260]	; (801306c <_printf_float+0x30c>)
 8012f66:	4631      	mov	r1, r6
 8012f68:	4628      	mov	r0, r5
 8012f6a:	47b8      	blx	r7
 8012f6c:	3001      	adds	r0, #1
 8012f6e:	f43f af54 	beq.w	8012e1a <_printf_float+0xba>
 8012f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f76:	429a      	cmp	r2, r3
 8012f78:	db02      	blt.n	8012f80 <_printf_float+0x220>
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	07d8      	lsls	r0, r3, #31
 8012f7e:	d50f      	bpl.n	8012fa0 <_printf_float+0x240>
 8012f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	47b8      	blx	r7
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	f43f af45 	beq.w	8012e1a <_printf_float+0xba>
 8012f90:	f04f 0800 	mov.w	r8, #0
 8012f94:	f104 091a 	add.w	r9, r4, #26
 8012f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	4543      	cmp	r3, r8
 8012f9e:	dc09      	bgt.n	8012fb4 <_printf_float+0x254>
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	079b      	lsls	r3, r3, #30
 8012fa4:	f100 8103 	bmi.w	80131ae <_printf_float+0x44e>
 8012fa8:	68e0      	ldr	r0, [r4, #12]
 8012faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fac:	4298      	cmp	r0, r3
 8012fae:	bfb8      	it	lt
 8012fb0:	4618      	movlt	r0, r3
 8012fb2:	e734      	b.n	8012e1e <_printf_float+0xbe>
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	464a      	mov	r2, r9
 8012fb8:	4631      	mov	r1, r6
 8012fba:	4628      	mov	r0, r5
 8012fbc:	47b8      	blx	r7
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	f43f af2b 	beq.w	8012e1a <_printf_float+0xba>
 8012fc4:	f108 0801 	add.w	r8, r8, #1
 8012fc8:	e7e6      	b.n	8012f98 <_printf_float+0x238>
 8012fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dc2b      	bgt.n	8013028 <_printf_float+0x2c8>
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	4a26      	ldr	r2, [pc, #152]	; (801306c <_printf_float+0x30c>)
 8012fd4:	4631      	mov	r1, r6
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	47b8      	blx	r7
 8012fda:	3001      	adds	r0, #1
 8012fdc:	f43f af1d 	beq.w	8012e1a <_printf_float+0xba>
 8012fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fe2:	b923      	cbnz	r3, 8012fee <_printf_float+0x28e>
 8012fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fe6:	b913      	cbnz	r3, 8012fee <_printf_float+0x28e>
 8012fe8:	6823      	ldr	r3, [r4, #0]
 8012fea:	07d9      	lsls	r1, r3, #31
 8012fec:	d5d8      	bpl.n	8012fa0 <_printf_float+0x240>
 8012fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ff2:	4631      	mov	r1, r6
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	47b8      	blx	r7
 8012ff8:	3001      	adds	r0, #1
 8012ffa:	f43f af0e 	beq.w	8012e1a <_printf_float+0xba>
 8012ffe:	f04f 0900 	mov.w	r9, #0
 8013002:	f104 0a1a 	add.w	sl, r4, #26
 8013006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013008:	425b      	negs	r3, r3
 801300a:	454b      	cmp	r3, r9
 801300c:	dc01      	bgt.n	8013012 <_printf_float+0x2b2>
 801300e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013010:	e794      	b.n	8012f3c <_printf_float+0x1dc>
 8013012:	2301      	movs	r3, #1
 8013014:	4652      	mov	r2, sl
 8013016:	4631      	mov	r1, r6
 8013018:	4628      	mov	r0, r5
 801301a:	47b8      	blx	r7
 801301c:	3001      	adds	r0, #1
 801301e:	f43f aefc 	beq.w	8012e1a <_printf_float+0xba>
 8013022:	f109 0901 	add.w	r9, r9, #1
 8013026:	e7ee      	b.n	8013006 <_printf_float+0x2a6>
 8013028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801302a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801302c:	429a      	cmp	r2, r3
 801302e:	bfa8      	it	ge
 8013030:	461a      	movge	r2, r3
 8013032:	2a00      	cmp	r2, #0
 8013034:	4691      	mov	r9, r2
 8013036:	dd07      	ble.n	8013048 <_printf_float+0x2e8>
 8013038:	4613      	mov	r3, r2
 801303a:	4631      	mov	r1, r6
 801303c:	4642      	mov	r2, r8
 801303e:	4628      	mov	r0, r5
 8013040:	47b8      	blx	r7
 8013042:	3001      	adds	r0, #1
 8013044:	f43f aee9 	beq.w	8012e1a <_printf_float+0xba>
 8013048:	f104 031a 	add.w	r3, r4, #26
 801304c:	f04f 0b00 	mov.w	fp, #0
 8013050:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013054:	9306      	str	r3, [sp, #24]
 8013056:	e015      	b.n	8013084 <_printf_float+0x324>
 8013058:	7fefffff 	.word	0x7fefffff
 801305c:	08018228 	.word	0x08018228
 8013060:	08018224 	.word	0x08018224
 8013064:	08018230 	.word	0x08018230
 8013068:	0801822c 	.word	0x0801822c
 801306c:	08018453 	.word	0x08018453
 8013070:	2301      	movs	r3, #1
 8013072:	9a06      	ldr	r2, [sp, #24]
 8013074:	4631      	mov	r1, r6
 8013076:	4628      	mov	r0, r5
 8013078:	47b8      	blx	r7
 801307a:	3001      	adds	r0, #1
 801307c:	f43f aecd 	beq.w	8012e1a <_printf_float+0xba>
 8013080:	f10b 0b01 	add.w	fp, fp, #1
 8013084:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013088:	ebaa 0309 	sub.w	r3, sl, r9
 801308c:	455b      	cmp	r3, fp
 801308e:	dcef      	bgt.n	8013070 <_printf_float+0x310>
 8013090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013094:	429a      	cmp	r2, r3
 8013096:	44d0      	add	r8, sl
 8013098:	db15      	blt.n	80130c6 <_printf_float+0x366>
 801309a:	6823      	ldr	r3, [r4, #0]
 801309c:	07da      	lsls	r2, r3, #31
 801309e:	d412      	bmi.n	80130c6 <_printf_float+0x366>
 80130a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130a4:	eba3 020a 	sub.w	r2, r3, sl
 80130a8:	eba3 0a01 	sub.w	sl, r3, r1
 80130ac:	4592      	cmp	sl, r2
 80130ae:	bfa8      	it	ge
 80130b0:	4692      	movge	sl, r2
 80130b2:	f1ba 0f00 	cmp.w	sl, #0
 80130b6:	dc0e      	bgt.n	80130d6 <_printf_float+0x376>
 80130b8:	f04f 0800 	mov.w	r8, #0
 80130bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130c0:	f104 091a 	add.w	r9, r4, #26
 80130c4:	e019      	b.n	80130fa <_printf_float+0x39a>
 80130c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130ca:	4631      	mov	r1, r6
 80130cc:	4628      	mov	r0, r5
 80130ce:	47b8      	blx	r7
 80130d0:	3001      	adds	r0, #1
 80130d2:	d1e5      	bne.n	80130a0 <_printf_float+0x340>
 80130d4:	e6a1      	b.n	8012e1a <_printf_float+0xba>
 80130d6:	4653      	mov	r3, sl
 80130d8:	4642      	mov	r2, r8
 80130da:	4631      	mov	r1, r6
 80130dc:	4628      	mov	r0, r5
 80130de:	47b8      	blx	r7
 80130e0:	3001      	adds	r0, #1
 80130e2:	d1e9      	bne.n	80130b8 <_printf_float+0x358>
 80130e4:	e699      	b.n	8012e1a <_printf_float+0xba>
 80130e6:	2301      	movs	r3, #1
 80130e8:	464a      	mov	r2, r9
 80130ea:	4631      	mov	r1, r6
 80130ec:	4628      	mov	r0, r5
 80130ee:	47b8      	blx	r7
 80130f0:	3001      	adds	r0, #1
 80130f2:	f43f ae92 	beq.w	8012e1a <_printf_float+0xba>
 80130f6:	f108 0801 	add.w	r8, r8, #1
 80130fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130fe:	1a9b      	subs	r3, r3, r2
 8013100:	eba3 030a 	sub.w	r3, r3, sl
 8013104:	4543      	cmp	r3, r8
 8013106:	dcee      	bgt.n	80130e6 <_printf_float+0x386>
 8013108:	e74a      	b.n	8012fa0 <_printf_float+0x240>
 801310a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801310c:	2a01      	cmp	r2, #1
 801310e:	dc01      	bgt.n	8013114 <_printf_float+0x3b4>
 8013110:	07db      	lsls	r3, r3, #31
 8013112:	d53a      	bpl.n	801318a <_printf_float+0x42a>
 8013114:	2301      	movs	r3, #1
 8013116:	4642      	mov	r2, r8
 8013118:	4631      	mov	r1, r6
 801311a:	4628      	mov	r0, r5
 801311c:	47b8      	blx	r7
 801311e:	3001      	adds	r0, #1
 8013120:	f43f ae7b 	beq.w	8012e1a <_printf_float+0xba>
 8013124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013128:	4631      	mov	r1, r6
 801312a:	4628      	mov	r0, r5
 801312c:	47b8      	blx	r7
 801312e:	3001      	adds	r0, #1
 8013130:	f108 0801 	add.w	r8, r8, #1
 8013134:	f43f ae71 	beq.w	8012e1a <_printf_float+0xba>
 8013138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801313a:	2200      	movs	r2, #0
 801313c:	f103 3aff 	add.w	sl, r3, #4294967295
 8013140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013144:	2300      	movs	r3, #0
 8013146:	f7ed fcd7 	bl	8000af8 <__aeabi_dcmpeq>
 801314a:	b9c8      	cbnz	r0, 8013180 <_printf_float+0x420>
 801314c:	4653      	mov	r3, sl
 801314e:	4642      	mov	r2, r8
 8013150:	4631      	mov	r1, r6
 8013152:	4628      	mov	r0, r5
 8013154:	47b8      	blx	r7
 8013156:	3001      	adds	r0, #1
 8013158:	d10e      	bne.n	8013178 <_printf_float+0x418>
 801315a:	e65e      	b.n	8012e1a <_printf_float+0xba>
 801315c:	2301      	movs	r3, #1
 801315e:	4652      	mov	r2, sl
 8013160:	4631      	mov	r1, r6
 8013162:	4628      	mov	r0, r5
 8013164:	47b8      	blx	r7
 8013166:	3001      	adds	r0, #1
 8013168:	f43f ae57 	beq.w	8012e1a <_printf_float+0xba>
 801316c:	f108 0801 	add.w	r8, r8, #1
 8013170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013172:	3b01      	subs	r3, #1
 8013174:	4543      	cmp	r3, r8
 8013176:	dcf1      	bgt.n	801315c <_printf_float+0x3fc>
 8013178:	464b      	mov	r3, r9
 801317a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801317e:	e6de      	b.n	8012f3e <_printf_float+0x1de>
 8013180:	f04f 0800 	mov.w	r8, #0
 8013184:	f104 0a1a 	add.w	sl, r4, #26
 8013188:	e7f2      	b.n	8013170 <_printf_float+0x410>
 801318a:	2301      	movs	r3, #1
 801318c:	e7df      	b.n	801314e <_printf_float+0x3ee>
 801318e:	2301      	movs	r3, #1
 8013190:	464a      	mov	r2, r9
 8013192:	4631      	mov	r1, r6
 8013194:	4628      	mov	r0, r5
 8013196:	47b8      	blx	r7
 8013198:	3001      	adds	r0, #1
 801319a:	f43f ae3e 	beq.w	8012e1a <_printf_float+0xba>
 801319e:	f108 0801 	add.w	r8, r8, #1
 80131a2:	68e3      	ldr	r3, [r4, #12]
 80131a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131a6:	1a9b      	subs	r3, r3, r2
 80131a8:	4543      	cmp	r3, r8
 80131aa:	dcf0      	bgt.n	801318e <_printf_float+0x42e>
 80131ac:	e6fc      	b.n	8012fa8 <_printf_float+0x248>
 80131ae:	f04f 0800 	mov.w	r8, #0
 80131b2:	f104 0919 	add.w	r9, r4, #25
 80131b6:	e7f4      	b.n	80131a2 <_printf_float+0x442>
 80131b8:	2900      	cmp	r1, #0
 80131ba:	f43f ae8b 	beq.w	8012ed4 <_printf_float+0x174>
 80131be:	2300      	movs	r3, #0
 80131c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80131c4:	ab09      	add	r3, sp, #36	; 0x24
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	ec49 8b10 	vmov	d0, r8, r9
 80131cc:	6022      	str	r2, [r4, #0]
 80131ce:	f8cd a004 	str.w	sl, [sp, #4]
 80131d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80131d6:	4628      	mov	r0, r5
 80131d8:	f7ff fd2d 	bl	8012c36 <__cvt>
 80131dc:	4680      	mov	r8, r0
 80131de:	e648      	b.n	8012e72 <_printf_float+0x112>

080131e0 <_printf_common>:
 80131e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131e4:	4691      	mov	r9, r2
 80131e6:	461f      	mov	r7, r3
 80131e8:	688a      	ldr	r2, [r1, #8]
 80131ea:	690b      	ldr	r3, [r1, #16]
 80131ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80131f0:	4293      	cmp	r3, r2
 80131f2:	bfb8      	it	lt
 80131f4:	4613      	movlt	r3, r2
 80131f6:	f8c9 3000 	str.w	r3, [r9]
 80131fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80131fe:	4606      	mov	r6, r0
 8013200:	460c      	mov	r4, r1
 8013202:	b112      	cbz	r2, 801320a <_printf_common+0x2a>
 8013204:	3301      	adds	r3, #1
 8013206:	f8c9 3000 	str.w	r3, [r9]
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	0699      	lsls	r1, r3, #26
 801320e:	bf42      	ittt	mi
 8013210:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013214:	3302      	addmi	r3, #2
 8013216:	f8c9 3000 	strmi.w	r3, [r9]
 801321a:	6825      	ldr	r5, [r4, #0]
 801321c:	f015 0506 	ands.w	r5, r5, #6
 8013220:	d107      	bne.n	8013232 <_printf_common+0x52>
 8013222:	f104 0a19 	add.w	sl, r4, #25
 8013226:	68e3      	ldr	r3, [r4, #12]
 8013228:	f8d9 2000 	ldr.w	r2, [r9]
 801322c:	1a9b      	subs	r3, r3, r2
 801322e:	42ab      	cmp	r3, r5
 8013230:	dc28      	bgt.n	8013284 <_printf_common+0xa4>
 8013232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013236:	6822      	ldr	r2, [r4, #0]
 8013238:	3300      	adds	r3, #0
 801323a:	bf18      	it	ne
 801323c:	2301      	movne	r3, #1
 801323e:	0692      	lsls	r2, r2, #26
 8013240:	d42d      	bmi.n	801329e <_printf_common+0xbe>
 8013242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013246:	4639      	mov	r1, r7
 8013248:	4630      	mov	r0, r6
 801324a:	47c0      	blx	r8
 801324c:	3001      	adds	r0, #1
 801324e:	d020      	beq.n	8013292 <_printf_common+0xb2>
 8013250:	6823      	ldr	r3, [r4, #0]
 8013252:	68e5      	ldr	r5, [r4, #12]
 8013254:	f8d9 2000 	ldr.w	r2, [r9]
 8013258:	f003 0306 	and.w	r3, r3, #6
 801325c:	2b04      	cmp	r3, #4
 801325e:	bf08      	it	eq
 8013260:	1aad      	subeq	r5, r5, r2
 8013262:	68a3      	ldr	r3, [r4, #8]
 8013264:	6922      	ldr	r2, [r4, #16]
 8013266:	bf0c      	ite	eq
 8013268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801326c:	2500      	movne	r5, #0
 801326e:	4293      	cmp	r3, r2
 8013270:	bfc4      	itt	gt
 8013272:	1a9b      	subgt	r3, r3, r2
 8013274:	18ed      	addgt	r5, r5, r3
 8013276:	f04f 0900 	mov.w	r9, #0
 801327a:	341a      	adds	r4, #26
 801327c:	454d      	cmp	r5, r9
 801327e:	d11a      	bne.n	80132b6 <_printf_common+0xd6>
 8013280:	2000      	movs	r0, #0
 8013282:	e008      	b.n	8013296 <_printf_common+0xb6>
 8013284:	2301      	movs	r3, #1
 8013286:	4652      	mov	r2, sl
 8013288:	4639      	mov	r1, r7
 801328a:	4630      	mov	r0, r6
 801328c:	47c0      	blx	r8
 801328e:	3001      	adds	r0, #1
 8013290:	d103      	bne.n	801329a <_printf_common+0xba>
 8013292:	f04f 30ff 	mov.w	r0, #4294967295
 8013296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801329a:	3501      	adds	r5, #1
 801329c:	e7c3      	b.n	8013226 <_printf_common+0x46>
 801329e:	18e1      	adds	r1, r4, r3
 80132a0:	1c5a      	adds	r2, r3, #1
 80132a2:	2030      	movs	r0, #48	; 0x30
 80132a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80132a8:	4422      	add	r2, r4
 80132aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80132ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80132b2:	3302      	adds	r3, #2
 80132b4:	e7c5      	b.n	8013242 <_printf_common+0x62>
 80132b6:	2301      	movs	r3, #1
 80132b8:	4622      	mov	r2, r4
 80132ba:	4639      	mov	r1, r7
 80132bc:	4630      	mov	r0, r6
 80132be:	47c0      	blx	r8
 80132c0:	3001      	adds	r0, #1
 80132c2:	d0e6      	beq.n	8013292 <_printf_common+0xb2>
 80132c4:	f109 0901 	add.w	r9, r9, #1
 80132c8:	e7d8      	b.n	801327c <_printf_common+0x9c>
	...

080132cc <_printf_i>:
 80132cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80132d4:	460c      	mov	r4, r1
 80132d6:	7e09      	ldrb	r1, [r1, #24]
 80132d8:	b085      	sub	sp, #20
 80132da:	296e      	cmp	r1, #110	; 0x6e
 80132dc:	4617      	mov	r7, r2
 80132de:	4606      	mov	r6, r0
 80132e0:	4698      	mov	r8, r3
 80132e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132e4:	f000 80b3 	beq.w	801344e <_printf_i+0x182>
 80132e8:	d822      	bhi.n	8013330 <_printf_i+0x64>
 80132ea:	2963      	cmp	r1, #99	; 0x63
 80132ec:	d036      	beq.n	801335c <_printf_i+0x90>
 80132ee:	d80a      	bhi.n	8013306 <_printf_i+0x3a>
 80132f0:	2900      	cmp	r1, #0
 80132f2:	f000 80b9 	beq.w	8013468 <_printf_i+0x19c>
 80132f6:	2958      	cmp	r1, #88	; 0x58
 80132f8:	f000 8083 	beq.w	8013402 <_printf_i+0x136>
 80132fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013300:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013304:	e032      	b.n	801336c <_printf_i+0xa0>
 8013306:	2964      	cmp	r1, #100	; 0x64
 8013308:	d001      	beq.n	801330e <_printf_i+0x42>
 801330a:	2969      	cmp	r1, #105	; 0x69
 801330c:	d1f6      	bne.n	80132fc <_printf_i+0x30>
 801330e:	6820      	ldr	r0, [r4, #0]
 8013310:	6813      	ldr	r3, [r2, #0]
 8013312:	0605      	lsls	r5, r0, #24
 8013314:	f103 0104 	add.w	r1, r3, #4
 8013318:	d52a      	bpl.n	8013370 <_printf_i+0xa4>
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	6011      	str	r1, [r2, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	da03      	bge.n	801332a <_printf_i+0x5e>
 8013322:	222d      	movs	r2, #45	; 0x2d
 8013324:	425b      	negs	r3, r3
 8013326:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801332a:	486f      	ldr	r0, [pc, #444]	; (80134e8 <_printf_i+0x21c>)
 801332c:	220a      	movs	r2, #10
 801332e:	e039      	b.n	80133a4 <_printf_i+0xd8>
 8013330:	2973      	cmp	r1, #115	; 0x73
 8013332:	f000 809d 	beq.w	8013470 <_printf_i+0x1a4>
 8013336:	d808      	bhi.n	801334a <_printf_i+0x7e>
 8013338:	296f      	cmp	r1, #111	; 0x6f
 801333a:	d020      	beq.n	801337e <_printf_i+0xb2>
 801333c:	2970      	cmp	r1, #112	; 0x70
 801333e:	d1dd      	bne.n	80132fc <_printf_i+0x30>
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	f043 0320 	orr.w	r3, r3, #32
 8013346:	6023      	str	r3, [r4, #0]
 8013348:	e003      	b.n	8013352 <_printf_i+0x86>
 801334a:	2975      	cmp	r1, #117	; 0x75
 801334c:	d017      	beq.n	801337e <_printf_i+0xb2>
 801334e:	2978      	cmp	r1, #120	; 0x78
 8013350:	d1d4      	bne.n	80132fc <_printf_i+0x30>
 8013352:	2378      	movs	r3, #120	; 0x78
 8013354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013358:	4864      	ldr	r0, [pc, #400]	; (80134ec <_printf_i+0x220>)
 801335a:	e055      	b.n	8013408 <_printf_i+0x13c>
 801335c:	6813      	ldr	r3, [r2, #0]
 801335e:	1d19      	adds	r1, r3, #4
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	6011      	str	r1, [r2, #0]
 8013364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801336c:	2301      	movs	r3, #1
 801336e:	e08c      	b.n	801348a <_printf_i+0x1be>
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	6011      	str	r1, [r2, #0]
 8013374:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013378:	bf18      	it	ne
 801337a:	b21b      	sxthne	r3, r3
 801337c:	e7cf      	b.n	801331e <_printf_i+0x52>
 801337e:	6813      	ldr	r3, [r2, #0]
 8013380:	6825      	ldr	r5, [r4, #0]
 8013382:	1d18      	adds	r0, r3, #4
 8013384:	6010      	str	r0, [r2, #0]
 8013386:	0628      	lsls	r0, r5, #24
 8013388:	d501      	bpl.n	801338e <_printf_i+0xc2>
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	e002      	b.n	8013394 <_printf_i+0xc8>
 801338e:	0668      	lsls	r0, r5, #25
 8013390:	d5fb      	bpl.n	801338a <_printf_i+0xbe>
 8013392:	881b      	ldrh	r3, [r3, #0]
 8013394:	4854      	ldr	r0, [pc, #336]	; (80134e8 <_printf_i+0x21c>)
 8013396:	296f      	cmp	r1, #111	; 0x6f
 8013398:	bf14      	ite	ne
 801339a:	220a      	movne	r2, #10
 801339c:	2208      	moveq	r2, #8
 801339e:	2100      	movs	r1, #0
 80133a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80133a4:	6865      	ldr	r5, [r4, #4]
 80133a6:	60a5      	str	r5, [r4, #8]
 80133a8:	2d00      	cmp	r5, #0
 80133aa:	f2c0 8095 	blt.w	80134d8 <_printf_i+0x20c>
 80133ae:	6821      	ldr	r1, [r4, #0]
 80133b0:	f021 0104 	bic.w	r1, r1, #4
 80133b4:	6021      	str	r1, [r4, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d13d      	bne.n	8013436 <_printf_i+0x16a>
 80133ba:	2d00      	cmp	r5, #0
 80133bc:	f040 808e 	bne.w	80134dc <_printf_i+0x210>
 80133c0:	4665      	mov	r5, ip
 80133c2:	2a08      	cmp	r2, #8
 80133c4:	d10b      	bne.n	80133de <_printf_i+0x112>
 80133c6:	6823      	ldr	r3, [r4, #0]
 80133c8:	07db      	lsls	r3, r3, #31
 80133ca:	d508      	bpl.n	80133de <_printf_i+0x112>
 80133cc:	6923      	ldr	r3, [r4, #16]
 80133ce:	6862      	ldr	r2, [r4, #4]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	bfde      	ittt	le
 80133d4:	2330      	movle	r3, #48	; 0x30
 80133d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80133da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80133de:	ebac 0305 	sub.w	r3, ip, r5
 80133e2:	6123      	str	r3, [r4, #16]
 80133e4:	f8cd 8000 	str.w	r8, [sp]
 80133e8:	463b      	mov	r3, r7
 80133ea:	aa03      	add	r2, sp, #12
 80133ec:	4621      	mov	r1, r4
 80133ee:	4630      	mov	r0, r6
 80133f0:	f7ff fef6 	bl	80131e0 <_printf_common>
 80133f4:	3001      	adds	r0, #1
 80133f6:	d14d      	bne.n	8013494 <_printf_i+0x1c8>
 80133f8:	f04f 30ff 	mov.w	r0, #4294967295
 80133fc:	b005      	add	sp, #20
 80133fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013402:	4839      	ldr	r0, [pc, #228]	; (80134e8 <_printf_i+0x21c>)
 8013404:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013408:	6813      	ldr	r3, [r2, #0]
 801340a:	6821      	ldr	r1, [r4, #0]
 801340c:	1d1d      	adds	r5, r3, #4
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	6015      	str	r5, [r2, #0]
 8013412:	060a      	lsls	r2, r1, #24
 8013414:	d50b      	bpl.n	801342e <_printf_i+0x162>
 8013416:	07ca      	lsls	r2, r1, #31
 8013418:	bf44      	itt	mi
 801341a:	f041 0120 	orrmi.w	r1, r1, #32
 801341e:	6021      	strmi	r1, [r4, #0]
 8013420:	b91b      	cbnz	r3, 801342a <_printf_i+0x15e>
 8013422:	6822      	ldr	r2, [r4, #0]
 8013424:	f022 0220 	bic.w	r2, r2, #32
 8013428:	6022      	str	r2, [r4, #0]
 801342a:	2210      	movs	r2, #16
 801342c:	e7b7      	b.n	801339e <_printf_i+0xd2>
 801342e:	064d      	lsls	r5, r1, #25
 8013430:	bf48      	it	mi
 8013432:	b29b      	uxthmi	r3, r3
 8013434:	e7ef      	b.n	8013416 <_printf_i+0x14a>
 8013436:	4665      	mov	r5, ip
 8013438:	fbb3 f1f2 	udiv	r1, r3, r2
 801343c:	fb02 3311 	mls	r3, r2, r1, r3
 8013440:	5cc3      	ldrb	r3, [r0, r3]
 8013442:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013446:	460b      	mov	r3, r1
 8013448:	2900      	cmp	r1, #0
 801344a:	d1f5      	bne.n	8013438 <_printf_i+0x16c>
 801344c:	e7b9      	b.n	80133c2 <_printf_i+0xf6>
 801344e:	6813      	ldr	r3, [r2, #0]
 8013450:	6825      	ldr	r5, [r4, #0]
 8013452:	6961      	ldr	r1, [r4, #20]
 8013454:	1d18      	adds	r0, r3, #4
 8013456:	6010      	str	r0, [r2, #0]
 8013458:	0628      	lsls	r0, r5, #24
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	d501      	bpl.n	8013462 <_printf_i+0x196>
 801345e:	6019      	str	r1, [r3, #0]
 8013460:	e002      	b.n	8013468 <_printf_i+0x19c>
 8013462:	066a      	lsls	r2, r5, #25
 8013464:	d5fb      	bpl.n	801345e <_printf_i+0x192>
 8013466:	8019      	strh	r1, [r3, #0]
 8013468:	2300      	movs	r3, #0
 801346a:	6123      	str	r3, [r4, #16]
 801346c:	4665      	mov	r5, ip
 801346e:	e7b9      	b.n	80133e4 <_printf_i+0x118>
 8013470:	6813      	ldr	r3, [r2, #0]
 8013472:	1d19      	adds	r1, r3, #4
 8013474:	6011      	str	r1, [r2, #0]
 8013476:	681d      	ldr	r5, [r3, #0]
 8013478:	6862      	ldr	r2, [r4, #4]
 801347a:	2100      	movs	r1, #0
 801347c:	4628      	mov	r0, r5
 801347e:	f7ec fec7 	bl	8000210 <memchr>
 8013482:	b108      	cbz	r0, 8013488 <_printf_i+0x1bc>
 8013484:	1b40      	subs	r0, r0, r5
 8013486:	6060      	str	r0, [r4, #4]
 8013488:	6863      	ldr	r3, [r4, #4]
 801348a:	6123      	str	r3, [r4, #16]
 801348c:	2300      	movs	r3, #0
 801348e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013492:	e7a7      	b.n	80133e4 <_printf_i+0x118>
 8013494:	6923      	ldr	r3, [r4, #16]
 8013496:	462a      	mov	r2, r5
 8013498:	4639      	mov	r1, r7
 801349a:	4630      	mov	r0, r6
 801349c:	47c0      	blx	r8
 801349e:	3001      	adds	r0, #1
 80134a0:	d0aa      	beq.n	80133f8 <_printf_i+0x12c>
 80134a2:	6823      	ldr	r3, [r4, #0]
 80134a4:	079b      	lsls	r3, r3, #30
 80134a6:	d413      	bmi.n	80134d0 <_printf_i+0x204>
 80134a8:	68e0      	ldr	r0, [r4, #12]
 80134aa:	9b03      	ldr	r3, [sp, #12]
 80134ac:	4298      	cmp	r0, r3
 80134ae:	bfb8      	it	lt
 80134b0:	4618      	movlt	r0, r3
 80134b2:	e7a3      	b.n	80133fc <_printf_i+0x130>
 80134b4:	2301      	movs	r3, #1
 80134b6:	464a      	mov	r2, r9
 80134b8:	4639      	mov	r1, r7
 80134ba:	4630      	mov	r0, r6
 80134bc:	47c0      	blx	r8
 80134be:	3001      	adds	r0, #1
 80134c0:	d09a      	beq.n	80133f8 <_printf_i+0x12c>
 80134c2:	3501      	adds	r5, #1
 80134c4:	68e3      	ldr	r3, [r4, #12]
 80134c6:	9a03      	ldr	r2, [sp, #12]
 80134c8:	1a9b      	subs	r3, r3, r2
 80134ca:	42ab      	cmp	r3, r5
 80134cc:	dcf2      	bgt.n	80134b4 <_printf_i+0x1e8>
 80134ce:	e7eb      	b.n	80134a8 <_printf_i+0x1dc>
 80134d0:	2500      	movs	r5, #0
 80134d2:	f104 0919 	add.w	r9, r4, #25
 80134d6:	e7f5      	b.n	80134c4 <_printf_i+0x1f8>
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1ac      	bne.n	8013436 <_printf_i+0x16a>
 80134dc:	7803      	ldrb	r3, [r0, #0]
 80134de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134e6:	e76c      	b.n	80133c2 <_printf_i+0xf6>
 80134e8:	08018234 	.word	0x08018234
 80134ec:	08018245 	.word	0x08018245

080134f0 <_scanf_float>:
 80134f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f4:	469a      	mov	sl, r3
 80134f6:	688b      	ldr	r3, [r1, #8]
 80134f8:	4616      	mov	r6, r2
 80134fa:	1e5a      	subs	r2, r3, #1
 80134fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013500:	b087      	sub	sp, #28
 8013502:	bf83      	ittte	hi
 8013504:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013508:	189b      	addhi	r3, r3, r2
 801350a:	9301      	strhi	r3, [sp, #4]
 801350c:	2300      	movls	r3, #0
 801350e:	bf86      	itte	hi
 8013510:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013514:	608b      	strhi	r3, [r1, #8]
 8013516:	9301      	strls	r3, [sp, #4]
 8013518:	680b      	ldr	r3, [r1, #0]
 801351a:	4688      	mov	r8, r1
 801351c:	f04f 0b00 	mov.w	fp, #0
 8013520:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013524:	f848 3b1c 	str.w	r3, [r8], #28
 8013528:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801352c:	4607      	mov	r7, r0
 801352e:	460c      	mov	r4, r1
 8013530:	4645      	mov	r5, r8
 8013532:	465a      	mov	r2, fp
 8013534:	46d9      	mov	r9, fp
 8013536:	f8cd b008 	str.w	fp, [sp, #8]
 801353a:	68a1      	ldr	r1, [r4, #8]
 801353c:	b181      	cbz	r1, 8013560 <_scanf_float+0x70>
 801353e:	6833      	ldr	r3, [r6, #0]
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	2b49      	cmp	r3, #73	; 0x49
 8013544:	d071      	beq.n	801362a <_scanf_float+0x13a>
 8013546:	d84d      	bhi.n	80135e4 <_scanf_float+0xf4>
 8013548:	2b39      	cmp	r3, #57	; 0x39
 801354a:	d840      	bhi.n	80135ce <_scanf_float+0xde>
 801354c:	2b31      	cmp	r3, #49	; 0x31
 801354e:	f080 8088 	bcs.w	8013662 <_scanf_float+0x172>
 8013552:	2b2d      	cmp	r3, #45	; 0x2d
 8013554:	f000 8090 	beq.w	8013678 <_scanf_float+0x188>
 8013558:	d815      	bhi.n	8013586 <_scanf_float+0x96>
 801355a:	2b2b      	cmp	r3, #43	; 0x2b
 801355c:	f000 808c 	beq.w	8013678 <_scanf_float+0x188>
 8013560:	f1b9 0f00 	cmp.w	r9, #0
 8013564:	d003      	beq.n	801356e <_scanf_float+0x7e>
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801356c:	6023      	str	r3, [r4, #0]
 801356e:	3a01      	subs	r2, #1
 8013570:	2a01      	cmp	r2, #1
 8013572:	f200 80ea 	bhi.w	801374a <_scanf_float+0x25a>
 8013576:	4545      	cmp	r5, r8
 8013578:	f200 80dc 	bhi.w	8013734 <_scanf_float+0x244>
 801357c:	2601      	movs	r6, #1
 801357e:	4630      	mov	r0, r6
 8013580:	b007      	add	sp, #28
 8013582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013586:	2b2e      	cmp	r3, #46	; 0x2e
 8013588:	f000 809f 	beq.w	80136ca <_scanf_float+0x1da>
 801358c:	2b30      	cmp	r3, #48	; 0x30
 801358e:	d1e7      	bne.n	8013560 <_scanf_float+0x70>
 8013590:	6820      	ldr	r0, [r4, #0]
 8013592:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013596:	d064      	beq.n	8013662 <_scanf_float+0x172>
 8013598:	9b01      	ldr	r3, [sp, #4]
 801359a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801359e:	6020      	str	r0, [r4, #0]
 80135a0:	f109 0901 	add.w	r9, r9, #1
 80135a4:	b11b      	cbz	r3, 80135ae <_scanf_float+0xbe>
 80135a6:	3b01      	subs	r3, #1
 80135a8:	3101      	adds	r1, #1
 80135aa:	9301      	str	r3, [sp, #4]
 80135ac:	60a1      	str	r1, [r4, #8]
 80135ae:	68a3      	ldr	r3, [r4, #8]
 80135b0:	3b01      	subs	r3, #1
 80135b2:	60a3      	str	r3, [r4, #8]
 80135b4:	6923      	ldr	r3, [r4, #16]
 80135b6:	3301      	adds	r3, #1
 80135b8:	6123      	str	r3, [r4, #16]
 80135ba:	6873      	ldr	r3, [r6, #4]
 80135bc:	3b01      	subs	r3, #1
 80135be:	2b00      	cmp	r3, #0
 80135c0:	6073      	str	r3, [r6, #4]
 80135c2:	f340 80ac 	ble.w	801371e <_scanf_float+0x22e>
 80135c6:	6833      	ldr	r3, [r6, #0]
 80135c8:	3301      	adds	r3, #1
 80135ca:	6033      	str	r3, [r6, #0]
 80135cc:	e7b5      	b.n	801353a <_scanf_float+0x4a>
 80135ce:	2b45      	cmp	r3, #69	; 0x45
 80135d0:	f000 8085 	beq.w	80136de <_scanf_float+0x1ee>
 80135d4:	2b46      	cmp	r3, #70	; 0x46
 80135d6:	d06a      	beq.n	80136ae <_scanf_float+0x1be>
 80135d8:	2b41      	cmp	r3, #65	; 0x41
 80135da:	d1c1      	bne.n	8013560 <_scanf_float+0x70>
 80135dc:	2a01      	cmp	r2, #1
 80135de:	d1bf      	bne.n	8013560 <_scanf_float+0x70>
 80135e0:	2202      	movs	r2, #2
 80135e2:	e046      	b.n	8013672 <_scanf_float+0x182>
 80135e4:	2b65      	cmp	r3, #101	; 0x65
 80135e6:	d07a      	beq.n	80136de <_scanf_float+0x1ee>
 80135e8:	d818      	bhi.n	801361c <_scanf_float+0x12c>
 80135ea:	2b54      	cmp	r3, #84	; 0x54
 80135ec:	d066      	beq.n	80136bc <_scanf_float+0x1cc>
 80135ee:	d811      	bhi.n	8013614 <_scanf_float+0x124>
 80135f0:	2b4e      	cmp	r3, #78	; 0x4e
 80135f2:	d1b5      	bne.n	8013560 <_scanf_float+0x70>
 80135f4:	2a00      	cmp	r2, #0
 80135f6:	d146      	bne.n	8013686 <_scanf_float+0x196>
 80135f8:	f1b9 0f00 	cmp.w	r9, #0
 80135fc:	d145      	bne.n	801368a <_scanf_float+0x19a>
 80135fe:	6821      	ldr	r1, [r4, #0]
 8013600:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013604:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013608:	d13f      	bne.n	801368a <_scanf_float+0x19a>
 801360a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801360e:	6021      	str	r1, [r4, #0]
 8013610:	2201      	movs	r2, #1
 8013612:	e02e      	b.n	8013672 <_scanf_float+0x182>
 8013614:	2b59      	cmp	r3, #89	; 0x59
 8013616:	d01e      	beq.n	8013656 <_scanf_float+0x166>
 8013618:	2b61      	cmp	r3, #97	; 0x61
 801361a:	e7de      	b.n	80135da <_scanf_float+0xea>
 801361c:	2b6e      	cmp	r3, #110	; 0x6e
 801361e:	d0e9      	beq.n	80135f4 <_scanf_float+0x104>
 8013620:	d815      	bhi.n	801364e <_scanf_float+0x15e>
 8013622:	2b66      	cmp	r3, #102	; 0x66
 8013624:	d043      	beq.n	80136ae <_scanf_float+0x1be>
 8013626:	2b69      	cmp	r3, #105	; 0x69
 8013628:	d19a      	bne.n	8013560 <_scanf_float+0x70>
 801362a:	f1bb 0f00 	cmp.w	fp, #0
 801362e:	d138      	bne.n	80136a2 <_scanf_float+0x1b2>
 8013630:	f1b9 0f00 	cmp.w	r9, #0
 8013634:	d197      	bne.n	8013566 <_scanf_float+0x76>
 8013636:	6821      	ldr	r1, [r4, #0]
 8013638:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801363c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013640:	d195      	bne.n	801356e <_scanf_float+0x7e>
 8013642:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013646:	6021      	str	r1, [r4, #0]
 8013648:	f04f 0b01 	mov.w	fp, #1
 801364c:	e011      	b.n	8013672 <_scanf_float+0x182>
 801364e:	2b74      	cmp	r3, #116	; 0x74
 8013650:	d034      	beq.n	80136bc <_scanf_float+0x1cc>
 8013652:	2b79      	cmp	r3, #121	; 0x79
 8013654:	d184      	bne.n	8013560 <_scanf_float+0x70>
 8013656:	f1bb 0f07 	cmp.w	fp, #7
 801365a:	d181      	bne.n	8013560 <_scanf_float+0x70>
 801365c:	f04f 0b08 	mov.w	fp, #8
 8013660:	e007      	b.n	8013672 <_scanf_float+0x182>
 8013662:	eb12 0f0b 	cmn.w	r2, fp
 8013666:	f47f af7b 	bne.w	8013560 <_scanf_float+0x70>
 801366a:	6821      	ldr	r1, [r4, #0]
 801366c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013670:	6021      	str	r1, [r4, #0]
 8013672:	702b      	strb	r3, [r5, #0]
 8013674:	3501      	adds	r5, #1
 8013676:	e79a      	b.n	80135ae <_scanf_float+0xbe>
 8013678:	6821      	ldr	r1, [r4, #0]
 801367a:	0608      	lsls	r0, r1, #24
 801367c:	f57f af70 	bpl.w	8013560 <_scanf_float+0x70>
 8013680:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013684:	e7f4      	b.n	8013670 <_scanf_float+0x180>
 8013686:	2a02      	cmp	r2, #2
 8013688:	d047      	beq.n	801371a <_scanf_float+0x22a>
 801368a:	f1bb 0f01 	cmp.w	fp, #1
 801368e:	d003      	beq.n	8013698 <_scanf_float+0x1a8>
 8013690:	f1bb 0f04 	cmp.w	fp, #4
 8013694:	f47f af64 	bne.w	8013560 <_scanf_float+0x70>
 8013698:	f10b 0b01 	add.w	fp, fp, #1
 801369c:	fa5f fb8b 	uxtb.w	fp, fp
 80136a0:	e7e7      	b.n	8013672 <_scanf_float+0x182>
 80136a2:	f1bb 0f03 	cmp.w	fp, #3
 80136a6:	d0f7      	beq.n	8013698 <_scanf_float+0x1a8>
 80136a8:	f1bb 0f05 	cmp.w	fp, #5
 80136ac:	e7f2      	b.n	8013694 <_scanf_float+0x1a4>
 80136ae:	f1bb 0f02 	cmp.w	fp, #2
 80136b2:	f47f af55 	bne.w	8013560 <_scanf_float+0x70>
 80136b6:	f04f 0b03 	mov.w	fp, #3
 80136ba:	e7da      	b.n	8013672 <_scanf_float+0x182>
 80136bc:	f1bb 0f06 	cmp.w	fp, #6
 80136c0:	f47f af4e 	bne.w	8013560 <_scanf_float+0x70>
 80136c4:	f04f 0b07 	mov.w	fp, #7
 80136c8:	e7d3      	b.n	8013672 <_scanf_float+0x182>
 80136ca:	6821      	ldr	r1, [r4, #0]
 80136cc:	0588      	lsls	r0, r1, #22
 80136ce:	f57f af47 	bpl.w	8013560 <_scanf_float+0x70>
 80136d2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80136d6:	6021      	str	r1, [r4, #0]
 80136d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80136dc:	e7c9      	b.n	8013672 <_scanf_float+0x182>
 80136de:	6821      	ldr	r1, [r4, #0]
 80136e0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80136e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80136e8:	d006      	beq.n	80136f8 <_scanf_float+0x208>
 80136ea:	0548      	lsls	r0, r1, #21
 80136ec:	f57f af38 	bpl.w	8013560 <_scanf_float+0x70>
 80136f0:	f1b9 0f00 	cmp.w	r9, #0
 80136f4:	f43f af3b 	beq.w	801356e <_scanf_float+0x7e>
 80136f8:	0588      	lsls	r0, r1, #22
 80136fa:	bf58      	it	pl
 80136fc:	9802      	ldrpl	r0, [sp, #8]
 80136fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013702:	bf58      	it	pl
 8013704:	eba9 0000 	subpl.w	r0, r9, r0
 8013708:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801370c:	bf58      	it	pl
 801370e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013712:	6021      	str	r1, [r4, #0]
 8013714:	f04f 0900 	mov.w	r9, #0
 8013718:	e7ab      	b.n	8013672 <_scanf_float+0x182>
 801371a:	2203      	movs	r2, #3
 801371c:	e7a9      	b.n	8013672 <_scanf_float+0x182>
 801371e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013722:	9205      	str	r2, [sp, #20]
 8013724:	4631      	mov	r1, r6
 8013726:	4638      	mov	r0, r7
 8013728:	4798      	blx	r3
 801372a:	9a05      	ldr	r2, [sp, #20]
 801372c:	2800      	cmp	r0, #0
 801372e:	f43f af04 	beq.w	801353a <_scanf_float+0x4a>
 8013732:	e715      	b.n	8013560 <_scanf_float+0x70>
 8013734:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013738:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801373c:	4632      	mov	r2, r6
 801373e:	4638      	mov	r0, r7
 8013740:	4798      	blx	r3
 8013742:	6923      	ldr	r3, [r4, #16]
 8013744:	3b01      	subs	r3, #1
 8013746:	6123      	str	r3, [r4, #16]
 8013748:	e715      	b.n	8013576 <_scanf_float+0x86>
 801374a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801374e:	2b06      	cmp	r3, #6
 8013750:	d80a      	bhi.n	8013768 <_scanf_float+0x278>
 8013752:	f1bb 0f02 	cmp.w	fp, #2
 8013756:	d968      	bls.n	801382a <_scanf_float+0x33a>
 8013758:	f1ab 0b03 	sub.w	fp, fp, #3
 801375c:	fa5f fb8b 	uxtb.w	fp, fp
 8013760:	eba5 0b0b 	sub.w	fp, r5, fp
 8013764:	455d      	cmp	r5, fp
 8013766:	d14b      	bne.n	8013800 <_scanf_float+0x310>
 8013768:	6823      	ldr	r3, [r4, #0]
 801376a:	05da      	lsls	r2, r3, #23
 801376c:	d51f      	bpl.n	80137ae <_scanf_float+0x2be>
 801376e:	055b      	lsls	r3, r3, #21
 8013770:	d468      	bmi.n	8013844 <_scanf_float+0x354>
 8013772:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013776:	6923      	ldr	r3, [r4, #16]
 8013778:	2965      	cmp	r1, #101	; 0x65
 801377a:	f103 33ff 	add.w	r3, r3, #4294967295
 801377e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013782:	6123      	str	r3, [r4, #16]
 8013784:	d00d      	beq.n	80137a2 <_scanf_float+0x2b2>
 8013786:	2945      	cmp	r1, #69	; 0x45
 8013788:	d00b      	beq.n	80137a2 <_scanf_float+0x2b2>
 801378a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801378e:	4632      	mov	r2, r6
 8013790:	4638      	mov	r0, r7
 8013792:	4798      	blx	r3
 8013794:	6923      	ldr	r3, [r4, #16]
 8013796:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801379a:	3b01      	subs	r3, #1
 801379c:	f1a5 0b02 	sub.w	fp, r5, #2
 80137a0:	6123      	str	r3, [r4, #16]
 80137a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137a6:	4632      	mov	r2, r6
 80137a8:	4638      	mov	r0, r7
 80137aa:	4798      	blx	r3
 80137ac:	465d      	mov	r5, fp
 80137ae:	6826      	ldr	r6, [r4, #0]
 80137b0:	f016 0610 	ands.w	r6, r6, #16
 80137b4:	d17a      	bne.n	80138ac <_scanf_float+0x3bc>
 80137b6:	702e      	strb	r6, [r5, #0]
 80137b8:	6823      	ldr	r3, [r4, #0]
 80137ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80137be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137c2:	d142      	bne.n	801384a <_scanf_float+0x35a>
 80137c4:	9b02      	ldr	r3, [sp, #8]
 80137c6:	eba9 0303 	sub.w	r3, r9, r3
 80137ca:	425a      	negs	r2, r3
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d149      	bne.n	8013864 <_scanf_float+0x374>
 80137d0:	2200      	movs	r2, #0
 80137d2:	4641      	mov	r1, r8
 80137d4:	4638      	mov	r0, r7
 80137d6:	f000 ffdf 	bl	8014798 <_strtod_r>
 80137da:	6825      	ldr	r5, [r4, #0]
 80137dc:	f8da 3000 	ldr.w	r3, [sl]
 80137e0:	f015 0f02 	tst.w	r5, #2
 80137e4:	f103 0204 	add.w	r2, r3, #4
 80137e8:	ec59 8b10 	vmov	r8, r9, d0
 80137ec:	f8ca 2000 	str.w	r2, [sl]
 80137f0:	d043      	beq.n	801387a <_scanf_float+0x38a>
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	e9c3 8900 	strd	r8, r9, [r3]
 80137f8:	68e3      	ldr	r3, [r4, #12]
 80137fa:	3301      	adds	r3, #1
 80137fc:	60e3      	str	r3, [r4, #12]
 80137fe:	e6be      	b.n	801357e <_scanf_float+0x8e>
 8013800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013804:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013808:	4632      	mov	r2, r6
 801380a:	4638      	mov	r0, r7
 801380c:	4798      	blx	r3
 801380e:	6923      	ldr	r3, [r4, #16]
 8013810:	3b01      	subs	r3, #1
 8013812:	6123      	str	r3, [r4, #16]
 8013814:	e7a6      	b.n	8013764 <_scanf_float+0x274>
 8013816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801381a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801381e:	4632      	mov	r2, r6
 8013820:	4638      	mov	r0, r7
 8013822:	4798      	blx	r3
 8013824:	6923      	ldr	r3, [r4, #16]
 8013826:	3b01      	subs	r3, #1
 8013828:	6123      	str	r3, [r4, #16]
 801382a:	4545      	cmp	r5, r8
 801382c:	d8f3      	bhi.n	8013816 <_scanf_float+0x326>
 801382e:	e6a5      	b.n	801357c <_scanf_float+0x8c>
 8013830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013834:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013838:	4632      	mov	r2, r6
 801383a:	4638      	mov	r0, r7
 801383c:	4798      	blx	r3
 801383e:	6923      	ldr	r3, [r4, #16]
 8013840:	3b01      	subs	r3, #1
 8013842:	6123      	str	r3, [r4, #16]
 8013844:	4545      	cmp	r5, r8
 8013846:	d8f3      	bhi.n	8013830 <_scanf_float+0x340>
 8013848:	e698      	b.n	801357c <_scanf_float+0x8c>
 801384a:	9b03      	ldr	r3, [sp, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d0bf      	beq.n	80137d0 <_scanf_float+0x2e0>
 8013850:	9904      	ldr	r1, [sp, #16]
 8013852:	230a      	movs	r3, #10
 8013854:	4632      	mov	r2, r6
 8013856:	3101      	adds	r1, #1
 8013858:	4638      	mov	r0, r7
 801385a:	f001 f829 	bl	80148b0 <_strtol_r>
 801385e:	9b03      	ldr	r3, [sp, #12]
 8013860:	9d04      	ldr	r5, [sp, #16]
 8013862:	1ac2      	subs	r2, r0, r3
 8013864:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013868:	429d      	cmp	r5, r3
 801386a:	bf28      	it	cs
 801386c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013870:	490f      	ldr	r1, [pc, #60]	; (80138b0 <_scanf_float+0x3c0>)
 8013872:	4628      	mov	r0, r5
 8013874:	f000 f8e8 	bl	8013a48 <siprintf>
 8013878:	e7aa      	b.n	80137d0 <_scanf_float+0x2e0>
 801387a:	f015 0504 	ands.w	r5, r5, #4
 801387e:	d1b8      	bne.n	80137f2 <_scanf_float+0x302>
 8013880:	681f      	ldr	r7, [r3, #0]
 8013882:	ee10 2a10 	vmov	r2, s0
 8013886:	464b      	mov	r3, r9
 8013888:	ee10 0a10 	vmov	r0, s0
 801388c:	4649      	mov	r1, r9
 801388e:	f7ed f965 	bl	8000b5c <__aeabi_dcmpun>
 8013892:	b128      	cbz	r0, 80138a0 <_scanf_float+0x3b0>
 8013894:	4628      	mov	r0, r5
 8013896:	f000 f89d 	bl	80139d4 <nanf>
 801389a:	ed87 0a00 	vstr	s0, [r7]
 801389e:	e7ab      	b.n	80137f8 <_scanf_float+0x308>
 80138a0:	4640      	mov	r0, r8
 80138a2:	4649      	mov	r1, r9
 80138a4:	f7ed f9b8 	bl	8000c18 <__aeabi_d2f>
 80138a8:	6038      	str	r0, [r7, #0]
 80138aa:	e7a5      	b.n	80137f8 <_scanf_float+0x308>
 80138ac:	2600      	movs	r6, #0
 80138ae:	e666      	b.n	801357e <_scanf_float+0x8e>
 80138b0:	08018256 	.word	0x08018256

080138b4 <iprintf>:
 80138b4:	b40f      	push	{r0, r1, r2, r3}
 80138b6:	4b0a      	ldr	r3, [pc, #40]	; (80138e0 <iprintf+0x2c>)
 80138b8:	b513      	push	{r0, r1, r4, lr}
 80138ba:	681c      	ldr	r4, [r3, #0]
 80138bc:	b124      	cbz	r4, 80138c8 <iprintf+0x14>
 80138be:	69a3      	ldr	r3, [r4, #24]
 80138c0:	b913      	cbnz	r3, 80138c8 <iprintf+0x14>
 80138c2:	4620      	mov	r0, r4
 80138c4:	f002 f83c 	bl	8015940 <__sinit>
 80138c8:	ab05      	add	r3, sp, #20
 80138ca:	9a04      	ldr	r2, [sp, #16]
 80138cc:	68a1      	ldr	r1, [r4, #8]
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	4620      	mov	r0, r4
 80138d2:	f003 fc73 	bl	80171bc <_vfiprintf_r>
 80138d6:	b002      	add	sp, #8
 80138d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138dc:	b004      	add	sp, #16
 80138de:	4770      	bx	lr
 80138e0:	2000000c 	.word	0x2000000c

080138e4 <putchar>:
 80138e4:	b538      	push	{r3, r4, r5, lr}
 80138e6:	4b08      	ldr	r3, [pc, #32]	; (8013908 <putchar+0x24>)
 80138e8:	681c      	ldr	r4, [r3, #0]
 80138ea:	4605      	mov	r5, r0
 80138ec:	b124      	cbz	r4, 80138f8 <putchar+0x14>
 80138ee:	69a3      	ldr	r3, [r4, #24]
 80138f0:	b913      	cbnz	r3, 80138f8 <putchar+0x14>
 80138f2:	4620      	mov	r0, r4
 80138f4:	f002 f824 	bl	8015940 <__sinit>
 80138f8:	68a2      	ldr	r2, [r4, #8]
 80138fa:	4629      	mov	r1, r5
 80138fc:	4620      	mov	r0, r4
 80138fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013902:	f003 bec9 	b.w	8017698 <_putc_r>
 8013906:	bf00      	nop
 8013908:	2000000c 	.word	0x2000000c

0801390c <_puts_r>:
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	460e      	mov	r6, r1
 8013910:	4605      	mov	r5, r0
 8013912:	b118      	cbz	r0, 801391c <_puts_r+0x10>
 8013914:	6983      	ldr	r3, [r0, #24]
 8013916:	b90b      	cbnz	r3, 801391c <_puts_r+0x10>
 8013918:	f002 f812 	bl	8015940 <__sinit>
 801391c:	69ab      	ldr	r3, [r5, #24]
 801391e:	68ac      	ldr	r4, [r5, #8]
 8013920:	b913      	cbnz	r3, 8013928 <_puts_r+0x1c>
 8013922:	4628      	mov	r0, r5
 8013924:	f002 f80c 	bl	8015940 <__sinit>
 8013928:	4b23      	ldr	r3, [pc, #140]	; (80139b8 <_puts_r+0xac>)
 801392a:	429c      	cmp	r4, r3
 801392c:	d117      	bne.n	801395e <_puts_r+0x52>
 801392e:	686c      	ldr	r4, [r5, #4]
 8013930:	89a3      	ldrh	r3, [r4, #12]
 8013932:	071b      	lsls	r3, r3, #28
 8013934:	d51d      	bpl.n	8013972 <_puts_r+0x66>
 8013936:	6923      	ldr	r3, [r4, #16]
 8013938:	b1db      	cbz	r3, 8013972 <_puts_r+0x66>
 801393a:	3e01      	subs	r6, #1
 801393c:	68a3      	ldr	r3, [r4, #8]
 801393e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013942:	3b01      	subs	r3, #1
 8013944:	60a3      	str	r3, [r4, #8]
 8013946:	b9e9      	cbnz	r1, 8013984 <_puts_r+0x78>
 8013948:	2b00      	cmp	r3, #0
 801394a:	da2e      	bge.n	80139aa <_puts_r+0x9e>
 801394c:	4622      	mov	r2, r4
 801394e:	210a      	movs	r1, #10
 8013950:	4628      	mov	r0, r5
 8013952:	f000 ffdf 	bl	8014914 <__swbuf_r>
 8013956:	3001      	adds	r0, #1
 8013958:	d011      	beq.n	801397e <_puts_r+0x72>
 801395a:	200a      	movs	r0, #10
 801395c:	e011      	b.n	8013982 <_puts_r+0x76>
 801395e:	4b17      	ldr	r3, [pc, #92]	; (80139bc <_puts_r+0xb0>)
 8013960:	429c      	cmp	r4, r3
 8013962:	d101      	bne.n	8013968 <_puts_r+0x5c>
 8013964:	68ac      	ldr	r4, [r5, #8]
 8013966:	e7e3      	b.n	8013930 <_puts_r+0x24>
 8013968:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <_puts_r+0xb4>)
 801396a:	429c      	cmp	r4, r3
 801396c:	bf08      	it	eq
 801396e:	68ec      	ldreq	r4, [r5, #12]
 8013970:	e7de      	b.n	8013930 <_puts_r+0x24>
 8013972:	4621      	mov	r1, r4
 8013974:	4628      	mov	r0, r5
 8013976:	f001 f831 	bl	80149dc <__swsetup_r>
 801397a:	2800      	cmp	r0, #0
 801397c:	d0dd      	beq.n	801393a <_puts_r+0x2e>
 801397e:	f04f 30ff 	mov.w	r0, #4294967295
 8013982:	bd70      	pop	{r4, r5, r6, pc}
 8013984:	2b00      	cmp	r3, #0
 8013986:	da04      	bge.n	8013992 <_puts_r+0x86>
 8013988:	69a2      	ldr	r2, [r4, #24]
 801398a:	429a      	cmp	r2, r3
 801398c:	dc06      	bgt.n	801399c <_puts_r+0x90>
 801398e:	290a      	cmp	r1, #10
 8013990:	d004      	beq.n	801399c <_puts_r+0x90>
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	1c5a      	adds	r2, r3, #1
 8013996:	6022      	str	r2, [r4, #0]
 8013998:	7019      	strb	r1, [r3, #0]
 801399a:	e7cf      	b.n	801393c <_puts_r+0x30>
 801399c:	4622      	mov	r2, r4
 801399e:	4628      	mov	r0, r5
 80139a0:	f000 ffb8 	bl	8014914 <__swbuf_r>
 80139a4:	3001      	adds	r0, #1
 80139a6:	d1c9      	bne.n	801393c <_puts_r+0x30>
 80139a8:	e7e9      	b.n	801397e <_puts_r+0x72>
 80139aa:	6823      	ldr	r3, [r4, #0]
 80139ac:	200a      	movs	r0, #10
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	6022      	str	r2, [r4, #0]
 80139b2:	7018      	strb	r0, [r3, #0]
 80139b4:	e7e5      	b.n	8013982 <_puts_r+0x76>
 80139b6:	bf00      	nop
 80139b8:	080182e0 	.word	0x080182e0
 80139bc:	08018300 	.word	0x08018300
 80139c0:	080182c0 	.word	0x080182c0

080139c4 <puts>:
 80139c4:	4b02      	ldr	r3, [pc, #8]	; (80139d0 <puts+0xc>)
 80139c6:	4601      	mov	r1, r0
 80139c8:	6818      	ldr	r0, [r3, #0]
 80139ca:	f7ff bf9f 	b.w	801390c <_puts_r>
 80139ce:	bf00      	nop
 80139d0:	2000000c 	.word	0x2000000c

080139d4 <nanf>:
 80139d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80139dc <nanf+0x8>
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop
 80139dc:	7fc00000 	.word	0x7fc00000

080139e0 <sniprintf>:
 80139e0:	b40c      	push	{r2, r3}
 80139e2:	b530      	push	{r4, r5, lr}
 80139e4:	4b17      	ldr	r3, [pc, #92]	; (8013a44 <sniprintf+0x64>)
 80139e6:	1e0c      	subs	r4, r1, #0
 80139e8:	b09d      	sub	sp, #116	; 0x74
 80139ea:	681d      	ldr	r5, [r3, #0]
 80139ec:	da08      	bge.n	8013a00 <sniprintf+0x20>
 80139ee:	238b      	movs	r3, #139	; 0x8b
 80139f0:	602b      	str	r3, [r5, #0]
 80139f2:	f04f 30ff 	mov.w	r0, #4294967295
 80139f6:	b01d      	add	sp, #116	; 0x74
 80139f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139fc:	b002      	add	sp, #8
 80139fe:	4770      	bx	lr
 8013a00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013a04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013a08:	bf14      	ite	ne
 8013a0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013a0e:	4623      	moveq	r3, r4
 8013a10:	9304      	str	r3, [sp, #16]
 8013a12:	9307      	str	r3, [sp, #28]
 8013a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a18:	9002      	str	r0, [sp, #8]
 8013a1a:	9006      	str	r0, [sp, #24]
 8013a1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013a22:	ab21      	add	r3, sp, #132	; 0x84
 8013a24:	a902      	add	r1, sp, #8
 8013a26:	4628      	mov	r0, r5
 8013a28:	9301      	str	r3, [sp, #4]
 8013a2a:	f003 f8fb 	bl	8016c24 <_svfiprintf_r>
 8013a2e:	1c43      	adds	r3, r0, #1
 8013a30:	bfbc      	itt	lt
 8013a32:	238b      	movlt	r3, #139	; 0x8b
 8013a34:	602b      	strlt	r3, [r5, #0]
 8013a36:	2c00      	cmp	r4, #0
 8013a38:	d0dd      	beq.n	80139f6 <sniprintf+0x16>
 8013a3a:	9b02      	ldr	r3, [sp, #8]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	701a      	strb	r2, [r3, #0]
 8013a40:	e7d9      	b.n	80139f6 <sniprintf+0x16>
 8013a42:	bf00      	nop
 8013a44:	2000000c 	.word	0x2000000c

08013a48 <siprintf>:
 8013a48:	b40e      	push	{r1, r2, r3}
 8013a4a:	b500      	push	{lr}
 8013a4c:	b09c      	sub	sp, #112	; 0x70
 8013a4e:	ab1d      	add	r3, sp, #116	; 0x74
 8013a50:	9002      	str	r0, [sp, #8]
 8013a52:	9006      	str	r0, [sp, #24]
 8013a54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a58:	4809      	ldr	r0, [pc, #36]	; (8013a80 <siprintf+0x38>)
 8013a5a:	9107      	str	r1, [sp, #28]
 8013a5c:	9104      	str	r1, [sp, #16]
 8013a5e:	4909      	ldr	r1, [pc, #36]	; (8013a84 <siprintf+0x3c>)
 8013a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a64:	9105      	str	r1, [sp, #20]
 8013a66:	6800      	ldr	r0, [r0, #0]
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	a902      	add	r1, sp, #8
 8013a6c:	f003 f8da 	bl	8016c24 <_svfiprintf_r>
 8013a70:	9b02      	ldr	r3, [sp, #8]
 8013a72:	2200      	movs	r2, #0
 8013a74:	701a      	strb	r2, [r3, #0]
 8013a76:	b01c      	add	sp, #112	; 0x70
 8013a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a7c:	b003      	add	sp, #12
 8013a7e:	4770      	bx	lr
 8013a80:	2000000c 	.word	0x2000000c
 8013a84:	ffff0208 	.word	0xffff0208

08013a88 <siscanf>:
 8013a88:	b40e      	push	{r1, r2, r3}
 8013a8a:	b530      	push	{r4, r5, lr}
 8013a8c:	b09c      	sub	sp, #112	; 0x70
 8013a8e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013a90:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013a94:	f854 5b04 	ldr.w	r5, [r4], #4
 8013a98:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a9c:	9002      	str	r0, [sp, #8]
 8013a9e:	9006      	str	r0, [sp, #24]
 8013aa0:	f7ec fbae 	bl	8000200 <strlen>
 8013aa4:	4b0b      	ldr	r3, [pc, #44]	; (8013ad4 <siscanf+0x4c>)
 8013aa6:	9003      	str	r0, [sp, #12]
 8013aa8:	9007      	str	r0, [sp, #28]
 8013aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aac:	480a      	ldr	r0, [pc, #40]	; (8013ad8 <siscanf+0x50>)
 8013aae:	9401      	str	r4, [sp, #4]
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ab4:	9314      	str	r3, [sp, #80]	; 0x50
 8013ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013aba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013abe:	462a      	mov	r2, r5
 8013ac0:	4623      	mov	r3, r4
 8013ac2:	a902      	add	r1, sp, #8
 8013ac4:	6800      	ldr	r0, [r0, #0]
 8013ac6:	f003 f9ff 	bl	8016ec8 <__ssvfiscanf_r>
 8013aca:	b01c      	add	sp, #112	; 0x70
 8013acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ad0:	b003      	add	sp, #12
 8013ad2:	4770      	bx	lr
 8013ad4:	08013aff 	.word	0x08013aff
 8013ad8:	2000000c 	.word	0x2000000c

08013adc <__sread>:
 8013adc:	b510      	push	{r4, lr}
 8013ade:	460c      	mov	r4, r1
 8013ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ae4:	f003 fe0e 	bl	8017704 <_read_r>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	bfab      	itete	ge
 8013aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013aee:	89a3      	ldrhlt	r3, [r4, #12]
 8013af0:	181b      	addge	r3, r3, r0
 8013af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013af6:	bfac      	ite	ge
 8013af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013afa:	81a3      	strhlt	r3, [r4, #12]
 8013afc:	bd10      	pop	{r4, pc}

08013afe <__seofread>:
 8013afe:	2000      	movs	r0, #0
 8013b00:	4770      	bx	lr

08013b02 <__swrite>:
 8013b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b06:	461f      	mov	r7, r3
 8013b08:	898b      	ldrh	r3, [r1, #12]
 8013b0a:	05db      	lsls	r3, r3, #23
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	4616      	mov	r6, r2
 8013b12:	d505      	bpl.n	8013b20 <__swrite+0x1e>
 8013b14:	2302      	movs	r3, #2
 8013b16:	2200      	movs	r2, #0
 8013b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1c:	f002 fae2 	bl	80160e4 <_lseek_r>
 8013b20:	89a3      	ldrh	r3, [r4, #12]
 8013b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b2a:	81a3      	strh	r3, [r4, #12]
 8013b2c:	4632      	mov	r2, r6
 8013b2e:	463b      	mov	r3, r7
 8013b30:	4628      	mov	r0, r5
 8013b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b36:	f000 bf3f 	b.w	80149b8 <_write_r>

08013b3a <__sseek>:
 8013b3a:	b510      	push	{r4, lr}
 8013b3c:	460c      	mov	r4, r1
 8013b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b42:	f002 facf 	bl	80160e4 <_lseek_r>
 8013b46:	1c43      	adds	r3, r0, #1
 8013b48:	89a3      	ldrh	r3, [r4, #12]
 8013b4a:	bf15      	itete	ne
 8013b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b56:	81a3      	strheq	r3, [r4, #12]
 8013b58:	bf18      	it	ne
 8013b5a:	81a3      	strhne	r3, [r4, #12]
 8013b5c:	bd10      	pop	{r4, pc}

08013b5e <__sclose>:
 8013b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b62:	f000 bfa9 	b.w	8014ab8 <_close_r>

08013b66 <strcpy>:
 8013b66:	4603      	mov	r3, r0
 8013b68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b6c:	f803 2b01 	strb.w	r2, [r3], #1
 8013b70:	2a00      	cmp	r2, #0
 8013b72:	d1f9      	bne.n	8013b68 <strcpy+0x2>
 8013b74:	4770      	bx	lr

08013b76 <sulp>:
 8013b76:	b570      	push	{r4, r5, r6, lr}
 8013b78:	4604      	mov	r4, r0
 8013b7a:	460d      	mov	r5, r1
 8013b7c:	ec45 4b10 	vmov	d0, r4, r5
 8013b80:	4616      	mov	r6, r2
 8013b82:	f002 fe0b 	bl	801679c <__ulp>
 8013b86:	ec51 0b10 	vmov	r0, r1, d0
 8013b8a:	b17e      	cbz	r6, 8013bac <sulp+0x36>
 8013b8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	dd09      	ble.n	8013bac <sulp+0x36>
 8013b98:	051b      	lsls	r3, r3, #20
 8013b9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b9e:	2400      	movs	r4, #0
 8013ba0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013ba4:	4622      	mov	r2, r4
 8013ba6:	462b      	mov	r3, r5
 8013ba8:	f7ec fd3e 	bl	8000628 <__aeabi_dmul>
 8013bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08013bb0 <_strtod_l>:
 8013bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb4:	461f      	mov	r7, r3
 8013bb6:	b0a1      	sub	sp, #132	; 0x84
 8013bb8:	2300      	movs	r3, #0
 8013bba:	4681      	mov	r9, r0
 8013bbc:	4638      	mov	r0, r7
 8013bbe:	460e      	mov	r6, r1
 8013bc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8013bc2:	931c      	str	r3, [sp, #112]	; 0x70
 8013bc4:	f002 fa7e 	bl	80160c4 <__localeconv_l>
 8013bc8:	4680      	mov	r8, r0
 8013bca:	6800      	ldr	r0, [r0, #0]
 8013bcc:	f7ec fb18 	bl	8000200 <strlen>
 8013bd0:	f04f 0a00 	mov.w	sl, #0
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	f04f 0b00 	mov.w	fp, #0
 8013bda:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bde:	781a      	ldrb	r2, [r3, #0]
 8013be0:	2a0d      	cmp	r2, #13
 8013be2:	d832      	bhi.n	8013c4a <_strtod_l+0x9a>
 8013be4:	2a09      	cmp	r2, #9
 8013be6:	d236      	bcs.n	8013c56 <_strtod_l+0xa6>
 8013be8:	2a00      	cmp	r2, #0
 8013bea:	d03e      	beq.n	8013c6a <_strtod_l+0xba>
 8013bec:	2300      	movs	r3, #0
 8013bee:	930d      	str	r3, [sp, #52]	; 0x34
 8013bf0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013bf2:	782b      	ldrb	r3, [r5, #0]
 8013bf4:	2b30      	cmp	r3, #48	; 0x30
 8013bf6:	f040 80ac 	bne.w	8013d52 <_strtod_l+0x1a2>
 8013bfa:	786b      	ldrb	r3, [r5, #1]
 8013bfc:	2b58      	cmp	r3, #88	; 0x58
 8013bfe:	d001      	beq.n	8013c04 <_strtod_l+0x54>
 8013c00:	2b78      	cmp	r3, #120	; 0x78
 8013c02:	d167      	bne.n	8013cd4 <_strtod_l+0x124>
 8013c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c06:	9301      	str	r3, [sp, #4]
 8013c08:	ab1c      	add	r3, sp, #112	; 0x70
 8013c0a:	9300      	str	r3, [sp, #0]
 8013c0c:	9702      	str	r7, [sp, #8]
 8013c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8013c10:	4a88      	ldr	r2, [pc, #544]	; (8013e34 <_strtod_l+0x284>)
 8013c12:	a91b      	add	r1, sp, #108	; 0x6c
 8013c14:	4648      	mov	r0, r9
 8013c16:	f001 ff6c 	bl	8015af2 <__gethex>
 8013c1a:	f010 0407 	ands.w	r4, r0, #7
 8013c1e:	4606      	mov	r6, r0
 8013c20:	d005      	beq.n	8013c2e <_strtod_l+0x7e>
 8013c22:	2c06      	cmp	r4, #6
 8013c24:	d12b      	bne.n	8013c7e <_strtod_l+0xce>
 8013c26:	3501      	adds	r5, #1
 8013c28:	2300      	movs	r3, #0
 8013c2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8013c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8013c2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f040 859a 	bne.w	801476a <_strtod_l+0xbba>
 8013c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c38:	b1e3      	cbz	r3, 8013c74 <_strtod_l+0xc4>
 8013c3a:	4652      	mov	r2, sl
 8013c3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c40:	ec43 2b10 	vmov	d0, r2, r3
 8013c44:	b021      	add	sp, #132	; 0x84
 8013c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c4a:	2a2b      	cmp	r2, #43	; 0x2b
 8013c4c:	d015      	beq.n	8013c7a <_strtod_l+0xca>
 8013c4e:	2a2d      	cmp	r2, #45	; 0x2d
 8013c50:	d004      	beq.n	8013c5c <_strtod_l+0xac>
 8013c52:	2a20      	cmp	r2, #32
 8013c54:	d1ca      	bne.n	8013bec <_strtod_l+0x3c>
 8013c56:	3301      	adds	r3, #1
 8013c58:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c5a:	e7bf      	b.n	8013bdc <_strtod_l+0x2c>
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	920d      	str	r2, [sp, #52]	; 0x34
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c64:	785b      	ldrb	r3, [r3, #1]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d1c2      	bne.n	8013bf0 <_strtod_l+0x40>
 8013c6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f040 8579 	bne.w	8014766 <_strtod_l+0xbb6>
 8013c74:	4652      	mov	r2, sl
 8013c76:	465b      	mov	r3, fp
 8013c78:	e7e2      	b.n	8013c40 <_strtod_l+0x90>
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	e7ef      	b.n	8013c5e <_strtod_l+0xae>
 8013c7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c80:	b13a      	cbz	r2, 8013c92 <_strtod_l+0xe2>
 8013c82:	2135      	movs	r1, #53	; 0x35
 8013c84:	a81e      	add	r0, sp, #120	; 0x78
 8013c86:	f002 fe81 	bl	801698c <__copybits>
 8013c8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c8c:	4648      	mov	r0, r9
 8013c8e:	f002 faed 	bl	801626c <_Bfree>
 8013c92:	3c01      	subs	r4, #1
 8013c94:	2c04      	cmp	r4, #4
 8013c96:	d806      	bhi.n	8013ca6 <_strtod_l+0xf6>
 8013c98:	e8df f004 	tbb	[pc, r4]
 8013c9c:	1714030a 	.word	0x1714030a
 8013ca0:	0a          	.byte	0x0a
 8013ca1:	00          	.byte	0x00
 8013ca2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013ca6:	0730      	lsls	r0, r6, #28
 8013ca8:	d5c1      	bpl.n	8013c2e <_strtod_l+0x7e>
 8013caa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013cae:	e7be      	b.n	8013c2e <_strtod_l+0x7e>
 8013cb0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013cb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013cb6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013cba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013cbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013cc2:	e7f0      	b.n	8013ca6 <_strtod_l+0xf6>
 8013cc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013e38 <_strtod_l+0x288>
 8013cc8:	e7ed      	b.n	8013ca6 <_strtod_l+0xf6>
 8013cca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013cce:	f04f 3aff 	mov.w	sl, #4294967295
 8013cd2:	e7e8      	b.n	8013ca6 <_strtod_l+0xf6>
 8013cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cd6:	1c5a      	adds	r2, r3, #1
 8013cd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cda:	785b      	ldrb	r3, [r3, #1]
 8013cdc:	2b30      	cmp	r3, #48	; 0x30
 8013cde:	d0f9      	beq.n	8013cd4 <_strtod_l+0x124>
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d0a4      	beq.n	8013c2e <_strtod_l+0x7e>
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	2500      	movs	r5, #0
 8013ce8:	9306      	str	r3, [sp, #24]
 8013cea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cec:	9308      	str	r3, [sp, #32]
 8013cee:	9507      	str	r5, [sp, #28]
 8013cf0:	9505      	str	r5, [sp, #20]
 8013cf2:	220a      	movs	r2, #10
 8013cf4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013cf6:	7807      	ldrb	r7, [r0, #0]
 8013cf8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013cfc:	b2d9      	uxtb	r1, r3
 8013cfe:	2909      	cmp	r1, #9
 8013d00:	d929      	bls.n	8013d56 <_strtod_l+0x1a6>
 8013d02:	4622      	mov	r2, r4
 8013d04:	f8d8 1000 	ldr.w	r1, [r8]
 8013d08:	f003 fd50 	bl	80177ac <strncmp>
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	d031      	beq.n	8013d74 <_strtod_l+0x1c4>
 8013d10:	2000      	movs	r0, #0
 8013d12:	9c05      	ldr	r4, [sp, #20]
 8013d14:	9004      	str	r0, [sp, #16]
 8013d16:	463b      	mov	r3, r7
 8013d18:	4602      	mov	r2, r0
 8013d1a:	2b65      	cmp	r3, #101	; 0x65
 8013d1c:	d001      	beq.n	8013d22 <_strtod_l+0x172>
 8013d1e:	2b45      	cmp	r3, #69	; 0x45
 8013d20:	d114      	bne.n	8013d4c <_strtod_l+0x19c>
 8013d22:	b924      	cbnz	r4, 8013d2e <_strtod_l+0x17e>
 8013d24:	b910      	cbnz	r0, 8013d2c <_strtod_l+0x17c>
 8013d26:	9b06      	ldr	r3, [sp, #24]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d09e      	beq.n	8013c6a <_strtod_l+0xba>
 8013d2c:	2400      	movs	r4, #0
 8013d2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013d30:	1c73      	adds	r3, r6, #1
 8013d32:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d34:	7873      	ldrb	r3, [r6, #1]
 8013d36:	2b2b      	cmp	r3, #43	; 0x2b
 8013d38:	d078      	beq.n	8013e2c <_strtod_l+0x27c>
 8013d3a:	2b2d      	cmp	r3, #45	; 0x2d
 8013d3c:	d070      	beq.n	8013e20 <_strtod_l+0x270>
 8013d3e:	f04f 0c00 	mov.w	ip, #0
 8013d42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013d46:	2f09      	cmp	r7, #9
 8013d48:	d97c      	bls.n	8013e44 <_strtod_l+0x294>
 8013d4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8013d4c:	f04f 0e00 	mov.w	lr, #0
 8013d50:	e09a      	b.n	8013e88 <_strtod_l+0x2d8>
 8013d52:	2300      	movs	r3, #0
 8013d54:	e7c7      	b.n	8013ce6 <_strtod_l+0x136>
 8013d56:	9905      	ldr	r1, [sp, #20]
 8013d58:	2908      	cmp	r1, #8
 8013d5a:	bfdd      	ittte	le
 8013d5c:	9907      	ldrle	r1, [sp, #28]
 8013d5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d62:	9307      	strle	r3, [sp, #28]
 8013d64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013d68:	9b05      	ldr	r3, [sp, #20]
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	9305      	str	r3, [sp, #20]
 8013d70:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d72:	e7bf      	b.n	8013cf4 <_strtod_l+0x144>
 8013d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d76:	191a      	adds	r2, r3, r4
 8013d78:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d7a:	9a05      	ldr	r2, [sp, #20]
 8013d7c:	5d1b      	ldrb	r3, [r3, r4]
 8013d7e:	2a00      	cmp	r2, #0
 8013d80:	d037      	beq.n	8013df2 <_strtod_l+0x242>
 8013d82:	9c05      	ldr	r4, [sp, #20]
 8013d84:	4602      	mov	r2, r0
 8013d86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013d8a:	2909      	cmp	r1, #9
 8013d8c:	d913      	bls.n	8013db6 <_strtod_l+0x206>
 8013d8e:	2101      	movs	r1, #1
 8013d90:	9104      	str	r1, [sp, #16]
 8013d92:	e7c2      	b.n	8013d1a <_strtod_l+0x16a>
 8013d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d96:	1c5a      	adds	r2, r3, #1
 8013d98:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d9a:	785b      	ldrb	r3, [r3, #1]
 8013d9c:	3001      	adds	r0, #1
 8013d9e:	2b30      	cmp	r3, #48	; 0x30
 8013da0:	d0f8      	beq.n	8013d94 <_strtod_l+0x1e4>
 8013da2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013da6:	2a08      	cmp	r2, #8
 8013da8:	f200 84e4 	bhi.w	8014774 <_strtod_l+0xbc4>
 8013dac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013dae:	9208      	str	r2, [sp, #32]
 8013db0:	4602      	mov	r2, r0
 8013db2:	2000      	movs	r0, #0
 8013db4:	4604      	mov	r4, r0
 8013db6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013dba:	f100 0101 	add.w	r1, r0, #1
 8013dbe:	d012      	beq.n	8013de6 <_strtod_l+0x236>
 8013dc0:	440a      	add	r2, r1
 8013dc2:	eb00 0c04 	add.w	ip, r0, r4
 8013dc6:	4621      	mov	r1, r4
 8013dc8:	270a      	movs	r7, #10
 8013dca:	458c      	cmp	ip, r1
 8013dcc:	d113      	bne.n	8013df6 <_strtod_l+0x246>
 8013dce:	1821      	adds	r1, r4, r0
 8013dd0:	2908      	cmp	r1, #8
 8013dd2:	f104 0401 	add.w	r4, r4, #1
 8013dd6:	4404      	add	r4, r0
 8013dd8:	dc19      	bgt.n	8013e0e <_strtod_l+0x25e>
 8013dda:	9b07      	ldr	r3, [sp, #28]
 8013ddc:	210a      	movs	r1, #10
 8013dde:	fb01 e303 	mla	r3, r1, r3, lr
 8013de2:	9307      	str	r3, [sp, #28]
 8013de4:	2100      	movs	r1, #0
 8013de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013de8:	1c58      	adds	r0, r3, #1
 8013dea:	901b      	str	r0, [sp, #108]	; 0x6c
 8013dec:	785b      	ldrb	r3, [r3, #1]
 8013dee:	4608      	mov	r0, r1
 8013df0:	e7c9      	b.n	8013d86 <_strtod_l+0x1d6>
 8013df2:	9805      	ldr	r0, [sp, #20]
 8013df4:	e7d3      	b.n	8013d9e <_strtod_l+0x1ee>
 8013df6:	2908      	cmp	r1, #8
 8013df8:	f101 0101 	add.w	r1, r1, #1
 8013dfc:	dc03      	bgt.n	8013e06 <_strtod_l+0x256>
 8013dfe:	9b07      	ldr	r3, [sp, #28]
 8013e00:	437b      	muls	r3, r7
 8013e02:	9307      	str	r3, [sp, #28]
 8013e04:	e7e1      	b.n	8013dca <_strtod_l+0x21a>
 8013e06:	2910      	cmp	r1, #16
 8013e08:	bfd8      	it	le
 8013e0a:	437d      	mulle	r5, r7
 8013e0c:	e7dd      	b.n	8013dca <_strtod_l+0x21a>
 8013e0e:	2c10      	cmp	r4, #16
 8013e10:	bfdc      	itt	le
 8013e12:	210a      	movle	r1, #10
 8013e14:	fb01 e505 	mlale	r5, r1, r5, lr
 8013e18:	e7e4      	b.n	8013de4 <_strtod_l+0x234>
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	9304      	str	r3, [sp, #16]
 8013e1e:	e781      	b.n	8013d24 <_strtod_l+0x174>
 8013e20:	f04f 0c01 	mov.w	ip, #1
 8013e24:	1cb3      	adds	r3, r6, #2
 8013e26:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e28:	78b3      	ldrb	r3, [r6, #2]
 8013e2a:	e78a      	b.n	8013d42 <_strtod_l+0x192>
 8013e2c:	f04f 0c00 	mov.w	ip, #0
 8013e30:	e7f8      	b.n	8013e24 <_strtod_l+0x274>
 8013e32:	bf00      	nop
 8013e34:	0801825c 	.word	0x0801825c
 8013e38:	7ff00000 	.word	0x7ff00000
 8013e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e3e:	1c5f      	adds	r7, r3, #1
 8013e40:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e42:	785b      	ldrb	r3, [r3, #1]
 8013e44:	2b30      	cmp	r3, #48	; 0x30
 8013e46:	d0f9      	beq.n	8013e3c <_strtod_l+0x28c>
 8013e48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013e4c:	2f08      	cmp	r7, #8
 8013e4e:	f63f af7d 	bhi.w	8013d4c <_strtod_l+0x19c>
 8013e52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013e56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e58:	930a      	str	r3, [sp, #40]	; 0x28
 8013e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e5c:	1c5f      	adds	r7, r3, #1
 8013e5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e60:	785b      	ldrb	r3, [r3, #1]
 8013e62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013e66:	f1b8 0f09 	cmp.w	r8, #9
 8013e6a:	d937      	bls.n	8013edc <_strtod_l+0x32c>
 8013e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e6e:	1a7f      	subs	r7, r7, r1
 8013e70:	2f08      	cmp	r7, #8
 8013e72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013e76:	dc37      	bgt.n	8013ee8 <_strtod_l+0x338>
 8013e78:	45be      	cmp	lr, r7
 8013e7a:	bfa8      	it	ge
 8013e7c:	46be      	movge	lr, r7
 8013e7e:	f1bc 0f00 	cmp.w	ip, #0
 8013e82:	d001      	beq.n	8013e88 <_strtod_l+0x2d8>
 8013e84:	f1ce 0e00 	rsb	lr, lr, #0
 8013e88:	2c00      	cmp	r4, #0
 8013e8a:	d151      	bne.n	8013f30 <_strtod_l+0x380>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	f47f aece 	bne.w	8013c2e <_strtod_l+0x7e>
 8013e92:	9a06      	ldr	r2, [sp, #24]
 8013e94:	2a00      	cmp	r2, #0
 8013e96:	f47f aeca 	bne.w	8013c2e <_strtod_l+0x7e>
 8013e9a:	9a04      	ldr	r2, [sp, #16]
 8013e9c:	2a00      	cmp	r2, #0
 8013e9e:	f47f aee4 	bne.w	8013c6a <_strtod_l+0xba>
 8013ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8013ea4:	d027      	beq.n	8013ef6 <_strtod_l+0x346>
 8013ea6:	dc21      	bgt.n	8013eec <_strtod_l+0x33c>
 8013ea8:	2b49      	cmp	r3, #73	; 0x49
 8013eaa:	f47f aede 	bne.w	8013c6a <_strtod_l+0xba>
 8013eae:	49a0      	ldr	r1, [pc, #640]	; (8014130 <_strtod_l+0x580>)
 8013eb0:	a81b      	add	r0, sp, #108	; 0x6c
 8013eb2:	f002 f851 	bl	8015f58 <__match>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	f43f aed7 	beq.w	8013c6a <_strtod_l+0xba>
 8013ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ebe:	499d      	ldr	r1, [pc, #628]	; (8014134 <_strtod_l+0x584>)
 8013ec0:	3b01      	subs	r3, #1
 8013ec2:	a81b      	add	r0, sp, #108	; 0x6c
 8013ec4:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ec6:	f002 f847 	bl	8015f58 <__match>
 8013eca:	b910      	cbnz	r0, 8013ed2 <_strtod_l+0x322>
 8013ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ece:	3301      	adds	r3, #1
 8013ed0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ed2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014148 <_strtod_l+0x598>
 8013ed6:	f04f 0a00 	mov.w	sl, #0
 8013eda:	e6a8      	b.n	8013c2e <_strtod_l+0x7e>
 8013edc:	210a      	movs	r1, #10
 8013ede:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013ee2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013ee6:	e7b8      	b.n	8013e5a <_strtod_l+0x2aa>
 8013ee8:	46be      	mov	lr, r7
 8013eea:	e7c8      	b.n	8013e7e <_strtod_l+0x2ce>
 8013eec:	2b69      	cmp	r3, #105	; 0x69
 8013eee:	d0de      	beq.n	8013eae <_strtod_l+0x2fe>
 8013ef0:	2b6e      	cmp	r3, #110	; 0x6e
 8013ef2:	f47f aeba 	bne.w	8013c6a <_strtod_l+0xba>
 8013ef6:	4990      	ldr	r1, [pc, #576]	; (8014138 <_strtod_l+0x588>)
 8013ef8:	a81b      	add	r0, sp, #108	; 0x6c
 8013efa:	f002 f82d 	bl	8015f58 <__match>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	f43f aeb3 	beq.w	8013c6a <_strtod_l+0xba>
 8013f04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	2b28      	cmp	r3, #40	; 0x28
 8013f0a:	d10e      	bne.n	8013f2a <_strtod_l+0x37a>
 8013f0c:	aa1e      	add	r2, sp, #120	; 0x78
 8013f0e:	498b      	ldr	r1, [pc, #556]	; (801413c <_strtod_l+0x58c>)
 8013f10:	a81b      	add	r0, sp, #108	; 0x6c
 8013f12:	f002 f835 	bl	8015f80 <__hexnan>
 8013f16:	2805      	cmp	r0, #5
 8013f18:	d107      	bne.n	8013f2a <_strtod_l+0x37a>
 8013f1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013f20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013f24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013f28:	e681      	b.n	8013c2e <_strtod_l+0x7e>
 8013f2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014150 <_strtod_l+0x5a0>
 8013f2e:	e7d2      	b.n	8013ed6 <_strtod_l+0x326>
 8013f30:	ebae 0302 	sub.w	r3, lr, r2
 8013f34:	9306      	str	r3, [sp, #24]
 8013f36:	9b05      	ldr	r3, [sp, #20]
 8013f38:	9807      	ldr	r0, [sp, #28]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	bf08      	it	eq
 8013f3e:	4623      	moveq	r3, r4
 8013f40:	2c10      	cmp	r4, #16
 8013f42:	9305      	str	r3, [sp, #20]
 8013f44:	46a0      	mov	r8, r4
 8013f46:	bfa8      	it	ge
 8013f48:	f04f 0810 	movge.w	r8, #16
 8013f4c:	f7ec faf2 	bl	8000534 <__aeabi_ui2d>
 8013f50:	2c09      	cmp	r4, #9
 8013f52:	4682      	mov	sl, r0
 8013f54:	468b      	mov	fp, r1
 8013f56:	dc13      	bgt.n	8013f80 <_strtod_l+0x3d0>
 8013f58:	9b06      	ldr	r3, [sp, #24]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f43f ae67 	beq.w	8013c2e <_strtod_l+0x7e>
 8013f60:	9b06      	ldr	r3, [sp, #24]
 8013f62:	dd7a      	ble.n	801405a <_strtod_l+0x4aa>
 8013f64:	2b16      	cmp	r3, #22
 8013f66:	dc61      	bgt.n	801402c <_strtod_l+0x47c>
 8013f68:	4a75      	ldr	r2, [pc, #468]	; (8014140 <_strtod_l+0x590>)
 8013f6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013f6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8013f72:	4652      	mov	r2, sl
 8013f74:	465b      	mov	r3, fp
 8013f76:	f7ec fb57 	bl	8000628 <__aeabi_dmul>
 8013f7a:	4682      	mov	sl, r0
 8013f7c:	468b      	mov	fp, r1
 8013f7e:	e656      	b.n	8013c2e <_strtod_l+0x7e>
 8013f80:	4b6f      	ldr	r3, [pc, #444]	; (8014140 <_strtod_l+0x590>)
 8013f82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f8a:	f7ec fb4d 	bl	8000628 <__aeabi_dmul>
 8013f8e:	4606      	mov	r6, r0
 8013f90:	4628      	mov	r0, r5
 8013f92:	460f      	mov	r7, r1
 8013f94:	f7ec face 	bl	8000534 <__aeabi_ui2d>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	f7ec f98c 	bl	80002bc <__adddf3>
 8013fa4:	2c0f      	cmp	r4, #15
 8013fa6:	4682      	mov	sl, r0
 8013fa8:	468b      	mov	fp, r1
 8013faa:	ddd5      	ble.n	8013f58 <_strtod_l+0x3a8>
 8013fac:	9b06      	ldr	r3, [sp, #24]
 8013fae:	eba4 0808 	sub.w	r8, r4, r8
 8013fb2:	4498      	add	r8, r3
 8013fb4:	f1b8 0f00 	cmp.w	r8, #0
 8013fb8:	f340 8096 	ble.w	80140e8 <_strtod_l+0x538>
 8013fbc:	f018 030f 	ands.w	r3, r8, #15
 8013fc0:	d00a      	beq.n	8013fd8 <_strtod_l+0x428>
 8013fc2:	495f      	ldr	r1, [pc, #380]	; (8014140 <_strtod_l+0x590>)
 8013fc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013fc8:	4652      	mov	r2, sl
 8013fca:	465b      	mov	r3, fp
 8013fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fd0:	f7ec fb2a 	bl	8000628 <__aeabi_dmul>
 8013fd4:	4682      	mov	sl, r0
 8013fd6:	468b      	mov	fp, r1
 8013fd8:	f038 080f 	bics.w	r8, r8, #15
 8013fdc:	d073      	beq.n	80140c6 <_strtod_l+0x516>
 8013fde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013fe2:	dd47      	ble.n	8014074 <_strtod_l+0x4c4>
 8013fe4:	2400      	movs	r4, #0
 8013fe6:	46a0      	mov	r8, r4
 8013fe8:	9407      	str	r4, [sp, #28]
 8013fea:	9405      	str	r4, [sp, #20]
 8013fec:	2322      	movs	r3, #34	; 0x22
 8013fee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014148 <_strtod_l+0x598>
 8013ff2:	f8c9 3000 	str.w	r3, [r9]
 8013ff6:	f04f 0a00 	mov.w	sl, #0
 8013ffa:	9b07      	ldr	r3, [sp, #28]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f43f ae16 	beq.w	8013c2e <_strtod_l+0x7e>
 8014002:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014004:	4648      	mov	r0, r9
 8014006:	f002 f931 	bl	801626c <_Bfree>
 801400a:	9905      	ldr	r1, [sp, #20]
 801400c:	4648      	mov	r0, r9
 801400e:	f002 f92d 	bl	801626c <_Bfree>
 8014012:	4641      	mov	r1, r8
 8014014:	4648      	mov	r0, r9
 8014016:	f002 f929 	bl	801626c <_Bfree>
 801401a:	9907      	ldr	r1, [sp, #28]
 801401c:	4648      	mov	r0, r9
 801401e:	f002 f925 	bl	801626c <_Bfree>
 8014022:	4621      	mov	r1, r4
 8014024:	4648      	mov	r0, r9
 8014026:	f002 f921 	bl	801626c <_Bfree>
 801402a:	e600      	b.n	8013c2e <_strtod_l+0x7e>
 801402c:	9a06      	ldr	r2, [sp, #24]
 801402e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014032:	4293      	cmp	r3, r2
 8014034:	dbba      	blt.n	8013fac <_strtod_l+0x3fc>
 8014036:	4d42      	ldr	r5, [pc, #264]	; (8014140 <_strtod_l+0x590>)
 8014038:	f1c4 040f 	rsb	r4, r4, #15
 801403c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014040:	4652      	mov	r2, sl
 8014042:	465b      	mov	r3, fp
 8014044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014048:	f7ec faee 	bl	8000628 <__aeabi_dmul>
 801404c:	9b06      	ldr	r3, [sp, #24]
 801404e:	1b1c      	subs	r4, r3, r4
 8014050:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014054:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014058:	e78d      	b.n	8013f76 <_strtod_l+0x3c6>
 801405a:	f113 0f16 	cmn.w	r3, #22
 801405e:	dba5      	blt.n	8013fac <_strtod_l+0x3fc>
 8014060:	4a37      	ldr	r2, [pc, #220]	; (8014140 <_strtod_l+0x590>)
 8014062:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014066:	e9d2 2300 	ldrd	r2, r3, [r2]
 801406a:	4650      	mov	r0, sl
 801406c:	4659      	mov	r1, fp
 801406e:	f7ec fc05 	bl	800087c <__aeabi_ddiv>
 8014072:	e782      	b.n	8013f7a <_strtod_l+0x3ca>
 8014074:	2300      	movs	r3, #0
 8014076:	4e33      	ldr	r6, [pc, #204]	; (8014144 <_strtod_l+0x594>)
 8014078:	ea4f 1828 	mov.w	r8, r8, asr #4
 801407c:	4650      	mov	r0, sl
 801407e:	4659      	mov	r1, fp
 8014080:	461d      	mov	r5, r3
 8014082:	f1b8 0f01 	cmp.w	r8, #1
 8014086:	dc21      	bgt.n	80140cc <_strtod_l+0x51c>
 8014088:	b10b      	cbz	r3, 801408e <_strtod_l+0x4de>
 801408a:	4682      	mov	sl, r0
 801408c:	468b      	mov	fp, r1
 801408e:	4b2d      	ldr	r3, [pc, #180]	; (8014144 <_strtod_l+0x594>)
 8014090:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014094:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014098:	4652      	mov	r2, sl
 801409a:	465b      	mov	r3, fp
 801409c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80140a0:	f7ec fac2 	bl	8000628 <__aeabi_dmul>
 80140a4:	4b28      	ldr	r3, [pc, #160]	; (8014148 <_strtod_l+0x598>)
 80140a6:	460a      	mov	r2, r1
 80140a8:	400b      	ands	r3, r1
 80140aa:	4928      	ldr	r1, [pc, #160]	; (801414c <_strtod_l+0x59c>)
 80140ac:	428b      	cmp	r3, r1
 80140ae:	4682      	mov	sl, r0
 80140b0:	d898      	bhi.n	8013fe4 <_strtod_l+0x434>
 80140b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80140b6:	428b      	cmp	r3, r1
 80140b8:	bf86      	itte	hi
 80140ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014154 <_strtod_l+0x5a4>
 80140be:	f04f 3aff 	movhi.w	sl, #4294967295
 80140c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80140c6:	2300      	movs	r3, #0
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	e077      	b.n	80141bc <_strtod_l+0x60c>
 80140cc:	f018 0f01 	tst.w	r8, #1
 80140d0:	d006      	beq.n	80140e0 <_strtod_l+0x530>
 80140d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80140d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140da:	f7ec faa5 	bl	8000628 <__aeabi_dmul>
 80140de:	2301      	movs	r3, #1
 80140e0:	3501      	adds	r5, #1
 80140e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80140e6:	e7cc      	b.n	8014082 <_strtod_l+0x4d2>
 80140e8:	d0ed      	beq.n	80140c6 <_strtod_l+0x516>
 80140ea:	f1c8 0800 	rsb	r8, r8, #0
 80140ee:	f018 020f 	ands.w	r2, r8, #15
 80140f2:	d00a      	beq.n	801410a <_strtod_l+0x55a>
 80140f4:	4b12      	ldr	r3, [pc, #72]	; (8014140 <_strtod_l+0x590>)
 80140f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140fa:	4650      	mov	r0, sl
 80140fc:	4659      	mov	r1, fp
 80140fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014102:	f7ec fbbb 	bl	800087c <__aeabi_ddiv>
 8014106:	4682      	mov	sl, r0
 8014108:	468b      	mov	fp, r1
 801410a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801410e:	d0da      	beq.n	80140c6 <_strtod_l+0x516>
 8014110:	f1b8 0f1f 	cmp.w	r8, #31
 8014114:	dd20      	ble.n	8014158 <_strtod_l+0x5a8>
 8014116:	2400      	movs	r4, #0
 8014118:	46a0      	mov	r8, r4
 801411a:	9407      	str	r4, [sp, #28]
 801411c:	9405      	str	r4, [sp, #20]
 801411e:	2322      	movs	r3, #34	; 0x22
 8014120:	f04f 0a00 	mov.w	sl, #0
 8014124:	f04f 0b00 	mov.w	fp, #0
 8014128:	f8c9 3000 	str.w	r3, [r9]
 801412c:	e765      	b.n	8013ffa <_strtod_l+0x44a>
 801412e:	bf00      	nop
 8014130:	08018229 	.word	0x08018229
 8014134:	080182b3 	.word	0x080182b3
 8014138:	08018231 	.word	0x08018231
 801413c:	08018270 	.word	0x08018270
 8014140:	08018358 	.word	0x08018358
 8014144:	08018330 	.word	0x08018330
 8014148:	7ff00000 	.word	0x7ff00000
 801414c:	7ca00000 	.word	0x7ca00000
 8014150:	fff80000 	.word	0xfff80000
 8014154:	7fefffff 	.word	0x7fefffff
 8014158:	f018 0310 	ands.w	r3, r8, #16
 801415c:	bf18      	it	ne
 801415e:	236a      	movne	r3, #106	; 0x6a
 8014160:	4da0      	ldr	r5, [pc, #640]	; (80143e4 <_strtod_l+0x834>)
 8014162:	9304      	str	r3, [sp, #16]
 8014164:	4650      	mov	r0, sl
 8014166:	4659      	mov	r1, fp
 8014168:	2300      	movs	r3, #0
 801416a:	f1b8 0f00 	cmp.w	r8, #0
 801416e:	f300 810a 	bgt.w	8014386 <_strtod_l+0x7d6>
 8014172:	b10b      	cbz	r3, 8014178 <_strtod_l+0x5c8>
 8014174:	4682      	mov	sl, r0
 8014176:	468b      	mov	fp, r1
 8014178:	9b04      	ldr	r3, [sp, #16]
 801417a:	b1bb      	cbz	r3, 80141ac <_strtod_l+0x5fc>
 801417c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014180:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014184:	2b00      	cmp	r3, #0
 8014186:	4659      	mov	r1, fp
 8014188:	dd10      	ble.n	80141ac <_strtod_l+0x5fc>
 801418a:	2b1f      	cmp	r3, #31
 801418c:	f340 8107 	ble.w	801439e <_strtod_l+0x7ee>
 8014190:	2b34      	cmp	r3, #52	; 0x34
 8014192:	bfde      	ittt	le
 8014194:	3b20      	suble	r3, #32
 8014196:	f04f 32ff 	movle.w	r2, #4294967295
 801419a:	fa02 f303 	lslle.w	r3, r2, r3
 801419e:	f04f 0a00 	mov.w	sl, #0
 80141a2:	bfcc      	ite	gt
 80141a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80141a8:	ea03 0b01 	andle.w	fp, r3, r1
 80141ac:	2200      	movs	r2, #0
 80141ae:	2300      	movs	r3, #0
 80141b0:	4650      	mov	r0, sl
 80141b2:	4659      	mov	r1, fp
 80141b4:	f7ec fca0 	bl	8000af8 <__aeabi_dcmpeq>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d1ac      	bne.n	8014116 <_strtod_l+0x566>
 80141bc:	9b07      	ldr	r3, [sp, #28]
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	9a05      	ldr	r2, [sp, #20]
 80141c2:	9908      	ldr	r1, [sp, #32]
 80141c4:	4623      	mov	r3, r4
 80141c6:	4648      	mov	r0, r9
 80141c8:	f002 f8a2 	bl	8016310 <__s2b>
 80141cc:	9007      	str	r0, [sp, #28]
 80141ce:	2800      	cmp	r0, #0
 80141d0:	f43f af08 	beq.w	8013fe4 <_strtod_l+0x434>
 80141d4:	9a06      	ldr	r2, [sp, #24]
 80141d6:	9b06      	ldr	r3, [sp, #24]
 80141d8:	2a00      	cmp	r2, #0
 80141da:	f1c3 0300 	rsb	r3, r3, #0
 80141de:	bfa8      	it	ge
 80141e0:	2300      	movge	r3, #0
 80141e2:	930e      	str	r3, [sp, #56]	; 0x38
 80141e4:	2400      	movs	r4, #0
 80141e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80141ea:	9316      	str	r3, [sp, #88]	; 0x58
 80141ec:	46a0      	mov	r8, r4
 80141ee:	9b07      	ldr	r3, [sp, #28]
 80141f0:	4648      	mov	r0, r9
 80141f2:	6859      	ldr	r1, [r3, #4]
 80141f4:	f002 f806 	bl	8016204 <_Balloc>
 80141f8:	9005      	str	r0, [sp, #20]
 80141fa:	2800      	cmp	r0, #0
 80141fc:	f43f aef6 	beq.w	8013fec <_strtod_l+0x43c>
 8014200:	9b07      	ldr	r3, [sp, #28]
 8014202:	691a      	ldr	r2, [r3, #16]
 8014204:	3202      	adds	r2, #2
 8014206:	f103 010c 	add.w	r1, r3, #12
 801420a:	0092      	lsls	r2, r2, #2
 801420c:	300c      	adds	r0, #12
 801420e:	f7fe fcff 	bl	8012c10 <memcpy>
 8014212:	aa1e      	add	r2, sp, #120	; 0x78
 8014214:	a91d      	add	r1, sp, #116	; 0x74
 8014216:	ec4b ab10 	vmov	d0, sl, fp
 801421a:	4648      	mov	r0, r9
 801421c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014220:	f002 fb32 	bl	8016888 <__d2b>
 8014224:	901c      	str	r0, [sp, #112]	; 0x70
 8014226:	2800      	cmp	r0, #0
 8014228:	f43f aee0 	beq.w	8013fec <_strtod_l+0x43c>
 801422c:	2101      	movs	r1, #1
 801422e:	4648      	mov	r0, r9
 8014230:	f002 f8fa 	bl	8016428 <__i2b>
 8014234:	4680      	mov	r8, r0
 8014236:	2800      	cmp	r0, #0
 8014238:	f43f aed8 	beq.w	8013fec <_strtod_l+0x43c>
 801423c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801423e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014240:	2e00      	cmp	r6, #0
 8014242:	bfab      	itete	ge
 8014244:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014246:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014248:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801424a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801424c:	bfac      	ite	ge
 801424e:	18f7      	addge	r7, r6, r3
 8014250:	1b9d      	sublt	r5, r3, r6
 8014252:	9b04      	ldr	r3, [sp, #16]
 8014254:	1af6      	subs	r6, r6, r3
 8014256:	4416      	add	r6, r2
 8014258:	4b63      	ldr	r3, [pc, #396]	; (80143e8 <_strtod_l+0x838>)
 801425a:	3e01      	subs	r6, #1
 801425c:	429e      	cmp	r6, r3
 801425e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014262:	f280 80af 	bge.w	80143c4 <_strtod_l+0x814>
 8014266:	1b9b      	subs	r3, r3, r6
 8014268:	2b1f      	cmp	r3, #31
 801426a:	eba2 0203 	sub.w	r2, r2, r3
 801426e:	f04f 0101 	mov.w	r1, #1
 8014272:	f300 809b 	bgt.w	80143ac <_strtod_l+0x7fc>
 8014276:	fa01 f303 	lsl.w	r3, r1, r3
 801427a:	930f      	str	r3, [sp, #60]	; 0x3c
 801427c:	2300      	movs	r3, #0
 801427e:	930a      	str	r3, [sp, #40]	; 0x28
 8014280:	18be      	adds	r6, r7, r2
 8014282:	9b04      	ldr	r3, [sp, #16]
 8014284:	42b7      	cmp	r7, r6
 8014286:	4415      	add	r5, r2
 8014288:	441d      	add	r5, r3
 801428a:	463b      	mov	r3, r7
 801428c:	bfa8      	it	ge
 801428e:	4633      	movge	r3, r6
 8014290:	42ab      	cmp	r3, r5
 8014292:	bfa8      	it	ge
 8014294:	462b      	movge	r3, r5
 8014296:	2b00      	cmp	r3, #0
 8014298:	bfc2      	ittt	gt
 801429a:	1af6      	subgt	r6, r6, r3
 801429c:	1aed      	subgt	r5, r5, r3
 801429e:	1aff      	subgt	r7, r7, r3
 80142a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142a2:	b1bb      	cbz	r3, 80142d4 <_strtod_l+0x724>
 80142a4:	4641      	mov	r1, r8
 80142a6:	461a      	mov	r2, r3
 80142a8:	4648      	mov	r0, r9
 80142aa:	f002 f95d 	bl	8016568 <__pow5mult>
 80142ae:	4680      	mov	r8, r0
 80142b0:	2800      	cmp	r0, #0
 80142b2:	f43f ae9b 	beq.w	8013fec <_strtod_l+0x43c>
 80142b6:	4601      	mov	r1, r0
 80142b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142ba:	4648      	mov	r0, r9
 80142bc:	f002 f8bd 	bl	801643a <__multiply>
 80142c0:	900c      	str	r0, [sp, #48]	; 0x30
 80142c2:	2800      	cmp	r0, #0
 80142c4:	f43f ae92 	beq.w	8013fec <_strtod_l+0x43c>
 80142c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142ca:	4648      	mov	r0, r9
 80142cc:	f001 ffce 	bl	801626c <_Bfree>
 80142d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142d2:	931c      	str	r3, [sp, #112]	; 0x70
 80142d4:	2e00      	cmp	r6, #0
 80142d6:	dc7a      	bgt.n	80143ce <_strtod_l+0x81e>
 80142d8:	9b06      	ldr	r3, [sp, #24]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	dd08      	ble.n	80142f0 <_strtod_l+0x740>
 80142de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142e0:	9905      	ldr	r1, [sp, #20]
 80142e2:	4648      	mov	r0, r9
 80142e4:	f002 f940 	bl	8016568 <__pow5mult>
 80142e8:	9005      	str	r0, [sp, #20]
 80142ea:	2800      	cmp	r0, #0
 80142ec:	f43f ae7e 	beq.w	8013fec <_strtod_l+0x43c>
 80142f0:	2d00      	cmp	r5, #0
 80142f2:	dd08      	ble.n	8014306 <_strtod_l+0x756>
 80142f4:	462a      	mov	r2, r5
 80142f6:	9905      	ldr	r1, [sp, #20]
 80142f8:	4648      	mov	r0, r9
 80142fa:	f002 f983 	bl	8016604 <__lshift>
 80142fe:	9005      	str	r0, [sp, #20]
 8014300:	2800      	cmp	r0, #0
 8014302:	f43f ae73 	beq.w	8013fec <_strtod_l+0x43c>
 8014306:	2f00      	cmp	r7, #0
 8014308:	dd08      	ble.n	801431c <_strtod_l+0x76c>
 801430a:	4641      	mov	r1, r8
 801430c:	463a      	mov	r2, r7
 801430e:	4648      	mov	r0, r9
 8014310:	f002 f978 	bl	8016604 <__lshift>
 8014314:	4680      	mov	r8, r0
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f ae68 	beq.w	8013fec <_strtod_l+0x43c>
 801431c:	9a05      	ldr	r2, [sp, #20]
 801431e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014320:	4648      	mov	r0, r9
 8014322:	f002 f9dd 	bl	80166e0 <__mdiff>
 8014326:	4604      	mov	r4, r0
 8014328:	2800      	cmp	r0, #0
 801432a:	f43f ae5f 	beq.w	8013fec <_strtod_l+0x43c>
 801432e:	68c3      	ldr	r3, [r0, #12]
 8014330:	930c      	str	r3, [sp, #48]	; 0x30
 8014332:	2300      	movs	r3, #0
 8014334:	60c3      	str	r3, [r0, #12]
 8014336:	4641      	mov	r1, r8
 8014338:	f002 f9b8 	bl	80166ac <__mcmp>
 801433c:	2800      	cmp	r0, #0
 801433e:	da55      	bge.n	80143ec <_strtod_l+0x83c>
 8014340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014342:	b9e3      	cbnz	r3, 801437e <_strtod_l+0x7ce>
 8014344:	f1ba 0f00 	cmp.w	sl, #0
 8014348:	d119      	bne.n	801437e <_strtod_l+0x7ce>
 801434a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801434e:	b9b3      	cbnz	r3, 801437e <_strtod_l+0x7ce>
 8014350:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014354:	0d1b      	lsrs	r3, r3, #20
 8014356:	051b      	lsls	r3, r3, #20
 8014358:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801435c:	d90f      	bls.n	801437e <_strtod_l+0x7ce>
 801435e:	6963      	ldr	r3, [r4, #20]
 8014360:	b913      	cbnz	r3, 8014368 <_strtod_l+0x7b8>
 8014362:	6923      	ldr	r3, [r4, #16]
 8014364:	2b01      	cmp	r3, #1
 8014366:	dd0a      	ble.n	801437e <_strtod_l+0x7ce>
 8014368:	4621      	mov	r1, r4
 801436a:	2201      	movs	r2, #1
 801436c:	4648      	mov	r0, r9
 801436e:	f002 f949 	bl	8016604 <__lshift>
 8014372:	4641      	mov	r1, r8
 8014374:	4604      	mov	r4, r0
 8014376:	f002 f999 	bl	80166ac <__mcmp>
 801437a:	2800      	cmp	r0, #0
 801437c:	dc67      	bgt.n	801444e <_strtod_l+0x89e>
 801437e:	9b04      	ldr	r3, [sp, #16]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d171      	bne.n	8014468 <_strtod_l+0x8b8>
 8014384:	e63d      	b.n	8014002 <_strtod_l+0x452>
 8014386:	f018 0f01 	tst.w	r8, #1
 801438a:	d004      	beq.n	8014396 <_strtod_l+0x7e6>
 801438c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014390:	f7ec f94a 	bl	8000628 <__aeabi_dmul>
 8014394:	2301      	movs	r3, #1
 8014396:	ea4f 0868 	mov.w	r8, r8, asr #1
 801439a:	3508      	adds	r5, #8
 801439c:	e6e5      	b.n	801416a <_strtod_l+0x5ba>
 801439e:	f04f 32ff 	mov.w	r2, #4294967295
 80143a2:	fa02 f303 	lsl.w	r3, r2, r3
 80143a6:	ea03 0a0a 	and.w	sl, r3, sl
 80143aa:	e6ff      	b.n	80141ac <_strtod_l+0x5fc>
 80143ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80143b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80143b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80143b8:	36e2      	adds	r6, #226	; 0xe2
 80143ba:	fa01 f306 	lsl.w	r3, r1, r6
 80143be:	930a      	str	r3, [sp, #40]	; 0x28
 80143c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80143c2:	e75d      	b.n	8014280 <_strtod_l+0x6d0>
 80143c4:	2300      	movs	r3, #0
 80143c6:	930a      	str	r3, [sp, #40]	; 0x28
 80143c8:	2301      	movs	r3, #1
 80143ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80143cc:	e758      	b.n	8014280 <_strtod_l+0x6d0>
 80143ce:	4632      	mov	r2, r6
 80143d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143d2:	4648      	mov	r0, r9
 80143d4:	f002 f916 	bl	8016604 <__lshift>
 80143d8:	901c      	str	r0, [sp, #112]	; 0x70
 80143da:	2800      	cmp	r0, #0
 80143dc:	f47f af7c 	bne.w	80142d8 <_strtod_l+0x728>
 80143e0:	e604      	b.n	8013fec <_strtod_l+0x43c>
 80143e2:	bf00      	nop
 80143e4:	08018288 	.word	0x08018288
 80143e8:	fffffc02 	.word	0xfffffc02
 80143ec:	465d      	mov	r5, fp
 80143ee:	f040 8086 	bne.w	80144fe <_strtod_l+0x94e>
 80143f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143f8:	b32a      	cbz	r2, 8014446 <_strtod_l+0x896>
 80143fa:	4aaf      	ldr	r2, [pc, #700]	; (80146b8 <_strtod_l+0xb08>)
 80143fc:	4293      	cmp	r3, r2
 80143fe:	d153      	bne.n	80144a8 <_strtod_l+0x8f8>
 8014400:	9b04      	ldr	r3, [sp, #16]
 8014402:	4650      	mov	r0, sl
 8014404:	b1d3      	cbz	r3, 801443c <_strtod_l+0x88c>
 8014406:	4aad      	ldr	r2, [pc, #692]	; (80146bc <_strtod_l+0xb0c>)
 8014408:	402a      	ands	r2, r5
 801440a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801440e:	f04f 31ff 	mov.w	r1, #4294967295
 8014412:	d816      	bhi.n	8014442 <_strtod_l+0x892>
 8014414:	0d12      	lsrs	r2, r2, #20
 8014416:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801441a:	fa01 f303 	lsl.w	r3, r1, r3
 801441e:	4298      	cmp	r0, r3
 8014420:	d142      	bne.n	80144a8 <_strtod_l+0x8f8>
 8014422:	4ba7      	ldr	r3, [pc, #668]	; (80146c0 <_strtod_l+0xb10>)
 8014424:	429d      	cmp	r5, r3
 8014426:	d102      	bne.n	801442e <_strtod_l+0x87e>
 8014428:	3001      	adds	r0, #1
 801442a:	f43f addf 	beq.w	8013fec <_strtod_l+0x43c>
 801442e:	4ba3      	ldr	r3, [pc, #652]	; (80146bc <_strtod_l+0xb0c>)
 8014430:	402b      	ands	r3, r5
 8014432:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014436:	f04f 0a00 	mov.w	sl, #0
 801443a:	e7a0      	b.n	801437e <_strtod_l+0x7ce>
 801443c:	f04f 33ff 	mov.w	r3, #4294967295
 8014440:	e7ed      	b.n	801441e <_strtod_l+0x86e>
 8014442:	460b      	mov	r3, r1
 8014444:	e7eb      	b.n	801441e <_strtod_l+0x86e>
 8014446:	bb7b      	cbnz	r3, 80144a8 <_strtod_l+0x8f8>
 8014448:	f1ba 0f00 	cmp.w	sl, #0
 801444c:	d12c      	bne.n	80144a8 <_strtod_l+0x8f8>
 801444e:	9904      	ldr	r1, [sp, #16]
 8014450:	4a9a      	ldr	r2, [pc, #616]	; (80146bc <_strtod_l+0xb0c>)
 8014452:	465b      	mov	r3, fp
 8014454:	b1f1      	cbz	r1, 8014494 <_strtod_l+0x8e4>
 8014456:	ea02 010b 	and.w	r1, r2, fp
 801445a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801445e:	dc19      	bgt.n	8014494 <_strtod_l+0x8e4>
 8014460:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014464:	f77f ae5b 	ble.w	801411e <_strtod_l+0x56e>
 8014468:	4a96      	ldr	r2, [pc, #600]	; (80146c4 <_strtod_l+0xb14>)
 801446a:	2300      	movs	r3, #0
 801446c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014470:	4650      	mov	r0, sl
 8014472:	4659      	mov	r1, fp
 8014474:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014478:	f7ec f8d6 	bl	8000628 <__aeabi_dmul>
 801447c:	4682      	mov	sl, r0
 801447e:	468b      	mov	fp, r1
 8014480:	2900      	cmp	r1, #0
 8014482:	f47f adbe 	bne.w	8014002 <_strtod_l+0x452>
 8014486:	2800      	cmp	r0, #0
 8014488:	f47f adbb 	bne.w	8014002 <_strtod_l+0x452>
 801448c:	2322      	movs	r3, #34	; 0x22
 801448e:	f8c9 3000 	str.w	r3, [r9]
 8014492:	e5b6      	b.n	8014002 <_strtod_l+0x452>
 8014494:	4013      	ands	r3, r2
 8014496:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801449a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801449e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80144a2:	f04f 3aff 	mov.w	sl, #4294967295
 80144a6:	e76a      	b.n	801437e <_strtod_l+0x7ce>
 80144a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144aa:	b193      	cbz	r3, 80144d2 <_strtod_l+0x922>
 80144ac:	422b      	tst	r3, r5
 80144ae:	f43f af66 	beq.w	801437e <_strtod_l+0x7ce>
 80144b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144b4:	9a04      	ldr	r2, [sp, #16]
 80144b6:	4650      	mov	r0, sl
 80144b8:	4659      	mov	r1, fp
 80144ba:	b173      	cbz	r3, 80144da <_strtod_l+0x92a>
 80144bc:	f7ff fb5b 	bl	8013b76 <sulp>
 80144c0:	4602      	mov	r2, r0
 80144c2:	460b      	mov	r3, r1
 80144c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144c8:	f7eb fef8 	bl	80002bc <__adddf3>
 80144cc:	4682      	mov	sl, r0
 80144ce:	468b      	mov	fp, r1
 80144d0:	e755      	b.n	801437e <_strtod_l+0x7ce>
 80144d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144d4:	ea13 0f0a 	tst.w	r3, sl
 80144d8:	e7e9      	b.n	80144ae <_strtod_l+0x8fe>
 80144da:	f7ff fb4c 	bl	8013b76 <sulp>
 80144de:	4602      	mov	r2, r0
 80144e0:	460b      	mov	r3, r1
 80144e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144e6:	f7eb fee7 	bl	80002b8 <__aeabi_dsub>
 80144ea:	2200      	movs	r2, #0
 80144ec:	2300      	movs	r3, #0
 80144ee:	4682      	mov	sl, r0
 80144f0:	468b      	mov	fp, r1
 80144f2:	f7ec fb01 	bl	8000af8 <__aeabi_dcmpeq>
 80144f6:	2800      	cmp	r0, #0
 80144f8:	f47f ae11 	bne.w	801411e <_strtod_l+0x56e>
 80144fc:	e73f      	b.n	801437e <_strtod_l+0x7ce>
 80144fe:	4641      	mov	r1, r8
 8014500:	4620      	mov	r0, r4
 8014502:	f002 fa10 	bl	8016926 <__ratio>
 8014506:	ec57 6b10 	vmov	r6, r7, d0
 801450a:	2200      	movs	r2, #0
 801450c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014510:	ee10 0a10 	vmov	r0, s0
 8014514:	4639      	mov	r1, r7
 8014516:	f7ec fb03 	bl	8000b20 <__aeabi_dcmple>
 801451a:	2800      	cmp	r0, #0
 801451c:	d077      	beq.n	801460e <_strtod_l+0xa5e>
 801451e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014520:	2b00      	cmp	r3, #0
 8014522:	d04a      	beq.n	80145ba <_strtod_l+0xa0a>
 8014524:	4b68      	ldr	r3, [pc, #416]	; (80146c8 <_strtod_l+0xb18>)
 8014526:	2200      	movs	r2, #0
 8014528:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801452c:	4f66      	ldr	r7, [pc, #408]	; (80146c8 <_strtod_l+0xb18>)
 801452e:	2600      	movs	r6, #0
 8014530:	4b62      	ldr	r3, [pc, #392]	; (80146bc <_strtod_l+0xb0c>)
 8014532:	402b      	ands	r3, r5
 8014534:	930f      	str	r3, [sp, #60]	; 0x3c
 8014536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014538:	4b64      	ldr	r3, [pc, #400]	; (80146cc <_strtod_l+0xb1c>)
 801453a:	429a      	cmp	r2, r3
 801453c:	f040 80ce 	bne.w	80146dc <_strtod_l+0xb2c>
 8014540:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014544:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014548:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801454c:	ec4b ab10 	vmov	d0, sl, fp
 8014550:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014554:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014558:	f002 f920 	bl	801679c <__ulp>
 801455c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014560:	ec53 2b10 	vmov	r2, r3, d0
 8014564:	f7ec f860 	bl	8000628 <__aeabi_dmul>
 8014568:	4652      	mov	r2, sl
 801456a:	465b      	mov	r3, fp
 801456c:	f7eb fea6 	bl	80002bc <__adddf3>
 8014570:	460b      	mov	r3, r1
 8014572:	4952      	ldr	r1, [pc, #328]	; (80146bc <_strtod_l+0xb0c>)
 8014574:	4a56      	ldr	r2, [pc, #344]	; (80146d0 <_strtod_l+0xb20>)
 8014576:	4019      	ands	r1, r3
 8014578:	4291      	cmp	r1, r2
 801457a:	4682      	mov	sl, r0
 801457c:	d95b      	bls.n	8014636 <_strtod_l+0xa86>
 801457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014580:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014584:	4293      	cmp	r3, r2
 8014586:	d103      	bne.n	8014590 <_strtod_l+0x9e0>
 8014588:	9b08      	ldr	r3, [sp, #32]
 801458a:	3301      	adds	r3, #1
 801458c:	f43f ad2e 	beq.w	8013fec <_strtod_l+0x43c>
 8014590:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80146c0 <_strtod_l+0xb10>
 8014594:	f04f 3aff 	mov.w	sl, #4294967295
 8014598:	991c      	ldr	r1, [sp, #112]	; 0x70
 801459a:	4648      	mov	r0, r9
 801459c:	f001 fe66 	bl	801626c <_Bfree>
 80145a0:	9905      	ldr	r1, [sp, #20]
 80145a2:	4648      	mov	r0, r9
 80145a4:	f001 fe62 	bl	801626c <_Bfree>
 80145a8:	4641      	mov	r1, r8
 80145aa:	4648      	mov	r0, r9
 80145ac:	f001 fe5e 	bl	801626c <_Bfree>
 80145b0:	4621      	mov	r1, r4
 80145b2:	4648      	mov	r0, r9
 80145b4:	f001 fe5a 	bl	801626c <_Bfree>
 80145b8:	e619      	b.n	80141ee <_strtod_l+0x63e>
 80145ba:	f1ba 0f00 	cmp.w	sl, #0
 80145be:	d11a      	bne.n	80145f6 <_strtod_l+0xa46>
 80145c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145c4:	b9eb      	cbnz	r3, 8014602 <_strtod_l+0xa52>
 80145c6:	2200      	movs	r2, #0
 80145c8:	4b3f      	ldr	r3, [pc, #252]	; (80146c8 <_strtod_l+0xb18>)
 80145ca:	4630      	mov	r0, r6
 80145cc:	4639      	mov	r1, r7
 80145ce:	f7ec fa9d 	bl	8000b0c <__aeabi_dcmplt>
 80145d2:	b9c8      	cbnz	r0, 8014608 <_strtod_l+0xa58>
 80145d4:	4630      	mov	r0, r6
 80145d6:	4639      	mov	r1, r7
 80145d8:	2200      	movs	r2, #0
 80145da:	4b3e      	ldr	r3, [pc, #248]	; (80146d4 <_strtod_l+0xb24>)
 80145dc:	f7ec f824 	bl	8000628 <__aeabi_dmul>
 80145e0:	4606      	mov	r6, r0
 80145e2:	460f      	mov	r7, r1
 80145e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80145e8:	9618      	str	r6, [sp, #96]	; 0x60
 80145ea:	9319      	str	r3, [sp, #100]	; 0x64
 80145ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80145f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80145f4:	e79c      	b.n	8014530 <_strtod_l+0x980>
 80145f6:	f1ba 0f01 	cmp.w	sl, #1
 80145fa:	d102      	bne.n	8014602 <_strtod_l+0xa52>
 80145fc:	2d00      	cmp	r5, #0
 80145fe:	f43f ad8e 	beq.w	801411e <_strtod_l+0x56e>
 8014602:	2200      	movs	r2, #0
 8014604:	4b34      	ldr	r3, [pc, #208]	; (80146d8 <_strtod_l+0xb28>)
 8014606:	e78f      	b.n	8014528 <_strtod_l+0x978>
 8014608:	2600      	movs	r6, #0
 801460a:	4f32      	ldr	r7, [pc, #200]	; (80146d4 <_strtod_l+0xb24>)
 801460c:	e7ea      	b.n	80145e4 <_strtod_l+0xa34>
 801460e:	4b31      	ldr	r3, [pc, #196]	; (80146d4 <_strtod_l+0xb24>)
 8014610:	4630      	mov	r0, r6
 8014612:	4639      	mov	r1, r7
 8014614:	2200      	movs	r2, #0
 8014616:	f7ec f807 	bl	8000628 <__aeabi_dmul>
 801461a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801461c:	4606      	mov	r6, r0
 801461e:	460f      	mov	r7, r1
 8014620:	b933      	cbnz	r3, 8014630 <_strtod_l+0xa80>
 8014622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014626:	9010      	str	r0, [sp, #64]	; 0x40
 8014628:	9311      	str	r3, [sp, #68]	; 0x44
 801462a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801462e:	e7df      	b.n	80145f0 <_strtod_l+0xa40>
 8014630:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014634:	e7f9      	b.n	801462a <_strtod_l+0xa7a>
 8014636:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801463a:	9b04      	ldr	r3, [sp, #16]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d1ab      	bne.n	8014598 <_strtod_l+0x9e8>
 8014640:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014644:	0d1b      	lsrs	r3, r3, #20
 8014646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014648:	051b      	lsls	r3, r3, #20
 801464a:	429a      	cmp	r2, r3
 801464c:	465d      	mov	r5, fp
 801464e:	d1a3      	bne.n	8014598 <_strtod_l+0x9e8>
 8014650:	4639      	mov	r1, r7
 8014652:	4630      	mov	r0, r6
 8014654:	f7ec fa98 	bl	8000b88 <__aeabi_d2iz>
 8014658:	f7eb ff7c 	bl	8000554 <__aeabi_i2d>
 801465c:	460b      	mov	r3, r1
 801465e:	4602      	mov	r2, r0
 8014660:	4639      	mov	r1, r7
 8014662:	4630      	mov	r0, r6
 8014664:	f7eb fe28 	bl	80002b8 <__aeabi_dsub>
 8014668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801466a:	4606      	mov	r6, r0
 801466c:	460f      	mov	r7, r1
 801466e:	b933      	cbnz	r3, 801467e <_strtod_l+0xace>
 8014670:	f1ba 0f00 	cmp.w	sl, #0
 8014674:	d103      	bne.n	801467e <_strtod_l+0xace>
 8014676:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801467a:	2d00      	cmp	r5, #0
 801467c:	d06d      	beq.n	801475a <_strtod_l+0xbaa>
 801467e:	a30a      	add	r3, pc, #40	; (adr r3, 80146a8 <_strtod_l+0xaf8>)
 8014680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014684:	4630      	mov	r0, r6
 8014686:	4639      	mov	r1, r7
 8014688:	f7ec fa40 	bl	8000b0c <__aeabi_dcmplt>
 801468c:	2800      	cmp	r0, #0
 801468e:	f47f acb8 	bne.w	8014002 <_strtod_l+0x452>
 8014692:	a307      	add	r3, pc, #28	; (adr r3, 80146b0 <_strtod_l+0xb00>)
 8014694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014698:	4630      	mov	r0, r6
 801469a:	4639      	mov	r1, r7
 801469c:	f7ec fa54 	bl	8000b48 <__aeabi_dcmpgt>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	f43f af79 	beq.w	8014598 <_strtod_l+0x9e8>
 80146a6:	e4ac      	b.n	8014002 <_strtod_l+0x452>
 80146a8:	94a03595 	.word	0x94a03595
 80146ac:	3fdfffff 	.word	0x3fdfffff
 80146b0:	35afe535 	.word	0x35afe535
 80146b4:	3fe00000 	.word	0x3fe00000
 80146b8:	000fffff 	.word	0x000fffff
 80146bc:	7ff00000 	.word	0x7ff00000
 80146c0:	7fefffff 	.word	0x7fefffff
 80146c4:	39500000 	.word	0x39500000
 80146c8:	3ff00000 	.word	0x3ff00000
 80146cc:	7fe00000 	.word	0x7fe00000
 80146d0:	7c9fffff 	.word	0x7c9fffff
 80146d4:	3fe00000 	.word	0x3fe00000
 80146d8:	bff00000 	.word	0xbff00000
 80146dc:	9b04      	ldr	r3, [sp, #16]
 80146de:	b333      	cbz	r3, 801472e <_strtod_l+0xb7e>
 80146e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146e6:	d822      	bhi.n	801472e <_strtod_l+0xb7e>
 80146e8:	a327      	add	r3, pc, #156	; (adr r3, 8014788 <_strtod_l+0xbd8>)
 80146ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ee:	4630      	mov	r0, r6
 80146f0:	4639      	mov	r1, r7
 80146f2:	f7ec fa15 	bl	8000b20 <__aeabi_dcmple>
 80146f6:	b1a0      	cbz	r0, 8014722 <_strtod_l+0xb72>
 80146f8:	4639      	mov	r1, r7
 80146fa:	4630      	mov	r0, r6
 80146fc:	f7ec fa6c 	bl	8000bd8 <__aeabi_d2uiz>
 8014700:	2800      	cmp	r0, #0
 8014702:	bf08      	it	eq
 8014704:	2001      	moveq	r0, #1
 8014706:	f7eb ff15 	bl	8000534 <__aeabi_ui2d>
 801470a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801470c:	4606      	mov	r6, r0
 801470e:	460f      	mov	r7, r1
 8014710:	bb03      	cbnz	r3, 8014754 <_strtod_l+0xba4>
 8014712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014716:	9012      	str	r0, [sp, #72]	; 0x48
 8014718:	9313      	str	r3, [sp, #76]	; 0x4c
 801471a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801471e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014726:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801472a:	1a9b      	subs	r3, r3, r2
 801472c:	930b      	str	r3, [sp, #44]	; 0x2c
 801472e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014732:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014736:	f002 f831 	bl	801679c <__ulp>
 801473a:	4650      	mov	r0, sl
 801473c:	ec53 2b10 	vmov	r2, r3, d0
 8014740:	4659      	mov	r1, fp
 8014742:	f7eb ff71 	bl	8000628 <__aeabi_dmul>
 8014746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801474a:	f7eb fdb7 	bl	80002bc <__adddf3>
 801474e:	4682      	mov	sl, r0
 8014750:	468b      	mov	fp, r1
 8014752:	e772      	b.n	801463a <_strtod_l+0xa8a>
 8014754:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014758:	e7df      	b.n	801471a <_strtod_l+0xb6a>
 801475a:	a30d      	add	r3, pc, #52	; (adr r3, 8014790 <_strtod_l+0xbe0>)
 801475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014760:	f7ec f9d4 	bl	8000b0c <__aeabi_dcmplt>
 8014764:	e79c      	b.n	80146a0 <_strtod_l+0xaf0>
 8014766:	2300      	movs	r3, #0
 8014768:	930d      	str	r3, [sp, #52]	; 0x34
 801476a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801476c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801476e:	6013      	str	r3, [r2, #0]
 8014770:	f7ff ba61 	b.w	8013c36 <_strtod_l+0x86>
 8014774:	2b65      	cmp	r3, #101	; 0x65
 8014776:	f04f 0200 	mov.w	r2, #0
 801477a:	f43f ab4e 	beq.w	8013e1a <_strtod_l+0x26a>
 801477e:	2101      	movs	r1, #1
 8014780:	4614      	mov	r4, r2
 8014782:	9104      	str	r1, [sp, #16]
 8014784:	f7ff bacb 	b.w	8013d1e <_strtod_l+0x16e>
 8014788:	ffc00000 	.word	0xffc00000
 801478c:	41dfffff 	.word	0x41dfffff
 8014790:	94a03595 	.word	0x94a03595
 8014794:	3fcfffff 	.word	0x3fcfffff

08014798 <_strtod_r>:
 8014798:	4b05      	ldr	r3, [pc, #20]	; (80147b0 <_strtod_r+0x18>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	b410      	push	{r4}
 801479e:	6a1b      	ldr	r3, [r3, #32]
 80147a0:	4c04      	ldr	r4, [pc, #16]	; (80147b4 <_strtod_r+0x1c>)
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	bf08      	it	eq
 80147a6:	4623      	moveq	r3, r4
 80147a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ac:	f7ff ba00 	b.w	8013bb0 <_strtod_l>
 80147b0:	2000000c 	.word	0x2000000c
 80147b4:	20000070 	.word	0x20000070

080147b8 <_strtol_l.isra.0>:
 80147b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147bc:	4680      	mov	r8, r0
 80147be:	4689      	mov	r9, r1
 80147c0:	4692      	mov	sl, r2
 80147c2:	461e      	mov	r6, r3
 80147c4:	460f      	mov	r7, r1
 80147c6:	463d      	mov	r5, r7
 80147c8:	9808      	ldr	r0, [sp, #32]
 80147ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147ce:	f001 fc67 	bl	80160a0 <__locale_ctype_ptr_l>
 80147d2:	4420      	add	r0, r4
 80147d4:	7843      	ldrb	r3, [r0, #1]
 80147d6:	f013 0308 	ands.w	r3, r3, #8
 80147da:	d132      	bne.n	8014842 <_strtol_l.isra.0+0x8a>
 80147dc:	2c2d      	cmp	r4, #45	; 0x2d
 80147de:	d132      	bne.n	8014846 <_strtol_l.isra.0+0x8e>
 80147e0:	787c      	ldrb	r4, [r7, #1]
 80147e2:	1cbd      	adds	r5, r7, #2
 80147e4:	2201      	movs	r2, #1
 80147e6:	2e00      	cmp	r6, #0
 80147e8:	d05d      	beq.n	80148a6 <_strtol_l.isra.0+0xee>
 80147ea:	2e10      	cmp	r6, #16
 80147ec:	d109      	bne.n	8014802 <_strtol_l.isra.0+0x4a>
 80147ee:	2c30      	cmp	r4, #48	; 0x30
 80147f0:	d107      	bne.n	8014802 <_strtol_l.isra.0+0x4a>
 80147f2:	782b      	ldrb	r3, [r5, #0]
 80147f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80147f8:	2b58      	cmp	r3, #88	; 0x58
 80147fa:	d14f      	bne.n	801489c <_strtol_l.isra.0+0xe4>
 80147fc:	786c      	ldrb	r4, [r5, #1]
 80147fe:	2610      	movs	r6, #16
 8014800:	3502      	adds	r5, #2
 8014802:	2a00      	cmp	r2, #0
 8014804:	bf14      	ite	ne
 8014806:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801480a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801480e:	2700      	movs	r7, #0
 8014810:	fbb1 fcf6 	udiv	ip, r1, r6
 8014814:	4638      	mov	r0, r7
 8014816:	fb06 1e1c 	mls	lr, r6, ip, r1
 801481a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801481e:	2b09      	cmp	r3, #9
 8014820:	d817      	bhi.n	8014852 <_strtol_l.isra.0+0x9a>
 8014822:	461c      	mov	r4, r3
 8014824:	42a6      	cmp	r6, r4
 8014826:	dd23      	ble.n	8014870 <_strtol_l.isra.0+0xb8>
 8014828:	1c7b      	adds	r3, r7, #1
 801482a:	d007      	beq.n	801483c <_strtol_l.isra.0+0x84>
 801482c:	4584      	cmp	ip, r0
 801482e:	d31c      	bcc.n	801486a <_strtol_l.isra.0+0xb2>
 8014830:	d101      	bne.n	8014836 <_strtol_l.isra.0+0x7e>
 8014832:	45a6      	cmp	lr, r4
 8014834:	db19      	blt.n	801486a <_strtol_l.isra.0+0xb2>
 8014836:	fb00 4006 	mla	r0, r0, r6, r4
 801483a:	2701      	movs	r7, #1
 801483c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014840:	e7eb      	b.n	801481a <_strtol_l.isra.0+0x62>
 8014842:	462f      	mov	r7, r5
 8014844:	e7bf      	b.n	80147c6 <_strtol_l.isra.0+0xe>
 8014846:	2c2b      	cmp	r4, #43	; 0x2b
 8014848:	bf04      	itt	eq
 801484a:	1cbd      	addeq	r5, r7, #2
 801484c:	787c      	ldrbeq	r4, [r7, #1]
 801484e:	461a      	mov	r2, r3
 8014850:	e7c9      	b.n	80147e6 <_strtol_l.isra.0+0x2e>
 8014852:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014856:	2b19      	cmp	r3, #25
 8014858:	d801      	bhi.n	801485e <_strtol_l.isra.0+0xa6>
 801485a:	3c37      	subs	r4, #55	; 0x37
 801485c:	e7e2      	b.n	8014824 <_strtol_l.isra.0+0x6c>
 801485e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014862:	2b19      	cmp	r3, #25
 8014864:	d804      	bhi.n	8014870 <_strtol_l.isra.0+0xb8>
 8014866:	3c57      	subs	r4, #87	; 0x57
 8014868:	e7dc      	b.n	8014824 <_strtol_l.isra.0+0x6c>
 801486a:	f04f 37ff 	mov.w	r7, #4294967295
 801486e:	e7e5      	b.n	801483c <_strtol_l.isra.0+0x84>
 8014870:	1c7b      	adds	r3, r7, #1
 8014872:	d108      	bne.n	8014886 <_strtol_l.isra.0+0xce>
 8014874:	2322      	movs	r3, #34	; 0x22
 8014876:	f8c8 3000 	str.w	r3, [r8]
 801487a:	4608      	mov	r0, r1
 801487c:	f1ba 0f00 	cmp.w	sl, #0
 8014880:	d107      	bne.n	8014892 <_strtol_l.isra.0+0xda>
 8014882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014886:	b102      	cbz	r2, 801488a <_strtol_l.isra.0+0xd2>
 8014888:	4240      	negs	r0, r0
 801488a:	f1ba 0f00 	cmp.w	sl, #0
 801488e:	d0f8      	beq.n	8014882 <_strtol_l.isra.0+0xca>
 8014890:	b10f      	cbz	r7, 8014896 <_strtol_l.isra.0+0xde>
 8014892:	f105 39ff 	add.w	r9, r5, #4294967295
 8014896:	f8ca 9000 	str.w	r9, [sl]
 801489a:	e7f2      	b.n	8014882 <_strtol_l.isra.0+0xca>
 801489c:	2430      	movs	r4, #48	; 0x30
 801489e:	2e00      	cmp	r6, #0
 80148a0:	d1af      	bne.n	8014802 <_strtol_l.isra.0+0x4a>
 80148a2:	2608      	movs	r6, #8
 80148a4:	e7ad      	b.n	8014802 <_strtol_l.isra.0+0x4a>
 80148a6:	2c30      	cmp	r4, #48	; 0x30
 80148a8:	d0a3      	beq.n	80147f2 <_strtol_l.isra.0+0x3a>
 80148aa:	260a      	movs	r6, #10
 80148ac:	e7a9      	b.n	8014802 <_strtol_l.isra.0+0x4a>
	...

080148b0 <_strtol_r>:
 80148b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148b2:	4c06      	ldr	r4, [pc, #24]	; (80148cc <_strtol_r+0x1c>)
 80148b4:	4d06      	ldr	r5, [pc, #24]	; (80148d0 <_strtol_r+0x20>)
 80148b6:	6824      	ldr	r4, [r4, #0]
 80148b8:	6a24      	ldr	r4, [r4, #32]
 80148ba:	2c00      	cmp	r4, #0
 80148bc:	bf08      	it	eq
 80148be:	462c      	moveq	r4, r5
 80148c0:	9400      	str	r4, [sp, #0]
 80148c2:	f7ff ff79 	bl	80147b8 <_strtol_l.isra.0>
 80148c6:	b003      	add	sp, #12
 80148c8:	bd30      	pop	{r4, r5, pc}
 80148ca:	bf00      	nop
 80148cc:	2000000c 	.word	0x2000000c
 80148d0:	20000070 	.word	0x20000070

080148d4 <_vsiprintf_r>:
 80148d4:	b500      	push	{lr}
 80148d6:	b09b      	sub	sp, #108	; 0x6c
 80148d8:	9100      	str	r1, [sp, #0]
 80148da:	9104      	str	r1, [sp, #16]
 80148dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80148e0:	9105      	str	r1, [sp, #20]
 80148e2:	9102      	str	r1, [sp, #8]
 80148e4:	4905      	ldr	r1, [pc, #20]	; (80148fc <_vsiprintf_r+0x28>)
 80148e6:	9103      	str	r1, [sp, #12]
 80148e8:	4669      	mov	r1, sp
 80148ea:	f002 f99b 	bl	8016c24 <_svfiprintf_r>
 80148ee:	9b00      	ldr	r3, [sp, #0]
 80148f0:	2200      	movs	r2, #0
 80148f2:	701a      	strb	r2, [r3, #0]
 80148f4:	b01b      	add	sp, #108	; 0x6c
 80148f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80148fa:	bf00      	nop
 80148fc:	ffff0208 	.word	0xffff0208

08014900 <vsiprintf>:
 8014900:	4613      	mov	r3, r2
 8014902:	460a      	mov	r2, r1
 8014904:	4601      	mov	r1, r0
 8014906:	4802      	ldr	r0, [pc, #8]	; (8014910 <vsiprintf+0x10>)
 8014908:	6800      	ldr	r0, [r0, #0]
 801490a:	f7ff bfe3 	b.w	80148d4 <_vsiprintf_r>
 801490e:	bf00      	nop
 8014910:	2000000c 	.word	0x2000000c

08014914 <__swbuf_r>:
 8014914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014916:	460e      	mov	r6, r1
 8014918:	4614      	mov	r4, r2
 801491a:	4605      	mov	r5, r0
 801491c:	b118      	cbz	r0, 8014926 <__swbuf_r+0x12>
 801491e:	6983      	ldr	r3, [r0, #24]
 8014920:	b90b      	cbnz	r3, 8014926 <__swbuf_r+0x12>
 8014922:	f001 f80d 	bl	8015940 <__sinit>
 8014926:	4b21      	ldr	r3, [pc, #132]	; (80149ac <__swbuf_r+0x98>)
 8014928:	429c      	cmp	r4, r3
 801492a:	d12a      	bne.n	8014982 <__swbuf_r+0x6e>
 801492c:	686c      	ldr	r4, [r5, #4]
 801492e:	69a3      	ldr	r3, [r4, #24]
 8014930:	60a3      	str	r3, [r4, #8]
 8014932:	89a3      	ldrh	r3, [r4, #12]
 8014934:	071a      	lsls	r2, r3, #28
 8014936:	d52e      	bpl.n	8014996 <__swbuf_r+0x82>
 8014938:	6923      	ldr	r3, [r4, #16]
 801493a:	b363      	cbz	r3, 8014996 <__swbuf_r+0x82>
 801493c:	6923      	ldr	r3, [r4, #16]
 801493e:	6820      	ldr	r0, [r4, #0]
 8014940:	1ac0      	subs	r0, r0, r3
 8014942:	6963      	ldr	r3, [r4, #20]
 8014944:	b2f6      	uxtb	r6, r6
 8014946:	4283      	cmp	r3, r0
 8014948:	4637      	mov	r7, r6
 801494a:	dc04      	bgt.n	8014956 <__swbuf_r+0x42>
 801494c:	4621      	mov	r1, r4
 801494e:	4628      	mov	r0, r5
 8014950:	f000 ff8c 	bl	801586c <_fflush_r>
 8014954:	bb28      	cbnz	r0, 80149a2 <__swbuf_r+0x8e>
 8014956:	68a3      	ldr	r3, [r4, #8]
 8014958:	3b01      	subs	r3, #1
 801495a:	60a3      	str	r3, [r4, #8]
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	1c5a      	adds	r2, r3, #1
 8014960:	6022      	str	r2, [r4, #0]
 8014962:	701e      	strb	r6, [r3, #0]
 8014964:	6963      	ldr	r3, [r4, #20]
 8014966:	3001      	adds	r0, #1
 8014968:	4283      	cmp	r3, r0
 801496a:	d004      	beq.n	8014976 <__swbuf_r+0x62>
 801496c:	89a3      	ldrh	r3, [r4, #12]
 801496e:	07db      	lsls	r3, r3, #31
 8014970:	d519      	bpl.n	80149a6 <__swbuf_r+0x92>
 8014972:	2e0a      	cmp	r6, #10
 8014974:	d117      	bne.n	80149a6 <__swbuf_r+0x92>
 8014976:	4621      	mov	r1, r4
 8014978:	4628      	mov	r0, r5
 801497a:	f000 ff77 	bl	801586c <_fflush_r>
 801497e:	b190      	cbz	r0, 80149a6 <__swbuf_r+0x92>
 8014980:	e00f      	b.n	80149a2 <__swbuf_r+0x8e>
 8014982:	4b0b      	ldr	r3, [pc, #44]	; (80149b0 <__swbuf_r+0x9c>)
 8014984:	429c      	cmp	r4, r3
 8014986:	d101      	bne.n	801498c <__swbuf_r+0x78>
 8014988:	68ac      	ldr	r4, [r5, #8]
 801498a:	e7d0      	b.n	801492e <__swbuf_r+0x1a>
 801498c:	4b09      	ldr	r3, [pc, #36]	; (80149b4 <__swbuf_r+0xa0>)
 801498e:	429c      	cmp	r4, r3
 8014990:	bf08      	it	eq
 8014992:	68ec      	ldreq	r4, [r5, #12]
 8014994:	e7cb      	b.n	801492e <__swbuf_r+0x1a>
 8014996:	4621      	mov	r1, r4
 8014998:	4628      	mov	r0, r5
 801499a:	f000 f81f 	bl	80149dc <__swsetup_r>
 801499e:	2800      	cmp	r0, #0
 80149a0:	d0cc      	beq.n	801493c <__swbuf_r+0x28>
 80149a2:	f04f 37ff 	mov.w	r7, #4294967295
 80149a6:	4638      	mov	r0, r7
 80149a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149aa:	bf00      	nop
 80149ac:	080182e0 	.word	0x080182e0
 80149b0:	08018300 	.word	0x08018300
 80149b4:	080182c0 	.word	0x080182c0

080149b8 <_write_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4c07      	ldr	r4, [pc, #28]	; (80149d8 <_write_r+0x20>)
 80149bc:	4605      	mov	r5, r0
 80149be:	4608      	mov	r0, r1
 80149c0:	4611      	mov	r1, r2
 80149c2:	2200      	movs	r2, #0
 80149c4:	6022      	str	r2, [r4, #0]
 80149c6:	461a      	mov	r2, r3
 80149c8:	f7ef fa18 	bl	8003dfc <_write>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	d102      	bne.n	80149d6 <_write_r+0x1e>
 80149d0:	6823      	ldr	r3, [r4, #0]
 80149d2:	b103      	cbz	r3, 80149d6 <_write_r+0x1e>
 80149d4:	602b      	str	r3, [r5, #0]
 80149d6:	bd38      	pop	{r3, r4, r5, pc}
 80149d8:	2003be0c 	.word	0x2003be0c

080149dc <__swsetup_r>:
 80149dc:	4b32      	ldr	r3, [pc, #200]	; (8014aa8 <__swsetup_r+0xcc>)
 80149de:	b570      	push	{r4, r5, r6, lr}
 80149e0:	681d      	ldr	r5, [r3, #0]
 80149e2:	4606      	mov	r6, r0
 80149e4:	460c      	mov	r4, r1
 80149e6:	b125      	cbz	r5, 80149f2 <__swsetup_r+0x16>
 80149e8:	69ab      	ldr	r3, [r5, #24]
 80149ea:	b913      	cbnz	r3, 80149f2 <__swsetup_r+0x16>
 80149ec:	4628      	mov	r0, r5
 80149ee:	f000 ffa7 	bl	8015940 <__sinit>
 80149f2:	4b2e      	ldr	r3, [pc, #184]	; (8014aac <__swsetup_r+0xd0>)
 80149f4:	429c      	cmp	r4, r3
 80149f6:	d10f      	bne.n	8014a18 <__swsetup_r+0x3c>
 80149f8:	686c      	ldr	r4, [r5, #4]
 80149fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	0715      	lsls	r5, r2, #28
 8014a02:	d42c      	bmi.n	8014a5e <__swsetup_r+0x82>
 8014a04:	06d0      	lsls	r0, r2, #27
 8014a06:	d411      	bmi.n	8014a2c <__swsetup_r+0x50>
 8014a08:	2209      	movs	r2, #9
 8014a0a:	6032      	str	r2, [r6, #0]
 8014a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a10:	81a3      	strh	r3, [r4, #12]
 8014a12:	f04f 30ff 	mov.w	r0, #4294967295
 8014a16:	e03e      	b.n	8014a96 <__swsetup_r+0xba>
 8014a18:	4b25      	ldr	r3, [pc, #148]	; (8014ab0 <__swsetup_r+0xd4>)
 8014a1a:	429c      	cmp	r4, r3
 8014a1c:	d101      	bne.n	8014a22 <__swsetup_r+0x46>
 8014a1e:	68ac      	ldr	r4, [r5, #8]
 8014a20:	e7eb      	b.n	80149fa <__swsetup_r+0x1e>
 8014a22:	4b24      	ldr	r3, [pc, #144]	; (8014ab4 <__swsetup_r+0xd8>)
 8014a24:	429c      	cmp	r4, r3
 8014a26:	bf08      	it	eq
 8014a28:	68ec      	ldreq	r4, [r5, #12]
 8014a2a:	e7e6      	b.n	80149fa <__swsetup_r+0x1e>
 8014a2c:	0751      	lsls	r1, r2, #29
 8014a2e:	d512      	bpl.n	8014a56 <__swsetup_r+0x7a>
 8014a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a32:	b141      	cbz	r1, 8014a46 <__swsetup_r+0x6a>
 8014a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a38:	4299      	cmp	r1, r3
 8014a3a:	d002      	beq.n	8014a42 <__swsetup_r+0x66>
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	f001 ffef 	bl	8016a20 <_free_r>
 8014a42:	2300      	movs	r3, #0
 8014a44:	6363      	str	r3, [r4, #52]	; 0x34
 8014a46:	89a3      	ldrh	r3, [r4, #12]
 8014a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a4c:	81a3      	strh	r3, [r4, #12]
 8014a4e:	2300      	movs	r3, #0
 8014a50:	6063      	str	r3, [r4, #4]
 8014a52:	6923      	ldr	r3, [r4, #16]
 8014a54:	6023      	str	r3, [r4, #0]
 8014a56:	89a3      	ldrh	r3, [r4, #12]
 8014a58:	f043 0308 	orr.w	r3, r3, #8
 8014a5c:	81a3      	strh	r3, [r4, #12]
 8014a5e:	6923      	ldr	r3, [r4, #16]
 8014a60:	b94b      	cbnz	r3, 8014a76 <__swsetup_r+0x9a>
 8014a62:	89a3      	ldrh	r3, [r4, #12]
 8014a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a6c:	d003      	beq.n	8014a76 <__swsetup_r+0x9a>
 8014a6e:	4621      	mov	r1, r4
 8014a70:	4630      	mov	r0, r6
 8014a72:	f001 fb6d 	bl	8016150 <__smakebuf_r>
 8014a76:	89a2      	ldrh	r2, [r4, #12]
 8014a78:	f012 0301 	ands.w	r3, r2, #1
 8014a7c:	d00c      	beq.n	8014a98 <__swsetup_r+0xbc>
 8014a7e:	2300      	movs	r3, #0
 8014a80:	60a3      	str	r3, [r4, #8]
 8014a82:	6963      	ldr	r3, [r4, #20]
 8014a84:	425b      	negs	r3, r3
 8014a86:	61a3      	str	r3, [r4, #24]
 8014a88:	6923      	ldr	r3, [r4, #16]
 8014a8a:	b953      	cbnz	r3, 8014aa2 <__swsetup_r+0xc6>
 8014a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014a94:	d1ba      	bne.n	8014a0c <__swsetup_r+0x30>
 8014a96:	bd70      	pop	{r4, r5, r6, pc}
 8014a98:	0792      	lsls	r2, r2, #30
 8014a9a:	bf58      	it	pl
 8014a9c:	6963      	ldrpl	r3, [r4, #20]
 8014a9e:	60a3      	str	r3, [r4, #8]
 8014aa0:	e7f2      	b.n	8014a88 <__swsetup_r+0xac>
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	e7f7      	b.n	8014a96 <__swsetup_r+0xba>
 8014aa6:	bf00      	nop
 8014aa8:	2000000c 	.word	0x2000000c
 8014aac:	080182e0 	.word	0x080182e0
 8014ab0:	08018300 	.word	0x08018300
 8014ab4:	080182c0 	.word	0x080182c0

08014ab8 <_close_r>:
 8014ab8:	b538      	push	{r3, r4, r5, lr}
 8014aba:	4c06      	ldr	r4, [pc, #24]	; (8014ad4 <_close_r+0x1c>)
 8014abc:	2300      	movs	r3, #0
 8014abe:	4605      	mov	r5, r0
 8014ac0:	4608      	mov	r0, r1
 8014ac2:	6023      	str	r3, [r4, #0]
 8014ac4:	f7f0 feff 	bl	80058c6 <_close>
 8014ac8:	1c43      	adds	r3, r0, #1
 8014aca:	d102      	bne.n	8014ad2 <_close_r+0x1a>
 8014acc:	6823      	ldr	r3, [r4, #0]
 8014ace:	b103      	cbz	r3, 8014ad2 <_close_r+0x1a>
 8014ad0:	602b      	str	r3, [r5, #0]
 8014ad2:	bd38      	pop	{r3, r4, r5, pc}
 8014ad4:	2003be0c 	.word	0x2003be0c

08014ad8 <quorem>:
 8014ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014adc:	6903      	ldr	r3, [r0, #16]
 8014ade:	690c      	ldr	r4, [r1, #16]
 8014ae0:	42a3      	cmp	r3, r4
 8014ae2:	4680      	mov	r8, r0
 8014ae4:	f2c0 8082 	blt.w	8014bec <quorem+0x114>
 8014ae8:	3c01      	subs	r4, #1
 8014aea:	f101 0714 	add.w	r7, r1, #20
 8014aee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014af2:	f100 0614 	add.w	r6, r0, #20
 8014af6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014afa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014afe:	eb06 030c 	add.w	r3, r6, ip
 8014b02:	3501      	adds	r5, #1
 8014b04:	eb07 090c 	add.w	r9, r7, ip
 8014b08:	9301      	str	r3, [sp, #4]
 8014b0a:	fbb0 f5f5 	udiv	r5, r0, r5
 8014b0e:	b395      	cbz	r5, 8014b76 <quorem+0x9e>
 8014b10:	f04f 0a00 	mov.w	sl, #0
 8014b14:	4638      	mov	r0, r7
 8014b16:	46b6      	mov	lr, r6
 8014b18:	46d3      	mov	fp, sl
 8014b1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8014b1e:	b293      	uxth	r3, r2
 8014b20:	fb05 a303 	mla	r3, r5, r3, sl
 8014b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b28:	b29b      	uxth	r3, r3
 8014b2a:	ebab 0303 	sub.w	r3, fp, r3
 8014b2e:	0c12      	lsrs	r2, r2, #16
 8014b30:	f8de b000 	ldr.w	fp, [lr]
 8014b34:	fb05 a202 	mla	r2, r5, r2, sl
 8014b38:	fa13 f38b 	uxtah	r3, r3, fp
 8014b3c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014b40:	fa1f fb82 	uxth.w	fp, r2
 8014b44:	f8de 2000 	ldr.w	r2, [lr]
 8014b48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b56:	4581      	cmp	r9, r0
 8014b58:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014b5c:	f84e 3b04 	str.w	r3, [lr], #4
 8014b60:	d2db      	bcs.n	8014b1a <quorem+0x42>
 8014b62:	f856 300c 	ldr.w	r3, [r6, ip]
 8014b66:	b933      	cbnz	r3, 8014b76 <quorem+0x9e>
 8014b68:	9b01      	ldr	r3, [sp, #4]
 8014b6a:	3b04      	subs	r3, #4
 8014b6c:	429e      	cmp	r6, r3
 8014b6e:	461a      	mov	r2, r3
 8014b70:	d330      	bcc.n	8014bd4 <quorem+0xfc>
 8014b72:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b76:	4640      	mov	r0, r8
 8014b78:	f001 fd98 	bl	80166ac <__mcmp>
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	db25      	blt.n	8014bcc <quorem+0xf4>
 8014b80:	3501      	adds	r5, #1
 8014b82:	4630      	mov	r0, r6
 8014b84:	f04f 0c00 	mov.w	ip, #0
 8014b88:	f857 2b04 	ldr.w	r2, [r7], #4
 8014b8c:	f8d0 e000 	ldr.w	lr, [r0]
 8014b90:	b293      	uxth	r3, r2
 8014b92:	ebac 0303 	sub.w	r3, ip, r3
 8014b96:	0c12      	lsrs	r2, r2, #16
 8014b98:	fa13 f38e 	uxtah	r3, r3, lr
 8014b9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014baa:	45b9      	cmp	r9, r7
 8014bac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014bb0:	f840 3b04 	str.w	r3, [r0], #4
 8014bb4:	d2e8      	bcs.n	8014b88 <quorem+0xb0>
 8014bb6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014bba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014bbe:	b92a      	cbnz	r2, 8014bcc <quorem+0xf4>
 8014bc0:	3b04      	subs	r3, #4
 8014bc2:	429e      	cmp	r6, r3
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	d30b      	bcc.n	8014be0 <quorem+0x108>
 8014bc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8014bcc:	4628      	mov	r0, r5
 8014bce:	b003      	add	sp, #12
 8014bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bd4:	6812      	ldr	r2, [r2, #0]
 8014bd6:	3b04      	subs	r3, #4
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	d1ca      	bne.n	8014b72 <quorem+0x9a>
 8014bdc:	3c01      	subs	r4, #1
 8014bde:	e7c5      	b.n	8014b6c <quorem+0x94>
 8014be0:	6812      	ldr	r2, [r2, #0]
 8014be2:	3b04      	subs	r3, #4
 8014be4:	2a00      	cmp	r2, #0
 8014be6:	d1ef      	bne.n	8014bc8 <quorem+0xf0>
 8014be8:	3c01      	subs	r4, #1
 8014bea:	e7ea      	b.n	8014bc2 <quorem+0xea>
 8014bec:	2000      	movs	r0, #0
 8014bee:	e7ee      	b.n	8014bce <quorem+0xf6>

08014bf0 <_dtoa_r>:
 8014bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bf4:	ec57 6b10 	vmov	r6, r7, d0
 8014bf8:	b097      	sub	sp, #92	; 0x5c
 8014bfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014bfc:	9106      	str	r1, [sp, #24]
 8014bfe:	4604      	mov	r4, r0
 8014c00:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c02:	9312      	str	r3, [sp, #72]	; 0x48
 8014c04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014c08:	e9cd 6700 	strd	r6, r7, [sp]
 8014c0c:	b93d      	cbnz	r5, 8014c1e <_dtoa_r+0x2e>
 8014c0e:	2010      	movs	r0, #16
 8014c10:	f001 fade 	bl	80161d0 <malloc>
 8014c14:	6260      	str	r0, [r4, #36]	; 0x24
 8014c16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014c1a:	6005      	str	r5, [r0, #0]
 8014c1c:	60c5      	str	r5, [r0, #12]
 8014c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c20:	6819      	ldr	r1, [r3, #0]
 8014c22:	b151      	cbz	r1, 8014c3a <_dtoa_r+0x4a>
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	604a      	str	r2, [r1, #4]
 8014c28:	2301      	movs	r3, #1
 8014c2a:	4093      	lsls	r3, r2
 8014c2c:	608b      	str	r3, [r1, #8]
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f001 fb1c 	bl	801626c <_Bfree>
 8014c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c36:	2200      	movs	r2, #0
 8014c38:	601a      	str	r2, [r3, #0]
 8014c3a:	1e3b      	subs	r3, r7, #0
 8014c3c:	bfbb      	ittet	lt
 8014c3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014c42:	9301      	strlt	r3, [sp, #4]
 8014c44:	2300      	movge	r3, #0
 8014c46:	2201      	movlt	r2, #1
 8014c48:	bfac      	ite	ge
 8014c4a:	f8c8 3000 	strge.w	r3, [r8]
 8014c4e:	f8c8 2000 	strlt.w	r2, [r8]
 8014c52:	4baf      	ldr	r3, [pc, #700]	; (8014f10 <_dtoa_r+0x320>)
 8014c54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c58:	ea33 0308 	bics.w	r3, r3, r8
 8014c5c:	d114      	bne.n	8014c88 <_dtoa_r+0x98>
 8014c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8014c64:	6013      	str	r3, [r2, #0]
 8014c66:	9b00      	ldr	r3, [sp, #0]
 8014c68:	b923      	cbnz	r3, 8014c74 <_dtoa_r+0x84>
 8014c6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	f000 8542 	beq.w	80156f8 <_dtoa_r+0xb08>
 8014c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014f24 <_dtoa_r+0x334>
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	f000 8544 	beq.w	8015708 <_dtoa_r+0xb18>
 8014c80:	f10b 0303 	add.w	r3, fp, #3
 8014c84:	f000 bd3e 	b.w	8015704 <_dtoa_r+0xb14>
 8014c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	2300      	movs	r3, #0
 8014c90:	4630      	mov	r0, r6
 8014c92:	4639      	mov	r1, r7
 8014c94:	f7eb ff30 	bl	8000af8 <__aeabi_dcmpeq>
 8014c98:	4681      	mov	r9, r0
 8014c9a:	b168      	cbz	r0, 8014cb8 <_dtoa_r+0xc8>
 8014c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	6013      	str	r3, [r2, #0]
 8014ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f000 8524 	beq.w	80156f2 <_dtoa_r+0xb02>
 8014caa:	4b9a      	ldr	r3, [pc, #616]	; (8014f14 <_dtoa_r+0x324>)
 8014cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cae:	f103 3bff 	add.w	fp, r3, #4294967295
 8014cb2:	6013      	str	r3, [r2, #0]
 8014cb4:	f000 bd28 	b.w	8015708 <_dtoa_r+0xb18>
 8014cb8:	aa14      	add	r2, sp, #80	; 0x50
 8014cba:	a915      	add	r1, sp, #84	; 0x54
 8014cbc:	ec47 6b10 	vmov	d0, r6, r7
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f001 fde1 	bl	8016888 <__d2b>
 8014cc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014cca:	9004      	str	r0, [sp, #16]
 8014ccc:	2d00      	cmp	r5, #0
 8014cce:	d07c      	beq.n	8014dca <_dtoa_r+0x1da>
 8014cd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014cd8:	46b2      	mov	sl, r6
 8014cda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014ce2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	4b8b      	ldr	r3, [pc, #556]	; (8014f18 <_dtoa_r+0x328>)
 8014cea:	4650      	mov	r0, sl
 8014cec:	4659      	mov	r1, fp
 8014cee:	f7eb fae3 	bl	80002b8 <__aeabi_dsub>
 8014cf2:	a381      	add	r3, pc, #516	; (adr r3, 8014ef8 <_dtoa_r+0x308>)
 8014cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf8:	f7eb fc96 	bl	8000628 <__aeabi_dmul>
 8014cfc:	a380      	add	r3, pc, #512	; (adr r3, 8014f00 <_dtoa_r+0x310>)
 8014cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d02:	f7eb fadb 	bl	80002bc <__adddf3>
 8014d06:	4606      	mov	r6, r0
 8014d08:	4628      	mov	r0, r5
 8014d0a:	460f      	mov	r7, r1
 8014d0c:	f7eb fc22 	bl	8000554 <__aeabi_i2d>
 8014d10:	a37d      	add	r3, pc, #500	; (adr r3, 8014f08 <_dtoa_r+0x318>)
 8014d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d16:	f7eb fc87 	bl	8000628 <__aeabi_dmul>
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	4630      	mov	r0, r6
 8014d20:	4639      	mov	r1, r7
 8014d22:	f7eb facb 	bl	80002bc <__adddf3>
 8014d26:	4606      	mov	r6, r0
 8014d28:	460f      	mov	r7, r1
 8014d2a:	f7eb ff2d 	bl	8000b88 <__aeabi_d2iz>
 8014d2e:	2200      	movs	r2, #0
 8014d30:	4682      	mov	sl, r0
 8014d32:	2300      	movs	r3, #0
 8014d34:	4630      	mov	r0, r6
 8014d36:	4639      	mov	r1, r7
 8014d38:	f7eb fee8 	bl	8000b0c <__aeabi_dcmplt>
 8014d3c:	b148      	cbz	r0, 8014d52 <_dtoa_r+0x162>
 8014d3e:	4650      	mov	r0, sl
 8014d40:	f7eb fc08 	bl	8000554 <__aeabi_i2d>
 8014d44:	4632      	mov	r2, r6
 8014d46:	463b      	mov	r3, r7
 8014d48:	f7eb fed6 	bl	8000af8 <__aeabi_dcmpeq>
 8014d4c:	b908      	cbnz	r0, 8014d52 <_dtoa_r+0x162>
 8014d4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d52:	f1ba 0f16 	cmp.w	sl, #22
 8014d56:	d859      	bhi.n	8014e0c <_dtoa_r+0x21c>
 8014d58:	4970      	ldr	r1, [pc, #448]	; (8014f1c <_dtoa_r+0x32c>)
 8014d5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d66:	f7eb feef 	bl	8000b48 <__aeabi_dcmpgt>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d050      	beq.n	8014e10 <_dtoa_r+0x220>
 8014d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d72:	2300      	movs	r3, #0
 8014d74:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d78:	1b5d      	subs	r5, r3, r5
 8014d7a:	f1b5 0801 	subs.w	r8, r5, #1
 8014d7e:	bf49      	itett	mi
 8014d80:	f1c5 0301 	rsbmi	r3, r5, #1
 8014d84:	2300      	movpl	r3, #0
 8014d86:	9305      	strmi	r3, [sp, #20]
 8014d88:	f04f 0800 	movmi.w	r8, #0
 8014d8c:	bf58      	it	pl
 8014d8e:	9305      	strpl	r3, [sp, #20]
 8014d90:	f1ba 0f00 	cmp.w	sl, #0
 8014d94:	db3e      	blt.n	8014e14 <_dtoa_r+0x224>
 8014d96:	2300      	movs	r3, #0
 8014d98:	44d0      	add	r8, sl
 8014d9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014d9e:	9307      	str	r3, [sp, #28]
 8014da0:	9b06      	ldr	r3, [sp, #24]
 8014da2:	2b09      	cmp	r3, #9
 8014da4:	f200 8090 	bhi.w	8014ec8 <_dtoa_r+0x2d8>
 8014da8:	2b05      	cmp	r3, #5
 8014daa:	bfc4      	itt	gt
 8014dac:	3b04      	subgt	r3, #4
 8014dae:	9306      	strgt	r3, [sp, #24]
 8014db0:	9b06      	ldr	r3, [sp, #24]
 8014db2:	f1a3 0302 	sub.w	r3, r3, #2
 8014db6:	bfcc      	ite	gt
 8014db8:	2500      	movgt	r5, #0
 8014dba:	2501      	movle	r5, #1
 8014dbc:	2b03      	cmp	r3, #3
 8014dbe:	f200 808f 	bhi.w	8014ee0 <_dtoa_r+0x2f0>
 8014dc2:	e8df f003 	tbb	[pc, r3]
 8014dc6:	7f7d      	.short	0x7f7d
 8014dc8:	7131      	.short	0x7131
 8014dca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014dce:	441d      	add	r5, r3
 8014dd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014dd4:	2820      	cmp	r0, #32
 8014dd6:	dd13      	ble.n	8014e00 <_dtoa_r+0x210>
 8014dd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014ddc:	9b00      	ldr	r3, [sp, #0]
 8014dde:	fa08 f800 	lsl.w	r8, r8, r0
 8014de2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014de6:	fa23 f000 	lsr.w	r0, r3, r0
 8014dea:	ea48 0000 	orr.w	r0, r8, r0
 8014dee:	f7eb fba1 	bl	8000534 <__aeabi_ui2d>
 8014df2:	2301      	movs	r3, #1
 8014df4:	4682      	mov	sl, r0
 8014df6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014dfa:	3d01      	subs	r5, #1
 8014dfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8014dfe:	e772      	b.n	8014ce6 <_dtoa_r+0xf6>
 8014e00:	9b00      	ldr	r3, [sp, #0]
 8014e02:	f1c0 0020 	rsb	r0, r0, #32
 8014e06:	fa03 f000 	lsl.w	r0, r3, r0
 8014e0a:	e7f0      	b.n	8014dee <_dtoa_r+0x1fe>
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	e7b1      	b.n	8014d74 <_dtoa_r+0x184>
 8014e10:	900f      	str	r0, [sp, #60]	; 0x3c
 8014e12:	e7b0      	b.n	8014d76 <_dtoa_r+0x186>
 8014e14:	9b05      	ldr	r3, [sp, #20]
 8014e16:	eba3 030a 	sub.w	r3, r3, sl
 8014e1a:	9305      	str	r3, [sp, #20]
 8014e1c:	f1ca 0300 	rsb	r3, sl, #0
 8014e20:	9307      	str	r3, [sp, #28]
 8014e22:	2300      	movs	r3, #0
 8014e24:	930e      	str	r3, [sp, #56]	; 0x38
 8014e26:	e7bb      	b.n	8014da0 <_dtoa_r+0x1b0>
 8014e28:	2301      	movs	r3, #1
 8014e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	dd59      	ble.n	8014ee6 <_dtoa_r+0x2f6>
 8014e32:	9302      	str	r3, [sp, #8]
 8014e34:	4699      	mov	r9, r3
 8014e36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014e38:	2200      	movs	r2, #0
 8014e3a:	6072      	str	r2, [r6, #4]
 8014e3c:	2204      	movs	r2, #4
 8014e3e:	f102 0014 	add.w	r0, r2, #20
 8014e42:	4298      	cmp	r0, r3
 8014e44:	6871      	ldr	r1, [r6, #4]
 8014e46:	d953      	bls.n	8014ef0 <_dtoa_r+0x300>
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f001 f9db 	bl	8016204 <_Balloc>
 8014e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e50:	6030      	str	r0, [r6, #0]
 8014e52:	f1b9 0f0e 	cmp.w	r9, #14
 8014e56:	f8d3 b000 	ldr.w	fp, [r3]
 8014e5a:	f200 80e6 	bhi.w	801502a <_dtoa_r+0x43a>
 8014e5e:	2d00      	cmp	r5, #0
 8014e60:	f000 80e3 	beq.w	801502a <_dtoa_r+0x43a>
 8014e64:	ed9d 7b00 	vldr	d7, [sp]
 8014e68:	f1ba 0f00 	cmp.w	sl, #0
 8014e6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014e70:	dd74      	ble.n	8014f5c <_dtoa_r+0x36c>
 8014e72:	4a2a      	ldr	r2, [pc, #168]	; (8014f1c <_dtoa_r+0x32c>)
 8014e74:	f00a 030f 	and.w	r3, sl, #15
 8014e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014e7c:	ed93 7b00 	vldr	d7, [r3]
 8014e80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014e84:	06f0      	lsls	r0, r6, #27
 8014e86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014e8a:	d565      	bpl.n	8014f58 <_dtoa_r+0x368>
 8014e8c:	4b24      	ldr	r3, [pc, #144]	; (8014f20 <_dtoa_r+0x330>)
 8014e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e96:	f7eb fcf1 	bl	800087c <__aeabi_ddiv>
 8014e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8014e9e:	f006 060f 	and.w	r6, r6, #15
 8014ea2:	2503      	movs	r5, #3
 8014ea4:	4f1e      	ldr	r7, [pc, #120]	; (8014f20 <_dtoa_r+0x330>)
 8014ea6:	e04c      	b.n	8014f42 <_dtoa_r+0x352>
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8014eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eae:	4453      	add	r3, sl
 8014eb0:	f103 0901 	add.w	r9, r3, #1
 8014eb4:	9302      	str	r3, [sp, #8]
 8014eb6:	464b      	mov	r3, r9
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	bfb8      	it	lt
 8014ebc:	2301      	movlt	r3, #1
 8014ebe:	e7ba      	b.n	8014e36 <_dtoa_r+0x246>
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	e7b2      	b.n	8014e2a <_dtoa_r+0x23a>
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	e7f0      	b.n	8014eaa <_dtoa_r+0x2ba>
 8014ec8:	2501      	movs	r5, #1
 8014eca:	2300      	movs	r3, #0
 8014ecc:	9306      	str	r3, [sp, #24]
 8014ece:	950a      	str	r5, [sp, #40]	; 0x28
 8014ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed4:	9302      	str	r3, [sp, #8]
 8014ed6:	4699      	mov	r9, r3
 8014ed8:	2200      	movs	r2, #0
 8014eda:	2312      	movs	r3, #18
 8014edc:	920b      	str	r2, [sp, #44]	; 0x2c
 8014ede:	e7aa      	b.n	8014e36 <_dtoa_r+0x246>
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ee4:	e7f4      	b.n	8014ed0 <_dtoa_r+0x2e0>
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	9302      	str	r3, [sp, #8]
 8014eea:	4699      	mov	r9, r3
 8014eec:	461a      	mov	r2, r3
 8014eee:	e7f5      	b.n	8014edc <_dtoa_r+0x2ec>
 8014ef0:	3101      	adds	r1, #1
 8014ef2:	6071      	str	r1, [r6, #4]
 8014ef4:	0052      	lsls	r2, r2, #1
 8014ef6:	e7a2      	b.n	8014e3e <_dtoa_r+0x24e>
 8014ef8:	636f4361 	.word	0x636f4361
 8014efc:	3fd287a7 	.word	0x3fd287a7
 8014f00:	8b60c8b3 	.word	0x8b60c8b3
 8014f04:	3fc68a28 	.word	0x3fc68a28
 8014f08:	509f79fb 	.word	0x509f79fb
 8014f0c:	3fd34413 	.word	0x3fd34413
 8014f10:	7ff00000 	.word	0x7ff00000
 8014f14:	08018454 	.word	0x08018454
 8014f18:	3ff80000 	.word	0x3ff80000
 8014f1c:	08018358 	.word	0x08018358
 8014f20:	08018330 	.word	0x08018330
 8014f24:	080182b9 	.word	0x080182b9
 8014f28:	07f1      	lsls	r1, r6, #31
 8014f2a:	d508      	bpl.n	8014f3e <_dtoa_r+0x34e>
 8014f2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f34:	f7eb fb78 	bl	8000628 <__aeabi_dmul>
 8014f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f3c:	3501      	adds	r5, #1
 8014f3e:	1076      	asrs	r6, r6, #1
 8014f40:	3708      	adds	r7, #8
 8014f42:	2e00      	cmp	r6, #0
 8014f44:	d1f0      	bne.n	8014f28 <_dtoa_r+0x338>
 8014f46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f4e:	f7eb fc95 	bl	800087c <__aeabi_ddiv>
 8014f52:	e9cd 0100 	strd	r0, r1, [sp]
 8014f56:	e01a      	b.n	8014f8e <_dtoa_r+0x39e>
 8014f58:	2502      	movs	r5, #2
 8014f5a:	e7a3      	b.n	8014ea4 <_dtoa_r+0x2b4>
 8014f5c:	f000 80a0 	beq.w	80150a0 <_dtoa_r+0x4b0>
 8014f60:	f1ca 0600 	rsb	r6, sl, #0
 8014f64:	4b9f      	ldr	r3, [pc, #636]	; (80151e4 <_dtoa_r+0x5f4>)
 8014f66:	4fa0      	ldr	r7, [pc, #640]	; (80151e8 <_dtoa_r+0x5f8>)
 8014f68:	f006 020f 	and.w	r2, r6, #15
 8014f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f78:	f7eb fb56 	bl	8000628 <__aeabi_dmul>
 8014f7c:	e9cd 0100 	strd	r0, r1, [sp]
 8014f80:	1136      	asrs	r6, r6, #4
 8014f82:	2300      	movs	r3, #0
 8014f84:	2502      	movs	r5, #2
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	d17f      	bne.n	801508a <_dtoa_r+0x49a>
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1e1      	bne.n	8014f52 <_dtoa_r+0x362>
 8014f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f000 8087 	beq.w	80150a4 <_dtoa_r+0x4b4>
 8014f96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	4b93      	ldr	r3, [pc, #588]	; (80151ec <_dtoa_r+0x5fc>)
 8014f9e:	4630      	mov	r0, r6
 8014fa0:	4639      	mov	r1, r7
 8014fa2:	f7eb fdb3 	bl	8000b0c <__aeabi_dcmplt>
 8014fa6:	2800      	cmp	r0, #0
 8014fa8:	d07c      	beq.n	80150a4 <_dtoa_r+0x4b4>
 8014faa:	f1b9 0f00 	cmp.w	r9, #0
 8014fae:	d079      	beq.n	80150a4 <_dtoa_r+0x4b4>
 8014fb0:	9b02      	ldr	r3, [sp, #8]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	dd35      	ble.n	8015022 <_dtoa_r+0x432>
 8014fb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014fba:	9308      	str	r3, [sp, #32]
 8014fbc:	4639      	mov	r1, r7
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	4b8b      	ldr	r3, [pc, #556]	; (80151f0 <_dtoa_r+0x600>)
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f7eb fb30 	bl	8000628 <__aeabi_dmul>
 8014fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8014fcc:	9f02      	ldr	r7, [sp, #8]
 8014fce:	3501      	adds	r5, #1
 8014fd0:	4628      	mov	r0, r5
 8014fd2:	f7eb fabf 	bl	8000554 <__aeabi_i2d>
 8014fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fda:	f7eb fb25 	bl	8000628 <__aeabi_dmul>
 8014fde:	2200      	movs	r2, #0
 8014fe0:	4b84      	ldr	r3, [pc, #528]	; (80151f4 <_dtoa_r+0x604>)
 8014fe2:	f7eb f96b 	bl	80002bc <__adddf3>
 8014fe6:	4605      	mov	r5, r0
 8014fe8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014fec:	2f00      	cmp	r7, #0
 8014fee:	d15d      	bne.n	80150ac <_dtoa_r+0x4bc>
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	4b81      	ldr	r3, [pc, #516]	; (80151f8 <_dtoa_r+0x608>)
 8014ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ff8:	f7eb f95e 	bl	80002b8 <__aeabi_dsub>
 8014ffc:	462a      	mov	r2, r5
 8014ffe:	4633      	mov	r3, r6
 8015000:	e9cd 0100 	strd	r0, r1, [sp]
 8015004:	f7eb fda0 	bl	8000b48 <__aeabi_dcmpgt>
 8015008:	2800      	cmp	r0, #0
 801500a:	f040 8288 	bne.w	801551e <_dtoa_r+0x92e>
 801500e:	462a      	mov	r2, r5
 8015010:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015018:	f7eb fd78 	bl	8000b0c <__aeabi_dcmplt>
 801501c:	2800      	cmp	r0, #0
 801501e:	f040 827c 	bne.w	801551a <_dtoa_r+0x92a>
 8015022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015026:	e9cd 2300 	strd	r2, r3, [sp]
 801502a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801502c:	2b00      	cmp	r3, #0
 801502e:	f2c0 8150 	blt.w	80152d2 <_dtoa_r+0x6e2>
 8015032:	f1ba 0f0e 	cmp.w	sl, #14
 8015036:	f300 814c 	bgt.w	80152d2 <_dtoa_r+0x6e2>
 801503a:	4b6a      	ldr	r3, [pc, #424]	; (80151e4 <_dtoa_r+0x5f4>)
 801503c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015040:	ed93 7b00 	vldr	d7, [r3]
 8015044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015046:	2b00      	cmp	r3, #0
 8015048:	ed8d 7b02 	vstr	d7, [sp, #8]
 801504c:	f280 80d8 	bge.w	8015200 <_dtoa_r+0x610>
 8015050:	f1b9 0f00 	cmp.w	r9, #0
 8015054:	f300 80d4 	bgt.w	8015200 <_dtoa_r+0x610>
 8015058:	f040 825e 	bne.w	8015518 <_dtoa_r+0x928>
 801505c:	2200      	movs	r2, #0
 801505e:	4b66      	ldr	r3, [pc, #408]	; (80151f8 <_dtoa_r+0x608>)
 8015060:	ec51 0b17 	vmov	r0, r1, d7
 8015064:	f7eb fae0 	bl	8000628 <__aeabi_dmul>
 8015068:	e9dd 2300 	ldrd	r2, r3, [sp]
 801506c:	f7eb fd62 	bl	8000b34 <__aeabi_dcmpge>
 8015070:	464f      	mov	r7, r9
 8015072:	464e      	mov	r6, r9
 8015074:	2800      	cmp	r0, #0
 8015076:	f040 8234 	bne.w	80154e2 <_dtoa_r+0x8f2>
 801507a:	2331      	movs	r3, #49	; 0x31
 801507c:	f10b 0501 	add.w	r5, fp, #1
 8015080:	f88b 3000 	strb.w	r3, [fp]
 8015084:	f10a 0a01 	add.w	sl, sl, #1
 8015088:	e22f      	b.n	80154ea <_dtoa_r+0x8fa>
 801508a:	07f2      	lsls	r2, r6, #31
 801508c:	d505      	bpl.n	801509a <_dtoa_r+0x4aa>
 801508e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015092:	f7eb fac9 	bl	8000628 <__aeabi_dmul>
 8015096:	3501      	adds	r5, #1
 8015098:	2301      	movs	r3, #1
 801509a:	1076      	asrs	r6, r6, #1
 801509c:	3708      	adds	r7, #8
 801509e:	e772      	b.n	8014f86 <_dtoa_r+0x396>
 80150a0:	2502      	movs	r5, #2
 80150a2:	e774      	b.n	8014f8e <_dtoa_r+0x39e>
 80150a4:	f8cd a020 	str.w	sl, [sp, #32]
 80150a8:	464f      	mov	r7, r9
 80150aa:	e791      	b.n	8014fd0 <_dtoa_r+0x3e0>
 80150ac:	4b4d      	ldr	r3, [pc, #308]	; (80151e4 <_dtoa_r+0x5f4>)
 80150ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80150b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80150b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d047      	beq.n	801514c <_dtoa_r+0x55c>
 80150bc:	4602      	mov	r2, r0
 80150be:	460b      	mov	r3, r1
 80150c0:	2000      	movs	r0, #0
 80150c2:	494e      	ldr	r1, [pc, #312]	; (80151fc <_dtoa_r+0x60c>)
 80150c4:	f7eb fbda 	bl	800087c <__aeabi_ddiv>
 80150c8:	462a      	mov	r2, r5
 80150ca:	4633      	mov	r3, r6
 80150cc:	f7eb f8f4 	bl	80002b8 <__aeabi_dsub>
 80150d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150d4:	465d      	mov	r5, fp
 80150d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150da:	f7eb fd55 	bl	8000b88 <__aeabi_d2iz>
 80150de:	4606      	mov	r6, r0
 80150e0:	f7eb fa38 	bl	8000554 <__aeabi_i2d>
 80150e4:	4602      	mov	r2, r0
 80150e6:	460b      	mov	r3, r1
 80150e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ec:	f7eb f8e4 	bl	80002b8 <__aeabi_dsub>
 80150f0:	3630      	adds	r6, #48	; 0x30
 80150f2:	f805 6b01 	strb.w	r6, [r5], #1
 80150f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80150fa:	e9cd 0100 	strd	r0, r1, [sp]
 80150fe:	f7eb fd05 	bl	8000b0c <__aeabi_dcmplt>
 8015102:	2800      	cmp	r0, #0
 8015104:	d163      	bne.n	80151ce <_dtoa_r+0x5de>
 8015106:	e9dd 2300 	ldrd	r2, r3, [sp]
 801510a:	2000      	movs	r0, #0
 801510c:	4937      	ldr	r1, [pc, #220]	; (80151ec <_dtoa_r+0x5fc>)
 801510e:	f7eb f8d3 	bl	80002b8 <__aeabi_dsub>
 8015112:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015116:	f7eb fcf9 	bl	8000b0c <__aeabi_dcmplt>
 801511a:	2800      	cmp	r0, #0
 801511c:	f040 80b7 	bne.w	801528e <_dtoa_r+0x69e>
 8015120:	eba5 030b 	sub.w	r3, r5, fp
 8015124:	429f      	cmp	r7, r3
 8015126:	f77f af7c 	ble.w	8015022 <_dtoa_r+0x432>
 801512a:	2200      	movs	r2, #0
 801512c:	4b30      	ldr	r3, [pc, #192]	; (80151f0 <_dtoa_r+0x600>)
 801512e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015132:	f7eb fa79 	bl	8000628 <__aeabi_dmul>
 8015136:	2200      	movs	r2, #0
 8015138:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801513c:	4b2c      	ldr	r3, [pc, #176]	; (80151f0 <_dtoa_r+0x600>)
 801513e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015142:	f7eb fa71 	bl	8000628 <__aeabi_dmul>
 8015146:	e9cd 0100 	strd	r0, r1, [sp]
 801514a:	e7c4      	b.n	80150d6 <_dtoa_r+0x4e6>
 801514c:	462a      	mov	r2, r5
 801514e:	4633      	mov	r3, r6
 8015150:	f7eb fa6a 	bl	8000628 <__aeabi_dmul>
 8015154:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015158:	eb0b 0507 	add.w	r5, fp, r7
 801515c:	465e      	mov	r6, fp
 801515e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015162:	f7eb fd11 	bl	8000b88 <__aeabi_d2iz>
 8015166:	4607      	mov	r7, r0
 8015168:	f7eb f9f4 	bl	8000554 <__aeabi_i2d>
 801516c:	3730      	adds	r7, #48	; 0x30
 801516e:	4602      	mov	r2, r0
 8015170:	460b      	mov	r3, r1
 8015172:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015176:	f7eb f89f 	bl	80002b8 <__aeabi_dsub>
 801517a:	f806 7b01 	strb.w	r7, [r6], #1
 801517e:	42ae      	cmp	r6, r5
 8015180:	e9cd 0100 	strd	r0, r1, [sp]
 8015184:	f04f 0200 	mov.w	r2, #0
 8015188:	d126      	bne.n	80151d8 <_dtoa_r+0x5e8>
 801518a:	4b1c      	ldr	r3, [pc, #112]	; (80151fc <_dtoa_r+0x60c>)
 801518c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015190:	f7eb f894 	bl	80002bc <__adddf3>
 8015194:	4602      	mov	r2, r0
 8015196:	460b      	mov	r3, r1
 8015198:	e9dd 0100 	ldrd	r0, r1, [sp]
 801519c:	f7eb fcd4 	bl	8000b48 <__aeabi_dcmpgt>
 80151a0:	2800      	cmp	r0, #0
 80151a2:	d174      	bne.n	801528e <_dtoa_r+0x69e>
 80151a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80151a8:	2000      	movs	r0, #0
 80151aa:	4914      	ldr	r1, [pc, #80]	; (80151fc <_dtoa_r+0x60c>)
 80151ac:	f7eb f884 	bl	80002b8 <__aeabi_dsub>
 80151b0:	4602      	mov	r2, r0
 80151b2:	460b      	mov	r3, r1
 80151b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151b8:	f7eb fca8 	bl	8000b0c <__aeabi_dcmplt>
 80151bc:	2800      	cmp	r0, #0
 80151be:	f43f af30 	beq.w	8015022 <_dtoa_r+0x432>
 80151c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80151c6:	2b30      	cmp	r3, #48	; 0x30
 80151c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80151cc:	d002      	beq.n	80151d4 <_dtoa_r+0x5e4>
 80151ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80151d2:	e04a      	b.n	801526a <_dtoa_r+0x67a>
 80151d4:	4615      	mov	r5, r2
 80151d6:	e7f4      	b.n	80151c2 <_dtoa_r+0x5d2>
 80151d8:	4b05      	ldr	r3, [pc, #20]	; (80151f0 <_dtoa_r+0x600>)
 80151da:	f7eb fa25 	bl	8000628 <__aeabi_dmul>
 80151de:	e9cd 0100 	strd	r0, r1, [sp]
 80151e2:	e7bc      	b.n	801515e <_dtoa_r+0x56e>
 80151e4:	08018358 	.word	0x08018358
 80151e8:	08018330 	.word	0x08018330
 80151ec:	3ff00000 	.word	0x3ff00000
 80151f0:	40240000 	.word	0x40240000
 80151f4:	401c0000 	.word	0x401c0000
 80151f8:	40140000 	.word	0x40140000
 80151fc:	3fe00000 	.word	0x3fe00000
 8015200:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015204:	465d      	mov	r5, fp
 8015206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801520a:	4630      	mov	r0, r6
 801520c:	4639      	mov	r1, r7
 801520e:	f7eb fb35 	bl	800087c <__aeabi_ddiv>
 8015212:	f7eb fcb9 	bl	8000b88 <__aeabi_d2iz>
 8015216:	4680      	mov	r8, r0
 8015218:	f7eb f99c 	bl	8000554 <__aeabi_i2d>
 801521c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015220:	f7eb fa02 	bl	8000628 <__aeabi_dmul>
 8015224:	4602      	mov	r2, r0
 8015226:	460b      	mov	r3, r1
 8015228:	4630      	mov	r0, r6
 801522a:	4639      	mov	r1, r7
 801522c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015230:	f7eb f842 	bl	80002b8 <__aeabi_dsub>
 8015234:	f805 6b01 	strb.w	r6, [r5], #1
 8015238:	eba5 060b 	sub.w	r6, r5, fp
 801523c:	45b1      	cmp	r9, r6
 801523e:	4602      	mov	r2, r0
 8015240:	460b      	mov	r3, r1
 8015242:	d139      	bne.n	80152b8 <_dtoa_r+0x6c8>
 8015244:	f7eb f83a 	bl	80002bc <__adddf3>
 8015248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801524c:	4606      	mov	r6, r0
 801524e:	460f      	mov	r7, r1
 8015250:	f7eb fc7a 	bl	8000b48 <__aeabi_dcmpgt>
 8015254:	b9c8      	cbnz	r0, 801528a <_dtoa_r+0x69a>
 8015256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801525a:	4630      	mov	r0, r6
 801525c:	4639      	mov	r1, r7
 801525e:	f7eb fc4b 	bl	8000af8 <__aeabi_dcmpeq>
 8015262:	b110      	cbz	r0, 801526a <_dtoa_r+0x67a>
 8015264:	f018 0f01 	tst.w	r8, #1
 8015268:	d10f      	bne.n	801528a <_dtoa_r+0x69a>
 801526a:	9904      	ldr	r1, [sp, #16]
 801526c:	4620      	mov	r0, r4
 801526e:	f000 fffd 	bl	801626c <_Bfree>
 8015272:	2300      	movs	r3, #0
 8015274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015276:	702b      	strb	r3, [r5, #0]
 8015278:	f10a 0301 	add.w	r3, sl, #1
 801527c:	6013      	str	r3, [r2, #0]
 801527e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015280:	2b00      	cmp	r3, #0
 8015282:	f000 8241 	beq.w	8015708 <_dtoa_r+0xb18>
 8015286:	601d      	str	r5, [r3, #0]
 8015288:	e23e      	b.n	8015708 <_dtoa_r+0xb18>
 801528a:	f8cd a020 	str.w	sl, [sp, #32]
 801528e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015292:	2a39      	cmp	r2, #57	; 0x39
 8015294:	f105 33ff 	add.w	r3, r5, #4294967295
 8015298:	d108      	bne.n	80152ac <_dtoa_r+0x6bc>
 801529a:	459b      	cmp	fp, r3
 801529c:	d10a      	bne.n	80152b4 <_dtoa_r+0x6c4>
 801529e:	9b08      	ldr	r3, [sp, #32]
 80152a0:	3301      	adds	r3, #1
 80152a2:	9308      	str	r3, [sp, #32]
 80152a4:	2330      	movs	r3, #48	; 0x30
 80152a6:	f88b 3000 	strb.w	r3, [fp]
 80152aa:	465b      	mov	r3, fp
 80152ac:	781a      	ldrb	r2, [r3, #0]
 80152ae:	3201      	adds	r2, #1
 80152b0:	701a      	strb	r2, [r3, #0]
 80152b2:	e78c      	b.n	80151ce <_dtoa_r+0x5de>
 80152b4:	461d      	mov	r5, r3
 80152b6:	e7ea      	b.n	801528e <_dtoa_r+0x69e>
 80152b8:	2200      	movs	r2, #0
 80152ba:	4b9b      	ldr	r3, [pc, #620]	; (8015528 <_dtoa_r+0x938>)
 80152bc:	f7eb f9b4 	bl	8000628 <__aeabi_dmul>
 80152c0:	2200      	movs	r2, #0
 80152c2:	2300      	movs	r3, #0
 80152c4:	4606      	mov	r6, r0
 80152c6:	460f      	mov	r7, r1
 80152c8:	f7eb fc16 	bl	8000af8 <__aeabi_dcmpeq>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d09a      	beq.n	8015206 <_dtoa_r+0x616>
 80152d0:	e7cb      	b.n	801526a <_dtoa_r+0x67a>
 80152d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152d4:	2a00      	cmp	r2, #0
 80152d6:	f000 808b 	beq.w	80153f0 <_dtoa_r+0x800>
 80152da:	9a06      	ldr	r2, [sp, #24]
 80152dc:	2a01      	cmp	r2, #1
 80152de:	dc6e      	bgt.n	80153be <_dtoa_r+0x7ce>
 80152e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152e2:	2a00      	cmp	r2, #0
 80152e4:	d067      	beq.n	80153b6 <_dtoa_r+0x7c6>
 80152e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80152ea:	9f07      	ldr	r7, [sp, #28]
 80152ec:	9d05      	ldr	r5, [sp, #20]
 80152ee:	9a05      	ldr	r2, [sp, #20]
 80152f0:	2101      	movs	r1, #1
 80152f2:	441a      	add	r2, r3
 80152f4:	4620      	mov	r0, r4
 80152f6:	9205      	str	r2, [sp, #20]
 80152f8:	4498      	add	r8, r3
 80152fa:	f001 f895 	bl	8016428 <__i2b>
 80152fe:	4606      	mov	r6, r0
 8015300:	2d00      	cmp	r5, #0
 8015302:	dd0c      	ble.n	801531e <_dtoa_r+0x72e>
 8015304:	f1b8 0f00 	cmp.w	r8, #0
 8015308:	dd09      	ble.n	801531e <_dtoa_r+0x72e>
 801530a:	4545      	cmp	r5, r8
 801530c:	9a05      	ldr	r2, [sp, #20]
 801530e:	462b      	mov	r3, r5
 8015310:	bfa8      	it	ge
 8015312:	4643      	movge	r3, r8
 8015314:	1ad2      	subs	r2, r2, r3
 8015316:	9205      	str	r2, [sp, #20]
 8015318:	1aed      	subs	r5, r5, r3
 801531a:	eba8 0803 	sub.w	r8, r8, r3
 801531e:	9b07      	ldr	r3, [sp, #28]
 8015320:	b1eb      	cbz	r3, 801535e <_dtoa_r+0x76e>
 8015322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015324:	2b00      	cmp	r3, #0
 8015326:	d067      	beq.n	80153f8 <_dtoa_r+0x808>
 8015328:	b18f      	cbz	r7, 801534e <_dtoa_r+0x75e>
 801532a:	4631      	mov	r1, r6
 801532c:	463a      	mov	r2, r7
 801532e:	4620      	mov	r0, r4
 8015330:	f001 f91a 	bl	8016568 <__pow5mult>
 8015334:	9a04      	ldr	r2, [sp, #16]
 8015336:	4601      	mov	r1, r0
 8015338:	4606      	mov	r6, r0
 801533a:	4620      	mov	r0, r4
 801533c:	f001 f87d 	bl	801643a <__multiply>
 8015340:	9904      	ldr	r1, [sp, #16]
 8015342:	9008      	str	r0, [sp, #32]
 8015344:	4620      	mov	r0, r4
 8015346:	f000 ff91 	bl	801626c <_Bfree>
 801534a:	9b08      	ldr	r3, [sp, #32]
 801534c:	9304      	str	r3, [sp, #16]
 801534e:	9b07      	ldr	r3, [sp, #28]
 8015350:	1bda      	subs	r2, r3, r7
 8015352:	d004      	beq.n	801535e <_dtoa_r+0x76e>
 8015354:	9904      	ldr	r1, [sp, #16]
 8015356:	4620      	mov	r0, r4
 8015358:	f001 f906 	bl	8016568 <__pow5mult>
 801535c:	9004      	str	r0, [sp, #16]
 801535e:	2101      	movs	r1, #1
 8015360:	4620      	mov	r0, r4
 8015362:	f001 f861 	bl	8016428 <__i2b>
 8015366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015368:	4607      	mov	r7, r0
 801536a:	2b00      	cmp	r3, #0
 801536c:	f000 81d0 	beq.w	8015710 <_dtoa_r+0xb20>
 8015370:	461a      	mov	r2, r3
 8015372:	4601      	mov	r1, r0
 8015374:	4620      	mov	r0, r4
 8015376:	f001 f8f7 	bl	8016568 <__pow5mult>
 801537a:	9b06      	ldr	r3, [sp, #24]
 801537c:	2b01      	cmp	r3, #1
 801537e:	4607      	mov	r7, r0
 8015380:	dc40      	bgt.n	8015404 <_dtoa_r+0x814>
 8015382:	9b00      	ldr	r3, [sp, #0]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d139      	bne.n	80153fc <_dtoa_r+0x80c>
 8015388:	9b01      	ldr	r3, [sp, #4]
 801538a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801538e:	2b00      	cmp	r3, #0
 8015390:	d136      	bne.n	8015400 <_dtoa_r+0x810>
 8015392:	9b01      	ldr	r3, [sp, #4]
 8015394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015398:	0d1b      	lsrs	r3, r3, #20
 801539a:	051b      	lsls	r3, r3, #20
 801539c:	b12b      	cbz	r3, 80153aa <_dtoa_r+0x7ba>
 801539e:	9b05      	ldr	r3, [sp, #20]
 80153a0:	3301      	adds	r3, #1
 80153a2:	9305      	str	r3, [sp, #20]
 80153a4:	f108 0801 	add.w	r8, r8, #1
 80153a8:	2301      	movs	r3, #1
 80153aa:	9307      	str	r3, [sp, #28]
 80153ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d12a      	bne.n	8015408 <_dtoa_r+0x818>
 80153b2:	2001      	movs	r0, #1
 80153b4:	e030      	b.n	8015418 <_dtoa_r+0x828>
 80153b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80153bc:	e795      	b.n	80152ea <_dtoa_r+0x6fa>
 80153be:	9b07      	ldr	r3, [sp, #28]
 80153c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80153c4:	42bb      	cmp	r3, r7
 80153c6:	bfbf      	itttt	lt
 80153c8:	9b07      	ldrlt	r3, [sp, #28]
 80153ca:	9707      	strlt	r7, [sp, #28]
 80153cc:	1afa      	sublt	r2, r7, r3
 80153ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80153d0:	bfbb      	ittet	lt
 80153d2:	189b      	addlt	r3, r3, r2
 80153d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80153d6:	1bdf      	subge	r7, r3, r7
 80153d8:	2700      	movlt	r7, #0
 80153da:	f1b9 0f00 	cmp.w	r9, #0
 80153de:	bfb5      	itete	lt
 80153e0:	9b05      	ldrlt	r3, [sp, #20]
 80153e2:	9d05      	ldrge	r5, [sp, #20]
 80153e4:	eba3 0509 	sublt.w	r5, r3, r9
 80153e8:	464b      	movge	r3, r9
 80153ea:	bfb8      	it	lt
 80153ec:	2300      	movlt	r3, #0
 80153ee:	e77e      	b.n	80152ee <_dtoa_r+0x6fe>
 80153f0:	9f07      	ldr	r7, [sp, #28]
 80153f2:	9d05      	ldr	r5, [sp, #20]
 80153f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80153f6:	e783      	b.n	8015300 <_dtoa_r+0x710>
 80153f8:	9a07      	ldr	r2, [sp, #28]
 80153fa:	e7ab      	b.n	8015354 <_dtoa_r+0x764>
 80153fc:	2300      	movs	r3, #0
 80153fe:	e7d4      	b.n	80153aa <_dtoa_r+0x7ba>
 8015400:	9b00      	ldr	r3, [sp, #0]
 8015402:	e7d2      	b.n	80153aa <_dtoa_r+0x7ba>
 8015404:	2300      	movs	r3, #0
 8015406:	9307      	str	r3, [sp, #28]
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801540e:	6918      	ldr	r0, [r3, #16]
 8015410:	f000 ffbc 	bl	801638c <__hi0bits>
 8015414:	f1c0 0020 	rsb	r0, r0, #32
 8015418:	4440      	add	r0, r8
 801541a:	f010 001f 	ands.w	r0, r0, #31
 801541e:	d047      	beq.n	80154b0 <_dtoa_r+0x8c0>
 8015420:	f1c0 0320 	rsb	r3, r0, #32
 8015424:	2b04      	cmp	r3, #4
 8015426:	dd3b      	ble.n	80154a0 <_dtoa_r+0x8b0>
 8015428:	9b05      	ldr	r3, [sp, #20]
 801542a:	f1c0 001c 	rsb	r0, r0, #28
 801542e:	4403      	add	r3, r0
 8015430:	9305      	str	r3, [sp, #20]
 8015432:	4405      	add	r5, r0
 8015434:	4480      	add	r8, r0
 8015436:	9b05      	ldr	r3, [sp, #20]
 8015438:	2b00      	cmp	r3, #0
 801543a:	dd05      	ble.n	8015448 <_dtoa_r+0x858>
 801543c:	461a      	mov	r2, r3
 801543e:	9904      	ldr	r1, [sp, #16]
 8015440:	4620      	mov	r0, r4
 8015442:	f001 f8df 	bl	8016604 <__lshift>
 8015446:	9004      	str	r0, [sp, #16]
 8015448:	f1b8 0f00 	cmp.w	r8, #0
 801544c:	dd05      	ble.n	801545a <_dtoa_r+0x86a>
 801544e:	4639      	mov	r1, r7
 8015450:	4642      	mov	r2, r8
 8015452:	4620      	mov	r0, r4
 8015454:	f001 f8d6 	bl	8016604 <__lshift>
 8015458:	4607      	mov	r7, r0
 801545a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801545c:	b353      	cbz	r3, 80154b4 <_dtoa_r+0x8c4>
 801545e:	4639      	mov	r1, r7
 8015460:	9804      	ldr	r0, [sp, #16]
 8015462:	f001 f923 	bl	80166ac <__mcmp>
 8015466:	2800      	cmp	r0, #0
 8015468:	da24      	bge.n	80154b4 <_dtoa_r+0x8c4>
 801546a:	2300      	movs	r3, #0
 801546c:	220a      	movs	r2, #10
 801546e:	9904      	ldr	r1, [sp, #16]
 8015470:	4620      	mov	r0, r4
 8015472:	f000 ff12 	bl	801629a <__multadd>
 8015476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015478:	9004      	str	r0, [sp, #16]
 801547a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801547e:	2b00      	cmp	r3, #0
 8015480:	f000 814d 	beq.w	801571e <_dtoa_r+0xb2e>
 8015484:	2300      	movs	r3, #0
 8015486:	4631      	mov	r1, r6
 8015488:	220a      	movs	r2, #10
 801548a:	4620      	mov	r0, r4
 801548c:	f000 ff05 	bl	801629a <__multadd>
 8015490:	9b02      	ldr	r3, [sp, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	4606      	mov	r6, r0
 8015496:	dc4f      	bgt.n	8015538 <_dtoa_r+0x948>
 8015498:	9b06      	ldr	r3, [sp, #24]
 801549a:	2b02      	cmp	r3, #2
 801549c:	dd4c      	ble.n	8015538 <_dtoa_r+0x948>
 801549e:	e011      	b.n	80154c4 <_dtoa_r+0x8d4>
 80154a0:	d0c9      	beq.n	8015436 <_dtoa_r+0x846>
 80154a2:	9a05      	ldr	r2, [sp, #20]
 80154a4:	331c      	adds	r3, #28
 80154a6:	441a      	add	r2, r3
 80154a8:	9205      	str	r2, [sp, #20]
 80154aa:	441d      	add	r5, r3
 80154ac:	4498      	add	r8, r3
 80154ae:	e7c2      	b.n	8015436 <_dtoa_r+0x846>
 80154b0:	4603      	mov	r3, r0
 80154b2:	e7f6      	b.n	80154a2 <_dtoa_r+0x8b2>
 80154b4:	f1b9 0f00 	cmp.w	r9, #0
 80154b8:	dc38      	bgt.n	801552c <_dtoa_r+0x93c>
 80154ba:	9b06      	ldr	r3, [sp, #24]
 80154bc:	2b02      	cmp	r3, #2
 80154be:	dd35      	ble.n	801552c <_dtoa_r+0x93c>
 80154c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80154c4:	9b02      	ldr	r3, [sp, #8]
 80154c6:	b963      	cbnz	r3, 80154e2 <_dtoa_r+0x8f2>
 80154c8:	4639      	mov	r1, r7
 80154ca:	2205      	movs	r2, #5
 80154cc:	4620      	mov	r0, r4
 80154ce:	f000 fee4 	bl	801629a <__multadd>
 80154d2:	4601      	mov	r1, r0
 80154d4:	4607      	mov	r7, r0
 80154d6:	9804      	ldr	r0, [sp, #16]
 80154d8:	f001 f8e8 	bl	80166ac <__mcmp>
 80154dc:	2800      	cmp	r0, #0
 80154de:	f73f adcc 	bgt.w	801507a <_dtoa_r+0x48a>
 80154e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154e4:	465d      	mov	r5, fp
 80154e6:	ea6f 0a03 	mvn.w	sl, r3
 80154ea:	f04f 0900 	mov.w	r9, #0
 80154ee:	4639      	mov	r1, r7
 80154f0:	4620      	mov	r0, r4
 80154f2:	f000 febb 	bl	801626c <_Bfree>
 80154f6:	2e00      	cmp	r6, #0
 80154f8:	f43f aeb7 	beq.w	801526a <_dtoa_r+0x67a>
 80154fc:	f1b9 0f00 	cmp.w	r9, #0
 8015500:	d005      	beq.n	801550e <_dtoa_r+0x91e>
 8015502:	45b1      	cmp	r9, r6
 8015504:	d003      	beq.n	801550e <_dtoa_r+0x91e>
 8015506:	4649      	mov	r1, r9
 8015508:	4620      	mov	r0, r4
 801550a:	f000 feaf 	bl	801626c <_Bfree>
 801550e:	4631      	mov	r1, r6
 8015510:	4620      	mov	r0, r4
 8015512:	f000 feab 	bl	801626c <_Bfree>
 8015516:	e6a8      	b.n	801526a <_dtoa_r+0x67a>
 8015518:	2700      	movs	r7, #0
 801551a:	463e      	mov	r6, r7
 801551c:	e7e1      	b.n	80154e2 <_dtoa_r+0x8f2>
 801551e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015522:	463e      	mov	r6, r7
 8015524:	e5a9      	b.n	801507a <_dtoa_r+0x48a>
 8015526:	bf00      	nop
 8015528:	40240000 	.word	0x40240000
 801552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015532:	2b00      	cmp	r3, #0
 8015534:	f000 80fa 	beq.w	801572c <_dtoa_r+0xb3c>
 8015538:	2d00      	cmp	r5, #0
 801553a:	dd05      	ble.n	8015548 <_dtoa_r+0x958>
 801553c:	4631      	mov	r1, r6
 801553e:	462a      	mov	r2, r5
 8015540:	4620      	mov	r0, r4
 8015542:	f001 f85f 	bl	8016604 <__lshift>
 8015546:	4606      	mov	r6, r0
 8015548:	9b07      	ldr	r3, [sp, #28]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d04c      	beq.n	80155e8 <_dtoa_r+0x9f8>
 801554e:	6871      	ldr	r1, [r6, #4]
 8015550:	4620      	mov	r0, r4
 8015552:	f000 fe57 	bl	8016204 <_Balloc>
 8015556:	6932      	ldr	r2, [r6, #16]
 8015558:	3202      	adds	r2, #2
 801555a:	4605      	mov	r5, r0
 801555c:	0092      	lsls	r2, r2, #2
 801555e:	f106 010c 	add.w	r1, r6, #12
 8015562:	300c      	adds	r0, #12
 8015564:	f7fd fb54 	bl	8012c10 <memcpy>
 8015568:	2201      	movs	r2, #1
 801556a:	4629      	mov	r1, r5
 801556c:	4620      	mov	r0, r4
 801556e:	f001 f849 	bl	8016604 <__lshift>
 8015572:	9b00      	ldr	r3, [sp, #0]
 8015574:	f8cd b014 	str.w	fp, [sp, #20]
 8015578:	f003 0301 	and.w	r3, r3, #1
 801557c:	46b1      	mov	r9, r6
 801557e:	9307      	str	r3, [sp, #28]
 8015580:	4606      	mov	r6, r0
 8015582:	4639      	mov	r1, r7
 8015584:	9804      	ldr	r0, [sp, #16]
 8015586:	f7ff faa7 	bl	8014ad8 <quorem>
 801558a:	4649      	mov	r1, r9
 801558c:	4605      	mov	r5, r0
 801558e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015592:	9804      	ldr	r0, [sp, #16]
 8015594:	f001 f88a 	bl	80166ac <__mcmp>
 8015598:	4632      	mov	r2, r6
 801559a:	9000      	str	r0, [sp, #0]
 801559c:	4639      	mov	r1, r7
 801559e:	4620      	mov	r0, r4
 80155a0:	f001 f89e 	bl	80166e0 <__mdiff>
 80155a4:	68c3      	ldr	r3, [r0, #12]
 80155a6:	4602      	mov	r2, r0
 80155a8:	bb03      	cbnz	r3, 80155ec <_dtoa_r+0x9fc>
 80155aa:	4601      	mov	r1, r0
 80155ac:	9008      	str	r0, [sp, #32]
 80155ae:	9804      	ldr	r0, [sp, #16]
 80155b0:	f001 f87c 	bl	80166ac <__mcmp>
 80155b4:	9a08      	ldr	r2, [sp, #32]
 80155b6:	4603      	mov	r3, r0
 80155b8:	4611      	mov	r1, r2
 80155ba:	4620      	mov	r0, r4
 80155bc:	9308      	str	r3, [sp, #32]
 80155be:	f000 fe55 	bl	801626c <_Bfree>
 80155c2:	9b08      	ldr	r3, [sp, #32]
 80155c4:	b9a3      	cbnz	r3, 80155f0 <_dtoa_r+0xa00>
 80155c6:	9a06      	ldr	r2, [sp, #24]
 80155c8:	b992      	cbnz	r2, 80155f0 <_dtoa_r+0xa00>
 80155ca:	9a07      	ldr	r2, [sp, #28]
 80155cc:	b982      	cbnz	r2, 80155f0 <_dtoa_r+0xa00>
 80155ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155d2:	d029      	beq.n	8015628 <_dtoa_r+0xa38>
 80155d4:	9b00      	ldr	r3, [sp, #0]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	dd01      	ble.n	80155de <_dtoa_r+0x9ee>
 80155da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80155de:	9b05      	ldr	r3, [sp, #20]
 80155e0:	1c5d      	adds	r5, r3, #1
 80155e2:	f883 8000 	strb.w	r8, [r3]
 80155e6:	e782      	b.n	80154ee <_dtoa_r+0x8fe>
 80155e8:	4630      	mov	r0, r6
 80155ea:	e7c2      	b.n	8015572 <_dtoa_r+0x982>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e7e3      	b.n	80155b8 <_dtoa_r+0x9c8>
 80155f0:	9a00      	ldr	r2, [sp, #0]
 80155f2:	2a00      	cmp	r2, #0
 80155f4:	db04      	blt.n	8015600 <_dtoa_r+0xa10>
 80155f6:	d125      	bne.n	8015644 <_dtoa_r+0xa54>
 80155f8:	9a06      	ldr	r2, [sp, #24]
 80155fa:	bb1a      	cbnz	r2, 8015644 <_dtoa_r+0xa54>
 80155fc:	9a07      	ldr	r2, [sp, #28]
 80155fe:	bb0a      	cbnz	r2, 8015644 <_dtoa_r+0xa54>
 8015600:	2b00      	cmp	r3, #0
 8015602:	ddec      	ble.n	80155de <_dtoa_r+0x9ee>
 8015604:	2201      	movs	r2, #1
 8015606:	9904      	ldr	r1, [sp, #16]
 8015608:	4620      	mov	r0, r4
 801560a:	f000 fffb 	bl	8016604 <__lshift>
 801560e:	4639      	mov	r1, r7
 8015610:	9004      	str	r0, [sp, #16]
 8015612:	f001 f84b 	bl	80166ac <__mcmp>
 8015616:	2800      	cmp	r0, #0
 8015618:	dc03      	bgt.n	8015622 <_dtoa_r+0xa32>
 801561a:	d1e0      	bne.n	80155de <_dtoa_r+0x9ee>
 801561c:	f018 0f01 	tst.w	r8, #1
 8015620:	d0dd      	beq.n	80155de <_dtoa_r+0x9ee>
 8015622:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015626:	d1d8      	bne.n	80155da <_dtoa_r+0x9ea>
 8015628:	9b05      	ldr	r3, [sp, #20]
 801562a:	9a05      	ldr	r2, [sp, #20]
 801562c:	1c5d      	adds	r5, r3, #1
 801562e:	2339      	movs	r3, #57	; 0x39
 8015630:	7013      	strb	r3, [r2, #0]
 8015632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015636:	2b39      	cmp	r3, #57	; 0x39
 8015638:	f105 32ff 	add.w	r2, r5, #4294967295
 801563c:	d04f      	beq.n	80156de <_dtoa_r+0xaee>
 801563e:	3301      	adds	r3, #1
 8015640:	7013      	strb	r3, [r2, #0]
 8015642:	e754      	b.n	80154ee <_dtoa_r+0x8fe>
 8015644:	9a05      	ldr	r2, [sp, #20]
 8015646:	2b00      	cmp	r3, #0
 8015648:	f102 0501 	add.w	r5, r2, #1
 801564c:	dd06      	ble.n	801565c <_dtoa_r+0xa6c>
 801564e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015652:	d0e9      	beq.n	8015628 <_dtoa_r+0xa38>
 8015654:	f108 0801 	add.w	r8, r8, #1
 8015658:	9b05      	ldr	r3, [sp, #20]
 801565a:	e7c2      	b.n	80155e2 <_dtoa_r+0x9f2>
 801565c:	9a02      	ldr	r2, [sp, #8]
 801565e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015662:	eba5 030b 	sub.w	r3, r5, fp
 8015666:	4293      	cmp	r3, r2
 8015668:	d021      	beq.n	80156ae <_dtoa_r+0xabe>
 801566a:	2300      	movs	r3, #0
 801566c:	220a      	movs	r2, #10
 801566e:	9904      	ldr	r1, [sp, #16]
 8015670:	4620      	mov	r0, r4
 8015672:	f000 fe12 	bl	801629a <__multadd>
 8015676:	45b1      	cmp	r9, r6
 8015678:	9004      	str	r0, [sp, #16]
 801567a:	f04f 0300 	mov.w	r3, #0
 801567e:	f04f 020a 	mov.w	r2, #10
 8015682:	4649      	mov	r1, r9
 8015684:	4620      	mov	r0, r4
 8015686:	d105      	bne.n	8015694 <_dtoa_r+0xaa4>
 8015688:	f000 fe07 	bl	801629a <__multadd>
 801568c:	4681      	mov	r9, r0
 801568e:	4606      	mov	r6, r0
 8015690:	9505      	str	r5, [sp, #20]
 8015692:	e776      	b.n	8015582 <_dtoa_r+0x992>
 8015694:	f000 fe01 	bl	801629a <__multadd>
 8015698:	4631      	mov	r1, r6
 801569a:	4681      	mov	r9, r0
 801569c:	2300      	movs	r3, #0
 801569e:	220a      	movs	r2, #10
 80156a0:	4620      	mov	r0, r4
 80156a2:	f000 fdfa 	bl	801629a <__multadd>
 80156a6:	4606      	mov	r6, r0
 80156a8:	e7f2      	b.n	8015690 <_dtoa_r+0xaa0>
 80156aa:	f04f 0900 	mov.w	r9, #0
 80156ae:	2201      	movs	r2, #1
 80156b0:	9904      	ldr	r1, [sp, #16]
 80156b2:	4620      	mov	r0, r4
 80156b4:	f000 ffa6 	bl	8016604 <__lshift>
 80156b8:	4639      	mov	r1, r7
 80156ba:	9004      	str	r0, [sp, #16]
 80156bc:	f000 fff6 	bl	80166ac <__mcmp>
 80156c0:	2800      	cmp	r0, #0
 80156c2:	dcb6      	bgt.n	8015632 <_dtoa_r+0xa42>
 80156c4:	d102      	bne.n	80156cc <_dtoa_r+0xadc>
 80156c6:	f018 0f01 	tst.w	r8, #1
 80156ca:	d1b2      	bne.n	8015632 <_dtoa_r+0xa42>
 80156cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80156d0:	2b30      	cmp	r3, #48	; 0x30
 80156d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80156d6:	f47f af0a 	bne.w	80154ee <_dtoa_r+0x8fe>
 80156da:	4615      	mov	r5, r2
 80156dc:	e7f6      	b.n	80156cc <_dtoa_r+0xadc>
 80156de:	4593      	cmp	fp, r2
 80156e0:	d105      	bne.n	80156ee <_dtoa_r+0xafe>
 80156e2:	2331      	movs	r3, #49	; 0x31
 80156e4:	f10a 0a01 	add.w	sl, sl, #1
 80156e8:	f88b 3000 	strb.w	r3, [fp]
 80156ec:	e6ff      	b.n	80154ee <_dtoa_r+0x8fe>
 80156ee:	4615      	mov	r5, r2
 80156f0:	e79f      	b.n	8015632 <_dtoa_r+0xa42>
 80156f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015758 <_dtoa_r+0xb68>
 80156f6:	e007      	b.n	8015708 <_dtoa_r+0xb18>
 80156f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 801575c <_dtoa_r+0xb6c>
 80156fe:	b11b      	cbz	r3, 8015708 <_dtoa_r+0xb18>
 8015700:	f10b 0308 	add.w	r3, fp, #8
 8015704:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015706:	6013      	str	r3, [r2, #0]
 8015708:	4658      	mov	r0, fp
 801570a:	b017      	add	sp, #92	; 0x5c
 801570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015710:	9b06      	ldr	r3, [sp, #24]
 8015712:	2b01      	cmp	r3, #1
 8015714:	f77f ae35 	ble.w	8015382 <_dtoa_r+0x792>
 8015718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801571a:	9307      	str	r3, [sp, #28]
 801571c:	e649      	b.n	80153b2 <_dtoa_r+0x7c2>
 801571e:	9b02      	ldr	r3, [sp, #8]
 8015720:	2b00      	cmp	r3, #0
 8015722:	dc03      	bgt.n	801572c <_dtoa_r+0xb3c>
 8015724:	9b06      	ldr	r3, [sp, #24]
 8015726:	2b02      	cmp	r3, #2
 8015728:	f73f aecc 	bgt.w	80154c4 <_dtoa_r+0x8d4>
 801572c:	465d      	mov	r5, fp
 801572e:	4639      	mov	r1, r7
 8015730:	9804      	ldr	r0, [sp, #16]
 8015732:	f7ff f9d1 	bl	8014ad8 <quorem>
 8015736:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801573a:	f805 8b01 	strb.w	r8, [r5], #1
 801573e:	9a02      	ldr	r2, [sp, #8]
 8015740:	eba5 030b 	sub.w	r3, r5, fp
 8015744:	429a      	cmp	r2, r3
 8015746:	ddb0      	ble.n	80156aa <_dtoa_r+0xaba>
 8015748:	2300      	movs	r3, #0
 801574a:	220a      	movs	r2, #10
 801574c:	9904      	ldr	r1, [sp, #16]
 801574e:	4620      	mov	r0, r4
 8015750:	f000 fda3 	bl	801629a <__multadd>
 8015754:	9004      	str	r0, [sp, #16]
 8015756:	e7ea      	b.n	801572e <_dtoa_r+0xb3e>
 8015758:	08018453 	.word	0x08018453
 801575c:	080182b0 	.word	0x080182b0

08015760 <__sflush_r>:
 8015760:	898a      	ldrh	r2, [r1, #12]
 8015762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015766:	4605      	mov	r5, r0
 8015768:	0710      	lsls	r0, r2, #28
 801576a:	460c      	mov	r4, r1
 801576c:	d458      	bmi.n	8015820 <__sflush_r+0xc0>
 801576e:	684b      	ldr	r3, [r1, #4]
 8015770:	2b00      	cmp	r3, #0
 8015772:	dc05      	bgt.n	8015780 <__sflush_r+0x20>
 8015774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015776:	2b00      	cmp	r3, #0
 8015778:	dc02      	bgt.n	8015780 <__sflush_r+0x20>
 801577a:	2000      	movs	r0, #0
 801577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015782:	2e00      	cmp	r6, #0
 8015784:	d0f9      	beq.n	801577a <__sflush_r+0x1a>
 8015786:	2300      	movs	r3, #0
 8015788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801578c:	682f      	ldr	r7, [r5, #0]
 801578e:	6a21      	ldr	r1, [r4, #32]
 8015790:	602b      	str	r3, [r5, #0]
 8015792:	d032      	beq.n	80157fa <__sflush_r+0x9a>
 8015794:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015796:	89a3      	ldrh	r3, [r4, #12]
 8015798:	075a      	lsls	r2, r3, #29
 801579a:	d505      	bpl.n	80157a8 <__sflush_r+0x48>
 801579c:	6863      	ldr	r3, [r4, #4]
 801579e:	1ac0      	subs	r0, r0, r3
 80157a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80157a2:	b10b      	cbz	r3, 80157a8 <__sflush_r+0x48>
 80157a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157a6:	1ac0      	subs	r0, r0, r3
 80157a8:	2300      	movs	r3, #0
 80157aa:	4602      	mov	r2, r0
 80157ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157ae:	6a21      	ldr	r1, [r4, #32]
 80157b0:	4628      	mov	r0, r5
 80157b2:	47b0      	blx	r6
 80157b4:	1c43      	adds	r3, r0, #1
 80157b6:	89a3      	ldrh	r3, [r4, #12]
 80157b8:	d106      	bne.n	80157c8 <__sflush_r+0x68>
 80157ba:	6829      	ldr	r1, [r5, #0]
 80157bc:	291d      	cmp	r1, #29
 80157be:	d848      	bhi.n	8015852 <__sflush_r+0xf2>
 80157c0:	4a29      	ldr	r2, [pc, #164]	; (8015868 <__sflush_r+0x108>)
 80157c2:	40ca      	lsrs	r2, r1
 80157c4:	07d6      	lsls	r6, r2, #31
 80157c6:	d544      	bpl.n	8015852 <__sflush_r+0xf2>
 80157c8:	2200      	movs	r2, #0
 80157ca:	6062      	str	r2, [r4, #4]
 80157cc:	04d9      	lsls	r1, r3, #19
 80157ce:	6922      	ldr	r2, [r4, #16]
 80157d0:	6022      	str	r2, [r4, #0]
 80157d2:	d504      	bpl.n	80157de <__sflush_r+0x7e>
 80157d4:	1c42      	adds	r2, r0, #1
 80157d6:	d101      	bne.n	80157dc <__sflush_r+0x7c>
 80157d8:	682b      	ldr	r3, [r5, #0]
 80157da:	b903      	cbnz	r3, 80157de <__sflush_r+0x7e>
 80157dc:	6560      	str	r0, [r4, #84]	; 0x54
 80157de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157e0:	602f      	str	r7, [r5, #0]
 80157e2:	2900      	cmp	r1, #0
 80157e4:	d0c9      	beq.n	801577a <__sflush_r+0x1a>
 80157e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157ea:	4299      	cmp	r1, r3
 80157ec:	d002      	beq.n	80157f4 <__sflush_r+0x94>
 80157ee:	4628      	mov	r0, r5
 80157f0:	f001 f916 	bl	8016a20 <_free_r>
 80157f4:	2000      	movs	r0, #0
 80157f6:	6360      	str	r0, [r4, #52]	; 0x34
 80157f8:	e7c0      	b.n	801577c <__sflush_r+0x1c>
 80157fa:	2301      	movs	r3, #1
 80157fc:	4628      	mov	r0, r5
 80157fe:	47b0      	blx	r6
 8015800:	1c41      	adds	r1, r0, #1
 8015802:	d1c8      	bne.n	8015796 <__sflush_r+0x36>
 8015804:	682b      	ldr	r3, [r5, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d0c5      	beq.n	8015796 <__sflush_r+0x36>
 801580a:	2b1d      	cmp	r3, #29
 801580c:	d001      	beq.n	8015812 <__sflush_r+0xb2>
 801580e:	2b16      	cmp	r3, #22
 8015810:	d101      	bne.n	8015816 <__sflush_r+0xb6>
 8015812:	602f      	str	r7, [r5, #0]
 8015814:	e7b1      	b.n	801577a <__sflush_r+0x1a>
 8015816:	89a3      	ldrh	r3, [r4, #12]
 8015818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581c:	81a3      	strh	r3, [r4, #12]
 801581e:	e7ad      	b.n	801577c <__sflush_r+0x1c>
 8015820:	690f      	ldr	r7, [r1, #16]
 8015822:	2f00      	cmp	r7, #0
 8015824:	d0a9      	beq.n	801577a <__sflush_r+0x1a>
 8015826:	0793      	lsls	r3, r2, #30
 8015828:	680e      	ldr	r6, [r1, #0]
 801582a:	bf08      	it	eq
 801582c:	694b      	ldreq	r3, [r1, #20]
 801582e:	600f      	str	r7, [r1, #0]
 8015830:	bf18      	it	ne
 8015832:	2300      	movne	r3, #0
 8015834:	eba6 0807 	sub.w	r8, r6, r7
 8015838:	608b      	str	r3, [r1, #8]
 801583a:	f1b8 0f00 	cmp.w	r8, #0
 801583e:	dd9c      	ble.n	801577a <__sflush_r+0x1a>
 8015840:	4643      	mov	r3, r8
 8015842:	463a      	mov	r2, r7
 8015844:	6a21      	ldr	r1, [r4, #32]
 8015846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015848:	4628      	mov	r0, r5
 801584a:	47b0      	blx	r6
 801584c:	2800      	cmp	r0, #0
 801584e:	dc06      	bgt.n	801585e <__sflush_r+0xfe>
 8015850:	89a3      	ldrh	r3, [r4, #12]
 8015852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015856:	81a3      	strh	r3, [r4, #12]
 8015858:	f04f 30ff 	mov.w	r0, #4294967295
 801585c:	e78e      	b.n	801577c <__sflush_r+0x1c>
 801585e:	4407      	add	r7, r0
 8015860:	eba8 0800 	sub.w	r8, r8, r0
 8015864:	e7e9      	b.n	801583a <__sflush_r+0xda>
 8015866:	bf00      	nop
 8015868:	20400001 	.word	0x20400001

0801586c <_fflush_r>:
 801586c:	b538      	push	{r3, r4, r5, lr}
 801586e:	690b      	ldr	r3, [r1, #16]
 8015870:	4605      	mov	r5, r0
 8015872:	460c      	mov	r4, r1
 8015874:	b1db      	cbz	r3, 80158ae <_fflush_r+0x42>
 8015876:	b118      	cbz	r0, 8015880 <_fflush_r+0x14>
 8015878:	6983      	ldr	r3, [r0, #24]
 801587a:	b90b      	cbnz	r3, 8015880 <_fflush_r+0x14>
 801587c:	f000 f860 	bl	8015940 <__sinit>
 8015880:	4b0c      	ldr	r3, [pc, #48]	; (80158b4 <_fflush_r+0x48>)
 8015882:	429c      	cmp	r4, r3
 8015884:	d109      	bne.n	801589a <_fflush_r+0x2e>
 8015886:	686c      	ldr	r4, [r5, #4]
 8015888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801588c:	b17b      	cbz	r3, 80158ae <_fflush_r+0x42>
 801588e:	4621      	mov	r1, r4
 8015890:	4628      	mov	r0, r5
 8015892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015896:	f7ff bf63 	b.w	8015760 <__sflush_r>
 801589a:	4b07      	ldr	r3, [pc, #28]	; (80158b8 <_fflush_r+0x4c>)
 801589c:	429c      	cmp	r4, r3
 801589e:	d101      	bne.n	80158a4 <_fflush_r+0x38>
 80158a0:	68ac      	ldr	r4, [r5, #8]
 80158a2:	e7f1      	b.n	8015888 <_fflush_r+0x1c>
 80158a4:	4b05      	ldr	r3, [pc, #20]	; (80158bc <_fflush_r+0x50>)
 80158a6:	429c      	cmp	r4, r3
 80158a8:	bf08      	it	eq
 80158aa:	68ec      	ldreq	r4, [r5, #12]
 80158ac:	e7ec      	b.n	8015888 <_fflush_r+0x1c>
 80158ae:	2000      	movs	r0, #0
 80158b0:	bd38      	pop	{r3, r4, r5, pc}
 80158b2:	bf00      	nop
 80158b4:	080182e0 	.word	0x080182e0
 80158b8:	08018300 	.word	0x08018300
 80158bc:	080182c0 	.word	0x080182c0

080158c0 <std>:
 80158c0:	2300      	movs	r3, #0
 80158c2:	b510      	push	{r4, lr}
 80158c4:	4604      	mov	r4, r0
 80158c6:	e9c0 3300 	strd	r3, r3, [r0]
 80158ca:	6083      	str	r3, [r0, #8]
 80158cc:	8181      	strh	r1, [r0, #12]
 80158ce:	6643      	str	r3, [r0, #100]	; 0x64
 80158d0:	81c2      	strh	r2, [r0, #14]
 80158d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158d6:	6183      	str	r3, [r0, #24]
 80158d8:	4619      	mov	r1, r3
 80158da:	2208      	movs	r2, #8
 80158dc:	305c      	adds	r0, #92	; 0x5c
 80158de:	f7fd f9a2 	bl	8012c26 <memset>
 80158e2:	4b05      	ldr	r3, [pc, #20]	; (80158f8 <std+0x38>)
 80158e4:	6263      	str	r3, [r4, #36]	; 0x24
 80158e6:	4b05      	ldr	r3, [pc, #20]	; (80158fc <std+0x3c>)
 80158e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80158ea:	4b05      	ldr	r3, [pc, #20]	; (8015900 <std+0x40>)
 80158ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80158ee:	4b05      	ldr	r3, [pc, #20]	; (8015904 <std+0x44>)
 80158f0:	6224      	str	r4, [r4, #32]
 80158f2:	6323      	str	r3, [r4, #48]	; 0x30
 80158f4:	bd10      	pop	{r4, pc}
 80158f6:	bf00      	nop
 80158f8:	08013add 	.word	0x08013add
 80158fc:	08013b03 	.word	0x08013b03
 8015900:	08013b3b 	.word	0x08013b3b
 8015904:	08013b5f 	.word	0x08013b5f

08015908 <_cleanup_r>:
 8015908:	4901      	ldr	r1, [pc, #4]	; (8015910 <_cleanup_r+0x8>)
 801590a:	f000 b885 	b.w	8015a18 <_fwalk_reent>
 801590e:	bf00      	nop
 8015910:	0801586d 	.word	0x0801586d

08015914 <__sfmoreglue>:
 8015914:	b570      	push	{r4, r5, r6, lr}
 8015916:	1e4a      	subs	r2, r1, #1
 8015918:	2568      	movs	r5, #104	; 0x68
 801591a:	4355      	muls	r5, r2
 801591c:	460e      	mov	r6, r1
 801591e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015922:	f001 f8cb 	bl	8016abc <_malloc_r>
 8015926:	4604      	mov	r4, r0
 8015928:	b140      	cbz	r0, 801593c <__sfmoreglue+0x28>
 801592a:	2100      	movs	r1, #0
 801592c:	e9c0 1600 	strd	r1, r6, [r0]
 8015930:	300c      	adds	r0, #12
 8015932:	60a0      	str	r0, [r4, #8]
 8015934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015938:	f7fd f975 	bl	8012c26 <memset>
 801593c:	4620      	mov	r0, r4
 801593e:	bd70      	pop	{r4, r5, r6, pc}

08015940 <__sinit>:
 8015940:	6983      	ldr	r3, [r0, #24]
 8015942:	b510      	push	{r4, lr}
 8015944:	4604      	mov	r4, r0
 8015946:	bb33      	cbnz	r3, 8015996 <__sinit+0x56>
 8015948:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801594c:	6503      	str	r3, [r0, #80]	; 0x50
 801594e:	4b12      	ldr	r3, [pc, #72]	; (8015998 <__sinit+0x58>)
 8015950:	4a12      	ldr	r2, [pc, #72]	; (801599c <__sinit+0x5c>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	6282      	str	r2, [r0, #40]	; 0x28
 8015956:	4298      	cmp	r0, r3
 8015958:	bf04      	itt	eq
 801595a:	2301      	moveq	r3, #1
 801595c:	6183      	streq	r3, [r0, #24]
 801595e:	f000 f81f 	bl	80159a0 <__sfp>
 8015962:	6060      	str	r0, [r4, #4]
 8015964:	4620      	mov	r0, r4
 8015966:	f000 f81b 	bl	80159a0 <__sfp>
 801596a:	60a0      	str	r0, [r4, #8]
 801596c:	4620      	mov	r0, r4
 801596e:	f000 f817 	bl	80159a0 <__sfp>
 8015972:	2200      	movs	r2, #0
 8015974:	60e0      	str	r0, [r4, #12]
 8015976:	2104      	movs	r1, #4
 8015978:	6860      	ldr	r0, [r4, #4]
 801597a:	f7ff ffa1 	bl	80158c0 <std>
 801597e:	2201      	movs	r2, #1
 8015980:	2109      	movs	r1, #9
 8015982:	68a0      	ldr	r0, [r4, #8]
 8015984:	f7ff ff9c 	bl	80158c0 <std>
 8015988:	2202      	movs	r2, #2
 801598a:	2112      	movs	r1, #18
 801598c:	68e0      	ldr	r0, [r4, #12]
 801598e:	f7ff ff97 	bl	80158c0 <std>
 8015992:	2301      	movs	r3, #1
 8015994:	61a3      	str	r3, [r4, #24]
 8015996:	bd10      	pop	{r4, pc}
 8015998:	08018220 	.word	0x08018220
 801599c:	08015909 	.word	0x08015909

080159a0 <__sfp>:
 80159a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159a2:	4b1b      	ldr	r3, [pc, #108]	; (8015a10 <__sfp+0x70>)
 80159a4:	681e      	ldr	r6, [r3, #0]
 80159a6:	69b3      	ldr	r3, [r6, #24]
 80159a8:	4607      	mov	r7, r0
 80159aa:	b913      	cbnz	r3, 80159b2 <__sfp+0x12>
 80159ac:	4630      	mov	r0, r6
 80159ae:	f7ff ffc7 	bl	8015940 <__sinit>
 80159b2:	3648      	adds	r6, #72	; 0x48
 80159b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80159b8:	3b01      	subs	r3, #1
 80159ba:	d503      	bpl.n	80159c4 <__sfp+0x24>
 80159bc:	6833      	ldr	r3, [r6, #0]
 80159be:	b133      	cbz	r3, 80159ce <__sfp+0x2e>
 80159c0:	6836      	ldr	r6, [r6, #0]
 80159c2:	e7f7      	b.n	80159b4 <__sfp+0x14>
 80159c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159c8:	b16d      	cbz	r5, 80159e6 <__sfp+0x46>
 80159ca:	3468      	adds	r4, #104	; 0x68
 80159cc:	e7f4      	b.n	80159b8 <__sfp+0x18>
 80159ce:	2104      	movs	r1, #4
 80159d0:	4638      	mov	r0, r7
 80159d2:	f7ff ff9f 	bl	8015914 <__sfmoreglue>
 80159d6:	6030      	str	r0, [r6, #0]
 80159d8:	2800      	cmp	r0, #0
 80159da:	d1f1      	bne.n	80159c0 <__sfp+0x20>
 80159dc:	230c      	movs	r3, #12
 80159de:	603b      	str	r3, [r7, #0]
 80159e0:	4604      	mov	r4, r0
 80159e2:	4620      	mov	r0, r4
 80159e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159e6:	4b0b      	ldr	r3, [pc, #44]	; (8015a14 <__sfp+0x74>)
 80159e8:	6665      	str	r5, [r4, #100]	; 0x64
 80159ea:	e9c4 5500 	strd	r5, r5, [r4]
 80159ee:	60a5      	str	r5, [r4, #8]
 80159f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80159f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80159f8:	2208      	movs	r2, #8
 80159fa:	4629      	mov	r1, r5
 80159fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a00:	f7fd f911 	bl	8012c26 <memset>
 8015a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015a0c:	e7e9      	b.n	80159e2 <__sfp+0x42>
 8015a0e:	bf00      	nop
 8015a10:	08018220 	.word	0x08018220
 8015a14:	ffff0001 	.word	0xffff0001

08015a18 <_fwalk_reent>:
 8015a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a1c:	4680      	mov	r8, r0
 8015a1e:	4689      	mov	r9, r1
 8015a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a24:	2600      	movs	r6, #0
 8015a26:	b914      	cbnz	r4, 8015a2e <_fwalk_reent+0x16>
 8015a28:	4630      	mov	r0, r6
 8015a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015a32:	3f01      	subs	r7, #1
 8015a34:	d501      	bpl.n	8015a3a <_fwalk_reent+0x22>
 8015a36:	6824      	ldr	r4, [r4, #0]
 8015a38:	e7f5      	b.n	8015a26 <_fwalk_reent+0xe>
 8015a3a:	89ab      	ldrh	r3, [r5, #12]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d907      	bls.n	8015a50 <_fwalk_reent+0x38>
 8015a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a44:	3301      	adds	r3, #1
 8015a46:	d003      	beq.n	8015a50 <_fwalk_reent+0x38>
 8015a48:	4629      	mov	r1, r5
 8015a4a:	4640      	mov	r0, r8
 8015a4c:	47c8      	blx	r9
 8015a4e:	4306      	orrs	r6, r0
 8015a50:	3568      	adds	r5, #104	; 0x68
 8015a52:	e7ee      	b.n	8015a32 <_fwalk_reent+0x1a>

08015a54 <rshift>:
 8015a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a56:	6906      	ldr	r6, [r0, #16]
 8015a58:	114b      	asrs	r3, r1, #5
 8015a5a:	429e      	cmp	r6, r3
 8015a5c:	f100 0414 	add.w	r4, r0, #20
 8015a60:	dd30      	ble.n	8015ac4 <rshift+0x70>
 8015a62:	f011 011f 	ands.w	r1, r1, #31
 8015a66:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015a6a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015a6e:	d108      	bne.n	8015a82 <rshift+0x2e>
 8015a70:	4621      	mov	r1, r4
 8015a72:	42b2      	cmp	r2, r6
 8015a74:	460b      	mov	r3, r1
 8015a76:	d211      	bcs.n	8015a9c <rshift+0x48>
 8015a78:	f852 3b04 	ldr.w	r3, [r2], #4
 8015a7c:	f841 3b04 	str.w	r3, [r1], #4
 8015a80:	e7f7      	b.n	8015a72 <rshift+0x1e>
 8015a82:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015a86:	f1c1 0c20 	rsb	ip, r1, #32
 8015a8a:	40cd      	lsrs	r5, r1
 8015a8c:	3204      	adds	r2, #4
 8015a8e:	4623      	mov	r3, r4
 8015a90:	42b2      	cmp	r2, r6
 8015a92:	4617      	mov	r7, r2
 8015a94:	d30c      	bcc.n	8015ab0 <rshift+0x5c>
 8015a96:	601d      	str	r5, [r3, #0]
 8015a98:	b105      	cbz	r5, 8015a9c <rshift+0x48>
 8015a9a:	3304      	adds	r3, #4
 8015a9c:	1b1a      	subs	r2, r3, r4
 8015a9e:	42a3      	cmp	r3, r4
 8015aa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015aa4:	bf08      	it	eq
 8015aa6:	2300      	moveq	r3, #0
 8015aa8:	6102      	str	r2, [r0, #16]
 8015aaa:	bf08      	it	eq
 8015aac:	6143      	streq	r3, [r0, #20]
 8015aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ab0:	683f      	ldr	r7, [r7, #0]
 8015ab2:	fa07 f70c 	lsl.w	r7, r7, ip
 8015ab6:	433d      	orrs	r5, r7
 8015ab8:	f843 5b04 	str.w	r5, [r3], #4
 8015abc:	f852 5b04 	ldr.w	r5, [r2], #4
 8015ac0:	40cd      	lsrs	r5, r1
 8015ac2:	e7e5      	b.n	8015a90 <rshift+0x3c>
 8015ac4:	4623      	mov	r3, r4
 8015ac6:	e7e9      	b.n	8015a9c <rshift+0x48>

08015ac8 <__hexdig_fun>:
 8015ac8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015acc:	2b09      	cmp	r3, #9
 8015ace:	d802      	bhi.n	8015ad6 <__hexdig_fun+0xe>
 8015ad0:	3820      	subs	r0, #32
 8015ad2:	b2c0      	uxtb	r0, r0
 8015ad4:	4770      	bx	lr
 8015ad6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015ada:	2b05      	cmp	r3, #5
 8015adc:	d801      	bhi.n	8015ae2 <__hexdig_fun+0x1a>
 8015ade:	3847      	subs	r0, #71	; 0x47
 8015ae0:	e7f7      	b.n	8015ad2 <__hexdig_fun+0xa>
 8015ae2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015ae6:	2b05      	cmp	r3, #5
 8015ae8:	d801      	bhi.n	8015aee <__hexdig_fun+0x26>
 8015aea:	3827      	subs	r0, #39	; 0x27
 8015aec:	e7f1      	b.n	8015ad2 <__hexdig_fun+0xa>
 8015aee:	2000      	movs	r0, #0
 8015af0:	4770      	bx	lr

08015af2 <__gethex>:
 8015af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af6:	b08b      	sub	sp, #44	; 0x2c
 8015af8:	468a      	mov	sl, r1
 8015afa:	9002      	str	r0, [sp, #8]
 8015afc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015afe:	9306      	str	r3, [sp, #24]
 8015b00:	4690      	mov	r8, r2
 8015b02:	f000 fadf 	bl	80160c4 <__localeconv_l>
 8015b06:	6803      	ldr	r3, [r0, #0]
 8015b08:	9303      	str	r3, [sp, #12]
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7ea fb78 	bl	8000200 <strlen>
 8015b10:	9b03      	ldr	r3, [sp, #12]
 8015b12:	9001      	str	r0, [sp, #4]
 8015b14:	4403      	add	r3, r0
 8015b16:	f04f 0b00 	mov.w	fp, #0
 8015b1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015b1e:	9307      	str	r3, [sp, #28]
 8015b20:	f8da 3000 	ldr.w	r3, [sl]
 8015b24:	3302      	adds	r3, #2
 8015b26:	461f      	mov	r7, r3
 8015b28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015b2c:	2830      	cmp	r0, #48	; 0x30
 8015b2e:	d06c      	beq.n	8015c0a <__gethex+0x118>
 8015b30:	f7ff ffca 	bl	8015ac8 <__hexdig_fun>
 8015b34:	4604      	mov	r4, r0
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d16a      	bne.n	8015c10 <__gethex+0x11e>
 8015b3a:	9a01      	ldr	r2, [sp, #4]
 8015b3c:	9903      	ldr	r1, [sp, #12]
 8015b3e:	4638      	mov	r0, r7
 8015b40:	f001 fe34 	bl	80177ac <strncmp>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	d166      	bne.n	8015c16 <__gethex+0x124>
 8015b48:	9b01      	ldr	r3, [sp, #4]
 8015b4a:	5cf8      	ldrb	r0, [r7, r3]
 8015b4c:	18fe      	adds	r6, r7, r3
 8015b4e:	f7ff ffbb 	bl	8015ac8 <__hexdig_fun>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d062      	beq.n	8015c1c <__gethex+0x12a>
 8015b56:	4633      	mov	r3, r6
 8015b58:	7818      	ldrb	r0, [r3, #0]
 8015b5a:	2830      	cmp	r0, #48	; 0x30
 8015b5c:	461f      	mov	r7, r3
 8015b5e:	f103 0301 	add.w	r3, r3, #1
 8015b62:	d0f9      	beq.n	8015b58 <__gethex+0x66>
 8015b64:	f7ff ffb0 	bl	8015ac8 <__hexdig_fun>
 8015b68:	fab0 f580 	clz	r5, r0
 8015b6c:	096d      	lsrs	r5, r5, #5
 8015b6e:	4634      	mov	r4, r6
 8015b70:	f04f 0b01 	mov.w	fp, #1
 8015b74:	463a      	mov	r2, r7
 8015b76:	4616      	mov	r6, r2
 8015b78:	3201      	adds	r2, #1
 8015b7a:	7830      	ldrb	r0, [r6, #0]
 8015b7c:	f7ff ffa4 	bl	8015ac8 <__hexdig_fun>
 8015b80:	2800      	cmp	r0, #0
 8015b82:	d1f8      	bne.n	8015b76 <__gethex+0x84>
 8015b84:	9a01      	ldr	r2, [sp, #4]
 8015b86:	9903      	ldr	r1, [sp, #12]
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f001 fe0f 	bl	80177ac <strncmp>
 8015b8e:	b950      	cbnz	r0, 8015ba6 <__gethex+0xb4>
 8015b90:	b954      	cbnz	r4, 8015ba8 <__gethex+0xb6>
 8015b92:	9b01      	ldr	r3, [sp, #4]
 8015b94:	18f4      	adds	r4, r6, r3
 8015b96:	4622      	mov	r2, r4
 8015b98:	4616      	mov	r6, r2
 8015b9a:	3201      	adds	r2, #1
 8015b9c:	7830      	ldrb	r0, [r6, #0]
 8015b9e:	f7ff ff93 	bl	8015ac8 <__hexdig_fun>
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d1f8      	bne.n	8015b98 <__gethex+0xa6>
 8015ba6:	b10c      	cbz	r4, 8015bac <__gethex+0xba>
 8015ba8:	1ba4      	subs	r4, r4, r6
 8015baa:	00a4      	lsls	r4, r4, #2
 8015bac:	7833      	ldrb	r3, [r6, #0]
 8015bae:	2b50      	cmp	r3, #80	; 0x50
 8015bb0:	d001      	beq.n	8015bb6 <__gethex+0xc4>
 8015bb2:	2b70      	cmp	r3, #112	; 0x70
 8015bb4:	d140      	bne.n	8015c38 <__gethex+0x146>
 8015bb6:	7873      	ldrb	r3, [r6, #1]
 8015bb8:	2b2b      	cmp	r3, #43	; 0x2b
 8015bba:	d031      	beq.n	8015c20 <__gethex+0x12e>
 8015bbc:	2b2d      	cmp	r3, #45	; 0x2d
 8015bbe:	d033      	beq.n	8015c28 <__gethex+0x136>
 8015bc0:	1c71      	adds	r1, r6, #1
 8015bc2:	f04f 0900 	mov.w	r9, #0
 8015bc6:	7808      	ldrb	r0, [r1, #0]
 8015bc8:	f7ff ff7e 	bl	8015ac8 <__hexdig_fun>
 8015bcc:	1e43      	subs	r3, r0, #1
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	2b18      	cmp	r3, #24
 8015bd2:	d831      	bhi.n	8015c38 <__gethex+0x146>
 8015bd4:	f1a0 0210 	sub.w	r2, r0, #16
 8015bd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015bdc:	f7ff ff74 	bl	8015ac8 <__hexdig_fun>
 8015be0:	1e43      	subs	r3, r0, #1
 8015be2:	b2db      	uxtb	r3, r3
 8015be4:	2b18      	cmp	r3, #24
 8015be6:	d922      	bls.n	8015c2e <__gethex+0x13c>
 8015be8:	f1b9 0f00 	cmp.w	r9, #0
 8015bec:	d000      	beq.n	8015bf0 <__gethex+0xfe>
 8015bee:	4252      	negs	r2, r2
 8015bf0:	4414      	add	r4, r2
 8015bf2:	f8ca 1000 	str.w	r1, [sl]
 8015bf6:	b30d      	cbz	r5, 8015c3c <__gethex+0x14a>
 8015bf8:	f1bb 0f00 	cmp.w	fp, #0
 8015bfc:	bf0c      	ite	eq
 8015bfe:	2706      	moveq	r7, #6
 8015c00:	2700      	movne	r7, #0
 8015c02:	4638      	mov	r0, r7
 8015c04:	b00b      	add	sp, #44	; 0x2c
 8015c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c0a:	f10b 0b01 	add.w	fp, fp, #1
 8015c0e:	e78a      	b.n	8015b26 <__gethex+0x34>
 8015c10:	2500      	movs	r5, #0
 8015c12:	462c      	mov	r4, r5
 8015c14:	e7ae      	b.n	8015b74 <__gethex+0x82>
 8015c16:	463e      	mov	r6, r7
 8015c18:	2501      	movs	r5, #1
 8015c1a:	e7c7      	b.n	8015bac <__gethex+0xba>
 8015c1c:	4604      	mov	r4, r0
 8015c1e:	e7fb      	b.n	8015c18 <__gethex+0x126>
 8015c20:	f04f 0900 	mov.w	r9, #0
 8015c24:	1cb1      	adds	r1, r6, #2
 8015c26:	e7ce      	b.n	8015bc6 <__gethex+0xd4>
 8015c28:	f04f 0901 	mov.w	r9, #1
 8015c2c:	e7fa      	b.n	8015c24 <__gethex+0x132>
 8015c2e:	230a      	movs	r3, #10
 8015c30:	fb03 0202 	mla	r2, r3, r2, r0
 8015c34:	3a10      	subs	r2, #16
 8015c36:	e7cf      	b.n	8015bd8 <__gethex+0xe6>
 8015c38:	4631      	mov	r1, r6
 8015c3a:	e7da      	b.n	8015bf2 <__gethex+0x100>
 8015c3c:	1bf3      	subs	r3, r6, r7
 8015c3e:	3b01      	subs	r3, #1
 8015c40:	4629      	mov	r1, r5
 8015c42:	2b07      	cmp	r3, #7
 8015c44:	dc49      	bgt.n	8015cda <__gethex+0x1e8>
 8015c46:	9802      	ldr	r0, [sp, #8]
 8015c48:	f000 fadc 	bl	8016204 <_Balloc>
 8015c4c:	9b01      	ldr	r3, [sp, #4]
 8015c4e:	f100 0914 	add.w	r9, r0, #20
 8015c52:	f04f 0b00 	mov.w	fp, #0
 8015c56:	f1c3 0301 	rsb	r3, r3, #1
 8015c5a:	4605      	mov	r5, r0
 8015c5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8015c60:	46da      	mov	sl, fp
 8015c62:	9308      	str	r3, [sp, #32]
 8015c64:	42b7      	cmp	r7, r6
 8015c66:	d33b      	bcc.n	8015ce0 <__gethex+0x1ee>
 8015c68:	9804      	ldr	r0, [sp, #16]
 8015c6a:	f840 ab04 	str.w	sl, [r0], #4
 8015c6e:	eba0 0009 	sub.w	r0, r0, r9
 8015c72:	1080      	asrs	r0, r0, #2
 8015c74:	6128      	str	r0, [r5, #16]
 8015c76:	0147      	lsls	r7, r0, #5
 8015c78:	4650      	mov	r0, sl
 8015c7a:	f000 fb87 	bl	801638c <__hi0bits>
 8015c7e:	f8d8 6000 	ldr.w	r6, [r8]
 8015c82:	1a3f      	subs	r7, r7, r0
 8015c84:	42b7      	cmp	r7, r6
 8015c86:	dd64      	ble.n	8015d52 <__gethex+0x260>
 8015c88:	1bbf      	subs	r7, r7, r6
 8015c8a:	4639      	mov	r1, r7
 8015c8c:	4628      	mov	r0, r5
 8015c8e:	f000 fe97 	bl	80169c0 <__any_on>
 8015c92:	4682      	mov	sl, r0
 8015c94:	b178      	cbz	r0, 8015cb6 <__gethex+0x1c4>
 8015c96:	1e7b      	subs	r3, r7, #1
 8015c98:	1159      	asrs	r1, r3, #5
 8015c9a:	f003 021f 	and.w	r2, r3, #31
 8015c9e:	f04f 0a01 	mov.w	sl, #1
 8015ca2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015ca6:	fa0a f202 	lsl.w	r2, sl, r2
 8015caa:	420a      	tst	r2, r1
 8015cac:	d003      	beq.n	8015cb6 <__gethex+0x1c4>
 8015cae:	4553      	cmp	r3, sl
 8015cb0:	dc46      	bgt.n	8015d40 <__gethex+0x24e>
 8015cb2:	f04f 0a02 	mov.w	sl, #2
 8015cb6:	4639      	mov	r1, r7
 8015cb8:	4628      	mov	r0, r5
 8015cba:	f7ff fecb 	bl	8015a54 <rshift>
 8015cbe:	443c      	add	r4, r7
 8015cc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015cc4:	42a3      	cmp	r3, r4
 8015cc6:	da52      	bge.n	8015d6e <__gethex+0x27c>
 8015cc8:	4629      	mov	r1, r5
 8015cca:	9802      	ldr	r0, [sp, #8]
 8015ccc:	f000 face 	bl	801626c <_Bfree>
 8015cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	6013      	str	r3, [r2, #0]
 8015cd6:	27a3      	movs	r7, #163	; 0xa3
 8015cd8:	e793      	b.n	8015c02 <__gethex+0x110>
 8015cda:	3101      	adds	r1, #1
 8015cdc:	105b      	asrs	r3, r3, #1
 8015cde:	e7b0      	b.n	8015c42 <__gethex+0x150>
 8015ce0:	1e73      	subs	r3, r6, #1
 8015ce2:	9305      	str	r3, [sp, #20]
 8015ce4:	9a07      	ldr	r2, [sp, #28]
 8015ce6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015cea:	4293      	cmp	r3, r2
 8015cec:	d018      	beq.n	8015d20 <__gethex+0x22e>
 8015cee:	f1bb 0f20 	cmp.w	fp, #32
 8015cf2:	d107      	bne.n	8015d04 <__gethex+0x212>
 8015cf4:	9b04      	ldr	r3, [sp, #16]
 8015cf6:	f8c3 a000 	str.w	sl, [r3]
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	f04f 0a00 	mov.w	sl, #0
 8015d00:	9304      	str	r3, [sp, #16]
 8015d02:	46d3      	mov	fp, sl
 8015d04:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015d08:	f7ff fede 	bl	8015ac8 <__hexdig_fun>
 8015d0c:	f000 000f 	and.w	r0, r0, #15
 8015d10:	fa00 f00b 	lsl.w	r0, r0, fp
 8015d14:	ea4a 0a00 	orr.w	sl, sl, r0
 8015d18:	f10b 0b04 	add.w	fp, fp, #4
 8015d1c:	9b05      	ldr	r3, [sp, #20]
 8015d1e:	e00d      	b.n	8015d3c <__gethex+0x24a>
 8015d20:	9b05      	ldr	r3, [sp, #20]
 8015d22:	9a08      	ldr	r2, [sp, #32]
 8015d24:	4413      	add	r3, r2
 8015d26:	42bb      	cmp	r3, r7
 8015d28:	d3e1      	bcc.n	8015cee <__gethex+0x1fc>
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	9a01      	ldr	r2, [sp, #4]
 8015d2e:	9903      	ldr	r1, [sp, #12]
 8015d30:	9309      	str	r3, [sp, #36]	; 0x24
 8015d32:	f001 fd3b 	bl	80177ac <strncmp>
 8015d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d1d8      	bne.n	8015cee <__gethex+0x1fc>
 8015d3c:	461e      	mov	r6, r3
 8015d3e:	e791      	b.n	8015c64 <__gethex+0x172>
 8015d40:	1eb9      	subs	r1, r7, #2
 8015d42:	4628      	mov	r0, r5
 8015d44:	f000 fe3c 	bl	80169c0 <__any_on>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d0b2      	beq.n	8015cb2 <__gethex+0x1c0>
 8015d4c:	f04f 0a03 	mov.w	sl, #3
 8015d50:	e7b1      	b.n	8015cb6 <__gethex+0x1c4>
 8015d52:	da09      	bge.n	8015d68 <__gethex+0x276>
 8015d54:	1bf7      	subs	r7, r6, r7
 8015d56:	4629      	mov	r1, r5
 8015d58:	463a      	mov	r2, r7
 8015d5a:	9802      	ldr	r0, [sp, #8]
 8015d5c:	f000 fc52 	bl	8016604 <__lshift>
 8015d60:	1be4      	subs	r4, r4, r7
 8015d62:	4605      	mov	r5, r0
 8015d64:	f100 0914 	add.w	r9, r0, #20
 8015d68:	f04f 0a00 	mov.w	sl, #0
 8015d6c:	e7a8      	b.n	8015cc0 <__gethex+0x1ce>
 8015d6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d72:	42a0      	cmp	r0, r4
 8015d74:	dd6a      	ble.n	8015e4c <__gethex+0x35a>
 8015d76:	1b04      	subs	r4, r0, r4
 8015d78:	42a6      	cmp	r6, r4
 8015d7a:	dc2e      	bgt.n	8015dda <__gethex+0x2e8>
 8015d7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d80:	2b02      	cmp	r3, #2
 8015d82:	d022      	beq.n	8015dca <__gethex+0x2d8>
 8015d84:	2b03      	cmp	r3, #3
 8015d86:	d024      	beq.n	8015dd2 <__gethex+0x2e0>
 8015d88:	2b01      	cmp	r3, #1
 8015d8a:	d115      	bne.n	8015db8 <__gethex+0x2c6>
 8015d8c:	42a6      	cmp	r6, r4
 8015d8e:	d113      	bne.n	8015db8 <__gethex+0x2c6>
 8015d90:	2e01      	cmp	r6, #1
 8015d92:	dc0b      	bgt.n	8015dac <__gethex+0x2ba>
 8015d94:	9a06      	ldr	r2, [sp, #24]
 8015d96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d9a:	6013      	str	r3, [r2, #0]
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	612b      	str	r3, [r5, #16]
 8015da0:	f8c9 3000 	str.w	r3, [r9]
 8015da4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015da6:	2762      	movs	r7, #98	; 0x62
 8015da8:	601d      	str	r5, [r3, #0]
 8015daa:	e72a      	b.n	8015c02 <__gethex+0x110>
 8015dac:	1e71      	subs	r1, r6, #1
 8015dae:	4628      	mov	r0, r5
 8015db0:	f000 fe06 	bl	80169c0 <__any_on>
 8015db4:	2800      	cmp	r0, #0
 8015db6:	d1ed      	bne.n	8015d94 <__gethex+0x2a2>
 8015db8:	4629      	mov	r1, r5
 8015dba:	9802      	ldr	r0, [sp, #8]
 8015dbc:	f000 fa56 	bl	801626c <_Bfree>
 8015dc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	6013      	str	r3, [r2, #0]
 8015dc6:	2750      	movs	r7, #80	; 0x50
 8015dc8:	e71b      	b.n	8015c02 <__gethex+0x110>
 8015dca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d0e1      	beq.n	8015d94 <__gethex+0x2a2>
 8015dd0:	e7f2      	b.n	8015db8 <__gethex+0x2c6>
 8015dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d1dd      	bne.n	8015d94 <__gethex+0x2a2>
 8015dd8:	e7ee      	b.n	8015db8 <__gethex+0x2c6>
 8015dda:	1e67      	subs	r7, r4, #1
 8015ddc:	f1ba 0f00 	cmp.w	sl, #0
 8015de0:	d131      	bne.n	8015e46 <__gethex+0x354>
 8015de2:	b127      	cbz	r7, 8015dee <__gethex+0x2fc>
 8015de4:	4639      	mov	r1, r7
 8015de6:	4628      	mov	r0, r5
 8015de8:	f000 fdea 	bl	80169c0 <__any_on>
 8015dec:	4682      	mov	sl, r0
 8015dee:	117a      	asrs	r2, r7, #5
 8015df0:	2301      	movs	r3, #1
 8015df2:	f007 071f 	and.w	r7, r7, #31
 8015df6:	fa03 f707 	lsl.w	r7, r3, r7
 8015dfa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015dfe:	4621      	mov	r1, r4
 8015e00:	421f      	tst	r7, r3
 8015e02:	4628      	mov	r0, r5
 8015e04:	bf18      	it	ne
 8015e06:	f04a 0a02 	orrne.w	sl, sl, #2
 8015e0a:	1b36      	subs	r6, r6, r4
 8015e0c:	f7ff fe22 	bl	8015a54 <rshift>
 8015e10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015e14:	2702      	movs	r7, #2
 8015e16:	f1ba 0f00 	cmp.w	sl, #0
 8015e1a:	d048      	beq.n	8015eae <__gethex+0x3bc>
 8015e1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e20:	2b02      	cmp	r3, #2
 8015e22:	d015      	beq.n	8015e50 <__gethex+0x35e>
 8015e24:	2b03      	cmp	r3, #3
 8015e26:	d017      	beq.n	8015e58 <__gethex+0x366>
 8015e28:	2b01      	cmp	r3, #1
 8015e2a:	d109      	bne.n	8015e40 <__gethex+0x34e>
 8015e2c:	f01a 0f02 	tst.w	sl, #2
 8015e30:	d006      	beq.n	8015e40 <__gethex+0x34e>
 8015e32:	f8d9 3000 	ldr.w	r3, [r9]
 8015e36:	ea4a 0a03 	orr.w	sl, sl, r3
 8015e3a:	f01a 0f01 	tst.w	sl, #1
 8015e3e:	d10e      	bne.n	8015e5e <__gethex+0x36c>
 8015e40:	f047 0710 	orr.w	r7, r7, #16
 8015e44:	e033      	b.n	8015eae <__gethex+0x3bc>
 8015e46:	f04f 0a01 	mov.w	sl, #1
 8015e4a:	e7d0      	b.n	8015dee <__gethex+0x2fc>
 8015e4c:	2701      	movs	r7, #1
 8015e4e:	e7e2      	b.n	8015e16 <__gethex+0x324>
 8015e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e52:	f1c3 0301 	rsb	r3, r3, #1
 8015e56:	9315      	str	r3, [sp, #84]	; 0x54
 8015e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d0f0      	beq.n	8015e40 <__gethex+0x34e>
 8015e5e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015e62:	f105 0314 	add.w	r3, r5, #20
 8015e66:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015e6a:	eb03 010a 	add.w	r1, r3, sl
 8015e6e:	f04f 0c00 	mov.w	ip, #0
 8015e72:	4618      	mov	r0, r3
 8015e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e78:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e7c:	d01c      	beq.n	8015eb8 <__gethex+0x3c6>
 8015e7e:	3201      	adds	r2, #1
 8015e80:	6002      	str	r2, [r0, #0]
 8015e82:	2f02      	cmp	r7, #2
 8015e84:	f105 0314 	add.w	r3, r5, #20
 8015e88:	d138      	bne.n	8015efc <__gethex+0x40a>
 8015e8a:	f8d8 2000 	ldr.w	r2, [r8]
 8015e8e:	3a01      	subs	r2, #1
 8015e90:	42b2      	cmp	r2, r6
 8015e92:	d10a      	bne.n	8015eaa <__gethex+0x3b8>
 8015e94:	1171      	asrs	r1, r6, #5
 8015e96:	2201      	movs	r2, #1
 8015e98:	f006 061f 	and.w	r6, r6, #31
 8015e9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ea0:	fa02 f606 	lsl.w	r6, r2, r6
 8015ea4:	421e      	tst	r6, r3
 8015ea6:	bf18      	it	ne
 8015ea8:	4617      	movne	r7, r2
 8015eaa:	f047 0720 	orr.w	r7, r7, #32
 8015eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015eb0:	601d      	str	r5, [r3, #0]
 8015eb2:	9b06      	ldr	r3, [sp, #24]
 8015eb4:	601c      	str	r4, [r3, #0]
 8015eb6:	e6a4      	b.n	8015c02 <__gethex+0x110>
 8015eb8:	4299      	cmp	r1, r3
 8015eba:	f843 cc04 	str.w	ip, [r3, #-4]
 8015ebe:	d8d8      	bhi.n	8015e72 <__gethex+0x380>
 8015ec0:	68ab      	ldr	r3, [r5, #8]
 8015ec2:	4599      	cmp	r9, r3
 8015ec4:	db12      	blt.n	8015eec <__gethex+0x3fa>
 8015ec6:	6869      	ldr	r1, [r5, #4]
 8015ec8:	9802      	ldr	r0, [sp, #8]
 8015eca:	3101      	adds	r1, #1
 8015ecc:	f000 f99a 	bl	8016204 <_Balloc>
 8015ed0:	692a      	ldr	r2, [r5, #16]
 8015ed2:	3202      	adds	r2, #2
 8015ed4:	f105 010c 	add.w	r1, r5, #12
 8015ed8:	4683      	mov	fp, r0
 8015eda:	0092      	lsls	r2, r2, #2
 8015edc:	300c      	adds	r0, #12
 8015ede:	f7fc fe97 	bl	8012c10 <memcpy>
 8015ee2:	4629      	mov	r1, r5
 8015ee4:	9802      	ldr	r0, [sp, #8]
 8015ee6:	f000 f9c1 	bl	801626c <_Bfree>
 8015eea:	465d      	mov	r5, fp
 8015eec:	692b      	ldr	r3, [r5, #16]
 8015eee:	1c5a      	adds	r2, r3, #1
 8015ef0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015ef4:	612a      	str	r2, [r5, #16]
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	615a      	str	r2, [r3, #20]
 8015efa:	e7c2      	b.n	8015e82 <__gethex+0x390>
 8015efc:	692a      	ldr	r2, [r5, #16]
 8015efe:	454a      	cmp	r2, r9
 8015f00:	dd0b      	ble.n	8015f1a <__gethex+0x428>
 8015f02:	2101      	movs	r1, #1
 8015f04:	4628      	mov	r0, r5
 8015f06:	f7ff fda5 	bl	8015a54 <rshift>
 8015f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f0e:	3401      	adds	r4, #1
 8015f10:	42a3      	cmp	r3, r4
 8015f12:	f6ff aed9 	blt.w	8015cc8 <__gethex+0x1d6>
 8015f16:	2701      	movs	r7, #1
 8015f18:	e7c7      	b.n	8015eaa <__gethex+0x3b8>
 8015f1a:	f016 061f 	ands.w	r6, r6, #31
 8015f1e:	d0fa      	beq.n	8015f16 <__gethex+0x424>
 8015f20:	449a      	add	sl, r3
 8015f22:	f1c6 0620 	rsb	r6, r6, #32
 8015f26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015f2a:	f000 fa2f 	bl	801638c <__hi0bits>
 8015f2e:	42b0      	cmp	r0, r6
 8015f30:	dbe7      	blt.n	8015f02 <__gethex+0x410>
 8015f32:	e7f0      	b.n	8015f16 <__gethex+0x424>

08015f34 <L_shift>:
 8015f34:	f1c2 0208 	rsb	r2, r2, #8
 8015f38:	0092      	lsls	r2, r2, #2
 8015f3a:	b570      	push	{r4, r5, r6, lr}
 8015f3c:	f1c2 0620 	rsb	r6, r2, #32
 8015f40:	6843      	ldr	r3, [r0, #4]
 8015f42:	6804      	ldr	r4, [r0, #0]
 8015f44:	fa03 f506 	lsl.w	r5, r3, r6
 8015f48:	432c      	orrs	r4, r5
 8015f4a:	40d3      	lsrs	r3, r2
 8015f4c:	6004      	str	r4, [r0, #0]
 8015f4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015f52:	4288      	cmp	r0, r1
 8015f54:	d3f4      	bcc.n	8015f40 <L_shift+0xc>
 8015f56:	bd70      	pop	{r4, r5, r6, pc}

08015f58 <__match>:
 8015f58:	b530      	push	{r4, r5, lr}
 8015f5a:	6803      	ldr	r3, [r0, #0]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f62:	b914      	cbnz	r4, 8015f6a <__match+0x12>
 8015f64:	6003      	str	r3, [r0, #0]
 8015f66:	2001      	movs	r0, #1
 8015f68:	bd30      	pop	{r4, r5, pc}
 8015f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015f72:	2d19      	cmp	r5, #25
 8015f74:	bf98      	it	ls
 8015f76:	3220      	addls	r2, #32
 8015f78:	42a2      	cmp	r2, r4
 8015f7a:	d0f0      	beq.n	8015f5e <__match+0x6>
 8015f7c:	2000      	movs	r0, #0
 8015f7e:	e7f3      	b.n	8015f68 <__match+0x10>

08015f80 <__hexnan>:
 8015f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	680b      	ldr	r3, [r1, #0]
 8015f86:	6801      	ldr	r1, [r0, #0]
 8015f88:	115f      	asrs	r7, r3, #5
 8015f8a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015f8e:	f013 031f 	ands.w	r3, r3, #31
 8015f92:	b087      	sub	sp, #28
 8015f94:	bf18      	it	ne
 8015f96:	3704      	addne	r7, #4
 8015f98:	2500      	movs	r5, #0
 8015f9a:	1f3e      	subs	r6, r7, #4
 8015f9c:	4682      	mov	sl, r0
 8015f9e:	4690      	mov	r8, r2
 8015fa0:	9301      	str	r3, [sp, #4]
 8015fa2:	f847 5c04 	str.w	r5, [r7, #-4]
 8015fa6:	46b1      	mov	r9, r6
 8015fa8:	4634      	mov	r4, r6
 8015faa:	9502      	str	r5, [sp, #8]
 8015fac:	46ab      	mov	fp, r5
 8015fae:	784a      	ldrb	r2, [r1, #1]
 8015fb0:	1c4b      	adds	r3, r1, #1
 8015fb2:	9303      	str	r3, [sp, #12]
 8015fb4:	b342      	cbz	r2, 8016008 <__hexnan+0x88>
 8015fb6:	4610      	mov	r0, r2
 8015fb8:	9105      	str	r1, [sp, #20]
 8015fba:	9204      	str	r2, [sp, #16]
 8015fbc:	f7ff fd84 	bl	8015ac8 <__hexdig_fun>
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	d143      	bne.n	801604c <__hexnan+0xcc>
 8015fc4:	9a04      	ldr	r2, [sp, #16]
 8015fc6:	9905      	ldr	r1, [sp, #20]
 8015fc8:	2a20      	cmp	r2, #32
 8015fca:	d818      	bhi.n	8015ffe <__hexnan+0x7e>
 8015fcc:	9b02      	ldr	r3, [sp, #8]
 8015fce:	459b      	cmp	fp, r3
 8015fd0:	dd13      	ble.n	8015ffa <__hexnan+0x7a>
 8015fd2:	454c      	cmp	r4, r9
 8015fd4:	d206      	bcs.n	8015fe4 <__hexnan+0x64>
 8015fd6:	2d07      	cmp	r5, #7
 8015fd8:	dc04      	bgt.n	8015fe4 <__hexnan+0x64>
 8015fda:	462a      	mov	r2, r5
 8015fdc:	4649      	mov	r1, r9
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f7ff ffa8 	bl	8015f34 <L_shift>
 8015fe4:	4544      	cmp	r4, r8
 8015fe6:	d944      	bls.n	8016072 <__hexnan+0xf2>
 8015fe8:	2300      	movs	r3, #0
 8015fea:	f1a4 0904 	sub.w	r9, r4, #4
 8015fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ff2:	f8cd b008 	str.w	fp, [sp, #8]
 8015ff6:	464c      	mov	r4, r9
 8015ff8:	461d      	mov	r5, r3
 8015ffa:	9903      	ldr	r1, [sp, #12]
 8015ffc:	e7d7      	b.n	8015fae <__hexnan+0x2e>
 8015ffe:	2a29      	cmp	r2, #41	; 0x29
 8016000:	d14a      	bne.n	8016098 <__hexnan+0x118>
 8016002:	3102      	adds	r1, #2
 8016004:	f8ca 1000 	str.w	r1, [sl]
 8016008:	f1bb 0f00 	cmp.w	fp, #0
 801600c:	d044      	beq.n	8016098 <__hexnan+0x118>
 801600e:	454c      	cmp	r4, r9
 8016010:	d206      	bcs.n	8016020 <__hexnan+0xa0>
 8016012:	2d07      	cmp	r5, #7
 8016014:	dc04      	bgt.n	8016020 <__hexnan+0xa0>
 8016016:	462a      	mov	r2, r5
 8016018:	4649      	mov	r1, r9
 801601a:	4620      	mov	r0, r4
 801601c:	f7ff ff8a 	bl	8015f34 <L_shift>
 8016020:	4544      	cmp	r4, r8
 8016022:	d928      	bls.n	8016076 <__hexnan+0xf6>
 8016024:	4643      	mov	r3, r8
 8016026:	f854 2b04 	ldr.w	r2, [r4], #4
 801602a:	f843 2b04 	str.w	r2, [r3], #4
 801602e:	42a6      	cmp	r6, r4
 8016030:	d2f9      	bcs.n	8016026 <__hexnan+0xa6>
 8016032:	2200      	movs	r2, #0
 8016034:	f843 2b04 	str.w	r2, [r3], #4
 8016038:	429e      	cmp	r6, r3
 801603a:	d2fb      	bcs.n	8016034 <__hexnan+0xb4>
 801603c:	6833      	ldr	r3, [r6, #0]
 801603e:	b91b      	cbnz	r3, 8016048 <__hexnan+0xc8>
 8016040:	4546      	cmp	r6, r8
 8016042:	d127      	bne.n	8016094 <__hexnan+0x114>
 8016044:	2301      	movs	r3, #1
 8016046:	6033      	str	r3, [r6, #0]
 8016048:	2005      	movs	r0, #5
 801604a:	e026      	b.n	801609a <__hexnan+0x11a>
 801604c:	3501      	adds	r5, #1
 801604e:	2d08      	cmp	r5, #8
 8016050:	f10b 0b01 	add.w	fp, fp, #1
 8016054:	dd06      	ble.n	8016064 <__hexnan+0xe4>
 8016056:	4544      	cmp	r4, r8
 8016058:	d9cf      	bls.n	8015ffa <__hexnan+0x7a>
 801605a:	2300      	movs	r3, #0
 801605c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016060:	2501      	movs	r5, #1
 8016062:	3c04      	subs	r4, #4
 8016064:	6822      	ldr	r2, [r4, #0]
 8016066:	f000 000f 	and.w	r0, r0, #15
 801606a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801606e:	6020      	str	r0, [r4, #0]
 8016070:	e7c3      	b.n	8015ffa <__hexnan+0x7a>
 8016072:	2508      	movs	r5, #8
 8016074:	e7c1      	b.n	8015ffa <__hexnan+0x7a>
 8016076:	9b01      	ldr	r3, [sp, #4]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d0df      	beq.n	801603c <__hexnan+0xbc>
 801607c:	f04f 32ff 	mov.w	r2, #4294967295
 8016080:	f1c3 0320 	rsb	r3, r3, #32
 8016084:	fa22 f303 	lsr.w	r3, r2, r3
 8016088:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801608c:	401a      	ands	r2, r3
 801608e:	f847 2c04 	str.w	r2, [r7, #-4]
 8016092:	e7d3      	b.n	801603c <__hexnan+0xbc>
 8016094:	3e04      	subs	r6, #4
 8016096:	e7d1      	b.n	801603c <__hexnan+0xbc>
 8016098:	2004      	movs	r0, #4
 801609a:	b007      	add	sp, #28
 801609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160a0 <__locale_ctype_ptr_l>:
 80160a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80160a4:	4770      	bx	lr
	...

080160a8 <__locale_ctype_ptr>:
 80160a8:	4b04      	ldr	r3, [pc, #16]	; (80160bc <__locale_ctype_ptr+0x14>)
 80160aa:	4a05      	ldr	r2, [pc, #20]	; (80160c0 <__locale_ctype_ptr+0x18>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	6a1b      	ldr	r3, [r3, #32]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	bf08      	it	eq
 80160b4:	4613      	moveq	r3, r2
 80160b6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80160ba:	4770      	bx	lr
 80160bc:	2000000c 	.word	0x2000000c
 80160c0:	20000070 	.word	0x20000070

080160c4 <__localeconv_l>:
 80160c4:	30f0      	adds	r0, #240	; 0xf0
 80160c6:	4770      	bx	lr

080160c8 <_localeconv_r>:
 80160c8:	4b04      	ldr	r3, [pc, #16]	; (80160dc <_localeconv_r+0x14>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	6a18      	ldr	r0, [r3, #32]
 80160ce:	4b04      	ldr	r3, [pc, #16]	; (80160e0 <_localeconv_r+0x18>)
 80160d0:	2800      	cmp	r0, #0
 80160d2:	bf08      	it	eq
 80160d4:	4618      	moveq	r0, r3
 80160d6:	30f0      	adds	r0, #240	; 0xf0
 80160d8:	4770      	bx	lr
 80160da:	bf00      	nop
 80160dc:	2000000c 	.word	0x2000000c
 80160e0:	20000070 	.word	0x20000070

080160e4 <_lseek_r>:
 80160e4:	b538      	push	{r3, r4, r5, lr}
 80160e6:	4c07      	ldr	r4, [pc, #28]	; (8016104 <_lseek_r+0x20>)
 80160e8:	4605      	mov	r5, r0
 80160ea:	4608      	mov	r0, r1
 80160ec:	4611      	mov	r1, r2
 80160ee:	2200      	movs	r2, #0
 80160f0:	6022      	str	r2, [r4, #0]
 80160f2:	461a      	mov	r2, r3
 80160f4:	f7ef fc0e 	bl	8005914 <_lseek>
 80160f8:	1c43      	adds	r3, r0, #1
 80160fa:	d102      	bne.n	8016102 <_lseek_r+0x1e>
 80160fc:	6823      	ldr	r3, [r4, #0]
 80160fe:	b103      	cbz	r3, 8016102 <_lseek_r+0x1e>
 8016100:	602b      	str	r3, [r5, #0]
 8016102:	bd38      	pop	{r3, r4, r5, pc}
 8016104:	2003be0c 	.word	0x2003be0c

08016108 <__swhatbuf_r>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	460e      	mov	r6, r1
 801610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016110:	2900      	cmp	r1, #0
 8016112:	b096      	sub	sp, #88	; 0x58
 8016114:	4614      	mov	r4, r2
 8016116:	461d      	mov	r5, r3
 8016118:	da07      	bge.n	801612a <__swhatbuf_r+0x22>
 801611a:	2300      	movs	r3, #0
 801611c:	602b      	str	r3, [r5, #0]
 801611e:	89b3      	ldrh	r3, [r6, #12]
 8016120:	061a      	lsls	r2, r3, #24
 8016122:	d410      	bmi.n	8016146 <__swhatbuf_r+0x3e>
 8016124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016128:	e00e      	b.n	8016148 <__swhatbuf_r+0x40>
 801612a:	466a      	mov	r2, sp
 801612c:	f001 fc24 	bl	8017978 <_fstat_r>
 8016130:	2800      	cmp	r0, #0
 8016132:	dbf2      	blt.n	801611a <__swhatbuf_r+0x12>
 8016134:	9a01      	ldr	r2, [sp, #4]
 8016136:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801613a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801613e:	425a      	negs	r2, r3
 8016140:	415a      	adcs	r2, r3
 8016142:	602a      	str	r2, [r5, #0]
 8016144:	e7ee      	b.n	8016124 <__swhatbuf_r+0x1c>
 8016146:	2340      	movs	r3, #64	; 0x40
 8016148:	2000      	movs	r0, #0
 801614a:	6023      	str	r3, [r4, #0]
 801614c:	b016      	add	sp, #88	; 0x58
 801614e:	bd70      	pop	{r4, r5, r6, pc}

08016150 <__smakebuf_r>:
 8016150:	898b      	ldrh	r3, [r1, #12]
 8016152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016154:	079d      	lsls	r5, r3, #30
 8016156:	4606      	mov	r6, r0
 8016158:	460c      	mov	r4, r1
 801615a:	d507      	bpl.n	801616c <__smakebuf_r+0x1c>
 801615c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016160:	6023      	str	r3, [r4, #0]
 8016162:	6123      	str	r3, [r4, #16]
 8016164:	2301      	movs	r3, #1
 8016166:	6163      	str	r3, [r4, #20]
 8016168:	b002      	add	sp, #8
 801616a:	bd70      	pop	{r4, r5, r6, pc}
 801616c:	ab01      	add	r3, sp, #4
 801616e:	466a      	mov	r2, sp
 8016170:	f7ff ffca 	bl	8016108 <__swhatbuf_r>
 8016174:	9900      	ldr	r1, [sp, #0]
 8016176:	4605      	mov	r5, r0
 8016178:	4630      	mov	r0, r6
 801617a:	f000 fc9f 	bl	8016abc <_malloc_r>
 801617e:	b948      	cbnz	r0, 8016194 <__smakebuf_r+0x44>
 8016180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016184:	059a      	lsls	r2, r3, #22
 8016186:	d4ef      	bmi.n	8016168 <__smakebuf_r+0x18>
 8016188:	f023 0303 	bic.w	r3, r3, #3
 801618c:	f043 0302 	orr.w	r3, r3, #2
 8016190:	81a3      	strh	r3, [r4, #12]
 8016192:	e7e3      	b.n	801615c <__smakebuf_r+0xc>
 8016194:	4b0d      	ldr	r3, [pc, #52]	; (80161cc <__smakebuf_r+0x7c>)
 8016196:	62b3      	str	r3, [r6, #40]	; 0x28
 8016198:	89a3      	ldrh	r3, [r4, #12]
 801619a:	6020      	str	r0, [r4, #0]
 801619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161a0:	81a3      	strh	r3, [r4, #12]
 80161a2:	9b00      	ldr	r3, [sp, #0]
 80161a4:	6163      	str	r3, [r4, #20]
 80161a6:	9b01      	ldr	r3, [sp, #4]
 80161a8:	6120      	str	r0, [r4, #16]
 80161aa:	b15b      	cbz	r3, 80161c4 <__smakebuf_r+0x74>
 80161ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161b0:	4630      	mov	r0, r6
 80161b2:	f001 fbf3 	bl	801799c <_isatty_r>
 80161b6:	b128      	cbz	r0, 80161c4 <__smakebuf_r+0x74>
 80161b8:	89a3      	ldrh	r3, [r4, #12]
 80161ba:	f023 0303 	bic.w	r3, r3, #3
 80161be:	f043 0301 	orr.w	r3, r3, #1
 80161c2:	81a3      	strh	r3, [r4, #12]
 80161c4:	89a3      	ldrh	r3, [r4, #12]
 80161c6:	431d      	orrs	r5, r3
 80161c8:	81a5      	strh	r5, [r4, #12]
 80161ca:	e7cd      	b.n	8016168 <__smakebuf_r+0x18>
 80161cc:	08015909 	.word	0x08015909

080161d0 <malloc>:
 80161d0:	4b02      	ldr	r3, [pc, #8]	; (80161dc <malloc+0xc>)
 80161d2:	4601      	mov	r1, r0
 80161d4:	6818      	ldr	r0, [r3, #0]
 80161d6:	f000 bc71 	b.w	8016abc <_malloc_r>
 80161da:	bf00      	nop
 80161dc:	2000000c 	.word	0x2000000c

080161e0 <__ascii_mbtowc>:
 80161e0:	b082      	sub	sp, #8
 80161e2:	b901      	cbnz	r1, 80161e6 <__ascii_mbtowc+0x6>
 80161e4:	a901      	add	r1, sp, #4
 80161e6:	b142      	cbz	r2, 80161fa <__ascii_mbtowc+0x1a>
 80161e8:	b14b      	cbz	r3, 80161fe <__ascii_mbtowc+0x1e>
 80161ea:	7813      	ldrb	r3, [r2, #0]
 80161ec:	600b      	str	r3, [r1, #0]
 80161ee:	7812      	ldrb	r2, [r2, #0]
 80161f0:	1c10      	adds	r0, r2, #0
 80161f2:	bf18      	it	ne
 80161f4:	2001      	movne	r0, #1
 80161f6:	b002      	add	sp, #8
 80161f8:	4770      	bx	lr
 80161fa:	4610      	mov	r0, r2
 80161fc:	e7fb      	b.n	80161f6 <__ascii_mbtowc+0x16>
 80161fe:	f06f 0001 	mvn.w	r0, #1
 8016202:	e7f8      	b.n	80161f6 <__ascii_mbtowc+0x16>

08016204 <_Balloc>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016208:	4604      	mov	r4, r0
 801620a:	460e      	mov	r6, r1
 801620c:	b93d      	cbnz	r5, 801621e <_Balloc+0x1a>
 801620e:	2010      	movs	r0, #16
 8016210:	f7ff ffde 	bl	80161d0 <malloc>
 8016214:	6260      	str	r0, [r4, #36]	; 0x24
 8016216:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801621a:	6005      	str	r5, [r0, #0]
 801621c:	60c5      	str	r5, [r0, #12]
 801621e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016220:	68eb      	ldr	r3, [r5, #12]
 8016222:	b183      	cbz	r3, 8016246 <_Balloc+0x42>
 8016224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016226:	68db      	ldr	r3, [r3, #12]
 8016228:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801622c:	b9b8      	cbnz	r0, 801625e <_Balloc+0x5a>
 801622e:	2101      	movs	r1, #1
 8016230:	fa01 f506 	lsl.w	r5, r1, r6
 8016234:	1d6a      	adds	r2, r5, #5
 8016236:	0092      	lsls	r2, r2, #2
 8016238:	4620      	mov	r0, r4
 801623a:	f000 fbe2 	bl	8016a02 <_calloc_r>
 801623e:	b160      	cbz	r0, 801625a <_Balloc+0x56>
 8016240:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016244:	e00e      	b.n	8016264 <_Balloc+0x60>
 8016246:	2221      	movs	r2, #33	; 0x21
 8016248:	2104      	movs	r1, #4
 801624a:	4620      	mov	r0, r4
 801624c:	f000 fbd9 	bl	8016a02 <_calloc_r>
 8016250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016252:	60e8      	str	r0, [r5, #12]
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1e4      	bne.n	8016224 <_Balloc+0x20>
 801625a:	2000      	movs	r0, #0
 801625c:	bd70      	pop	{r4, r5, r6, pc}
 801625e:	6802      	ldr	r2, [r0, #0]
 8016260:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016264:	2300      	movs	r3, #0
 8016266:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801626a:	e7f7      	b.n	801625c <_Balloc+0x58>

0801626c <_Bfree>:
 801626c:	b570      	push	{r4, r5, r6, lr}
 801626e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016270:	4606      	mov	r6, r0
 8016272:	460d      	mov	r5, r1
 8016274:	b93c      	cbnz	r4, 8016286 <_Bfree+0x1a>
 8016276:	2010      	movs	r0, #16
 8016278:	f7ff ffaa 	bl	80161d0 <malloc>
 801627c:	6270      	str	r0, [r6, #36]	; 0x24
 801627e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016282:	6004      	str	r4, [r0, #0]
 8016284:	60c4      	str	r4, [r0, #12]
 8016286:	b13d      	cbz	r5, 8016298 <_Bfree+0x2c>
 8016288:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801628a:	686a      	ldr	r2, [r5, #4]
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016292:	6029      	str	r1, [r5, #0]
 8016294:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016298:	bd70      	pop	{r4, r5, r6, pc}

0801629a <__multadd>:
 801629a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801629e:	690d      	ldr	r5, [r1, #16]
 80162a0:	461f      	mov	r7, r3
 80162a2:	4606      	mov	r6, r0
 80162a4:	460c      	mov	r4, r1
 80162a6:	f101 0c14 	add.w	ip, r1, #20
 80162aa:	2300      	movs	r3, #0
 80162ac:	f8dc 0000 	ldr.w	r0, [ip]
 80162b0:	b281      	uxth	r1, r0
 80162b2:	fb02 7101 	mla	r1, r2, r1, r7
 80162b6:	0c0f      	lsrs	r7, r1, #16
 80162b8:	0c00      	lsrs	r0, r0, #16
 80162ba:	fb02 7000 	mla	r0, r2, r0, r7
 80162be:	b289      	uxth	r1, r1
 80162c0:	3301      	adds	r3, #1
 80162c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80162c6:	429d      	cmp	r5, r3
 80162c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80162cc:	f84c 1b04 	str.w	r1, [ip], #4
 80162d0:	dcec      	bgt.n	80162ac <__multadd+0x12>
 80162d2:	b1d7      	cbz	r7, 801630a <__multadd+0x70>
 80162d4:	68a3      	ldr	r3, [r4, #8]
 80162d6:	42ab      	cmp	r3, r5
 80162d8:	dc12      	bgt.n	8016300 <__multadd+0x66>
 80162da:	6861      	ldr	r1, [r4, #4]
 80162dc:	4630      	mov	r0, r6
 80162de:	3101      	adds	r1, #1
 80162e0:	f7ff ff90 	bl	8016204 <_Balloc>
 80162e4:	6922      	ldr	r2, [r4, #16]
 80162e6:	3202      	adds	r2, #2
 80162e8:	f104 010c 	add.w	r1, r4, #12
 80162ec:	4680      	mov	r8, r0
 80162ee:	0092      	lsls	r2, r2, #2
 80162f0:	300c      	adds	r0, #12
 80162f2:	f7fc fc8d 	bl	8012c10 <memcpy>
 80162f6:	4621      	mov	r1, r4
 80162f8:	4630      	mov	r0, r6
 80162fa:	f7ff ffb7 	bl	801626c <_Bfree>
 80162fe:	4644      	mov	r4, r8
 8016300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016304:	3501      	adds	r5, #1
 8016306:	615f      	str	r7, [r3, #20]
 8016308:	6125      	str	r5, [r4, #16]
 801630a:	4620      	mov	r0, r4
 801630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016310 <__s2b>:
 8016310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016314:	460c      	mov	r4, r1
 8016316:	4615      	mov	r5, r2
 8016318:	461f      	mov	r7, r3
 801631a:	2209      	movs	r2, #9
 801631c:	3308      	adds	r3, #8
 801631e:	4606      	mov	r6, r0
 8016320:	fb93 f3f2 	sdiv	r3, r3, r2
 8016324:	2100      	movs	r1, #0
 8016326:	2201      	movs	r2, #1
 8016328:	429a      	cmp	r2, r3
 801632a:	db20      	blt.n	801636e <__s2b+0x5e>
 801632c:	4630      	mov	r0, r6
 801632e:	f7ff ff69 	bl	8016204 <_Balloc>
 8016332:	9b08      	ldr	r3, [sp, #32]
 8016334:	6143      	str	r3, [r0, #20]
 8016336:	2d09      	cmp	r5, #9
 8016338:	f04f 0301 	mov.w	r3, #1
 801633c:	6103      	str	r3, [r0, #16]
 801633e:	dd19      	ble.n	8016374 <__s2b+0x64>
 8016340:	f104 0809 	add.w	r8, r4, #9
 8016344:	46c1      	mov	r9, r8
 8016346:	442c      	add	r4, r5
 8016348:	f819 3b01 	ldrb.w	r3, [r9], #1
 801634c:	4601      	mov	r1, r0
 801634e:	3b30      	subs	r3, #48	; 0x30
 8016350:	220a      	movs	r2, #10
 8016352:	4630      	mov	r0, r6
 8016354:	f7ff ffa1 	bl	801629a <__multadd>
 8016358:	45a1      	cmp	r9, r4
 801635a:	d1f5      	bne.n	8016348 <__s2b+0x38>
 801635c:	eb08 0405 	add.w	r4, r8, r5
 8016360:	3c08      	subs	r4, #8
 8016362:	1b2d      	subs	r5, r5, r4
 8016364:	1963      	adds	r3, r4, r5
 8016366:	42bb      	cmp	r3, r7
 8016368:	db07      	blt.n	801637a <__s2b+0x6a>
 801636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801636e:	0052      	lsls	r2, r2, #1
 8016370:	3101      	adds	r1, #1
 8016372:	e7d9      	b.n	8016328 <__s2b+0x18>
 8016374:	340a      	adds	r4, #10
 8016376:	2509      	movs	r5, #9
 8016378:	e7f3      	b.n	8016362 <__s2b+0x52>
 801637a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801637e:	4601      	mov	r1, r0
 8016380:	3b30      	subs	r3, #48	; 0x30
 8016382:	220a      	movs	r2, #10
 8016384:	4630      	mov	r0, r6
 8016386:	f7ff ff88 	bl	801629a <__multadd>
 801638a:	e7eb      	b.n	8016364 <__s2b+0x54>

0801638c <__hi0bits>:
 801638c:	0c02      	lsrs	r2, r0, #16
 801638e:	0412      	lsls	r2, r2, #16
 8016390:	4603      	mov	r3, r0
 8016392:	b9b2      	cbnz	r2, 80163c2 <__hi0bits+0x36>
 8016394:	0403      	lsls	r3, r0, #16
 8016396:	2010      	movs	r0, #16
 8016398:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801639c:	bf04      	itt	eq
 801639e:	021b      	lsleq	r3, r3, #8
 80163a0:	3008      	addeq	r0, #8
 80163a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80163a6:	bf04      	itt	eq
 80163a8:	011b      	lsleq	r3, r3, #4
 80163aa:	3004      	addeq	r0, #4
 80163ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80163b0:	bf04      	itt	eq
 80163b2:	009b      	lsleq	r3, r3, #2
 80163b4:	3002      	addeq	r0, #2
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	db06      	blt.n	80163c8 <__hi0bits+0x3c>
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	d503      	bpl.n	80163c6 <__hi0bits+0x3a>
 80163be:	3001      	adds	r0, #1
 80163c0:	4770      	bx	lr
 80163c2:	2000      	movs	r0, #0
 80163c4:	e7e8      	b.n	8016398 <__hi0bits+0xc>
 80163c6:	2020      	movs	r0, #32
 80163c8:	4770      	bx	lr

080163ca <__lo0bits>:
 80163ca:	6803      	ldr	r3, [r0, #0]
 80163cc:	f013 0207 	ands.w	r2, r3, #7
 80163d0:	4601      	mov	r1, r0
 80163d2:	d00b      	beq.n	80163ec <__lo0bits+0x22>
 80163d4:	07da      	lsls	r2, r3, #31
 80163d6:	d423      	bmi.n	8016420 <__lo0bits+0x56>
 80163d8:	0798      	lsls	r0, r3, #30
 80163da:	bf49      	itett	mi
 80163dc:	085b      	lsrmi	r3, r3, #1
 80163de:	089b      	lsrpl	r3, r3, #2
 80163e0:	2001      	movmi	r0, #1
 80163e2:	600b      	strmi	r3, [r1, #0]
 80163e4:	bf5c      	itt	pl
 80163e6:	600b      	strpl	r3, [r1, #0]
 80163e8:	2002      	movpl	r0, #2
 80163ea:	4770      	bx	lr
 80163ec:	b298      	uxth	r0, r3
 80163ee:	b9a8      	cbnz	r0, 801641c <__lo0bits+0x52>
 80163f0:	0c1b      	lsrs	r3, r3, #16
 80163f2:	2010      	movs	r0, #16
 80163f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80163f8:	bf04      	itt	eq
 80163fa:	0a1b      	lsreq	r3, r3, #8
 80163fc:	3008      	addeq	r0, #8
 80163fe:	071a      	lsls	r2, r3, #28
 8016400:	bf04      	itt	eq
 8016402:	091b      	lsreq	r3, r3, #4
 8016404:	3004      	addeq	r0, #4
 8016406:	079a      	lsls	r2, r3, #30
 8016408:	bf04      	itt	eq
 801640a:	089b      	lsreq	r3, r3, #2
 801640c:	3002      	addeq	r0, #2
 801640e:	07da      	lsls	r2, r3, #31
 8016410:	d402      	bmi.n	8016418 <__lo0bits+0x4e>
 8016412:	085b      	lsrs	r3, r3, #1
 8016414:	d006      	beq.n	8016424 <__lo0bits+0x5a>
 8016416:	3001      	adds	r0, #1
 8016418:	600b      	str	r3, [r1, #0]
 801641a:	4770      	bx	lr
 801641c:	4610      	mov	r0, r2
 801641e:	e7e9      	b.n	80163f4 <__lo0bits+0x2a>
 8016420:	2000      	movs	r0, #0
 8016422:	4770      	bx	lr
 8016424:	2020      	movs	r0, #32
 8016426:	4770      	bx	lr

08016428 <__i2b>:
 8016428:	b510      	push	{r4, lr}
 801642a:	460c      	mov	r4, r1
 801642c:	2101      	movs	r1, #1
 801642e:	f7ff fee9 	bl	8016204 <_Balloc>
 8016432:	2201      	movs	r2, #1
 8016434:	6144      	str	r4, [r0, #20]
 8016436:	6102      	str	r2, [r0, #16]
 8016438:	bd10      	pop	{r4, pc}

0801643a <__multiply>:
 801643a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801643e:	4614      	mov	r4, r2
 8016440:	690a      	ldr	r2, [r1, #16]
 8016442:	6923      	ldr	r3, [r4, #16]
 8016444:	429a      	cmp	r2, r3
 8016446:	bfb8      	it	lt
 8016448:	460b      	movlt	r3, r1
 801644a:	4688      	mov	r8, r1
 801644c:	bfbc      	itt	lt
 801644e:	46a0      	movlt	r8, r4
 8016450:	461c      	movlt	r4, r3
 8016452:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016456:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801645a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801645e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016462:	eb07 0609 	add.w	r6, r7, r9
 8016466:	42b3      	cmp	r3, r6
 8016468:	bfb8      	it	lt
 801646a:	3101      	addlt	r1, #1
 801646c:	f7ff feca 	bl	8016204 <_Balloc>
 8016470:	f100 0514 	add.w	r5, r0, #20
 8016474:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016478:	462b      	mov	r3, r5
 801647a:	2200      	movs	r2, #0
 801647c:	4573      	cmp	r3, lr
 801647e:	d316      	bcc.n	80164ae <__multiply+0x74>
 8016480:	f104 0214 	add.w	r2, r4, #20
 8016484:	f108 0114 	add.w	r1, r8, #20
 8016488:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801648c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016490:	9300      	str	r3, [sp, #0]
 8016492:	9b00      	ldr	r3, [sp, #0]
 8016494:	9201      	str	r2, [sp, #4]
 8016496:	4293      	cmp	r3, r2
 8016498:	d80c      	bhi.n	80164b4 <__multiply+0x7a>
 801649a:	2e00      	cmp	r6, #0
 801649c:	dd03      	ble.n	80164a6 <__multiply+0x6c>
 801649e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d05d      	beq.n	8016562 <__multiply+0x128>
 80164a6:	6106      	str	r6, [r0, #16]
 80164a8:	b003      	add	sp, #12
 80164aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ae:	f843 2b04 	str.w	r2, [r3], #4
 80164b2:	e7e3      	b.n	801647c <__multiply+0x42>
 80164b4:	f8b2 b000 	ldrh.w	fp, [r2]
 80164b8:	f1bb 0f00 	cmp.w	fp, #0
 80164bc:	d023      	beq.n	8016506 <__multiply+0xcc>
 80164be:	4689      	mov	r9, r1
 80164c0:	46ac      	mov	ip, r5
 80164c2:	f04f 0800 	mov.w	r8, #0
 80164c6:	f859 4b04 	ldr.w	r4, [r9], #4
 80164ca:	f8dc a000 	ldr.w	sl, [ip]
 80164ce:	b2a3      	uxth	r3, r4
 80164d0:	fa1f fa8a 	uxth.w	sl, sl
 80164d4:	fb0b a303 	mla	r3, fp, r3, sl
 80164d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80164dc:	f8dc 4000 	ldr.w	r4, [ip]
 80164e0:	4443      	add	r3, r8
 80164e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164e6:	fb0b 840a 	mla	r4, fp, sl, r8
 80164ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80164ee:	46e2      	mov	sl, ip
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80164f6:	454f      	cmp	r7, r9
 80164f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164fc:	f84a 3b04 	str.w	r3, [sl], #4
 8016500:	d82b      	bhi.n	801655a <__multiply+0x120>
 8016502:	f8cc 8004 	str.w	r8, [ip, #4]
 8016506:	9b01      	ldr	r3, [sp, #4]
 8016508:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801650c:	3204      	adds	r2, #4
 801650e:	f1ba 0f00 	cmp.w	sl, #0
 8016512:	d020      	beq.n	8016556 <__multiply+0x11c>
 8016514:	682b      	ldr	r3, [r5, #0]
 8016516:	4689      	mov	r9, r1
 8016518:	46a8      	mov	r8, r5
 801651a:	f04f 0b00 	mov.w	fp, #0
 801651e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016522:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016526:	fb0a 440c 	mla	r4, sl, ip, r4
 801652a:	445c      	add	r4, fp
 801652c:	46c4      	mov	ip, r8
 801652e:	b29b      	uxth	r3, r3
 8016530:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016534:	f84c 3b04 	str.w	r3, [ip], #4
 8016538:	f859 3b04 	ldr.w	r3, [r9], #4
 801653c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016540:	0c1b      	lsrs	r3, r3, #16
 8016542:	fb0a b303 	mla	r3, sl, r3, fp
 8016546:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801654a:	454f      	cmp	r7, r9
 801654c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016550:	d805      	bhi.n	801655e <__multiply+0x124>
 8016552:	f8c8 3004 	str.w	r3, [r8, #4]
 8016556:	3504      	adds	r5, #4
 8016558:	e79b      	b.n	8016492 <__multiply+0x58>
 801655a:	46d4      	mov	ip, sl
 801655c:	e7b3      	b.n	80164c6 <__multiply+0x8c>
 801655e:	46e0      	mov	r8, ip
 8016560:	e7dd      	b.n	801651e <__multiply+0xe4>
 8016562:	3e01      	subs	r6, #1
 8016564:	e799      	b.n	801649a <__multiply+0x60>
	...

08016568 <__pow5mult>:
 8016568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801656c:	4615      	mov	r5, r2
 801656e:	f012 0203 	ands.w	r2, r2, #3
 8016572:	4606      	mov	r6, r0
 8016574:	460f      	mov	r7, r1
 8016576:	d007      	beq.n	8016588 <__pow5mult+0x20>
 8016578:	3a01      	subs	r2, #1
 801657a:	4c21      	ldr	r4, [pc, #132]	; (8016600 <__pow5mult+0x98>)
 801657c:	2300      	movs	r3, #0
 801657e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016582:	f7ff fe8a 	bl	801629a <__multadd>
 8016586:	4607      	mov	r7, r0
 8016588:	10ad      	asrs	r5, r5, #2
 801658a:	d035      	beq.n	80165f8 <__pow5mult+0x90>
 801658c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801658e:	b93c      	cbnz	r4, 80165a0 <__pow5mult+0x38>
 8016590:	2010      	movs	r0, #16
 8016592:	f7ff fe1d 	bl	80161d0 <malloc>
 8016596:	6270      	str	r0, [r6, #36]	; 0x24
 8016598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801659c:	6004      	str	r4, [r0, #0]
 801659e:	60c4      	str	r4, [r0, #12]
 80165a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80165a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80165a8:	b94c      	cbnz	r4, 80165be <__pow5mult+0x56>
 80165aa:	f240 2171 	movw	r1, #625	; 0x271
 80165ae:	4630      	mov	r0, r6
 80165b0:	f7ff ff3a 	bl	8016428 <__i2b>
 80165b4:	2300      	movs	r3, #0
 80165b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80165ba:	4604      	mov	r4, r0
 80165bc:	6003      	str	r3, [r0, #0]
 80165be:	f04f 0800 	mov.w	r8, #0
 80165c2:	07eb      	lsls	r3, r5, #31
 80165c4:	d50a      	bpl.n	80165dc <__pow5mult+0x74>
 80165c6:	4639      	mov	r1, r7
 80165c8:	4622      	mov	r2, r4
 80165ca:	4630      	mov	r0, r6
 80165cc:	f7ff ff35 	bl	801643a <__multiply>
 80165d0:	4639      	mov	r1, r7
 80165d2:	4681      	mov	r9, r0
 80165d4:	4630      	mov	r0, r6
 80165d6:	f7ff fe49 	bl	801626c <_Bfree>
 80165da:	464f      	mov	r7, r9
 80165dc:	106d      	asrs	r5, r5, #1
 80165de:	d00b      	beq.n	80165f8 <__pow5mult+0x90>
 80165e0:	6820      	ldr	r0, [r4, #0]
 80165e2:	b938      	cbnz	r0, 80165f4 <__pow5mult+0x8c>
 80165e4:	4622      	mov	r2, r4
 80165e6:	4621      	mov	r1, r4
 80165e8:	4630      	mov	r0, r6
 80165ea:	f7ff ff26 	bl	801643a <__multiply>
 80165ee:	6020      	str	r0, [r4, #0]
 80165f0:	f8c0 8000 	str.w	r8, [r0]
 80165f4:	4604      	mov	r4, r0
 80165f6:	e7e4      	b.n	80165c2 <__pow5mult+0x5a>
 80165f8:	4638      	mov	r0, r7
 80165fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165fe:	bf00      	nop
 8016600:	08018420 	.word	0x08018420

08016604 <__lshift>:
 8016604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016608:	460c      	mov	r4, r1
 801660a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801660e:	6923      	ldr	r3, [r4, #16]
 8016610:	6849      	ldr	r1, [r1, #4]
 8016612:	eb0a 0903 	add.w	r9, sl, r3
 8016616:	68a3      	ldr	r3, [r4, #8]
 8016618:	4607      	mov	r7, r0
 801661a:	4616      	mov	r6, r2
 801661c:	f109 0501 	add.w	r5, r9, #1
 8016620:	42ab      	cmp	r3, r5
 8016622:	db32      	blt.n	801668a <__lshift+0x86>
 8016624:	4638      	mov	r0, r7
 8016626:	f7ff fded 	bl	8016204 <_Balloc>
 801662a:	2300      	movs	r3, #0
 801662c:	4680      	mov	r8, r0
 801662e:	f100 0114 	add.w	r1, r0, #20
 8016632:	461a      	mov	r2, r3
 8016634:	4553      	cmp	r3, sl
 8016636:	db2b      	blt.n	8016690 <__lshift+0x8c>
 8016638:	6920      	ldr	r0, [r4, #16]
 801663a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801663e:	f104 0314 	add.w	r3, r4, #20
 8016642:	f016 021f 	ands.w	r2, r6, #31
 8016646:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801664a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801664e:	d025      	beq.n	801669c <__lshift+0x98>
 8016650:	f1c2 0e20 	rsb	lr, r2, #32
 8016654:	2000      	movs	r0, #0
 8016656:	681e      	ldr	r6, [r3, #0]
 8016658:	468a      	mov	sl, r1
 801665a:	4096      	lsls	r6, r2
 801665c:	4330      	orrs	r0, r6
 801665e:	f84a 0b04 	str.w	r0, [sl], #4
 8016662:	f853 0b04 	ldr.w	r0, [r3], #4
 8016666:	459c      	cmp	ip, r3
 8016668:	fa20 f00e 	lsr.w	r0, r0, lr
 801666c:	d814      	bhi.n	8016698 <__lshift+0x94>
 801666e:	6048      	str	r0, [r1, #4]
 8016670:	b108      	cbz	r0, 8016676 <__lshift+0x72>
 8016672:	f109 0502 	add.w	r5, r9, #2
 8016676:	3d01      	subs	r5, #1
 8016678:	4638      	mov	r0, r7
 801667a:	f8c8 5010 	str.w	r5, [r8, #16]
 801667e:	4621      	mov	r1, r4
 8016680:	f7ff fdf4 	bl	801626c <_Bfree>
 8016684:	4640      	mov	r0, r8
 8016686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801668a:	3101      	adds	r1, #1
 801668c:	005b      	lsls	r3, r3, #1
 801668e:	e7c7      	b.n	8016620 <__lshift+0x1c>
 8016690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016694:	3301      	adds	r3, #1
 8016696:	e7cd      	b.n	8016634 <__lshift+0x30>
 8016698:	4651      	mov	r1, sl
 801669a:	e7dc      	b.n	8016656 <__lshift+0x52>
 801669c:	3904      	subs	r1, #4
 801669e:	f853 2b04 	ldr.w	r2, [r3], #4
 80166a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80166a6:	459c      	cmp	ip, r3
 80166a8:	d8f9      	bhi.n	801669e <__lshift+0x9a>
 80166aa:	e7e4      	b.n	8016676 <__lshift+0x72>

080166ac <__mcmp>:
 80166ac:	6903      	ldr	r3, [r0, #16]
 80166ae:	690a      	ldr	r2, [r1, #16]
 80166b0:	1a9b      	subs	r3, r3, r2
 80166b2:	b530      	push	{r4, r5, lr}
 80166b4:	d10c      	bne.n	80166d0 <__mcmp+0x24>
 80166b6:	0092      	lsls	r2, r2, #2
 80166b8:	3014      	adds	r0, #20
 80166ba:	3114      	adds	r1, #20
 80166bc:	1884      	adds	r4, r0, r2
 80166be:	4411      	add	r1, r2
 80166c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80166c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80166c8:	4295      	cmp	r5, r2
 80166ca:	d003      	beq.n	80166d4 <__mcmp+0x28>
 80166cc:	d305      	bcc.n	80166da <__mcmp+0x2e>
 80166ce:	2301      	movs	r3, #1
 80166d0:	4618      	mov	r0, r3
 80166d2:	bd30      	pop	{r4, r5, pc}
 80166d4:	42a0      	cmp	r0, r4
 80166d6:	d3f3      	bcc.n	80166c0 <__mcmp+0x14>
 80166d8:	e7fa      	b.n	80166d0 <__mcmp+0x24>
 80166da:	f04f 33ff 	mov.w	r3, #4294967295
 80166de:	e7f7      	b.n	80166d0 <__mcmp+0x24>

080166e0 <__mdiff>:
 80166e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166e4:	460d      	mov	r5, r1
 80166e6:	4607      	mov	r7, r0
 80166e8:	4611      	mov	r1, r2
 80166ea:	4628      	mov	r0, r5
 80166ec:	4614      	mov	r4, r2
 80166ee:	f7ff ffdd 	bl	80166ac <__mcmp>
 80166f2:	1e06      	subs	r6, r0, #0
 80166f4:	d108      	bne.n	8016708 <__mdiff+0x28>
 80166f6:	4631      	mov	r1, r6
 80166f8:	4638      	mov	r0, r7
 80166fa:	f7ff fd83 	bl	8016204 <_Balloc>
 80166fe:	2301      	movs	r3, #1
 8016700:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016708:	bfa4      	itt	ge
 801670a:	4623      	movge	r3, r4
 801670c:	462c      	movge	r4, r5
 801670e:	4638      	mov	r0, r7
 8016710:	6861      	ldr	r1, [r4, #4]
 8016712:	bfa6      	itte	ge
 8016714:	461d      	movge	r5, r3
 8016716:	2600      	movge	r6, #0
 8016718:	2601      	movlt	r6, #1
 801671a:	f7ff fd73 	bl	8016204 <_Balloc>
 801671e:	692b      	ldr	r3, [r5, #16]
 8016720:	60c6      	str	r6, [r0, #12]
 8016722:	6926      	ldr	r6, [r4, #16]
 8016724:	f105 0914 	add.w	r9, r5, #20
 8016728:	f104 0214 	add.w	r2, r4, #20
 801672c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016730:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016734:	f100 0514 	add.w	r5, r0, #20
 8016738:	f04f 0e00 	mov.w	lr, #0
 801673c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016740:	f859 4b04 	ldr.w	r4, [r9], #4
 8016744:	fa1e f18a 	uxtah	r1, lr, sl
 8016748:	b2a3      	uxth	r3, r4
 801674a:	1ac9      	subs	r1, r1, r3
 801674c:	0c23      	lsrs	r3, r4, #16
 801674e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016752:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016756:	b289      	uxth	r1, r1
 8016758:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801675c:	45c8      	cmp	r8, r9
 801675e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016762:	4694      	mov	ip, r2
 8016764:	f845 3b04 	str.w	r3, [r5], #4
 8016768:	d8e8      	bhi.n	801673c <__mdiff+0x5c>
 801676a:	45bc      	cmp	ip, r7
 801676c:	d304      	bcc.n	8016778 <__mdiff+0x98>
 801676e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016772:	b183      	cbz	r3, 8016796 <__mdiff+0xb6>
 8016774:	6106      	str	r6, [r0, #16]
 8016776:	e7c5      	b.n	8016704 <__mdiff+0x24>
 8016778:	f85c 1b04 	ldr.w	r1, [ip], #4
 801677c:	fa1e f381 	uxtah	r3, lr, r1
 8016780:	141a      	asrs	r2, r3, #16
 8016782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016786:	b29b      	uxth	r3, r3
 8016788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801678c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016790:	f845 3b04 	str.w	r3, [r5], #4
 8016794:	e7e9      	b.n	801676a <__mdiff+0x8a>
 8016796:	3e01      	subs	r6, #1
 8016798:	e7e9      	b.n	801676e <__mdiff+0x8e>
	...

0801679c <__ulp>:
 801679c:	4b12      	ldr	r3, [pc, #72]	; (80167e8 <__ulp+0x4c>)
 801679e:	ee10 2a90 	vmov	r2, s1
 80167a2:	401a      	ands	r2, r3
 80167a4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	dd04      	ble.n	80167b6 <__ulp+0x1a>
 80167ac:	2000      	movs	r0, #0
 80167ae:	4619      	mov	r1, r3
 80167b0:	ec41 0b10 	vmov	d0, r0, r1
 80167b4:	4770      	bx	lr
 80167b6:	425b      	negs	r3, r3
 80167b8:	151b      	asrs	r3, r3, #20
 80167ba:	2b13      	cmp	r3, #19
 80167bc:	f04f 0000 	mov.w	r0, #0
 80167c0:	f04f 0100 	mov.w	r1, #0
 80167c4:	dc04      	bgt.n	80167d0 <__ulp+0x34>
 80167c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80167ca:	fa42 f103 	asr.w	r1, r2, r3
 80167ce:	e7ef      	b.n	80167b0 <__ulp+0x14>
 80167d0:	3b14      	subs	r3, #20
 80167d2:	2b1e      	cmp	r3, #30
 80167d4:	f04f 0201 	mov.w	r2, #1
 80167d8:	bfda      	itte	le
 80167da:	f1c3 031f 	rsble	r3, r3, #31
 80167de:	fa02 f303 	lslle.w	r3, r2, r3
 80167e2:	4613      	movgt	r3, r2
 80167e4:	4618      	mov	r0, r3
 80167e6:	e7e3      	b.n	80167b0 <__ulp+0x14>
 80167e8:	7ff00000 	.word	0x7ff00000

080167ec <__b2d>:
 80167ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ee:	6905      	ldr	r5, [r0, #16]
 80167f0:	f100 0714 	add.w	r7, r0, #20
 80167f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80167f8:	1f2e      	subs	r6, r5, #4
 80167fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80167fe:	4620      	mov	r0, r4
 8016800:	f7ff fdc4 	bl	801638c <__hi0bits>
 8016804:	f1c0 0320 	rsb	r3, r0, #32
 8016808:	280a      	cmp	r0, #10
 801680a:	600b      	str	r3, [r1, #0]
 801680c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016884 <__b2d+0x98>
 8016810:	dc14      	bgt.n	801683c <__b2d+0x50>
 8016812:	f1c0 0e0b 	rsb	lr, r0, #11
 8016816:	fa24 f10e 	lsr.w	r1, r4, lr
 801681a:	42b7      	cmp	r7, r6
 801681c:	ea41 030c 	orr.w	r3, r1, ip
 8016820:	bf34      	ite	cc
 8016822:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016826:	2100      	movcs	r1, #0
 8016828:	3015      	adds	r0, #21
 801682a:	fa04 f000 	lsl.w	r0, r4, r0
 801682e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016832:	ea40 0201 	orr.w	r2, r0, r1
 8016836:	ec43 2b10 	vmov	d0, r2, r3
 801683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801683c:	42b7      	cmp	r7, r6
 801683e:	bf3a      	itte	cc
 8016840:	f1a5 0608 	subcc.w	r6, r5, #8
 8016844:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016848:	2100      	movcs	r1, #0
 801684a:	380b      	subs	r0, #11
 801684c:	d015      	beq.n	801687a <__b2d+0x8e>
 801684e:	4084      	lsls	r4, r0
 8016850:	f1c0 0520 	rsb	r5, r0, #32
 8016854:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016858:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801685c:	42be      	cmp	r6, r7
 801685e:	fa21 fc05 	lsr.w	ip, r1, r5
 8016862:	ea44 030c 	orr.w	r3, r4, ip
 8016866:	bf8c      	ite	hi
 8016868:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801686c:	2400      	movls	r4, #0
 801686e:	fa01 f000 	lsl.w	r0, r1, r0
 8016872:	40ec      	lsrs	r4, r5
 8016874:	ea40 0204 	orr.w	r2, r0, r4
 8016878:	e7dd      	b.n	8016836 <__b2d+0x4a>
 801687a:	ea44 030c 	orr.w	r3, r4, ip
 801687e:	460a      	mov	r2, r1
 8016880:	e7d9      	b.n	8016836 <__b2d+0x4a>
 8016882:	bf00      	nop
 8016884:	3ff00000 	.word	0x3ff00000

08016888 <__d2b>:
 8016888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801688c:	460e      	mov	r6, r1
 801688e:	2101      	movs	r1, #1
 8016890:	ec59 8b10 	vmov	r8, r9, d0
 8016894:	4615      	mov	r5, r2
 8016896:	f7ff fcb5 	bl	8016204 <_Balloc>
 801689a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801689e:	4607      	mov	r7, r0
 80168a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80168a4:	bb34      	cbnz	r4, 80168f4 <__d2b+0x6c>
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	f1b8 0300 	subs.w	r3, r8, #0
 80168ac:	d027      	beq.n	80168fe <__d2b+0x76>
 80168ae:	a802      	add	r0, sp, #8
 80168b0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80168b4:	f7ff fd89 	bl	80163ca <__lo0bits>
 80168b8:	9900      	ldr	r1, [sp, #0]
 80168ba:	b1f0      	cbz	r0, 80168fa <__d2b+0x72>
 80168bc:	9a01      	ldr	r2, [sp, #4]
 80168be:	f1c0 0320 	rsb	r3, r0, #32
 80168c2:	fa02 f303 	lsl.w	r3, r2, r3
 80168c6:	430b      	orrs	r3, r1
 80168c8:	40c2      	lsrs	r2, r0
 80168ca:	617b      	str	r3, [r7, #20]
 80168cc:	9201      	str	r2, [sp, #4]
 80168ce:	9b01      	ldr	r3, [sp, #4]
 80168d0:	61bb      	str	r3, [r7, #24]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	bf14      	ite	ne
 80168d6:	2102      	movne	r1, #2
 80168d8:	2101      	moveq	r1, #1
 80168da:	6139      	str	r1, [r7, #16]
 80168dc:	b1c4      	cbz	r4, 8016910 <__d2b+0x88>
 80168de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80168e2:	4404      	add	r4, r0
 80168e4:	6034      	str	r4, [r6, #0]
 80168e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80168ea:	6028      	str	r0, [r5, #0]
 80168ec:	4638      	mov	r0, r7
 80168ee:	b003      	add	sp, #12
 80168f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168f8:	e7d5      	b.n	80168a6 <__d2b+0x1e>
 80168fa:	6179      	str	r1, [r7, #20]
 80168fc:	e7e7      	b.n	80168ce <__d2b+0x46>
 80168fe:	a801      	add	r0, sp, #4
 8016900:	f7ff fd63 	bl	80163ca <__lo0bits>
 8016904:	9b01      	ldr	r3, [sp, #4]
 8016906:	617b      	str	r3, [r7, #20]
 8016908:	2101      	movs	r1, #1
 801690a:	6139      	str	r1, [r7, #16]
 801690c:	3020      	adds	r0, #32
 801690e:	e7e5      	b.n	80168dc <__d2b+0x54>
 8016910:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016918:	6030      	str	r0, [r6, #0]
 801691a:	6918      	ldr	r0, [r3, #16]
 801691c:	f7ff fd36 	bl	801638c <__hi0bits>
 8016920:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016924:	e7e1      	b.n	80168ea <__d2b+0x62>

08016926 <__ratio>:
 8016926:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801692a:	4688      	mov	r8, r1
 801692c:	4669      	mov	r1, sp
 801692e:	4681      	mov	r9, r0
 8016930:	f7ff ff5c 	bl	80167ec <__b2d>
 8016934:	a901      	add	r1, sp, #4
 8016936:	4640      	mov	r0, r8
 8016938:	ec57 6b10 	vmov	r6, r7, d0
 801693c:	f7ff ff56 	bl	80167ec <__b2d>
 8016940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016944:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016948:	eba3 0c02 	sub.w	ip, r3, r2
 801694c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016950:	1a9b      	subs	r3, r3, r2
 8016952:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016956:	ec5b ab10 	vmov	sl, fp, d0
 801695a:	2b00      	cmp	r3, #0
 801695c:	bfce      	itee	gt
 801695e:	463a      	movgt	r2, r7
 8016960:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016964:	465a      	movle	r2, fp
 8016966:	4659      	mov	r1, fp
 8016968:	463d      	mov	r5, r7
 801696a:	bfd4      	ite	le
 801696c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016970:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016974:	4630      	mov	r0, r6
 8016976:	ee10 2a10 	vmov	r2, s0
 801697a:	460b      	mov	r3, r1
 801697c:	4629      	mov	r1, r5
 801697e:	f7e9 ff7d 	bl	800087c <__aeabi_ddiv>
 8016982:	ec41 0b10 	vmov	d0, r0, r1
 8016986:	b003      	add	sp, #12
 8016988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801698c <__copybits>:
 801698c:	3901      	subs	r1, #1
 801698e:	b510      	push	{r4, lr}
 8016990:	1149      	asrs	r1, r1, #5
 8016992:	6914      	ldr	r4, [r2, #16]
 8016994:	3101      	adds	r1, #1
 8016996:	f102 0314 	add.w	r3, r2, #20
 801699a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801699e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80169a2:	42a3      	cmp	r3, r4
 80169a4:	4602      	mov	r2, r0
 80169a6:	d303      	bcc.n	80169b0 <__copybits+0x24>
 80169a8:	2300      	movs	r3, #0
 80169aa:	428a      	cmp	r2, r1
 80169ac:	d305      	bcc.n	80169ba <__copybits+0x2e>
 80169ae:	bd10      	pop	{r4, pc}
 80169b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169b4:	f840 2b04 	str.w	r2, [r0], #4
 80169b8:	e7f3      	b.n	80169a2 <__copybits+0x16>
 80169ba:	f842 3b04 	str.w	r3, [r2], #4
 80169be:	e7f4      	b.n	80169aa <__copybits+0x1e>

080169c0 <__any_on>:
 80169c0:	f100 0214 	add.w	r2, r0, #20
 80169c4:	6900      	ldr	r0, [r0, #16]
 80169c6:	114b      	asrs	r3, r1, #5
 80169c8:	4298      	cmp	r0, r3
 80169ca:	b510      	push	{r4, lr}
 80169cc:	db11      	blt.n	80169f2 <__any_on+0x32>
 80169ce:	dd0a      	ble.n	80169e6 <__any_on+0x26>
 80169d0:	f011 011f 	ands.w	r1, r1, #31
 80169d4:	d007      	beq.n	80169e6 <__any_on+0x26>
 80169d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80169da:	fa24 f001 	lsr.w	r0, r4, r1
 80169de:	fa00 f101 	lsl.w	r1, r0, r1
 80169e2:	428c      	cmp	r4, r1
 80169e4:	d10b      	bne.n	80169fe <__any_on+0x3e>
 80169e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80169ea:	4293      	cmp	r3, r2
 80169ec:	d803      	bhi.n	80169f6 <__any_on+0x36>
 80169ee:	2000      	movs	r0, #0
 80169f0:	bd10      	pop	{r4, pc}
 80169f2:	4603      	mov	r3, r0
 80169f4:	e7f7      	b.n	80169e6 <__any_on+0x26>
 80169f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80169fa:	2900      	cmp	r1, #0
 80169fc:	d0f5      	beq.n	80169ea <__any_on+0x2a>
 80169fe:	2001      	movs	r0, #1
 8016a00:	e7f6      	b.n	80169f0 <__any_on+0x30>

08016a02 <_calloc_r>:
 8016a02:	b538      	push	{r3, r4, r5, lr}
 8016a04:	fb02 f401 	mul.w	r4, r2, r1
 8016a08:	4621      	mov	r1, r4
 8016a0a:	f000 f857 	bl	8016abc <_malloc_r>
 8016a0e:	4605      	mov	r5, r0
 8016a10:	b118      	cbz	r0, 8016a1a <_calloc_r+0x18>
 8016a12:	4622      	mov	r2, r4
 8016a14:	2100      	movs	r1, #0
 8016a16:	f7fc f906 	bl	8012c26 <memset>
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016a20 <_free_r>:
 8016a20:	b538      	push	{r3, r4, r5, lr}
 8016a22:	4605      	mov	r5, r0
 8016a24:	2900      	cmp	r1, #0
 8016a26:	d045      	beq.n	8016ab4 <_free_r+0x94>
 8016a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a2c:	1f0c      	subs	r4, r1, #4
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	bfb8      	it	lt
 8016a32:	18e4      	addlt	r4, r4, r3
 8016a34:	f000 ffdb 	bl	80179ee <__malloc_lock>
 8016a38:	4a1f      	ldr	r2, [pc, #124]	; (8016ab8 <_free_r+0x98>)
 8016a3a:	6813      	ldr	r3, [r2, #0]
 8016a3c:	4610      	mov	r0, r2
 8016a3e:	b933      	cbnz	r3, 8016a4e <_free_r+0x2e>
 8016a40:	6063      	str	r3, [r4, #4]
 8016a42:	6014      	str	r4, [r2, #0]
 8016a44:	4628      	mov	r0, r5
 8016a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a4a:	f000 bfd1 	b.w	80179f0 <__malloc_unlock>
 8016a4e:	42a3      	cmp	r3, r4
 8016a50:	d90c      	bls.n	8016a6c <_free_r+0x4c>
 8016a52:	6821      	ldr	r1, [r4, #0]
 8016a54:	1862      	adds	r2, r4, r1
 8016a56:	4293      	cmp	r3, r2
 8016a58:	bf04      	itt	eq
 8016a5a:	681a      	ldreq	r2, [r3, #0]
 8016a5c:	685b      	ldreq	r3, [r3, #4]
 8016a5e:	6063      	str	r3, [r4, #4]
 8016a60:	bf04      	itt	eq
 8016a62:	1852      	addeq	r2, r2, r1
 8016a64:	6022      	streq	r2, [r4, #0]
 8016a66:	6004      	str	r4, [r0, #0]
 8016a68:	e7ec      	b.n	8016a44 <_free_r+0x24>
 8016a6a:	4613      	mov	r3, r2
 8016a6c:	685a      	ldr	r2, [r3, #4]
 8016a6e:	b10a      	cbz	r2, 8016a74 <_free_r+0x54>
 8016a70:	42a2      	cmp	r2, r4
 8016a72:	d9fa      	bls.n	8016a6a <_free_r+0x4a>
 8016a74:	6819      	ldr	r1, [r3, #0]
 8016a76:	1858      	adds	r0, r3, r1
 8016a78:	42a0      	cmp	r0, r4
 8016a7a:	d10b      	bne.n	8016a94 <_free_r+0x74>
 8016a7c:	6820      	ldr	r0, [r4, #0]
 8016a7e:	4401      	add	r1, r0
 8016a80:	1858      	adds	r0, r3, r1
 8016a82:	4282      	cmp	r2, r0
 8016a84:	6019      	str	r1, [r3, #0]
 8016a86:	d1dd      	bne.n	8016a44 <_free_r+0x24>
 8016a88:	6810      	ldr	r0, [r2, #0]
 8016a8a:	6852      	ldr	r2, [r2, #4]
 8016a8c:	605a      	str	r2, [r3, #4]
 8016a8e:	4401      	add	r1, r0
 8016a90:	6019      	str	r1, [r3, #0]
 8016a92:	e7d7      	b.n	8016a44 <_free_r+0x24>
 8016a94:	d902      	bls.n	8016a9c <_free_r+0x7c>
 8016a96:	230c      	movs	r3, #12
 8016a98:	602b      	str	r3, [r5, #0]
 8016a9a:	e7d3      	b.n	8016a44 <_free_r+0x24>
 8016a9c:	6820      	ldr	r0, [r4, #0]
 8016a9e:	1821      	adds	r1, r4, r0
 8016aa0:	428a      	cmp	r2, r1
 8016aa2:	bf04      	itt	eq
 8016aa4:	6811      	ldreq	r1, [r2, #0]
 8016aa6:	6852      	ldreq	r2, [r2, #4]
 8016aa8:	6062      	str	r2, [r4, #4]
 8016aaa:	bf04      	itt	eq
 8016aac:	1809      	addeq	r1, r1, r0
 8016aae:	6021      	streq	r1, [r4, #0]
 8016ab0:	605c      	str	r4, [r3, #4]
 8016ab2:	e7c7      	b.n	8016a44 <_free_r+0x24>
 8016ab4:	bd38      	pop	{r3, r4, r5, pc}
 8016ab6:	bf00      	nop
 8016ab8:	2003746c 	.word	0x2003746c

08016abc <_malloc_r>:
 8016abc:	b570      	push	{r4, r5, r6, lr}
 8016abe:	1ccd      	adds	r5, r1, #3
 8016ac0:	f025 0503 	bic.w	r5, r5, #3
 8016ac4:	3508      	adds	r5, #8
 8016ac6:	2d0c      	cmp	r5, #12
 8016ac8:	bf38      	it	cc
 8016aca:	250c      	movcc	r5, #12
 8016acc:	2d00      	cmp	r5, #0
 8016ace:	4606      	mov	r6, r0
 8016ad0:	db01      	blt.n	8016ad6 <_malloc_r+0x1a>
 8016ad2:	42a9      	cmp	r1, r5
 8016ad4:	d903      	bls.n	8016ade <_malloc_r+0x22>
 8016ad6:	230c      	movs	r3, #12
 8016ad8:	6033      	str	r3, [r6, #0]
 8016ada:	2000      	movs	r0, #0
 8016adc:	bd70      	pop	{r4, r5, r6, pc}
 8016ade:	f000 ff86 	bl	80179ee <__malloc_lock>
 8016ae2:	4a21      	ldr	r2, [pc, #132]	; (8016b68 <_malloc_r+0xac>)
 8016ae4:	6814      	ldr	r4, [r2, #0]
 8016ae6:	4621      	mov	r1, r4
 8016ae8:	b991      	cbnz	r1, 8016b10 <_malloc_r+0x54>
 8016aea:	4c20      	ldr	r4, [pc, #128]	; (8016b6c <_malloc_r+0xb0>)
 8016aec:	6823      	ldr	r3, [r4, #0]
 8016aee:	b91b      	cbnz	r3, 8016af8 <_malloc_r+0x3c>
 8016af0:	4630      	mov	r0, r6
 8016af2:	f000 fe19 	bl	8017728 <_sbrk_r>
 8016af6:	6020      	str	r0, [r4, #0]
 8016af8:	4629      	mov	r1, r5
 8016afa:	4630      	mov	r0, r6
 8016afc:	f000 fe14 	bl	8017728 <_sbrk_r>
 8016b00:	1c43      	adds	r3, r0, #1
 8016b02:	d124      	bne.n	8016b4e <_malloc_r+0x92>
 8016b04:	230c      	movs	r3, #12
 8016b06:	6033      	str	r3, [r6, #0]
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f000 ff71 	bl	80179f0 <__malloc_unlock>
 8016b0e:	e7e4      	b.n	8016ada <_malloc_r+0x1e>
 8016b10:	680b      	ldr	r3, [r1, #0]
 8016b12:	1b5b      	subs	r3, r3, r5
 8016b14:	d418      	bmi.n	8016b48 <_malloc_r+0x8c>
 8016b16:	2b0b      	cmp	r3, #11
 8016b18:	d90f      	bls.n	8016b3a <_malloc_r+0x7e>
 8016b1a:	600b      	str	r3, [r1, #0]
 8016b1c:	50cd      	str	r5, [r1, r3]
 8016b1e:	18cc      	adds	r4, r1, r3
 8016b20:	4630      	mov	r0, r6
 8016b22:	f000 ff65 	bl	80179f0 <__malloc_unlock>
 8016b26:	f104 000b 	add.w	r0, r4, #11
 8016b2a:	1d23      	adds	r3, r4, #4
 8016b2c:	f020 0007 	bic.w	r0, r0, #7
 8016b30:	1ac3      	subs	r3, r0, r3
 8016b32:	d0d3      	beq.n	8016adc <_malloc_r+0x20>
 8016b34:	425a      	negs	r2, r3
 8016b36:	50e2      	str	r2, [r4, r3]
 8016b38:	e7d0      	b.n	8016adc <_malloc_r+0x20>
 8016b3a:	428c      	cmp	r4, r1
 8016b3c:	684b      	ldr	r3, [r1, #4]
 8016b3e:	bf16      	itet	ne
 8016b40:	6063      	strne	r3, [r4, #4]
 8016b42:	6013      	streq	r3, [r2, #0]
 8016b44:	460c      	movne	r4, r1
 8016b46:	e7eb      	b.n	8016b20 <_malloc_r+0x64>
 8016b48:	460c      	mov	r4, r1
 8016b4a:	6849      	ldr	r1, [r1, #4]
 8016b4c:	e7cc      	b.n	8016ae8 <_malloc_r+0x2c>
 8016b4e:	1cc4      	adds	r4, r0, #3
 8016b50:	f024 0403 	bic.w	r4, r4, #3
 8016b54:	42a0      	cmp	r0, r4
 8016b56:	d005      	beq.n	8016b64 <_malloc_r+0xa8>
 8016b58:	1a21      	subs	r1, r4, r0
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	f000 fde4 	bl	8017728 <_sbrk_r>
 8016b60:	3001      	adds	r0, #1
 8016b62:	d0cf      	beq.n	8016b04 <_malloc_r+0x48>
 8016b64:	6025      	str	r5, [r4, #0]
 8016b66:	e7db      	b.n	8016b20 <_malloc_r+0x64>
 8016b68:	2003746c 	.word	0x2003746c
 8016b6c:	20037470 	.word	0x20037470

08016b70 <__ssputs_r>:
 8016b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b74:	688e      	ldr	r6, [r1, #8]
 8016b76:	429e      	cmp	r6, r3
 8016b78:	4682      	mov	sl, r0
 8016b7a:	460c      	mov	r4, r1
 8016b7c:	4690      	mov	r8, r2
 8016b7e:	4699      	mov	r9, r3
 8016b80:	d837      	bhi.n	8016bf2 <__ssputs_r+0x82>
 8016b82:	898a      	ldrh	r2, [r1, #12]
 8016b84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b88:	d031      	beq.n	8016bee <__ssputs_r+0x7e>
 8016b8a:	6825      	ldr	r5, [r4, #0]
 8016b8c:	6909      	ldr	r1, [r1, #16]
 8016b8e:	1a6f      	subs	r7, r5, r1
 8016b90:	6965      	ldr	r5, [r4, #20]
 8016b92:	2302      	movs	r3, #2
 8016b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b98:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b9c:	f109 0301 	add.w	r3, r9, #1
 8016ba0:	443b      	add	r3, r7
 8016ba2:	429d      	cmp	r5, r3
 8016ba4:	bf38      	it	cc
 8016ba6:	461d      	movcc	r5, r3
 8016ba8:	0553      	lsls	r3, r2, #21
 8016baa:	d530      	bpl.n	8016c0e <__ssputs_r+0x9e>
 8016bac:	4629      	mov	r1, r5
 8016bae:	f7ff ff85 	bl	8016abc <_malloc_r>
 8016bb2:	4606      	mov	r6, r0
 8016bb4:	b950      	cbnz	r0, 8016bcc <__ssputs_r+0x5c>
 8016bb6:	230c      	movs	r3, #12
 8016bb8:	f8ca 3000 	str.w	r3, [sl]
 8016bbc:	89a3      	ldrh	r3, [r4, #12]
 8016bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bc2:	81a3      	strh	r3, [r4, #12]
 8016bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bcc:	463a      	mov	r2, r7
 8016bce:	6921      	ldr	r1, [r4, #16]
 8016bd0:	f7fc f81e 	bl	8012c10 <memcpy>
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bde:	81a3      	strh	r3, [r4, #12]
 8016be0:	6126      	str	r6, [r4, #16]
 8016be2:	6165      	str	r5, [r4, #20]
 8016be4:	443e      	add	r6, r7
 8016be6:	1bed      	subs	r5, r5, r7
 8016be8:	6026      	str	r6, [r4, #0]
 8016bea:	60a5      	str	r5, [r4, #8]
 8016bec:	464e      	mov	r6, r9
 8016bee:	454e      	cmp	r6, r9
 8016bf0:	d900      	bls.n	8016bf4 <__ssputs_r+0x84>
 8016bf2:	464e      	mov	r6, r9
 8016bf4:	4632      	mov	r2, r6
 8016bf6:	4641      	mov	r1, r8
 8016bf8:	6820      	ldr	r0, [r4, #0]
 8016bfa:	f000 fedf 	bl	80179bc <memmove>
 8016bfe:	68a3      	ldr	r3, [r4, #8]
 8016c00:	1b9b      	subs	r3, r3, r6
 8016c02:	60a3      	str	r3, [r4, #8]
 8016c04:	6823      	ldr	r3, [r4, #0]
 8016c06:	441e      	add	r6, r3
 8016c08:	6026      	str	r6, [r4, #0]
 8016c0a:	2000      	movs	r0, #0
 8016c0c:	e7dc      	b.n	8016bc8 <__ssputs_r+0x58>
 8016c0e:	462a      	mov	r2, r5
 8016c10:	f000 feef 	bl	80179f2 <_realloc_r>
 8016c14:	4606      	mov	r6, r0
 8016c16:	2800      	cmp	r0, #0
 8016c18:	d1e2      	bne.n	8016be0 <__ssputs_r+0x70>
 8016c1a:	6921      	ldr	r1, [r4, #16]
 8016c1c:	4650      	mov	r0, sl
 8016c1e:	f7ff feff 	bl	8016a20 <_free_r>
 8016c22:	e7c8      	b.n	8016bb6 <__ssputs_r+0x46>

08016c24 <_svfiprintf_r>:
 8016c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c28:	461d      	mov	r5, r3
 8016c2a:	898b      	ldrh	r3, [r1, #12]
 8016c2c:	061f      	lsls	r7, r3, #24
 8016c2e:	b09d      	sub	sp, #116	; 0x74
 8016c30:	4680      	mov	r8, r0
 8016c32:	460c      	mov	r4, r1
 8016c34:	4616      	mov	r6, r2
 8016c36:	d50f      	bpl.n	8016c58 <_svfiprintf_r+0x34>
 8016c38:	690b      	ldr	r3, [r1, #16]
 8016c3a:	b96b      	cbnz	r3, 8016c58 <_svfiprintf_r+0x34>
 8016c3c:	2140      	movs	r1, #64	; 0x40
 8016c3e:	f7ff ff3d 	bl	8016abc <_malloc_r>
 8016c42:	6020      	str	r0, [r4, #0]
 8016c44:	6120      	str	r0, [r4, #16]
 8016c46:	b928      	cbnz	r0, 8016c54 <_svfiprintf_r+0x30>
 8016c48:	230c      	movs	r3, #12
 8016c4a:	f8c8 3000 	str.w	r3, [r8]
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c52:	e0c8      	b.n	8016de6 <_svfiprintf_r+0x1c2>
 8016c54:	2340      	movs	r3, #64	; 0x40
 8016c56:	6163      	str	r3, [r4, #20]
 8016c58:	2300      	movs	r3, #0
 8016c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c5c:	2320      	movs	r3, #32
 8016c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c62:	2330      	movs	r3, #48	; 0x30
 8016c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c68:	9503      	str	r5, [sp, #12]
 8016c6a:	f04f 0b01 	mov.w	fp, #1
 8016c6e:	4637      	mov	r7, r6
 8016c70:	463d      	mov	r5, r7
 8016c72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c76:	b10b      	cbz	r3, 8016c7c <_svfiprintf_r+0x58>
 8016c78:	2b25      	cmp	r3, #37	; 0x25
 8016c7a:	d13e      	bne.n	8016cfa <_svfiprintf_r+0xd6>
 8016c7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c80:	d00b      	beq.n	8016c9a <_svfiprintf_r+0x76>
 8016c82:	4653      	mov	r3, sl
 8016c84:	4632      	mov	r2, r6
 8016c86:	4621      	mov	r1, r4
 8016c88:	4640      	mov	r0, r8
 8016c8a:	f7ff ff71 	bl	8016b70 <__ssputs_r>
 8016c8e:	3001      	adds	r0, #1
 8016c90:	f000 80a4 	beq.w	8016ddc <_svfiprintf_r+0x1b8>
 8016c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c96:	4453      	add	r3, sl
 8016c98:	9309      	str	r3, [sp, #36]	; 0x24
 8016c9a:	783b      	ldrb	r3, [r7, #0]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	f000 809d 	beq.w	8016ddc <_svfiprintf_r+0x1b8>
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cac:	9304      	str	r3, [sp, #16]
 8016cae:	9307      	str	r3, [sp, #28]
 8016cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8016cb6:	462f      	mov	r7, r5
 8016cb8:	2205      	movs	r2, #5
 8016cba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016cbe:	4850      	ldr	r0, [pc, #320]	; (8016e00 <_svfiprintf_r+0x1dc>)
 8016cc0:	f7e9 faa6 	bl	8000210 <memchr>
 8016cc4:	9b04      	ldr	r3, [sp, #16]
 8016cc6:	b9d0      	cbnz	r0, 8016cfe <_svfiprintf_r+0xda>
 8016cc8:	06d9      	lsls	r1, r3, #27
 8016cca:	bf44      	itt	mi
 8016ccc:	2220      	movmi	r2, #32
 8016cce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cd2:	071a      	lsls	r2, r3, #28
 8016cd4:	bf44      	itt	mi
 8016cd6:	222b      	movmi	r2, #43	; 0x2b
 8016cd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cdc:	782a      	ldrb	r2, [r5, #0]
 8016cde:	2a2a      	cmp	r2, #42	; 0x2a
 8016ce0:	d015      	beq.n	8016d0e <_svfiprintf_r+0xea>
 8016ce2:	9a07      	ldr	r2, [sp, #28]
 8016ce4:	462f      	mov	r7, r5
 8016ce6:	2000      	movs	r0, #0
 8016ce8:	250a      	movs	r5, #10
 8016cea:	4639      	mov	r1, r7
 8016cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cf0:	3b30      	subs	r3, #48	; 0x30
 8016cf2:	2b09      	cmp	r3, #9
 8016cf4:	d94d      	bls.n	8016d92 <_svfiprintf_r+0x16e>
 8016cf6:	b1b8      	cbz	r0, 8016d28 <_svfiprintf_r+0x104>
 8016cf8:	e00f      	b.n	8016d1a <_svfiprintf_r+0xf6>
 8016cfa:	462f      	mov	r7, r5
 8016cfc:	e7b8      	b.n	8016c70 <_svfiprintf_r+0x4c>
 8016cfe:	4a40      	ldr	r2, [pc, #256]	; (8016e00 <_svfiprintf_r+0x1dc>)
 8016d00:	1a80      	subs	r0, r0, r2
 8016d02:	fa0b f000 	lsl.w	r0, fp, r0
 8016d06:	4318      	orrs	r0, r3
 8016d08:	9004      	str	r0, [sp, #16]
 8016d0a:	463d      	mov	r5, r7
 8016d0c:	e7d3      	b.n	8016cb6 <_svfiprintf_r+0x92>
 8016d0e:	9a03      	ldr	r2, [sp, #12]
 8016d10:	1d11      	adds	r1, r2, #4
 8016d12:	6812      	ldr	r2, [r2, #0]
 8016d14:	9103      	str	r1, [sp, #12]
 8016d16:	2a00      	cmp	r2, #0
 8016d18:	db01      	blt.n	8016d1e <_svfiprintf_r+0xfa>
 8016d1a:	9207      	str	r2, [sp, #28]
 8016d1c:	e004      	b.n	8016d28 <_svfiprintf_r+0x104>
 8016d1e:	4252      	negs	r2, r2
 8016d20:	f043 0302 	orr.w	r3, r3, #2
 8016d24:	9207      	str	r2, [sp, #28]
 8016d26:	9304      	str	r3, [sp, #16]
 8016d28:	783b      	ldrb	r3, [r7, #0]
 8016d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8016d2c:	d10c      	bne.n	8016d48 <_svfiprintf_r+0x124>
 8016d2e:	787b      	ldrb	r3, [r7, #1]
 8016d30:	2b2a      	cmp	r3, #42	; 0x2a
 8016d32:	d133      	bne.n	8016d9c <_svfiprintf_r+0x178>
 8016d34:	9b03      	ldr	r3, [sp, #12]
 8016d36:	1d1a      	adds	r2, r3, #4
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	9203      	str	r2, [sp, #12]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	bfb8      	it	lt
 8016d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d44:	3702      	adds	r7, #2
 8016d46:	9305      	str	r3, [sp, #20]
 8016d48:	4d2e      	ldr	r5, [pc, #184]	; (8016e04 <_svfiprintf_r+0x1e0>)
 8016d4a:	7839      	ldrb	r1, [r7, #0]
 8016d4c:	2203      	movs	r2, #3
 8016d4e:	4628      	mov	r0, r5
 8016d50:	f7e9 fa5e 	bl	8000210 <memchr>
 8016d54:	b138      	cbz	r0, 8016d66 <_svfiprintf_r+0x142>
 8016d56:	2340      	movs	r3, #64	; 0x40
 8016d58:	1b40      	subs	r0, r0, r5
 8016d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8016d5e:	9b04      	ldr	r3, [sp, #16]
 8016d60:	4303      	orrs	r3, r0
 8016d62:	3701      	adds	r7, #1
 8016d64:	9304      	str	r3, [sp, #16]
 8016d66:	7839      	ldrb	r1, [r7, #0]
 8016d68:	4827      	ldr	r0, [pc, #156]	; (8016e08 <_svfiprintf_r+0x1e4>)
 8016d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d6e:	2206      	movs	r2, #6
 8016d70:	1c7e      	adds	r6, r7, #1
 8016d72:	f7e9 fa4d 	bl	8000210 <memchr>
 8016d76:	2800      	cmp	r0, #0
 8016d78:	d038      	beq.n	8016dec <_svfiprintf_r+0x1c8>
 8016d7a:	4b24      	ldr	r3, [pc, #144]	; (8016e0c <_svfiprintf_r+0x1e8>)
 8016d7c:	bb13      	cbnz	r3, 8016dc4 <_svfiprintf_r+0x1a0>
 8016d7e:	9b03      	ldr	r3, [sp, #12]
 8016d80:	3307      	adds	r3, #7
 8016d82:	f023 0307 	bic.w	r3, r3, #7
 8016d86:	3308      	adds	r3, #8
 8016d88:	9303      	str	r3, [sp, #12]
 8016d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d8c:	444b      	add	r3, r9
 8016d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d90:	e76d      	b.n	8016c6e <_svfiprintf_r+0x4a>
 8016d92:	fb05 3202 	mla	r2, r5, r2, r3
 8016d96:	2001      	movs	r0, #1
 8016d98:	460f      	mov	r7, r1
 8016d9a:	e7a6      	b.n	8016cea <_svfiprintf_r+0xc6>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	3701      	adds	r7, #1
 8016da0:	9305      	str	r3, [sp, #20]
 8016da2:	4619      	mov	r1, r3
 8016da4:	250a      	movs	r5, #10
 8016da6:	4638      	mov	r0, r7
 8016da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dac:	3a30      	subs	r2, #48	; 0x30
 8016dae:	2a09      	cmp	r2, #9
 8016db0:	d903      	bls.n	8016dba <_svfiprintf_r+0x196>
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d0c8      	beq.n	8016d48 <_svfiprintf_r+0x124>
 8016db6:	9105      	str	r1, [sp, #20]
 8016db8:	e7c6      	b.n	8016d48 <_svfiprintf_r+0x124>
 8016dba:	fb05 2101 	mla	r1, r5, r1, r2
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	4607      	mov	r7, r0
 8016dc2:	e7f0      	b.n	8016da6 <_svfiprintf_r+0x182>
 8016dc4:	ab03      	add	r3, sp, #12
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	4622      	mov	r2, r4
 8016dca:	4b11      	ldr	r3, [pc, #68]	; (8016e10 <_svfiprintf_r+0x1ec>)
 8016dcc:	a904      	add	r1, sp, #16
 8016dce:	4640      	mov	r0, r8
 8016dd0:	f7fb ffc6 	bl	8012d60 <_printf_float>
 8016dd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016dd8:	4681      	mov	r9, r0
 8016dda:	d1d6      	bne.n	8016d8a <_svfiprintf_r+0x166>
 8016ddc:	89a3      	ldrh	r3, [r4, #12]
 8016dde:	065b      	lsls	r3, r3, #25
 8016de0:	f53f af35 	bmi.w	8016c4e <_svfiprintf_r+0x2a>
 8016de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016de6:	b01d      	add	sp, #116	; 0x74
 8016de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dec:	ab03      	add	r3, sp, #12
 8016dee:	9300      	str	r3, [sp, #0]
 8016df0:	4622      	mov	r2, r4
 8016df2:	4b07      	ldr	r3, [pc, #28]	; (8016e10 <_svfiprintf_r+0x1ec>)
 8016df4:	a904      	add	r1, sp, #16
 8016df6:	4640      	mov	r0, r8
 8016df8:	f7fc fa68 	bl	80132cc <_printf_i>
 8016dfc:	e7ea      	b.n	8016dd4 <_svfiprintf_r+0x1b0>
 8016dfe:	bf00      	nop
 8016e00:	0801842c 	.word	0x0801842c
 8016e04:	08018432 	.word	0x08018432
 8016e08:	08018436 	.word	0x08018436
 8016e0c:	08012d61 	.word	0x08012d61
 8016e10:	08016b71 	.word	0x08016b71

08016e14 <_sungetc_r>:
 8016e14:	b538      	push	{r3, r4, r5, lr}
 8016e16:	1c4b      	adds	r3, r1, #1
 8016e18:	4614      	mov	r4, r2
 8016e1a:	d103      	bne.n	8016e24 <_sungetc_r+0x10>
 8016e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8016e20:	4628      	mov	r0, r5
 8016e22:	bd38      	pop	{r3, r4, r5, pc}
 8016e24:	8993      	ldrh	r3, [r2, #12]
 8016e26:	f023 0320 	bic.w	r3, r3, #32
 8016e2a:	8193      	strh	r3, [r2, #12]
 8016e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e2e:	6852      	ldr	r2, [r2, #4]
 8016e30:	b2cd      	uxtb	r5, r1
 8016e32:	b18b      	cbz	r3, 8016e58 <_sungetc_r+0x44>
 8016e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e36:	4293      	cmp	r3, r2
 8016e38:	dd08      	ble.n	8016e4c <_sungetc_r+0x38>
 8016e3a:	6823      	ldr	r3, [r4, #0]
 8016e3c:	1e5a      	subs	r2, r3, #1
 8016e3e:	6022      	str	r2, [r4, #0]
 8016e40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016e44:	6863      	ldr	r3, [r4, #4]
 8016e46:	3301      	adds	r3, #1
 8016e48:	6063      	str	r3, [r4, #4]
 8016e4a:	e7e9      	b.n	8016e20 <_sungetc_r+0xc>
 8016e4c:	4621      	mov	r1, r4
 8016e4e:	f000 fd4b 	bl	80178e8 <__submore>
 8016e52:	2800      	cmp	r0, #0
 8016e54:	d0f1      	beq.n	8016e3a <_sungetc_r+0x26>
 8016e56:	e7e1      	b.n	8016e1c <_sungetc_r+0x8>
 8016e58:	6921      	ldr	r1, [r4, #16]
 8016e5a:	6823      	ldr	r3, [r4, #0]
 8016e5c:	b151      	cbz	r1, 8016e74 <_sungetc_r+0x60>
 8016e5e:	4299      	cmp	r1, r3
 8016e60:	d208      	bcs.n	8016e74 <_sungetc_r+0x60>
 8016e62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016e66:	42a9      	cmp	r1, r5
 8016e68:	d104      	bne.n	8016e74 <_sungetc_r+0x60>
 8016e6a:	3b01      	subs	r3, #1
 8016e6c:	3201      	adds	r2, #1
 8016e6e:	6023      	str	r3, [r4, #0]
 8016e70:	6062      	str	r2, [r4, #4]
 8016e72:	e7d5      	b.n	8016e20 <_sungetc_r+0xc>
 8016e74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8016e7e:	2303      	movs	r3, #3
 8016e80:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e82:	4623      	mov	r3, r4
 8016e84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016e88:	6023      	str	r3, [r4, #0]
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	e7dc      	b.n	8016e48 <_sungetc_r+0x34>

08016e8e <__ssrefill_r>:
 8016e8e:	b510      	push	{r4, lr}
 8016e90:	460c      	mov	r4, r1
 8016e92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016e94:	b169      	cbz	r1, 8016eb2 <__ssrefill_r+0x24>
 8016e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e9a:	4299      	cmp	r1, r3
 8016e9c:	d001      	beq.n	8016ea2 <__ssrefill_r+0x14>
 8016e9e:	f7ff fdbf 	bl	8016a20 <_free_r>
 8016ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ea4:	6063      	str	r3, [r4, #4]
 8016ea6:	2000      	movs	r0, #0
 8016ea8:	6360      	str	r0, [r4, #52]	; 0x34
 8016eaa:	b113      	cbz	r3, 8016eb2 <__ssrefill_r+0x24>
 8016eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016eae:	6023      	str	r3, [r4, #0]
 8016eb0:	bd10      	pop	{r4, pc}
 8016eb2:	6923      	ldr	r3, [r4, #16]
 8016eb4:	6023      	str	r3, [r4, #0]
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	6063      	str	r3, [r4, #4]
 8016eba:	89a3      	ldrh	r3, [r4, #12]
 8016ebc:	f043 0320 	orr.w	r3, r3, #32
 8016ec0:	81a3      	strh	r3, [r4, #12]
 8016ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ec6:	e7f3      	b.n	8016eb0 <__ssrefill_r+0x22>

08016ec8 <__ssvfiscanf_r>:
 8016ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ecc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	2100      	movs	r1, #0
 8016ed4:	9144      	str	r1, [sp, #272]	; 0x110
 8016ed6:	9145      	str	r1, [sp, #276]	; 0x114
 8016ed8:	499f      	ldr	r1, [pc, #636]	; (8017158 <__ssvfiscanf_r+0x290>)
 8016eda:	91a0      	str	r1, [sp, #640]	; 0x280
 8016edc:	f10d 0804 	add.w	r8, sp, #4
 8016ee0:	499e      	ldr	r1, [pc, #632]	; (801715c <__ssvfiscanf_r+0x294>)
 8016ee2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017160 <__ssvfiscanf_r+0x298>
 8016ee6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016eea:	4606      	mov	r6, r0
 8016eec:	4692      	mov	sl, r2
 8016eee:	91a1      	str	r1, [sp, #644]	; 0x284
 8016ef0:	9300      	str	r3, [sp, #0]
 8016ef2:	270a      	movs	r7, #10
 8016ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	f000 812a 	beq.w	8017152 <__ssvfiscanf_r+0x28a>
 8016efe:	4655      	mov	r5, sl
 8016f00:	f7ff f8d2 	bl	80160a8 <__locale_ctype_ptr>
 8016f04:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016f08:	4458      	add	r0, fp
 8016f0a:	7843      	ldrb	r3, [r0, #1]
 8016f0c:	f013 0308 	ands.w	r3, r3, #8
 8016f10:	d01c      	beq.n	8016f4c <__ssvfiscanf_r+0x84>
 8016f12:	6863      	ldr	r3, [r4, #4]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	dd12      	ble.n	8016f3e <__ssvfiscanf_r+0x76>
 8016f18:	f7ff f8c6 	bl	80160a8 <__locale_ctype_ptr>
 8016f1c:	6823      	ldr	r3, [r4, #0]
 8016f1e:	781a      	ldrb	r2, [r3, #0]
 8016f20:	4410      	add	r0, r2
 8016f22:	7842      	ldrb	r2, [r0, #1]
 8016f24:	0712      	lsls	r2, r2, #28
 8016f26:	d401      	bmi.n	8016f2c <__ssvfiscanf_r+0x64>
 8016f28:	46aa      	mov	sl, r5
 8016f2a:	e7e3      	b.n	8016ef4 <__ssvfiscanf_r+0x2c>
 8016f2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016f2e:	3201      	adds	r2, #1
 8016f30:	9245      	str	r2, [sp, #276]	; 0x114
 8016f32:	6862      	ldr	r2, [r4, #4]
 8016f34:	3301      	adds	r3, #1
 8016f36:	3a01      	subs	r2, #1
 8016f38:	6062      	str	r2, [r4, #4]
 8016f3a:	6023      	str	r3, [r4, #0]
 8016f3c:	e7e9      	b.n	8016f12 <__ssvfiscanf_r+0x4a>
 8016f3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016f40:	4621      	mov	r1, r4
 8016f42:	4630      	mov	r0, r6
 8016f44:	4798      	blx	r3
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d0e6      	beq.n	8016f18 <__ssvfiscanf_r+0x50>
 8016f4a:	e7ed      	b.n	8016f28 <__ssvfiscanf_r+0x60>
 8016f4c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016f50:	f040 8082 	bne.w	8017058 <__ssvfiscanf_r+0x190>
 8016f54:	9343      	str	r3, [sp, #268]	; 0x10c
 8016f56:	9341      	str	r3, [sp, #260]	; 0x104
 8016f58:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f5e:	d103      	bne.n	8016f68 <__ssvfiscanf_r+0xa0>
 8016f60:	2310      	movs	r3, #16
 8016f62:	9341      	str	r3, [sp, #260]	; 0x104
 8016f64:	f10a 0502 	add.w	r5, sl, #2
 8016f68:	46aa      	mov	sl, r5
 8016f6a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016f6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016f72:	2a09      	cmp	r2, #9
 8016f74:	d922      	bls.n	8016fbc <__ssvfiscanf_r+0xf4>
 8016f76:	2203      	movs	r2, #3
 8016f78:	4879      	ldr	r0, [pc, #484]	; (8017160 <__ssvfiscanf_r+0x298>)
 8016f7a:	f7e9 f949 	bl	8000210 <memchr>
 8016f7e:	b138      	cbz	r0, 8016f90 <__ssvfiscanf_r+0xc8>
 8016f80:	eba0 0309 	sub.w	r3, r0, r9
 8016f84:	2001      	movs	r0, #1
 8016f86:	4098      	lsls	r0, r3
 8016f88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f8a:	4318      	orrs	r0, r3
 8016f8c:	9041      	str	r0, [sp, #260]	; 0x104
 8016f8e:	46aa      	mov	sl, r5
 8016f90:	f89a 3000 	ldrb.w	r3, [sl]
 8016f94:	2b67      	cmp	r3, #103	; 0x67
 8016f96:	f10a 0501 	add.w	r5, sl, #1
 8016f9a:	d82b      	bhi.n	8016ff4 <__ssvfiscanf_r+0x12c>
 8016f9c:	2b65      	cmp	r3, #101	; 0x65
 8016f9e:	f080 809f 	bcs.w	80170e0 <__ssvfiscanf_r+0x218>
 8016fa2:	2b47      	cmp	r3, #71	; 0x47
 8016fa4:	d810      	bhi.n	8016fc8 <__ssvfiscanf_r+0x100>
 8016fa6:	2b45      	cmp	r3, #69	; 0x45
 8016fa8:	f080 809a 	bcs.w	80170e0 <__ssvfiscanf_r+0x218>
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d06c      	beq.n	801708a <__ssvfiscanf_r+0x1c2>
 8016fb0:	2b25      	cmp	r3, #37	; 0x25
 8016fb2:	d051      	beq.n	8017058 <__ssvfiscanf_r+0x190>
 8016fb4:	2303      	movs	r3, #3
 8016fb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8016fb8:	9742      	str	r7, [sp, #264]	; 0x108
 8016fba:	e027      	b.n	801700c <__ssvfiscanf_r+0x144>
 8016fbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016fbe:	fb07 1303 	mla	r3, r7, r3, r1
 8016fc2:	3b30      	subs	r3, #48	; 0x30
 8016fc4:	9343      	str	r3, [sp, #268]	; 0x10c
 8016fc6:	e7cf      	b.n	8016f68 <__ssvfiscanf_r+0xa0>
 8016fc8:	2b5b      	cmp	r3, #91	; 0x5b
 8016fca:	d06a      	beq.n	80170a2 <__ssvfiscanf_r+0x1da>
 8016fcc:	d80c      	bhi.n	8016fe8 <__ssvfiscanf_r+0x120>
 8016fce:	2b58      	cmp	r3, #88	; 0x58
 8016fd0:	d1f0      	bne.n	8016fb4 <__ssvfiscanf_r+0xec>
 8016fd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016fd8:	9241      	str	r2, [sp, #260]	; 0x104
 8016fda:	2210      	movs	r2, #16
 8016fdc:	9242      	str	r2, [sp, #264]	; 0x108
 8016fde:	2b6e      	cmp	r3, #110	; 0x6e
 8016fe0:	bf8c      	ite	hi
 8016fe2:	2304      	movhi	r3, #4
 8016fe4:	2303      	movls	r3, #3
 8016fe6:	e010      	b.n	801700a <__ssvfiscanf_r+0x142>
 8016fe8:	2b63      	cmp	r3, #99	; 0x63
 8016fea:	d065      	beq.n	80170b8 <__ssvfiscanf_r+0x1f0>
 8016fec:	2b64      	cmp	r3, #100	; 0x64
 8016fee:	d1e1      	bne.n	8016fb4 <__ssvfiscanf_r+0xec>
 8016ff0:	9742      	str	r7, [sp, #264]	; 0x108
 8016ff2:	e7f4      	b.n	8016fde <__ssvfiscanf_r+0x116>
 8016ff4:	2b70      	cmp	r3, #112	; 0x70
 8016ff6:	d04b      	beq.n	8017090 <__ssvfiscanf_r+0x1c8>
 8016ff8:	d826      	bhi.n	8017048 <__ssvfiscanf_r+0x180>
 8016ffa:	2b6e      	cmp	r3, #110	; 0x6e
 8016ffc:	d062      	beq.n	80170c4 <__ssvfiscanf_r+0x1fc>
 8016ffe:	d84c      	bhi.n	801709a <__ssvfiscanf_r+0x1d2>
 8017000:	2b69      	cmp	r3, #105	; 0x69
 8017002:	d1d7      	bne.n	8016fb4 <__ssvfiscanf_r+0xec>
 8017004:	2300      	movs	r3, #0
 8017006:	9342      	str	r3, [sp, #264]	; 0x108
 8017008:	2303      	movs	r3, #3
 801700a:	9347      	str	r3, [sp, #284]	; 0x11c
 801700c:	6863      	ldr	r3, [r4, #4]
 801700e:	2b00      	cmp	r3, #0
 8017010:	dd68      	ble.n	80170e4 <__ssvfiscanf_r+0x21c>
 8017012:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017014:	0659      	lsls	r1, r3, #25
 8017016:	d407      	bmi.n	8017028 <__ssvfiscanf_r+0x160>
 8017018:	f7ff f846 	bl	80160a8 <__locale_ctype_ptr>
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	781a      	ldrb	r2, [r3, #0]
 8017020:	4410      	add	r0, r2
 8017022:	7842      	ldrb	r2, [r0, #1]
 8017024:	0712      	lsls	r2, r2, #28
 8017026:	d464      	bmi.n	80170f2 <__ssvfiscanf_r+0x22a>
 8017028:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801702a:	2b02      	cmp	r3, #2
 801702c:	dc73      	bgt.n	8017116 <__ssvfiscanf_r+0x24e>
 801702e:	466b      	mov	r3, sp
 8017030:	4622      	mov	r2, r4
 8017032:	a941      	add	r1, sp, #260	; 0x104
 8017034:	4630      	mov	r0, r6
 8017036:	f000 f9d7 	bl	80173e8 <_scanf_chars>
 801703a:	2801      	cmp	r0, #1
 801703c:	f000 8089 	beq.w	8017152 <__ssvfiscanf_r+0x28a>
 8017040:	2802      	cmp	r0, #2
 8017042:	f47f af71 	bne.w	8016f28 <__ssvfiscanf_r+0x60>
 8017046:	e01d      	b.n	8017084 <__ssvfiscanf_r+0x1bc>
 8017048:	2b75      	cmp	r3, #117	; 0x75
 801704a:	d0d1      	beq.n	8016ff0 <__ssvfiscanf_r+0x128>
 801704c:	2b78      	cmp	r3, #120	; 0x78
 801704e:	d0c0      	beq.n	8016fd2 <__ssvfiscanf_r+0x10a>
 8017050:	2b73      	cmp	r3, #115	; 0x73
 8017052:	d1af      	bne.n	8016fb4 <__ssvfiscanf_r+0xec>
 8017054:	2302      	movs	r3, #2
 8017056:	e7d8      	b.n	801700a <__ssvfiscanf_r+0x142>
 8017058:	6863      	ldr	r3, [r4, #4]
 801705a:	2b00      	cmp	r3, #0
 801705c:	dd0c      	ble.n	8017078 <__ssvfiscanf_r+0x1b0>
 801705e:	6823      	ldr	r3, [r4, #0]
 8017060:	781a      	ldrb	r2, [r3, #0]
 8017062:	455a      	cmp	r2, fp
 8017064:	d175      	bne.n	8017152 <__ssvfiscanf_r+0x28a>
 8017066:	3301      	adds	r3, #1
 8017068:	6862      	ldr	r2, [r4, #4]
 801706a:	6023      	str	r3, [r4, #0]
 801706c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801706e:	3a01      	subs	r2, #1
 8017070:	3301      	adds	r3, #1
 8017072:	6062      	str	r2, [r4, #4]
 8017074:	9345      	str	r3, [sp, #276]	; 0x114
 8017076:	e757      	b.n	8016f28 <__ssvfiscanf_r+0x60>
 8017078:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801707a:	4621      	mov	r1, r4
 801707c:	4630      	mov	r0, r6
 801707e:	4798      	blx	r3
 8017080:	2800      	cmp	r0, #0
 8017082:	d0ec      	beq.n	801705e <__ssvfiscanf_r+0x196>
 8017084:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017086:	2800      	cmp	r0, #0
 8017088:	d159      	bne.n	801713e <__ssvfiscanf_r+0x276>
 801708a:	f04f 30ff 	mov.w	r0, #4294967295
 801708e:	e05c      	b.n	801714a <__ssvfiscanf_r+0x282>
 8017090:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017092:	f042 0220 	orr.w	r2, r2, #32
 8017096:	9241      	str	r2, [sp, #260]	; 0x104
 8017098:	e79b      	b.n	8016fd2 <__ssvfiscanf_r+0x10a>
 801709a:	2308      	movs	r3, #8
 801709c:	9342      	str	r3, [sp, #264]	; 0x108
 801709e:	2304      	movs	r3, #4
 80170a0:	e7b3      	b.n	801700a <__ssvfiscanf_r+0x142>
 80170a2:	4629      	mov	r1, r5
 80170a4:	4640      	mov	r0, r8
 80170a6:	f000 fb4f 	bl	8017748 <__sccl>
 80170aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170b0:	9341      	str	r3, [sp, #260]	; 0x104
 80170b2:	4605      	mov	r5, r0
 80170b4:	2301      	movs	r3, #1
 80170b6:	e7a8      	b.n	801700a <__ssvfiscanf_r+0x142>
 80170b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170be:	9341      	str	r3, [sp, #260]	; 0x104
 80170c0:	2300      	movs	r3, #0
 80170c2:	e7a2      	b.n	801700a <__ssvfiscanf_r+0x142>
 80170c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80170c6:	06c3      	lsls	r3, r0, #27
 80170c8:	f53f af2e 	bmi.w	8016f28 <__ssvfiscanf_r+0x60>
 80170cc:	9b00      	ldr	r3, [sp, #0]
 80170ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170d0:	1d19      	adds	r1, r3, #4
 80170d2:	9100      	str	r1, [sp, #0]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	07c0      	lsls	r0, r0, #31
 80170d8:	bf4c      	ite	mi
 80170da:	801a      	strhmi	r2, [r3, #0]
 80170dc:	601a      	strpl	r2, [r3, #0]
 80170de:	e723      	b.n	8016f28 <__ssvfiscanf_r+0x60>
 80170e0:	2305      	movs	r3, #5
 80170e2:	e792      	b.n	801700a <__ssvfiscanf_r+0x142>
 80170e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170e6:	4621      	mov	r1, r4
 80170e8:	4630      	mov	r0, r6
 80170ea:	4798      	blx	r3
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d090      	beq.n	8017012 <__ssvfiscanf_r+0x14a>
 80170f0:	e7c8      	b.n	8017084 <__ssvfiscanf_r+0x1bc>
 80170f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170f4:	3201      	adds	r2, #1
 80170f6:	9245      	str	r2, [sp, #276]	; 0x114
 80170f8:	6862      	ldr	r2, [r4, #4]
 80170fa:	3a01      	subs	r2, #1
 80170fc:	2a00      	cmp	r2, #0
 80170fe:	6062      	str	r2, [r4, #4]
 8017100:	dd02      	ble.n	8017108 <__ssvfiscanf_r+0x240>
 8017102:	3301      	adds	r3, #1
 8017104:	6023      	str	r3, [r4, #0]
 8017106:	e787      	b.n	8017018 <__ssvfiscanf_r+0x150>
 8017108:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801710a:	4621      	mov	r1, r4
 801710c:	4630      	mov	r0, r6
 801710e:	4798      	blx	r3
 8017110:	2800      	cmp	r0, #0
 8017112:	d081      	beq.n	8017018 <__ssvfiscanf_r+0x150>
 8017114:	e7b6      	b.n	8017084 <__ssvfiscanf_r+0x1bc>
 8017116:	2b04      	cmp	r3, #4
 8017118:	dc06      	bgt.n	8017128 <__ssvfiscanf_r+0x260>
 801711a:	466b      	mov	r3, sp
 801711c:	4622      	mov	r2, r4
 801711e:	a941      	add	r1, sp, #260	; 0x104
 8017120:	4630      	mov	r0, r6
 8017122:	f000 f9c5 	bl	80174b0 <_scanf_i>
 8017126:	e788      	b.n	801703a <__ssvfiscanf_r+0x172>
 8017128:	4b0e      	ldr	r3, [pc, #56]	; (8017164 <__ssvfiscanf_r+0x29c>)
 801712a:	2b00      	cmp	r3, #0
 801712c:	f43f aefc 	beq.w	8016f28 <__ssvfiscanf_r+0x60>
 8017130:	466b      	mov	r3, sp
 8017132:	4622      	mov	r2, r4
 8017134:	a941      	add	r1, sp, #260	; 0x104
 8017136:	4630      	mov	r0, r6
 8017138:	f7fc f9da 	bl	80134f0 <_scanf_float>
 801713c:	e77d      	b.n	801703a <__ssvfiscanf_r+0x172>
 801713e:	89a3      	ldrh	r3, [r4, #12]
 8017140:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017144:	bf18      	it	ne
 8017146:	f04f 30ff 	movne.w	r0, #4294967295
 801714a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017152:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017154:	e7f9      	b.n	801714a <__ssvfiscanf_r+0x282>
 8017156:	bf00      	nop
 8017158:	08016e15 	.word	0x08016e15
 801715c:	08016e8f 	.word	0x08016e8f
 8017160:	08018432 	.word	0x08018432
 8017164:	080134f1 	.word	0x080134f1

08017168 <__sfputc_r>:
 8017168:	6893      	ldr	r3, [r2, #8]
 801716a:	3b01      	subs	r3, #1
 801716c:	2b00      	cmp	r3, #0
 801716e:	b410      	push	{r4}
 8017170:	6093      	str	r3, [r2, #8]
 8017172:	da08      	bge.n	8017186 <__sfputc_r+0x1e>
 8017174:	6994      	ldr	r4, [r2, #24]
 8017176:	42a3      	cmp	r3, r4
 8017178:	db01      	blt.n	801717e <__sfputc_r+0x16>
 801717a:	290a      	cmp	r1, #10
 801717c:	d103      	bne.n	8017186 <__sfputc_r+0x1e>
 801717e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017182:	f7fd bbc7 	b.w	8014914 <__swbuf_r>
 8017186:	6813      	ldr	r3, [r2, #0]
 8017188:	1c58      	adds	r0, r3, #1
 801718a:	6010      	str	r0, [r2, #0]
 801718c:	7019      	strb	r1, [r3, #0]
 801718e:	4608      	mov	r0, r1
 8017190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017194:	4770      	bx	lr

08017196 <__sfputs_r>:
 8017196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017198:	4606      	mov	r6, r0
 801719a:	460f      	mov	r7, r1
 801719c:	4614      	mov	r4, r2
 801719e:	18d5      	adds	r5, r2, r3
 80171a0:	42ac      	cmp	r4, r5
 80171a2:	d101      	bne.n	80171a8 <__sfputs_r+0x12>
 80171a4:	2000      	movs	r0, #0
 80171a6:	e007      	b.n	80171b8 <__sfputs_r+0x22>
 80171a8:	463a      	mov	r2, r7
 80171aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171ae:	4630      	mov	r0, r6
 80171b0:	f7ff ffda 	bl	8017168 <__sfputc_r>
 80171b4:	1c43      	adds	r3, r0, #1
 80171b6:	d1f3      	bne.n	80171a0 <__sfputs_r+0xa>
 80171b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080171bc <_vfiprintf_r>:
 80171bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c0:	460c      	mov	r4, r1
 80171c2:	b09d      	sub	sp, #116	; 0x74
 80171c4:	4617      	mov	r7, r2
 80171c6:	461d      	mov	r5, r3
 80171c8:	4606      	mov	r6, r0
 80171ca:	b118      	cbz	r0, 80171d4 <_vfiprintf_r+0x18>
 80171cc:	6983      	ldr	r3, [r0, #24]
 80171ce:	b90b      	cbnz	r3, 80171d4 <_vfiprintf_r+0x18>
 80171d0:	f7fe fbb6 	bl	8015940 <__sinit>
 80171d4:	4b7c      	ldr	r3, [pc, #496]	; (80173c8 <_vfiprintf_r+0x20c>)
 80171d6:	429c      	cmp	r4, r3
 80171d8:	d158      	bne.n	801728c <_vfiprintf_r+0xd0>
 80171da:	6874      	ldr	r4, [r6, #4]
 80171dc:	89a3      	ldrh	r3, [r4, #12]
 80171de:	0718      	lsls	r0, r3, #28
 80171e0:	d55e      	bpl.n	80172a0 <_vfiprintf_r+0xe4>
 80171e2:	6923      	ldr	r3, [r4, #16]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d05b      	beq.n	80172a0 <_vfiprintf_r+0xe4>
 80171e8:	2300      	movs	r3, #0
 80171ea:	9309      	str	r3, [sp, #36]	; 0x24
 80171ec:	2320      	movs	r3, #32
 80171ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171f2:	2330      	movs	r3, #48	; 0x30
 80171f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171f8:	9503      	str	r5, [sp, #12]
 80171fa:	f04f 0b01 	mov.w	fp, #1
 80171fe:	46b8      	mov	r8, r7
 8017200:	4645      	mov	r5, r8
 8017202:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017206:	b10b      	cbz	r3, 801720c <_vfiprintf_r+0x50>
 8017208:	2b25      	cmp	r3, #37	; 0x25
 801720a:	d154      	bne.n	80172b6 <_vfiprintf_r+0xfa>
 801720c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017210:	d00b      	beq.n	801722a <_vfiprintf_r+0x6e>
 8017212:	4653      	mov	r3, sl
 8017214:	463a      	mov	r2, r7
 8017216:	4621      	mov	r1, r4
 8017218:	4630      	mov	r0, r6
 801721a:	f7ff ffbc 	bl	8017196 <__sfputs_r>
 801721e:	3001      	adds	r0, #1
 8017220:	f000 80c2 	beq.w	80173a8 <_vfiprintf_r+0x1ec>
 8017224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017226:	4453      	add	r3, sl
 8017228:	9309      	str	r3, [sp, #36]	; 0x24
 801722a:	f898 3000 	ldrb.w	r3, [r8]
 801722e:	2b00      	cmp	r3, #0
 8017230:	f000 80ba 	beq.w	80173a8 <_vfiprintf_r+0x1ec>
 8017234:	2300      	movs	r3, #0
 8017236:	f04f 32ff 	mov.w	r2, #4294967295
 801723a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801723e:	9304      	str	r3, [sp, #16]
 8017240:	9307      	str	r3, [sp, #28]
 8017242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017246:	931a      	str	r3, [sp, #104]	; 0x68
 8017248:	46a8      	mov	r8, r5
 801724a:	2205      	movs	r2, #5
 801724c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017250:	485e      	ldr	r0, [pc, #376]	; (80173cc <_vfiprintf_r+0x210>)
 8017252:	f7e8 ffdd 	bl	8000210 <memchr>
 8017256:	9b04      	ldr	r3, [sp, #16]
 8017258:	bb78      	cbnz	r0, 80172ba <_vfiprintf_r+0xfe>
 801725a:	06d9      	lsls	r1, r3, #27
 801725c:	bf44      	itt	mi
 801725e:	2220      	movmi	r2, #32
 8017260:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017264:	071a      	lsls	r2, r3, #28
 8017266:	bf44      	itt	mi
 8017268:	222b      	movmi	r2, #43	; 0x2b
 801726a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801726e:	782a      	ldrb	r2, [r5, #0]
 8017270:	2a2a      	cmp	r2, #42	; 0x2a
 8017272:	d02a      	beq.n	80172ca <_vfiprintf_r+0x10e>
 8017274:	9a07      	ldr	r2, [sp, #28]
 8017276:	46a8      	mov	r8, r5
 8017278:	2000      	movs	r0, #0
 801727a:	250a      	movs	r5, #10
 801727c:	4641      	mov	r1, r8
 801727e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017282:	3b30      	subs	r3, #48	; 0x30
 8017284:	2b09      	cmp	r3, #9
 8017286:	d969      	bls.n	801735c <_vfiprintf_r+0x1a0>
 8017288:	b360      	cbz	r0, 80172e4 <_vfiprintf_r+0x128>
 801728a:	e024      	b.n	80172d6 <_vfiprintf_r+0x11a>
 801728c:	4b50      	ldr	r3, [pc, #320]	; (80173d0 <_vfiprintf_r+0x214>)
 801728e:	429c      	cmp	r4, r3
 8017290:	d101      	bne.n	8017296 <_vfiprintf_r+0xda>
 8017292:	68b4      	ldr	r4, [r6, #8]
 8017294:	e7a2      	b.n	80171dc <_vfiprintf_r+0x20>
 8017296:	4b4f      	ldr	r3, [pc, #316]	; (80173d4 <_vfiprintf_r+0x218>)
 8017298:	429c      	cmp	r4, r3
 801729a:	bf08      	it	eq
 801729c:	68f4      	ldreq	r4, [r6, #12]
 801729e:	e79d      	b.n	80171dc <_vfiprintf_r+0x20>
 80172a0:	4621      	mov	r1, r4
 80172a2:	4630      	mov	r0, r6
 80172a4:	f7fd fb9a 	bl	80149dc <__swsetup_r>
 80172a8:	2800      	cmp	r0, #0
 80172aa:	d09d      	beq.n	80171e8 <_vfiprintf_r+0x2c>
 80172ac:	f04f 30ff 	mov.w	r0, #4294967295
 80172b0:	b01d      	add	sp, #116	; 0x74
 80172b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b6:	46a8      	mov	r8, r5
 80172b8:	e7a2      	b.n	8017200 <_vfiprintf_r+0x44>
 80172ba:	4a44      	ldr	r2, [pc, #272]	; (80173cc <_vfiprintf_r+0x210>)
 80172bc:	1a80      	subs	r0, r0, r2
 80172be:	fa0b f000 	lsl.w	r0, fp, r0
 80172c2:	4318      	orrs	r0, r3
 80172c4:	9004      	str	r0, [sp, #16]
 80172c6:	4645      	mov	r5, r8
 80172c8:	e7be      	b.n	8017248 <_vfiprintf_r+0x8c>
 80172ca:	9a03      	ldr	r2, [sp, #12]
 80172cc:	1d11      	adds	r1, r2, #4
 80172ce:	6812      	ldr	r2, [r2, #0]
 80172d0:	9103      	str	r1, [sp, #12]
 80172d2:	2a00      	cmp	r2, #0
 80172d4:	db01      	blt.n	80172da <_vfiprintf_r+0x11e>
 80172d6:	9207      	str	r2, [sp, #28]
 80172d8:	e004      	b.n	80172e4 <_vfiprintf_r+0x128>
 80172da:	4252      	negs	r2, r2
 80172dc:	f043 0302 	orr.w	r3, r3, #2
 80172e0:	9207      	str	r2, [sp, #28]
 80172e2:	9304      	str	r3, [sp, #16]
 80172e4:	f898 3000 	ldrb.w	r3, [r8]
 80172e8:	2b2e      	cmp	r3, #46	; 0x2e
 80172ea:	d10e      	bne.n	801730a <_vfiprintf_r+0x14e>
 80172ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80172f0:	2b2a      	cmp	r3, #42	; 0x2a
 80172f2:	d138      	bne.n	8017366 <_vfiprintf_r+0x1aa>
 80172f4:	9b03      	ldr	r3, [sp, #12]
 80172f6:	1d1a      	adds	r2, r3, #4
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	9203      	str	r2, [sp, #12]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	bfb8      	it	lt
 8017300:	f04f 33ff 	movlt.w	r3, #4294967295
 8017304:	f108 0802 	add.w	r8, r8, #2
 8017308:	9305      	str	r3, [sp, #20]
 801730a:	4d33      	ldr	r5, [pc, #204]	; (80173d8 <_vfiprintf_r+0x21c>)
 801730c:	f898 1000 	ldrb.w	r1, [r8]
 8017310:	2203      	movs	r2, #3
 8017312:	4628      	mov	r0, r5
 8017314:	f7e8 ff7c 	bl	8000210 <memchr>
 8017318:	b140      	cbz	r0, 801732c <_vfiprintf_r+0x170>
 801731a:	2340      	movs	r3, #64	; 0x40
 801731c:	1b40      	subs	r0, r0, r5
 801731e:	fa03 f000 	lsl.w	r0, r3, r0
 8017322:	9b04      	ldr	r3, [sp, #16]
 8017324:	4303      	orrs	r3, r0
 8017326:	f108 0801 	add.w	r8, r8, #1
 801732a:	9304      	str	r3, [sp, #16]
 801732c:	f898 1000 	ldrb.w	r1, [r8]
 8017330:	482a      	ldr	r0, [pc, #168]	; (80173dc <_vfiprintf_r+0x220>)
 8017332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017336:	2206      	movs	r2, #6
 8017338:	f108 0701 	add.w	r7, r8, #1
 801733c:	f7e8 ff68 	bl	8000210 <memchr>
 8017340:	2800      	cmp	r0, #0
 8017342:	d037      	beq.n	80173b4 <_vfiprintf_r+0x1f8>
 8017344:	4b26      	ldr	r3, [pc, #152]	; (80173e0 <_vfiprintf_r+0x224>)
 8017346:	bb1b      	cbnz	r3, 8017390 <_vfiprintf_r+0x1d4>
 8017348:	9b03      	ldr	r3, [sp, #12]
 801734a:	3307      	adds	r3, #7
 801734c:	f023 0307 	bic.w	r3, r3, #7
 8017350:	3308      	adds	r3, #8
 8017352:	9303      	str	r3, [sp, #12]
 8017354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017356:	444b      	add	r3, r9
 8017358:	9309      	str	r3, [sp, #36]	; 0x24
 801735a:	e750      	b.n	80171fe <_vfiprintf_r+0x42>
 801735c:	fb05 3202 	mla	r2, r5, r2, r3
 8017360:	2001      	movs	r0, #1
 8017362:	4688      	mov	r8, r1
 8017364:	e78a      	b.n	801727c <_vfiprintf_r+0xc0>
 8017366:	2300      	movs	r3, #0
 8017368:	f108 0801 	add.w	r8, r8, #1
 801736c:	9305      	str	r3, [sp, #20]
 801736e:	4619      	mov	r1, r3
 8017370:	250a      	movs	r5, #10
 8017372:	4640      	mov	r0, r8
 8017374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017378:	3a30      	subs	r2, #48	; 0x30
 801737a:	2a09      	cmp	r2, #9
 801737c:	d903      	bls.n	8017386 <_vfiprintf_r+0x1ca>
 801737e:	2b00      	cmp	r3, #0
 8017380:	d0c3      	beq.n	801730a <_vfiprintf_r+0x14e>
 8017382:	9105      	str	r1, [sp, #20]
 8017384:	e7c1      	b.n	801730a <_vfiprintf_r+0x14e>
 8017386:	fb05 2101 	mla	r1, r5, r1, r2
 801738a:	2301      	movs	r3, #1
 801738c:	4680      	mov	r8, r0
 801738e:	e7f0      	b.n	8017372 <_vfiprintf_r+0x1b6>
 8017390:	ab03      	add	r3, sp, #12
 8017392:	9300      	str	r3, [sp, #0]
 8017394:	4622      	mov	r2, r4
 8017396:	4b13      	ldr	r3, [pc, #76]	; (80173e4 <_vfiprintf_r+0x228>)
 8017398:	a904      	add	r1, sp, #16
 801739a:	4630      	mov	r0, r6
 801739c:	f7fb fce0 	bl	8012d60 <_printf_float>
 80173a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80173a4:	4681      	mov	r9, r0
 80173a6:	d1d5      	bne.n	8017354 <_vfiprintf_r+0x198>
 80173a8:	89a3      	ldrh	r3, [r4, #12]
 80173aa:	065b      	lsls	r3, r3, #25
 80173ac:	f53f af7e 	bmi.w	80172ac <_vfiprintf_r+0xf0>
 80173b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173b2:	e77d      	b.n	80172b0 <_vfiprintf_r+0xf4>
 80173b4:	ab03      	add	r3, sp, #12
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	4622      	mov	r2, r4
 80173ba:	4b0a      	ldr	r3, [pc, #40]	; (80173e4 <_vfiprintf_r+0x228>)
 80173bc:	a904      	add	r1, sp, #16
 80173be:	4630      	mov	r0, r6
 80173c0:	f7fb ff84 	bl	80132cc <_printf_i>
 80173c4:	e7ec      	b.n	80173a0 <_vfiprintf_r+0x1e4>
 80173c6:	bf00      	nop
 80173c8:	080182e0 	.word	0x080182e0
 80173cc:	0801842c 	.word	0x0801842c
 80173d0:	08018300 	.word	0x08018300
 80173d4:	080182c0 	.word	0x080182c0
 80173d8:	08018432 	.word	0x08018432
 80173dc:	08018436 	.word	0x08018436
 80173e0:	08012d61 	.word	0x08012d61
 80173e4:	08017197 	.word	0x08017197

080173e8 <_scanf_chars>:
 80173e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ec:	4615      	mov	r5, r2
 80173ee:	688a      	ldr	r2, [r1, #8]
 80173f0:	4680      	mov	r8, r0
 80173f2:	460c      	mov	r4, r1
 80173f4:	b932      	cbnz	r2, 8017404 <_scanf_chars+0x1c>
 80173f6:	698a      	ldr	r2, [r1, #24]
 80173f8:	2a00      	cmp	r2, #0
 80173fa:	bf14      	ite	ne
 80173fc:	f04f 32ff 	movne.w	r2, #4294967295
 8017400:	2201      	moveq	r2, #1
 8017402:	608a      	str	r2, [r1, #8]
 8017404:	6822      	ldr	r2, [r4, #0]
 8017406:	06d1      	lsls	r1, r2, #27
 8017408:	bf5f      	itttt	pl
 801740a:	681a      	ldrpl	r2, [r3, #0]
 801740c:	1d11      	addpl	r1, r2, #4
 801740e:	6019      	strpl	r1, [r3, #0]
 8017410:	6817      	ldrpl	r7, [r2, #0]
 8017412:	2600      	movs	r6, #0
 8017414:	69a3      	ldr	r3, [r4, #24]
 8017416:	b1db      	cbz	r3, 8017450 <_scanf_chars+0x68>
 8017418:	2b01      	cmp	r3, #1
 801741a:	d107      	bne.n	801742c <_scanf_chars+0x44>
 801741c:	682b      	ldr	r3, [r5, #0]
 801741e:	6962      	ldr	r2, [r4, #20]
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	5cd3      	ldrb	r3, [r2, r3]
 8017424:	b9a3      	cbnz	r3, 8017450 <_scanf_chars+0x68>
 8017426:	2e00      	cmp	r6, #0
 8017428:	d132      	bne.n	8017490 <_scanf_chars+0xa8>
 801742a:	e006      	b.n	801743a <_scanf_chars+0x52>
 801742c:	2b02      	cmp	r3, #2
 801742e:	d007      	beq.n	8017440 <_scanf_chars+0x58>
 8017430:	2e00      	cmp	r6, #0
 8017432:	d12d      	bne.n	8017490 <_scanf_chars+0xa8>
 8017434:	69a3      	ldr	r3, [r4, #24]
 8017436:	2b01      	cmp	r3, #1
 8017438:	d12a      	bne.n	8017490 <_scanf_chars+0xa8>
 801743a:	2001      	movs	r0, #1
 801743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017440:	f7fe fe32 	bl	80160a8 <__locale_ctype_ptr>
 8017444:	682b      	ldr	r3, [r5, #0]
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	4418      	add	r0, r3
 801744a:	7843      	ldrb	r3, [r0, #1]
 801744c:	071b      	lsls	r3, r3, #28
 801744e:	d4ef      	bmi.n	8017430 <_scanf_chars+0x48>
 8017450:	6823      	ldr	r3, [r4, #0]
 8017452:	06da      	lsls	r2, r3, #27
 8017454:	bf5e      	ittt	pl
 8017456:	682b      	ldrpl	r3, [r5, #0]
 8017458:	781b      	ldrbpl	r3, [r3, #0]
 801745a:	703b      	strbpl	r3, [r7, #0]
 801745c:	682a      	ldr	r2, [r5, #0]
 801745e:	686b      	ldr	r3, [r5, #4]
 8017460:	f102 0201 	add.w	r2, r2, #1
 8017464:	602a      	str	r2, [r5, #0]
 8017466:	68a2      	ldr	r2, [r4, #8]
 8017468:	f103 33ff 	add.w	r3, r3, #4294967295
 801746c:	f102 32ff 	add.w	r2, r2, #4294967295
 8017470:	606b      	str	r3, [r5, #4]
 8017472:	f106 0601 	add.w	r6, r6, #1
 8017476:	bf58      	it	pl
 8017478:	3701      	addpl	r7, #1
 801747a:	60a2      	str	r2, [r4, #8]
 801747c:	b142      	cbz	r2, 8017490 <_scanf_chars+0xa8>
 801747e:	2b00      	cmp	r3, #0
 8017480:	dcc8      	bgt.n	8017414 <_scanf_chars+0x2c>
 8017482:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017486:	4629      	mov	r1, r5
 8017488:	4640      	mov	r0, r8
 801748a:	4798      	blx	r3
 801748c:	2800      	cmp	r0, #0
 801748e:	d0c1      	beq.n	8017414 <_scanf_chars+0x2c>
 8017490:	6823      	ldr	r3, [r4, #0]
 8017492:	f013 0310 	ands.w	r3, r3, #16
 8017496:	d105      	bne.n	80174a4 <_scanf_chars+0xbc>
 8017498:	68e2      	ldr	r2, [r4, #12]
 801749a:	3201      	adds	r2, #1
 801749c:	60e2      	str	r2, [r4, #12]
 801749e:	69a2      	ldr	r2, [r4, #24]
 80174a0:	b102      	cbz	r2, 80174a4 <_scanf_chars+0xbc>
 80174a2:	703b      	strb	r3, [r7, #0]
 80174a4:	6923      	ldr	r3, [r4, #16]
 80174a6:	441e      	add	r6, r3
 80174a8:	6126      	str	r6, [r4, #16]
 80174aa:	2000      	movs	r0, #0
 80174ac:	e7c6      	b.n	801743c <_scanf_chars+0x54>
	...

080174b0 <_scanf_i>:
 80174b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174b4:	469a      	mov	sl, r3
 80174b6:	4b74      	ldr	r3, [pc, #464]	; (8017688 <_scanf_i+0x1d8>)
 80174b8:	460c      	mov	r4, r1
 80174ba:	4683      	mov	fp, r0
 80174bc:	4616      	mov	r6, r2
 80174be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80174c2:	b087      	sub	sp, #28
 80174c4:	ab03      	add	r3, sp, #12
 80174c6:	68a7      	ldr	r7, [r4, #8]
 80174c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80174cc:	4b6f      	ldr	r3, [pc, #444]	; (801768c <_scanf_i+0x1dc>)
 80174ce:	69a1      	ldr	r1, [r4, #24]
 80174d0:	4a6f      	ldr	r2, [pc, #444]	; (8017690 <_scanf_i+0x1e0>)
 80174d2:	2903      	cmp	r1, #3
 80174d4:	bf08      	it	eq
 80174d6:	461a      	moveq	r2, r3
 80174d8:	1e7b      	subs	r3, r7, #1
 80174da:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80174de:	bf84      	itt	hi
 80174e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80174e4:	60a3      	strhi	r3, [r4, #8]
 80174e6:	6823      	ldr	r3, [r4, #0]
 80174e8:	9200      	str	r2, [sp, #0]
 80174ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80174ee:	bf88      	it	hi
 80174f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80174f4:	f104 091c 	add.w	r9, r4, #28
 80174f8:	6023      	str	r3, [r4, #0]
 80174fa:	bf8c      	ite	hi
 80174fc:	197f      	addhi	r7, r7, r5
 80174fe:	2700      	movls	r7, #0
 8017500:	464b      	mov	r3, r9
 8017502:	f04f 0800 	mov.w	r8, #0
 8017506:	9301      	str	r3, [sp, #4]
 8017508:	6831      	ldr	r1, [r6, #0]
 801750a:	ab03      	add	r3, sp, #12
 801750c:	2202      	movs	r2, #2
 801750e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017512:	7809      	ldrb	r1, [r1, #0]
 8017514:	f7e8 fe7c 	bl	8000210 <memchr>
 8017518:	9b01      	ldr	r3, [sp, #4]
 801751a:	b330      	cbz	r0, 801756a <_scanf_i+0xba>
 801751c:	f1b8 0f01 	cmp.w	r8, #1
 8017520:	d15a      	bne.n	80175d8 <_scanf_i+0x128>
 8017522:	6862      	ldr	r2, [r4, #4]
 8017524:	b92a      	cbnz	r2, 8017532 <_scanf_i+0x82>
 8017526:	6822      	ldr	r2, [r4, #0]
 8017528:	2108      	movs	r1, #8
 801752a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801752e:	6061      	str	r1, [r4, #4]
 8017530:	6022      	str	r2, [r4, #0]
 8017532:	6822      	ldr	r2, [r4, #0]
 8017534:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017538:	6022      	str	r2, [r4, #0]
 801753a:	68a2      	ldr	r2, [r4, #8]
 801753c:	1e51      	subs	r1, r2, #1
 801753e:	60a1      	str	r1, [r4, #8]
 8017540:	b19a      	cbz	r2, 801756a <_scanf_i+0xba>
 8017542:	6832      	ldr	r2, [r6, #0]
 8017544:	1c51      	adds	r1, r2, #1
 8017546:	6031      	str	r1, [r6, #0]
 8017548:	7812      	ldrb	r2, [r2, #0]
 801754a:	701a      	strb	r2, [r3, #0]
 801754c:	1c5d      	adds	r5, r3, #1
 801754e:	6873      	ldr	r3, [r6, #4]
 8017550:	3b01      	subs	r3, #1
 8017552:	2b00      	cmp	r3, #0
 8017554:	6073      	str	r3, [r6, #4]
 8017556:	dc07      	bgt.n	8017568 <_scanf_i+0xb8>
 8017558:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801755c:	4631      	mov	r1, r6
 801755e:	4658      	mov	r0, fp
 8017560:	4798      	blx	r3
 8017562:	2800      	cmp	r0, #0
 8017564:	f040 8086 	bne.w	8017674 <_scanf_i+0x1c4>
 8017568:	462b      	mov	r3, r5
 801756a:	f108 0801 	add.w	r8, r8, #1
 801756e:	f1b8 0f03 	cmp.w	r8, #3
 8017572:	d1c8      	bne.n	8017506 <_scanf_i+0x56>
 8017574:	6862      	ldr	r2, [r4, #4]
 8017576:	b90a      	cbnz	r2, 801757c <_scanf_i+0xcc>
 8017578:	220a      	movs	r2, #10
 801757a:	6062      	str	r2, [r4, #4]
 801757c:	6862      	ldr	r2, [r4, #4]
 801757e:	4945      	ldr	r1, [pc, #276]	; (8017694 <_scanf_i+0x1e4>)
 8017580:	6960      	ldr	r0, [r4, #20]
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	1a89      	subs	r1, r1, r2
 8017586:	f000 f8df 	bl	8017748 <__sccl>
 801758a:	9b01      	ldr	r3, [sp, #4]
 801758c:	f04f 0800 	mov.w	r8, #0
 8017590:	461d      	mov	r5, r3
 8017592:	68a3      	ldr	r3, [r4, #8]
 8017594:	6822      	ldr	r2, [r4, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d03a      	beq.n	8017610 <_scanf_i+0x160>
 801759a:	6831      	ldr	r1, [r6, #0]
 801759c:	6960      	ldr	r0, [r4, #20]
 801759e:	f891 c000 	ldrb.w	ip, [r1]
 80175a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80175a6:	2800      	cmp	r0, #0
 80175a8:	d032      	beq.n	8017610 <_scanf_i+0x160>
 80175aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80175ae:	d121      	bne.n	80175f4 <_scanf_i+0x144>
 80175b0:	0510      	lsls	r0, r2, #20
 80175b2:	d51f      	bpl.n	80175f4 <_scanf_i+0x144>
 80175b4:	f108 0801 	add.w	r8, r8, #1
 80175b8:	b117      	cbz	r7, 80175c0 <_scanf_i+0x110>
 80175ba:	3301      	adds	r3, #1
 80175bc:	3f01      	subs	r7, #1
 80175be:	60a3      	str	r3, [r4, #8]
 80175c0:	6873      	ldr	r3, [r6, #4]
 80175c2:	3b01      	subs	r3, #1
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	6073      	str	r3, [r6, #4]
 80175c8:	dd1b      	ble.n	8017602 <_scanf_i+0x152>
 80175ca:	6833      	ldr	r3, [r6, #0]
 80175cc:	3301      	adds	r3, #1
 80175ce:	6033      	str	r3, [r6, #0]
 80175d0:	68a3      	ldr	r3, [r4, #8]
 80175d2:	3b01      	subs	r3, #1
 80175d4:	60a3      	str	r3, [r4, #8]
 80175d6:	e7dc      	b.n	8017592 <_scanf_i+0xe2>
 80175d8:	f1b8 0f02 	cmp.w	r8, #2
 80175dc:	d1ad      	bne.n	801753a <_scanf_i+0x8a>
 80175de:	6822      	ldr	r2, [r4, #0]
 80175e0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80175e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80175e8:	d1bf      	bne.n	801756a <_scanf_i+0xba>
 80175ea:	2110      	movs	r1, #16
 80175ec:	6061      	str	r1, [r4, #4]
 80175ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80175f2:	e7a1      	b.n	8017538 <_scanf_i+0x88>
 80175f4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80175f8:	6022      	str	r2, [r4, #0]
 80175fa:	780b      	ldrb	r3, [r1, #0]
 80175fc:	702b      	strb	r3, [r5, #0]
 80175fe:	3501      	adds	r5, #1
 8017600:	e7de      	b.n	80175c0 <_scanf_i+0x110>
 8017602:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017606:	4631      	mov	r1, r6
 8017608:	4658      	mov	r0, fp
 801760a:	4798      	blx	r3
 801760c:	2800      	cmp	r0, #0
 801760e:	d0df      	beq.n	80175d0 <_scanf_i+0x120>
 8017610:	6823      	ldr	r3, [r4, #0]
 8017612:	05d9      	lsls	r1, r3, #23
 8017614:	d50c      	bpl.n	8017630 <_scanf_i+0x180>
 8017616:	454d      	cmp	r5, r9
 8017618:	d908      	bls.n	801762c <_scanf_i+0x17c>
 801761a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801761e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017622:	4632      	mov	r2, r6
 8017624:	4658      	mov	r0, fp
 8017626:	4798      	blx	r3
 8017628:	1e6f      	subs	r7, r5, #1
 801762a:	463d      	mov	r5, r7
 801762c:	454d      	cmp	r5, r9
 801762e:	d029      	beq.n	8017684 <_scanf_i+0x1d4>
 8017630:	6822      	ldr	r2, [r4, #0]
 8017632:	f012 0210 	ands.w	r2, r2, #16
 8017636:	d113      	bne.n	8017660 <_scanf_i+0x1b0>
 8017638:	702a      	strb	r2, [r5, #0]
 801763a:	6863      	ldr	r3, [r4, #4]
 801763c:	9e00      	ldr	r6, [sp, #0]
 801763e:	4649      	mov	r1, r9
 8017640:	4658      	mov	r0, fp
 8017642:	47b0      	blx	r6
 8017644:	f8da 3000 	ldr.w	r3, [sl]
 8017648:	6821      	ldr	r1, [r4, #0]
 801764a:	1d1a      	adds	r2, r3, #4
 801764c:	f8ca 2000 	str.w	r2, [sl]
 8017650:	f011 0f20 	tst.w	r1, #32
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	d010      	beq.n	801767a <_scanf_i+0x1ca>
 8017658:	6018      	str	r0, [r3, #0]
 801765a:	68e3      	ldr	r3, [r4, #12]
 801765c:	3301      	adds	r3, #1
 801765e:	60e3      	str	r3, [r4, #12]
 8017660:	eba5 0509 	sub.w	r5, r5, r9
 8017664:	44a8      	add	r8, r5
 8017666:	6925      	ldr	r5, [r4, #16]
 8017668:	4445      	add	r5, r8
 801766a:	6125      	str	r5, [r4, #16]
 801766c:	2000      	movs	r0, #0
 801766e:	b007      	add	sp, #28
 8017670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017674:	f04f 0800 	mov.w	r8, #0
 8017678:	e7ca      	b.n	8017610 <_scanf_i+0x160>
 801767a:	07ca      	lsls	r2, r1, #31
 801767c:	bf4c      	ite	mi
 801767e:	8018      	strhmi	r0, [r3, #0]
 8017680:	6018      	strpl	r0, [r3, #0]
 8017682:	e7ea      	b.n	801765a <_scanf_i+0x1aa>
 8017684:	2001      	movs	r0, #1
 8017686:	e7f2      	b.n	801766e <_scanf_i+0x1be>
 8017688:	08017f84 	.word	0x08017f84
 801768c:	080148b1 	.word	0x080148b1
 8017690:	080178c5 	.word	0x080178c5
 8017694:	0801844d 	.word	0x0801844d

08017698 <_putc_r>:
 8017698:	b570      	push	{r4, r5, r6, lr}
 801769a:	460d      	mov	r5, r1
 801769c:	4614      	mov	r4, r2
 801769e:	4606      	mov	r6, r0
 80176a0:	b118      	cbz	r0, 80176aa <_putc_r+0x12>
 80176a2:	6983      	ldr	r3, [r0, #24]
 80176a4:	b90b      	cbnz	r3, 80176aa <_putc_r+0x12>
 80176a6:	f7fe f94b 	bl	8015940 <__sinit>
 80176aa:	4b13      	ldr	r3, [pc, #76]	; (80176f8 <_putc_r+0x60>)
 80176ac:	429c      	cmp	r4, r3
 80176ae:	d112      	bne.n	80176d6 <_putc_r+0x3e>
 80176b0:	6874      	ldr	r4, [r6, #4]
 80176b2:	68a3      	ldr	r3, [r4, #8]
 80176b4:	3b01      	subs	r3, #1
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	60a3      	str	r3, [r4, #8]
 80176ba:	da16      	bge.n	80176ea <_putc_r+0x52>
 80176bc:	69a2      	ldr	r2, [r4, #24]
 80176be:	4293      	cmp	r3, r2
 80176c0:	db02      	blt.n	80176c8 <_putc_r+0x30>
 80176c2:	b2eb      	uxtb	r3, r5
 80176c4:	2b0a      	cmp	r3, #10
 80176c6:	d110      	bne.n	80176ea <_putc_r+0x52>
 80176c8:	4622      	mov	r2, r4
 80176ca:	4629      	mov	r1, r5
 80176cc:	4630      	mov	r0, r6
 80176ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176d2:	f7fd b91f 	b.w	8014914 <__swbuf_r>
 80176d6:	4b09      	ldr	r3, [pc, #36]	; (80176fc <_putc_r+0x64>)
 80176d8:	429c      	cmp	r4, r3
 80176da:	d101      	bne.n	80176e0 <_putc_r+0x48>
 80176dc:	68b4      	ldr	r4, [r6, #8]
 80176de:	e7e8      	b.n	80176b2 <_putc_r+0x1a>
 80176e0:	4b07      	ldr	r3, [pc, #28]	; (8017700 <_putc_r+0x68>)
 80176e2:	429c      	cmp	r4, r3
 80176e4:	bf08      	it	eq
 80176e6:	68f4      	ldreq	r4, [r6, #12]
 80176e8:	e7e3      	b.n	80176b2 <_putc_r+0x1a>
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	1c5a      	adds	r2, r3, #1
 80176ee:	6022      	str	r2, [r4, #0]
 80176f0:	701d      	strb	r5, [r3, #0]
 80176f2:	b2e8      	uxtb	r0, r5
 80176f4:	bd70      	pop	{r4, r5, r6, pc}
 80176f6:	bf00      	nop
 80176f8:	080182e0 	.word	0x080182e0
 80176fc:	08018300 	.word	0x08018300
 8017700:	080182c0 	.word	0x080182c0

08017704 <_read_r>:
 8017704:	b538      	push	{r3, r4, r5, lr}
 8017706:	4c07      	ldr	r4, [pc, #28]	; (8017724 <_read_r+0x20>)
 8017708:	4605      	mov	r5, r0
 801770a:	4608      	mov	r0, r1
 801770c:	4611      	mov	r1, r2
 801770e:	2200      	movs	r2, #0
 8017710:	6022      	str	r2, [r4, #0]
 8017712:	461a      	mov	r2, r3
 8017714:	f7ee f8ba 	bl	800588c <_read>
 8017718:	1c43      	adds	r3, r0, #1
 801771a:	d102      	bne.n	8017722 <_read_r+0x1e>
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	b103      	cbz	r3, 8017722 <_read_r+0x1e>
 8017720:	602b      	str	r3, [r5, #0]
 8017722:	bd38      	pop	{r3, r4, r5, pc}
 8017724:	2003be0c 	.word	0x2003be0c

08017728 <_sbrk_r>:
 8017728:	b538      	push	{r3, r4, r5, lr}
 801772a:	4c06      	ldr	r4, [pc, #24]	; (8017744 <_sbrk_r+0x1c>)
 801772c:	2300      	movs	r3, #0
 801772e:	4605      	mov	r5, r0
 8017730:	4608      	mov	r0, r1
 8017732:	6023      	str	r3, [r4, #0]
 8017734:	f7ee f8fc 	bl	8005930 <_sbrk>
 8017738:	1c43      	adds	r3, r0, #1
 801773a:	d102      	bne.n	8017742 <_sbrk_r+0x1a>
 801773c:	6823      	ldr	r3, [r4, #0]
 801773e:	b103      	cbz	r3, 8017742 <_sbrk_r+0x1a>
 8017740:	602b      	str	r3, [r5, #0]
 8017742:	bd38      	pop	{r3, r4, r5, pc}
 8017744:	2003be0c 	.word	0x2003be0c

08017748 <__sccl>:
 8017748:	b570      	push	{r4, r5, r6, lr}
 801774a:	780b      	ldrb	r3, [r1, #0]
 801774c:	2b5e      	cmp	r3, #94	; 0x5e
 801774e:	bf13      	iteet	ne
 8017750:	1c4a      	addne	r2, r1, #1
 8017752:	1c8a      	addeq	r2, r1, #2
 8017754:	784b      	ldrbeq	r3, [r1, #1]
 8017756:	2100      	movne	r1, #0
 8017758:	bf08      	it	eq
 801775a:	2101      	moveq	r1, #1
 801775c:	1e44      	subs	r4, r0, #1
 801775e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017762:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017766:	42ac      	cmp	r4, r5
 8017768:	d1fb      	bne.n	8017762 <__sccl+0x1a>
 801776a:	b913      	cbnz	r3, 8017772 <__sccl+0x2a>
 801776c:	3a01      	subs	r2, #1
 801776e:	4610      	mov	r0, r2
 8017770:	bd70      	pop	{r4, r5, r6, pc}
 8017772:	f081 0401 	eor.w	r4, r1, #1
 8017776:	54c4      	strb	r4, [r0, r3]
 8017778:	1c51      	adds	r1, r2, #1
 801777a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801777e:	2d2d      	cmp	r5, #45	; 0x2d
 8017780:	f101 36ff 	add.w	r6, r1, #4294967295
 8017784:	460a      	mov	r2, r1
 8017786:	d006      	beq.n	8017796 <__sccl+0x4e>
 8017788:	2d5d      	cmp	r5, #93	; 0x5d
 801778a:	d0f0      	beq.n	801776e <__sccl+0x26>
 801778c:	b90d      	cbnz	r5, 8017792 <__sccl+0x4a>
 801778e:	4632      	mov	r2, r6
 8017790:	e7ed      	b.n	801776e <__sccl+0x26>
 8017792:	462b      	mov	r3, r5
 8017794:	e7ef      	b.n	8017776 <__sccl+0x2e>
 8017796:	780e      	ldrb	r6, [r1, #0]
 8017798:	2e5d      	cmp	r6, #93	; 0x5d
 801779a:	d0fa      	beq.n	8017792 <__sccl+0x4a>
 801779c:	42b3      	cmp	r3, r6
 801779e:	dcf8      	bgt.n	8017792 <__sccl+0x4a>
 80177a0:	3301      	adds	r3, #1
 80177a2:	429e      	cmp	r6, r3
 80177a4:	54c4      	strb	r4, [r0, r3]
 80177a6:	dcfb      	bgt.n	80177a0 <__sccl+0x58>
 80177a8:	3102      	adds	r1, #2
 80177aa:	e7e6      	b.n	801777a <__sccl+0x32>

080177ac <strncmp>:
 80177ac:	b510      	push	{r4, lr}
 80177ae:	b16a      	cbz	r2, 80177cc <strncmp+0x20>
 80177b0:	3901      	subs	r1, #1
 80177b2:	1884      	adds	r4, r0, r2
 80177b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80177b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80177bc:	4293      	cmp	r3, r2
 80177be:	d103      	bne.n	80177c8 <strncmp+0x1c>
 80177c0:	42a0      	cmp	r0, r4
 80177c2:	d001      	beq.n	80177c8 <strncmp+0x1c>
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d1f5      	bne.n	80177b4 <strncmp+0x8>
 80177c8:	1a98      	subs	r0, r3, r2
 80177ca:	bd10      	pop	{r4, pc}
 80177cc:	4610      	mov	r0, r2
 80177ce:	e7fc      	b.n	80177ca <strncmp+0x1e>

080177d0 <_strtoul_l.isra.0>:
 80177d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177d4:	4680      	mov	r8, r0
 80177d6:	4689      	mov	r9, r1
 80177d8:	4692      	mov	sl, r2
 80177da:	461e      	mov	r6, r3
 80177dc:	460f      	mov	r7, r1
 80177de:	463d      	mov	r5, r7
 80177e0:	9808      	ldr	r0, [sp, #32]
 80177e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177e6:	f7fe fc5b 	bl	80160a0 <__locale_ctype_ptr_l>
 80177ea:	4420      	add	r0, r4
 80177ec:	7843      	ldrb	r3, [r0, #1]
 80177ee:	f013 0308 	ands.w	r3, r3, #8
 80177f2:	d130      	bne.n	8017856 <_strtoul_l.isra.0+0x86>
 80177f4:	2c2d      	cmp	r4, #45	; 0x2d
 80177f6:	d130      	bne.n	801785a <_strtoul_l.isra.0+0x8a>
 80177f8:	787c      	ldrb	r4, [r7, #1]
 80177fa:	1cbd      	adds	r5, r7, #2
 80177fc:	2101      	movs	r1, #1
 80177fe:	2e00      	cmp	r6, #0
 8017800:	d05c      	beq.n	80178bc <_strtoul_l.isra.0+0xec>
 8017802:	2e10      	cmp	r6, #16
 8017804:	d109      	bne.n	801781a <_strtoul_l.isra.0+0x4a>
 8017806:	2c30      	cmp	r4, #48	; 0x30
 8017808:	d107      	bne.n	801781a <_strtoul_l.isra.0+0x4a>
 801780a:	782b      	ldrb	r3, [r5, #0]
 801780c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017810:	2b58      	cmp	r3, #88	; 0x58
 8017812:	d14e      	bne.n	80178b2 <_strtoul_l.isra.0+0xe2>
 8017814:	786c      	ldrb	r4, [r5, #1]
 8017816:	2610      	movs	r6, #16
 8017818:	3502      	adds	r5, #2
 801781a:	f04f 32ff 	mov.w	r2, #4294967295
 801781e:	2300      	movs	r3, #0
 8017820:	fbb2 f2f6 	udiv	r2, r2, r6
 8017824:	fb06 fc02 	mul.w	ip, r6, r2
 8017828:	ea6f 0c0c 	mvn.w	ip, ip
 801782c:	4618      	mov	r0, r3
 801782e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017832:	2f09      	cmp	r7, #9
 8017834:	d817      	bhi.n	8017866 <_strtoul_l.isra.0+0x96>
 8017836:	463c      	mov	r4, r7
 8017838:	42a6      	cmp	r6, r4
 801783a:	dd23      	ble.n	8017884 <_strtoul_l.isra.0+0xb4>
 801783c:	2b00      	cmp	r3, #0
 801783e:	db1e      	blt.n	801787e <_strtoul_l.isra.0+0xae>
 8017840:	4282      	cmp	r2, r0
 8017842:	d31c      	bcc.n	801787e <_strtoul_l.isra.0+0xae>
 8017844:	d101      	bne.n	801784a <_strtoul_l.isra.0+0x7a>
 8017846:	45a4      	cmp	ip, r4
 8017848:	db19      	blt.n	801787e <_strtoul_l.isra.0+0xae>
 801784a:	fb00 4006 	mla	r0, r0, r6, r4
 801784e:	2301      	movs	r3, #1
 8017850:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017854:	e7eb      	b.n	801782e <_strtoul_l.isra.0+0x5e>
 8017856:	462f      	mov	r7, r5
 8017858:	e7c1      	b.n	80177de <_strtoul_l.isra.0+0xe>
 801785a:	2c2b      	cmp	r4, #43	; 0x2b
 801785c:	bf04      	itt	eq
 801785e:	1cbd      	addeq	r5, r7, #2
 8017860:	787c      	ldrbeq	r4, [r7, #1]
 8017862:	4619      	mov	r1, r3
 8017864:	e7cb      	b.n	80177fe <_strtoul_l.isra.0+0x2e>
 8017866:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801786a:	2f19      	cmp	r7, #25
 801786c:	d801      	bhi.n	8017872 <_strtoul_l.isra.0+0xa2>
 801786e:	3c37      	subs	r4, #55	; 0x37
 8017870:	e7e2      	b.n	8017838 <_strtoul_l.isra.0+0x68>
 8017872:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017876:	2f19      	cmp	r7, #25
 8017878:	d804      	bhi.n	8017884 <_strtoul_l.isra.0+0xb4>
 801787a:	3c57      	subs	r4, #87	; 0x57
 801787c:	e7dc      	b.n	8017838 <_strtoul_l.isra.0+0x68>
 801787e:	f04f 33ff 	mov.w	r3, #4294967295
 8017882:	e7e5      	b.n	8017850 <_strtoul_l.isra.0+0x80>
 8017884:	2b00      	cmp	r3, #0
 8017886:	da09      	bge.n	801789c <_strtoul_l.isra.0+0xcc>
 8017888:	2322      	movs	r3, #34	; 0x22
 801788a:	f8c8 3000 	str.w	r3, [r8]
 801788e:	f04f 30ff 	mov.w	r0, #4294967295
 8017892:	f1ba 0f00 	cmp.w	sl, #0
 8017896:	d107      	bne.n	80178a8 <_strtoul_l.isra.0+0xd8>
 8017898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801789c:	b101      	cbz	r1, 80178a0 <_strtoul_l.isra.0+0xd0>
 801789e:	4240      	negs	r0, r0
 80178a0:	f1ba 0f00 	cmp.w	sl, #0
 80178a4:	d0f8      	beq.n	8017898 <_strtoul_l.isra.0+0xc8>
 80178a6:	b10b      	cbz	r3, 80178ac <_strtoul_l.isra.0+0xdc>
 80178a8:	f105 39ff 	add.w	r9, r5, #4294967295
 80178ac:	f8ca 9000 	str.w	r9, [sl]
 80178b0:	e7f2      	b.n	8017898 <_strtoul_l.isra.0+0xc8>
 80178b2:	2430      	movs	r4, #48	; 0x30
 80178b4:	2e00      	cmp	r6, #0
 80178b6:	d1b0      	bne.n	801781a <_strtoul_l.isra.0+0x4a>
 80178b8:	2608      	movs	r6, #8
 80178ba:	e7ae      	b.n	801781a <_strtoul_l.isra.0+0x4a>
 80178bc:	2c30      	cmp	r4, #48	; 0x30
 80178be:	d0a4      	beq.n	801780a <_strtoul_l.isra.0+0x3a>
 80178c0:	260a      	movs	r6, #10
 80178c2:	e7aa      	b.n	801781a <_strtoul_l.isra.0+0x4a>

080178c4 <_strtoul_r>:
 80178c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178c6:	4c06      	ldr	r4, [pc, #24]	; (80178e0 <_strtoul_r+0x1c>)
 80178c8:	4d06      	ldr	r5, [pc, #24]	; (80178e4 <_strtoul_r+0x20>)
 80178ca:	6824      	ldr	r4, [r4, #0]
 80178cc:	6a24      	ldr	r4, [r4, #32]
 80178ce:	2c00      	cmp	r4, #0
 80178d0:	bf08      	it	eq
 80178d2:	462c      	moveq	r4, r5
 80178d4:	9400      	str	r4, [sp, #0]
 80178d6:	f7ff ff7b 	bl	80177d0 <_strtoul_l.isra.0>
 80178da:	b003      	add	sp, #12
 80178dc:	bd30      	pop	{r4, r5, pc}
 80178de:	bf00      	nop
 80178e0:	2000000c 	.word	0x2000000c
 80178e4:	20000070 	.word	0x20000070

080178e8 <__submore>:
 80178e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ec:	460c      	mov	r4, r1
 80178ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80178f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80178f4:	4299      	cmp	r1, r3
 80178f6:	d11d      	bne.n	8017934 <__submore+0x4c>
 80178f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80178fc:	f7ff f8de 	bl	8016abc <_malloc_r>
 8017900:	b918      	cbnz	r0, 801790a <__submore+0x22>
 8017902:	f04f 30ff 	mov.w	r0, #4294967295
 8017906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801790e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017910:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017914:	6360      	str	r0, [r4, #52]	; 0x34
 8017916:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801791a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801791e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017922:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017926:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801792a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801792e:	6020      	str	r0, [r4, #0]
 8017930:	2000      	movs	r0, #0
 8017932:	e7e8      	b.n	8017906 <__submore+0x1e>
 8017934:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017936:	0077      	lsls	r7, r6, #1
 8017938:	463a      	mov	r2, r7
 801793a:	f000 f85a 	bl	80179f2 <_realloc_r>
 801793e:	4605      	mov	r5, r0
 8017940:	2800      	cmp	r0, #0
 8017942:	d0de      	beq.n	8017902 <__submore+0x1a>
 8017944:	eb00 0806 	add.w	r8, r0, r6
 8017948:	4601      	mov	r1, r0
 801794a:	4632      	mov	r2, r6
 801794c:	4640      	mov	r0, r8
 801794e:	f7fb f95f 	bl	8012c10 <memcpy>
 8017952:	f8c4 8000 	str.w	r8, [r4]
 8017956:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801795a:	e7e9      	b.n	8017930 <__submore+0x48>

0801795c <__ascii_wctomb>:
 801795c:	b149      	cbz	r1, 8017972 <__ascii_wctomb+0x16>
 801795e:	2aff      	cmp	r2, #255	; 0xff
 8017960:	bf85      	ittet	hi
 8017962:	238a      	movhi	r3, #138	; 0x8a
 8017964:	6003      	strhi	r3, [r0, #0]
 8017966:	700a      	strbls	r2, [r1, #0]
 8017968:	f04f 30ff 	movhi.w	r0, #4294967295
 801796c:	bf98      	it	ls
 801796e:	2001      	movls	r0, #1
 8017970:	4770      	bx	lr
 8017972:	4608      	mov	r0, r1
 8017974:	4770      	bx	lr
	...

08017978 <_fstat_r>:
 8017978:	b538      	push	{r3, r4, r5, lr}
 801797a:	4c07      	ldr	r4, [pc, #28]	; (8017998 <_fstat_r+0x20>)
 801797c:	2300      	movs	r3, #0
 801797e:	4605      	mov	r5, r0
 8017980:	4608      	mov	r0, r1
 8017982:	4611      	mov	r1, r2
 8017984:	6023      	str	r3, [r4, #0]
 8017986:	f7ed ffaa 	bl	80058de <_fstat>
 801798a:	1c43      	adds	r3, r0, #1
 801798c:	d102      	bne.n	8017994 <_fstat_r+0x1c>
 801798e:	6823      	ldr	r3, [r4, #0]
 8017990:	b103      	cbz	r3, 8017994 <_fstat_r+0x1c>
 8017992:	602b      	str	r3, [r5, #0]
 8017994:	bd38      	pop	{r3, r4, r5, pc}
 8017996:	bf00      	nop
 8017998:	2003be0c 	.word	0x2003be0c

0801799c <_isatty_r>:
 801799c:	b538      	push	{r3, r4, r5, lr}
 801799e:	4c06      	ldr	r4, [pc, #24]	; (80179b8 <_isatty_r+0x1c>)
 80179a0:	2300      	movs	r3, #0
 80179a2:	4605      	mov	r5, r0
 80179a4:	4608      	mov	r0, r1
 80179a6:	6023      	str	r3, [r4, #0]
 80179a8:	f7ed ffa9 	bl	80058fe <_isatty>
 80179ac:	1c43      	adds	r3, r0, #1
 80179ae:	d102      	bne.n	80179b6 <_isatty_r+0x1a>
 80179b0:	6823      	ldr	r3, [r4, #0]
 80179b2:	b103      	cbz	r3, 80179b6 <_isatty_r+0x1a>
 80179b4:	602b      	str	r3, [r5, #0]
 80179b6:	bd38      	pop	{r3, r4, r5, pc}
 80179b8:	2003be0c 	.word	0x2003be0c

080179bc <memmove>:
 80179bc:	4288      	cmp	r0, r1
 80179be:	b510      	push	{r4, lr}
 80179c0:	eb01 0302 	add.w	r3, r1, r2
 80179c4:	d807      	bhi.n	80179d6 <memmove+0x1a>
 80179c6:	1e42      	subs	r2, r0, #1
 80179c8:	4299      	cmp	r1, r3
 80179ca:	d00a      	beq.n	80179e2 <memmove+0x26>
 80179cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80179d4:	e7f8      	b.n	80179c8 <memmove+0xc>
 80179d6:	4283      	cmp	r3, r0
 80179d8:	d9f5      	bls.n	80179c6 <memmove+0xa>
 80179da:	1881      	adds	r1, r0, r2
 80179dc:	1ad2      	subs	r2, r2, r3
 80179de:	42d3      	cmn	r3, r2
 80179e0:	d100      	bne.n	80179e4 <memmove+0x28>
 80179e2:	bd10      	pop	{r4, pc}
 80179e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80179e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80179ec:	e7f7      	b.n	80179de <memmove+0x22>

080179ee <__malloc_lock>:
 80179ee:	4770      	bx	lr

080179f0 <__malloc_unlock>:
 80179f0:	4770      	bx	lr

080179f2 <_realloc_r>:
 80179f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179f4:	4607      	mov	r7, r0
 80179f6:	4614      	mov	r4, r2
 80179f8:	460e      	mov	r6, r1
 80179fa:	b921      	cbnz	r1, 8017a06 <_realloc_r+0x14>
 80179fc:	4611      	mov	r1, r2
 80179fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017a02:	f7ff b85b 	b.w	8016abc <_malloc_r>
 8017a06:	b922      	cbnz	r2, 8017a12 <_realloc_r+0x20>
 8017a08:	f7ff f80a 	bl	8016a20 <_free_r>
 8017a0c:	4625      	mov	r5, r4
 8017a0e:	4628      	mov	r0, r5
 8017a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a12:	f000 f814 	bl	8017a3e <_malloc_usable_size_r>
 8017a16:	42a0      	cmp	r0, r4
 8017a18:	d20f      	bcs.n	8017a3a <_realloc_r+0x48>
 8017a1a:	4621      	mov	r1, r4
 8017a1c:	4638      	mov	r0, r7
 8017a1e:	f7ff f84d 	bl	8016abc <_malloc_r>
 8017a22:	4605      	mov	r5, r0
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d0f2      	beq.n	8017a0e <_realloc_r+0x1c>
 8017a28:	4631      	mov	r1, r6
 8017a2a:	4622      	mov	r2, r4
 8017a2c:	f7fb f8f0 	bl	8012c10 <memcpy>
 8017a30:	4631      	mov	r1, r6
 8017a32:	4638      	mov	r0, r7
 8017a34:	f7fe fff4 	bl	8016a20 <_free_r>
 8017a38:	e7e9      	b.n	8017a0e <_realloc_r+0x1c>
 8017a3a:	4635      	mov	r5, r6
 8017a3c:	e7e7      	b.n	8017a0e <_realloc_r+0x1c>

08017a3e <_malloc_usable_size_r>:
 8017a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a42:	1f18      	subs	r0, r3, #4
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	bfbc      	itt	lt
 8017a48:	580b      	ldrlt	r3, [r1, r0]
 8017a4a:	18c0      	addlt	r0, r0, r3
 8017a4c:	4770      	bx	lr
	...

08017a50 <_init>:
 8017a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a52:	bf00      	nop
 8017a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a56:	bc08      	pop	{r3}
 8017a58:	469e      	mov	lr, r3
 8017a5a:	4770      	bx	lr

08017a5c <_fini>:
 8017a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a5e:	bf00      	nop
 8017a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a62:	bc08      	pop	{r3}
 8017a64:	469e      	mov	lr, r3
 8017a66:	4770      	bx	lr
