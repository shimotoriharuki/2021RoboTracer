
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ca4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019e68  08019e68  00029e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a874  0801a874  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a874  0801a874  0002a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a87c  0801a87c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a87c  0801a87c  0002a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a884  0801a884  0002a884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046c58  200001e0  0801aa64  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046e38  0801aa64  00036e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1f8  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00073038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000773e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265f7  00000000  00000000  000ac89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110e6  00000000  00000000  000d2e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3f79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a760  00000000  00000000  001e3ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019e4c 	.word	0x08019e4c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019e4c 	.word	0x08019e4c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fbde 	bl	800b798 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044930 	.word	0x20044930

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fbc6 	bl	800b798 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044930 	.word	0x20044930

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a fa67 	bl	800b4f4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ffce 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ffc8 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ffc2 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ffbc 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ffb6 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ffb0 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ffaa 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ffa4 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff9e 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff98 	bl	8009fc8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff8c 	bl	8009fc8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff86 	bl	8009fc8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 fa59 	bl	80175e0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f896 	bl	800f328 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f892 	bl	800f328 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f88e 	bl	800f328 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f88a 	bl	800f328 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044a1c 	.word	0x20044a1c
 8001248:	20044984 	.word	0x20044984
 800124c:	20044aa4 	.word	0x20044aa4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044a1c 	.word	0x20044a1c
 800137c:	20044aa4 	.word	0x20044aa4
 8001380:	20044984 	.word	0x20044984

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044a1c 	.word	0x20044a1c
 80013c4:	20044984 	.word	0x20044984
 80013c8:	20044aa4 	.word	0x20044aa4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00e f84a 	bl	800f4c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00e f846 	bl	800f4c8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044b84 	.word	0x20044b84
 8001458:	20044868 	.word	0x20044868
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fbda 	bl	8013f7c <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20043774 	.word	0x20043774

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 ff99 	bl	8016748 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fc1e 	bl	8014064 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fc19 	bl	8014064 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f987 	bl	8013b52 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019e68 	.word	0x08019e68
 8001870:	200436e4 	.word	0x200436e4
 8001874:	20043774 	.word	0x20043774
 8001878:	20043764 	.word	0x20043764

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fb95 	bl	8013fd0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fe00 	bl	80144ac <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fb8f 	bl	8013fd0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 ff34 	bl	8016748 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fbbc 	bl	8014064 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f92a 	bl	8013b52 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 fb2e 	bl	8013f7c <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	200435e4 	.word	0x200435e4
 8001930:	200424a4 	.word	0x200424a4
 8001934:	08019e84 	.word	0x08019e84
 8001938:	08019e68 	.word	0x08019e68
 800193c:	200436e4 	.word	0x200436e4
 8001940:	20043774 	.word	0x20043774
 8001944:	20043764 	.word	0x20043764

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 ff37 	bl	80167f0 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 ff5e 	bl	8014868 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fae0 	bl	8013f7c <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019e74 	.word	0x08019e74
 80019cc:	200436e4 	.word	0x200436e4
 80019d0:	20043774 	.word	0x20043774

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fef1 	bl	80167f0 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 ff18 	bl	8014868 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 fa9a 	bl	8013f7c <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019e80 	.word	0x08019e80
 8001a58:	200436e4 	.word	0x200436e4
 8001a5c:	20043774 	.word	0x20043774

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 faa3 	bl	8013fd0 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fd0e 	bl	80144ac <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 fa9d 	bl	8013fd0 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fe48 	bl	8016748 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 fad0 	bl	8014064 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f012 f83e 	bl	8013b52 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 fa42 	bl	8013f7c <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200435e4 	.word	0x200435e4
 8001b08:	200424a4 	.word	0x200424a4
 8001b0c:	08019e84 	.word	0x08019e84
 8001b10:	08019e88 	.word	0x08019e88
 8001b14:	200436e4 	.word	0x200436e4
 8001b18:	20043774 	.word	0x20043774
 8001b1c:	20043764 	.word	0x20043764

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fc9c 	bl	801346c <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019e90 	.word	0x08019e90
 8001b54:	200425a4 	.word	0x200425a4

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fe6f 	bl	8016848 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fe6b 	bl	8016848 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200435e4 	.word	0x200435e4
 8001b80:	200424a4 	.word	0x200424a4

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fd51 	bl	8014630 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 fa1e 	bl	8013fd0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fcad 	bl	80134f8 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 fa16 	bl	8013fd0 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200435e4 	.word	0x200435e4
 8001bac:	200424a4 	.word	0x200424a4
 8001bb0:	20043774 	.word	0x20043774
 8001bb4:	08019e84 	.word	0x08019e84

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200436e4 	.word	0x200436e4

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fc74 	bl	800b4f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fe1d 	bl	800e854 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c ff4a 	bl	800eabc <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fc60 	bl	800b4f4 <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044810 	.word	0x20044810

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fc43 	bl	800b4f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fdec 	bl	800e854 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fde6 	bl	800e854 <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fc30 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044810 	.word	0x20044810

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200447ac 	.word	0x200447ac
 8001d64:	200447aa 	.word	0x200447aa
 8001d68:	200447a4 	.word	0x200447a4

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f008 f8ee 	bl	8009fc8 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019e94 	.word	0x08019e94
 8001df8:	08019ea0 	.word	0x08019ea0
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	200447ac 	.word	0x200447ac
 8001ebc:	200447aa 	.word	0x200447aa
 8001ec0:	200447a4 	.word	0x200447a4
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f008 f828 	bl	8009fc8 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f007 ffd2 	bl	8009fc8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019ea4 	.word	0x08019ea4
 800208c:	08019eb0 	.word	0x08019eb0

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fb73 	bl	800b798 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fc67 	bl	800b994 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200449c4 	.word	0x200449c4

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 fb3b 	bl	800b798 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	200449c4 	.word	0x200449c4

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 f991 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 f981 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 f970 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f009 f960 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f009 f950 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f009 f941 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f93b 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f935 	bl	800b4f4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f009 f92b 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f009 f925 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f009 f91f 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f009 f915 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f009 f90f 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f009 f909 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f009 f8ff 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f009 f8f9 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f009 f8f3 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f009 f8e9 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f009 f8e3 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f009 f8dd 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f009 f8d3 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f009 f8cd 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f009 f8c7 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f009 f8bd 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f009 f8b7 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f009 f8b1 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f009 f8a7 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f009 f8a1 	bl	800b4f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f009 f89b 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f009 f882 	bl	800b4f4 <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f009 f877 	bl	800b4f4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f009 f86d 	bl	800b4f4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f009 f862 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fdba 	bl	800a094 <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200448e8 	.word	0x200448e8

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 fbf7 	bl	8009fc8 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fe66 	bl	80055f4 <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019ebc 	.word	0x08019ebc
 8002a04:	08019ec8 	.word	0x08019ec8
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aba:	eef0 7ae7 	vabs.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b64:	3352      	adds	r3, #82	; 0x52
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b88:	331c      	adds	r3, #28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b94:	331e      	adds	r3, #30
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bac:	3322      	adds	r3, #34	; 0x22
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bb8:	3323      	adds	r3, #35	; 0x23
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bc4:	3324      	adds	r3, #36	; 0x24
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bd0:	3328      	adds	r3, #40	; 0x28
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bde:	332c      	adds	r3, #44	; 0x2c
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bec:	3330      	adds	r3, #48	; 0x30
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bfa:	3334      	adds	r3, #52	; 0x34
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c08:	3338      	adds	r3, #56	; 0x38
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c14:	333a      	adds	r3, #58	; 0x3a
 8002c16:	2200      	movs	r2, #0
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c20:	333c      	adds	r3, #60	; 0x3c
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c54:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	83fb      	strh	r3, [r7, #30]
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
 8002c62:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d80d      	bhi.n	8002c86 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 8002c6a:	8bfb      	ldrh	r3, [r7, #30]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c72:	3304      	adds	r3, #4
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	3301      	adds	r3, #1
 8002c82:	83fb      	strh	r3, [r7, #30]
 8002c84:	e7ec      	b.n	8002c60 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c86:	2300      	movs	r3, #0
 8002c88:	83bb      	strh	r3, [r7, #28]
 8002c8a:	8bbb      	ldrh	r3, [r7, #28]
 8002c8c:	2b63      	cmp	r3, #99	; 0x63
 8002c8e:	d80d      	bhi.n	8002cac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002c90:	8bbb      	ldrh	r3, [r7, #28]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c98:	3316      	adds	r3, #22
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ca4:	8bbb      	ldrh	r3, [r7, #28]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	83bb      	strh	r3, [r7, #28]
 8002caa:	e7ee      	b.n	8002c8a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	837b      	strh	r3, [r7, #26]
 8002cb0:	8b7b      	ldrh	r3, [r7, #26]
 8002cb2:	2b63      	cmp	r3, #99	; 0x63
 8002cb4:	d80d      	bhi.n	8002cd2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002cb6:	8b7b      	ldrh	r3, [r7, #26]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002cbe:	333a      	adds	r3, #58	; 0x3a
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cca:	8b7b      	ldrh	r3, [r7, #26]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	837b      	strh	r3, [r7, #26]
 8002cd0:	e7ee      	b.n	8002cb0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	833b      	strh	r3, [r7, #24]
 8002cd6:	8b3b      	ldrh	r3, [r7, #24]
 8002cd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cdc:	d20d      	bcs.n	8002cfa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002cde:	8b3b      	ldrh	r3, [r7, #24]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002ce6:	331e      	adds	r3, #30
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cf2:	8b3b      	ldrh	r3, [r7, #24]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	833b      	strh	r3, [r7, #24]
 8002cf8:	e7ed      	b.n	8002cd6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	82fb      	strh	r3, [r7, #22]
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d04:	d20d      	bcs.n	8002d22 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002d0e:	3312      	adds	r3, #18
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d1a:	8afb      	ldrh	r3, [r7, #22]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	82fb      	strh	r3, [r7, #22]
 8002d20:	e7ed      	b.n	8002cfe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	3724      	adds	r7, #36	; 0x24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d54:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	ee07 3a90 	vmov	s15, r3

}
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000025c 	.word	0x2000025c

08002da0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffc1 	bl	8002d30 <_ZN9LineTrace9calcErrorEv>
 8002dae:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d14c      	bne.n	8002e76 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002de2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fbb5 	bl	8000578 <__aeabi_f2d>
 8002e0e:	a350      	add	r3, pc, #320	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fd32 	bl	800087c <__aeabi_ddiv>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4621      	mov	r1, r4
 8002e20:	f7fd fefa 	bl	8000c18 <__aeabi_d2f>
 8002e24:	4603      	mov	r3, r0
 8002e26:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fba3 	bl	8000578 <__aeabi_f2d>
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e44:	ee17 0a90 	vmov	r0, s15
 8002e48:	f7fd fb96 	bl	8000578 <__aeabi_f2d>
 8002e4c:	a340      	add	r3, pc, #256	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fbe9 	bl	8000628 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fa2d 	bl	80002bc <__adddf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	4618      	mov	r0, r3
 8002e68:	4621      	mov	r1, r4
 8002e6a:	f7fd fed5 	bl	8000c18 <__aeabi_d2f>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e04b      	b.n	8002f0e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea0:	ee17 0a90 	vmov	r0, s15
 8002ea4:	f7fd fb68 	bl	8000578 <__aeabi_f2d>
 8002ea8:	a329      	add	r3, pc, #164	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fce5 	bl	800087c <__aeabi_ddiv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f7fd fead 	bl	8000c18 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb56 	bl	8000578 <__aeabi_f2d>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	460d      	mov	r5, r1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	ee17 0a90 	vmov	r0, s15
 8002ee2:	f7fd fb49 	bl	8000578 <__aeabi_f2d>
 8002ee6:	a31a      	add	r3, pc, #104	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fb9c 	bl	8000628 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f9e0 	bl	80002bc <__adddf3>
 8002efc:	4603      	mov	r3, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	4618      	mov	r0, r3
 8002f02:	4621      	mov	r1, r4
 8002f04:	f7fd fe88 	bl	8000c18 <__aeabi_d2f>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f32:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f003 f888 	bl	8006050 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6013      	str	r3, [r2, #0]

}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f54:	3f50624d 	.word	0x3f50624d
 8002f58:	20000280 	.word	0x20000280
 8002f5c:	2000027c 	.word	0x2000027c

08002f60 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fbd7 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 f9fe 	bl	8005378 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 ff16 	bl	8004db2 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 ff77 	bl	8004e96 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fca:	3318      	adds	r3, #24
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	461c      	mov	r4, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7fe fb87 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002fe0:	3316      	adds	r3, #22
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ffe:	3318      	adds	r3, #24
 8003000:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	3318      	adds	r3, #24
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	2b63      	cmp	r3, #99	; 0x63
 800300e:	d905      	bls.n	800301c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003016:	3318      	adds	r3, #24
 8003018:	2263      	movs	r2, #99	; 0x63
 800301a:	801a      	strh	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003036:	331a      	adds	r3, #26
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	461c      	mov	r4, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fe fb51 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003042:	eef0 7a40 	vmov.f32	s15, s0
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 800304c:	333a      	adds	r3, #58	; 0x3a
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305c:	331a      	adds	r3, #26
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306a:	331a      	adds	r3, #26
 800306c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003074:	331a      	adds	r3, #26
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	2b63      	cmp	r3, #99	; 0x63
 800307a:	d905      	bls.n	8003088 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003082:	331a      	adds	r3, #26
 8003084:	2263      	movs	r2, #99	; 0x63
 8003086:	801a      	strh	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a2:	331c      	adds	r3, #28
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	461c      	mov	r4, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe fb1b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 80030b8:	331e      	adds	r3, #30
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c8:	331c      	adds	r3, #28
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d6:	331c      	adds	r3, #28
 80030d8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030e0:	331c      	adds	r3, #28
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030e8:	d306      	bcc.n	80030f8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f0:	331c      	adds	r3, #28
 80030f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030f6:	801a      	strh	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}

08003100 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003112:	331e      	adds	r3, #30
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	461c      	mov	r4, r3
 8003118:	4610      	mov	r0, r2
 800311a:	f7fe fae3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800311e:	eef0 7a40 	vmov.f32	s15, s0
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003128:	3312      	adds	r3, #18
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003138:	331e      	adds	r3, #30
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003146:	331e      	adds	r3, #30
 8003148:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003150:	331e      	adds	r3, #30
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003158:	d306      	bcc.n	8003168 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003160:	331e      	adds	r3, #30
 8003162:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003166:	801a      	strh	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	ed2d 8b02 	vpush	{d8}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d046      	beq.n	8003214 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800318c:	3354      	adds	r3, #84	; 0x54
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11c      	bne.n	80031d0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69dc      	ldr	r4, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fa91 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80031a4:	eeb0 8a40 	vmov.f32	s16, s0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f8d2 	bl	8005356 <_ZN8Odometry8getThetaEv>
 80031b2:	ec53 2b10 	vmov	r2, r3, d0
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7fd fd2d 	bl	8000c18 <__aeabi_d2f>
 80031be:	4603      	mov	r3, r0
 80031c0:	ee00 3a90 	vmov	s1, r3
 80031c4:	eeb0 0a48 	vmov.f32	s0, s16
 80031c8:	4620      	mov	r0, r4
 80031ca:	f001 fca9 	bl	8004b20 <_ZN6Logger21storeDistanceAndThetaEff>
 80031ce:	e01b      	b.n	8003208 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69dc      	ldr	r4, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fa83 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80031de:	eeb0 8a40 	vmov.f32	s16, s0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 f8b5 	bl	8005356 <_ZN8Odometry8getThetaEv>
 80031ec:	ec53 2b10 	vmov	r2, r3, d0
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fd10 	bl	8000c18 <__aeabi_d2f>
 80031f8:	4603      	mov	r3, r0
 80031fa:	ee00 3a90 	vmov	s1, r3
 80031fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003202:	4620      	mov	r0, r4
 8003204:	f001 fccf 	bl	8004ba6 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003212:	801a      	strh	r2, [r3, #0]
	}
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	ecbd 8b02 	vpop	{d8}
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	20000260 	.word	0x20000260

08003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	/*
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
	crossline_idx_++;
	correction_check_cnt_ = 0;
	*/
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800322c:	2300      	movs	r3, #0
 800322e:	82fb      	strh	r3, [r7, #22]
 8003230:	8afb      	ldrh	r3, [r7, #22]
 8003232:	2b63      	cmp	r3, #99	; 0x63
 8003234:	d83d      	bhi.n	80032b2 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8e>
		float temp_crossline_distance = crossline_distance_[i];
 8003236:	8afb      	ldrh	r3, [r7, #22]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800323e:	3316      	adds	r3, #22
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fa49 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003252:	eeb0 7a40 	vmov.f32	s14, s0
 8003256:	edd7 7a04 	vldr	s15, [r7, #16]
 800325a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	f7ff fc23 	bl	8002aac <_ZSt3absf>
 8003266:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 100){
 800326a:	edd7 7a03 	vldr	s15, [r7, #12]
 800326e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032d4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb0>
 8003272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	d816      	bhi.n	80032aa <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x86>
			correction_check_cnt_ = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003282:	3338      	adds	r3, #56	; 0x38
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[i] / DISTANCE_CORRECTION_CONST);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6959      	ldr	r1, [r3, #20]
 800328c:	8afb      	ldrh	r3, [r7, #22]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003294:	3316      	adds	r3, #22
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	4608      	mov	r0, r1
 80032a4:	f7fe fa2d 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80032a8:	e003      	b.n	80032b2 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8e>
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80032aa:	8afb      	ldrh	r3, [r7, #22]
 80032ac:	3301      	adds	r3, #1
 80032ae:	82fb      	strh	r3, [r7, #22]
 80032b0:	e7be      	b.n	8003230 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xc>
		}
		crossline_idx_++;
	}
	*/

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032b8:	3318      	adds	r3, #24
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	2b63      	cmp	r3, #99	; 0x63
 80032be:	d905      	bls.n	80032cc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xa8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032c6:	3318      	adds	r3, #24
 80032c8:	2263      	movs	r2, #99	; 0x63
 80032ca:	801a      	strh	r2, [r3, #0]

}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	42c80000 	.word	0x42c80000

080032d8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80032e0:	2300      	movs	r3, #0
 80032e2:	82fb      	strh	r3, [r7, #22]
 80032e4:	8afb      	ldrh	r3, [r7, #22]
 80032e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032ea:	d23d      	bcs.n	8003368 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 80032ec:	8afb      	ldrh	r3, [r7, #22]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80032f4:	331e      	adds	r3, #30
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f9ee 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003308:	eeb0 7a40 	vmov.f32	s14, s0
 800330c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f7ff fbc8 	bl	8002aac <_ZSt3absf>
 800331c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003320:	edd7 7a03 	vldr	s15, [r7, #12]
 8003324:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003390 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d816      	bhi.n	8003360 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003338:	3338      	adds	r3, #56	; 0x38
 800333a:	2200      	movs	r2, #0
 800333c:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6959      	ldr	r1, [r3, #20]
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800334a:	331e      	adds	r3, #30
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	4608      	mov	r0, r1
 800335a:	f7fe f9d2 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800335e:	e003      	b.n	8003368 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003360:	8afb      	ldrh	r3, [r7, #22]
 8003362:	3301      	adds	r3, #1
 8003364:	82fb      	strh	r3, [r7, #22]
 8003366:	e7bd      	b.n	80032e4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800336e:	331c      	adds	r3, #28
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003376:	d306      	bcc.n	8003386 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800337e:	331c      	adds	r3, #28
 8003380:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003384:	801a      	strh	r2, [r3, #0]

}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	43660000 	.word	0x43660000

08003394 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033a6:	3354      	adds	r3, #84	; 0x54
 80033a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d12b      	bne.n	8003408 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 400) velocity = min_velocity_;
 80033b0:	edd7 7a00 	vldr	s15, [r7]
 80033b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80034a0 <_ZN9LineTrace15radius2VelocityEf+0x10c>
 80033b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d504      	bpl.n	80033cc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e05e      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 80033cc:	edd7 7a00 	vldr	s15, [r7]
 80033d0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80034a4 <_ZN9LineTrace15radius2VelocityEf+0x110>
 80033d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d502      	bpl.n	80033e4 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80033de:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e052      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 80033e4:	edd7 7a00 	vldr	s15, [r7]
 80033e8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80034ac <_ZN9LineTrace15radius2VelocityEf+0x118>
 80033ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f4:	d503      	bpl.n	80033fe <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80033f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e045      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e040      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800340e:	3354      	adds	r3, #84	; 0x54
 8003410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d136      	bne.n	8003486 <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 8003418:	edd7 7a00 	vldr	s15, [r7]
 800341c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80034b0 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	d504      	bpl.n	8003434 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e02a      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 8003434:	edd7 7a00 	vldr	s15, [r7]
 8003438:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80034b4 <_ZN9LineTrace15radius2VelocityEf+0x120>
 800343c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	d502      	bpl.n	800344c <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <_ZN9LineTrace15radius2VelocityEf+0x124>)
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e01e      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 800344c:	edd7 7a00 	vldr	s15, [r7]
 8003450:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80034bc <_ZN9LineTrace15radius2VelocityEf+0x128>
 8003454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	d502      	bpl.n	8003464 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <_ZN9LineTrace15radius2VelocityEf+0x12c>)
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e012      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 8003464:	edd7 7a00 	vldr	s15, [r7]
 8003468:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80034c4 <_ZN9LineTrace15radius2VelocityEf+0x130>
 800346c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	d502      	bpl.n	800347c <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e006      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e001      	b.n	800348a <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <_ZN9LineTrace15radius2VelocityEf+0x138>)
 8003488:	60fb      	str	r3, [r7, #12]

	return velocity;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	ee07 3a90 	vmov	s15, r3
}
 8003490:	eeb0 0a67 	vmov.f32	s0, s15
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	43c80000 	.word	0x43c80000
 80034a4:	44480000 	.word	0x44480000
 80034a8:	3fd9999a 	.word	0x3fd9999a
 80034ac:	44af0000 	.word	0x44af0000
 80034b0:	43960000 	.word	0x43960000
 80034b4:	44bb8000 	.word	0x44bb8000
 80034b8:	40066666 	.word	0x40066666
 80034bc:	44fa0000 	.word	0x44fa0000
 80034c0:	40200000 	.word	0x40200000
 80034c4:	451c4000 	.word	0x451c4000
 80034c8:	40400000 	.word	0x40400000
 80034cc:	3fa66666 	.word	0x3fa66666

080034d0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034dc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034de:	f241 736f 	movw	r3, #5999	; 0x176f
 80034e2:	83fb      	strh	r3, [r7, #30]
 80034e4:	8bfb      	ldrh	r3, [r7, #30]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 808d 	beq.w	8003606 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80034ec:	8bfb      	ldrh	r3, [r7, #30]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f6:	3304      	adds	r3, #4
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	ed93 7a00 	vldr	s14, [r3]
 8003500:	8bfb      	ldrh	r3, [r7, #30]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003508:	3304      	adds	r3, #4
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003516:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800351a:	edd7 7a06 	vldr	s15, [r7, #24]
 800351e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	dd6a      	ble.n	80035fe <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f820 	bl	8000578 <__aeabi_f2d>
 8003538:	a335      	add	r3, pc, #212	; (adr r3, 8003610 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f7fd f873 	bl	8000628 <__aeabi_dmul>
 8003542:	4603      	mov	r3, r0
 8003544:	460c      	mov	r4, r1
 8003546:	4625      	mov	r5, r4
 8003548:	461c      	mov	r4, r3
 800354a:	69b8      	ldr	r0, [r7, #24]
 800354c:	f7fd f814 	bl	8000578 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fd f990 	bl	800087c <__aeabi_ddiv>
 800355c:	4603      	mov	r3, r0
 800355e:	460c      	mov	r4, r1
 8003560:	4618      	mov	r0, r3
 8003562:	4621      	mov	r1, r4
 8003564:	f7fd fb58 	bl	8000c18 <__aeabi_d2f>
 8003568:	4603      	mov	r3, r0
 800356a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800356c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003570:	ed97 7a05 	vldr	s14, [r7, #20]
 8003574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003578:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800357c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003580:	edd7 7a02 	vldr	s15, [r7, #8]
 8003584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	dd37      	ble.n	80035fe <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800358e:	8bfb      	ldrh	r3, [r7, #30]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003596:	3304      	adds	r3, #4
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffea 	bl	8000578 <__aeabi_f2d>
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	8bfb      	ldrh	r3, [r7, #30]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	ed93 7a00 	vldr	s14, [r3]
 80035b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035bc:	ee17 0a90 	vmov	r0, s15
 80035c0:	f7fc ffda 	bl	8000578 <__aeabi_f2d>
 80035c4:	a312      	add	r3, pc, #72	; (adr r3, 8003610 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fd f82d 	bl	8000628 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4620      	mov	r0, r4
 80035d4:	4629      	mov	r1, r5
 80035d6:	f7fc fe71 	bl	80002bc <__adddf3>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	8bfb      	ldrh	r3, [r7, #30]
 80035e4:	1e5c      	subs	r4, r3, #1
 80035e6:	4608      	mov	r0, r1
 80035e8:	4611      	mov	r1, r2
 80035ea:	f7fd fb15 	bl	8000c18 <__aeabi_d2f>
 80035ee:	4601      	mov	r1, r0
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035f6:	3304      	adds	r3, #4
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80035fe:	8bfb      	ldrh	r3, [r7, #30]
 8003600:	3b01      	subs	r3, #1
 8003602:	83fb      	strh	r3, [r7, #30]
 8003604:	e76e      	b.n	80034e4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003606:	bf00      	nop
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bdb0      	pop	{r4, r5, r7, pc}
 800360e:	bf00      	nop
 8003610:	d2f1a9fc 	.word	0xd2f1a9fc
 8003614:	3f50624d 	.word	0x3f50624d

08003618 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	ed87 0a02 	vstr	s0, [r7, #8]
 8003624:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003626:	2300      	movs	r3, #0
 8003628:	83fb      	strh	r3, [r7, #30]
 800362a:	8bfb      	ldrh	r3, [r7, #30]
 800362c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003630:	4293      	cmp	r3, r2
 8003632:	f200 808d 	bhi.w	8003750 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003636:	8bfb      	ldrh	r3, [r7, #30]
 8003638:	3301      	adds	r3, #1
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003640:	3304      	adds	r3, #4
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	ed93 7a00 	vldr	s14, [r3]
 800364a:	8bfb      	ldrh	r3, [r7, #30]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003652:	3304      	adds	r3, #4
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003660:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003664:	edd7 7a06 	vldr	s15, [r7, #24]
 8003668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	dd6a      	ble.n	8003748 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 8003672:	8bfb      	ldrh	r3, [r7, #30]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff7b 	bl	8000578 <__aeabi_f2d>
 8003682:	a335      	add	r3, pc, #212	; (adr r3, 8003758 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f7fc ffce 	bl	8000628 <__aeabi_dmul>
 800368c:	4603      	mov	r3, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4625      	mov	r5, r4
 8003692:	461c      	mov	r4, r3
 8003694:	69b8      	ldr	r0, [r7, #24]
 8003696:	f7fc ff6f 	bl	8000578 <__aeabi_f2d>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fd f8eb 	bl	800087c <__aeabi_ddiv>
 80036a6:	4603      	mov	r3, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	4618      	mov	r0, r3
 80036ac:	4621      	mov	r1, r4
 80036ae:	f7fd fab3 	bl	8000c18 <__aeabi_d2f>
 80036b2:	4603      	mov	r3, r0
 80036b4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80036b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80036ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80036be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c2:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80036c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80036ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	dd37      	ble.n	8003748 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80036d8:	8bfb      	ldrh	r3, [r7, #30]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036e0:	3304      	adds	r3, #4
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff45 	bl	8000578 <__aeabi_f2d>
 80036ee:	4604      	mov	r4, r0
 80036f0:	460d      	mov	r5, r1
 80036f2:	8bfb      	ldrh	r3, [r7, #30]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	ed93 7a00 	vldr	s14, [r3]
 80036fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	ee17 0a90 	vmov	r0, s15
 800370a:	f7fc ff35 	bl	8000578 <__aeabi_f2d>
 800370e:	a312      	add	r3, pc, #72	; (adr r3, 8003758 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fc ff88 	bl	8000628 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4620      	mov	r0, r4
 800371e:	4629      	mov	r1, r5
 8003720:	f7fc fdcc 	bl	80002bc <__adddf3>
 8003724:	4603      	mov	r3, r0
 8003726:	460c      	mov	r4, r1
 8003728:	4619      	mov	r1, r3
 800372a:	4622      	mov	r2, r4
 800372c:	8bfb      	ldrh	r3, [r7, #30]
 800372e:	1c5c      	adds	r4, r3, #1
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	f7fd fa70 	bl	8000c18 <__aeabi_d2f>
 8003738:	4601      	mov	r1, r0
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003740:	3304      	adds	r3, #4
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003748:	8bfb      	ldrh	r3, [r7, #30]
 800374a:	3301      	adds	r3, #1
 800374c:	83fb      	strh	r3, [r7, #30]
 800374e:	e76c      	b.n	800362a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003750:	bf00      	nop
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bdb0      	pop	{r4, r5, r7, pc}
 8003758:	d2f1a9fc 	.word	0xd2f1a9fc
 800375c:	3f50624d 	.word	0x3f50624d

08003760 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd ffe5 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003778:	3350      	adds	r3, #80	; 0x50
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003794:	3350      	adds	r3, #80	; 0x50
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a0:	3352      	adds	r3, #82	; 0x52
 80037a2:	2200      	movs	r2, #0
 80037a4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037ac:	330c      	adds	r3, #12
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ce:	3350      	adds	r3, #80	; 0x50
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8086 	beq.w	80038e4 <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd ff81 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80037e2:	eeb0 7a40 	vmov.f32	s14, s0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037ec:	330c      	adds	r3, #12
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	bfac      	ite	ge
 80037fc:	2301      	movge	r3, #1
 80037fe:	2300      	movlt	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d026      	beq.n	8003854 <_ZN9LineTrace20updateTargetVelocityEv+0x94>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800380c:	330c      	adds	r3, #12
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003818:	3352      	adds	r3, #82	; 0x52
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	3332      	adds	r3, #50	; 0x32
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
 8003826:	edd3 7a00 	vldr	s15, [r3]
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003834:	330c      	adds	r3, #12
 8003836:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003840:	3352      	adds	r3, #82	; 0x52
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800384e:	3352      	adds	r3, #82	; 0x52
 8003850:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003852:	e7c1      	b.n	80037d8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800385a:	3352      	adds	r3, #82	; 0x52
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003862:	4293      	cmp	r3, r2
 8003864:	d906      	bls.n	8003874 <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800386c:	3352      	adds	r3, #82	; 0x52
 800386e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003872:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800387a:	330c      	adds	r3, #12
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003880:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd ff2c 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800388c:	eef0 7a40 	vmov.f32	s15, s0
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003892:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800389c:	3352      	adds	r3, #82	; 0x52
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80038a2:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038aa:	3352      	adds	r3, #82	; 0x52
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80038b4:	3304      	adds	r3, #4
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 faf3 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038ce:	3352      	adds	r3, #82	; 0x52
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80038d8:	3304      	adds	r3, #4
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80038e2:	6013      	str	r3, [r2, #0]

	}
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000026c 	.word	0x2000026c
 80038f0:	20000270 	.word	0x20000270
 80038f4:	20000274 	.word	0x20000274
 80038f8:	20000278 	.word	0x20000278

080038fc <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd fed8 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003916:	eeb0 7a40 	vmov.f32	s14, s0
 800391a:	edd7 7a00 	vldr	s15, [r7]
 800391e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800395c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003964:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003984:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003988:	4a44      	ldr	r2, [pc, #272]	; (8003a9c <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800398e:	4a44      	ldr	r2, [pc, #272]	; (8003aa0 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003994:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f083 0301 	eor.w	r3, r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04d      	beq.n	8003a3e <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80039a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003aa8 <_ZN9LineTrace11isCrossLineEv+0x168>
 80039aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b2:	d50f      	bpl.n	80039d4 <_ZN9LineTrace11isCrossLineEv+0x94>
 80039b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80039b8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003aa8 <_ZN9LineTrace11isCrossLineEv+0x168>
 80039bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c4:	d506      	bpl.n	80039d4 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80039c6:	4b39      	ldr	r3, [pc, #228]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	e002      	b.n	80039da <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80039d4:	4b35      	ldr	r3, [pc, #212]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d056      	beq.n	8003a90 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 80039e2:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <_ZN9LineTrace11isCrossLineEv+0x170>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80039e8:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <_ZN9LineTrace11isCrossLineEv+0x164>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80039ee:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80039fa:	3324      	adds	r3, #36	; 0x24
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a06:	3354      	adds	r3, #84	; 0x54
 8003a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a16:	333a      	adds	r3, #58	; 0x3a
 8003a18:	2200      	movs	r2, #0
 8003a1a:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff facb 	bl	8002fb8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003a22:	e035      	b.n	8003a90 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a2a:	333a      	adds	r3, #58	; 0x3a
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fbf7 	bl	8003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff faf4 	bl	8003024 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003a3c:	e028      	b.n	8003a90 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a42:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ab4 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4e:	dd0f      	ble.n	8003a70 <_ZN9LineTrace11isCrossLineEv+0x130>
 8003a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a54:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003ab4 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	dd06      	ble.n	8003a70 <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003a6c:	801a      	strh	r2, [r3, #0]
 8003a6e:	e002      	b.n	8003a76 <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d908      	bls.n	8003a90 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003a84:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000264 	.word	0x20000264
 8003aa0:	20000268 	.word	0x20000268
 8003aa4:	20000287 	.word	0x20000287
 8003aa8:	44160000 	.word	0x44160000
 8003aac:	20000284 	.word	0x20000284
 8003ab0:	20000286 	.word	0x20000286
 8003ab4:	43fa0000 	.word	0x43fa0000

08003ab8 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fdfc 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003ace:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fc3d 	bl	8005356 <_ZN8Odometry8getThetaEv>
 8003adc:	ec54 3b10 	vmov	r3, r4, d0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	f7fd f898 	bl	8000c18 <__aeabi_d2f>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8003af0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	d101      	bne.n	8003afe <_ZN9LineTrace8isStableEv+0x46>
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <_ZN9LineTrace8isStableEv+0xd0>)
 8003afc:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003afe:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b0a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b0e:	f7fe ffcd 	bl	8002aac <_ZSt3absf>
 8003b12:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003b8c <_ZN9LineTrace8isStableEv+0xd4>
 8003b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	db01      	blt.n	8003b2c <_ZN9LineTrace8isStableEv+0x74>
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <_ZN9LineTrace8isStableEv+0xd8>)
 8003b2a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b32:	3324      	adds	r3, #36	; 0x24
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <_ZN9LineTrace8isStableEv+0xdc>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003b4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b50:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003b98 <_ZN9LineTrace8isStableEv+0xe0>
 8003b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	db06      	blt.n	8003b6c <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <_ZN9LineTrace8isStableEv+0xdc>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <_ZN9LineTrace8isStableEv+0xdc>)
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	e002      	b.n	8003b72 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <_ZN9LineTrace8isStableEv+0xdc>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <_ZN9LineTrace8isStableEv+0xdc>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d901      	bls.n	8003b7e <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}
 8003b88:	3727c5ac 	.word	0x3727c5ac
 8003b8c:	459c4000 	.word	0x459c4000
 8003b90:	459c4000 	.word	0x459c4000
 8003b94:	20000288 	.word	0x20000288
 8003b98:	44fa0000 	.word	0x44fa0000

08003b9c <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b092      	sub	sp, #72	; 0x48
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003ba4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4963      	ldr	r1, [pc, #396]	; (8003d38 <_ZN9LineTrace4initEv+0x19c>)
 8003bac:	4863      	ldr	r0, [pc, #396]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003bae:	f7fd fecb 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003bb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4961      	ldr	r1, [pc, #388]	; (8003d40 <_ZN9LineTrace4initEv+0x1a4>)
 8003bba:	4860      	ldr	r0, [pc, #384]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003bbc:	f7fd fec4 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003bc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	495f      	ldr	r1, [pc, #380]	; (8003d44 <_ZN9LineTrace4initEv+0x1a8>)
 8003bc8:	485c      	ldr	r0, [pc, #368]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003bca:	f7fd febd 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003bce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003bd2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003bd6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003bda:	eeb0 1a66 	vmov.f32	s2, s13
 8003bde:	eef0 0a47 	vmov.f32	s1, s14
 8003be2:	eeb0 0a67 	vmov.f32	s0, s15
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8c6 	bl	8003d78 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4955      	ldr	r1, [pc, #340]	; (8003d48 <_ZN9LineTrace4initEv+0x1ac>)
 8003bf4:	4851      	ldr	r0, [pc, #324]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003bf6:	f7fd fea7 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4952      	ldr	r1, [pc, #328]	; (8003d4c <_ZN9LineTrace4initEv+0x1b0>)
 8003c02:	484e      	ldr	r0, [pc, #312]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c04:	f7fd fea0 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4950      	ldr	r1, [pc, #320]	; (8003d50 <_ZN9LineTrace4initEv+0x1b4>)
 8003c10:	484a      	ldr	r0, [pc, #296]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c12:	f7fd fe99 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003c16:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c1e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003c22:	eeb0 1a66 	vmov.f32	s2, s13
 8003c26:	eef0 0a47 	vmov.f32	s1, s14
 8003c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8e8 	bl	8003e04 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4946      	ldr	r1, [pc, #280]	; (8003d54 <_ZN9LineTrace4initEv+0x1b8>)
 8003c3c:	483f      	ldr	r0, [pc, #252]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c3e:	f7fd fe83 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c46:	2201      	movs	r2, #1
 8003c48:	4943      	ldr	r1, [pc, #268]	; (8003d58 <_ZN9LineTrace4initEv+0x1bc>)
 8003c4a:	483c      	ldr	r0, [pc, #240]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c4c:	f7fd fe7c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c54:	2201      	movs	r2, #1
 8003c56:	4941      	ldr	r1, [pc, #260]	; (8003d5c <_ZN9LineTrace4initEv+0x1c0>)
 8003c58:	4838      	ldr	r0, [pc, #224]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c5a:	f7fd fe75 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003c5e:	f107 0320 	add.w	r3, r7, #32
 8003c62:	2201      	movs	r2, #1
 8003c64:	493e      	ldr	r1, [pc, #248]	; (8003d60 <_ZN9LineTrace4initEv+0x1c4>)
 8003c66:	4835      	ldr	r0, [pc, #212]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c68:	f7fd fe6e 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003c6c:	f107 031c 	add.w	r3, r7, #28
 8003c70:	2201      	movs	r2, #1
 8003c72:	493c      	ldr	r1, [pc, #240]	; (8003d64 <_ZN9LineTrace4initEv+0x1c8>)
 8003c74:	4831      	ldr	r0, [pc, #196]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003c76:	f7fd fe67 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003c7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f913 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003c88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f91c 	bl	8003ece <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003c96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f925 	bl	8003eee <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f92e 	bl	8003f0e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003cb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f937 	bl	8003f2e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003cc0:	f107 0318 	add.w	r3, r7, #24
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4928      	ldr	r1, [pc, #160]	; (8003d68 <_ZN9LineTrace4initEv+0x1cc>)
 8003cc8:	481c      	ldr	r0, [pc, #112]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003cca:	f7fd fe3d 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4925      	ldr	r1, [pc, #148]	; (8003d6c <_ZN9LineTrace4initEv+0x1d0>)
 8003cd6:	4819      	ldr	r0, [pc, #100]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003cd8:	f7fd fe36 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ce0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ce4:	eef0 0a47 	vmov.f32	s1, s14
 8003ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f97e 	bl	8003fee <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003cfe:	f107 0310 	add.w	r3, r7, #16
 8003d02:	2201      	movs	r2, #1
 8003d04:	491a      	ldr	r1, [pc, #104]	; (8003d70 <_ZN9LineTrace4initEv+0x1d4>)
 8003d06:	480d      	ldr	r0, [pc, #52]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003d08:	f7fd fe1e 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	2201      	movs	r2, #1
 8003d12:	4918      	ldr	r1, [pc, #96]	; (8003d74 <_ZN9LineTrace4initEv+0x1d8>)
 8003d14:	4809      	ldr	r0, [pc, #36]	; (8003d3c <_ZN9LineTrace4initEv+0x1a0>)
 8003d16:	f7fd fe17 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003d1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d22:	eef0 0a47 	vmov.f32	s1, s14
 8003d26:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f979 	bl	8004022 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003d30:	bf00      	nop
 8003d32:	3748      	adds	r7, #72	; 0x48
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08019f08 	.word	0x08019f08
 8003d3c:	08019f10 	.word	0x08019f10
 8003d40:	08019f18 	.word	0x08019f18
 8003d44:	08019f20 	.word	0x08019f20
 8003d48:	08019f28 	.word	0x08019f28
 8003d4c:	08019f34 	.word	0x08019f34
 8003d50:	08019f40 	.word	0x08019f40
 8003d54:	08019f4c 	.word	0x08019f4c
 8003d58:	08019f58 	.word	0x08019f58
 8003d5c:	08019f64 	.word	0x08019f64
 8003d60:	08019f70 	.word	0x08019f70
 8003d64:	08019f7c 	.word	0x08019f7c
 8003d68:	08019f88 	.word	0x08019f88
 8003d6c:	08019f90 	.word	0x08019f90
 8003d70:	08019f98 	.word	0x08019f98
 8003d74:	08019fa4 	.word	0x08019fa4

08003d78 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d84:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d88:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
	return kp_;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	ee07 3a90 	vmov	s15, r3
}
 8003dba:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	return ki_;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	ee07 3a90 	vmov	s15, r3
}
 8003dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	return kd_;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	ee07 3a90 	vmov	s15, r3
}
 8003df6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e10:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e14:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	ee07 3a90 	vmov	s15, r3
}
 8003e46:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	ee07 3a90 	vmov	s15, r3
}
 8003e64:	eeb0 0a67 	vmov.f32	s0, s15
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	ee07 3a90 	vmov	s15, r3
}
 8003e82:	eeb0 0a67 	vmov.f32	s0, s15
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f5c:	ee07 3a90 	vmov	s15, r3
}
 8003f60:	eeb0 0a67 	vmov.f32	s0, s15
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f7c:	ee07 3a90 	vmov	s15, r3
}
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f9c:	ee07 3a90 	vmov	s15, r3
}
 8003fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fbc:	ee07 3a90 	vmov	s15, r3
}
 8003fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003fdc:	ee07 3a90 	vmov	s15, r3
}
 8003fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ffa:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004004:	3328      	adds	r3, #40	; 0x28
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004010:	332c      	adds	r3, #44	; 0x2c
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	601a      	str	r2, [r3, #0]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	ed87 0a02 	vstr	s0, [r7, #8]
 800402e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004038:	3330      	adds	r3, #48	; 0x30
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004044:	3334      	adds	r3, #52	; 0x34
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
	return max_acc_;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004064:	3328      	adds	r3, #40	; 0x28
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	ee07 3a90 	vmov	s15, r3
}
 800406c:	eeb0 0a67 	vmov.f32	s0, s15
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004088:	3334      	adds	r3, #52	; 0x34
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	ee07 3a90 	vmov	s15, r3
}
 8004090:	eeb0 0a67 	vmov.f32	s0, s15
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ac:	3330      	adds	r3, #48	; 0x30
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	ee07 3a90 	vmov	s15, r3
}
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
	return max_dec_;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d0:	332c      	adds	r3, #44	; 0x2c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	ee07 3a90 	vmov	s15, r3
}
 80040d8:	eeb0 0a67 	vmov.f32	s0, s15
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8120 	beq.w	800433c <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fe fe4f 	bl	8002da0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fb5c 	bl	80037c0 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8004108:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8004344 <_ZN9LineTrace4flipEv+0x25c>
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fbf5 	bl	80038fc <_ZN9LineTrace16isTargetDistanceEf>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d028      	beq.n	800416a <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff f829 	bl	8003170 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fcca 	bl	8003ab8 <_ZN9LineTrace8isStableEv>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <_ZN9LineTrace4flipEv+0x5c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fbdc 	bl	80058ec <_ZN10SideSensor10getStatusLEv>
 8004134:	4603      	mov	r3, r0
 8004136:	f083 0301 	eor.w	r3, r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <_ZN9LineTrace4flipEv+0x5c>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <_ZN9LineTrace4flipEv+0x5e>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004150:	3323      	adds	r3, #35	; 0x23
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd fae0 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f907 	bl	8005378 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004170:	3323      	adds	r3, #35	; 0x23
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <_ZN9LineTrace4flipEv+0xa4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fbb5 	bl	80058ec <_ZN10SideSensor10getStatusLEv>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <_ZN9LineTrace4flipEv+0xa4>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <_ZN9LineTrace4flipEv+0xa6>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d029      	beq.n	80041e6 <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004198:	3354      	adds	r3, #84	; 0x54
 800419a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041a8:	333a      	adds	r3, #58	; 0x3a
 80041aa:	2200      	movs	r2, #0
 80041ac:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fe ff6e 	bl	8003090 <_ZN9LineTrace21storeSideLineDistanceEv>
 80041b4:	e00b      	b.n	80041ce <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041bc:	333a      	adds	r3, #58	; 0x3a
 80041be:	2200      	movs	r2, #0
 80041c0:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff f888 	bl	80032d8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fe ff99 	bl	8003100 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041d4:	3323      	adds	r3, #35	; 0x23
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e0:	3324      	adds	r3, #36	; 0x24
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fbaa 	bl	8003940 <_ZN9LineTrace11isCrossLineEv>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fba0 	bl	800593c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fab8 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	4618      	mov	r0, r3
 800420c:	f001 fbb0 	bl	8005970 <_ZN10SideSensor13getIgnoreFlagEv>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00f      	beq.n	8004236 <_ZN9LineTrace4flipEv+0x14e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fa9c 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004220:	eeb0 7a40 	vmov.f32	s14, s0
 8004224:	eddf 7a48 	vldr	s15, [pc, #288]	; 8004348 <_ZN9LineTrace4flipEv+0x260>
 8004228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	db01      	blt.n	8004236 <_ZN9LineTrace4flipEv+0x14e>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <_ZN9LineTrace4flipEv+0x150>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d004      	beq.n	8004246 <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fb88 	bl	8005956 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fbde 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800434c <_ZN9LineTrace4flipEv+0x264>
 800425e:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800434c <_ZN9LineTrace4flipEv+0x264>
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fef4 	bl	8006050 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	4618      	mov	r0, r3
 800426e:	f7fd f889 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004278:	3338      	adds	r3, #56	; 0x38
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004286:	3338      	adds	r3, #56	; 0x38
 8004288:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004290:	3338      	adds	r3, #56	; 0x38
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	f242 720f 	movw	r2, #9999	; 0x270f
 8004298:	4293      	cmp	r3, r2
 800429a:	d906      	bls.n	80042aa <_ZN9LineTrace4flipEv+0x1c2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042a2:	3338      	adds	r3, #56	; 0x38
 80042a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80042a8:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042b0:	3338      	adds	r3, #56	; 0x38
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80042b8:	d806      	bhi.n	80042c8 <_ZN9LineTrace4flipEv+0x1e0>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	330c      	adds	r3, #12
 80042be:	2152      	movs	r1, #82	; 0x52
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd ffc7 	bl	8002254 <_ZN3LED9fullColorEc>
 80042c6:	e005      	b.n	80042d4 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	330c      	adds	r3, #12
 80042cc:	2142      	movs	r1, #66	; 0x42
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd ffc0 	bl	8002254 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042da:	333a      	adds	r3, #58	; 0x3a
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042e8:	333a      	adds	r3, #58	; 0x3a
 80042ea:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042f2:	333a      	adds	r3, #58	; 0x3a
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d906      	bls.n	800430c <_ZN9LineTrace4flipEv+0x224>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004304:	333a      	adds	r3, #58	; 0x3a
 8004306:	f242 7210 	movw	r2, #10000	; 0x2710
 800430a:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004312:	333a      	adds	r3, #58	; 0x3a
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2bc8      	cmp	r3, #200	; 0xc8
 8004318:	d808      	bhi.n	800432c <_ZN9LineTrace4flipEv+0x244>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	330c      	adds	r3, #12
 800431e:	f04f 32ff 	mov.w	r2, #4294967295
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe f851 	bl	80023cc <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 800432a:	e007      	b.n	800433c <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	330c      	adds	r3, #12
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe f848 	bl	80023cc <_ZN3LED2LREaa>
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	42480000 	.word	0x42480000
 8004348:	428c0000 	.word	0x428c0000
 800434c:	00000000 	.word	0x00000000

08004350 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004362:	3354      	adds	r3, #84	; 0x54
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	801a      	strh	r2, [r3, #0]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4618      	mov	r0, r3
 8004392:	f001 feb6 	bl	8006102 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fabe 	bl	800591c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043a6:	3318      	adds	r3, #24
 80043a8:	2200      	movs	r2, #0
 80043aa:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043b2:	331c      	adds	r3, #28
 80043b4:	2200      	movs	r2, #0
 80043b6:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043be:	331e      	adds	r3, #30
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043ca:	3320      	adds	r3, #32
 80043cc:	2200      	movs	r2, #0
 80043ce:	801a      	strh	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80043e4:	2300      	movs	r3, #0
 80043e6:	737b      	strb	r3, [r7, #13]
	start();
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ffc3 	bl	8004374 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80043ee:	7b7b      	ldrb	r3, [r7, #13]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d161      	bne.n	80044b8 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 80043f4:	89fb      	ldrh	r3, [r7, #14]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <_ZN9LineTrace7runningEv+0x28>
 80043fa:	2b0a      	cmp	r3, #10
 80043fc:	d030      	beq.n	8004460 <_ZN9LineTrace7runningEv+0x88>
 80043fe:	e05a      	b.n	80044b6 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4618      	mov	r0, r3
 8004406:	f001 fa7d 	bl	8005904 <_ZN10SideSensor16getWhiteLineCntREv>
 800440a:	4603      	mov	r3, r0
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04a      	beq.n	80044b0 <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fe fda0 	bl	8002f60 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004426:	3354      	adds	r3, #84	; 0x54
 8004428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff f995 	bl	8003760 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd f99b 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd f979 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	330c      	adds	r3, #12
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd ffb9 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 800445a:	230a      	movs	r3, #10
 800445c:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800445e:	e027      	b.n	80044b0 <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	4618      	mov	r0, r3
 8004466:	f001 fa4d 	bl	8005904 <_ZN10SideSensor16getWhiteLineCntREv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b02      	cmp	r3, #2
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01c      	beq.n	80044b4 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	330c      	adds	r3, #12
 800447e:	214d      	movs	r1, #77	; 0x4d
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd fee7 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe fd85 	bl	8002f96 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff f97a 	bl	8003786 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004492:	2064      	movs	r0, #100	; 0x64
 8004494:	f005 fd98 	bl	8009fc8 <HAL_Delay>

				setTargetVelocity(0);
 8004498:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80044c8 <_ZN9LineTrace7runningEv+0xf0>
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fd06 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80044a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044a6:	f005 fd8f 	bl	8009fc8 <HAL_Delay>

				goal_flag = true;
 80044aa:	2301      	movs	r3, #1
 80044ac:	737b      	strb	r3, [r7, #13]

			}

			break;
 80044ae:	e001      	b.n	80044b4 <_ZN9LineTrace7runningEv+0xdc>
			break;
 80044b0:	bf00      	nop
 80044b2:	e79c      	b.n	80043ee <_ZN9LineTrace7runningEv+0x16>
			break;
 80044b4:	bf00      	nop
	while(goal_flag == false){
 80044b6:	e79a      	b.n	80043ee <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f807 	bl	80044cc <_ZN9LineTrace4stopEv>
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	00000000 	.word	0x00000000

080044cc <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 fe21 	bl	8006128 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	330c      	adds	r3, #12
 80044ea:	2201      	movs	r2, #1
 80044ec:	f04f 31ff 	mov.w	r1, #4294967295
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd ff6b 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044fc:	3354      	adds	r3, #84	; 0x54
 80044fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11e      	bne.n	8004544 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69d8      	ldr	r0, [r3, #28]
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <_ZN9LineTrace4stopEv+0xe0>)
 800450c:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <_ZN9LineTrace4stopEv+0xe4>)
 800450e:	4929      	ldr	r1, [pc, #164]	; (80045b4 <_ZN9LineTrace4stopEv+0xe8>)
 8004510:	f000 fbe8 	bl	8004ce4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800451a:	3358      	adds	r3, #88	; 0x58
 800451c:	2200      	movs	r2, #0
 800451e:	9200      	str	r2, [sp, #0]
 8004520:	2264      	movs	r2, #100	; 0x64
 8004522:	4925      	ldr	r1, [pc, #148]	; (80045b8 <_ZN9LineTrace4stopEv+0xec>)
 8004524:	4823      	ldr	r0, [pc, #140]	; (80045b4 <_ZN9LineTrace4stopEv+0xe8>)
 8004526:	f7fd f9a9 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004530:	3378      	adds	r3, #120	; 0x78
 8004532:	2200      	movs	r2, #0
 8004534:	9200      	str	r2, [sp, #0]
 8004536:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800453a:	4920      	ldr	r1, [pc, #128]	; (80045bc <_ZN9LineTrace4stopEv+0xf0>)
 800453c:	481d      	ldr	r0, [pc, #116]	; (80045b4 <_ZN9LineTrace4stopEv+0xe8>)
 800453e:	f7fd f99d 	bl	800187c <sd_write_array_float>
 8004542:	e01d      	b.n	8004580 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69d8      	ldr	r0, [r3, #28]
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <_ZN9LineTrace4stopEv+0xf4>)
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <_ZN9LineTrace4stopEv+0xf8>)
 800454c:	4919      	ldr	r1, [pc, #100]	; (80045b4 <_ZN9LineTrace4stopEv+0xe8>)
 800454e:	f000 fbec 	bl	8004d2a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004558:	33e8      	adds	r3, #232	; 0xe8
 800455a:	2200      	movs	r2, #0
 800455c:	9200      	str	r2, [sp, #0]
 800455e:	2264      	movs	r2, #100	; 0x64
 8004560:	4919      	ldr	r1, [pc, #100]	; (80045c8 <_ZN9LineTrace4stopEv+0xfc>)
 8004562:	4814      	ldr	r0, [pc, #80]	; (80045b4 <_ZN9LineTrace4stopEv+0xe8>)
 8004564:	f7fd f98a 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800456e:	3348      	adds	r3, #72	; 0x48
 8004570:	2200      	movs	r2, #0
 8004572:	9200      	str	r2, [sp, #0]
 8004574:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004578:	4914      	ldr	r1, [pc, #80]	; (80045cc <_ZN9LineTrace4stopEv+0x100>)
 800457a:	480e      	ldr	r0, [pc, #56]	; (80045b4 <_ZN9LineTrace4stopEv+0xe8>)
 800457c:	f7fd f97e 	bl	800187c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	330c      	adds	r3, #12
 8004584:	2200      	movs	r2, #0
 8004586:	f04f 31ff 	mov.w	r1, #4294967295
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd ff1e 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fc58 	bl	8004e4a <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fc07 	bl	8004db2 <_ZN6Logger10resetLogs2Ev>
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	08019fb0 	.word	0x08019fb0
 80045b0:	08019fbc 	.word	0x08019fbc
 80045b4:	08019fcc 	.word	0x08019fcc
 80045b8:	08019fd8 	.word	0x08019fd8
 80045bc:	08019fe8 	.word	0x08019fe8
 80045c0:	08019ff4 	.word	0x08019ff4
 80045c4:	0801a000 	.word	0x0801a000
 80045c8:	0801a010 	.word	0x0801a010
 80045cc:	0801a020 	.word	0x0801a020

080045d0 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b08b      	sub	sp, #44	; 0x2c
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fb25 	bl	8004c2c <_ZN6Logger23getDistanceArrayPointerEv>
 80045e2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fb2d 	bl	8004c48 <_ZN6Logger20getThetaArrayPointerEv>
 80045ee:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045f0:	2300      	movs	r3, #0
 80045f2:	837b      	strh	r3, [r7, #26]
 80045f4:	8b7b      	ldrh	r3, [r7, #26]
 80045f6:	f241 726f 	movw	r2, #5999	; 0x176f
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d84b      	bhi.n	8004696 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80045fe:	8b7b      	ldrh	r3, [r7, #26]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800460a:	8b7b      	ldrh	r3, [r7, #26]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004616:	edd7 7a07 	vldr	s15, [r7, #28]
 800461a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d101      	bne.n	8004628 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004626:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004628:	ed97 7a02 	vldr	s14, [r7, #8]
 800462c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004630:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004634:	eeb0 0a66 	vmov.f32	s0, s13
 8004638:	f7fe fa38 	bl	8002aac <_ZSt3absf>
 800463c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004640:	edd7 7a05 	vldr	s15, [r7, #20]
 8004644:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800475c <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004650:	db01      	blt.n	8004656 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004652:	4b43      	ldr	r3, [pc, #268]	; (8004760 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004654:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004656:	8b7c      	ldrh	r4, [r7, #26]
 8004658:	ed97 0a05 	vldr	s0, [r7, #20]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fe fe99 	bl	8003394 <_ZN9LineTrace15radius2VelocityEf>
 8004662:	eef0 7a40 	vmov.f32	s15, s0
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800466c:	3304      	adds	r3, #4
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004676:	8b7b      	ldrh	r3, [r7, #26]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	441a      	add	r2, r3
 800467e:	8b7b      	ldrh	r3, [r7, #26]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3304      	adds	r3, #4
 800468c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800468e:	8b7b      	ldrh	r3, [r7, #26]
 8004690:	3301      	adds	r3, #1
 8004692:	837b      	strh	r3, [r7, #26]
 8004694:	e7ae      	b.n	80045f4 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800469c:	3354      	adds	r3, #84	; 0x54
 800469e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d120      	bne.n	80046e8 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046b2:	3310      	adds	r3, #16
 80046b4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046bc:	332c      	adds	r3, #44	; 0x2c
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	eeb0 0a67 	vmov.f32	s0, s15
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fe ff01 	bl	80034d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046d4:	3328      	adds	r3, #40	; 0x28
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	6939      	ldr	r1, [r7, #16]
 80046dc:	eeb0 0a67 	vmov.f32	s0, s15
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fe ff99 	bl	8003618 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80046e6:	e027      	b.n	8004738 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046ee:	3354      	adds	r3, #84	; 0x54
 80046f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d11f      	bne.n	8004738 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004704:	3310      	adds	r3, #16
 8004706:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800470e:	3334      	adds	r3, #52	; 0x34
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	6939      	ldr	r1, [r7, #16]
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe fed8 	bl	80034d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004726:	3330      	adds	r3, #48	; 0x30
 8004728:	edd3 7a00 	vldr	s15, [r3]
 800472c:	6939      	ldr	r1, [r7, #16]
 800472e:	eeb0 0a67 	vmov.f32	s0, s15
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fe ff70 	bl	8003618 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800473e:	3310      	adds	r3, #16
 8004740:	2200      	movs	r2, #0
 8004742:	9200      	str	r2, [sp, #0]
 8004744:	f241 7270 	movw	r2, #6000	; 0x1770
 8004748:	4906      	ldr	r1, [pc, #24]	; (8004764 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800474a:	4807      	ldr	r0, [pc, #28]	; (8004768 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 800474c:	f7fd f896 	bl	800187c <sd_write_array_float>

}
 8004750:	bf00      	nop
 8004752:	3724      	adds	r7, #36	; 0x24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd90      	pop	{r4, r7, pc}
 8004758:	3727c5ac 	.word	0x3727c5ac
 800475c:	459c4000 	.word	0x459c4000
 8004760:	459c4000 	.word	0x459c4000
 8004764:	0801a030 	.word	0x0801a030
 8004768:	08019fcc 	.word	0x08019fcc

0800476c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b08b      	sub	sp, #44	; 0x2c
 8004770:	af02      	add	r7, sp, #8
 8004772:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69d8      	ldr	r0, [r3, #28]
 8004778:	4b6b      	ldr	r3, [pc, #428]	; (8004928 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800477a:	4a6c      	ldr	r2, [pc, #432]	; (800492c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 800477c:	496c      	ldr	r1, [pc, #432]	; (8004930 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800477e:	f000 faf9 	bl	8004d74 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004788:	3358      	adds	r3, #88	; 0x58
 800478a:	2264      	movs	r2, #100	; 0x64
 800478c:	4969      	ldr	r1, [pc, #420]	; (8004934 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800478e:	4868      	ldr	r0, [pc, #416]	; (8004930 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004790:	f7fd f8da 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800479a:	3378      	adds	r3, #120	; 0x78
 800479c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047a0:	4965      	ldr	r1, [pc, #404]	; (8004938 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80047a2:	4863      	ldr	r0, [pc, #396]	; (8004930 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80047a4:	f7fd f8d0 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fa3d 	bl	8004c2c <_ZN6Logger23getDistanceArrayPointerEv>
 80047b2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fa45 	bl	8004c48 <_ZN6Logger20getThetaArrayPointerEv>
 80047be:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047c0:	2300      	movs	r3, #0
 80047c2:	837b      	strh	r3, [r7, #26]
 80047c4:	8b7b      	ldrh	r3, [r7, #26]
 80047c6:	f241 726f 	movw	r2, #5999	; 0x176f
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d84b      	bhi.n	8004866 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80047ce:	8b7b      	ldrh	r3, [r7, #26]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4413      	add	r3, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80047da:	8b7b      	ldrh	r3, [r7, #26]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80047e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80047ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f2:	d101      	bne.n	80047f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80047f4:	4b51      	ldr	r3, [pc, #324]	; (800493c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80047f6:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80047f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80047fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004800:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004804:	eeb0 0a66 	vmov.f32	s0, s13
 8004808:	f7fe f950 	bl	8002aac <_ZSt3absf>
 800480c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004810:	edd7 7a05 	vldr	s15, [r7, #20]
 8004814:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004940 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004820:	db01      	blt.n	8004826 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004822:	4b48      	ldr	r3, [pc, #288]	; (8004944 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004824:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004826:	8b7c      	ldrh	r4, [r7, #26]
 8004828:	ed97 0a05 	vldr	s0, [r7, #20]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fe fdb1 	bl	8003394 <_ZN9LineTrace15radius2VelocityEf>
 8004832:	eef0 7a40 	vmov.f32	s15, s0
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800483c:	3304      	adds	r3, #4
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004846:	8b7b      	ldrh	r3, [r7, #26]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	441a      	add	r2, r3
 800484e:	8b7b      	ldrh	r3, [r7, #26]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	3332      	adds	r3, #50	; 0x32
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3304      	adds	r3, #4
 800485c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800485e:	8b7b      	ldrh	r3, [r7, #26]
 8004860:	3301      	adds	r3, #1
 8004862:	837b      	strh	r3, [r7, #26]
 8004864:	e7ae      	b.n	80047c4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800486c:	3354      	adds	r3, #84	; 0x54
 800486e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d120      	bne.n	80048b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004882:	3310      	adds	r3, #16
 8004884:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800488c:	332c      	adds	r3, #44	; 0x2c
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	6939      	ldr	r1, [r7, #16]
 8004894:	eeb0 0a67 	vmov.f32	s0, s15
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fe fe19 	bl	80034d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048a4:	3328      	adds	r3, #40	; 0x28
 80048a6:	edd3 7a00 	vldr	s15, [r3]
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	eeb0 0a67 	vmov.f32	s0, s15
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fe feb1 	bl	8003618 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80048b6:	e027      	b.n	8004908 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80048be:	3354      	adds	r3, #84	; 0x54
 80048c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d11f      	bne.n	8004908 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80048d4:	3310      	adds	r3, #16
 80048d6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048de:	3334      	adds	r3, #52	; 0x34
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	6939      	ldr	r1, [r7, #16]
 80048e6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fe fdf0 	bl	80034d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048f6:	3330      	adds	r3, #48	; 0x30
 80048f8:	edd3 7a00 	vldr	s15, [r3]
 80048fc:	6939      	ldr	r1, [r7, #16]
 80048fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe fe88 	bl	8003618 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800490e:	3310      	adds	r3, #16
 8004910:	2200      	movs	r2, #0
 8004912:	9200      	str	r2, [sp, #0]
 8004914:	f241 7270 	movw	r2, #6000	; 0x1770
 8004918:	490b      	ldr	r1, [pc, #44]	; (8004948 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800491c:	f7fc ffae 	bl	800187c <sd_write_array_float>

}
 8004920:	bf00      	nop
 8004922:	3724      	adds	r7, #36	; 0x24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd90      	pop	{r4, r7, pc}
 8004928:	08019fb0 	.word	0x08019fb0
 800492c:	08019fbc 	.word	0x08019fbc
 8004930:	08019fcc 	.word	0x08019fcc
 8004934:	08019fd8 	.word	0x08019fd8
 8004938:	08019fe8 	.word	0x08019fe8
 800493c:	3727c5ac 	.word	0x3727c5ac
 8004940:	459c4000 	.word	0x459c4000
 8004944:	459c4000 	.word	0x459c4000
 8004948:	0801a030 	.word	0x0801a030

0800494c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800495a:	33c0      	adds	r3, #192	; 0xc0
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004966:	33c2      	adds	r3, #194	; 0xc2
 8004968:	2200      	movs	r2, #0
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004972:	33c4      	adds	r3, #196	; 0xc4
 8004974:	2200      	movs	r2, #0
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800497e:	33c6      	adds	r3, #198	; 0xc6
 8004980:	2200      	movs	r2, #0
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800498a:	33c8      	adds	r3, #200	; 0xc8
 800498c:	2200      	movs	r2, #0
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004996:	33ca      	adds	r3, #202	; 0xca
 8004998:	2200      	movs	r2, #0
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80049b8:	f7fd f8b2 	bl	8001b20 <sd_mount>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b01      	cmp	r3, #1
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80049cc:	f7fc fb68 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80049d0:	2100      	movs	r1, #0
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7fc fb74 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80049d8:	4815      	ldr	r0, [pc, #84]	; (8004a30 <_ZN6Logger10sdCardInitEv+0x84>)
 80049da:	f7fc fb9b 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80049de:	2101      	movs	r1, #1
 80049e0:	2000      	movs	r0, #0
 80049e2:	f7fc fb6d 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80049e6:	4813      	ldr	r0, [pc, #76]	; (8004a34 <_ZN6Logger10sdCardInitEv+0x88>)
 80049e8:	f7fc fb94 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80049ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049f0:	f005 faea 	bl	8009fc8 <HAL_Delay>

	  ret = true;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	e015      	b.n	8004a26 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80049fa:	f7fc fb51 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80049fe:	2100      	movs	r1, #0
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7fc fb5d 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004a06:	480a      	ldr	r0, [pc, #40]	; (8004a30 <_ZN6Logger10sdCardInitEv+0x84>)
 8004a08:	f7fc fb84 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7fc fb56 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004a14:	4808      	ldr	r0, [pc, #32]	; (8004a38 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004a16:	f7fc fb7d 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a1e:	f005 fad3 	bl	8009fc8 <HAL_Delay>

	  ret = false;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	0801a040 	.word	0x0801a040
 8004a34:	0801a04c 	.word	0x0801a04c
 8004a38:	0801a054 	.word	0x0801a054

08004a3c <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a4e:	33c0      	adds	r3, #192	; 0xc0
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d025      	beq.n	8004aa2 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a5c:	33c6      	adds	r3, #198	; 0xc6
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8004a68:	8879      	ldrh	r1, [r7, #2]
 8004a6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a74:	33c6      	adds	r3, #198	; 0xc6
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a82:	33c6      	adds	r3, #198	; 0xc6
 8004a84:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8c:	33c6      	adds	r3, #198	; 0xc6
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004a94:	d305      	bcc.n	8004aa2 <_ZN6Logger11storeLogIntEs+0x66>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a9c:	33c6      	adds	r3, #198	; 0xc6
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	801a      	strh	r2, [r3, #0]
	}

}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ac0:	33c0      	adds	r3, #192	; 0xc0
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d025      	beq.n	8004b14 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ace:	33c8      	adds	r3, #200	; 0xc8
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004ad8:	3310      	adds	r3, #16
 8004ada:	8879      	ldrh	r1, [r7, #2]
 8004adc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ae6:	33c8      	adds	r3, #200	; 0xc8
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004af4:	33c8      	adds	r3, #200	; 0xc8
 8004af6:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004afe:	33c8      	adds	r3, #200	; 0xc8
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b06:	d305      	bcc.n	8004b14 <_ZN6Logger12storeLog2IntEs+0x66>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b0e:	33c8      	adds	r3, #200	; 0xc8
 8004b10:	2200      	movs	r2, #0
 8004b12:	801a      	strh	r2, [r3, #0]
	}

}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b2c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b36:	33ca      	adds	r3, #202	; 0xca
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004b40:	3310      	adds	r3, #16
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b50:	33ca      	adds	r3, #202	; 0xca
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004b5a:	3320      	adds	r3, #32
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b6a:	33ca      	adds	r3, #202	; 0xca
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b78:	33ca      	adds	r3, #202	; 0xca
 8004b7a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b82:	33ca      	adds	r3, #202	; 0xca
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d905      	bls.n	8004b9a <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b94:	33ca      	adds	r3, #202	; 0xca
 8004b96:	2200      	movs	r2, #0
 8004b98:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bb2:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bbc:	33ca      	adds	r3, #202	; 0xca
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004bc6:	3350      	adds	r3, #80	; 0x50
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bd6:	33ca      	adds	r3, #202	; 0xca
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004be0:	3340      	adds	r3, #64	; 0x40
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bf0:	33ca      	adds	r3, #202	; 0xca
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bfe:	33ca      	adds	r3, #202	; 0xca
 8004c00:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c08:	33ca      	adds	r3, #202	; 0xca
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f241 726f 	movw	r2, #5999	; 0x176f
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d905      	bls.n	8004c20 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c1a:	33ca      	adds	r3, #202	; 0xca
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c3a:	3340      	adds	r3, #64	; 0x40
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c56:	3380      	adds	r3, #128	; 0x80
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	68b8      	ldr	r0, [r7, #8]
 8004c80:	f7fc fdfc 	bl	800187c <sd_write_array_float>
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	68b8      	ldr	r0, [r7, #8]
 8004cac:	f7fc fed8 	bl	8001a60 <sd_write_array_int>
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004cca:	3320      	adds	r3, #32
 8004ccc:	2200      	movs	r2, #0
 8004cce:	9200      	str	r2, [sp, #0]
 8004cd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	68b8      	ldr	r0, [r7, #8]
 8004cd8:	f7fc fec2 	bl	8001a60 <sd_write_array_int>
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cf8:	3340      	adds	r3, #64	; 0x40
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	9200      	str	r2, [sp, #0]
 8004cfe:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	68b8      	ldr	r0, [r7, #8]
 8004d06:	f7fc fdb9 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004d10:	3380      	adds	r3, #128	; 0x80
 8004d12:	2200      	movs	r2, #0
 8004d14:	9200      	str	r2, [sp, #0]
 8004d16:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	68b8      	ldr	r0, [r7, #8]
 8004d1e:	f7fc fdad 	bl	800187c <sd_write_array_float>
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af02      	add	r7, sp, #8
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004d3e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004d42:	2200      	movs	r2, #0
 8004d44:	9200      	str	r2, [sp, #0]
 8004d46:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	68b8      	ldr	r0, [r7, #8]
 8004d4e:	f7fc fd95 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004d58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	9200      	str	r2, [sp, #0]
 8004d60:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	68b8      	ldr	r0, [r7, #8]
 8004d68:	f7fc fd88 	bl	800187c <sd_write_array_float>
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d88:	3340      	adds	r3, #64	; 0x40
 8004d8a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f7fc fdd9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004d9c:	3380      	adds	r3, #128	; 0x80
 8004d9e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f7fc fdcf 	bl	8001948 <sd_read_array_float>
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004db2:	b480      	push	{r7}
 8004db4:	b08b      	sub	sp, #44	; 0x2c
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004dc0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004dd0:	3340      	adds	r3, #64	; 0x40
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d009      	beq.n	8004df0 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	617b      	str	r3, [r7, #20]
		log = 0;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	3304      	adds	r3, #4
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
 8004dee:	e7f1      	b.n	8004dd4 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004e06:	3340      	adds	r3, #64	; 0x40
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d009      	beq.n	8004e26 <_ZN6Logger10resetLogs2Ev+0x74>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	3304      	adds	r3, #4
 8004e22:	623b      	str	r3, [r7, #32]
 8004e24:	e7f1      	b.n	8004e0a <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004e2c:	33c2      	adds	r3, #194	; 0xc2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004e38:	33ca      	adds	r3, #202	; 0xca
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	801a      	strh	r2, [r3, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	372c      	adds	r7, #44	; 0x2c
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004e58:	33c2      	adds	r3, #194	; 0xc2
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004e64:	33ca      	adds	r3, #202	; 0xca
 8004e66:	2200      	movs	r2, #0
 8004e68:	801a      	strh	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004e84:	33c0      	adds	r3, #192	; 0xc0
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ea4:	33c0      	adds	r3, #192	; 0xc0
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	805a      	strh	r2, [r3, #2]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004ee0:	2108      	movs	r1, #8
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <_ZN5Motor4initEv+0x20>)
 8004ee4:	f00a fa20 	bl	800f328 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ee8:	210c      	movs	r1, #12
 8004eea:	4803      	ldr	r0, [pc, #12]	; (8004ef8 <_ZN5Motor4initEv+0x20>)
 8004eec:	f00a fa1c 	bl	800f328 <HAL_TIM_PWM_Start>

}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200448a8 	.word	0x200448a8

08004efc <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da0d      	bge.n	8004f2a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f14:	481f      	ldr	r0, [pc, #124]	; (8004f94 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f16:	f006 faed 	bl	800b4f4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	425b      	negs	r3, r3
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	81fb      	strh	r3, [r7, #14]
 8004f28:	e00a      	b.n	8004f40 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f30:	4818      	ldr	r0, [pc, #96]	; (8004f94 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f32:	f006 fadf 	bl	800b4f4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da0d      	bge.n	8004f66 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f50:	4810      	ldr	r0, [pc, #64]	; (8004f94 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f52:	f006 facf 	bl	800b4f4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	425b      	negs	r3, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	81bb      	strh	r3, [r7, #12]
 8004f64:	e00a      	b.n	8004f7c <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004f66:	2200      	movs	r2, #0
 8004f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f6c:	4809      	ldr	r0, [pc, #36]	; (8004f94 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f6e:	f006 fac1 	bl	800b4f4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004f7c:	89fa      	ldrh	r2, [r7, #14]
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004f84:	89ba      	ldrh	r2, [r7, #12]
 8004f86:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40020c00 	.word	0x40020c00
 8004f98:	200448a8 	.word	0x200448a8

08004f9c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6178      	str	r0, [r7, #20]
 8004fa4:	ed87 0b02 	vstr	d0, [r7, #8]
 8004fa8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	4b30      	ldr	r3, [pc, #192]	; (8005074 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fb6:	f7fb fdc7 	bl	8000b48 <__aeabi_dcmpgt>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <_ZN5Motor8setRatioEdd+0x30>
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	4c2b      	ldr	r4, [pc, #172]	; (8005074 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fc6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004fca:	e00e      	b.n	8004fea <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <_ZN5Motor8setRatioEdd+0xdc>)
 8004fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd6:	f7fb fd99 	bl	8000b0c <__aeabi_dcmplt>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <_ZN5Motor8setRatioEdd+0x4e>
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	4c24      	ldr	r4, [pc, #144]	; (8005078 <_ZN5Motor8setRatioEdd+0xdc>)
 8004fe6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	4b21      	ldr	r3, [pc, #132]	; (8005074 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff4:	f7fb fda8 	bl	8000b48 <__aeabi_dcmpgt>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <_ZN5Motor8setRatioEdd+0x6e>
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	4c1c      	ldr	r4, [pc, #112]	; (8005074 <_ZN5Motor8setRatioEdd+0xd8>)
 8005004:	e9c7 3400 	strd	r3, r4, [r7]
 8005008:	e00e      	b.n	8005028 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <_ZN5Motor8setRatioEdd+0xdc>)
 8005010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005014:	f7fb fd7a 	bl	8000b0c <__aeabi_dcmplt>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <_ZN5Motor8setRatioEdd+0x8c>
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	4c15      	ldr	r4, [pc, #84]	; (8005078 <_ZN5Motor8setRatioEdd+0xdc>)
 8005024:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <_ZN5Motor8setRatioEdd+0xe0>)
 800502e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005032:	f7fb faf9 	bl	8000628 <__aeabi_dmul>
 8005036:	4603      	mov	r3, r0
 8005038:	460c      	mov	r4, r1
 800503a:	4618      	mov	r0, r3
 800503c:	4621      	mov	r1, r4
 800503e:	f7fb fda3 	bl	8000b88 <__aeabi_d2iz>
 8005042:	4603      	mov	r3, r0
 8005044:	b21a      	sxth	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <_ZN5Motor8setRatioEdd+0xe0>)
 8005050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005054:	f7fb fae8 	bl	8000628 <__aeabi_dmul>
 8005058:	4603      	mov	r3, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4618      	mov	r0, r3
 800505e:	4621      	mov	r1, r4
 8005060:	f7fb fd92 	bl	8000b88 <__aeabi_d2iz>
 8005064:	4603      	mov	r3, r0
 8005066:	b21a      	sxth	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	805a      	strh	r2, [r3, #2]

}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	3ff00000 	.word	0x3ff00000
 8005078:	bff00000 	.word	0xbff00000
 800507c:	409c2000 	.word	0x409c2000

08005080 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80050b4:	b490      	push	{r4, r7}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	f04f 0400 	mov.w	r4, #0
 80050cc:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	f04f 0400 	mov.w	r4, #0
 80050e8:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	f04f 0400 	mov.w	r4, #0
 80050f6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	f04f 0400 	mov.w	r4, #0
 8005104:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	609a      	str	r2, [r3, #8]
}
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bc90      	pop	{r4, r7}
 8005124:	4770      	bx	lr
	...

08005128 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc feca 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 800513c:	ee10 3a10 	vmov	r3, s0
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb fa19 	bl	8000578 <__aeabi_f2d>
 8005146:	4603      	mov	r3, r0
 8005148:	460c      	mov	r4, r1
 800514a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc faa8 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8005158:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800515c:	a376      	add	r3, pc, #472	; (adr r3, 8005338 <_ZN8Odometry12calcPotitionEv+0x210>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005166:	f7fb fa5f 	bl	8000628 <__aeabi_dmul>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7fb f9fc 	bl	8000578 <__aeabi_f2d>
 8005180:	4682      	mov	sl, r0
 8005182:	468b      	mov	fp, r1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005198:	f7fb fb70 	bl	800087c <__aeabi_ddiv>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4640      	mov	r0, r8
 80051a2:	4649      	mov	r1, r9
 80051a4:	f7fb f88a 	bl	80002bc <__adddf3>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	ec43 2b17 	vmov	d7, r2, r3
 80051b0:	eeb0 0a47 	vmov.f32	s0, s14
 80051b4:	eef0 0a67 	vmov.f32	s1, s15
 80051b8:	f00f fbfa 	bl	80149b0 <cos>
 80051bc:	ec53 2b10 	vmov	r2, r3, d0
 80051c0:	4650      	mov	r0, sl
 80051c2:	4659      	mov	r1, fp
 80051c4:	f7fb fa30 	bl	8000628 <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4620      	mov	r0, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7fb f874 	bl	80002bc <__adddf3>
 80051d4:	4603      	mov	r3, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7fb f9c7 	bl	8000578 <__aeabi_f2d>
 80051ea:	4682      	mov	sl, r0
 80051ec:	468b      	mov	fp, r1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005202:	f7fb fb3b 	bl	800087c <__aeabi_ddiv>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4640      	mov	r0, r8
 800520c:	4649      	mov	r1, r9
 800520e:	f7fb f855 	bl	80002bc <__adddf3>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	ec43 2b17 	vmov	d7, r2, r3
 800521a:	eeb0 0a47 	vmov.f32	s0, s14
 800521e:	eef0 0a67 	vmov.f32	s1, s15
 8005222:	f00f fc09 	bl	8014a38 <sin>
 8005226:	ec53 2b10 	vmov	r2, r3, d0
 800522a:	4650      	mov	r0, sl
 800522c:	4659      	mov	r1, fp
 800522e:	f7fb f9fb 	bl	8000628 <__aeabi_dmul>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f83f 	bl	80002bc <__adddf3>
 800523e:	4603      	mov	r3, r0
 8005240:	460c      	mov	r4, r1
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005254:	461a      	mov	r2, r3
 8005256:	4623      	mov	r3, r4
 8005258:	f7fb f830 	bl	80002bc <__adddf3>
 800525c:	4603      	mov	r3, r0
 800525e:	460c      	mov	r4, r1
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	ed93 7b08 	vldr	d7, [r3, #32]
 8005272:	eeb0 0a47 	vmov.f32	s0, s14
 8005276:	eef0 0a67 	vmov.f32	s1, s15
 800527a:	f00f fb99 	bl	80149b0 <cos>
 800527e:	ec51 0b10 	vmov	r0, r1, d0
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	4b28      	ldr	r3, [pc, #160]	; (8005328 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005288:	f7fb f9ce 	bl	8000628 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4620      	mov	r0, r4
 8005292:	4629      	mov	r1, r5
 8005294:	f7fb f812 	bl	80002bc <__adddf3>
 8005298:	4603      	mov	r3, r0
 800529a:	460c      	mov	r4, r1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	ed93 7b08 	vldr	d7, [r3, #32]
 80052ae:	eeb0 0a47 	vmov.f32	s0, s14
 80052b2:	eef0 0a67 	vmov.f32	s1, s15
 80052b6:	f00f fbbf 	bl	8014a38 <sin>
 80052ba:	ec51 0b10 	vmov	r0, r1, d0
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	4b19      	ldr	r3, [pc, #100]	; (8005328 <_ZN8Odometry12calcPotitionEv+0x200>)
 80052c4:	f7fb f9b0 	bl	8000628 <__aeabi_dmul>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fa fff4 	bl	80002bc <__adddf3>
 80052d4:	4603      	mov	r3, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80052e4:	4618      	mov	r0, r3
 80052e6:	4621      	mov	r1, r4
 80052e8:	f7fb fc96 	bl	8000c18 <__aeabi_d2f>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <_ZN8Odometry12calcPotitionEv+0x204>)
 80052f0:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80052f8:	4618      	mov	r0, r3
 80052fa:	4621      	mov	r1, r4
 80052fc:	f7fb fc8c 	bl	8000c18 <__aeabi_d2f>
 8005300:	4602      	mov	r2, r0
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005304:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800530c:	4618      	mov	r0, r3
 800530e:	4621      	mov	r1, r4
 8005310:	f7fb fc82 	bl	8000c18 <__aeabi_d2f>
 8005314:	4602      	mov	r2, r0
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005324:	f3af 8000 	nop.w
 8005328:	405b8000 	.word	0x405b8000
 800532c:	2000028c 	.word	0x2000028c
 8005330:	20000290 	.word	0x20000290
 8005334:	20000294 	.word	0x20000294
 8005338:	d2f1a9fc 	.word	0xd2f1a9fc
 800533c:	3f50624d 	.word	0x3f50624d

08005340 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff feed 	bl	8005128 <_ZN8Odometry12calcPotitionEv>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005356:	b490      	push	{r4, r7}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
	return theta_;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005364:	ec44 3b17 	vmov	d7, r3, r4
}
 8005368:	eeb0 0a47 	vmov.f32	s0, s14
 800536c:	eef0 0a67 	vmov.f32	s1, s15
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bc90      	pop	{r4, r7}
 8005376:	4770      	bx	lr

08005378 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005378:	b490      	push	{r4, r7}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	f04f 0400 	mov.w	r4, #0
 8005398:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc90      	pop	{r4, r7}
 80053b2:	4770      	bx	lr

080053b4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80053b4:	b490      	push	{r4, r7}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	f04f 0400 	mov.w	r4, #0
 80053e8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80053f2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80053f6:	2200      	movs	r2, #0
 80053f8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80053fa:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <_ZN13PathFollowingC1Ev+0xec>)
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <_ZN13PathFollowingC1Ev+0xec>)
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <_ZN13PathFollowingC1Ev+0xec>)
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005424:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f04f 0400 	mov.w	r4, #0
 800542e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005432:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	f04f 0400 	mov.w	r4, #0
 800543c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005440:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	f04f 0400 	mov.w	r4, #0
 800544a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800544e:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	f04f 0400 	mov.w	r4, #0
 8005458:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <_ZN13PathFollowingC1Ev+0xf0>)
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	f04f 0400 	mov.w	r4, #0
 8005466:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800546a:	4a0e      	ldr	r2, [pc, #56]	; (80054a4 <_ZN13PathFollowingC1Ev+0xf0>)
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f04f 0400 	mov.w	r4, #0
 8005474:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005478:	4a0b      	ldr	r2, [pc, #44]	; (80054a8 <_ZN13PathFollowingC1Ev+0xf4>)
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <_ZN13PathFollowingC1Ev+0xf4>)
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	f04f 0400 	mov.w	r4, #0
 8005490:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bc90      	pop	{r4, r7}
 800549e:	4770      	bx	lr
 80054a0:	20044da8 	.word	0x20044da8
 80054a4:	20044d38 	.word	0x20044d38
 80054a8:	20044d98 	.word	0x20044d98

080054ac <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80054b4:	f001 fdce 	bl	8007054 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80054b8:	f107 0318 	add.w	r3, r7, #24
 80054bc:	2201      	movs	r2, #1
 80054be:	4915      	ldr	r1, [pc, #84]	; (8005514 <_ZN13PathFollowing4initEv+0x68>)
 80054c0:	4815      	ldr	r0, [pc, #84]	; (8005518 <_ZN13PathFollowing4initEv+0x6c>)
 80054c2:	f7fc fa87 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80054c6:	f107 0310 	add.w	r3, r7, #16
 80054ca:	2201      	movs	r2, #1
 80054cc:	4913      	ldr	r1, [pc, #76]	; (800551c <_ZN13PathFollowing4initEv+0x70>)
 80054ce:	4812      	ldr	r0, [pc, #72]	; (8005518 <_ZN13PathFollowing4initEv+0x6c>)
 80054d0:	f7fc fa80 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	2201      	movs	r2, #1
 80054da:	4911      	ldr	r1, [pc, #68]	; (8005520 <_ZN13PathFollowing4initEv+0x74>)
 80054dc:	480e      	ldr	r0, [pc, #56]	; (8005518 <_ZN13PathFollowing4initEv+0x6c>)
 80054de:	f7fc fa79 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80054e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80054e6:	ed97 6b04 	vldr	d6, [r7, #16]
 80054ea:	ed97 5b02 	vldr	d5, [r7, #8]
 80054ee:	eeb0 2a45 	vmov.f32	s4, s10
 80054f2:	eef0 2a65 	vmov.f32	s5, s11
 80054f6:	eeb0 1a46 	vmov.f32	s2, s12
 80054fa:	eef0 1a66 	vmov.f32	s3, s13
 80054fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005502:	eef0 0a67 	vmov.f32	s1, s15
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f80c 	bl	8005524 <_ZN13PathFollowing7setGainEddd>
}
 800550c:	bf00      	nop
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	0801a05c 	.word	0x0801a05c
 8005518:	0801a064 	.word	0x0801a064
 800551c:	0801a06c 	.word	0x0801a06c
 8005520:	0801a074 	.word	0x0801a074

08005524 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005524:	b490      	push	{r4, r7}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	61f8      	str	r0, [r7, #28]
 800552c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005530:	ed87 1b02 	vstr	d1, [r7, #8]
 8005534:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800553a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800553e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005542:	4a07      	ldr	r2, [pc, #28]	; (8005560 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005544:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005548:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800554e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005552:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005556:	bf00      	nop
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bc90      	pop	{r4, r7}
 800555e:	4770      	bx	lr
 8005560:	20044da8 	.word	0x20044da8

08005564 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800556c:	2088      	movs	r0, #136	; 0x88
 800556e:	f7fc fdf2 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005572:	2080      	movs	r0, #128	; 0x80
 8005574:	f7fc fdef 	bl	8002156 <INA260_init>
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005588:	2188      	movs	r1, #136	; 0x88
 800558a:	2002      	movs	r0, #2
 800558c:	f7fc fd80 	bl	8002090 <INA260_read>
 8005590:	4603      	mov	r3, r0
 8005592:	4618      	mov	r0, r3
 8005594:	f7fa ffde 	bl	8000554 <__aeabi_i2d>
 8005598:	a30c      	add	r3, pc, #48	; (adr r3, 80055cc <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fb f843 	bl	8000628 <__aeabi_dmul>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	4618      	mov	r0, r3
 80055a8:	4621      	mov	r1, r4
 80055aa:	f7fb fb35 	bl	8000c18 <__aeabi_d2f>
 80055ae:	4602      	mov	r2, r0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a03      	ldr	r2, [pc, #12]	; (80055c8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd90      	pop	{r4, r7, pc}
 80055c4:	f3af 8000 	nop.w
 80055c8:	20000298 	.word	0x20000298
 80055cc:	47ae147b 	.word	0x47ae147b
 80055d0:	3f547ae1 	.word	0x3f547ae1

080055d4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	ee07 3a90 	vmov	s15, r3

}
 80055e4:	eeb0 0a67 	vmov.f32	s0, s15
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005600:	2102      	movs	r1, #2
 8005602:	4822      	ldr	r0, [pc, #136]	; (800568c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005604:	f005 ff5e 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005618:	89fb      	ldrh	r3, [r7, #14]
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005620:	2108      	movs	r1, #8
 8005622:	481a      	ldr	r0, [pc, #104]	; (800568c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005624:	f005 ff4e 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005638:	89fb      	ldrh	r3, [r7, #14]
 800563a:	f043 0302 	orr.w	r3, r3, #2
 800563e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005640:	2110      	movs	r1, #16
 8005642:	4812      	ldr	r0, [pc, #72]	; (800568c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005644:	f005 ff3e 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005658:	89fb      	ldrh	r3, [r7, #14]
 800565a:	f043 0304 	orr.w	r3, r3, #4
 800565e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	480a      	ldr	r0, [pc, #40]	; (800568c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005664:	f005 ff2e 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005678:	89fb      	ldrh	r3, [r7, #14]
 800567a:	f043 0308 	orr.w	r3, r3, #8
 800567e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005680:	89fb      	ldrh	r3, [r7, #14]

}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40020c00 	.word	0x40020c00

08005690 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	709a      	strb	r2, [r3, #2]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	70da      	strb	r2, [r3, #3]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	809a      	strh	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	80da      	strh	r2, [r3, #6]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	721a      	strb	r2, [r3, #8]
{

}
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	7a1b      	ldrb	r3, [r3, #8]
 80056d8:	f083 0301 	eor.w	r3, r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80ea 	beq.w	80058b8 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 80056e4:	4b76      	ldr	r3, [pc, #472]	; (80058c0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f083 0301 	eor.w	r3, r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d032      	beq.n	8005758 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 80056f2:	2104      	movs	r1, #4
 80056f4:	4873      	ldr	r0, [pc, #460]	; (80058c4 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80056f6:	f005 fee5 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <_ZN10SideSensor12updateStatusEv+0x48>
 8005700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005704:	4870      	ldr	r0, [pc, #448]	; (80058c8 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005706:	f005 fedd 	bl	800b4c4 <HAL_GPIO_ReadPin>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <_ZN10SideSensor12updateStatusEv+0x48>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <_ZN10SideSensor12updateStatusEv+0x4a>
 8005714:	2300      	movs	r3, #0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 800571a:	4b6c      	ldr	r3, [pc, #432]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	e002      	b.n	800572e <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005728:	4b68      	ldr	r3, [pc, #416]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800572e:	4b67      	ldr	r3, [pc, #412]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	2b04      	cmp	r3, #4
 8005734:	d945      	bls.n	80057c2 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 800574a:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005750:	4b5e      	ldr	r3, [pc, #376]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 8005752:	2200      	movs	r2, #0
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	e034      	b.n	80057c2 <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005758:	4b59      	ldr	r3, [pc, #356]	; (80058c0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d030      	beq.n	80057c2 <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005760:	2104      	movs	r1, #4
 8005762:	4858      	ldr	r0, [pc, #352]	; (80058c4 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005764:	f005 feae 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d006      	beq.n	8005786 <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 8005778:	4b54      	ldr	r3, [pc, #336]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	4b52      	ldr	r3, [pc, #328]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e002      	b.n	800578c <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 8005786:	4b51      	ldr	r3, [pc, #324]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 8005788:	2200      	movs	r2, #0
 800578a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800578c:	4b4f      	ldr	r3, [pc, #316]	; (80058cc <_ZN10SideSensor12updateStatusEv+0x200>)
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d916      	bls.n	80057c2 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80057a8:	4b45      	ldr	r3, [pc, #276]	; (80058c0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	88db      	ldrh	r3, [r3, #6]
 80057b2:	3301      	adds	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	88da      	ldrh	r2, [r3, #6]
 80057be:	4b44      	ldr	r3, [pc, #272]	; (80058d0 <_ZN10SideSensor12updateStatusEv+0x204>)
 80057c0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80057c2:	4b44      	ldr	r3, [pc, #272]	; (80058d4 <_ZN10SideSensor12updateStatusEv+0x208>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f083 0301 	eor.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d031      	beq.n	8005834 <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 80057d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057d4:	483c      	ldr	r0, [pc, #240]	; (80058c8 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80057d6:	f005 fe75 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d108      	bne.n	80057f2 <_ZN10SideSensor12updateStatusEv+0x126>
 80057e0:	2104      	movs	r1, #4
 80057e2:	4838      	ldr	r0, [pc, #224]	; (80058c4 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80057e4:	f005 fe6e 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <_ZN10SideSensor12updateStatusEv+0x126>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <_ZN10SideSensor12updateStatusEv+0x128>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d006      	beq.n	8005806 <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 80057f8:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4b35      	ldr	r3, [pc, #212]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e002      	b.n	800580c <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 8005806:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005808:	2200      	movs	r2, #0
 800580a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800580c:	4b32      	ldr	r3, [pc, #200]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d90f      	bls.n	8005834 <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	f043 0302 	orr.w	r3, r3, #2
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <_ZN10SideSensor12updateStatusEv+0x208>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800582e:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005830:	2200      	movs	r2, #0
 8005832:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005834:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d031      	beq.n	80058a0 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 800583c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005840:	4821      	ldr	r0, [pc, #132]	; (80058c8 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005842:	f005 fe3f 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 8005856:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	3301      	adds	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e002      	b.n	800586a <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 8005864:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005866:	2200      	movs	r2, #0
 8005868:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d916      	bls.n	80058a0 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	f083 0302 	eor.w	r3, r3, #2
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8005886:	4b13      	ldr	r3, [pc, #76]	; (80058d4 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	889b      	ldrh	r3, [r3, #4]
 8005890:	3301      	adds	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	889a      	ldrh	r2, [r3, #4]
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <_ZN10SideSensor12updateStatusEv+0x210>)
 800589e:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	881a      	ldrh	r2, [r3, #0]
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <_ZN10SideSensor12updateStatusEv+0x214>)
 80058a6:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	789a      	ldrb	r2, [r3, #2]
 80058ac:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <_ZN10SideSensor12updateStatusEv+0x218>)
 80058ae:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	78da      	ldrb	r2, [r3, #3]
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <_ZN10SideSensor12updateStatusEv+0x21c>)
 80058b6:	701a      	strb	r2, [r3, #0]
	}

}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200002a4 	.word	0x200002a4
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40020c00 	.word	0x40020c00
 80058cc:	200002a8 	.word	0x200002a8
 80058d0:	200002a2 	.word	0x200002a2
 80058d4:	200002a5 	.word	0x200002a5
 80058d8:	200002a6 	.word	0x200002a6
 80058dc:	200002a0 	.word	0x200002a0
 80058e0:	2000029c 	.word	0x2000029c
 80058e4:	2000029e 	.word	0x2000029e
 80058e8:	2000029f 	.word	0x2000029f

080058ec <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	return status_L_;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	789b      	ldrb	r3, [r3, #2]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	88db      	ldrh	r3, [r3, #6]
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	80da      	strh	r2, [r3, #6]
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	721a      	strb	r2, [r3, #8]
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	721a      	strb	r2, [r3, #8]
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7a1b      	ldrb	r3, [r3, #8]
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3308      	adds	r3, #8
 8005998:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f010 f886 	bl	8015ab0 <memset>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059aa:	811a      	strh	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b2:	815a      	strh	r2, [r3, #10]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ba:	819a      	strh	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c2:	81da      	strh	r2, [r3, #14]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ca:	821a      	strh	r2, [r3, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d2:	825a      	strh	r2, [r3, #18]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	829a      	strh	r2, [r3, #20]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	82da      	strh	r2, [r3, #22]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	831a      	strh	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	835a      	strh	r2, [r3, #26]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	839a      	strh	r2, [r3, #28]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	83da      	strh	r2, [r3, #30]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	841a      	strh	r2, [r3, #32]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a04:	845a      	strh	r2, [r3, #34]	; 0x22
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	849a      	strh	r2, [r3, #36]	; 0x24
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a12:	84da      	strh	r2, [r3, #38]	; 0x26
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a36:	861a      	strh	r2, [r3, #48]	; 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	865a      	strh	r2, [r3, #50]	; 0x32
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	869a      	strh	r2, [r3, #52]	; 0x34
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a52:	871a      	strh	r2, [r3, #56]	; 0x38
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b2e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b48:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b74:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b8e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b98:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005baa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bb4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc6:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bda:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bfc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c06:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c10:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c1a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c2c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c5e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c68:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c7a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c8c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cae:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cb8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cd2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ce4:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d042      	beq.n	8005db0 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005d36:	461a      	mov	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3204      	adds	r2, #4
 8005d3c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d68:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005d6a:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005d72:	2bf9      	cmp	r3, #249	; 0xf9
 8005d74:	d903      	bls.n	8005d7e <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	22fa      	movs	r2, #250	; 0xfa
 8005d7a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685c      	ldr	r4, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fa fbf5 	bl	8000578 <__aeabi_f2d>
 8005d8e:	4605      	mov	r5, r0
 8005d90:	460e      	mov	r6, r1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fa fbed 	bl	8000578 <__aeabi_f2d>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	ec43 2b11 	vmov	d1, r2, r3
 8005da6:	ec46 5b10 	vmov	d0, r5, r6
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff f8f6 	bl	8004f9c <_ZN5Motor8setRatioEdd>

	}

}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db8:	200002ac 	.word	0x200002ac

08005dbc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	615a      	str	r2, [r3, #20]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	619a      	str	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	61da      	str	r2, [r3, #28]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	621a      	str	r2, [r3, #32]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	0000      	movs	r0, r0
 8005e54:	0000      	movs	r0, r0
	...

08005e58 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	f107 020c 	add.w	r2, r7, #12
 8005e68:	f107 0110 	add.w	r1, r7, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fb fc07 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005e72:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e86:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7fa fb74 	bl	8000578 <__aeabi_f2d>
 8005e90:	a30e      	add	r3, pc, #56	; (adr r3, 8005ecc <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fbc7 	bl	8000628 <__aeabi_dmul>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	f7fa feb9 	bl	8000c18 <__aeabi_d2f>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005eb2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	ee07 3a90 	vmov	s15, r3
}
 8005ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200002b0 	.word	0x200002b0
 8005ecc:	1ab1d998 	.word	0x1ab1d998
 8005ed0:	3f7830b5 	.word	0x3f7830b5
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	ed93 7a00 	vldr	s14, [r3]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ef0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005efe:	4b48      	ldr	r3, [pc, #288]	; (8006020 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f14:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005f20:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fa fb27 	bl	8000578 <__aeabi_f2d>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	ed93 7a06 	vldr	s14, [r3, #24]
 8005f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3c:	ee17 0a90 	vmov	r0, s15
 8005f40:	f7fa fb1a 	bl	8000578 <__aeabi_f2d>
 8005f44:	a334      	add	r3, pc, #208	; (adr r3, 8006018 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	f7fa fb6d 	bl	8000628 <__aeabi_dmul>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4620      	mov	r0, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	f7fa f9b1 	bl	80002bc <__adddf3>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	4621      	mov	r1, r4
 8005f62:	f7fa fe59 	bl	8000c18 <__aeabi_d2f>
 8005f66:	4602      	mov	r2, r0
 8005f68:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005f6a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005f72:	4b2c      	ldr	r3, [pc, #176]	; (8006024 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005f74:	edd3 7a00 	vldr	s15, [r3]
 8005f78:	edd7 6a05 	vldr	s13, [r7, #20]
 8005f7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f84:	ee17 0a90 	vmov	r0, s15
 8005f88:	f7fa faf6 	bl	8000578 <__aeabi_f2d>
 8005f8c:	a322      	add	r3, pc, #136	; (adr r3, 8006018 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa fc73 	bl	800087c <__aeabi_ddiv>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	f7fa fe3b 	bl	8000c18 <__aeabi_d2f>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005fa6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005fb4:	edd3 7a00 	vldr	s15, [r3]
 8005fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fbc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005fca:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd2:	ee17 0a90 	vmov	r0, s15
 8005fd6:	f7fa facf 	bl	8000578 <__aeabi_f2d>
 8005fda:	4605      	mov	r5, r0
 8005fdc:	460e      	mov	r6, r1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005fe4:	ed97 7a02 	vldr	s14, [r7, #8]
 8005fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fec:	ee17 0a90 	vmov	r0, s15
 8005ff0:	f7fa fac2 	bl	8000578 <__aeabi_f2d>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	ec43 2b11 	vmov	d1, r2, r3
 8005ffc:	ec46 5b10 	vmov	d0, r5, r6
 8006000:	4620      	mov	r0, r4
 8006002:	f7fe ffcb 	bl	8004f9c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8006006:	4a07      	ldr	r2, [pc, #28]	; (8006024 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	6013      	str	r3, [r2, #0]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006014:	f3af 8000 	nop.w
 8006018:	d2f1a9fc 	.word	0xd2f1a9fc
 800601c:	3f50624d 	.word	0x3f50624d
 8006020:	200002b8 	.word	0x200002b8
 8006024:	200002b4 	.word	0x200002b4

08006028 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	ed87 0a02 	vstr	s0, [r7, #8]
 8006034:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	ed87 0a02 	vstr	s0, [r7, #8]
 800605c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	ed87 0a02 	vstr	s0, [r7, #8]
 8006084:	edc7 0a01 	vstr	s1, [r7, #4]
 8006088:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	615a      	str	r2, [r3, #20]
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80060b6:	edc7 0a01 	vstr	s1, [r7, #4]
 80060ba:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff feb7 	bl	8005e58 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff feef 	bl	8005ed8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006158 <_ZN12VelocityCtrl4stopEv+0x30>
 8006140:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006158 <_ZN12VelocityCtrl4stopEv+0x30>
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe ff29 	bl	8004f9c <_ZN5Motor8setRatioEdd>

}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	f3af 8000 	nop.w
	...

08006160 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10e      	bne.n	8006190 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8006172:	f001 fe11 	bl	8007d98 <cppFlip100ns>

		tim7_timer++;
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800617e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006180:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d902      	bls.n	8006190 <HAL_TIM_PeriodElapsedCallback+0x30>
 800618a:	4b18      	ldr	r3, [pc, #96]	; (80061ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a17      	ldr	r2, [pc, #92]	; (80061f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d10e      	bne.n	80061b8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800619a:	f001 fdcd 	bl	8007d38 <cppFlip1ms>

		tim6_timer++;
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061a6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80061a8:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a10      	ldr	r2, [pc, #64]	; (80061f0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d902      	bls.n	80061b8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10e      	bne.n	80061e0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80061c2:	f001 fdf3 	bl	8007dac <cppFlip10ms>

		tim13_timer++;
 80061c6:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061ce:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d902      	bls.n	80061e0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
	}

}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40001400 	.word	0x40001400
 80061ec:	20044a5c 	.word	0x20044a5c
 80061f0:	0001869f 	.word	0x0001869f
 80061f4:	40001000 	.word	0x40001000
 80061f8:	20044a18 	.word	0x20044a18
 80061fc:	40001c00 	.word	0x40001c00
 8006200:	20044a60 	.word	0x20044a60

08006204 <init>:

void init()
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006208:	2201      	movs	r2, #1
 800620a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800620e:	4808      	ldr	r0, [pc, #32]	; (8006230 <init+0x2c>)
 8006210:	f005 f970 	bl	800b4f4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8006214:	4807      	ldr	r0, [pc, #28]	; (8006234 <init+0x30>)
 8006216:	f009 f838 	bl	800f28a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800621a:	4807      	ldr	r0, [pc, #28]	; (8006238 <init+0x34>)
 800621c:	f009 f835 	bl	800f28a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006220:	4806      	ldr	r0, [pc, #24]	; (800623c <init+0x38>)
 8006222:	f009 f832 	bl	800f28a <HAL_TIM_Base_Start_IT>

	cppInit();
 8006226:	f001 fce3 	bl	8007bf0 <cppInit>

	//path_following_initialize();

}
 800622a:	bf00      	nop
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000
 8006234:	20044b44 	.word	0x20044b44
 8006238:	20044ce8 	.word	0x20044ce8
 800623c:	20044a64 	.word	0x20044a64

08006240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006244:	f003 fe4e 	bl	8009ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006248:	f000 f82a 	bl	80062a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800624c:	f000 fdbc 	bl	8006dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006250:	f000 fd8a 	bl	8006d68 <MX_DMA_Init>
  MX_I2C2_Init();
 8006254:	f000 f9e8 	bl	8006628 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006258:	f000 fa14 	bl	8006684 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800625c:	f000 fa32 	bl	80066c4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006260:	f000 fa66 	bl	8006730 <MX_TIM1_Init>
  MX_TIM4_Init();
 8006264:	f000 fb70 	bl	8006948 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006268:	f000 fc3c 	bl	8006ae4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800626c:	f000 fd52 	bl	8006d14 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006270:	f00a ffde 	bl	8011230 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006274:	f000 fbcc 	bl	8006a10 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006278:	f000 f9a8 	bl	80065cc <MX_I2C1_Init>
  MX_TIM3_Init();
 800627c:	f000 fb00 	bl	8006880 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006280:	f000 fc88 	bl	8006b94 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006284:	f000 fcd4 	bl	8006c30 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006288:	f000 f898 	bl	80063bc <MX_ADC2_Init>
  MX_TIM7_Init();
 800628c:	f000 fbf6 	bl	8006a7c <MX_TIM7_Init>
  MX_TIM13_Init();
 8006290:	f000 fd1c 	bl	8006ccc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8006294:	f7ff ffb6 	bl	8006204 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006298:	f001 fdb6 	bl	8007e08 <cppLoop>
 800629c:	e7fc      	b.n	8006298 <main+0x58>
	...

080062a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b0a4      	sub	sp, #144	; 0x90
 80062a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80062aa:	2234      	movs	r2, #52	; 0x34
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f00f fbfe 	bl	8015ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80062c4:	f107 030c 	add.w	r3, r7, #12
 80062c8:	223c      	movs	r2, #60	; 0x3c
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f00f fbef 	bl	8015ab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <SystemClock_Config+0x114>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	4a36      	ldr	r2, [pc, #216]	; (80063b4 <SystemClock_Config+0x114>)
 80062dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e0:	6413      	str	r3, [r2, #64]	; 0x40
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <SystemClock_Config+0x114>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <SystemClock_Config+0x118>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <SystemClock_Config+0x118>)
 80062f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4b2e      	ldr	r3, [pc, #184]	; (80063b8 <SystemClock_Config+0x118>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800630a:	2301      	movs	r3, #1
 800630c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800630e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006312:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006314:	2302      	movs	r3, #2
 8006316:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800631c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800631e:	2308      	movs	r3, #8
 8006320:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006322:	23b4      	movs	r3, #180	; 0xb4
 8006324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006328:	2302      	movs	r3, #2
 800632a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800632e:	2308      	movs	r3, #8
 8006330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006334:	2302      	movs	r3, #2
 8006336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800633a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800633e:	4618      	mov	r0, r3
 8006340:	f006 fcfa 	bl	800cd38 <HAL_RCC_OscConfig>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800634a:	f000 fe7f 	bl	800704c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800634e:	f006 f875 	bl	800c43c <HAL_PWREx_EnableOverDrive>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006358:	f000 fe78 	bl	800704c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800635c:	230f      	movs	r3, #15
 800635e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006360:	2302      	movs	r3, #2
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006364:	2300      	movs	r3, #0
 8006366:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006368:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800636c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800636e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006372:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006374:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006378:	2105      	movs	r1, #5
 800637a:	4618      	mov	r0, r3
 800637c:	f006 f8ae 	bl	800c4dc <HAL_RCC_ClockConfig>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006386:	f000 fe61 	bl	800704c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800638a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800638e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006390:	2300      	movs	r3, #0
 8006392:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006394:	2300      	movs	r3, #0
 8006396:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006398:	f107 030c 	add.w	r3, r7, #12
 800639c:	4618      	mov	r0, r3
 800639e:	f006 fa8d 	bl	800c8bc <HAL_RCCEx_PeriphCLKConfig>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80063a8:	f000 fe50 	bl	800704c <Error_Handler>
  }
}
 80063ac:	bf00      	nop
 80063ae:	3790      	adds	r7, #144	; 0x90
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40007000 	.word	0x40007000

080063bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80063c2:	463b      	mov	r3, r7
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80063ce:	4b7c      	ldr	r3, [pc, #496]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063d0:	4a7c      	ldr	r2, [pc, #496]	; (80065c4 <MX_ADC2_Init+0x208>)
 80063d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80063d4:	4b7a      	ldr	r3, [pc, #488]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80063dc:	4b78      	ldr	r3, [pc, #480]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063de:	2200      	movs	r2, #0
 80063e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80063e2:	4b77      	ldr	r3, [pc, #476]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80063e8:	4b75      	ldr	r3, [pc, #468]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80063ee:	4b74      	ldr	r3, [pc, #464]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063f6:	4b72      	ldr	r3, [pc, #456]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063fc:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <MX_ADC2_Init+0x204>)
 80063fe:	4a72      	ldr	r2, [pc, #456]	; (80065c8 <MX_ADC2_Init+0x20c>)
 8006400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006402:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006404:	2200      	movs	r2, #0
 8006406:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006408:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <MX_ADC2_Init+0x204>)
 800640a:	220e      	movs	r2, #14
 800640c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800640e:	4b6c      	ldr	r3, [pc, #432]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006416:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006418:	2201      	movs	r2, #1
 800641a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800641c:	4868      	ldr	r0, [pc, #416]	; (80065c0 <MX_ADC2_Init+0x204>)
 800641e:	f003 fdf5 	bl	800a00c <HAL_ADC_Init>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006428:	f000 fe10 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800642c:	230a      	movs	r3, #10
 800642e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006430:	2301      	movs	r3, #1
 8006432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006434:	2306      	movs	r3, #6
 8006436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006438:	463b      	mov	r3, r7
 800643a:	4619      	mov	r1, r3
 800643c:	4860      	ldr	r0, [pc, #384]	; (80065c0 <MX_ADC2_Init+0x204>)
 800643e:	f003 ff39 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006448:	f000 fe00 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800644c:	230b      	movs	r3, #11
 800644e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006450:	2302      	movs	r3, #2
 8006452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006454:	463b      	mov	r3, r7
 8006456:	4619      	mov	r1, r3
 8006458:	4859      	ldr	r0, [pc, #356]	; (80065c0 <MX_ADC2_Init+0x204>)
 800645a:	f003 ff2b 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006464:	f000 fdf2 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006468:	230c      	movs	r3, #12
 800646a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800646c:	2303      	movs	r3, #3
 800646e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006470:	463b      	mov	r3, r7
 8006472:	4619      	mov	r1, r3
 8006474:	4852      	ldr	r0, [pc, #328]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006476:	f003 ff1d 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006480:	f000 fde4 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006484:	230d      	movs	r3, #13
 8006486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006488:	2304      	movs	r3, #4
 800648a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800648c:	463b      	mov	r3, r7
 800648e:	4619      	mov	r1, r3
 8006490:	484b      	ldr	r0, [pc, #300]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006492:	f003 ff0f 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800649c:	f000 fdd6 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80064a4:	2305      	movs	r3, #5
 80064a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064a8:	463b      	mov	r3, r7
 80064aa:	4619      	mov	r1, r3
 80064ac:	4844      	ldr	r0, [pc, #272]	; (80065c0 <MX_ADC2_Init+0x204>)
 80064ae:	f003 ff01 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80064b8:	f000 fdc8 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80064bc:	2301      	movs	r3, #1
 80064be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80064c0:	2306      	movs	r3, #6
 80064c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064c4:	463b      	mov	r3, r7
 80064c6:	4619      	mov	r1, r3
 80064c8:	483d      	ldr	r0, [pc, #244]	; (80065c0 <MX_ADC2_Init+0x204>)
 80064ca:	f003 fef3 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80064d4:	f000 fdba 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80064d8:	2302      	movs	r3, #2
 80064da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80064dc:	2307      	movs	r3, #7
 80064de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064e0:	463b      	mov	r3, r7
 80064e2:	4619      	mov	r1, r3
 80064e4:	4836      	ldr	r0, [pc, #216]	; (80065c0 <MX_ADC2_Init+0x204>)
 80064e6:	f003 fee5 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80064f0:	f000 fdac 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80064f4:	2303      	movs	r3, #3
 80064f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80064f8:	2308      	movs	r3, #8
 80064fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064fc:	463b      	mov	r3, r7
 80064fe:	4619      	mov	r1, r3
 8006500:	482f      	ldr	r0, [pc, #188]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006502:	f003 fed7 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800650c:	f000 fd9e 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006510:	2304      	movs	r3, #4
 8006512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006514:	2309      	movs	r3, #9
 8006516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006518:	463b      	mov	r3, r7
 800651a:	4619      	mov	r1, r3
 800651c:	4828      	ldr	r0, [pc, #160]	; (80065c0 <MX_ADC2_Init+0x204>)
 800651e:	f003 fec9 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006528:	f000 fd90 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800652c:	2305      	movs	r3, #5
 800652e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006530:	230a      	movs	r3, #10
 8006532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006534:	463b      	mov	r3, r7
 8006536:	4619      	mov	r1, r3
 8006538:	4821      	ldr	r0, [pc, #132]	; (80065c0 <MX_ADC2_Init+0x204>)
 800653a:	f003 febb 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006544:	f000 fd82 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006548:	2306      	movs	r3, #6
 800654a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800654c:	230b      	movs	r3, #11
 800654e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006550:	463b      	mov	r3, r7
 8006552:	4619      	mov	r1, r3
 8006554:	481a      	ldr	r0, [pc, #104]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006556:	f003 fead 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006560:	f000 fd74 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006564:	2307      	movs	r3, #7
 8006566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006568:	230c      	movs	r3, #12
 800656a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800656c:	463b      	mov	r3, r7
 800656e:	4619      	mov	r1, r3
 8006570:	4813      	ldr	r0, [pc, #76]	; (80065c0 <MX_ADC2_Init+0x204>)
 8006572:	f003 fe9f 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800657c:	f000 fd66 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006580:	2308      	movs	r3, #8
 8006582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006584:	230d      	movs	r3, #13
 8006586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006588:	463b      	mov	r3, r7
 800658a:	4619      	mov	r1, r3
 800658c:	480c      	ldr	r0, [pc, #48]	; (80065c0 <MX_ADC2_Init+0x204>)
 800658e:	f003 fe91 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006598:	f000 fd58 	bl	800704c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800659c:	2309      	movs	r3, #9
 800659e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80065a0:	230e      	movs	r3, #14
 80065a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065a4:	463b      	mov	r3, r7
 80065a6:	4619      	mov	r1, r3
 80065a8:	4805      	ldr	r0, [pc, #20]	; (80065c0 <MX_ADC2_Init+0x204>)
 80065aa:	f003 fe83 	bl	800a2b4 <HAL_ADC_ConfigChannel>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80065b4:	f000 fd4a 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200448e8 	.word	0x200448e8
 80065c4:	40012100 	.word	0x40012100
 80065c8:	0f000001 	.word	0x0f000001

080065cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80065d0:	4b12      	ldr	r3, [pc, #72]	; (800661c <MX_I2C1_Init+0x50>)
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <MX_I2C1_Init+0x54>)
 80065d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <MX_I2C1_Init+0x50>)
 80065d8:	4a12      	ldr	r2, [pc, #72]	; (8006624 <MX_I2C1_Init+0x58>)
 80065da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <MX_I2C1_Init+0x50>)
 80065de:	2200      	movs	r2, #0
 80065e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <MX_I2C1_Init+0x50>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <MX_I2C1_Init+0x50>)
 80065ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <MX_I2C1_Init+0x50>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <MX_I2C1_Init+0x50>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <MX_I2C1_Init+0x50>)
 80065fe:	2200      	movs	r2, #0
 8006600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <MX_I2C1_Init+0x50>)
 8006604:	2280      	movs	r2, #128	; 0x80
 8006606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006608:	4804      	ldr	r0, [pc, #16]	; (800661c <MX_I2C1_Init+0x50>)
 800660a:	f004 ff8d 	bl	800b528 <HAL_I2C_Init>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006614:	f000 fd1a 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006618:	bf00      	nop
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20044930 	.word	0x20044930
 8006620:	40005400 	.word	0x40005400
 8006624:	000186a0 	.word	0x000186a0

08006628 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <MX_I2C2_Init+0x50>)
 800662e:	4a13      	ldr	r2, [pc, #76]	; (800667c <MX_I2C2_Init+0x54>)
 8006630:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <MX_I2C2_Init+0x50>)
 8006634:	4a12      	ldr	r2, [pc, #72]	; (8006680 <MX_I2C2_Init+0x58>)
 8006636:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <MX_I2C2_Init+0x50>)
 800663a:	2200      	movs	r2, #0
 800663c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800663e:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <MX_I2C2_Init+0x50>)
 8006640:	2200      	movs	r2, #0
 8006642:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <MX_I2C2_Init+0x50>)
 8006646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800664a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <MX_I2C2_Init+0x50>)
 800664e:	2200      	movs	r2, #0
 8006650:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <MX_I2C2_Init+0x50>)
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <MX_I2C2_Init+0x50>)
 800665a:	2200      	movs	r2, #0
 800665c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800665e:	4b06      	ldr	r3, [pc, #24]	; (8006678 <MX_I2C2_Init+0x50>)
 8006660:	2280      	movs	r2, #128	; 0x80
 8006662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006664:	4804      	ldr	r0, [pc, #16]	; (8006678 <MX_I2C2_Init+0x50>)
 8006666:	f004 ff5f 	bl	800b528 <HAL_I2C_Init>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006670:	f000 fcec 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006674:	bf00      	nop
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200449c4 	.word	0x200449c4
 800667c:	40005800 	.word	0x40005800
 8006680:	000186a0 	.word	0x000186a0

08006684 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006688:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 800668a:	4a0d      	ldr	r2, [pc, #52]	; (80066c0 <MX_SDIO_SD_Init+0x3c>)
 800668c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800668e:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 8006690:	2200      	movs	r2, #0
 8006692:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006694:	4b09      	ldr	r3, [pc, #36]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 8006696:	2200      	movs	r2, #0
 8006698:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 800669c:	2200      	movs	r2, #0
 800669e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <MX_SDIO_SD_Init+0x38>)
 80066ae:	2202      	movs	r2, #2
 80066b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80066b2:	bf00      	nop
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20044bc4 	.word	0x20044bc4
 80066c0:	40012c00 	.word	0x40012c00

080066c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80066c8:	4b17      	ldr	r3, [pc, #92]	; (8006728 <MX_SPI2_Init+0x64>)
 80066ca:	4a18      	ldr	r2, [pc, #96]	; (800672c <MX_SPI2_Init+0x68>)
 80066cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80066ce:	4b16      	ldr	r3, [pc, #88]	; (8006728 <MX_SPI2_Init+0x64>)
 80066d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80066d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <MX_SPI2_Init+0x64>)
 80066d8:	2200      	movs	r2, #0
 80066da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80066dc:	4b12      	ldr	r3, [pc, #72]	; (8006728 <MX_SPI2_Init+0x64>)
 80066de:	2200      	movs	r2, #0
 80066e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <MX_SPI2_Init+0x64>)
 80066e4:	2202      	movs	r2, #2
 80066e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80066e8:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <MX_SPI2_Init+0x64>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80066ee:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <MX_SPI2_Init+0x64>)
 80066f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <MX_SPI2_Init+0x64>)
 80066f8:	2228      	movs	r2, #40	; 0x28
 80066fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <MX_SPI2_Init+0x64>)
 80066fe:	2200      	movs	r2, #0
 8006700:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <MX_SPI2_Init+0x64>)
 8006704:	2200      	movs	r2, #0
 8006706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <MX_SPI2_Init+0x64>)
 800670a:	2200      	movs	r2, #0
 800670c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <MX_SPI2_Init+0x64>)
 8006710:	220a      	movs	r2, #10
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006714:	4804      	ldr	r0, [pc, #16]	; (8006728 <MX_SPI2_Init+0x64>)
 8006716:	f008 f839 	bl	800e78c <HAL_SPI_Init>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006720:	f000 fc94 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20044810 	.word	0x20044810
 800672c:	40003800 	.word	0x40003800

08006730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b09a      	sub	sp, #104	; 0x68
 8006734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006736:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800673a:	2224      	movs	r2, #36	; 0x24
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f00f f9b6 	bl	8015ab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800674e:	f107 0320 	add.w	r3, r7, #32
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	609a      	str	r2, [r3, #8]
 800675a:	60da      	str	r2, [r3, #12]
 800675c:	611a      	str	r2, [r3, #16]
 800675e:	615a      	str	r2, [r3, #20]
 8006760:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006762:	463b      	mov	r3, r7
 8006764:	2220      	movs	r2, #32
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f00f f9a1 	bl	8015ab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800676e:	4b42      	ldr	r3, [pc, #264]	; (8006878 <MX_TIM1_Init+0x148>)
 8006770:	4a42      	ldr	r2, [pc, #264]	; (800687c <MX_TIM1_Init+0x14c>)
 8006772:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006774:	4b40      	ldr	r3, [pc, #256]	; (8006878 <MX_TIM1_Init+0x148>)
 8006776:	2200      	movs	r2, #0
 8006778:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800677a:	4b3f      	ldr	r3, [pc, #252]	; (8006878 <MX_TIM1_Init+0x148>)
 800677c:	2200      	movs	r2, #0
 800677e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006780:	4b3d      	ldr	r3, [pc, #244]	; (8006878 <MX_TIM1_Init+0x148>)
 8006782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006788:	4b3b      	ldr	r3, [pc, #236]	; (8006878 <MX_TIM1_Init+0x148>)
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800678e:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <MX_TIM1_Init+0x148>)
 8006790:	2200      	movs	r2, #0
 8006792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006794:	4b38      	ldr	r3, [pc, #224]	; (8006878 <MX_TIM1_Init+0x148>)
 8006796:	2200      	movs	r2, #0
 8006798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800679a:	4837      	ldr	r0, [pc, #220]	; (8006878 <MX_TIM1_Init+0x148>)
 800679c:	f008 fd99 	bl	800f2d2 <HAL_TIM_PWM_Init>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80067a6:	f000 fc51 	bl	800704c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80067aa:	2303      	movs	r3, #3
 80067ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80067ae:	2300      	movs	r3, #0
 80067b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80067b2:	2301      	movs	r3, #1
 80067b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80067b6:	2300      	movs	r3, #0
 80067b8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80067be:	2300      	movs	r3, #0
 80067c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80067c2:	2301      	movs	r3, #1
 80067c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80067c6:	2300      	movs	r3, #0
 80067c8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80067ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067d2:	4619      	mov	r1, r3
 80067d4:	4828      	ldr	r0, [pc, #160]	; (8006878 <MX_TIM1_Init+0x148>)
 80067d6:	f008 fde5 	bl	800f3a4 <HAL_TIM_Encoder_Init>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80067e0:	f000 fc34 	bl	800704c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80067ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067f0:	4619      	mov	r1, r3
 80067f2:	4821      	ldr	r0, [pc, #132]	; (8006878 <MX_TIM1_Init+0x148>)
 80067f4:	f009 fb0c 	bl	800fe10 <HAL_TIMEx_MasterConfigSynchronization>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80067fe:	f000 fc25 	bl	800704c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006802:	2360      	movs	r3, #96	; 0x60
 8006804:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800680a:	2300      	movs	r3, #0
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800680e:	2300      	movs	r3, #0
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006812:	2300      	movs	r3, #0
 8006814:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006816:	2300      	movs	r3, #0
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800681e:	f107 0320 	add.w	r3, r7, #32
 8006822:	2208      	movs	r2, #8
 8006824:	4619      	mov	r1, r3
 8006826:	4814      	ldr	r0, [pc, #80]	; (8006878 <MX_TIM1_Init+0x148>)
 8006828:	f008 ff8e 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006832:	f000 fc0b 	bl	800704c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006836:	2300      	movs	r3, #0
 8006838:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800684a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800684e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006854:	463b      	mov	r3, r7
 8006856:	4619      	mov	r1, r3
 8006858:	4807      	ldr	r0, [pc, #28]	; (8006878 <MX_TIM1_Init+0x148>)
 800685a:	f009 fb55 	bl	800ff08 <HAL_TIMEx_ConfigBreakDeadTime>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006864:	f000 fbf2 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006868:	4803      	ldr	r0, [pc, #12]	; (8006878 <MX_TIM1_Init+0x148>)
 800686a:	f000 ffdf 	bl	800782c <HAL_TIM_MspPostInit>

}
 800686e:	bf00      	nop
 8006870:	3768      	adds	r7, #104	; 0x68
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20044b84 	.word	0x20044b84
 800687c:	40010000 	.word	0x40010000

08006880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006886:	f107 0320 	add.w	r3, r7, #32
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
 8006898:	609a      	str	r2, [r3, #8]
 800689a:	60da      	str	r2, [r3, #12]
 800689c:	611a      	str	r2, [r3, #16]
 800689e:	615a      	str	r2, [r3, #20]
 80068a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80068a2:	4b27      	ldr	r3, [pc, #156]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068a4:	4a27      	ldr	r2, [pc, #156]	; (8006944 <MX_TIM3_Init+0xc4>)
 80068a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ae:	4b24      	ldr	r3, [pc, #144]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80068b4:	4b22      	ldr	r3, [pc, #136]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068b6:	f241 1293 	movw	r2, #4499	; 0x1193
 80068ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068bc:	4b20      	ldr	r3, [pc, #128]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068c2:	4b1f      	ldr	r3, [pc, #124]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80068c8:	481d      	ldr	r0, [pc, #116]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068ca:	f008 fd02 	bl	800f2d2 <HAL_TIM_PWM_Init>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80068d4:	f000 fbba 	bl	800704c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068d8:	2300      	movs	r3, #0
 80068da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068dc:	2300      	movs	r3, #0
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80068e0:	f107 0320 	add.w	r3, r7, #32
 80068e4:	4619      	mov	r1, r3
 80068e6:	4816      	ldr	r0, [pc, #88]	; (8006940 <MX_TIM3_Init+0xc0>)
 80068e8:	f009 fa92 	bl	800fe10 <HAL_TIMEx_MasterConfigSynchronization>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80068f2:	f000 fbab 	bl	800704c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068f6:	2360      	movs	r3, #96	; 0x60
 80068f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	2200      	movs	r2, #0
 800690a:	4619      	mov	r1, r3
 800690c:	480c      	ldr	r0, [pc, #48]	; (8006940 <MX_TIM3_Init+0xc0>)
 800690e:	f008 ff1b 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006918:	f000 fb98 	bl	800704c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	2204      	movs	r2, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4807      	ldr	r0, [pc, #28]	; (8006940 <MX_TIM3_Init+0xc0>)
 8006924:	f008 ff10 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800692e:	f000 fb8d 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006932:	4803      	ldr	r0, [pc, #12]	; (8006940 <MX_TIM3_Init+0xc0>)
 8006934:	f000 ff7a 	bl	800782c <HAL_TIM_MspPostInit>

}
 8006938:	bf00      	nop
 800693a:	3728      	adds	r7, #40	; 0x28
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20044a1c 	.word	0x20044a1c
 8006944:	40000400 	.word	0x40000400

08006948 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	; 0x28
 800694c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800694e:	f107 0320 	add.w	r3, r7, #32
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006958:	1d3b      	adds	r3, r7, #4
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	605a      	str	r2, [r3, #4]
 8006960:	609a      	str	r2, [r3, #8]
 8006962:	60da      	str	r2, [r3, #12]
 8006964:	611a      	str	r2, [r3, #16]
 8006966:	615a      	str	r2, [r3, #20]
 8006968:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800696a:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <MX_TIM4_Init+0xc0>)
 800696c:	4a27      	ldr	r2, [pc, #156]	; (8006a0c <MX_TIM4_Init+0xc4>)
 800696e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <MX_TIM4_Init+0xc0>)
 8006972:	2200      	movs	r2, #0
 8006974:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006976:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <MX_TIM4_Init+0xc0>)
 8006978:	2200      	movs	r2, #0
 800697a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800697c:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <MX_TIM4_Init+0xc0>)
 800697e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006982:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <MX_TIM4_Init+0xc0>)
 8006986:	2200      	movs	r2, #0
 8006988:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800698a:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <MX_TIM4_Init+0xc0>)
 800698c:	2200      	movs	r2, #0
 800698e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006990:	481d      	ldr	r0, [pc, #116]	; (8006a08 <MX_TIM4_Init+0xc0>)
 8006992:	f008 fc9e 	bl	800f2d2 <HAL_TIM_PWM_Init>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800699c:	f000 fb56 	bl	800704c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069a0:	2300      	movs	r3, #0
 80069a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80069a8:	f107 0320 	add.w	r3, r7, #32
 80069ac:	4619      	mov	r1, r3
 80069ae:	4816      	ldr	r0, [pc, #88]	; (8006a08 <MX_TIM4_Init+0xc0>)
 80069b0:	f009 fa2e 	bl	800fe10 <HAL_TIMEx_MasterConfigSynchronization>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80069ba:	f000 fb47 	bl	800704c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069be:	2360      	movs	r3, #96	; 0x60
 80069c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	2208      	movs	r2, #8
 80069d2:	4619      	mov	r1, r3
 80069d4:	480c      	ldr	r0, [pc, #48]	; (8006a08 <MX_TIM4_Init+0xc0>)
 80069d6:	f008 feb7 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80069e0:	f000 fb34 	bl	800704c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	220c      	movs	r2, #12
 80069e8:	4619      	mov	r1, r3
 80069ea:	4807      	ldr	r0, [pc, #28]	; (8006a08 <MX_TIM4_Init+0xc0>)
 80069ec:	f008 feac 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80069f6:	f000 fb29 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80069fa:	4803      	ldr	r0, [pc, #12]	; (8006a08 <MX_TIM4_Init+0xc0>)
 80069fc:	f000 ff16 	bl	800782c <HAL_TIM_MspPostInit>

}
 8006a00:	bf00      	nop
 8006a02:	3728      	adds	r7, #40	; 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	200448a8 	.word	0x200448a8
 8006a0c:	40000800 	.word	0x40000800

08006a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a16:	463b      	mov	r3, r7
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006a1e:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a20:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <MX_TIM6_Init+0x68>)
 8006a22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006a24:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a26:	2259      	movs	r2, #89	; 0x59
 8006a28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a2a:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006a30:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006a36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006a3e:	480d      	ldr	r0, [pc, #52]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a40:	f008 fbf8 	bl	800f234 <HAL_TIM_Base_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006a4a:	f000 faff 	bl	800704c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006a56:	463b      	mov	r3, r7
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4806      	ldr	r0, [pc, #24]	; (8006a74 <MX_TIM6_Init+0x64>)
 8006a5c:	f009 f9d8 	bl	800fe10 <HAL_TIMEx_MasterConfigSynchronization>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006a66:	f000 faf1 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20044b44 	.word	0x20044b44
 8006a78:	40001000 	.word	0x40001000

08006a7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a82:	463b      	mov	r3, r7
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <MX_TIM7_Init+0x60>)
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <MX_TIM7_Init+0x64>)
 8006a8e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <MX_TIM7_Init+0x60>)
 8006a92:	22b3      	movs	r2, #179	; 0xb3
 8006a94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <MX_TIM7_Init+0x60>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <MX_TIM7_Init+0x60>)
 8006a9e:	2231      	movs	r2, #49	; 0x31
 8006aa0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <MX_TIM7_Init+0x60>)
 8006aa4:	2280      	movs	r2, #128	; 0x80
 8006aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006aa8:	480c      	ldr	r0, [pc, #48]	; (8006adc <MX_TIM7_Init+0x60>)
 8006aaa:	f008 fbc3 	bl	800f234 <HAL_TIM_Base_Init>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006ab4:	f000 faca 	bl	800704c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4805      	ldr	r0, [pc, #20]	; (8006adc <MX_TIM7_Init+0x60>)
 8006ac6:	f009 f9a3 	bl	800fe10 <HAL_TIMEx_MasterConfigSynchronization>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006ad0:	f000 fabc 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20044ce8 	.word	0x20044ce8
 8006ae0:	40001400 	.word	0x40001400

08006ae4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08c      	sub	sp, #48	; 0x30
 8006ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006aea:	f107 030c 	add.w	r3, r7, #12
 8006aee:	2224      	movs	r2, #36	; 0x24
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f00e ffdc 	bl	8015ab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006af8:	1d3b      	adds	r3, r7, #4
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006b00:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b02:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <MX_TIM8_Init+0xac>)
 8006b04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006b06:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b0e:	2210      	movs	r2, #16
 8006b10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006b12:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b1a:	4b1c      	ldr	r3, [pc, #112]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006b20:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b26:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b40:	2300      	movs	r3, #0
 8006b42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b44:	2301      	movs	r3, #1
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006b50:	f107 030c 	add.w	r3, r7, #12
 8006b54:	4619      	mov	r1, r3
 8006b56:	480d      	ldr	r0, [pc, #52]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b58:	f008 fc24 	bl	800f3a4 <HAL_TIM_Encoder_Init>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006b62:	f000 fa73 	bl	800704c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b66:	2300      	movs	r3, #0
 8006b68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4806      	ldr	r0, [pc, #24]	; (8006b8c <MX_TIM8_Init+0xa8>)
 8006b74:	f009 f94c 	bl	800fe10 <HAL_TIMEx_MasterConfigSynchronization>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006b7e:	f000 fa65 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006b82:	bf00      	nop
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20044868 	.word	0x20044868
 8006b90:	40010400 	.word	0x40010400

08006b94 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
 8006ba8:	615a      	str	r2, [r3, #20]
 8006baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006bac:	4b1e      	ldr	r3, [pc, #120]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bae:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <MX_TIM10_Init+0x98>)
 8006bb0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006bb2:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bc0:	f242 3227 	movw	r2, #8999	; 0x2327
 8006bc4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bc6:	4b18      	ldr	r3, [pc, #96]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006bd2:	4815      	ldr	r0, [pc, #84]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006bd4:	f008 fb2e 	bl	800f234 <HAL_TIM_Base_Init>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006bde:	f000 fa35 	bl	800704c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006be2:	4811      	ldr	r0, [pc, #68]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006be4:	f008 fb75 	bl	800f2d2 <HAL_TIM_PWM_Init>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006bee:	f000 fa2d 	bl	800704c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bf2:	2360      	movs	r3, #96	; 0x60
 8006bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c02:	1d3b      	adds	r3, r7, #4
 8006c04:	2200      	movs	r2, #0
 8006c06:	4619      	mov	r1, r3
 8006c08:	4807      	ldr	r0, [pc, #28]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006c0a:	f008 fd9d 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006c14:	f000 fa1a 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006c18:	4803      	ldr	r0, [pc, #12]	; (8006c28 <MX_TIM10_Init+0x94>)
 8006c1a:	f000 fe07 	bl	800782c <HAL_TIM_MspPostInit>

}
 8006c1e:	bf00      	nop
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20044984 	.word	0x20044984
 8006c2c:	40014400 	.word	0x40014400

08006c30 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	611a      	str	r2, [r3, #16]
 8006c44:	615a      	str	r2, [r3, #20]
 8006c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c4a:	4a1f      	ldr	r2, [pc, #124]	; (8006cc8 <MX_TIM11_Init+0x98>)
 8006c4c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006c4e:	4b1d      	ldr	r3, [pc, #116]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006c5a:	4b1a      	ldr	r3, [pc, #104]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c5c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006c60:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c68:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006c6e:	4815      	ldr	r0, [pc, #84]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c70:	f008 fae0 	bl	800f234 <HAL_TIM_Base_Init>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006c7a:	f000 f9e7 	bl	800704c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006c7e:	4811      	ldr	r0, [pc, #68]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006c80:	f008 fb27 	bl	800f2d2 <HAL_TIM_PWM_Init>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006c8a:	f000 f9df 	bl	800704c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c8e:	2360      	movs	r3, #96	; 0x60
 8006c90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4807      	ldr	r0, [pc, #28]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006ca6:	f008 fd4f 	bl	800f748 <HAL_TIM_PWM_ConfigChannel>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006cb0:	f000 f9cc 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006cb4:	4803      	ldr	r0, [pc, #12]	; (8006cc4 <MX_TIM11_Init+0x94>)
 8006cb6:	f000 fdb9 	bl	800782c <HAL_TIM_MspPostInit>

}
 8006cba:	bf00      	nop
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20044aa4 	.word	0x20044aa4
 8006cc8:	40014800 	.word	0x40014800

08006ccc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006cd2:	4a0f      	ldr	r2, [pc, #60]	; (8006d10 <MX_TIM13_Init+0x44>)
 8006cd4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006cd8:	2259      	movs	r2, #89	; 0x59
 8006cda:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006ce4:	f242 720f 	movw	r2, #9999	; 0x270f
 8006ce8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cea:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006cf0:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006cf6:	4805      	ldr	r0, [pc, #20]	; (8006d0c <MX_TIM13_Init+0x40>)
 8006cf8:	f008 fa9c 	bl	800f234 <HAL_TIM_Base_Init>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006d02:	f000 f9a3 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20044a64 	.word	0x20044a64
 8006d10:	40001c00 	.word	0x40001c00

08006d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006d18:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d1a:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <MX_USART2_UART_Init+0x50>)
 8006d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006d1e:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006d26:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006d38:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d3a:	220c      	movs	r2, #12
 8006d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d3e:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006d4a:	4805      	ldr	r0, [pc, #20]	; (8006d60 <MX_USART2_UART_Init+0x4c>)
 8006d4c:	f009 f942 	bl	800ffd4 <HAL_UART_Init>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006d56:	f000 f979 	bl	800704c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20044c48 	.word	0x20044c48
 8006d64:	40004400 	.word	0x40004400

08006d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <MX_DMA_Init+0x5c>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <MX_DMA_Init+0x5c>)
 8006d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <MX_DMA_Init+0x5c>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	203a      	movs	r0, #58	; 0x3a
 8006d90:	f003 fe1b 	bl	800a9ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006d94:	203a      	movs	r0, #58	; 0x3a
 8006d96:	f003 fe34 	bl	800aa02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	203b      	movs	r0, #59	; 0x3b
 8006da0:	f003 fe13 	bl	800a9ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006da4:	203b      	movs	r0, #59	; 0x3b
 8006da6:	f003 fe2c 	bl	800aa02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	2045      	movs	r0, #69	; 0x45
 8006db0:	f003 fe0b 	bl	800a9ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006db4:	2045      	movs	r0, #69	; 0x45
 8006db6:	f003 fe24 	bl	800aa02 <HAL_NVIC_EnableIRQ>

}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800

08006dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	; 0x30
 8006dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
 8006dd8:	609a      	str	r2, [r3, #8]
 8006dda:	60da      	str	r2, [r3, #12]
 8006ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	4b94      	ldr	r3, [pc, #592]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	4a93      	ldr	r2, [pc, #588]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006de8:	f043 0310 	orr.w	r3, r3, #16
 8006dec:	6313      	str	r3, [r2, #48]	; 0x30
 8006dee:	4b91      	ldr	r3, [pc, #580]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	f003 0310 	and.w	r3, r3, #16
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	4b8d      	ldr	r3, [pc, #564]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	4a8c      	ldr	r2, [pc, #560]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e08:	6313      	str	r3, [r2, #48]	; 0x30
 8006e0a:	4b8a      	ldr	r3, [pc, #552]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	4b86      	ldr	r3, [pc, #536]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	4a85      	ldr	r2, [pc, #532]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e20:	f043 0304 	orr.w	r3, r3, #4
 8006e24:	6313      	str	r3, [r2, #48]	; 0x30
 8006e26:	4b83      	ldr	r3, [pc, #524]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	4b7f      	ldr	r3, [pc, #508]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	4a7e      	ldr	r2, [pc, #504]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6313      	str	r3, [r2, #48]	; 0x30
 8006e42:	4b7c      	ldr	r3, [pc, #496]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	4b78      	ldr	r3, [pc, #480]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	4a77      	ldr	r2, [pc, #476]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e58:	f043 0302 	orr.w	r3, r3, #2
 8006e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e5e:	4b75      	ldr	r3, [pc, #468]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	60bb      	str	r3, [r7, #8]
 8006e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
 8006e6e:	4b71      	ldr	r3, [pc, #452]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4a70      	ldr	r2, [pc, #448]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e74:	f043 0308 	orr.w	r3, r3, #8
 8006e78:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7a:	4b6e      	ldr	r3, [pc, #440]	; (8007034 <MX_GPIO_Init+0x26c>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	607b      	str	r3, [r7, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006e86:	2200      	movs	r2, #0
 8006e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e8c:	486a      	ldr	r0, [pc, #424]	; (8007038 <MX_GPIO_Init+0x270>)
 8006e8e:	f004 fb31 	bl	800b4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006e92:	2200      	movs	r2, #0
 8006e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e98:	4868      	ldr	r0, [pc, #416]	; (800703c <MX_GPIO_Init+0x274>)
 8006e9a:	f004 fb2b 	bl	800b4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ea4:	4866      	ldr	r0, [pc, #408]	; (8007040 <MX_GPIO_Init+0x278>)
 8006ea6:	f004 fb25 	bl	800b4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006eb0:	4864      	ldr	r0, [pc, #400]	; (8007044 <MX_GPIO_Init+0x27c>)
 8006eb2:	f004 fb1f 	bl	800b4f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ec2:	f107 031c 	add.w	r3, r7, #28
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	485b      	ldr	r0, [pc, #364]	; (8007038 <MX_GPIO_Init+0x270>)
 8006eca:	f004 f951 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ece:	230f      	movs	r3, #15
 8006ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eda:	f107 031c 	add.w	r3, r7, #28
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4859      	ldr	r0, [pc, #356]	; (8007048 <MX_GPIO_Init+0x280>)
 8006ee2:	f004 f945 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006ee6:	23e1      	movs	r3, #225	; 0xe1
 8006ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eea:	2303      	movs	r3, #3
 8006eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef2:	f107 031c 	add.w	r3, r7, #28
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4852      	ldr	r0, [pc, #328]	; (8007044 <MX_GPIO_Init+0x27c>)
 8006efa:	f004 f939 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006efe:	2303      	movs	r3, #3
 8006f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f02:	2303      	movs	r3, #3
 8006f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f0a:	f107 031c 	add.w	r3, r7, #28
 8006f0e:	4619      	mov	r1, r3
 8006f10:	484a      	ldr	r0, [pc, #296]	; (800703c <MX_GPIO_Init+0x274>)
 8006f12:	f004 f92d 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f16:	2304      	movs	r3, #4
 8006f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f22:	f107 031c 	add.w	r3, r7, #28
 8006f26:	4619      	mov	r1, r3
 8006f28:	4844      	ldr	r0, [pc, #272]	; (800703c <MX_GPIO_Init+0x274>)
 8006f2a:	f004 f921 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006f2e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f34:	2300      	movs	r3, #0
 8006f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f3c:	f107 031c 	add.w	r3, r7, #28
 8006f40:	4619      	mov	r1, r3
 8006f42:	483d      	ldr	r0, [pc, #244]	; (8007038 <MX_GPIO_Init+0x270>)
 8006f44:	f004 f914 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f56:	2300      	movs	r3, #0
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f5a:	f107 031c 	add.w	r3, r7, #28
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4835      	ldr	r0, [pc, #212]	; (8007038 <MX_GPIO_Init+0x270>)
 8006f62:	f004 f905 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f74:	2300      	movs	r3, #0
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f78:	f107 031c 	add.w	r3, r7, #28
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	482f      	ldr	r0, [pc, #188]	; (800703c <MX_GPIO_Init+0x274>)
 8006f80:	f004 f8f6 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f92:	f107 031c 	add.w	r3, r7, #28
 8006f96:	4619      	mov	r1, r3
 8006f98:	4829      	ldr	r0, [pc, #164]	; (8007040 <MX_GPIO_Init+0x278>)
 8006f9a:	f004 f8e9 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fac:	2300      	movs	r3, #0
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fb0:	f107 031c 	add.w	r3, r7, #28
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4822      	ldr	r0, [pc, #136]	; (8007040 <MX_GPIO_Init+0x278>)
 8006fb8:	f004 f8da 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fce:	f107 031c 	add.w	r3, r7, #28
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	481a      	ldr	r0, [pc, #104]	; (8007040 <MX_GPIO_Init+0x278>)
 8006fd6:	f004 f8cb 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fda:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006fde:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fec:	f107 031c 	add.w	r3, r7, #28
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4814      	ldr	r0, [pc, #80]	; (8007044 <MX_GPIO_Init+0x27c>)
 8006ff4:	f004 f8bc 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ffe:	2300      	movs	r3, #0
 8007000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007006:	f107 031c 	add.w	r3, r7, #28
 800700a:	4619      	mov	r1, r3
 800700c:	480d      	ldr	r0, [pc, #52]	; (8007044 <MX_GPIO_Init+0x27c>)
 800700e:	f004 f8af 	bl	800b170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8007012:	239b      	movs	r3, #155	; 0x9b
 8007014:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007016:	2300      	movs	r3, #0
 8007018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800701a:	2301      	movs	r3, #1
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800701e:	f107 031c 	add.w	r3, r7, #28
 8007022:	4619      	mov	r1, r3
 8007024:	4806      	ldr	r0, [pc, #24]	; (8007040 <MX_GPIO_Init+0x278>)
 8007026:	f004 f8a3 	bl	800b170 <HAL_GPIO_Init>

}
 800702a:	bf00      	nop
 800702c:	3730      	adds	r7, #48	; 0x30
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40023800 	.word	0x40023800
 8007038:	40021000 	.word	0x40021000
 800703c:	40020400 	.word	0x40020400
 8007040:	40020c00 	.word	0x40020c00
 8007044:	40020000 	.word	0x40020000
 8007048:	40020800 	.word	0x40020800

0800704c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007050:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007052:	e7fe      	b.n	8007052 <Error_Handler+0x6>

08007054 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <HAL_MspInit+0x4c>)
 8007070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007072:	4a0f      	ldr	r2, [pc, #60]	; (80070b0 <HAL_MspInit+0x4c>)
 8007074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007078:	6453      	str	r3, [r2, #68]	; 0x44
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <HAL_MspInit+0x4c>)
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007086:	2300      	movs	r3, #0
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <HAL_MspInit+0x4c>)
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	4a08      	ldr	r2, [pc, #32]	; (80070b0 <HAL_MspInit+0x4c>)
 8007090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007094:	6413      	str	r3, [r2, #64]	; 0x40
 8007096:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <HAL_MspInit+0x4c>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800

080070b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08c      	sub	sp, #48	; 0x30
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070bc:	f107 031c 	add.w	r3, r7, #28
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	609a      	str	r2, [r3, #8]
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a4a      	ldr	r2, [pc, #296]	; (80071fc <HAL_ADC_MspInit+0x148>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f040 808e 	bne.w	80071f4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	4b48      	ldr	r3, [pc, #288]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 80070de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e0:	4a47      	ldr	r2, [pc, #284]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 80070e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070e6:	6453      	str	r3, [r2, #68]	; 0x44
 80070e8:	4b45      	ldr	r3, [pc, #276]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	4b41      	ldr	r3, [pc, #260]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	4a40      	ldr	r2, [pc, #256]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 80070fe:	f043 0304 	orr.w	r3, r3, #4
 8007102:	6313      	str	r3, [r2, #48]	; 0x30
 8007104:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007110:	2300      	movs	r3, #0
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	4a39      	ldr	r2, [pc, #228]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	6313      	str	r3, [r2, #48]	; 0x30
 8007120:	4b37      	ldr	r3, [pc, #220]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	4b33      	ldr	r3, [pc, #204]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	4a32      	ldr	r2, [pc, #200]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 8007136:	f043 0302 	orr.w	r3, r3, #2
 800713a:	6313      	str	r3, [r2, #48]	; 0x30
 800713c:	4b30      	ldr	r3, [pc, #192]	; (8007200 <HAL_ADC_MspInit+0x14c>)
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007148:	230f      	movs	r3, #15
 800714a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800714c:	2303      	movs	r3, #3
 800714e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007150:	2300      	movs	r3, #0
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007154:	f107 031c 	add.w	r3, r7, #28
 8007158:	4619      	mov	r1, r3
 800715a:	482a      	ldr	r0, [pc, #168]	; (8007204 <HAL_ADC_MspInit+0x150>)
 800715c:	f004 f808 	bl	800b170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007160:	23ff      	movs	r3, #255	; 0xff
 8007162:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007164:	2303      	movs	r3, #3
 8007166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007168:	2300      	movs	r3, #0
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800716c:	f107 031c 	add.w	r3, r7, #28
 8007170:	4619      	mov	r1, r3
 8007172:	4825      	ldr	r0, [pc, #148]	; (8007208 <HAL_ADC_MspInit+0x154>)
 8007174:	f003 fffc 	bl	800b170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007178:	2303      	movs	r3, #3
 800717a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800717c:	2303      	movs	r3, #3
 800717e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007180:	2300      	movs	r3, #0
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007184:	f107 031c 	add.w	r3, r7, #28
 8007188:	4619      	mov	r1, r3
 800718a:	4820      	ldr	r0, [pc, #128]	; (800720c <HAL_ADC_MspInit+0x158>)
 800718c:	f003 fff0 	bl	800b170 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8007190:	4b1f      	ldr	r3, [pc, #124]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 8007192:	4a20      	ldr	r2, [pc, #128]	; (8007214 <HAL_ADC_MspInit+0x160>)
 8007194:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007196:	4b1e      	ldr	r3, [pc, #120]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 8007198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800719c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800719e:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80071aa:	4b19      	ldr	r3, [pc, #100]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071b0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80071b2:	4b17      	ldr	r3, [pc, #92]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071b8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80071c2:	4b13      	ldr	r3, [pc, #76]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80071d0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071d2:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80071d8:	480d      	ldr	r0, [pc, #52]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071da:	f003 fc2d 	bl	800aa38 <HAL_DMA_Init>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80071e4:	f7ff ff32 	bl	800704c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a09      	ldr	r2, [pc, #36]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
 80071ee:	4a08      	ldr	r2, [pc, #32]	; (8007210 <HAL_ADC_MspInit+0x15c>)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80071f4:	bf00      	nop
 80071f6:	3730      	adds	r7, #48	; 0x30
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40012100 	.word	0x40012100
 8007200:	40023800 	.word	0x40023800
 8007204:	40020800 	.word	0x40020800
 8007208:	40020000 	.word	0x40020000
 800720c:	40020400 	.word	0x40020400
 8007210:	20044c88 	.word	0x20044c88
 8007214:	40026440 	.word	0x40026440

08007218 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08c      	sub	sp, #48	; 0x30
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007220:	f107 031c 	add.w	r3, r7, #28
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a32      	ldr	r2, [pc, #200]	; (8007300 <HAL_I2C_MspInit+0xe8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d12c      	bne.n	8007294 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800723a:	2300      	movs	r3, #0
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	4b31      	ldr	r3, [pc, #196]	; (8007304 <HAL_I2C_MspInit+0xec>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	4a30      	ldr	r2, [pc, #192]	; (8007304 <HAL_I2C_MspInit+0xec>)
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	6313      	str	r3, [r2, #48]	; 0x30
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <HAL_I2C_MspInit+0xec>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007256:	23c0      	movs	r3, #192	; 0xc0
 8007258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800725a:	2312      	movs	r3, #18
 800725c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800725e:	2301      	movs	r3, #1
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007262:	2303      	movs	r3, #3
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007266:	2304      	movs	r3, #4
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800726a:	f107 031c 	add.w	r3, r7, #28
 800726e:	4619      	mov	r1, r3
 8007270:	4825      	ldr	r0, [pc, #148]	; (8007308 <HAL_I2C_MspInit+0xf0>)
 8007272:	f003 ff7d 	bl	800b170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	4b22      	ldr	r3, [pc, #136]	; (8007304 <HAL_I2C_MspInit+0xec>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a21      	ldr	r2, [pc, #132]	; (8007304 <HAL_I2C_MspInit+0xec>)
 8007280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
 8007286:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <HAL_I2C_MspInit+0xec>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007292:	e031      	b.n	80072f8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1c      	ldr	r2, [pc, #112]	; (800730c <HAL_I2C_MspInit+0xf4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d12c      	bne.n	80072f8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	4b18      	ldr	r3, [pc, #96]	; (8007304 <HAL_I2C_MspInit+0xec>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	4a17      	ldr	r2, [pc, #92]	; (8007304 <HAL_I2C_MspInit+0xec>)
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	6313      	str	r3, [r2, #48]	; 0x30
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <HAL_I2C_MspInit+0xec>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80072ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80072be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072c0:	2312      	movs	r3, #18
 80072c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072c4:	2301      	movs	r3, #1
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072c8:	2303      	movs	r3, #3
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80072cc:	2304      	movs	r3, #4
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072d0:	f107 031c 	add.w	r3, r7, #28
 80072d4:	4619      	mov	r1, r3
 80072d6:	480c      	ldr	r0, [pc, #48]	; (8007308 <HAL_I2C_MspInit+0xf0>)
 80072d8:	f003 ff4a 	bl	800b170 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	4b08      	ldr	r3, [pc, #32]	; (8007304 <HAL_I2C_MspInit+0xec>)
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	4a07      	ldr	r2, [pc, #28]	; (8007304 <HAL_I2C_MspInit+0xec>)
 80072e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072ea:	6413      	str	r3, [r2, #64]	; 0x40
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_I2C_MspInit+0xec>)
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	3730      	adds	r7, #48	; 0x30
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40005400 	.word	0x40005400
 8007304:	40023800 	.word	0x40023800
 8007308:	40020400 	.word	0x40020400
 800730c:	40005800 	.word	0x40005800

08007310 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007318:	f107 0314 	add.w	r3, r7, #20
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a69      	ldr	r2, [pc, #420]	; (80074d4 <HAL_SD_MspInit+0x1c4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	f040 80cb 	bne.w	80074ca <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	4b67      	ldr	r3, [pc, #412]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 800733a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733c:	4a66      	ldr	r2, [pc, #408]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 800733e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007342:	6453      	str	r3, [r2, #68]	; 0x44
 8007344:	4b64      	ldr	r3, [pc, #400]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	4b60      	ldr	r3, [pc, #384]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	4a5f      	ldr	r2, [pc, #380]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 800735a:	f043 0304 	orr.w	r3, r3, #4
 800735e:	6313      	str	r3, [r2, #48]	; 0x30
 8007360:	4b5d      	ldr	r3, [pc, #372]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800736c:	2300      	movs	r3, #0
 800736e:	60bb      	str	r3, [r7, #8]
 8007370:	4b59      	ldr	r3, [pc, #356]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 8007372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007374:	4a58      	ldr	r2, [pc, #352]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 8007376:	f043 0308 	orr.w	r3, r3, #8
 800737a:	6313      	str	r3, [r2, #48]	; 0x30
 800737c:	4b56      	ldr	r3, [pc, #344]	; (80074d8 <HAL_SD_MspInit+0x1c8>)
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	60bb      	str	r3, [r7, #8]
 8007386:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007388:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800738c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738e:	2302      	movs	r3, #2
 8007390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007396:	2303      	movs	r3, #3
 8007398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800739a:	230c      	movs	r3, #12
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800739e:	f107 0314 	add.w	r3, r7, #20
 80073a2:	4619      	mov	r1, r3
 80073a4:	484d      	ldr	r0, [pc, #308]	; (80074dc <HAL_SD_MspInit+0x1cc>)
 80073a6:	f003 fee3 	bl	800b170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80073aa:	2304      	movs	r3, #4
 80073ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ae:	2302      	movs	r3, #2
 80073b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b6:	2303      	movs	r3, #3
 80073b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80073ba:	230c      	movs	r3, #12
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	4619      	mov	r1, r3
 80073c4:	4846      	ldr	r0, [pc, #280]	; (80074e0 <HAL_SD_MspInit+0x1d0>)
 80073c6:	f003 fed3 	bl	800b170 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80073ca:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073cc:	4a46      	ldr	r2, [pc, #280]	; (80074e8 <HAL_SD_MspInit+0x1d8>)
 80073ce:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80073d0:	4b44      	ldr	r3, [pc, #272]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073d6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073da:	2200      	movs	r2, #0
 80073dc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073de:	4b41      	ldr	r3, [pc, #260]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073e4:	4b3f      	ldr	r3, [pc, #252]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073ea:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073ec:	4b3d      	ldr	r3, [pc, #244]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073f2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80073f4:	4b3b      	ldr	r3, [pc, #236]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073fa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80073fc:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 80073fe:	2220      	movs	r2, #32
 8007400:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007402:	4b38      	ldr	r3, [pc, #224]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 8007404:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007408:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800740a:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 800740c:	2204      	movs	r2, #4
 800740e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007410:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 8007412:	2203      	movs	r2, #3
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007416:	4b33      	ldr	r3, [pc, #204]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 8007418:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 8007420:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007424:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007426:	482f      	ldr	r0, [pc, #188]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 8007428:	f003 fb06 	bl	800aa38 <HAL_DMA_Init>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007432:	f7ff fe0b 	bl	800704c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 800743a:	641a      	str	r2, [r3, #64]	; 0x40
 800743c:	4a29      	ldr	r2, [pc, #164]	; (80074e4 <HAL_SD_MspInit+0x1d4>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007442:	4b2a      	ldr	r3, [pc, #168]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007444:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <HAL_SD_MspInit+0x1e0>)
 8007446:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007448:	4b28      	ldr	r3, [pc, #160]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 800744a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800744e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007450:	4b26      	ldr	r3, [pc, #152]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007452:	2240      	movs	r2, #64	; 0x40
 8007454:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007456:	4b25      	ldr	r3, [pc, #148]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 800745e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007462:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800746a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800746c:	4b1f      	ldr	r3, [pc, #124]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 800746e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007472:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007476:	2220      	movs	r2, #32
 8007478:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 800747c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007480:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007482:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007484:	2204      	movs	r2, #4
 8007486:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007488:	4b18      	ldr	r3, [pc, #96]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 800748a:	2203      	movs	r2, #3
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800748e:	4b17      	ldr	r3, [pc, #92]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007490:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 8007498:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800749e:	4813      	ldr	r0, [pc, #76]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 80074a0:	f003 faca 	bl	800aa38 <HAL_DMA_Init>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80074aa:	f7ff fdcf 	bl	800704c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 80074b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80074b4:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <HAL_SD_MspInit+0x1dc>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	2031      	movs	r0, #49	; 0x31
 80074c0:	f003 fa83 	bl	800a9ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80074c4:	2031      	movs	r0, #49	; 0x31
 80074c6:	f003 fa9c 	bl	800aa02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80074ca:	bf00      	nop
 80074cc:	3728      	adds	r7, #40	; 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40012c00 	.word	0x40012c00
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40020800 	.word	0x40020800
 80074e0:	40020c00 	.word	0x40020c00
 80074e4:	200447b0 	.word	0x200447b0
 80074e8:	40026458 	.word	0x40026458
 80074ec:	20044ae4 	.word	0x20044ae4
 80074f0:	400264a0 	.word	0x400264a0

080074f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074fc:	f107 0314 	add.w	r3, r7, #20
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a19      	ldr	r2, [pc, #100]	; (8007578 <HAL_SPI_MspInit+0x84>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d12c      	bne.n	8007570 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	4b18      	ldr	r3, [pc, #96]	; (800757c <HAL_SPI_MspInit+0x88>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	4a17      	ldr	r2, [pc, #92]	; (800757c <HAL_SPI_MspInit+0x88>)
 8007520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007524:	6413      	str	r3, [r2, #64]	; 0x40
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <HAL_SPI_MspInit+0x88>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <HAL_SPI_MspInit+0x88>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <HAL_SPI_MspInit+0x88>)
 800753c:	f043 0302 	orr.w	r3, r3, #2
 8007540:	6313      	str	r3, [r2, #48]	; 0x30
 8007542:	4b0e      	ldr	r3, [pc, #56]	; (800757c <HAL_SPI_MspInit+0x88>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800754e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007554:	2302      	movs	r3, #2
 8007556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800755c:	2303      	movs	r3, #3
 800755e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007560:	2305      	movs	r3, #5
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4619      	mov	r1, r3
 800756a:	4805      	ldr	r0, [pc, #20]	; (8007580 <HAL_SPI_MspInit+0x8c>)
 800756c:	f003 fe00 	bl	800b170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007570:	bf00      	nop
 8007572:	3728      	adds	r7, #40	; 0x28
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40003800 	.word	0x40003800
 800757c:	40023800 	.word	0x40023800
 8007580:	40020400 	.word	0x40020400

08007584 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08c      	sub	sp, #48	; 0x30
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 031c 	add.w	r3, r7, #28
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a2d      	ldr	r2, [pc, #180]	; (8007658 <HAL_TIM_PWM_MspInit+0xd4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d12d      	bne.n	8007602 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	4b2c      	ldr	r3, [pc, #176]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	4a2b      	ldr	r2, [pc, #172]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6453      	str	r3, [r2, #68]	; 0x44
 80075b6:	4b29      	ldr	r3, [pc, #164]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 80075b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	4b25      	ldr	r3, [pc, #148]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	4a24      	ldr	r2, [pc, #144]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 80075cc:	f043 0310 	orr.w	r3, r3, #16
 80075d0:	6313      	str	r3, [r2, #48]	; 0x30
 80075d2:	4b22      	ldr	r3, [pc, #136]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80075de:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80075e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e4:	2302      	movs	r3, #2
 80075e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ec:	2300      	movs	r3, #0
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80075f0:	2301      	movs	r3, #1
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075f4:	f107 031c 	add.w	r3, r7, #28
 80075f8:	4619      	mov	r1, r3
 80075fa:	4819      	ldr	r0, [pc, #100]	; (8007660 <HAL_TIM_PWM_MspInit+0xdc>)
 80075fc:	f003 fdb8 	bl	800b170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007600:	e026      	b.n	8007650 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a17      	ldr	r2, [pc, #92]	; (8007664 <HAL_TIM_PWM_MspInit+0xe0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d10e      	bne.n	800762a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 8007616:	f043 0302 	orr.w	r3, r3, #2
 800761a:	6413      	str	r3, [r2, #64]	; 0x40
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	693b      	ldr	r3, [r7, #16]
}
 8007628:	e012      	b.n	8007650 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <HAL_TIM_PWM_MspInit+0xe4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10d      	bne.n	8007650 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	4b08      	ldr	r3, [pc, #32]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	4a07      	ldr	r2, [pc, #28]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 800763e:	f043 0304 	orr.w	r3, r3, #4
 8007642:	6413      	str	r3, [r2, #64]	; 0x40
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <HAL_TIM_PWM_MspInit+0xd8>)
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
}
 8007650:	bf00      	nop
 8007652:	3730      	adds	r7, #48	; 0x30
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40010000 	.word	0x40010000
 800765c:	40023800 	.word	0x40023800
 8007660:	40021000 	.word	0x40021000
 8007664:	40000400 	.word	0x40000400
 8007668:	40000800 	.word	0x40000800

0800766c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a3e      	ldr	r2, [pc, #248]	; (8007774 <HAL_TIM_Base_MspInit+0x108>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d116      	bne.n	80076ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800767e:	2300      	movs	r3, #0
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	4a3c      	ldr	r2, [pc, #240]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007688:	f043 0310 	orr.w	r3, r3, #16
 800768c:	6413      	str	r3, [r2, #64]	; 0x40
 800768e:	4b3a      	ldr	r3, [pc, #232]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800769a:	2200      	movs	r2, #0
 800769c:	2101      	movs	r1, #1
 800769e:	2036      	movs	r0, #54	; 0x36
 80076a0:	f003 f993 	bl	800a9ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80076a4:	2036      	movs	r0, #54	; 0x36
 80076a6:	f003 f9ac 	bl	800aa02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80076aa:	e05e      	b.n	800776a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a32      	ldr	r2, [pc, #200]	; (800777c <HAL_TIM_Base_MspInit+0x110>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d116      	bne.n	80076e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80076b6:	2300      	movs	r3, #0
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	4b2f      	ldr	r3, [pc, #188]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	4a2e      	ldr	r2, [pc, #184]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	6413      	str	r3, [r2, #64]	; 0x40
 80076c6:	4b2c      	ldr	r3, [pc, #176]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	2037      	movs	r0, #55	; 0x37
 80076d8:	f003 f977 	bl	800a9ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80076dc:	2037      	movs	r0, #55	; 0x37
 80076de:	f003 f990 	bl	800aa02 <HAL_NVIC_EnableIRQ>
}
 80076e2:	e042      	b.n	800776a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a25      	ldr	r2, [pc, #148]	; (8007780 <HAL_TIM_Base_MspInit+0x114>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d10e      	bne.n	800770c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	4b21      	ldr	r3, [pc, #132]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	4a20      	ldr	r2, [pc, #128]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 80076f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fc:	6453      	str	r3, [r2, #68]	; 0x44
 80076fe:	4b1e      	ldr	r3, [pc, #120]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	697b      	ldr	r3, [r7, #20]
}
 800770a:	e02e      	b.n	800776a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1c      	ldr	r2, [pc, #112]	; (8007784 <HAL_TIM_Base_MspInit+0x118>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d10e      	bne.n	8007734 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	4b17      	ldr	r3, [pc, #92]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	4a16      	ldr	r2, [pc, #88]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007724:	6453      	str	r3, [r2, #68]	; 0x44
 8007726:	4b14      	ldr	r3, [pc, #80]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
}
 8007732:	e01a      	b.n	800776a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <HAL_TIM_Base_MspInit+0x11c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d115      	bne.n	800776a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774c:	6413      	str	r3, [r2, #64]	; 0x40
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_TIM_Base_MspInit+0x10c>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	202c      	movs	r0, #44	; 0x2c
 8007760:	f003 f933 	bl	800a9ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007764:	202c      	movs	r0, #44	; 0x2c
 8007766:	f003 f94c 	bl	800aa02 <HAL_NVIC_EnableIRQ>
}
 800776a:	bf00      	nop
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	40001000 	.word	0x40001000
 8007778:	40023800 	.word	0x40023800
 800777c:	40001400 	.word	0x40001400
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800
 8007788:	40001c00 	.word	0x40001c00

0800778c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08a      	sub	sp, #40	; 0x28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	605a      	str	r2, [r3, #4]
 800779e:	609a      	str	r2, [r3, #8]
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <HAL_TIM_Encoder_MspInit+0x94>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d133      	bne.n	8007816 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <HAL_TIM_Encoder_MspInit+0x98>)
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_TIM_Encoder_MspInit+0x98>)
 80077b8:	f043 0302 	orr.w	r3, r3, #2
 80077bc:	6453      	str	r3, [r2, #68]	; 0x44
 80077be:	4b19      	ldr	r3, [pc, #100]	; (8007824 <HAL_TIM_Encoder_MspInit+0x98>)
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4b15      	ldr	r3, [pc, #84]	; (8007824 <HAL_TIM_Encoder_MspInit+0x98>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	4a14      	ldr	r2, [pc, #80]	; (8007824 <HAL_TIM_Encoder_MspInit+0x98>)
 80077d4:	f043 0304 	orr.w	r3, r3, #4
 80077d8:	6313      	str	r3, [r2, #48]	; 0x30
 80077da:	4b12      	ldr	r3, [pc, #72]	; (8007824 <HAL_TIM_Encoder_MspInit+0x98>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80077e6:	23c0      	movs	r3, #192	; 0xc0
 80077e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ea:	2302      	movs	r3, #2
 80077ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077f2:	2300      	movs	r3, #0
 80077f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80077f6:	2303      	movs	r3, #3
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077fa:	f107 0314 	add.w	r3, r7, #20
 80077fe:	4619      	mov	r1, r3
 8007800:	4809      	ldr	r0, [pc, #36]	; (8007828 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007802:	f003 fcb5 	bl	800b170 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	202c      	movs	r0, #44	; 0x2c
 800780c:	f003 f8dd 	bl	800a9ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007810:	202c      	movs	r0, #44	; 0x2c
 8007812:	f003 f8f6 	bl	800aa02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007816:	bf00      	nop
 8007818:	3728      	adds	r7, #40	; 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40010400 	.word	0x40010400
 8007824:	40023800 	.word	0x40023800
 8007828:	40020800 	.word	0x40020800

0800782c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007834:	f107 031c 	add.w	r3, r7, #28
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	60da      	str	r2, [r3, #12]
 8007842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a5c      	ldr	r2, [pc, #368]	; (80079bc <HAL_TIM_MspPostInit+0x190>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d11f      	bne.n	800788e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	4b5b      	ldr	r3, [pc, #364]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	4a5a      	ldr	r2, [pc, #360]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 8007858:	f043 0310 	orr.w	r3, r3, #16
 800785c:	6313      	str	r3, [r2, #48]	; 0x30
 800785e:	4b58      	ldr	r3, [pc, #352]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800786a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800786e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007870:	2302      	movs	r3, #2
 8007872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007878:	2300      	movs	r3, #0
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800787c:	2301      	movs	r3, #1
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007880:	f107 031c 	add.w	r3, r7, #28
 8007884:	4619      	mov	r1, r3
 8007886:	484f      	ldr	r0, [pc, #316]	; (80079c4 <HAL_TIM_MspPostInit+0x198>)
 8007888:	f003 fc72 	bl	800b170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800788c:	e091      	b.n	80079b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a4d      	ldr	r2, [pc, #308]	; (80079c8 <HAL_TIM_MspPostInit+0x19c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d11e      	bne.n	80078d6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	4b48      	ldr	r3, [pc, #288]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	4a47      	ldr	r2, [pc, #284]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 80078a2:	f043 0302 	orr.w	r3, r3, #2
 80078a6:	6313      	str	r3, [r2, #48]	; 0x30
 80078a8:	4b45      	ldr	r3, [pc, #276]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80078b4:	2330      	movs	r3, #48	; 0x30
 80078b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b8:	2302      	movs	r3, #2
 80078ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078bc:	2300      	movs	r3, #0
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078c0:	2300      	movs	r3, #0
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80078c4:	2302      	movs	r3, #2
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c8:	f107 031c 	add.w	r3, r7, #28
 80078cc:	4619      	mov	r1, r3
 80078ce:	483f      	ldr	r0, [pc, #252]	; (80079cc <HAL_TIM_MspPostInit+0x1a0>)
 80078d0:	f003 fc4e 	bl	800b170 <HAL_GPIO_Init>
}
 80078d4:	e06d      	b.n	80079b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3d      	ldr	r2, [pc, #244]	; (80079d0 <HAL_TIM_MspPostInit+0x1a4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d11f      	bne.n	8007920 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078e0:	2300      	movs	r3, #0
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	4b36      	ldr	r3, [pc, #216]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	4a35      	ldr	r2, [pc, #212]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 80078ea:	f043 0308 	orr.w	r3, r3, #8
 80078ee:	6313      	str	r3, [r2, #48]	; 0x30
 80078f0:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80078fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007902:	2302      	movs	r3, #2
 8007904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007906:	2300      	movs	r3, #0
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800790a:	2300      	movs	r3, #0
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800790e:	2302      	movs	r3, #2
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007912:	f107 031c 	add.w	r3, r7, #28
 8007916:	4619      	mov	r1, r3
 8007918:	482e      	ldr	r0, [pc, #184]	; (80079d4 <HAL_TIM_MspPostInit+0x1a8>)
 800791a:	f003 fc29 	bl	800b170 <HAL_GPIO_Init>
}
 800791e:	e048      	b.n	80079b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a2c      	ldr	r2, [pc, #176]	; (80079d8 <HAL_TIM_MspPostInit+0x1ac>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d11f      	bne.n	800796a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800792a:	2300      	movs	r3, #0
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	4a23      	ldr	r2, [pc, #140]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	6313      	str	r3, [r2, #48]	; 0x30
 800793a:	4b21      	ldr	r3, [pc, #132]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800794a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794c:	2302      	movs	r3, #2
 800794e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007954:	2300      	movs	r3, #0
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007958:	2303      	movs	r3, #3
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800795c:	f107 031c 	add.w	r3, r7, #28
 8007960:	4619      	mov	r1, r3
 8007962:	481a      	ldr	r0, [pc, #104]	; (80079cc <HAL_TIM_MspPostInit+0x1a0>)
 8007964:	f003 fc04 	bl	800b170 <HAL_GPIO_Init>
}
 8007968:	e023      	b.n	80079b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1b      	ldr	r2, [pc, #108]	; (80079dc <HAL_TIM_MspPostInit+0x1b0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d11e      	bne.n	80079b2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007974:	2300      	movs	r3, #0
 8007976:	60bb      	str	r3, [r7, #8]
 8007978:	4b11      	ldr	r3, [pc, #68]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 800797e:	f043 0302 	orr.w	r3, r3, #2
 8007982:	6313      	str	r3, [r2, #48]	; 0x30
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <HAL_TIM_MspPostInit+0x194>)
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007996:	2302      	movs	r3, #2
 8007998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799a:	2300      	movs	r3, #0
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800799e:	2300      	movs	r3, #0
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80079a2:	2303      	movs	r3, #3
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079a6:	f107 031c 	add.w	r3, r7, #28
 80079aa:	4619      	mov	r1, r3
 80079ac:	4807      	ldr	r0, [pc, #28]	; (80079cc <HAL_TIM_MspPostInit+0x1a0>)
 80079ae:	f003 fbdf 	bl	800b170 <HAL_GPIO_Init>
}
 80079b2:	bf00      	nop
 80079b4:	3730      	adds	r7, #48	; 0x30
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40010000 	.word	0x40010000
 80079c0:	40023800 	.word	0x40023800
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40000400 	.word	0x40000400
 80079cc:	40020400 	.word	0x40020400
 80079d0:	40000800 	.word	0x40000800
 80079d4:	40020c00 	.word	0x40020c00
 80079d8:	40014400 	.word	0x40014400
 80079dc:	40014800 	.word	0x40014800

080079e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	; 0x28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <HAL_UART_MspInit+0x84>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d12b      	bne.n	8007a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a02:	2300      	movs	r3, #0
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <HAL_UART_MspInit+0x88>)
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_UART_MspInit+0x88>)
 8007a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a10:	6413      	str	r3, [r2, #64]	; 0x40
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <HAL_UART_MspInit+0x88>)
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <HAL_UART_MspInit+0x88>)
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	4a10      	ldr	r2, [pc, #64]	; (8007a68 <HAL_UART_MspInit+0x88>)
 8007a28:	f043 0308 	orr.w	r3, r3, #8
 8007a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a2e:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <HAL_UART_MspInit+0x88>)
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007a3a:	2360      	movs	r3, #96	; 0x60
 8007a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a46:	2303      	movs	r3, #3
 8007a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007a4a:	2307      	movs	r3, #7
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a4e:	f107 0314 	add.w	r3, r7, #20
 8007a52:	4619      	mov	r1, r3
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <HAL_UART_MspInit+0x8c>)
 8007a56:	f003 fb8b 	bl	800b170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007a5a:	bf00      	nop
 8007a5c:	3728      	adds	r7, #40	; 0x28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40004400 	.word	0x40004400
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	40020c00 	.word	0x40020c00

08007a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007a74:	e7fe      	b.n	8007a74 <NMI_Handler+0x4>

08007a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a76:	b480      	push	{r7}
 8007a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a7a:	e7fe      	b.n	8007a7a <HardFault_Handler+0x4>

08007a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a80:	e7fe      	b.n	8007a80 <MemManage_Handler+0x4>

08007a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a82:	b480      	push	{r7}
 8007a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a86:	e7fe      	b.n	8007a86 <BusFault_Handler+0x4>

08007a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a8c:	e7fe      	b.n	8007a8c <UsageFault_Handler+0x4>

08007a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a92:	bf00      	nop
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007aa0:	bf00      	nop
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007aae:	bf00      	nop
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007abc:	f002 fa64 	bl	8009f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007ac8:	4803      	ldr	r0, [pc, #12]	; (8007ad8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007aca:	f007 fd34 	bl	800f536 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007ace:	4803      	ldr	r0, [pc, #12]	; (8007adc <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007ad0:	f007 fd31 	bl	800f536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007ad4:	bf00      	nop
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20044868 	.word	0x20044868
 8007adc:	20044a64 	.word	0x20044a64

08007ae0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007ae4:	4802      	ldr	r0, [pc, #8]	; (8007af0 <SDIO_IRQHandler+0x10>)
 8007ae6:	f005 fdcd 	bl	800d684 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007aea:	bf00      	nop
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20044bc4 	.word	0x20044bc4

08007af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007af8:	4802      	ldr	r0, [pc, #8]	; (8007b04 <TIM6_DAC_IRQHandler+0x10>)
 8007afa:	f007 fd1c 	bl	800f536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20044b44 	.word	0x20044b44

08007b08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007b0c:	4802      	ldr	r0, [pc, #8]	; (8007b18 <TIM7_IRQHandler+0x10>)
 8007b0e:	f007 fd12 	bl	800f536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20044ce8 	.word	0x20044ce8

08007b1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007b20:	4802      	ldr	r0, [pc, #8]	; (8007b2c <DMA2_Stream2_IRQHandler+0x10>)
 8007b22:	f003 f8b1 	bl	800ac88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007b26:	bf00      	nop
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20044c88 	.word	0x20044c88

08007b30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007b34:	4802      	ldr	r0, [pc, #8]	; (8007b40 <DMA2_Stream3_IRQHandler+0x10>)
 8007b36:	f003 f8a7 	bl	800ac88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007b3a:	bf00      	nop
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	200447b0 	.word	0x200447b0

08007b44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007b48:	4802      	ldr	r0, [pc, #8]	; (8007b54 <DMA2_Stream6_IRQHandler+0x10>)
 8007b4a:	f003 f89d 	bl	800ac88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007b4e:	bf00      	nop
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20044ae4 	.word	0x20044ae4

08007b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <_sbrk+0x5c>)
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <_sbrk+0x60>)
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b6c:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <_sbrk+0x64>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b74:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <_sbrk+0x64>)
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <_sbrk+0x68>)
 8007b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b7a:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <_sbrk+0x64>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d207      	bcs.n	8007b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b88:	f00d ff68 	bl	8015a5c <__errno>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	230c      	movs	r3, #12
 8007b90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	e009      	b.n	8007bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007b98:	4b08      	ldr	r3, [pc, #32]	; (8007bbc <_sbrk+0x64>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <_sbrk+0x64>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	4a05      	ldr	r2, [pc, #20]	; (8007bbc <_sbrk+0x64>)
 8007ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007baa:	68fb      	ldr	r3, [r7, #12]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20050000 	.word	0x20050000
 8007bb8:	00000800 	.word	0x00000800
 8007bbc:	200002bc 	.word	0x200002bc
 8007bc0:	20046e38 	.word	0x20046e38

08007bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007bc8:	4b08      	ldr	r3, [pc, #32]	; (8007bec <SystemInit+0x28>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bce:	4a07      	ldr	r2, [pc, #28]	; (8007bec <SystemInit+0x28>)
 8007bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <SystemInit+0x28>)
 8007bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bde:	609a      	str	r2, [r3, #8]
#endif
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007bf0:	b598      	push	{r3, r4, r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
	lcd_init();
 8007bf4:	f7f9 fa10 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007bf8:	483b      	ldr	r0, [pc, #236]	; (8007ce8 <cppInit+0xf8>)
 8007bfa:	f7fd fcb3 	bl	8005564 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007bfe:	2064      	movs	r0, #100	; 0x64
 8007c00:	f002 f9e2 	bl	8009fc8 <HAL_Delay>
	power_sensor.updateValues();
 8007c04:	4838      	ldr	r0, [pc, #224]	; (8007ce8 <cppInit+0xf8>)
 8007c06:	f7fd fcbb 	bl	8005580 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007c0a:	f7f9 fa49 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2000      	movs	r0, #0
 8007c12:	f7f9 fa55 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007c16:	4835      	ldr	r0, [pc, #212]	; (8007cec <cppInit+0xfc>)
 8007c18:	f7f9 fa7c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f7f9 fa4e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007c24:	4830      	ldr	r0, [pc, #192]	; (8007ce8 <cppInit+0xf8>)
 8007c26:	f7fd fcd5 	bl	80055d4 <_ZN11PowerSensor17getButteryVoltageEv>
 8007c2a:	ee10 3a10 	vmov	r3, s0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7f8 fca2 	bl	8000578 <__aeabi_f2d>
 8007c34:	4603      	mov	r3, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4623      	mov	r3, r4
 8007c3c:	482c      	ldr	r0, [pc, #176]	; (8007cf0 <cppInit+0x100>)
 8007c3e:	f7f9 fa69 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c46:	f002 f9bf 	bl	8009fc8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007c4a:	482a      	ldr	r0, [pc, #168]	; (8007cf4 <cppInit+0x104>)
 8007c4c:	f7fc feae 	bl	80049ac <_ZN6Logger10sdCardInitEv>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <cppInit+0x76>
		led.fullColor('G');
 8007c56:	2147      	movs	r1, #71	; 0x47
 8007c58:	4827      	ldr	r0, [pc, #156]	; (8007cf8 <cppInit+0x108>)
 8007c5a:	f7fa fafb 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007c5e:	2064      	movs	r0, #100	; 0x64
 8007c60:	f002 f9b2 	bl	8009fc8 <HAL_Delay>
 8007c64:	e006      	b.n	8007c74 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007c66:	2152      	movs	r1, #82	; 0x52
 8007c68:	4823      	ldr	r0, [pc, #140]	; (8007cf8 <cppInit+0x108>)
 8007c6a:	f7fa faf3 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007c6e:	2064      	movs	r0, #100	; 0x64
 8007c70:	f002 f9aa 	bl	8009fc8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007c74:	4821      	ldr	r0, [pc, #132]	; (8007cfc <cppInit+0x10c>)
 8007c76:	f7fa fc49 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007c7a:	4821      	ldr	r0, [pc, #132]	; (8007d00 <cppInit+0x110>)
 8007c7c:	f7fd f92c 	bl	8004ed8 <_ZN5Motor4initEv>
	encoder.init();
 8007c80:	4820      	ldr	r0, [pc, #128]	; (8007d04 <cppInit+0x114>)
 8007c82:	f7f9 fbcf 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007c86:	4820      	ldr	r0, [pc, #128]	; (8007d08 <cppInit+0x118>)
 8007c88:	f7fa f892 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 8007c8c:	481f      	ldr	r0, [pc, #124]	; (8007d0c <cppInit+0x11c>)
 8007c8e:	f7fb ff85 	bl	8003b9c <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007c92:	481a      	ldr	r0, [pc, #104]	; (8007cfc <cppInit+0x10c>)
 8007c94:	f7fa fd9a 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c9c:	f002 f994 	bl	8009fc8 <HAL_Delay>

	led.fullColor('M');
 8007ca0:	214d      	movs	r1, #77	; 0x4d
 8007ca2:	4815      	ldr	r0, [pc, #84]	; (8007cf8 <cppInit+0x108>)
 8007ca4:	f7fa fad6 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007ca8:	4817      	ldr	r0, [pc, #92]	; (8007d08 <cppInit+0x118>)
 8007caa:	f7fa f95b 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007cae:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007d10 <cppInit+0x120>
 8007cb2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007d14 <cppInit+0x124>
 8007cb6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007d18 <cppInit+0x128>
 8007cba:	4818      	ldr	r0, [pc, #96]	; (8007d1c <cppInit+0x12c>)
 8007cbc:	f7fe f9dc 	bl	8006078 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007cc0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007d20 <cppInit+0x130>
 8007cc4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007d24 <cppInit+0x134>
 8007cc8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007d28 <cppInit+0x138>
 8007ccc:	4813      	ldr	r0, [pc, #76]	; (8007d1c <cppInit+0x12c>)
 8007cce:	f7fe f9ec 	bl	80060aa <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007cd2:	4816      	ldr	r0, [pc, #88]	; (8007d2c <cppInit+0x13c>)
 8007cd4:	f7fd fb50 	bl	8005378 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007cd8:	4815      	ldr	r0, [pc, #84]	; (8007d30 <cppInit+0x140>)
 8007cda:	f7fd fbe7 	bl	80054ac <_ZN13PathFollowing4initEv>

	esc.init();
 8007cde:	4815      	ldr	r0, [pc, #84]	; (8007d34 <cppInit+0x144>)
 8007ce0:	f7f9 fa84 	bl	80011ec <_ZN3ESC4initEv>

}
 8007ce4:	bf00      	nop
 8007ce6:	bd98      	pop	{r3, r4, r7, pc}
 8007ce8:	200005d4 	.word	0x200005d4
 8007cec:	0801a0a4 	.word	0x0801a0a4
 8007cf0:	0801a0ac 	.word	0x0801a0ac
 8007cf4:	200005f4 	.word	0x200005f4
 8007cf8:	200005d0 	.word	0x200005d0
 8007cfc:	200002c0 	.word	0x200002c0
 8007d00:	200005cc 	.word	0x200005cc
 8007d04:	2001dac0 	.word	0x2001dac0
 8007d08:	200005e0 	.word	0x200005e0
 8007d0c:	2001db64 	.word	0x2001db64
 8007d10:	3a8439b6 	.word	0x3a8439b6
 8007d14:	40d1a29c 	.word	0x40d1a29c
 8007d18:	3f81f8a1 	.word	0x3f81f8a1
 8007d1c:	2001dae0 	.word	0x2001dae0
 8007d20:	00000000 	.word	0x00000000
 8007d24:	3f5e3fbc 	.word	0x3f5e3fbc
 8007d28:	3d75c28f 	.word	0x3d75c28f
 8007d2c:	2001db20 	.word	0x2001db20
 8007d30:	2002acb0 	.word	0x2002acb0
 8007d34:	2001db60 	.word	0x2001db60

08007d38 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007d3c:	480e      	ldr	r0, [pc, #56]	; (8007d78 <cppFlip1ms+0x40>)
 8007d3e:	f7fa fc43 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007d42:	480e      	ldr	r0, [pc, #56]	; (8007d7c <cppFlip1ms+0x44>)
 8007d44:	f7fa f85c 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007d48:	480d      	ldr	r0, [pc, #52]	; (8007d80 <cppFlip1ms+0x48>)
 8007d4a:	f7f9 fb8d 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007d4e:	480d      	ldr	r0, [pc, #52]	; (8007d84 <cppFlip1ms+0x4c>)
 8007d50:	f7fc f9ca 	bl	80040e8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007d54:	480c      	ldr	r0, [pc, #48]	; (8007d88 <cppFlip1ms+0x50>)
 8007d56:	f7fe f9c1 	bl	80060dc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007d5a:	480c      	ldr	r0, [pc, #48]	; (8007d8c <cppFlip1ms+0x54>)
 8007d5c:	f7fd faf0 	bl	8005340 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007d60:	480b      	ldr	r0, [pc, #44]	; (8007d90 <cppFlip1ms+0x58>)
 8007d62:	f7fd fcb3 	bl	80056cc <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007d66:	480b      	ldr	r0, [pc, #44]	; (8007d94 <cppFlip1ms+0x5c>)
 8007d68:	f7fd f8c8 	bl	8004efc <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007d6c:	4804      	ldr	r0, [pc, #16]	; (8007d80 <cppFlip1ms+0x48>)
 8007d6e:	f7f9 fc65 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	200002c0 	.word	0x200002c0
 8007d7c:	200005e0 	.word	0x200005e0
 8007d80:	2001dac0 	.word	0x2001dac0
 8007d84:	2001db64 	.word	0x2001db64
 8007d88:	2001dae0 	.word	0x2001dae0
 8007d8c:	2001db20 	.word	0x2001db20
 8007d90:	200005b8 	.word	0x200005b8
 8007d94:	200005cc 	.word	0x200005cc

08007d98 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007d9c:	4802      	ldr	r0, [pc, #8]	; (8007da8 <cppFlip100ns+0x10>)
 8007d9e:	f7fa fbc5 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200002c0 	.word	0x200002c0

08007dac <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007db0:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <cppFlip10ms+0x48>)
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <cppFlip10ms+0x48>)
 8007dba:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <cppFlip10ms+0x48>)
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d905      	bls.n	8007dd0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007dc4:	480c      	ldr	r0, [pc, #48]	; (8007df8 <cppFlip10ms+0x4c>)
 8007dc6:	f7fd ffa7 	bl	8005d18 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007dca:	4b0a      	ldr	r3, [pc, #40]	; (8007df4 <cppFlip10ms+0x48>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007dd0:	480a      	ldr	r0, [pc, #40]	; (8007dfc <cppFlip10ms+0x50>)
 8007dd2:	f7fd f955 	bl	8005080 <_ZN5Motor20getLeftCounterPeriodEv>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4809      	ldr	r0, [pc, #36]	; (8007e00 <cppFlip10ms+0x54>)
 8007ddc:	f7fc fe2e 	bl	8004a3c <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007de0:	4806      	ldr	r0, [pc, #24]	; (8007dfc <cppFlip10ms+0x50>)
 8007de2:	f7fd f95a 	bl	800509a <_ZN5Motor21getRightCounterPeriodEv>
 8007de6:	4603      	mov	r3, r0
 8007de8:	4619      	mov	r1, r3
 8007dea:	4805      	ldr	r0, [pc, #20]	; (8007e00 <cppFlip10ms+0x54>)
 8007dec:	f7fc fe5f 	bl	8004aae <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007df0:	bf00      	nop
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	200423d8 	.word	0x200423d8
 8007df8:	2002aaa4 	.word	0x2002aaa4
 8007dfc:	200005cc 	.word	0x200005cc
 8007e00:	200005f4 	.word	0x200005f4
 8007e04:	00000000 	.word	0x00000000

08007e08 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007e0e:	4baf      	ldr	r3, [pc, #700]	; (80080cc <cppLoop+0x2c4>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f3bf 8f5b 	dmb	ish
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf0c      	ite	eq
 8007e20:	2301      	moveq	r3, #1
 8007e22:	2300      	movne	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d015      	beq.n	8007e56 <cppLoop+0x4e>
 8007e2a:	48a8      	ldr	r0, [pc, #672]	; (80080cc <cppLoop+0x2c4>)
 8007e2c:	f00c fdb1 	bl	8014992 <__cxa_guard_acquire>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bf14      	ite	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	2300      	moveq	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <cppLoop+0x4e>
 8007e40:	48a3      	ldr	r0, [pc, #652]	; (80080d0 <cppLoop+0x2c8>)
 8007e42:	f7fb ffb2 	bl	8003daa <_ZN9LineTrace5getKpEv>
 8007e46:	eef0 7a40 	vmov.f32	s15, s0
 8007e4a:	4ba2      	ldr	r3, [pc, #648]	; (80080d4 <cppLoop+0x2cc>)
 8007e4c:	edc3 7a00 	vstr	s15, [r3]
 8007e50:	489e      	ldr	r0, [pc, #632]	; (80080cc <cppLoop+0x2c4>)
 8007e52:	f00c fdaa 	bl	80149aa <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007e56:	4ba0      	ldr	r3, [pc, #640]	; (80080d8 <cppLoop+0x2d0>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f3bf 8f5b 	dmb	ish
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bf0c      	ite	eq
 8007e68:	2301      	moveq	r3, #1
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d015      	beq.n	8007e9e <cppLoop+0x96>
 8007e72:	4899      	ldr	r0, [pc, #612]	; (80080d8 <cppLoop+0x2d0>)
 8007e74:	f00c fd8d 	bl	8014992 <__cxa_guard_acquire>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bf14      	ite	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	2300      	moveq	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <cppLoop+0x96>
 8007e88:	4891      	ldr	r0, [pc, #580]	; (80080d0 <cppLoop+0x2c8>)
 8007e8a:	f7fb ff9d 	bl	8003dc8 <_ZN9LineTrace5getKiEv>
 8007e8e:	eef0 7a40 	vmov.f32	s15, s0
 8007e92:	4b92      	ldr	r3, [pc, #584]	; (80080dc <cppLoop+0x2d4>)
 8007e94:	edc3 7a00 	vstr	s15, [r3]
 8007e98:	488f      	ldr	r0, [pc, #572]	; (80080d8 <cppLoop+0x2d0>)
 8007e9a:	f00c fd86 	bl	80149aa <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007e9e:	4b90      	ldr	r3, [pc, #576]	; (80080e0 <cppLoop+0x2d8>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	f3bf 8f5b 	dmb	ish
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bf0c      	ite	eq
 8007eb0:	2301      	moveq	r3, #1
 8007eb2:	2300      	movne	r3, #0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d015      	beq.n	8007ee6 <cppLoop+0xde>
 8007eba:	4889      	ldr	r0, [pc, #548]	; (80080e0 <cppLoop+0x2d8>)
 8007ebc:	f00c fd69 	bl	8014992 <__cxa_guard_acquire>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bf14      	ite	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	2300      	moveq	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <cppLoop+0xde>
 8007ed0:	487f      	ldr	r0, [pc, #508]	; (80080d0 <cppLoop+0x2c8>)
 8007ed2:	f7fb ff88 	bl	8003de6 <_ZN9LineTrace5getKdEv>
 8007ed6:	eef0 7a40 	vmov.f32	s15, s0
 8007eda:	4b82      	ldr	r3, [pc, #520]	; (80080e4 <cppLoop+0x2dc>)
 8007edc:	edc3 7a00 	vstr	s15, [r3]
 8007ee0:	487f      	ldr	r0, [pc, #508]	; (80080e0 <cppLoop+0x2d8>)
 8007ee2:	f00c fd62 	bl	80149aa <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007ee6:	4b80      	ldr	r3, [pc, #512]	; (80080e8 <cppLoop+0x2e0>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f3bf 8f5b 	dmb	ish
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d015      	beq.n	8007f2e <cppLoop+0x126>
 8007f02:	4879      	ldr	r0, [pc, #484]	; (80080e8 <cppLoop+0x2e0>)
 8007f04:	f00c fd45 	bl	8014992 <__cxa_guard_acquire>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bf14      	ite	ne
 8007f0e:	2301      	movne	r3, #1
 8007f10:	2300      	moveq	r3, #0
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <cppLoop+0x126>
 8007f18:	486d      	ldr	r0, [pc, #436]	; (80080d0 <cppLoop+0x2c8>)
 8007f1a:	f7fb ff8c 	bl	8003e36 <_ZN9LineTrace9getKpSlowEv>
 8007f1e:	eef0 7a40 	vmov.f32	s15, s0
 8007f22:	4b72      	ldr	r3, [pc, #456]	; (80080ec <cppLoop+0x2e4>)
 8007f24:	edc3 7a00 	vstr	s15, [r3]
 8007f28:	486f      	ldr	r0, [pc, #444]	; (80080e8 <cppLoop+0x2e0>)
 8007f2a:	f00c fd3e 	bl	80149aa <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007f2e:	4b70      	ldr	r3, [pc, #448]	; (80080f0 <cppLoop+0x2e8>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f3bf 8f5b 	dmb	ish
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d015      	beq.n	8007f76 <cppLoop+0x16e>
 8007f4a:	4869      	ldr	r0, [pc, #420]	; (80080f0 <cppLoop+0x2e8>)
 8007f4c:	f00c fd21 	bl	8014992 <__cxa_guard_acquire>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bf14      	ite	ne
 8007f56:	2301      	movne	r3, #1
 8007f58:	2300      	moveq	r3, #0
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <cppLoop+0x16e>
 8007f60:	485b      	ldr	r0, [pc, #364]	; (80080d0 <cppLoop+0x2c8>)
 8007f62:	f7fb ff77 	bl	8003e54 <_ZN9LineTrace9getKiSlowEv>
 8007f66:	eef0 7a40 	vmov.f32	s15, s0
 8007f6a:	4b62      	ldr	r3, [pc, #392]	; (80080f4 <cppLoop+0x2ec>)
 8007f6c:	edc3 7a00 	vstr	s15, [r3]
 8007f70:	485f      	ldr	r0, [pc, #380]	; (80080f0 <cppLoop+0x2e8>)
 8007f72:	f00c fd1a 	bl	80149aa <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007f76:	4b60      	ldr	r3, [pc, #384]	; (80080f8 <cppLoop+0x2f0>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f3bf 8f5b 	dmb	ish
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <cppLoop+0x1b6>
 8007f92:	4859      	ldr	r0, [pc, #356]	; (80080f8 <cppLoop+0x2f0>)
 8007f94:	f00c fcfd 	bl	8014992 <__cxa_guard_acquire>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bf14      	ite	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	2300      	moveq	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <cppLoop+0x1b6>
 8007fa8:	4849      	ldr	r0, [pc, #292]	; (80080d0 <cppLoop+0x2c8>)
 8007faa:	f7fb ff62 	bl	8003e72 <_ZN9LineTrace9getKdSlowEv>
 8007fae:	eef0 7a40 	vmov.f32	s15, s0
 8007fb2:	4b52      	ldr	r3, [pc, #328]	; (80080fc <cppLoop+0x2f4>)
 8007fb4:	edc3 7a00 	vstr	s15, [r3]
 8007fb8:	484f      	ldr	r0, [pc, #316]	; (80080f8 <cppLoop+0x2f0>)
 8007fba:	f00c fcf6 	bl	80149aa <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007fbe:	4b50      	ldr	r3, [pc, #320]	; (8008100 <cppLoop+0x2f8>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	f3bf 8f5b 	dmb	ish
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bf0c      	ite	eq
 8007fd0:	2301      	moveq	r3, #1
 8007fd2:	2300      	movne	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d015      	beq.n	8008006 <cppLoop+0x1fe>
 8007fda:	4849      	ldr	r0, [pc, #292]	; (8008100 <cppLoop+0x2f8>)
 8007fdc:	f00c fcd9 	bl	8014992 <__cxa_guard_acquire>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <cppLoop+0x1fe>
 8007ff0:	4837      	ldr	r0, [pc, #220]	; (80080d0 <cppLoop+0x2c8>)
 8007ff2:	f7fb ffac 	bl	8003f4e <_ZN9LineTrace17getTargetVelocityEv>
 8007ff6:	eef0 7a40 	vmov.f32	s15, s0
 8007ffa:	4b42      	ldr	r3, [pc, #264]	; (8008104 <cppLoop+0x2fc>)
 8007ffc:	edc3 7a00 	vstr	s15, [r3]
 8008000:	483f      	ldr	r0, [pc, #252]	; (8008100 <cppLoop+0x2f8>)
 8008002:	f00c fcd2 	bl	80149aa <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8008006:	4b40      	ldr	r3, [pc, #256]	; (8008108 <cppLoop+0x300>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	f3bf 8f5b 	dmb	ish
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d015      	beq.n	800804e <cppLoop+0x246>
 8008022:	4839      	ldr	r0, [pc, #228]	; (8008108 <cppLoop+0x300>)
 8008024:	f00c fcb5 	bl	8014992 <__cxa_guard_acquire>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	bf14      	ite	ne
 800802e:	2301      	movne	r3, #1
 8008030:	2300      	moveq	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <cppLoop+0x246>
 8008038:	4825      	ldr	r0, [pc, #148]	; (80080d0 <cppLoop+0x2c8>)
 800803a:	f7fb ff98 	bl	8003f6e <_ZN9LineTrace14getMaxVelocityEv>
 800803e:	eef0 7a40 	vmov.f32	s15, s0
 8008042:	4b32      	ldr	r3, [pc, #200]	; (800810c <cppLoop+0x304>)
 8008044:	edc3 7a00 	vstr	s15, [r3]
 8008048:	482f      	ldr	r0, [pc, #188]	; (8008108 <cppLoop+0x300>)
 800804a:	f00c fcae 	bl	80149aa <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800804e:	4b30      	ldr	r3, [pc, #192]	; (8008110 <cppLoop+0x308>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f3bf 8f5b 	dmb	ish
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d015      	beq.n	8008096 <cppLoop+0x28e>
 800806a:	4829      	ldr	r0, [pc, #164]	; (8008110 <cppLoop+0x308>)
 800806c:	f00c fc91 	bl	8014992 <__cxa_guard_acquire>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	bf14      	ite	ne
 8008076:	2301      	movne	r3, #1
 8008078:	2300      	moveq	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <cppLoop+0x28e>
 8008080:	4813      	ldr	r0, [pc, #76]	; (80080d0 <cppLoop+0x2c8>)
 8008082:	f7fb ff84 	bl	8003f8e <_ZN9LineTrace15getMaxVelocity2Ev>
 8008086:	eef0 7a40 	vmov.f32	s15, s0
 800808a:	4b22      	ldr	r3, [pc, #136]	; (8008114 <cppLoop+0x30c>)
 800808c:	edc3 7a00 	vstr	s15, [r3]
 8008090:	481f      	ldr	r0, [pc, #124]	; (8008110 <cppLoop+0x308>)
 8008092:	f00c fc8a 	bl	80149aa <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8008096:	4b20      	ldr	r3, [pc, #128]	; (8008118 <cppLoop+0x310>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f3bf 8f5b 	dmb	ish
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d03f      	beq.n	8008132 <cppLoop+0x32a>
 80080b2:	4819      	ldr	r0, [pc, #100]	; (8008118 <cppLoop+0x310>)
 80080b4:	f00c fc6d 	bl	8014992 <__cxa_guard_acquire>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	2300      	moveq	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d034      	beq.n	8008132 <cppLoop+0x32a>
 80080c8:	e028      	b.n	800811c <cppLoop+0x314>
 80080ca:	bf00      	nop
 80080cc:	200423e8 	.word	0x200423e8
 80080d0:	2001db64 	.word	0x2001db64
 80080d4:	200423e4 	.word	0x200423e4
 80080d8:	200423f0 	.word	0x200423f0
 80080dc:	200423ec 	.word	0x200423ec
 80080e0:	200423f8 	.word	0x200423f8
 80080e4:	200423f4 	.word	0x200423f4
 80080e8:	20042400 	.word	0x20042400
 80080ec:	200423fc 	.word	0x200423fc
 80080f0:	20042408 	.word	0x20042408
 80080f4:	20042404 	.word	0x20042404
 80080f8:	20042410 	.word	0x20042410
 80080fc:	2004240c 	.word	0x2004240c
 8008100:	20042418 	.word	0x20042418
 8008104:	20042414 	.word	0x20042414
 8008108:	20042420 	.word	0x20042420
 800810c:	2004241c 	.word	0x2004241c
 8008110:	20042428 	.word	0x20042428
 8008114:	20042424 	.word	0x20042424
 8008118:	20042430 	.word	0x20042430
 800811c:	48b6      	ldr	r0, [pc, #728]	; (80083f8 <cppLoop+0x5f0>)
 800811e:	f7fb ff46 	bl	8003fae <_ZN9LineTrace14getMinVelocityEv>
 8008122:	eef0 7a40 	vmov.f32	s15, s0
 8008126:	4bb5      	ldr	r3, [pc, #724]	; (80083fc <cppLoop+0x5f4>)
 8008128:	edc3 7a00 	vstr	s15, [r3]
 800812c:	48b4      	ldr	r0, [pc, #720]	; (8008400 <cppLoop+0x5f8>)
 800812e:	f00c fc3c 	bl	80149aa <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8008132:	4bb4      	ldr	r3, [pc, #720]	; (8008404 <cppLoop+0x5fc>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f3bf 8f5b 	dmb	ish
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d015      	beq.n	800817a <cppLoop+0x372>
 800814e:	48ad      	ldr	r0, [pc, #692]	; (8008404 <cppLoop+0x5fc>)
 8008150:	f00c fc1f 	bl	8014992 <__cxa_guard_acquire>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2301      	movne	r3, #1
 800815c:	2300      	moveq	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <cppLoop+0x372>
 8008164:	48a4      	ldr	r0, [pc, #656]	; (80083f8 <cppLoop+0x5f0>)
 8008166:	f7fb ff32 	bl	8003fce <_ZN9LineTrace15getMinVelocity2Ev>
 800816a:	eef0 7a40 	vmov.f32	s15, s0
 800816e:	4ba6      	ldr	r3, [pc, #664]	; (8008408 <cppLoop+0x600>)
 8008170:	edc3 7a00 	vstr	s15, [r3]
 8008174:	48a3      	ldr	r0, [pc, #652]	; (8008404 <cppLoop+0x5fc>)
 8008176:	f00c fc18 	bl	80149aa <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800817a:	4ba4      	ldr	r3, [pc, #656]	; (800840c <cppLoop+0x604>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f3bf 8f5b 	dmb	ish
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d015      	beq.n	80081c2 <cppLoop+0x3ba>
 8008196:	489d      	ldr	r0, [pc, #628]	; (800840c <cppLoop+0x604>)
 8008198:	f00c fbfb 	bl	8014992 <__cxa_guard_acquire>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <cppLoop+0x3ba>
 80081ac:	4892      	ldr	r0, [pc, #584]	; (80083f8 <cppLoop+0x5f0>)
 80081ae:	f7fb ff52 	bl	8004056 <_ZN9LineTrace9getMaxAccEv>
 80081b2:	eef0 7a40 	vmov.f32	s15, s0
 80081b6:	4b96      	ldr	r3, [pc, #600]	; (8008410 <cppLoop+0x608>)
 80081b8:	edc3 7a00 	vstr	s15, [r3]
 80081bc:	4893      	ldr	r0, [pc, #588]	; (800840c <cppLoop+0x604>)
 80081be:	f00c fbf4 	bl	80149aa <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80081c2:	4b94      	ldr	r3, [pc, #592]	; (8008414 <cppLoop+0x60c>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	f3bf 8f5b 	dmb	ish
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bf0c      	ite	eq
 80081d4:	2301      	moveq	r3, #1
 80081d6:	2300      	movne	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d015      	beq.n	800820a <cppLoop+0x402>
 80081de:	488d      	ldr	r0, [pc, #564]	; (8008414 <cppLoop+0x60c>)
 80081e0:	f00c fbd7 	bl	8014992 <__cxa_guard_acquire>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bf14      	ite	ne
 80081ea:	2301      	movne	r3, #1
 80081ec:	2300      	moveq	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00a      	beq.n	800820a <cppLoop+0x402>
 80081f4:	4880      	ldr	r0, [pc, #512]	; (80083f8 <cppLoop+0x5f0>)
 80081f6:	f7fb ff64 	bl	80040c2 <_ZN9LineTrace9getMaxDecEv>
 80081fa:	eef0 7a40 	vmov.f32	s15, s0
 80081fe:	4b86      	ldr	r3, [pc, #536]	; (8008418 <cppLoop+0x610>)
 8008200:	edc3 7a00 	vstr	s15, [r3]
 8008204:	4883      	ldr	r0, [pc, #524]	; (8008414 <cppLoop+0x60c>)
 8008206:	f00c fbd0 	bl	80149aa <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 800820a:	4b84      	ldr	r3, [pc, #528]	; (800841c <cppLoop+0x614>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f3bf 8f5b 	dmb	ish
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	bf0c      	ite	eq
 800821c:	2301      	moveq	r3, #1
 800821e:	2300      	movne	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d015      	beq.n	8008252 <cppLoop+0x44a>
 8008226:	487d      	ldr	r0, [pc, #500]	; (800841c <cppLoop+0x614>)
 8008228:	f00c fbb3 	bl	8014992 <__cxa_guard_acquire>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <cppLoop+0x44a>
 800823c:	486e      	ldr	r0, [pc, #440]	; (80083f8 <cppLoop+0x5f0>)
 800823e:	f7fb ff2e 	bl	800409e <_ZN9LineTrace10getMaxAcc2Ev>
 8008242:	eef0 7a40 	vmov.f32	s15, s0
 8008246:	4b76      	ldr	r3, [pc, #472]	; (8008420 <cppLoop+0x618>)
 8008248:	edc3 7a00 	vstr	s15, [r3]
 800824c:	4873      	ldr	r0, [pc, #460]	; (800841c <cppLoop+0x614>)
 800824e:	f00c fbac 	bl	80149aa <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008252:	4b74      	ldr	r3, [pc, #464]	; (8008424 <cppLoop+0x61c>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	f3bf 8f5b 	dmb	ish
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d015      	beq.n	800829a <cppLoop+0x492>
 800826e:	486d      	ldr	r0, [pc, #436]	; (8008424 <cppLoop+0x61c>)
 8008270:	f00c fb8f 	bl	8014992 <__cxa_guard_acquire>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	2300      	moveq	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <cppLoop+0x492>
 8008284:	485c      	ldr	r0, [pc, #368]	; (80083f8 <cppLoop+0x5f0>)
 8008286:	f7fb fef8 	bl	800407a <_ZN9LineTrace10getMaxDec2Ev>
 800828a:	eef0 7a40 	vmov.f32	s15, s0
 800828e:	4b66      	ldr	r3, [pc, #408]	; (8008428 <cppLoop+0x620>)
 8008290:	edc3 7a00 	vstr	s15, [r3]
 8008294:	4863      	ldr	r0, [pc, #396]	; (8008424 <cppLoop+0x61c>)
 8008296:	f00c fb88 	bl	80149aa <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800829a:	4864      	ldr	r0, [pc, #400]	; (800842c <cppLoop+0x624>)
 800829c:	f7fd f9aa 	bl	80055f4 <_ZN12RotarySwitch8getValueEv>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	f201 8546 	bhi.w	8009d34 <cppLoop+0x1f2c>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <cppLoop+0x4a8>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082f1 	.word	0x080082f1
 80082b4:	08008675 	.word	0x08008675
 80082b8:	08008791 	.word	0x08008791
 80082bc:	080088e3 	.word	0x080088e3
 80082c0:	080089bd 	.word	0x080089bd
 80082c4:	08008c4d 	.word	0x08008c4d
 80082c8:	08008d89 	.word	0x08008d89
 80082cc:	0800900d 	.word	0x0800900d
 80082d0:	08009257 	.word	0x08009257
 80082d4:	080094e7 	.word	0x080094e7
 80082d8:	080095a3 	.word	0x080095a3
 80082dc:	08009699 	.word	0x08009699
 80082e0:	0800971f 	.word	0x0800971f
 80082e4:	080097e5 	.word	0x080097e5
 80082e8:	080098ab 	.word	0x080098ab
 80082ec:	080099c5 	.word	0x080099c5
	case 0:
		led.fullColor('W');
 80082f0:	2157      	movs	r1, #87	; 0x57
 80082f2:	484f      	ldr	r0, [pc, #316]	; (8008430 <cppLoop+0x628>)
 80082f4:	f7f9 ffae 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80082f8:	f7f8 fed2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082fc:	2100      	movs	r1, #0
 80082fe:	2000      	movs	r0, #0
 8008300:	f7f8 fede 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 8008304:	483c      	ldr	r0, [pc, #240]	; (80083f8 <cppLoop+0x5f0>)
 8008306:	f7fb fd96 	bl	8003e36 <_ZN9LineTrace9getKpSlowEv>
 800830a:	eeb0 7a40 	vmov.f32	s14, s0
 800830e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008434 <cppLoop+0x62c>
 8008312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008316:	eeb0 0a67 	vmov.f32	s0, s15
 800831a:	f7fa fbc7 	bl	8002aac <_ZSt3absf>
 800831e:	ee10 3a10 	vmov	r3, s0
 8008322:	4618      	mov	r0, r3
 8008324:	f7f8 f928 	bl	8000578 <__aeabi_f2d>
 8008328:	4603      	mov	r3, r0
 800832a:	460c      	mov	r4, r1
 800832c:	461a      	mov	r2, r3
 800832e:	4623      	mov	r3, r4
 8008330:	4841      	ldr	r0, [pc, #260]	; (8008438 <cppLoop+0x630>)
 8008332:	f7f8 feef 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008336:	2101      	movs	r1, #1
 8008338:	2000      	movs	r0, #0
 800833a:	f7f8 fec1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 800833e:	482e      	ldr	r0, [pc, #184]	; (80083f8 <cppLoop+0x5f0>)
 8008340:	f7fb fd88 	bl	8003e54 <_ZN9LineTrace9getKiSlowEv>
 8008344:	eeb0 7a40 	vmov.f32	s14, s0
 8008348:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800843c <cppLoop+0x634>
 800834c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008350:	eeb0 0a67 	vmov.f32	s0, s15
 8008354:	f7fa fbaa 	bl	8002aac <_ZSt3absf>
 8008358:	ee10 3a10 	vmov	r3, s0
 800835c:	4618      	mov	r0, r3
 800835e:	f7f8 f90b 	bl	8000578 <__aeabi_f2d>
 8008362:	4605      	mov	r5, r0
 8008364:	460e      	mov	r6, r1
 8008366:	4824      	ldr	r0, [pc, #144]	; (80083f8 <cppLoop+0x5f0>)
 8008368:	f7fb fd83 	bl	8003e72 <_ZN9LineTrace9getKdSlowEv>
 800836c:	eeb0 7a40 	vmov.f32	s14, s0
 8008370:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008440 <cppLoop+0x638>
 8008374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008378:	eeb0 0a67 	vmov.f32	s0, s15
 800837c:	f7fa fb96 	bl	8002aac <_ZSt3absf>
 8008380:	ee10 3a10 	vmov	r3, s0
 8008384:	4618      	mov	r0, r3
 8008386:	f7f8 f8f7 	bl	8000578 <__aeabi_f2d>
 800838a:	4603      	mov	r3, r0
 800838c:	460c      	mov	r4, r1
 800838e:	e9cd 3400 	strd	r3, r4, [sp]
 8008392:	462a      	mov	r2, r5
 8008394:	4633      	mov	r3, r6
 8008396:	482b      	ldr	r0, [pc, #172]	; (8008444 <cppLoop+0x63c>)
 8008398:	f7f8 febc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800839c:	482a      	ldr	r0, [pc, #168]	; (8008448 <cppLoop+0x640>)
 800839e:	f7f9 fef5 	bl	800218c <_ZN8JoyStick8getValueEv>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04e      	beq.n	8008450 <cppLoop+0x648>
			led.LR(-1, 1);
 80083b2:	2201      	movs	r2, #1
 80083b4:	f04f 31ff 	mov.w	r1, #4294967295
 80083b8:	481d      	ldr	r0, [pc, #116]	; (8008430 <cppLoop+0x628>)
 80083ba:	f7fa f807 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083c2:	f001 fe01 	bl	8009fc8 <HAL_Delay>

			selector++;
 80083c6:	4b21      	ldr	r3, [pc, #132]	; (800844c <cppLoop+0x644>)
 80083c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3301      	adds	r3, #1
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	b21a      	sxth	r2, r3
 80083d4:	4b1d      	ldr	r3, [pc, #116]	; (800844c <cppLoop+0x644>)
 80083d6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80083d8:	4b1c      	ldr	r3, [pc, #112]	; (800844c <cppLoop+0x644>)
 80083da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	dd02      	ble.n	80083e8 <cppLoop+0x5e0>
 80083e2:	4b1a      	ldr	r3, [pc, #104]	; (800844c <cppLoop+0x644>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80083e8:	2200      	movs	r2, #0
 80083ea:	f04f 31ff 	mov.w	r1, #4294967295
 80083ee:	4810      	ldr	r0, [pc, #64]	; (8008430 <cppLoop+0x628>)
 80083f0:	f7f9 ffec 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 80083f4:	f001 bca0 	b.w	8009d38 <cppLoop+0x1f30>
 80083f8:	2001db64 	.word	0x2001db64
 80083fc:	2004242c 	.word	0x2004242c
 8008400:	20042430 	.word	0x20042430
 8008404:	20042438 	.word	0x20042438
 8008408:	20042434 	.word	0x20042434
 800840c:	20042440 	.word	0x20042440
 8008410:	2004243c 	.word	0x2004243c
 8008414:	20042448 	.word	0x20042448
 8008418:	20042444 	.word	0x20042444
 800841c:	20042450 	.word	0x20042450
 8008420:	2004244c 	.word	0x2004244c
 8008424:	20042458 	.word	0x20042458
 8008428:	20042454 	.word	0x20042454
 800842c:	200005c8 	.word	0x200005c8
 8008430:	200005d0 	.word	0x200005d0
 8008434:	447a0000 	.word	0x447a0000
 8008438:	0801a0b0 	.word	0x0801a0b0
 800843c:	42c80000 	.word	0x42c80000
 8008440:	461c4000 	.word	0x461c4000
 8008444:	0801a0bc 	.word	0x0801a0bc
 8008448:	200005c4 	.word	0x200005c4
 800844c:	200423da 	.word	0x200423da
		else if(joy_stick.getValue() == JOY_R){
 8008450:	48bd      	ldr	r0, [pc, #756]	; (8008748 <cppLoop+0x940>)
 8008452:	f7f9 fe9b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008456:	4603      	mov	r3, r0
 8008458:	2b10      	cmp	r3, #16
 800845a:	bf0c      	ite	eq
 800845c:	2301      	moveq	r3, #1
 800845e:	2300      	movne	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d059      	beq.n	800851a <cppLoop+0x712>
			led.LR(-1, 1);
 8008466:	2201      	movs	r2, #1
 8008468:	f04f 31ff 	mov.w	r1, #4294967295
 800846c:	48b7      	ldr	r0, [pc, #732]	; (800874c <cppLoop+0x944>)
 800846e:	f7f9 ffad 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008472:	2064      	movs	r0, #100	; 0x64
 8008474:	f001 fda8 	bl	8009fc8 <HAL_Delay>
			if(selector == 0){
 8008478:	4bb5      	ldr	r3, [pc, #724]	; (8008750 <cppLoop+0x948>)
 800847a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d113      	bne.n	80084aa <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 8008482:	4bb4      	ldr	r3, [pc, #720]	; (8008754 <cppLoop+0x94c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 f876 	bl	8000578 <__aeabi_f2d>
 800848c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008730 <cppLoop+0x928>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff13 	bl	80002bc <__adddf3>
 8008496:	4603      	mov	r3, r0
 8008498:	460c      	mov	r4, r1
 800849a:	4618      	mov	r0, r3
 800849c:	4621      	mov	r1, r4
 800849e:	f7f8 fbbb 	bl	8000c18 <__aeabi_d2f>
 80084a2:	4602      	mov	r2, r0
 80084a4:	4bab      	ldr	r3, [pc, #684]	; (8008754 <cppLoop+0x94c>)
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e02b      	b.n	8008502 <cppLoop+0x6fa>
			else if(selector == 1){
 80084aa:	4ba9      	ldr	r3, [pc, #676]	; (8008750 <cppLoop+0x948>)
 80084ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d113      	bne.n	80084dc <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80084b4:	4ba8      	ldr	r3, [pc, #672]	; (8008758 <cppLoop+0x950>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7f8 f85d 	bl	8000578 <__aeabi_f2d>
 80084be:	a39e      	add	r3, pc, #632	; (adr r3, 8008738 <cppLoop+0x930>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f7 fefa 	bl	80002bc <__adddf3>
 80084c8:	4603      	mov	r3, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4618      	mov	r0, r3
 80084ce:	4621      	mov	r1, r4
 80084d0:	f7f8 fba2 	bl	8000c18 <__aeabi_d2f>
 80084d4:	4602      	mov	r2, r0
 80084d6:	4ba0      	ldr	r3, [pc, #640]	; (8008758 <cppLoop+0x950>)
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e012      	b.n	8008502 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 80084dc:	4b9f      	ldr	r3, [pc, #636]	; (800875c <cppLoop+0x954>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7f8 f849 	bl	8000578 <__aeabi_f2d>
 80084e6:	a396      	add	r3, pc, #600	; (adr r3, 8008740 <cppLoop+0x938>)
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f7f7 fee6 	bl	80002bc <__adddf3>
 80084f0:	4603      	mov	r3, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	4618      	mov	r0, r3
 80084f6:	4621      	mov	r1, r4
 80084f8:	f7f8 fb8e 	bl	8000c18 <__aeabi_d2f>
 80084fc:	4602      	mov	r2, r0
 80084fe:	4b97      	ldr	r3, [pc, #604]	; (800875c <cppLoop+0x954>)
 8008500:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008502:	2152      	movs	r1, #82	; 0x52
 8008504:	4891      	ldr	r0, [pc, #580]	; (800874c <cppLoop+0x944>)
 8008506:	f7f9 fea5 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800850a:	2200      	movs	r2, #0
 800850c:	f04f 31ff 	mov.w	r1, #4294967295
 8008510:	488e      	ldr	r0, [pc, #568]	; (800874c <cppLoop+0x944>)
 8008512:	f7f9 ff5b 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008516:	f001 bc0f 	b.w	8009d38 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 800851a:	488b      	ldr	r0, [pc, #556]	; (8008748 <cppLoop+0x940>)
 800851c:	f7f9 fe36 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	bf0c      	ite	eq
 8008526:	2301      	moveq	r3, #1
 8008528:	2300      	movne	r3, #0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d059      	beq.n	80085e4 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008530:	2201      	movs	r2, #1
 8008532:	f04f 31ff 	mov.w	r1, #4294967295
 8008536:	4885      	ldr	r0, [pc, #532]	; (800874c <cppLoop+0x944>)
 8008538:	f7f9 ff48 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800853c:	2064      	movs	r0, #100	; 0x64
 800853e:	f001 fd43 	bl	8009fc8 <HAL_Delay>
			if(selector == 0){
 8008542:	4b83      	ldr	r3, [pc, #524]	; (8008750 <cppLoop+0x948>)
 8008544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d113      	bne.n	8008574 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 800854c:	4b81      	ldr	r3, [pc, #516]	; (8008754 <cppLoop+0x94c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f7f8 f811 	bl	8000578 <__aeabi_f2d>
 8008556:	a376      	add	r3, pc, #472	; (adr r3, 8008730 <cppLoop+0x928>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 feac 	bl	80002b8 <__aeabi_dsub>
 8008560:	4603      	mov	r3, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4618      	mov	r0, r3
 8008566:	4621      	mov	r1, r4
 8008568:	f7f8 fb56 	bl	8000c18 <__aeabi_d2f>
 800856c:	4602      	mov	r2, r0
 800856e:	4b79      	ldr	r3, [pc, #484]	; (8008754 <cppLoop+0x94c>)
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	e02b      	b.n	80085cc <cppLoop+0x7c4>
			else if(selector == 1){
 8008574:	4b76      	ldr	r3, [pc, #472]	; (8008750 <cppLoop+0x948>)
 8008576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d113      	bne.n	80085a6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 800857e:	4b76      	ldr	r3, [pc, #472]	; (8008758 <cppLoop+0x950>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7f7 fff8 	bl	8000578 <__aeabi_f2d>
 8008588:	a36b      	add	r3, pc, #428	; (adr r3, 8008738 <cppLoop+0x930>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f7 fe93 	bl	80002b8 <__aeabi_dsub>
 8008592:	4603      	mov	r3, r0
 8008594:	460c      	mov	r4, r1
 8008596:	4618      	mov	r0, r3
 8008598:	4621      	mov	r1, r4
 800859a:	f7f8 fb3d 	bl	8000c18 <__aeabi_d2f>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b6d      	ldr	r3, [pc, #436]	; (8008758 <cppLoop+0x950>)
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e012      	b.n	80085cc <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80085a6:	4b6d      	ldr	r3, [pc, #436]	; (800875c <cppLoop+0x954>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f7 ffe4 	bl	8000578 <__aeabi_f2d>
 80085b0:	a363      	add	r3, pc, #396	; (adr r3, 8008740 <cppLoop+0x938>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 fe7f 	bl	80002b8 <__aeabi_dsub>
 80085ba:	4603      	mov	r3, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	4618      	mov	r0, r3
 80085c0:	4621      	mov	r1, r4
 80085c2:	f7f8 fb29 	bl	8000c18 <__aeabi_d2f>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b64      	ldr	r3, [pc, #400]	; (800875c <cppLoop+0x954>)
 80085ca:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80085cc:	2152      	movs	r1, #82	; 0x52
 80085ce:	485f      	ldr	r0, [pc, #380]	; (800874c <cppLoop+0x944>)
 80085d0:	f7f9 fe40 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80085d4:	2200      	movs	r2, #0
 80085d6:	f04f 31ff 	mov.w	r1, #4294967295
 80085da:	485c      	ldr	r0, [pc, #368]	; (800874c <cppLoop+0x944>)
 80085dc:	f7f9 fef6 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80085e0:	f001 bbaa 	b.w	8009d38 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 80085e4:	4858      	ldr	r0, [pc, #352]	; (8008748 <cppLoop+0x940>)
 80085e6:	f7f9 fdd1 	bl	800218c <_ZN8JoyStick8getValueEv>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	bf0c      	ite	eq
 80085f0:	2301      	moveq	r3, #1
 80085f2:	2300      	movne	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f001 839e 	beq.w	8009d38 <cppLoop+0x1f30>
			led.LR(-1, 1);
 80085fc:	2201      	movs	r2, #1
 80085fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008602:	4852      	ldr	r0, [pc, #328]	; (800874c <cppLoop+0x944>)
 8008604:	f7f9 fee2 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008608:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800860c:	f001 fcdc 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4b4f      	ldr	r3, [pc, #316]	; (8008754 <cppLoop+0x94c>)
 8008616:	2201      	movs	r2, #1
 8008618:	4951      	ldr	r1, [pc, #324]	; (8008760 <cppLoop+0x958>)
 800861a:	4852      	ldr	r0, [pc, #328]	; (8008764 <cppLoop+0x95c>)
 800861c:	f7f9 f92e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008620:	2300      	movs	r3, #0
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4b4c      	ldr	r3, [pc, #304]	; (8008758 <cppLoop+0x950>)
 8008626:	2201      	movs	r2, #1
 8008628:	494f      	ldr	r1, [pc, #316]	; (8008768 <cppLoop+0x960>)
 800862a:	484e      	ldr	r0, [pc, #312]	; (8008764 <cppLoop+0x95c>)
 800862c:	f7f9 f926 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008630:	2300      	movs	r3, #0
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	4b49      	ldr	r3, [pc, #292]	; (800875c <cppLoop+0x954>)
 8008636:	2201      	movs	r2, #1
 8008638:	494c      	ldr	r1, [pc, #304]	; (800876c <cppLoop+0x964>)
 800863a:	484a      	ldr	r0, [pc, #296]	; (8008764 <cppLoop+0x95c>)
 800863c:	f7f9 f91e 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008640:	4b44      	ldr	r3, [pc, #272]	; (8008754 <cppLoop+0x94c>)
 8008642:	edd3 7a00 	vldr	s15, [r3]
 8008646:	4b44      	ldr	r3, [pc, #272]	; (8008758 <cppLoop+0x950>)
 8008648:	ed93 7a00 	vldr	s14, [r3]
 800864c:	4b43      	ldr	r3, [pc, #268]	; (800875c <cppLoop+0x954>)
 800864e:	edd3 6a00 	vldr	s13, [r3]
 8008652:	eeb0 1a66 	vmov.f32	s2, s13
 8008656:	eef0 0a47 	vmov.f32	s1, s14
 800865a:	eeb0 0a67 	vmov.f32	s0, s15
 800865e:	4844      	ldr	r0, [pc, #272]	; (8008770 <cppLoop+0x968>)
 8008660:	f7fb fbd0 	bl	8003e04 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008664:	2200      	movs	r2, #0
 8008666:	f04f 31ff 	mov.w	r1, #4294967295
 800866a:	4838      	ldr	r0, [pc, #224]	; (800874c <cppLoop+0x944>)
 800866c:	f7f9 feae 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008670:	f001 bb62 	b.w	8009d38 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 8008674:	2143      	movs	r1, #67	; 0x43
 8008676:	4835      	ldr	r0, [pc, #212]	; (800874c <cppLoop+0x944>)
 8008678:	f7f9 fdec 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800867c:	f7f8 fd10 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008680:	2100      	movs	r1, #0
 8008682:	2000      	movs	r0, #0
 8008684:	f7f8 fd1c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008688:	483a      	ldr	r0, [pc, #232]	; (8008774 <cppLoop+0x96c>)
 800868a:	f7f8 fd43 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800868e:	2101      	movs	r1, #1
 8008690:	2000      	movs	r0, #0
 8008692:	f7f8 fd15 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008696:	4b38      	ldr	r3, [pc, #224]	; (8008778 <cppLoop+0x970>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f7f7 ff6c 	bl	8000578 <__aeabi_f2d>
 80086a0:	4603      	mov	r3, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	461a      	mov	r2, r3
 80086a6:	4623      	mov	r3, r4
 80086a8:	4834      	ldr	r0, [pc, #208]	; (800877c <cppLoop+0x974>)
 80086aa:	f7f8 fd33 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80086ae:	4826      	ldr	r0, [pc, #152]	; (8008748 <cppLoop+0x940>)
 80086b0:	f7f9 fd6c 	bl	800218c <_ZN8JoyStick8getValueEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f001 833b 	beq.w	8009d3c <cppLoop+0x1f34>
			HAL_Delay(500);
 80086c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086ca:	f001 fc7d 	bl	8009fc8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <cppLoop+0x970>)
 80086d0:	edd3 7a00 	vldr	s15, [r3]
 80086d4:	eeb0 0a67 	vmov.f32	s0, s15
 80086d8:	4825      	ldr	r0, [pc, #148]	; (8008770 <cppLoop+0x968>)
 80086da:	f7fb fbe8 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	2101      	movs	r1, #1
 80086e4:	4819      	ldr	r0, [pc, #100]	; (800874c <cppLoop+0x944>)
 80086e6:	f7f9 fe71 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 80086ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086ee:	f001 fc6b 	bl	8009fc8 <HAL_Delay>
			logger.start();
 80086f2:	4823      	ldr	r0, [pc, #140]	; (8008780 <cppLoop+0x978>)
 80086f4:	f7fc fbbf 	bl	8004e76 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80086f8:	2100      	movs	r1, #0
 80086fa:	481d      	ldr	r0, [pc, #116]	; (8008770 <cppLoop+0x968>)
 80086fc:	f7fb fe28 	bl	8004350 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008700:	481b      	ldr	r0, [pc, #108]	; (8008770 <cppLoop+0x968>)
 8008702:	f7fb fe69 	bl	80043d8 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 8008706:	481e      	ldr	r0, [pc, #120]	; (8008780 <cppLoop+0x978>)
 8008708:	f7fc fbc5 	bl	8004e96 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 800870c:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <cppLoop+0x97c>)
 800870e:	491e      	ldr	r1, [pc, #120]	; (8008788 <cppLoop+0x980>)
 8008710:	481b      	ldr	r0, [pc, #108]	; (8008780 <cppLoop+0x978>)
 8008712:	f7fc fabb 	bl	8004c8c <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 8008716:	4a1d      	ldr	r2, [pc, #116]	; (800878c <cppLoop+0x984>)
 8008718:	491b      	ldr	r1, [pc, #108]	; (8008788 <cppLoop+0x980>)
 800871a:	4819      	ldr	r0, [pc, #100]	; (8008780 <cppLoop+0x978>)
 800871c:	f7fc facc 	bl	8004cb8 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008720:	f04f 32ff 	mov.w	r2, #4294967295
 8008724:	2100      	movs	r1, #0
 8008726:	4809      	ldr	r0, [pc, #36]	; (800874c <cppLoop+0x944>)
 8008728:	f7f9 fe50 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 800872c:	f001 bb06 	b.w	8009d3c <cppLoop+0x1f34>
 8008730:	88e368f1 	.word	0x88e368f1
 8008734:	3ee4f8b5 	.word	0x3ee4f8b5
 8008738:	eb1c432d 	.word	0xeb1c432d
 800873c:	3f1a36e2 	.word	0x3f1a36e2
 8008740:	a0b5ed8d 	.word	0xa0b5ed8d
 8008744:	3eb0c6f7 	.word	0x3eb0c6f7
 8008748:	200005c4 	.word	0x200005c4
 800874c:	200005d0 	.word	0x200005d0
 8008750:	200423da 	.word	0x200423da
 8008754:	200423fc 	.word	0x200423fc
 8008758:	20042404 	.word	0x20042404
 800875c:	2004240c 	.word	0x2004240c
 8008760:	0801a0cc 	.word	0x0801a0cc
 8008764:	0801a0d8 	.word	0x0801a0d8
 8008768:	0801a0e0 	.word	0x0801a0e0
 800876c:	0801a0ec 	.word	0x0801a0ec
 8008770:	2001db64 	.word	0x2001db64
 8008774:	0801a0f8 	.word	0x0801a0f8
 8008778:	20042414 	.word	0x20042414
 800877c:	0801a104 	.word	0x0801a104
 8008780:	200005f4 	.word	0x200005f4
 8008784:	0801a110 	.word	0x0801a110
 8008788:	0801a11c 	.word	0x0801a11c
 800878c:	0801a128 	.word	0x0801a128

	case 2:
		led.fullColor('B');
 8008790:	2142      	movs	r1, #66	; 0x42
 8008792:	48b9      	ldr	r0, [pc, #740]	; (8008a78 <cppLoop+0xc70>)
 8008794:	f7f9 fd5e 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008798:	f7f8 fc82 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800879c:	2100      	movs	r1, #0
 800879e:	2000      	movs	r0, #0
 80087a0:	f7f8 fc8e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80087a4:	48b5      	ldr	r0, [pc, #724]	; (8008a7c <cppLoop+0xc74>)
 80087a6:	f7f8 fcb5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087aa:	2101      	movs	r1, #1
 80087ac:	2000      	movs	r0, #0
 80087ae:	f7f8 fc87 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80087b2:	4bb3      	ldr	r3, [pc, #716]	; (8008a80 <cppLoop+0xc78>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 fede 	bl	8000578 <__aeabi_f2d>
 80087bc:	4603      	mov	r3, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	461a      	mov	r2, r3
 80087c2:	4623      	mov	r3, r4
 80087c4:	48af      	ldr	r0, [pc, #700]	; (8008a84 <cppLoop+0xc7c>)
 80087c6:	f7f8 fca5 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80087ca:	48af      	ldr	r0, [pc, #700]	; (8008a88 <cppLoop+0xc80>)
 80087cc:	f7f9 fcde 	bl	800218c <_ZN8JoyStick8getValueEv>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d023      	beq.n	8008828 <cppLoop+0xa20>
			led.LR(-1, 1);
 80087e0:	2201      	movs	r2, #1
 80087e2:	f04f 31ff 	mov.w	r1, #4294967295
 80087e6:	48a4      	ldr	r0, [pc, #656]	; (8008a78 <cppLoop+0xc70>)
 80087e8:	f7f9 fdf0 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087ec:	2064      	movs	r0, #100	; 0x64
 80087ee:	f001 fbeb 	bl	8009fc8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80087f2:	4ba3      	ldr	r3, [pc, #652]	; (8008a80 <cppLoop+0xc78>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7f7 febe 	bl	8000578 <__aeabi_f2d>
 80087fc:	a39c      	add	r3, pc, #624	; (adr r3, 8008a70 <cppLoop+0xc68>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fd5b 	bl	80002bc <__adddf3>
 8008806:	4603      	mov	r3, r0
 8008808:	460c      	mov	r4, r1
 800880a:	4618      	mov	r0, r3
 800880c:	4621      	mov	r1, r4
 800880e:	f7f8 fa03 	bl	8000c18 <__aeabi_d2f>
 8008812:	4602      	mov	r2, r0
 8008814:	4b9a      	ldr	r3, [pc, #616]	; (8008a80 <cppLoop+0xc78>)
 8008816:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008818:	2200      	movs	r2, #0
 800881a:	f04f 31ff 	mov.w	r1, #4294967295
 800881e:	4896      	ldr	r0, [pc, #600]	; (8008a78 <cppLoop+0xc70>)
 8008820:	f7f9 fdd4 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008824:	f001 ba8c 	b.w	8009d40 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 8008828:	4897      	ldr	r0, [pc, #604]	; (8008a88 <cppLoop+0xc80>)
 800882a:	f7f9 fcaf 	bl	800218c <_ZN8JoyStick8getValueEv>
 800882e:	4603      	mov	r3, r0
 8008830:	2b01      	cmp	r3, #1
 8008832:	bf0c      	ite	eq
 8008834:	2301      	moveq	r3, #1
 8008836:	2300      	movne	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d023      	beq.n	8008886 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800883e:	2201      	movs	r2, #1
 8008840:	f04f 31ff 	mov.w	r1, #4294967295
 8008844:	488c      	ldr	r0, [pc, #560]	; (8008a78 <cppLoop+0xc70>)
 8008846:	f7f9 fdc1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800884a:	2064      	movs	r0, #100	; 0x64
 800884c:	f001 fbbc 	bl	8009fc8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008850:	4b8b      	ldr	r3, [pc, #556]	; (8008a80 <cppLoop+0xc78>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f7f7 fe8f 	bl	8000578 <__aeabi_f2d>
 800885a:	a385      	add	r3, pc, #532	; (adr r3, 8008a70 <cppLoop+0xc68>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f7 fd2a 	bl	80002b8 <__aeabi_dsub>
 8008864:	4603      	mov	r3, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4618      	mov	r0, r3
 800886a:	4621      	mov	r1, r4
 800886c:	f7f8 f9d4 	bl	8000c18 <__aeabi_d2f>
 8008870:	4602      	mov	r2, r0
 8008872:	4b83      	ldr	r3, [pc, #524]	; (8008a80 <cppLoop+0xc78>)
 8008874:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008876:	2200      	movs	r2, #0
 8008878:	f04f 31ff 	mov.w	r1, #4294967295
 800887c:	487e      	ldr	r0, [pc, #504]	; (8008a78 <cppLoop+0xc70>)
 800887e:	f7f9 fda5 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008882:	f001 ba5d 	b.w	8009d40 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 8008886:	4880      	ldr	r0, [pc, #512]	; (8008a88 <cppLoop+0xc80>)
 8008888:	f7f9 fc80 	bl	800218c <_ZN8JoyStick8getValueEv>
 800888c:	4603      	mov	r3, r0
 800888e:	2b02      	cmp	r3, #2
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	f001 8251 	beq.w	8009d40 <cppLoop+0x1f38>
			led.LR(-1, 1);
 800889e:	2201      	movs	r2, #1
 80088a0:	f04f 31ff 	mov.w	r1, #4294967295
 80088a4:	4874      	ldr	r0, [pc, #464]	; (8008a78 <cppLoop+0xc70>)
 80088a6:	f7f9 fd91 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088ae:	f001 fb8b 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80088b2:	2300      	movs	r3, #0
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	4b72      	ldr	r3, [pc, #456]	; (8008a80 <cppLoop+0xc78>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	4974      	ldr	r1, [pc, #464]	; (8008a8c <cppLoop+0xc84>)
 80088bc:	4874      	ldr	r0, [pc, #464]	; (8008a90 <cppLoop+0xc88>)
 80088be:	f7f8 ffdd 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80088c2:	4b6f      	ldr	r3, [pc, #444]	; (8008a80 <cppLoop+0xc78>)
 80088c4:	edd3 7a00 	vldr	s15, [r3]
 80088c8:	eeb0 0a67 	vmov.f32	s0, s15
 80088cc:	4871      	ldr	r0, [pc, #452]	; (8008a94 <cppLoop+0xc8c>)
 80088ce:	f7fb faee 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80088d2:	2200      	movs	r2, #0
 80088d4:	f04f 31ff 	mov.w	r1, #4294967295
 80088d8:	4867      	ldr	r0, [pc, #412]	; (8008a78 <cppLoop+0xc70>)
 80088da:	f7f9 fd77 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80088de:	f001 ba2f 	b.w	8009d40 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 80088e2:	2159      	movs	r1, #89	; 0x59
 80088e4:	4864      	ldr	r0, [pc, #400]	; (8008a78 <cppLoop+0xc70>)
 80088e6:	f7f9 fcb5 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80088ea:	f7f8 fbd9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088ee:	2100      	movs	r1, #0
 80088f0:	2000      	movs	r0, #0
 80088f2:	f7f8 fbe5 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80088f6:	4b68      	ldr	r3, [pc, #416]	; (8008a98 <cppLoop+0xc90>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f7 fe3c 	bl	8000578 <__aeabi_f2d>
 8008900:	4603      	mov	r3, r0
 8008902:	460c      	mov	r4, r1
 8008904:	461a      	mov	r2, r3
 8008906:	4623      	mov	r3, r4
 8008908:	4864      	ldr	r0, [pc, #400]	; (8008a9c <cppLoop+0xc94>)
 800890a:	f7f8 fc03 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800890e:	2101      	movs	r1, #1
 8008910:	2000      	movs	r0, #0
 8008912:	f7f8 fbd5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008916:	4b62      	ldr	r3, [pc, #392]	; (8008aa0 <cppLoop+0xc98>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f7 fe2c 	bl	8000578 <__aeabi_f2d>
 8008920:	4603      	mov	r3, r0
 8008922:	460c      	mov	r4, r1
 8008924:	461a      	mov	r2, r3
 8008926:	4623      	mov	r3, r4
 8008928:	485e      	ldr	r0, [pc, #376]	; (8008aa4 <cppLoop+0xc9c>)
 800892a:	f7f8 fbf3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800892e:	4856      	ldr	r0, [pc, #344]	; (8008a88 <cppLoop+0xc80>)
 8008930:	f7f9 fc2c 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008934:	4603      	mov	r3, r0
 8008936:	2b02      	cmp	r3, #2
 8008938:	bf0c      	ite	eq
 800893a:	2301      	moveq	r3, #1
 800893c:	2300      	movne	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	f001 81ff 	beq.w	8009d44 <cppLoop+0x1f3c>
			HAL_Delay(500);
 8008946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800894a:	f001 fb3d 	bl	8009fc8 <HAL_Delay>

			led.LR(1, -1);
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	2101      	movs	r1, #1
 8008954:	4848      	ldr	r0, [pc, #288]	; (8008a78 <cppLoop+0xc70>)
 8008956:	f7f9 fd39 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800895a:	2101      	movs	r1, #1
 800895c:	484d      	ldr	r0, [pc, #308]	; (8008a94 <cppLoop+0xc8c>)
 800895e:	f7fb fcf7 	bl	8004350 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008962:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <cppLoop+0xc98>)
 8008964:	edd3 7a00 	vldr	s15, [r3]
 8008968:	eeb0 0a67 	vmov.f32	s0, s15
 800896c:	4849      	ldr	r0, [pc, #292]	; (8008a94 <cppLoop+0xc8c>)
 800896e:	f7fb fa9e 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008972:	4b49      	ldr	r3, [pc, #292]	; (8008a98 <cppLoop+0xc90>)
 8008974:	edd3 7a00 	vldr	s15, [r3]
 8008978:	eeb0 0a67 	vmov.f32	s0, s15
 800897c:	4845      	ldr	r0, [pc, #276]	; (8008a94 <cppLoop+0xc8c>)
 800897e:	f7fb faa6 	bl	8003ece <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008982:	4b47      	ldr	r3, [pc, #284]	; (8008aa0 <cppLoop+0xc98>)
 8008984:	edd3 7a00 	vldr	s15, [r3]
 8008988:	eeb0 0a67 	vmov.f32	s0, s15
 800898c:	4841      	ldr	r0, [pc, #260]	; (8008a94 <cppLoop+0xc8c>)
 800898e:	f7fb fabe 	bl	8003f0e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008992:	4840      	ldr	r0, [pc, #256]	; (8008a94 <cppLoop+0xc8c>)
 8008994:	f7fb fe1c 	bl	80045d0 <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8008998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800899c:	f001 fb14 	bl	8009fc8 <HAL_Delay>

			line_trace.running();
 80089a0:	483c      	ldr	r0, [pc, #240]	; (8008a94 <cppLoop+0xc8c>)
 80089a2:	f7fb fd19 	bl	80043d8 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80089a6:	4840      	ldr	r0, [pc, #256]	; (8008aa8 <cppLoop+0xca0>)
 80089a8:	f7f8 fcec 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	2100      	movs	r1, #0
 80089b2:	4831      	ldr	r0, [pc, #196]	; (8008a78 <cppLoop+0xc70>)
 80089b4:	f7f9 fd0a 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80089b8:	f001 b9c4 	b.w	8009d44 <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 80089bc:	2147      	movs	r1, #71	; 0x47
 80089be:	482e      	ldr	r0, [pc, #184]	; (8008a78 <cppLoop+0xc70>)
 80089c0:	f7f9 fc48 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80089c4:	f7f8 fb6c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089c8:	2100      	movs	r1, #0
 80089ca:	2000      	movs	r0, #0
 80089cc:	f7f8 fb78 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80089d0:	4830      	ldr	r0, [pc, #192]	; (8008a94 <cppLoop+0xc8c>)
 80089d2:	f7fb facc 	bl	8003f6e <_ZN9LineTrace14getMaxVelocityEv>
 80089d6:	ee10 3a10 	vmov	r3, s0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f7 fdcc 	bl	8000578 <__aeabi_f2d>
 80089e0:	4603      	mov	r3, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	461a      	mov	r2, r3
 80089e6:	4623      	mov	r3, r4
 80089e8:	482c      	ldr	r0, [pc, #176]	; (8008a9c <cppLoop+0xc94>)
 80089ea:	f7f8 fb93 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089ee:	2101      	movs	r1, #1
 80089f0:	2000      	movs	r0, #0
 80089f2:	f7f8 fb65 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80089f6:	4827      	ldr	r0, [pc, #156]	; (8008a94 <cppLoop+0xc8c>)
 80089f8:	f7fb fad9 	bl	8003fae <_ZN9LineTrace14getMinVelocityEv>
 80089fc:	ee10 3a10 	vmov	r3, s0
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7f7 fdb9 	bl	8000578 <__aeabi_f2d>
 8008a06:	4603      	mov	r3, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	481d      	ldr	r0, [pc, #116]	; (8008a84 <cppLoop+0xc7c>)
 8008a10:	f7f8 fb80 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a14:	481c      	ldr	r0, [pc, #112]	; (8008a88 <cppLoop+0xc80>)
 8008a16:	f7f9 fbb9 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d042      	beq.n	8008ab0 <cppLoop+0xca8>
			led.LR(-1, 1);
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a30:	4811      	ldr	r0, [pc, #68]	; (8008a78 <cppLoop+0xc70>)
 8008a32:	f7f9 fccb 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a3a:	f001 fac5 	bl	8009fc8 <HAL_Delay>

			selector_vel++;
 8008a3e:	4b1b      	ldr	r3, [pc, #108]	; (8008aac <cppLoop+0xca4>)
 8008a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3301      	adds	r3, #1
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	b21a      	sxth	r2, r3
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <cppLoop+0xca4>)
 8008a4e:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008a50:	4b16      	ldr	r3, [pc, #88]	; (8008aac <cppLoop+0xca4>)
 8008a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	dd02      	ble.n	8008a60 <cppLoop+0xc58>
 8008a5a:	4b14      	ldr	r3, [pc, #80]	; (8008aac <cppLoop+0xca4>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008a60:	2200      	movs	r2, #0
 8008a62:	f04f 31ff 	mov.w	r1, #4294967295
 8008a66:	4804      	ldr	r0, [pc, #16]	; (8008a78 <cppLoop+0xc70>)
 8008a68:	f7f9 fcb0 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008a6c:	f001 b96c 	b.w	8009d48 <cppLoop+0x1f40>
 8008a70:	9999999a 	.word	0x9999999a
 8008a74:	3fb99999 	.word	0x3fb99999
 8008a78:	200005d0 	.word	0x200005d0
 8008a7c:	0801a0f8 	.word	0x0801a0f8
 8008a80:	20042414 	.word	0x20042414
 8008a84:	0801a134 	.word	0x0801a134
 8008a88:	200005c4 	.word	0x200005c4
 8008a8c:	0801a140 	.word	0x0801a140
 8008a90:	0801a0d8 	.word	0x0801a0d8
 8008a94:	2001db64 	.word	0x2001db64
 8008a98:	2004241c 	.word	0x2004241c
 8008a9c:	0801a14c 	.word	0x0801a14c
 8008aa0:	2004242c 	.word	0x2004242c
 8008aa4:	0801a104 	.word	0x0801a104
 8008aa8:	2001db60 	.word	0x2001db60
 8008aac:	200423e0 	.word	0x200423e0
		else if(joy_stick.getValue() == JOY_R){
 8008ab0:	48a5      	ldr	r0, [pc, #660]	; (8008d48 <cppLoop+0xf40>)
 8008ab2:	f7f9 fb6b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b10      	cmp	r3, #16
 8008aba:	bf0c      	ite	eq
 8008abc:	2301      	moveq	r3, #1
 8008abe:	2300      	movne	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d03c      	beq.n	8008b40 <cppLoop+0xd38>
			led.LR(-1, 1);
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8008acc:	489f      	ldr	r0, [pc, #636]	; (8008d4c <cppLoop+0xf44>)
 8008ace:	f7f9 fc7d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ad2:	2064      	movs	r0, #100	; 0x64
 8008ad4:	f001 fa78 	bl	8009fc8 <HAL_Delay>
			if(selector_vel == 0)
 8008ad8:	4b9d      	ldr	r3, [pc, #628]	; (8008d50 <cppLoop+0xf48>)
 8008ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d113      	bne.n	8008b0a <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008ae2:	4b9c      	ldr	r3, [pc, #624]	; (8008d54 <cppLoop+0xf4c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f7 fd46 	bl	8000578 <__aeabi_f2d>
 8008aec:	a394      	add	r3, pc, #592	; (adr r3, 8008d40 <cppLoop+0xf38>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fbe3 	bl	80002bc <__adddf3>
 8008af6:	4603      	mov	r3, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	4618      	mov	r0, r3
 8008afc:	4621      	mov	r1, r4
 8008afe:	f7f8 f88b 	bl	8000c18 <__aeabi_d2f>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4b93      	ldr	r3, [pc, #588]	; (8008d54 <cppLoop+0xf4c>)
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e012      	b.n	8008b30 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008b0a:	4b93      	ldr	r3, [pc, #588]	; (8008d58 <cppLoop+0xf50>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f7 fd32 	bl	8000578 <__aeabi_f2d>
 8008b14:	a38a      	add	r3, pc, #552	; (adr r3, 8008d40 <cppLoop+0xf38>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fbcf 	bl	80002bc <__adddf3>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	460c      	mov	r4, r1
 8008b22:	4618      	mov	r0, r3
 8008b24:	4621      	mov	r1, r4
 8008b26:	f7f8 f877 	bl	8000c18 <__aeabi_d2f>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b8a      	ldr	r3, [pc, #552]	; (8008d58 <cppLoop+0xf50>)
 8008b2e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b30:	2200      	movs	r2, #0
 8008b32:	f04f 31ff 	mov.w	r1, #4294967295
 8008b36:	4885      	ldr	r0, [pc, #532]	; (8008d4c <cppLoop+0xf44>)
 8008b38:	f7f9 fc48 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008b3c:	f001 b904 	b.w	8009d48 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 8008b40:	4881      	ldr	r0, [pc, #516]	; (8008d48 <cppLoop+0xf40>)
 8008b42:	f7f9 fb23 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2301      	moveq	r3, #1
 8008b4e:	2300      	movne	r3, #0
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d03c      	beq.n	8008bd0 <cppLoop+0xdc8>
			led.LR(-1, 1);
 8008b56:	2201      	movs	r2, #1
 8008b58:	f04f 31ff 	mov.w	r1, #4294967295
 8008b5c:	487b      	ldr	r0, [pc, #492]	; (8008d4c <cppLoop+0xf44>)
 8008b5e:	f7f9 fc35 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b62:	2064      	movs	r0, #100	; 0x64
 8008b64:	f001 fa30 	bl	8009fc8 <HAL_Delay>
			if(selector_vel == 0)
 8008b68:	4b79      	ldr	r3, [pc, #484]	; (8008d50 <cppLoop+0xf48>)
 8008b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d113      	bne.n	8008b9a <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008b72:	4b78      	ldr	r3, [pc, #480]	; (8008d54 <cppLoop+0xf4c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7f7 fcfe 	bl	8000578 <__aeabi_f2d>
 8008b7c:	a370      	add	r3, pc, #448	; (adr r3, 8008d40 <cppLoop+0xf38>)
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	f7f7 fb99 	bl	80002b8 <__aeabi_dsub>
 8008b86:	4603      	mov	r3, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	f7f8 f843 	bl	8000c18 <__aeabi_d2f>
 8008b92:	4602      	mov	r2, r0
 8008b94:	4b6f      	ldr	r3, [pc, #444]	; (8008d54 <cppLoop+0xf4c>)
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e012      	b.n	8008bc0 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008b9a:	4b6f      	ldr	r3, [pc, #444]	; (8008d58 <cppLoop+0xf50>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f7 fcea 	bl	8000578 <__aeabi_f2d>
 8008ba4:	a366      	add	r3, pc, #408	; (adr r3, 8008d40 <cppLoop+0xf38>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f7f7 fb85 	bl	80002b8 <__aeabi_dsub>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	f7f8 f82f 	bl	8000c18 <__aeabi_d2f>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4b66      	ldr	r3, [pc, #408]	; (8008d58 <cppLoop+0xf50>)
 8008bbe:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8008bc6:	4861      	ldr	r0, [pc, #388]	; (8008d4c <cppLoop+0xf44>)
 8008bc8:	f7f9 fc00 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008bcc:	f001 b8bc 	b.w	8009d48 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 8008bd0:	485d      	ldr	r0, [pc, #372]	; (8008d48 <cppLoop+0xf40>)
 8008bd2:	f7f9 fadb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f001 80b0 	beq.w	8009d48 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008be8:	2201      	movs	r2, #1
 8008bea:	f04f 31ff 	mov.w	r1, #4294967295
 8008bee:	4857      	ldr	r0, [pc, #348]	; (8008d4c <cppLoop+0xf44>)
 8008bf0:	f7f9 fbec 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008bf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bf8:	f001 f9e6 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	4b54      	ldr	r3, [pc, #336]	; (8008d54 <cppLoop+0xf4c>)
 8008c02:	2201      	movs	r2, #1
 8008c04:	4955      	ldr	r1, [pc, #340]	; (8008d5c <cppLoop+0xf54>)
 8008c06:	4856      	ldr	r0, [pc, #344]	; (8008d60 <cppLoop+0xf58>)
 8008c08:	f7f8 fe38 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	4b51      	ldr	r3, [pc, #324]	; (8008d58 <cppLoop+0xf50>)
 8008c12:	2201      	movs	r2, #1
 8008c14:	4953      	ldr	r1, [pc, #332]	; (8008d64 <cppLoop+0xf5c>)
 8008c16:	4852      	ldr	r0, [pc, #328]	; (8008d60 <cppLoop+0xf58>)
 8008c18:	f7f8 fe30 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008c1c:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <cppLoop+0xf4c>)
 8008c1e:	edd3 7a00 	vldr	s15, [r3]
 8008c22:	eeb0 0a67 	vmov.f32	s0, s15
 8008c26:	4850      	ldr	r0, [pc, #320]	; (8008d68 <cppLoop+0xf60>)
 8008c28:	f7fb f951 	bl	8003ece <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008c2c:	4b4a      	ldr	r3, [pc, #296]	; (8008d58 <cppLoop+0xf50>)
 8008c2e:	edd3 7a00 	vldr	s15, [r3]
 8008c32:	eeb0 0a67 	vmov.f32	s0, s15
 8008c36:	484c      	ldr	r0, [pc, #304]	; (8008d68 <cppLoop+0xf60>)
 8008c38:	f7fb f969 	bl	8003f0e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c42:	4842      	ldr	r0, [pc, #264]	; (8008d4c <cppLoop+0xf44>)
 8008c44:	f7f9 fbc2 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008c48:	f001 b87e 	b.w	8009d48 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 8008c4c:	214d      	movs	r1, #77	; 0x4d
 8008c4e:	483f      	ldr	r0, [pc, #252]	; (8008d4c <cppLoop+0xf44>)
 8008c50:	f7f9 fb00 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c54:	f7f8 fa24 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f7f8 fa30 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008c60:	4b42      	ldr	r3, [pc, #264]	; (8008d6c <cppLoop+0xf64>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fc87 	bl	8000578 <__aeabi_f2d>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4623      	mov	r3, r4
 8008c72:	483f      	ldr	r0, [pc, #252]	; (8008d70 <cppLoop+0xf68>)
 8008c74:	f7f8 fa4e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c78:	2101      	movs	r1, #1
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	f7f8 fa20 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008c80:	4b3c      	ldr	r3, [pc, #240]	; (8008d74 <cppLoop+0xf6c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7f7 fc77 	bl	8000578 <__aeabi_f2d>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	461a      	mov	r2, r3
 8008c90:	4623      	mov	r3, r4
 8008c92:	4839      	ldr	r0, [pc, #228]	; (8008d78 <cppLoop+0xf70>)
 8008c94:	f7f8 fa3e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008c98:	482b      	ldr	r0, [pc, #172]	; (8008d48 <cppLoop+0xf40>)
 8008c9a:	f7f9 fa77 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	bf0c      	ite	eq
 8008ca4:	2301      	moveq	r3, #1
 8008ca6:	2300      	movne	r3, #0
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f001 804e 	beq.w	8009d4c <cppLoop+0x1f44>
			HAL_Delay(500);
 8008cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cb4:	f001 f988 	bl	8009fc8 <HAL_Delay>

			led.LR(1, -1);
 8008cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	4823      	ldr	r0, [pc, #140]	; (8008d4c <cppLoop+0xf44>)
 8008cc0:	f7f9 fb84 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008cc4:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <cppLoop+0xf74>)
 8008cc6:	edd3 7a00 	vldr	s15, [r3]
 8008cca:	4b2d      	ldr	r3, [pc, #180]	; (8008d80 <cppLoop+0xf78>)
 8008ccc:	ed93 7a00 	vldr	s14, [r3]
 8008cd0:	4b2c      	ldr	r3, [pc, #176]	; (8008d84 <cppLoop+0xf7c>)
 8008cd2:	edd3 6a00 	vldr	s13, [r3]
 8008cd6:	eeb0 1a66 	vmov.f32	s2, s13
 8008cda:	eef0 0a47 	vmov.f32	s1, s14
 8008cde:	eeb0 0a67 	vmov.f32	s0, s15
 8008ce2:	4821      	ldr	r0, [pc, #132]	; (8008d68 <cppLoop+0xf60>)
 8008ce4:	f7fb f848 	bl	8003d78 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008ce8:	2102      	movs	r1, #2
 8008cea:	481f      	ldr	r0, [pc, #124]	; (8008d68 <cppLoop+0xf60>)
 8008cec:	f7fb fb30 	bl	8004350 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008cf0:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <cppLoop+0xf6c>)
 8008cf2:	edd3 7a00 	vldr	s15, [r3]
 8008cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8008cfa:	481b      	ldr	r0, [pc, #108]	; (8008d68 <cppLoop+0xf60>)
 8008cfc:	f7fb f8d7 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008d00:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <cppLoop+0xf64>)
 8008d02:	edd3 7a00 	vldr	s15, [r3]
 8008d06:	eeb0 0a67 	vmov.f32	s0, s15
 8008d0a:	4817      	ldr	r0, [pc, #92]	; (8008d68 <cppLoop+0xf60>)
 8008d0c:	f7fb f8ef 	bl	8003eee <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008d10:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <cppLoop+0xf6c>)
 8008d12:	edd3 7a00 	vldr	s15, [r3]
 8008d16:	eeb0 0a67 	vmov.f32	s0, s15
 8008d1a:	4813      	ldr	r0, [pc, #76]	; (8008d68 <cppLoop+0xf60>)
 8008d1c:	f7fb f907 	bl	8003f2e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008d20:	4811      	ldr	r0, [pc, #68]	; (8008d68 <cppLoop+0xf60>)
 8008d22:	f7fb fc55 	bl	80045d0 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008d26:	4810      	ldr	r0, [pc, #64]	; (8008d68 <cppLoop+0xf60>)
 8008d28:	f7fb fb56 	bl	80043d8 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	2100      	movs	r1, #0
 8008d32:	4806      	ldr	r0, [pc, #24]	; (8008d4c <cppLoop+0xf44>)
 8008d34:	f7f9 fb4a 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008d38:	f001 b808 	b.w	8009d4c <cppLoop+0x1f44>
 8008d3c:	f3af 8000 	nop.w
 8008d40:	9999999a 	.word	0x9999999a
 8008d44:	3fb99999 	.word	0x3fb99999
 8008d48:	200005c4 	.word	0x200005c4
 8008d4c:	200005d0 	.word	0x200005d0
 8008d50:	200423e0 	.word	0x200423e0
 8008d54:	2004241c 	.word	0x2004241c
 8008d58:	2004242c 	.word	0x2004242c
 8008d5c:	0801a158 	.word	0x0801a158
 8008d60:	0801a0d8 	.word	0x0801a0d8
 8008d64:	0801a164 	.word	0x0801a164
 8008d68:	2001db64 	.word	0x2001db64
 8008d6c:	20042424 	.word	0x20042424
 8008d70:	0801a170 	.word	0x0801a170
 8008d74:	20042434 	.word	0x20042434
 8008d78:	0801a104 	.word	0x0801a104
 8008d7c:	200423e4 	.word	0x200423e4
 8008d80:	200423ec 	.word	0x200423ec
 8008d84:	200423f4 	.word	0x200423f4

	case 6:
		led.fullColor('R');
 8008d88:	2152      	movs	r1, #82	; 0x52
 8008d8a:	4895      	ldr	r0, [pc, #596]	; (8008fe0 <cppLoop+0x11d8>)
 8008d8c:	f7f9 fa62 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d90:	f7f8 f986 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d94:	2100      	movs	r1, #0
 8008d96:	2000      	movs	r0, #0
 8008d98:	f7f8 f992 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008d9c:	4891      	ldr	r0, [pc, #580]	; (8008fe4 <cppLoop+0x11dc>)
 8008d9e:	f7fb f8f6 	bl	8003f8e <_ZN9LineTrace15getMaxVelocity2Ev>
 8008da2:	ee10 3a10 	vmov	r3, s0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7f7 fbe6 	bl	8000578 <__aeabi_f2d>
 8008dac:	4603      	mov	r3, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	461a      	mov	r2, r3
 8008db2:	4623      	mov	r3, r4
 8008db4:	488c      	ldr	r0, [pc, #560]	; (8008fe8 <cppLoop+0x11e0>)
 8008db6:	f7f8 f9ad 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dba:	2101      	movs	r1, #1
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f7f8 f97f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008dc2:	4888      	ldr	r0, [pc, #544]	; (8008fe4 <cppLoop+0x11dc>)
 8008dc4:	f7fb f903 	bl	8003fce <_ZN9LineTrace15getMinVelocity2Ev>
 8008dc8:	ee10 3a10 	vmov	r3, s0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f7 fbd3 	bl	8000578 <__aeabi_f2d>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4623      	mov	r3, r4
 8008dda:	4884      	ldr	r0, [pc, #528]	; (8008fec <cppLoop+0x11e4>)
 8008ddc:	f7f8 f99a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008de0:	4883      	ldr	r0, [pc, #524]	; (8008ff0 <cppLoop+0x11e8>)
 8008de2:	f7f9 f9d3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d022      	beq.n	8008e3c <cppLoop+0x1034>
			led.LR(-1, 1);
 8008df6:	2201      	movs	r2, #1
 8008df8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dfc:	4878      	ldr	r0, [pc, #480]	; (8008fe0 <cppLoop+0x11d8>)
 8008dfe:	f7f9 fae5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e06:	f001 f8df 	bl	8009fc8 <HAL_Delay>

			selector_vel2++;
 8008e0a:	4b7a      	ldr	r3, [pc, #488]	; (8008ff4 <cppLoop+0x11ec>)
 8008e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	3301      	adds	r3, #1
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	b21a      	sxth	r2, r3
 8008e18:	4b76      	ldr	r3, [pc, #472]	; (8008ff4 <cppLoop+0x11ec>)
 8008e1a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008e1c:	4b75      	ldr	r3, [pc, #468]	; (8008ff4 <cppLoop+0x11ec>)
 8008e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	dd02      	ble.n	8008e2c <cppLoop+0x1024>
 8008e26:	4b73      	ldr	r3, [pc, #460]	; (8008ff4 <cppLoop+0x11ec>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e32:	486b      	ldr	r0, [pc, #428]	; (8008fe0 <cppLoop+0x11d8>)
 8008e34:	f7f9 faca 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008e38:	f000 bf8a 	b.w	8009d50 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008e3c:	486c      	ldr	r0, [pc, #432]	; (8008ff0 <cppLoop+0x11e8>)
 8008e3e:	f7f9 f9a5 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b10      	cmp	r3, #16
 8008e46:	bf0c      	ite	eq
 8008e48:	2301      	moveq	r3, #1
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d03c      	beq.n	8008ecc <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008e52:	2201      	movs	r2, #1
 8008e54:	f04f 31ff 	mov.w	r1, #4294967295
 8008e58:	4861      	ldr	r0, [pc, #388]	; (8008fe0 <cppLoop+0x11d8>)
 8008e5a:	f7f9 fab7 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e5e:	2064      	movs	r0, #100	; 0x64
 8008e60:	f001 f8b2 	bl	8009fc8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008e64:	4b63      	ldr	r3, [pc, #396]	; (8008ff4 <cppLoop+0x11ec>)
 8008e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d113      	bne.n	8008e96 <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008e6e:	4b62      	ldr	r3, [pc, #392]	; (8008ff8 <cppLoop+0x11f0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7f7 fb80 	bl	8000578 <__aeabi_f2d>
 8008e78:	a357      	add	r3, pc, #348	; (adr r3, 8008fd8 <cppLoop+0x11d0>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fa1d 	bl	80002bc <__adddf3>
 8008e82:	4603      	mov	r3, r0
 8008e84:	460c      	mov	r4, r1
 8008e86:	4618      	mov	r0, r3
 8008e88:	4621      	mov	r1, r4
 8008e8a:	f7f7 fec5 	bl	8000c18 <__aeabi_d2f>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b59      	ldr	r3, [pc, #356]	; (8008ff8 <cppLoop+0x11f0>)
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e012      	b.n	8008ebc <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008e96:	4b59      	ldr	r3, [pc, #356]	; (8008ffc <cppLoop+0x11f4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7f7 fb6c 	bl	8000578 <__aeabi_f2d>
 8008ea0:	a34d      	add	r3, pc, #308	; (adr r3, 8008fd8 <cppLoop+0x11d0>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 fa09 	bl	80002bc <__adddf3>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	460c      	mov	r4, r1
 8008eae:	4618      	mov	r0, r3
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	f7f7 feb1 	bl	8000c18 <__aeabi_d2f>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b50      	ldr	r3, [pc, #320]	; (8008ffc <cppLoop+0x11f4>)
 8008eba:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec2:	4847      	ldr	r0, [pc, #284]	; (8008fe0 <cppLoop+0x11d8>)
 8008ec4:	f7f9 fa82 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008ec8:	f000 bf42 	b.w	8009d50 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008ecc:	4848      	ldr	r0, [pc, #288]	; (8008ff0 <cppLoop+0x11e8>)
 8008ece:	f7f9 f95d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d03c      	beq.n	8008f5c <cppLoop+0x1154>
			led.LR(-1, 1);
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee8:	483d      	ldr	r0, [pc, #244]	; (8008fe0 <cppLoop+0x11d8>)
 8008eea:	f7f9 fa6f 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008eee:	2064      	movs	r0, #100	; 0x64
 8008ef0:	f001 f86a 	bl	8009fc8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008ef4:	4b3f      	ldr	r3, [pc, #252]	; (8008ff4 <cppLoop+0x11ec>)
 8008ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d113      	bne.n	8008f26 <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008efe:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <cppLoop+0x11f0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f7 fb38 	bl	8000578 <__aeabi_f2d>
 8008f08:	a333      	add	r3, pc, #204	; (adr r3, 8008fd8 <cppLoop+0x11d0>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 f9d3 	bl	80002b8 <__aeabi_dsub>
 8008f12:	4603      	mov	r3, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	4618      	mov	r0, r3
 8008f18:	4621      	mov	r1, r4
 8008f1a:	f7f7 fe7d 	bl	8000c18 <__aeabi_d2f>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b35      	ldr	r3, [pc, #212]	; (8008ff8 <cppLoop+0x11f0>)
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e012      	b.n	8008f4c <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008f26:	4b35      	ldr	r3, [pc, #212]	; (8008ffc <cppLoop+0x11f4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7f7 fb24 	bl	8000578 <__aeabi_f2d>
 8008f30:	a329      	add	r3, pc, #164	; (adr r3, 8008fd8 <cppLoop+0x11d0>)
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f7f7 f9bf 	bl	80002b8 <__aeabi_dsub>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4618      	mov	r0, r3
 8008f40:	4621      	mov	r1, r4
 8008f42:	f7f7 fe69 	bl	8000c18 <__aeabi_d2f>
 8008f46:	4602      	mov	r2, r0
 8008f48:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <cppLoop+0x11f4>)
 8008f4a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008f52:	4823      	ldr	r0, [pc, #140]	; (8008fe0 <cppLoop+0x11d8>)
 8008f54:	f7f9 fa3a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f58:	f000 befa 	b.w	8009d50 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 8008f5c:	4824      	ldr	r0, [pc, #144]	; (8008ff0 <cppLoop+0x11e8>)
 8008f5e:	f7f9 f915 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 86ee 	beq.w	8009d50 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8008f74:	2201      	movs	r2, #1
 8008f76:	f04f 31ff 	mov.w	r1, #4294967295
 8008f7a:	4819      	ldr	r0, [pc, #100]	; (8008fe0 <cppLoop+0x11d8>)
 8008f7c:	f7f9 fa26 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f84:	f001 f820 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ff8 <cppLoop+0x11f0>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	491b      	ldr	r1, [pc, #108]	; (8009000 <cppLoop+0x11f8>)
 8008f92:	481c      	ldr	r0, [pc, #112]	; (8009004 <cppLoop+0x11fc>)
 8008f94:	f7f8 fc72 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <cppLoop+0x11f4>)
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4919      	ldr	r1, [pc, #100]	; (8009008 <cppLoop+0x1200>)
 8008fa2:	4818      	ldr	r0, [pc, #96]	; (8009004 <cppLoop+0x11fc>)
 8008fa4:	f7f8 fc6a 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008fa8:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <cppLoop+0x11f0>)
 8008faa:	edd3 7a00 	vldr	s15, [r3]
 8008fae:	eeb0 0a67 	vmov.f32	s0, s15
 8008fb2:	480c      	ldr	r0, [pc, #48]	; (8008fe4 <cppLoop+0x11dc>)
 8008fb4:	f7fa ff9b 	bl	8003eee <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008fb8:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <cppLoop+0x11f4>)
 8008fba:	edd3 7a00 	vldr	s15, [r3]
 8008fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc2:	4808      	ldr	r0, [pc, #32]	; (8008fe4 <cppLoop+0x11dc>)
 8008fc4:	f7fa ffb3 	bl	8003f2e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f04f 31ff 	mov.w	r1, #4294967295
 8008fce:	4804      	ldr	r0, [pc, #16]	; (8008fe0 <cppLoop+0x11d8>)
 8008fd0:	f7f9 f9fc 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008fd4:	f000 bebc 	b.w	8009d50 <cppLoop+0x1f48>
 8008fd8:	9999999a 	.word	0x9999999a
 8008fdc:	3fb99999 	.word	0x3fb99999
 8008fe0:	200005d0 	.word	0x200005d0
 8008fe4:	2001db64 	.word	0x2001db64
 8008fe8:	0801a170 	.word	0x0801a170
 8008fec:	0801a134 	.word	0x0801a134
 8008ff0:	200005c4 	.word	0x200005c4
 8008ff4:	200423e2 	.word	0x200423e2
 8008ff8:	20042424 	.word	0x20042424
 8008ffc:	20042434 	.word	0x20042434
 8009000:	0801a17c 	.word	0x0801a17c
 8009004:	0801a0d8 	.word	0x0801a0d8
 8009008:	0801a188 	.word	0x0801a188

	case 7:
		led.fullColor('W');
 800900c:	2157      	movs	r1, #87	; 0x57
 800900e:	48c2      	ldr	r0, [pc, #776]	; (8009318 <cppLoop+0x1510>)
 8009010:	f7f9 f920 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009014:	f7f8 f844 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009018:	2100      	movs	r1, #0
 800901a:	2000      	movs	r0, #0
 800901c:	f7f8 f850 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8009020:	48be      	ldr	r0, [pc, #760]	; (800931c <cppLoop+0x1514>)
 8009022:	f7fb f818 	bl	8004056 <_ZN9LineTrace9getMaxAccEv>
 8009026:	ee10 3a10 	vmov	r3, s0
 800902a:	4618      	mov	r0, r3
 800902c:	f7f7 faa4 	bl	8000578 <__aeabi_f2d>
 8009030:	4603      	mov	r3, r0
 8009032:	460c      	mov	r4, r1
 8009034:	461a      	mov	r2, r3
 8009036:	4623      	mov	r3, r4
 8009038:	48b9      	ldr	r0, [pc, #740]	; (8009320 <cppLoop+0x1518>)
 800903a:	f7f8 f86b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800903e:	2101      	movs	r1, #1
 8009040:	2000      	movs	r0, #0
 8009042:	f7f8 f83d 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8009046:	48b5      	ldr	r0, [pc, #724]	; (800931c <cppLoop+0x1514>)
 8009048:	f7fb f83b 	bl	80040c2 <_ZN9LineTrace9getMaxDecEv>
 800904c:	ee10 3a10 	vmov	r3, s0
 8009050:	4618      	mov	r0, r3
 8009052:	f7f7 fa91 	bl	8000578 <__aeabi_f2d>
 8009056:	4603      	mov	r3, r0
 8009058:	460c      	mov	r4, r1
 800905a:	461a      	mov	r2, r3
 800905c:	4623      	mov	r3, r4
 800905e:	48b1      	ldr	r0, [pc, #708]	; (8009324 <cppLoop+0x151c>)
 8009060:	f7f8 f858 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009064:	48b0      	ldr	r0, [pc, #704]	; (8009328 <cppLoop+0x1520>)
 8009066:	f7f9 f891 	bl	800218c <_ZN8JoyStick8getValueEv>
 800906a:	4603      	mov	r3, r0
 800906c:	2b08      	cmp	r3, #8
 800906e:	bf0c      	ite	eq
 8009070:	2301      	moveq	r3, #1
 8009072:	2300      	movne	r3, #0
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d022      	beq.n	80090c0 <cppLoop+0x12b8>
			led.LR(-1, 1);
 800907a:	2201      	movs	r2, #1
 800907c:	f04f 31ff 	mov.w	r1, #4294967295
 8009080:	48a5      	ldr	r0, [pc, #660]	; (8009318 <cppLoop+0x1510>)
 8009082:	f7f9 f9a3 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009086:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800908a:	f000 ff9d 	bl	8009fc8 <HAL_Delay>

			selector_acc++;
 800908e:	4ba7      	ldr	r3, [pc, #668]	; (800932c <cppLoop+0x1524>)
 8009090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009094:	b29b      	uxth	r3, r3
 8009096:	3301      	adds	r3, #1
 8009098:	b29b      	uxth	r3, r3
 800909a:	b21a      	sxth	r2, r3
 800909c:	4ba3      	ldr	r3, [pc, #652]	; (800932c <cppLoop+0x1524>)
 800909e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80090a0:	4ba2      	ldr	r3, [pc, #648]	; (800932c <cppLoop+0x1524>)
 80090a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	dd02      	ble.n	80090b0 <cppLoop+0x12a8>
 80090aa:	4ba0      	ldr	r3, [pc, #640]	; (800932c <cppLoop+0x1524>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80090b0:	2200      	movs	r2, #0
 80090b2:	f04f 31ff 	mov.w	r1, #4294967295
 80090b6:	4898      	ldr	r0, [pc, #608]	; (8009318 <cppLoop+0x1510>)
 80090b8:	f7f9 f988 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80090bc:	f000 be4a 	b.w	8009d54 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 80090c0:	4899      	ldr	r0, [pc, #612]	; (8009328 <cppLoop+0x1520>)
 80090c2:	f7f9 f863 	bl	800218c <_ZN8JoyStick8getValueEv>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b10      	cmp	r3, #16
 80090ca:	bf0c      	ite	eq
 80090cc:	2301      	moveq	r3, #1
 80090ce:	2300      	movne	r3, #0
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d03c      	beq.n	8009150 <cppLoop+0x1348>
			led.LR(-1, 1);
 80090d6:	2201      	movs	r2, #1
 80090d8:	f04f 31ff 	mov.w	r1, #4294967295
 80090dc:	488e      	ldr	r0, [pc, #568]	; (8009318 <cppLoop+0x1510>)
 80090de:	f7f9 f975 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090e2:	2064      	movs	r0, #100	; 0x64
 80090e4:	f000 ff70 	bl	8009fc8 <HAL_Delay>
			if(selector_acc == 0){
 80090e8:	4b90      	ldr	r3, [pc, #576]	; (800932c <cppLoop+0x1524>)
 80090ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d113      	bne.n	800911a <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 80090f2:	4b8f      	ldr	r3, [pc, #572]	; (8009330 <cppLoop+0x1528>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 fa3e 	bl	8000578 <__aeabi_f2d>
 80090fc:	a384      	add	r3, pc, #528	; (adr r3, 8009310 <cppLoop+0x1508>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f8db 	bl	80002bc <__adddf3>
 8009106:	4603      	mov	r3, r0
 8009108:	460c      	mov	r4, r1
 800910a:	4618      	mov	r0, r3
 800910c:	4621      	mov	r1, r4
 800910e:	f7f7 fd83 	bl	8000c18 <__aeabi_d2f>
 8009112:	4602      	mov	r2, r0
 8009114:	4b86      	ldr	r3, [pc, #536]	; (8009330 <cppLoop+0x1528>)
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e012      	b.n	8009140 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 800911a:	4b86      	ldr	r3, [pc, #536]	; (8009334 <cppLoop+0x152c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f7f7 fa2a 	bl	8000578 <__aeabi_f2d>
 8009124:	a37a      	add	r3, pc, #488	; (adr r3, 8009310 <cppLoop+0x1508>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f8c7 	bl	80002bc <__adddf3>
 800912e:	4603      	mov	r3, r0
 8009130:	460c      	mov	r4, r1
 8009132:	4618      	mov	r0, r3
 8009134:	4621      	mov	r1, r4
 8009136:	f7f7 fd6f 	bl	8000c18 <__aeabi_d2f>
 800913a:	4602      	mov	r2, r0
 800913c:	4b7d      	ldr	r3, [pc, #500]	; (8009334 <cppLoop+0x152c>)
 800913e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009140:	2200      	movs	r2, #0
 8009142:	f04f 31ff 	mov.w	r1, #4294967295
 8009146:	4874      	ldr	r0, [pc, #464]	; (8009318 <cppLoop+0x1510>)
 8009148:	f7f9 f940 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800914c:	f000 be02 	b.w	8009d54 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 8009150:	4875      	ldr	r0, [pc, #468]	; (8009328 <cppLoop+0x1520>)
 8009152:	f7f9 f81b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009156:	4603      	mov	r3, r0
 8009158:	2b01      	cmp	r3, #1
 800915a:	bf0c      	ite	eq
 800915c:	2301      	moveq	r3, #1
 800915e:	2300      	movne	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d03c      	beq.n	80091e0 <cppLoop+0x13d8>
			led.LR(-1, 1);
 8009166:	2201      	movs	r2, #1
 8009168:	f04f 31ff 	mov.w	r1, #4294967295
 800916c:	486a      	ldr	r0, [pc, #424]	; (8009318 <cppLoop+0x1510>)
 800916e:	f7f9 f92d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009172:	2064      	movs	r0, #100	; 0x64
 8009174:	f000 ff28 	bl	8009fc8 <HAL_Delay>
			if(selector_acc == 0){
 8009178:	4b6c      	ldr	r3, [pc, #432]	; (800932c <cppLoop+0x1524>)
 800917a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d113      	bne.n	80091aa <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 8009182:	4b6b      	ldr	r3, [pc, #428]	; (8009330 <cppLoop+0x1528>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7f7 f9f6 	bl	8000578 <__aeabi_f2d>
 800918c:	a360      	add	r3, pc, #384	; (adr r3, 8009310 <cppLoop+0x1508>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 f891 	bl	80002b8 <__aeabi_dsub>
 8009196:	4603      	mov	r3, r0
 8009198:	460c      	mov	r4, r1
 800919a:	4618      	mov	r0, r3
 800919c:	4621      	mov	r1, r4
 800919e:	f7f7 fd3b 	bl	8000c18 <__aeabi_d2f>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b62      	ldr	r3, [pc, #392]	; (8009330 <cppLoop+0x1528>)
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	e012      	b.n	80091d0 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 80091aa:	4b62      	ldr	r3, [pc, #392]	; (8009334 <cppLoop+0x152c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f7 f9e2 	bl	8000578 <__aeabi_f2d>
 80091b4:	a356      	add	r3, pc, #344	; (adr r3, 8009310 <cppLoop+0x1508>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f87d 	bl	80002b8 <__aeabi_dsub>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	4618      	mov	r0, r3
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7f7 fd27 	bl	8000c18 <__aeabi_d2f>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4b59      	ldr	r3, [pc, #356]	; (8009334 <cppLoop+0x152c>)
 80091ce:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80091d0:	2200      	movs	r2, #0
 80091d2:	f04f 31ff 	mov.w	r1, #4294967295
 80091d6:	4850      	ldr	r0, [pc, #320]	; (8009318 <cppLoop+0x1510>)
 80091d8:	f7f9 f8f8 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80091dc:	f000 bdba 	b.w	8009d54 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 80091e0:	4851      	ldr	r0, [pc, #324]	; (8009328 <cppLoop+0x1520>)
 80091e2:	f7f8 ffd3 	bl	800218c <_ZN8JoyStick8getValueEv>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 85ae 	beq.w	8009d54 <cppLoop+0x1f4c>
			led.LR(-1, 1);
 80091f8:	2201      	movs	r2, #1
 80091fa:	f04f 31ff 	mov.w	r1, #4294967295
 80091fe:	4846      	ldr	r0, [pc, #280]	; (8009318 <cppLoop+0x1510>)
 8009200:	f7f9 f8e4 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009204:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009208:	f000 fede 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800920c:	2300      	movs	r3, #0
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4b47      	ldr	r3, [pc, #284]	; (8009330 <cppLoop+0x1528>)
 8009212:	2201      	movs	r2, #1
 8009214:	4948      	ldr	r1, [pc, #288]	; (8009338 <cppLoop+0x1530>)
 8009216:	4849      	ldr	r0, [pc, #292]	; (800933c <cppLoop+0x1534>)
 8009218:	f7f8 fb30 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800921c:	2300      	movs	r3, #0
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	4b44      	ldr	r3, [pc, #272]	; (8009334 <cppLoop+0x152c>)
 8009222:	2201      	movs	r2, #1
 8009224:	4946      	ldr	r1, [pc, #280]	; (8009340 <cppLoop+0x1538>)
 8009226:	4845      	ldr	r0, [pc, #276]	; (800933c <cppLoop+0x1534>)
 8009228:	f7f8 fb28 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800922c:	4b40      	ldr	r3, [pc, #256]	; (8009330 <cppLoop+0x1528>)
 800922e:	edd3 7a00 	vldr	s15, [r3]
 8009232:	4b40      	ldr	r3, [pc, #256]	; (8009334 <cppLoop+0x152c>)
 8009234:	ed93 7a00 	vldr	s14, [r3]
 8009238:	eef0 0a47 	vmov.f32	s1, s14
 800923c:	eeb0 0a67 	vmov.f32	s0, s15
 8009240:	4836      	ldr	r0, [pc, #216]	; (800931c <cppLoop+0x1514>)
 8009242:	f7fa fed4 	bl	8003fee <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	f04f 31ff 	mov.w	r1, #4294967295
 800924c:	4832      	ldr	r0, [pc, #200]	; (8009318 <cppLoop+0x1510>)
 800924e:	f7f9 f8bd 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009252:	f000 bd7f 	b.w	8009d54 <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 8009256:	2157      	movs	r1, #87	; 0x57
 8009258:	482f      	ldr	r0, [pc, #188]	; (8009318 <cppLoop+0x1510>)
 800925a:	f7f8 fffb 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800925e:	f7f7 ff1f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009262:	2100      	movs	r1, #0
 8009264:	2000      	movs	r0, #0
 8009266:	f7f7 ff2b 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800926a:	482c      	ldr	r0, [pc, #176]	; (800931c <cppLoop+0x1514>)
 800926c:	f7fa ff17 	bl	800409e <_ZN9LineTrace10getMaxAcc2Ev>
 8009270:	ee10 3a10 	vmov	r3, s0
 8009274:	4618      	mov	r0, r3
 8009276:	f7f7 f97f 	bl	8000578 <__aeabi_f2d>
 800927a:	4603      	mov	r3, r0
 800927c:	460c      	mov	r4, r1
 800927e:	461a      	mov	r2, r3
 8009280:	4623      	mov	r3, r4
 8009282:	4830      	ldr	r0, [pc, #192]	; (8009344 <cppLoop+0x153c>)
 8009284:	f7f7 ff46 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009288:	2101      	movs	r1, #1
 800928a:	2000      	movs	r0, #0
 800928c:	f7f7 ff18 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8009290:	4822      	ldr	r0, [pc, #136]	; (800931c <cppLoop+0x1514>)
 8009292:	f7fa fef2 	bl	800407a <_ZN9LineTrace10getMaxDec2Ev>
 8009296:	ee10 3a10 	vmov	r3, s0
 800929a:	4618      	mov	r0, r3
 800929c:	f7f7 f96c 	bl	8000578 <__aeabi_f2d>
 80092a0:	4603      	mov	r3, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	461a      	mov	r2, r3
 80092a6:	4623      	mov	r3, r4
 80092a8:	4827      	ldr	r0, [pc, #156]	; (8009348 <cppLoop+0x1540>)
 80092aa:	f7f7 ff33 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80092ae:	481e      	ldr	r0, [pc, #120]	; (8009328 <cppLoop+0x1520>)
 80092b0:	f7f8 ff6c 	bl	800218c <_ZN8JoyStick8getValueEv>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	bf0c      	ite	eq
 80092ba:	2301      	moveq	r3, #1
 80092bc:	2300      	movne	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d045      	beq.n	8009350 <cppLoop+0x1548>
			led.LR(-1, 1);
 80092c4:	2201      	movs	r2, #1
 80092c6:	f04f 31ff 	mov.w	r1, #4294967295
 80092ca:	4813      	ldr	r0, [pc, #76]	; (8009318 <cppLoop+0x1510>)
 80092cc:	f7f9 f87e 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092d4:	f000 fe78 	bl	8009fc8 <HAL_Delay>

			selector_acc2++;
 80092d8:	4b1c      	ldr	r3, [pc, #112]	; (800934c <cppLoop+0x1544>)
 80092da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3301      	adds	r3, #1
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	b21a      	sxth	r2, r3
 80092e6:	4b19      	ldr	r3, [pc, #100]	; (800934c <cppLoop+0x1544>)
 80092e8:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 80092ea:	4b18      	ldr	r3, [pc, #96]	; (800934c <cppLoop+0x1544>)
 80092ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	dd02      	ble.n	80092fa <cppLoop+0x14f2>
 80092f4:	4b15      	ldr	r3, [pc, #84]	; (800934c <cppLoop+0x1544>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80092fa:	2200      	movs	r2, #0
 80092fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009300:	4805      	ldr	r0, [pc, #20]	; (8009318 <cppLoop+0x1510>)
 8009302:	f7f9 f863 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009306:	f000 bd27 	b.w	8009d58 <cppLoop+0x1f50>
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w
 8009310:	9999999a 	.word	0x9999999a
 8009314:	3fb99999 	.word	0x3fb99999
 8009318:	200005d0 	.word	0x200005d0
 800931c:	2001db64 	.word	0x2001db64
 8009320:	0801a194 	.word	0x0801a194
 8009324:	0801a1a0 	.word	0x0801a1a0
 8009328:	200005c4 	.word	0x200005c4
 800932c:	200423dc 	.word	0x200423dc
 8009330:	2004243c 	.word	0x2004243c
 8009334:	20042444 	.word	0x20042444
 8009338:	0801a1ac 	.word	0x0801a1ac
 800933c:	0801a0d8 	.word	0x0801a0d8
 8009340:	0801a1b4 	.word	0x0801a1b4
 8009344:	0801a1bc 	.word	0x0801a1bc
 8009348:	0801a1c8 	.word	0x0801a1c8
 800934c:	200423de 	.word	0x200423de
		else if(joy_stick.getValue() == JOY_R){
 8009350:	48bf      	ldr	r0, [pc, #764]	; (8009650 <cppLoop+0x1848>)
 8009352:	f7f8 ff1b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009356:	4603      	mov	r3, r0
 8009358:	2b10      	cmp	r3, #16
 800935a:	bf0c      	ite	eq
 800935c:	2301      	moveq	r3, #1
 800935e:	2300      	movne	r3, #0
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d03c      	beq.n	80093e0 <cppLoop+0x15d8>
			led.LR(-1, 1);
 8009366:	2201      	movs	r2, #1
 8009368:	f04f 31ff 	mov.w	r1, #4294967295
 800936c:	48b9      	ldr	r0, [pc, #740]	; (8009654 <cppLoop+0x184c>)
 800936e:	f7f9 f82d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009372:	2064      	movs	r0, #100	; 0x64
 8009374:	f000 fe28 	bl	8009fc8 <HAL_Delay>
			if(selector_acc2 == 0){
 8009378:	4bb7      	ldr	r3, [pc, #732]	; (8009658 <cppLoop+0x1850>)
 800937a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d113      	bne.n	80093aa <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 8009382:	4bb6      	ldr	r3, [pc, #728]	; (800965c <cppLoop+0x1854>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f7f7 f8f6 	bl	8000578 <__aeabi_f2d>
 800938c:	a3ae      	add	r3, pc, #696	; (adr r3, 8009648 <cppLoop+0x1840>)
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	f7f6 ff93 	bl	80002bc <__adddf3>
 8009396:	4603      	mov	r3, r0
 8009398:	460c      	mov	r4, r1
 800939a:	4618      	mov	r0, r3
 800939c:	4621      	mov	r1, r4
 800939e:	f7f7 fc3b 	bl	8000c18 <__aeabi_d2f>
 80093a2:	4602      	mov	r2, r0
 80093a4:	4bad      	ldr	r3, [pc, #692]	; (800965c <cppLoop+0x1854>)
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	e012      	b.n	80093d0 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 80093aa:	4bad      	ldr	r3, [pc, #692]	; (8009660 <cppLoop+0x1858>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7f7 f8e2 	bl	8000578 <__aeabi_f2d>
 80093b4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009648 <cppLoop+0x1840>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f7f6 ff7f 	bl	80002bc <__adddf3>
 80093be:	4603      	mov	r3, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	4618      	mov	r0, r3
 80093c4:	4621      	mov	r1, r4
 80093c6:	f7f7 fc27 	bl	8000c18 <__aeabi_d2f>
 80093ca:	4602      	mov	r2, r0
 80093cc:	4ba4      	ldr	r3, [pc, #656]	; (8009660 <cppLoop+0x1858>)
 80093ce:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80093d0:	2200      	movs	r2, #0
 80093d2:	f04f 31ff 	mov.w	r1, #4294967295
 80093d6:	489f      	ldr	r0, [pc, #636]	; (8009654 <cppLoop+0x184c>)
 80093d8:	f7f8 fff8 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80093dc:	f000 bcbc 	b.w	8009d58 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 80093e0:	489b      	ldr	r0, [pc, #620]	; (8009650 <cppLoop+0x1848>)
 80093e2:	f7f8 fed3 	bl	800218c <_ZN8JoyStick8getValueEv>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	bf0c      	ite	eq
 80093ec:	2301      	moveq	r3, #1
 80093ee:	2300      	movne	r3, #0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d03c      	beq.n	8009470 <cppLoop+0x1668>
			led.LR(-1, 1);
 80093f6:	2201      	movs	r2, #1
 80093f8:	f04f 31ff 	mov.w	r1, #4294967295
 80093fc:	4895      	ldr	r0, [pc, #596]	; (8009654 <cppLoop+0x184c>)
 80093fe:	f7f8 ffe5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009402:	2064      	movs	r0, #100	; 0x64
 8009404:	f000 fde0 	bl	8009fc8 <HAL_Delay>
			if(selector_acc2 == 0){
 8009408:	4b93      	ldr	r3, [pc, #588]	; (8009658 <cppLoop+0x1850>)
 800940a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d113      	bne.n	800943a <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 8009412:	4b92      	ldr	r3, [pc, #584]	; (800965c <cppLoop+0x1854>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f7f7 f8ae 	bl	8000578 <__aeabi_f2d>
 800941c:	a38a      	add	r3, pc, #552	; (adr r3, 8009648 <cppLoop+0x1840>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f6 ff49 	bl	80002b8 <__aeabi_dsub>
 8009426:	4603      	mov	r3, r0
 8009428:	460c      	mov	r4, r1
 800942a:	4618      	mov	r0, r3
 800942c:	4621      	mov	r1, r4
 800942e:	f7f7 fbf3 	bl	8000c18 <__aeabi_d2f>
 8009432:	4602      	mov	r2, r0
 8009434:	4b89      	ldr	r3, [pc, #548]	; (800965c <cppLoop+0x1854>)
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e012      	b.n	8009460 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 800943a:	4b89      	ldr	r3, [pc, #548]	; (8009660 <cppLoop+0x1858>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f7f7 f89a 	bl	8000578 <__aeabi_f2d>
 8009444:	a380      	add	r3, pc, #512	; (adr r3, 8009648 <cppLoop+0x1840>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f6 ff35 	bl	80002b8 <__aeabi_dsub>
 800944e:	4603      	mov	r3, r0
 8009450:	460c      	mov	r4, r1
 8009452:	4618      	mov	r0, r3
 8009454:	4621      	mov	r1, r4
 8009456:	f7f7 fbdf 	bl	8000c18 <__aeabi_d2f>
 800945a:	4602      	mov	r2, r0
 800945c:	4b80      	ldr	r3, [pc, #512]	; (8009660 <cppLoop+0x1858>)
 800945e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009460:	2200      	movs	r2, #0
 8009462:	f04f 31ff 	mov.w	r1, #4294967295
 8009466:	487b      	ldr	r0, [pc, #492]	; (8009654 <cppLoop+0x184c>)
 8009468:	f7f8 ffb0 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800946c:	f000 bc74 	b.w	8009d58 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 8009470:	4877      	ldr	r0, [pc, #476]	; (8009650 <cppLoop+0x1848>)
 8009472:	f7f8 fe8b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009476:	4603      	mov	r3, r0
 8009478:	2b02      	cmp	r3, #2
 800947a:	bf0c      	ite	eq
 800947c:	2301      	moveq	r3, #1
 800947e:	2300      	movne	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8468 	beq.w	8009d58 <cppLoop+0x1f50>
			led.LR(-1, 1);
 8009488:	2201      	movs	r2, #1
 800948a:	f04f 31ff 	mov.w	r1, #4294967295
 800948e:	4871      	ldr	r0, [pc, #452]	; (8009654 <cppLoop+0x184c>)
 8009490:	f7f8 ff9c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009494:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009498:	f000 fd96 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800949c:	2300      	movs	r3, #0
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	4b6e      	ldr	r3, [pc, #440]	; (800965c <cppLoop+0x1854>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	496f      	ldr	r1, [pc, #444]	; (8009664 <cppLoop+0x185c>)
 80094a6:	4870      	ldr	r0, [pc, #448]	; (8009668 <cppLoop+0x1860>)
 80094a8:	f7f8 f9e8 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80094ac:	2300      	movs	r3, #0
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	4b6b      	ldr	r3, [pc, #428]	; (8009660 <cppLoop+0x1858>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	496d      	ldr	r1, [pc, #436]	; (800966c <cppLoop+0x1864>)
 80094b6:	486c      	ldr	r0, [pc, #432]	; (8009668 <cppLoop+0x1860>)
 80094b8:	f7f8 f9e0 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80094bc:	4b67      	ldr	r3, [pc, #412]	; (800965c <cppLoop+0x1854>)
 80094be:	edd3 7a00 	vldr	s15, [r3]
 80094c2:	4b67      	ldr	r3, [pc, #412]	; (8009660 <cppLoop+0x1858>)
 80094c4:	ed93 7a00 	vldr	s14, [r3]
 80094c8:	eef0 0a47 	vmov.f32	s1, s14
 80094cc:	eeb0 0a67 	vmov.f32	s0, s15
 80094d0:	4867      	ldr	r0, [pc, #412]	; (8009670 <cppLoop+0x1868>)
 80094d2:	f7fa fda6 	bl	8004022 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80094d6:	2200      	movs	r2, #0
 80094d8:	f04f 31ff 	mov.w	r1, #4294967295
 80094dc:	485d      	ldr	r0, [pc, #372]	; (8009654 <cppLoop+0x184c>)
 80094de:	f7f8 ff75 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80094e2:	f000 bc39 	b.w	8009d58 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 80094e6:	217e      	movs	r1, #126	; 0x7e
 80094e8:	485a      	ldr	r0, [pc, #360]	; (8009654 <cppLoop+0x184c>)
 80094ea:	f7f8 feb3 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ee:	f7f7 fdd7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094f2:	2100      	movs	r1, #0
 80094f4:	2000      	movs	r0, #0
 80094f6:	f7f7 fde3 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80094fa:	485e      	ldr	r0, [pc, #376]	; (8009674 <cppLoop+0x186c>)
 80094fc:	f7f7 fe0a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009500:	2101      	movs	r1, #1
 8009502:	2000      	movs	r0, #0
 8009504:	f7f7 fddc 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009508:	485b      	ldr	r0, [pc, #364]	; (8009678 <cppLoop+0x1870>)
 800950a:	f7f7 fe03 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800950e:	4850      	ldr	r0, [pc, #320]	; (8009650 <cppLoop+0x1848>)
 8009510:	f7f8 fe3c 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009514:	4603      	mov	r3, r0
 8009516:	2b02      	cmp	r3, #2
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 841b 	beq.w	8009d5c <cppLoop+0x1f54>
			led.LR(-1, 1);
 8009526:	2201      	movs	r2, #1
 8009528:	f04f 31ff 	mov.w	r1, #4294967295
 800952c:	4849      	ldr	r0, [pc, #292]	; (8009654 <cppLoop+0x184c>)
 800952e:	f7f8 ff4d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009536:	f000 fd47 	bl	8009fc8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800953a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800967c <cppLoop+0x1874>
 800953e:	484c      	ldr	r0, [pc, #304]	; (8009670 <cppLoop+0x1868>)
 8009540:	f7fa fca6 	bl	8003e90 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009544:	484a      	ldr	r0, [pc, #296]	; (8009670 <cppLoop+0x1868>)
 8009546:	f7fa ff15 	bl	8004374 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800954a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800954e:	f000 fd3b 	bl	8009fc8 <HAL_Delay>

			led.fullColor('R');
 8009552:	2152      	movs	r1, #82	; 0x52
 8009554:	483f      	ldr	r0, [pc, #252]	; (8009654 <cppLoop+0x184c>)
 8009556:	f7f8 fe7d 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800955a:	4849      	ldr	r0, [pc, #292]	; (8009680 <cppLoop+0x1878>)
 800955c:	f7f8 f8e0 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009560:	f242 7010 	movw	r0, #10000	; 0x2710
 8009564:	f000 fd30 	bl	8009fc8 <HAL_Delay>

			line_trace.stop();
 8009568:	4841      	ldr	r0, [pc, #260]	; (8009670 <cppLoop+0x1868>)
 800956a:	f7fa ffaf 	bl	80044cc <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800956e:	4945      	ldr	r1, [pc, #276]	; (8009684 <cppLoop+0x187c>)
 8009570:	4845      	ldr	r0, [pc, #276]	; (8009688 <cppLoop+0x1880>)
 8009572:	f7f8 f90e 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8009576:	4842      	ldr	r0, [pc, #264]	; (8009680 <cppLoop+0x1878>)
 8009578:	f7f8 f896 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 800957c:	eef0 7a40 	vmov.f32	s15, s0
 8009580:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009584:	1d3b      	adds	r3, r7, #4
 8009586:	2201      	movs	r2, #1
 8009588:	4619      	mov	r1, r3
 800958a:	2001      	movs	r0, #1
 800958c:	f7f8 f924 	bl	80017d8 <sd_write_float>
			user_fclose();
 8009590:	f7f8 f912 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 8009594:	2200      	movs	r2, #0
 8009596:	f04f 31ff 	mov.w	r1, #4294967295
 800959a:	482e      	ldr	r0, [pc, #184]	; (8009654 <cppLoop+0x184c>)
 800959c:	f7f8 ff16 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80095a0:	e3dc      	b.n	8009d5c <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 80095a2:	217e      	movs	r1, #126	; 0x7e
 80095a4:	482b      	ldr	r0, [pc, #172]	; (8009654 <cppLoop+0x184c>)
 80095a6:	f7f8 fe55 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80095aa:	f7f7 fd79 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095ae:	2100      	movs	r1, #0
 80095b0:	2000      	movs	r0, #0
 80095b2:	f7f7 fd85 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80095b6:	4835      	ldr	r0, [pc, #212]	; (800968c <cppLoop+0x1884>)
 80095b8:	f7f7 fdac 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095bc:	2101      	movs	r1, #1
 80095be:	2000      	movs	r0, #0
 80095c0:	f7f7 fd7e 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80095c4:	4832      	ldr	r0, [pc, #200]	; (8009690 <cppLoop+0x1888>)
 80095c6:	f7f7 fda5 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80095ca:	4821      	ldr	r0, [pc, #132]	; (8009650 <cppLoop+0x1848>)
 80095cc:	f7f8 fdde 	bl	800218c <_ZN8JoyStick8getValueEv>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	bf0c      	ite	eq
 80095d6:	2301      	moveq	r3, #1
 80095d8:	2300      	movne	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 83bf 	beq.w	8009d60 <cppLoop+0x1f58>
			HAL_Delay(500);
 80095e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095e6:	f000 fcef 	bl	8009fc8 <HAL_Delay>
			led.LR(-1, 1);
 80095ea:	2201      	movs	r2, #1
 80095ec:	f04f 31ff 	mov.w	r1, #4294967295
 80095f0:	4818      	ldr	r0, [pc, #96]	; (8009654 <cppLoop+0x184c>)
 80095f2:	f7f8 feeb 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80095f6:	2102      	movs	r1, #2
 80095f8:	481d      	ldr	r0, [pc, #116]	; (8009670 <cppLoop+0x1868>)
 80095fa:	f7fa fea9 	bl	8004350 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80095fe:	4b25      	ldr	r3, [pc, #148]	; (8009694 <cppLoop+0x188c>)
 8009600:	edd3 7a00 	vldr	s15, [r3]
 8009604:	eeb0 0a67 	vmov.f32	s0, s15
 8009608:	4819      	ldr	r0, [pc, #100]	; (8009670 <cppLoop+0x1868>)
 800960a:	f7fa fc50 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800960e:	4b21      	ldr	r3, [pc, #132]	; (8009694 <cppLoop+0x188c>)
 8009610:	edd3 7a00 	vldr	s15, [r3]
 8009614:	eeb0 0a67 	vmov.f32	s0, s15
 8009618:	4815      	ldr	r0, [pc, #84]	; (8009670 <cppLoop+0x1868>)
 800961a:	f7fa fc58 	bl	8003ece <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800961e:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <cppLoop+0x188c>)
 8009620:	edd3 7a00 	vldr	s15, [r3]
 8009624:	eeb0 0a67 	vmov.f32	s0, s15
 8009628:	4811      	ldr	r0, [pc, #68]	; (8009670 <cppLoop+0x1868>)
 800962a:	f7fa fc70 	bl	8003f0e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800962e:	4810      	ldr	r0, [pc, #64]	; (8009670 <cppLoop+0x1868>)
 8009630:	f7fb f89c 	bl	800476c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009634:	2200      	movs	r2, #0
 8009636:	f04f 31ff 	mov.w	r1, #4294967295
 800963a:	4806      	ldr	r0, [pc, #24]	; (8009654 <cppLoop+0x184c>)
 800963c:	f7f8 fec6 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009640:	e38e      	b.n	8009d60 <cppLoop+0x1f58>
 8009642:	bf00      	nop
 8009644:	f3af 8000 	nop.w
 8009648:	9999999a 	.word	0x9999999a
 800964c:	3fb99999 	.word	0x3fb99999
 8009650:	200005c4 	.word	0x200005c4
 8009654:	200005d0 	.word	0x200005d0
 8009658:	200423de 	.word	0x200423de
 800965c:	2004244c 	.word	0x2004244c
 8009660:	20042454 	.word	0x20042454
 8009664:	0801a1d4 	.word	0x0801a1d4
 8009668:	0801a0d8 	.word	0x0801a0d8
 800966c:	0801a1e0 	.word	0x0801a1e0
 8009670:	2001db64 	.word	0x2001db64
 8009674:	0801a1ec 	.word	0x0801a1ec
 8009678:	0801a1f4 	.word	0x0801a1f4
 800967c:	00000000 	.word	0x00000000
 8009680:	2001dac0 	.word	0x2001dac0
 8009684:	0801a200 	.word	0x0801a200
 8009688:	0801a208 	.word	0x0801a208
 800968c:	0801a214 	.word	0x0801a214
 8009690:	0801a220 	.word	0x0801a220
 8009694:	20042424 	.word	0x20042424

	case 11:
		led.fullColor('~');
 8009698:	217e      	movs	r1, #126	; 0x7e
 800969a:	48b5      	ldr	r0, [pc, #724]	; (8009970 <cppLoop+0x1b68>)
 800969c:	f7f8 fdda 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 80096a0:	f7f7 fcfe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096a4:	2100      	movs	r1, #0
 80096a6:	2000      	movs	r0, #0
 80096a8:	f7f7 fd0a 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80096ac:	48b1      	ldr	r0, [pc, #708]	; (8009974 <cppLoop+0x1b6c>)
 80096ae:	f7f7 fd31 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80096b2:	2101      	movs	r1, #1
 80096b4:	2000      	movs	r0, #0
 80096b6:	f7f7 fd03 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80096ba:	48af      	ldr	r0, [pc, #700]	; (8009978 <cppLoop+0x1b70>)
 80096bc:	f7f7 fd2a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80096c0:	48ae      	ldr	r0, [pc, #696]	; (800997c <cppLoop+0x1b74>)
 80096c2:	f7f8 fd63 	bl	800218c <_ZN8JoyStick8getValueEv>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	bf0c      	ite	eq
 80096cc:	2301      	moveq	r3, #1
 80096ce:	2300      	movne	r3, #0
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f000 8346 	beq.w	8009d64 <cppLoop+0x1f5c>
			HAL_Delay(1000);
 80096d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096dc:	f000 fc74 	bl	8009fc8 <HAL_Delay>
			led.LR(-1, 1);
 80096e0:	2201      	movs	r2, #1
 80096e2:	f04f 31ff 	mov.w	r1, #4294967295
 80096e6:	48a2      	ldr	r0, [pc, #648]	; (8009970 <cppLoop+0x1b68>)
 80096e8:	f7f8 fe70 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80096ec:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8009980 <cppLoop+0x1b78>
 80096f0:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8009980 <cppLoop+0x1b78>
 80096f4:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8009980 <cppLoop+0x1b78>
 80096f8:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8009980 <cppLoop+0x1b78>
 80096fc:	48a1      	ldr	r0, [pc, #644]	; (8009984 <cppLoop+0x1b7c>)
 80096fe:	f7f7 fda7 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009702:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009706:	f000 fc5f 	bl	8009fc8 <HAL_Delay>
			esc.off();
 800970a:	489e      	ldr	r0, [pc, #632]	; (8009984 <cppLoop+0x1b7c>)
 800970c:	f7f7 fe3a 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009710:	2200      	movs	r2, #0
 8009712:	f04f 31ff 	mov.w	r1, #4294967295
 8009716:	4896      	ldr	r0, [pc, #600]	; (8009970 <cppLoop+0x1b68>)
 8009718:	f7f8 fe58 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800971c:	e322      	b.n	8009d64 <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 800971e:	217e      	movs	r1, #126	; 0x7e
 8009720:	4893      	ldr	r0, [pc, #588]	; (8009970 <cppLoop+0x1b68>)
 8009722:	f7f8 fd97 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009726:	f7f7 fcbb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800972a:	2100      	movs	r1, #0
 800972c:	2000      	movs	r0, #0
 800972e:	f7f7 fcc7 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009732:	4895      	ldr	r0, [pc, #596]	; (8009988 <cppLoop+0x1b80>)
 8009734:	f7f7 fcee 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009738:	2101      	movs	r1, #1
 800973a:	2000      	movs	r0, #0
 800973c:	f7f7 fcc0 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009740:	4892      	ldr	r0, [pc, #584]	; (800998c <cppLoop+0x1b84>)
 8009742:	f7f7 fce7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009746:	488d      	ldr	r0, [pc, #564]	; (800997c <cppLoop+0x1b74>)
 8009748:	f7f8 fd20 	bl	800218c <_ZN8JoyStick8getValueEv>
 800974c:	4603      	mov	r3, r0
 800974e:	2b02      	cmp	r3, #2
 8009750:	bf0c      	ite	eq
 8009752:	2301      	moveq	r3, #1
 8009754:	2300      	movne	r3, #0
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 8305 	beq.w	8009d68 <cppLoop+0x1f60>
			HAL_Delay(1500);
 800975e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009762:	f000 fc31 	bl	8009fc8 <HAL_Delay>
			led.LR(-1, 1);
 8009766:	2201      	movs	r2, #1
 8009768:	f04f 31ff 	mov.w	r1, #4294967295
 800976c:	4880      	ldr	r0, [pc, #512]	; (8009970 <cppLoop+0x1b68>)
 800976e:	f7f8 fe2d 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009772:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009776:	f000 fc27 	bl	8009fc8 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800977a:	eddf 1a81 	vldr	s3, [pc, #516]	; 8009980 <cppLoop+0x1b78>
 800977e:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8009980 <cppLoop+0x1b78>
 8009782:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8009980 <cppLoop+0x1b78>
 8009786:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8009980 <cppLoop+0x1b78>
 800978a:	487e      	ldr	r0, [pc, #504]	; (8009984 <cppLoop+0x1b7c>)
 800978c:	f7f7 fd60 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009794:	f000 fc18 	bl	8009fc8 <HAL_Delay>

			logger.start();
 8009798:	487d      	ldr	r0, [pc, #500]	; (8009990 <cppLoop+0x1b88>)
 800979a:	f7fb fb6c 	bl	8004e76 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800979e:	487d      	ldr	r0, [pc, #500]	; (8009994 <cppLoop+0x1b8c>)
 80097a0:	f7fc fcaf 	bl	8006102 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80097a4:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8009998 <cppLoop+0x1b90>
 80097a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097ac:	4879      	ldr	r0, [pc, #484]	; (8009994 <cppLoop+0x1b8c>)
 80097ae:	f7fc fc3b 	bl	8006028 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80097b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097b6:	f000 fc07 	bl	8009fc8 <HAL_Delay>

			logger.stop();
 80097ba:	4875      	ldr	r0, [pc, #468]	; (8009990 <cppLoop+0x1b88>)
 80097bc:	f7fb fb6b 	bl	8004e96 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80097c0:	4874      	ldr	r0, [pc, #464]	; (8009994 <cppLoop+0x1b8c>)
 80097c2:	f7fc fcb1 	bl	8006128 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80097c6:	486f      	ldr	r0, [pc, #444]	; (8009984 <cppLoop+0x1b7c>)
 80097c8:	f7f7 fddc 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80097cc:	4a73      	ldr	r2, [pc, #460]	; (800999c <cppLoop+0x1b94>)
 80097ce:	4974      	ldr	r1, [pc, #464]	; (80099a0 <cppLoop+0x1b98>)
 80097d0:	486f      	ldr	r0, [pc, #444]	; (8009990 <cppLoop+0x1b88>)
 80097d2:	f7fb fa47 	bl	8004c64 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80097d6:	2200      	movs	r2, #0
 80097d8:	f04f 31ff 	mov.w	r1, #4294967295
 80097dc:	4864      	ldr	r0, [pc, #400]	; (8009970 <cppLoop+0x1b68>)
 80097de:	f7f8 fdf5 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80097e2:	e2c1      	b.n	8009d68 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 80097e4:	2157      	movs	r1, #87	; 0x57
 80097e6:	4862      	ldr	r0, [pc, #392]	; (8009970 <cppLoop+0x1b68>)
 80097e8:	f7f8 fd34 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80097ec:	f7f7 fc58 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80097f0:	2100      	movs	r1, #0
 80097f2:	2000      	movs	r0, #0
 80097f4:	f7f7 fc64 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80097f8:	486a      	ldr	r0, [pc, #424]	; (80099a4 <cppLoop+0x1b9c>)
 80097fa:	f7f7 fc8b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097fe:	2101      	movs	r1, #1
 8009800:	2000      	movs	r0, #0
 8009802:	f7f7 fc5d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009806:	4b68      	ldr	r3, [pc, #416]	; (80099a8 <cppLoop+0x1ba0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f7f6 feb4 	bl	8000578 <__aeabi_f2d>
 8009810:	4603      	mov	r3, r0
 8009812:	460c      	mov	r4, r1
 8009814:	461a      	mov	r2, r3
 8009816:	4623      	mov	r3, r4
 8009818:	4864      	ldr	r0, [pc, #400]	; (80099ac <cppLoop+0x1ba4>)
 800981a:	f7f7 fc7b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800981e:	4857      	ldr	r0, [pc, #348]	; (800997c <cppLoop+0x1b74>)
 8009820:	f7f8 fcb4 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009824:	4603      	mov	r3, r0
 8009826:	2b02      	cmp	r3, #2
 8009828:	bf0c      	ite	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	2300      	movne	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 829b 	beq.w	8009d6c <cppLoop+0x1f64>
			HAL_Delay(500);
 8009836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800983a:	f000 fbc5 	bl	8009fc8 <HAL_Delay>

			led.LR(1, -1);
 800983e:	f04f 32ff 	mov.w	r2, #4294967295
 8009842:	2101      	movs	r1, #1
 8009844:	484a      	ldr	r0, [pc, #296]	; (8009970 <cppLoop+0x1b68>)
 8009846:	f7f8 fdc1 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800984a:	2102      	movs	r1, #2
 800984c:	4858      	ldr	r0, [pc, #352]	; (80099b0 <cppLoop+0x1ba8>)
 800984e:	f7fa fd7f 	bl	8004350 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009852:	4b58      	ldr	r3, [pc, #352]	; (80099b4 <cppLoop+0x1bac>)
 8009854:	edd3 7a00 	vldr	s15, [r3]
 8009858:	eeb0 0a67 	vmov.f32	s0, s15
 800985c:	4854      	ldr	r0, [pc, #336]	; (80099b0 <cppLoop+0x1ba8>)
 800985e:	f7fa fb26 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009862:	4b51      	ldr	r3, [pc, #324]	; (80099a8 <cppLoop+0x1ba0>)
 8009864:	edd3 7a00 	vldr	s15, [r3]
 8009868:	eeb0 0a67 	vmov.f32	s0, s15
 800986c:	4850      	ldr	r0, [pc, #320]	; (80099b0 <cppLoop+0x1ba8>)
 800986e:	f7fa fb2e 	bl	8003ece <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009872:	4b4d      	ldr	r3, [pc, #308]	; (80099a8 <cppLoop+0x1ba0>)
 8009874:	edd3 7a00 	vldr	s15, [r3]
 8009878:	eeb0 0a67 	vmov.f32	s0, s15
 800987c:	484c      	ldr	r0, [pc, #304]	; (80099b0 <cppLoop+0x1ba8>)
 800987e:	f7fa fb46 	bl	8003f0e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009882:	484b      	ldr	r0, [pc, #300]	; (80099b0 <cppLoop+0x1ba8>)
 8009884:	f7fa ff72 	bl	800476c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800988c:	f000 fb9c 	bl	8009fc8 <HAL_Delay>

			line_trace.running();
 8009890:	4847      	ldr	r0, [pc, #284]	; (80099b0 <cppLoop+0x1ba8>)
 8009892:	f7fa fda1 	bl	80043d8 <_ZN9LineTrace7runningEv>

			esc.off();
 8009896:	483b      	ldr	r0, [pc, #236]	; (8009984 <cppLoop+0x1b7c>)
 8009898:	f7f7 fd74 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800989c:	f04f 32ff 	mov.w	r2, #4294967295
 80098a0:	2100      	movs	r1, #0
 80098a2:	4833      	ldr	r0, [pc, #204]	; (8009970 <cppLoop+0x1b68>)
 80098a4:	f7f8 fd92 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80098a8:	e260      	b.n	8009d6c <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 80098aa:	2157      	movs	r1, #87	; 0x57
 80098ac:	4830      	ldr	r0, [pc, #192]	; (8009970 <cppLoop+0x1b68>)
 80098ae:	f7f8 fcd1 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80098b2:	f7f7 fbf5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80098b6:	2100      	movs	r1, #0
 80098b8:	2000      	movs	r0, #0
 80098ba:	f7f7 fc01 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80098be:	483e      	ldr	r0, [pc, #248]	; (80099b8 <cppLoop+0x1bb0>)
 80098c0:	f7f7 fc28 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80098c4:	2101      	movs	r1, #1
 80098c6:	2000      	movs	r0, #0
 80098c8:	f7f7 fbfa 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80098cc:	4b3b      	ldr	r3, [pc, #236]	; (80099bc <cppLoop+0x1bb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f6 fe51 	bl	8000578 <__aeabi_f2d>
 80098d6:	4603      	mov	r3, r0
 80098d8:	460c      	mov	r4, r1
 80098da:	461a      	mov	r2, r3
 80098dc:	4623      	mov	r3, r4
 80098de:	4833      	ldr	r0, [pc, #204]	; (80099ac <cppLoop+0x1ba4>)
 80098e0:	f7f7 fc18 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80098e4:	4825      	ldr	r0, [pc, #148]	; (800997c <cppLoop+0x1b74>)
 80098e6:	f7f8 fc51 	bl	800218c <_ZN8JoyStick8getValueEv>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	bf0c      	ite	eq
 80098f0:	2301      	moveq	r3, #1
 80098f2:	2300      	movne	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 823a 	beq.w	8009d70 <cppLoop+0x1f68>
			HAL_Delay(500);
 80098fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009900:	f000 fb62 	bl	8009fc8 <HAL_Delay>

			led.LR(1, -1);
 8009904:	f04f 32ff 	mov.w	r2, #4294967295
 8009908:	2101      	movs	r1, #1
 800990a:	4819      	ldr	r0, [pc, #100]	; (8009970 <cppLoop+0x1b68>)
 800990c:	f7f8 fd5e 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009910:	2101      	movs	r1, #1
 8009912:	4827      	ldr	r0, [pc, #156]	; (80099b0 <cppLoop+0x1ba8>)
 8009914:	f7fa fd1c 	bl	8004350 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009918:	4b29      	ldr	r3, [pc, #164]	; (80099c0 <cppLoop+0x1bb8>)
 800991a:	edd3 7a00 	vldr	s15, [r3]
 800991e:	eeb0 0a67 	vmov.f32	s0, s15
 8009922:	4823      	ldr	r0, [pc, #140]	; (80099b0 <cppLoop+0x1ba8>)
 8009924:	f7fa fac3 	bl	8003eae <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009928:	4b24      	ldr	r3, [pc, #144]	; (80099bc <cppLoop+0x1bb4>)
 800992a:	edd3 7a00 	vldr	s15, [r3]
 800992e:	eeb0 0a67 	vmov.f32	s0, s15
 8009932:	481f      	ldr	r0, [pc, #124]	; (80099b0 <cppLoop+0x1ba8>)
 8009934:	f7fa facb 	bl	8003ece <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009938:	4b21      	ldr	r3, [pc, #132]	; (80099c0 <cppLoop+0x1bb8>)
 800993a:	edd3 7a00 	vldr	s15, [r3]
 800993e:	eeb0 0a67 	vmov.f32	s0, s15
 8009942:	481b      	ldr	r0, [pc, #108]	; (80099b0 <cppLoop+0x1ba8>)
 8009944:	f7fa fae3 	bl	8003f0e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009948:	4819      	ldr	r0, [pc, #100]	; (80099b0 <cppLoop+0x1ba8>)
 800994a:	f7fa ff0f 	bl	800476c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 800994e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009952:	f000 fb39 	bl	8009fc8 <HAL_Delay>

			line_trace.running();
 8009956:	4816      	ldr	r0, [pc, #88]	; (80099b0 <cppLoop+0x1ba8>)
 8009958:	f7fa fd3e 	bl	80043d8 <_ZN9LineTrace7runningEv>

			esc.off();
 800995c:	4809      	ldr	r0, [pc, #36]	; (8009984 <cppLoop+0x1b7c>)
 800995e:	f7f7 fd11 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	2100      	movs	r1, #0
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <cppLoop+0x1b68>)
 800996a:	f7f8 fd2f 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 800996e:	e1ff      	b.n	8009d70 <cppLoop+0x1f68>
 8009970:	200005d0 	.word	0x200005d0
 8009974:	0801a22c 	.word	0x0801a22c
 8009978:	0801a230 	.word	0x0801a230
 800997c:	200005c4 	.word	0x200005c4
 8009980:	3ea3d70a 	.word	0x3ea3d70a
 8009984:	2001db60 	.word	0x2001db60
 8009988:	0801a238 	.word	0x0801a238
 800998c:	0801a23c 	.word	0x0801a23c
 8009990:	200005f4 	.word	0x200005f4
 8009994:	2001dae0 	.word	0x2001dae0
 8009998:	00000000 	.word	0x00000000
 800999c:	0801a248 	.word	0x0801a248
 80099a0:	0801a254 	.word	0x0801a254
 80099a4:	0801a260 	.word	0x0801a260
 80099a8:	20042424 	.word	0x20042424
 80099ac:	0801a104 	.word	0x0801a104
 80099b0:	2001db64 	.word	0x2001db64
 80099b4:	20042434 	.word	0x20042434
 80099b8:	0801a26c 	.word	0x0801a26c
 80099bc:	2004241c 	.word	0x2004241c
 80099c0:	2004242c 	.word	0x2004242c

	case 15:
		led.fullColor('W');
 80099c4:	2157      	movs	r1, #87	; 0x57
 80099c6:	48ac      	ldr	r0, [pc, #688]	; (8009c78 <cppLoop+0x1e70>)
 80099c8:	f7f8 fc44 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80099cc:	f7f7 fb68 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80099d0:	2100      	movs	r1, #0
 80099d2:	2000      	movs	r0, #0
 80099d4:	f7f7 fb74 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 80099d8:	48a8      	ldr	r0, [pc, #672]	; (8009c7c <cppLoop+0x1e74>)
 80099da:	f7fa f9e6 	bl	8003daa <_ZN9LineTrace5getKpEv>
 80099de:	eeb0 7a40 	vmov.f32	s14, s0
 80099e2:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009c80 <cppLoop+0x1e78>
 80099e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ea:	eeb0 0a67 	vmov.f32	s0, s15
 80099ee:	f7f9 f85d 	bl	8002aac <_ZSt3absf>
 80099f2:	ee10 3a10 	vmov	r3, s0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f6 fdbe 	bl	8000578 <__aeabi_f2d>
 80099fc:	4603      	mov	r3, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	461a      	mov	r2, r3
 8009a02:	4623      	mov	r3, r4
 8009a04:	489f      	ldr	r0, [pc, #636]	; (8009c84 <cppLoop+0x1e7c>)
 8009a06:	f7f7 fb85 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f7f7 fb57 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 8009a12:	489a      	ldr	r0, [pc, #616]	; (8009c7c <cppLoop+0x1e74>)
 8009a14:	f7fa f9d8 	bl	8003dc8 <_ZN9LineTrace5getKiEv>
 8009a18:	eeb0 7a40 	vmov.f32	s14, s0
 8009a1c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009c88 <cppLoop+0x1e80>
 8009a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a24:	eeb0 0a67 	vmov.f32	s0, s15
 8009a28:	f7f9 f840 	bl	8002aac <_ZSt3absf>
 8009a2c:	ee10 3a10 	vmov	r3, s0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7f6 fda1 	bl	8000578 <__aeabi_f2d>
 8009a36:	4605      	mov	r5, r0
 8009a38:	460e      	mov	r6, r1
 8009a3a:	4890      	ldr	r0, [pc, #576]	; (8009c7c <cppLoop+0x1e74>)
 8009a3c:	f7fa f9d3 	bl	8003de6 <_ZN9LineTrace5getKdEv>
 8009a40:	eeb0 7a40 	vmov.f32	s14, s0
 8009a44:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009c8c <cppLoop+0x1e84>
 8009a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009a50:	f7f9 f82c 	bl	8002aac <_ZSt3absf>
 8009a54:	ee10 3a10 	vmov	r3, s0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f6 fd8d 	bl	8000578 <__aeabi_f2d>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	e9cd 3400 	strd	r3, r4, [sp]
 8009a66:	462a      	mov	r2, r5
 8009a68:	4633      	mov	r3, r6
 8009a6a:	4889      	ldr	r0, [pc, #548]	; (8009c90 <cppLoop+0x1e88>)
 8009a6c:	f7f7 fb52 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009a70:	4888      	ldr	r0, [pc, #544]	; (8009c94 <cppLoop+0x1e8c>)
 8009a72:	f7f8 fb8b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2301      	moveq	r3, #1
 8009a7e:	2300      	movne	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d021      	beq.n	8009aca <cppLoop+0x1cc2>
			led.LR(-1, 1);
 8009a86:	2201      	movs	r2, #1
 8009a88:	f04f 31ff 	mov.w	r1, #4294967295
 8009a8c:	487a      	ldr	r0, [pc, #488]	; (8009c78 <cppLoop+0x1e70>)
 8009a8e:	f7f8 fc9d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009a92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a96:	f000 fa97 	bl	8009fc8 <HAL_Delay>

			selector++;
 8009a9a:	4b7f      	ldr	r3, [pc, #508]	; (8009c98 <cppLoop+0x1e90>)
 8009a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	b21a      	sxth	r2, r3
 8009aa8:	4b7b      	ldr	r3, [pc, #492]	; (8009c98 <cppLoop+0x1e90>)
 8009aaa:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8009aac:	4b7a      	ldr	r3, [pc, #488]	; (8009c98 <cppLoop+0x1e90>)
 8009aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	dd02      	ble.n	8009abc <cppLoop+0x1cb4>
 8009ab6:	4b78      	ldr	r3, [pc, #480]	; (8009c98 <cppLoop+0x1e90>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac2:	486d      	ldr	r0, [pc, #436]	; (8009c78 <cppLoop+0x1e70>)
 8009ac4:	f7f8 fc82 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009ac8:	e154      	b.n	8009d74 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 8009aca:	4872      	ldr	r0, [pc, #456]	; (8009c94 <cppLoop+0x1e8c>)
 8009acc:	f7f8 fb5e 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b10      	cmp	r3, #16
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	2300      	movne	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d058      	beq.n	8009b92 <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ae6:	4864      	ldr	r0, [pc, #400]	; (8009c78 <cppLoop+0x1e70>)
 8009ae8:	f7f8 fc70 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009aec:	2064      	movs	r0, #100	; 0x64
 8009aee:	f000 fa6b 	bl	8009fc8 <HAL_Delay>
			if(selector == 0){
 8009af2:	4b69      	ldr	r3, [pc, #420]	; (8009c98 <cppLoop+0x1e90>)
 8009af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d113      	bne.n	8009b24 <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 8009afc:	4b67      	ldr	r3, [pc, #412]	; (8009c9c <cppLoop+0x1e94>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f6 fd39 	bl	8000578 <__aeabi_f2d>
 8009b06:	a356      	add	r3, pc, #344	; (adr r3, 8009c60 <cppLoop+0x1e58>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fbd6 	bl	80002bc <__adddf3>
 8009b10:	4603      	mov	r3, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4618      	mov	r0, r3
 8009b16:	4621      	mov	r1, r4
 8009b18:	f7f7 f87e 	bl	8000c18 <__aeabi_d2f>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	4b5f      	ldr	r3, [pc, #380]	; (8009c9c <cppLoop+0x1e94>)
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e02b      	b.n	8009b7c <cppLoop+0x1d74>
			else if(selector == 1){
 8009b24:	4b5c      	ldr	r3, [pc, #368]	; (8009c98 <cppLoop+0x1e90>)
 8009b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d113      	bne.n	8009b56 <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 8009b2e:	4b5c      	ldr	r3, [pc, #368]	; (8009ca0 <cppLoop+0x1e98>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f6 fd20 	bl	8000578 <__aeabi_f2d>
 8009b38:	a34b      	add	r3, pc, #300	; (adr r3, 8009c68 <cppLoop+0x1e60>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fbbd 	bl	80002bc <__adddf3>
 8009b42:	4603      	mov	r3, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	4618      	mov	r0, r3
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f7f7 f865 	bl	8000c18 <__aeabi_d2f>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b53      	ldr	r3, [pc, #332]	; (8009ca0 <cppLoop+0x1e98>)
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e012      	b.n	8009b7c <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 8009b56:	4b53      	ldr	r3, [pc, #332]	; (8009ca4 <cppLoop+0x1e9c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7f6 fd0c 	bl	8000578 <__aeabi_f2d>
 8009b60:	a343      	add	r3, pc, #268	; (adr r3, 8009c70 <cppLoop+0x1e68>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fba9 	bl	80002bc <__adddf3>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	4621      	mov	r1, r4
 8009b72:	f7f7 f851 	bl	8000c18 <__aeabi_d2f>
 8009b76:	4602      	mov	r2, r0
 8009b78:	4b4a      	ldr	r3, [pc, #296]	; (8009ca4 <cppLoop+0x1e9c>)
 8009b7a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009b7c:	2152      	movs	r1, #82	; 0x52
 8009b7e:	483e      	ldr	r0, [pc, #248]	; (8009c78 <cppLoop+0x1e70>)
 8009b80:	f7f8 fb68 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009b84:	2200      	movs	r2, #0
 8009b86:	f04f 31ff 	mov.w	r1, #4294967295
 8009b8a:	483b      	ldr	r0, [pc, #236]	; (8009c78 <cppLoop+0x1e70>)
 8009b8c:	f7f8 fc1e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009b90:	e0f0      	b.n	8009d74 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8009b92:	4840      	ldr	r0, [pc, #256]	; (8009c94 <cppLoop+0x1e8c>)
 8009b94:	f7f8 fafa 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	bf0c      	ite	eq
 8009b9e:	2301      	moveq	r3, #1
 8009ba0:	2300      	movne	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d07f      	beq.n	8009ca8 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f04f 31ff 	mov.w	r1, #4294967295
 8009bae:	4832      	ldr	r0, [pc, #200]	; (8009c78 <cppLoop+0x1e70>)
 8009bb0:	f7f8 fc0c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009bb4:	2064      	movs	r0, #100	; 0x64
 8009bb6:	f000 fa07 	bl	8009fc8 <HAL_Delay>
			if(selector == 0){
 8009bba:	4b37      	ldr	r3, [pc, #220]	; (8009c98 <cppLoop+0x1e90>)
 8009bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d113      	bne.n	8009bec <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 8009bc4:	4b35      	ldr	r3, [pc, #212]	; (8009c9c <cppLoop+0x1e94>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7f6 fcd5 	bl	8000578 <__aeabi_f2d>
 8009bce:	a324      	add	r3, pc, #144	; (adr r3, 8009c60 <cppLoop+0x1e58>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fb70 	bl	80002b8 <__aeabi_dsub>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	4618      	mov	r0, r3
 8009bde:	4621      	mov	r1, r4
 8009be0:	f7f7 f81a 	bl	8000c18 <__aeabi_d2f>
 8009be4:	4602      	mov	r2, r0
 8009be6:	4b2d      	ldr	r3, [pc, #180]	; (8009c9c <cppLoop+0x1e94>)
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	e02b      	b.n	8009c44 <cppLoop+0x1e3c>
			else if(selector == 1){
 8009bec:	4b2a      	ldr	r3, [pc, #168]	; (8009c98 <cppLoop+0x1e90>)
 8009bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d113      	bne.n	8009c1e <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 8009bf6:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <cppLoop+0x1e98>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f6 fcbc 	bl	8000578 <__aeabi_f2d>
 8009c00:	a319      	add	r3, pc, #100	; (adr r3, 8009c68 <cppLoop+0x1e60>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f7f6 fb57 	bl	80002b8 <__aeabi_dsub>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	4621      	mov	r1, r4
 8009c12:	f7f7 f801 	bl	8000c18 <__aeabi_d2f>
 8009c16:	4602      	mov	r2, r0
 8009c18:	4b21      	ldr	r3, [pc, #132]	; (8009ca0 <cppLoop+0x1e98>)
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e012      	b.n	8009c44 <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 8009c1e:	4b21      	ldr	r3, [pc, #132]	; (8009ca4 <cppLoop+0x1e9c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7f6 fca8 	bl	8000578 <__aeabi_f2d>
 8009c28:	a311      	add	r3, pc, #68	; (adr r3, 8009c70 <cppLoop+0x1e68>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fb43 	bl	80002b8 <__aeabi_dsub>
 8009c32:	4603      	mov	r3, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	4618      	mov	r0, r3
 8009c38:	4621      	mov	r1, r4
 8009c3a:	f7f6 ffed 	bl	8000c18 <__aeabi_d2f>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b18      	ldr	r3, [pc, #96]	; (8009ca4 <cppLoop+0x1e9c>)
 8009c42:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009c44:	2152      	movs	r1, #82	; 0x52
 8009c46:	480c      	ldr	r0, [pc, #48]	; (8009c78 <cppLoop+0x1e70>)
 8009c48:	f7f8 fb04 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8009c52:	4809      	ldr	r0, [pc, #36]	; (8009c78 <cppLoop+0x1e70>)
 8009c54:	f7f8 fbba 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009c58:	e08c      	b.n	8009d74 <cppLoop+0x1f6c>
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w
 8009c60:	88e368f1 	.word	0x88e368f1
 8009c64:	3ee4f8b5 	.word	0x3ee4f8b5
 8009c68:	eb1c432d 	.word	0xeb1c432d
 8009c6c:	3f1a36e2 	.word	0x3f1a36e2
 8009c70:	a0b5ed8d 	.word	0xa0b5ed8d
 8009c74:	3eb0c6f7 	.word	0x3eb0c6f7
 8009c78:	200005d0 	.word	0x200005d0
 8009c7c:	2001db64 	.word	0x2001db64
 8009c80:	447a0000 	.word	0x447a0000
 8009c84:	0801a278 	.word	0x0801a278
 8009c88:	42c80000 	.word	0x42c80000
 8009c8c:	461c4000 	.word	0x461c4000
 8009c90:	0801a0bc 	.word	0x0801a0bc
 8009c94:	200005c4 	.word	0x200005c4
 8009c98:	200423da 	.word	0x200423da
 8009c9c:	200423e4 	.word	0x200423e4
 8009ca0:	200423ec 	.word	0x200423ec
 8009ca4:	200423f4 	.word	0x200423f4
		else if(joy_stick.getValue() == JOY_C){
 8009ca8:	4836      	ldr	r0, [pc, #216]	; (8009d84 <cppLoop+0x1f7c>)
 8009caa:	f7f8 fa6f 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	bf0c      	ite	eq
 8009cb4:	2301      	moveq	r3, #1
 8009cb6:	2300      	movne	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d05a      	beq.n	8009d74 <cppLoop+0x1f6c>
			led.LR(-1, 1);
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8009cc4:	4830      	ldr	r0, [pc, #192]	; (8009d88 <cppLoop+0x1f80>)
 8009cc6:	f7f8 fb81 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009cca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009cce:	f000 f97b 	bl	8009fc8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	4b2d      	ldr	r3, [pc, #180]	; (8009d8c <cppLoop+0x1f84>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	492d      	ldr	r1, [pc, #180]	; (8009d90 <cppLoop+0x1f88>)
 8009cdc:	482d      	ldr	r0, [pc, #180]	; (8009d94 <cppLoop+0x1f8c>)
 8009cde:	f7f7 fdcd 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4b2c      	ldr	r3, [pc, #176]	; (8009d98 <cppLoop+0x1f90>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	492c      	ldr	r1, [pc, #176]	; (8009d9c <cppLoop+0x1f94>)
 8009cec:	4829      	ldr	r0, [pc, #164]	; (8009d94 <cppLoop+0x1f8c>)
 8009cee:	f7f7 fdc5 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <cppLoop+0x1f98>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	492a      	ldr	r1, [pc, #168]	; (8009da4 <cppLoop+0x1f9c>)
 8009cfc:	4825      	ldr	r0, [pc, #148]	; (8009d94 <cppLoop+0x1f8c>)
 8009cfe:	f7f7 fdbd 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009d02:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <cppLoop+0x1f84>)
 8009d04:	edd3 7a00 	vldr	s15, [r3]
 8009d08:	4b23      	ldr	r3, [pc, #140]	; (8009d98 <cppLoop+0x1f90>)
 8009d0a:	ed93 7a00 	vldr	s14, [r3]
 8009d0e:	4b24      	ldr	r3, [pc, #144]	; (8009da0 <cppLoop+0x1f98>)
 8009d10:	edd3 6a00 	vldr	s13, [r3]
 8009d14:	eeb0 1a66 	vmov.f32	s2, s13
 8009d18:	eef0 0a47 	vmov.f32	s1, s14
 8009d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8009d20:	4821      	ldr	r0, [pc, #132]	; (8009da8 <cppLoop+0x1fa0>)
 8009d22:	f7fa f829 	bl	8003d78 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009d26:	2200      	movs	r2, #0
 8009d28:	f04f 31ff 	mov.w	r1, #4294967295
 8009d2c:	4816      	ldr	r0, [pc, #88]	; (8009d88 <cppLoop+0x1f80>)
 8009d2e:	f7f8 fb4d 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009d32:	e01f      	b.n	8009d74 <cppLoop+0x1f6c>

	default:
		break;
 8009d34:	bf00      	nop
 8009d36:	e01e      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d38:	bf00      	nop
 8009d3a:	e01c      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d3c:	bf00      	nop
 8009d3e:	e01a      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d40:	bf00      	nop
 8009d42:	e018      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d44:	bf00      	nop
 8009d46:	e016      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d48:	bf00      	nop
 8009d4a:	e014      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d4c:	bf00      	nop
 8009d4e:	e012      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d50:	bf00      	nop
 8009d52:	e010      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d54:	bf00      	nop
 8009d56:	e00e      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d58:	bf00      	nop
 8009d5a:	e00c      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d5c:	bf00      	nop
 8009d5e:	e00a      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d60:	bf00      	nop
 8009d62:	e008      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d64:	bf00      	nop
 8009d66:	e006      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d68:	bf00      	nop
 8009d6a:	e004      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d6c:	bf00      	nop
 8009d6e:	e002      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d70:	bf00      	nop
 8009d72:	e000      	b.n	8009d76 <cppLoop+0x1f6e>
		break;
 8009d74:	bf00      	nop

	}

	HAL_Delay(30);
 8009d76:	201e      	movs	r0, #30
 8009d78:	f000 f926 	bl	8009fc8 <HAL_Delay>

}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d84:	200005c4 	.word	0x200005c4
 8009d88:	200005d0 	.word	0x200005d0
 8009d8c:	200423e4 	.word	0x200423e4
 8009d90:	0801a284 	.word	0x0801a284
 8009d94:	0801a0d8 	.word	0x0801a0d8
 8009d98:	200423ec 	.word	0x200423ec
 8009d9c:	0801a28c 	.word	0x0801a28c
 8009da0:	200423f4 	.word	0x200423f4
 8009da4:	0801a294 	.word	0x0801a294
 8009da8:	2001db64 	.word	0x2001db64

08009dac <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af06      	add	r7, sp, #24
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d142      	bne.n	8009e42 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d13d      	bne.n	8009e42 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009dc6:	4821      	ldr	r0, [pc, #132]	; (8009e4c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009dc8:	f7f8 fb38 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009dcc:	4820      	ldr	r0, [pc, #128]	; (8009e50 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009dce:	f7fb fc5f 	bl	8005690 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009dd2:	4820      	ldr	r0, [pc, #128]	; (8009e54 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009dd4:	f7f8 f9ce 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009dd8:	481f      	ldr	r0, [pc, #124]	; (8009e58 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009dda:	f7fb f86c 	bl	8004eb6 <_ZN5MotorC1Ev>
IMU imu;
 8009dde:	481f      	ldr	r0, [pc, #124]	; (8009e5c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009de0:	f7f7 ffc4 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009de4:	481e      	ldr	r0, [pc, #120]	; (8009e60 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009de6:	f7fa fdb1 	bl	800494c <_ZN6LoggerC1Ev>
Encoder encoder;
 8009dea:	481e      	ldr	r0, [pc, #120]	; (8009e64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009dec:	f7f7 faee 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009df0:	4b1a      	ldr	r3, [pc, #104]	; (8009e5c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009df2:	4a1c      	ldr	r2, [pc, #112]	; (8009e64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009df4:	4918      	ldr	r1, [pc, #96]	; (8009e58 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009df6:	481c      	ldr	r0, [pc, #112]	; (8009e68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009df8:	f7fb ffe0 	bl	8005dbc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009dfc:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009dfe:	4a17      	ldr	r2, [pc, #92]	; (8009e5c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009e00:	4918      	ldr	r1, [pc, #96]	; (8009e64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009e02:	481a      	ldr	r0, [pc, #104]	; (8009e6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009e04:	f7fb f956 	bl	80050b4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009e08:	4819      	ldr	r0, [pc, #100]	; (8009e70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009e0a:	f7f7 f9e3 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009e0e:	4b18      	ldr	r3, [pc, #96]	; (8009e70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	4b12      	ldr	r3, [pc, #72]	; (8009e5c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009e18:	9303      	str	r3, [sp, #12]
 8009e1a:	4b14      	ldr	r3, [pc, #80]	; (8009e6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009e1c:	9302      	str	r3, [sp, #8]
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009e28:	4a08      	ldr	r2, [pc, #32]	; (8009e4c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009e2a:	490b      	ldr	r1, [pc, #44]	; (8009e58 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009e2c:	4811      	ldr	r0, [pc, #68]	; (8009e74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009e2e:	f7f8 fe4d 	bl	8002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009e32:	4a09      	ldr	r2, [pc, #36]	; (8009e58 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009e34:	490a      	ldr	r1, [pc, #40]	; (8009e60 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009e36:	4810      	ldr	r0, [pc, #64]	; (8009e78 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009e38:	f7fb fda6 	bl	8005988 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009e3c:	480f      	ldr	r0, [pc, #60]	; (8009e7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009e3e:	f7fb fab9 	bl	80053b4 <_ZN13PathFollowingC1Ev>
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	200002c0 	.word	0x200002c0
 8009e50:	200005b8 	.word	0x200005b8
 8009e54:	200005c4 	.word	0x200005c4
 8009e58:	200005cc 	.word	0x200005cc
 8009e5c:	200005e0 	.word	0x200005e0
 8009e60:	200005f4 	.word	0x200005f4
 8009e64:	2001dac0 	.word	0x2001dac0
 8009e68:	2001dae0 	.word	0x2001dae0
 8009e6c:	2001db20 	.word	0x2001db20
 8009e70:	2001db60 	.word	0x2001db60
 8009e74:	2001db64 	.word	0x2001db64
 8009e78:	2002aaa4 	.word	0x2002aaa4
 8009e7c:	2002acb0 	.word	0x2002acb0

08009e80 <_GLOBAL__sub_I_line_sensor>:
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e88:	2001      	movs	r0, #1
 8009e8a:	f7ff ff8f 	bl	8009dac <_Z41__static_initialization_and_destruction_0ii>
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ec8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009e96:	e003      	b.n	8009ea0 <LoopCopyDataInit>

08009e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009e98:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009e9e:	3104      	adds	r1, #4

08009ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ea0:	480b      	ldr	r0, [pc, #44]	; (8009ed0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ea2:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ea8:	d3f6      	bcc.n	8009e98 <CopyDataInit>
  ldr  r2, =_sbss
 8009eaa:	4a0b      	ldr	r2, [pc, #44]	; (8009ed8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009eac:	e002      	b.n	8009eb4 <LoopFillZerobss>

08009eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009eb0:	f842 3b04 	str.w	r3, [r2], #4

08009eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009eb4:	4b09      	ldr	r3, [pc, #36]	; (8009edc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009eb8:	d3f9      	bcc.n	8009eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009eba:	f7fd fe83 	bl	8007bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009ebe:	f00b fdd3 	bl	8015a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009ec2:	f7fc f9bd 	bl	8006240 <main>
  bx  lr    
 8009ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009ec8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009ecc:	0801a888 	.word	0x0801a888
  ldr  r0, =_sdata
 8009ed0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ed4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009ed8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009edc:	20046e38 	.word	0x20046e38

08009ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ee0:	e7fe      	b.n	8009ee0 <ADC_IRQHandler>
	...

08009ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ee8:	4b0e      	ldr	r3, [pc, #56]	; (8009f24 <HAL_Init+0x40>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a0d      	ldr	r2, [pc, #52]	; (8009f24 <HAL_Init+0x40>)
 8009eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009ef4:	4b0b      	ldr	r3, [pc, #44]	; (8009f24 <HAL_Init+0x40>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <HAL_Init+0x40>)
 8009efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009f00:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <HAL_Init+0x40>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a07      	ldr	r2, [pc, #28]	; (8009f24 <HAL_Init+0x40>)
 8009f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f0c:	2003      	movs	r0, #3
 8009f0e:	f000 fd51 	bl	800a9b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009f12:	2000      	movs	r0, #0
 8009f14:	f000 f808 	bl	8009f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f18:	f7fd f8a4 	bl	8007064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	40023c00 	.word	0x40023c00

08009f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009f30:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <HAL_InitTick+0x54>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4b12      	ldr	r3, [pc, #72]	; (8009f80 <HAL_InitTick+0x58>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fd69 	bl	800aa1e <HAL_SYSTICK_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e00e      	b.n	8009f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b0f      	cmp	r3, #15
 8009f5a:	d80a      	bhi.n	8009f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	f000 fd31 	bl	800a9ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009f68:	4a06      	ldr	r2, [pc, #24]	; (8009f84 <HAL_InitTick+0x5c>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e000      	b.n	8009f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20000000 	.word	0x20000000
 8009f80:	20000008 	.word	0x20000008
 8009f84:	20000004 	.word	0x20000004

08009f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <HAL_IncTick+0x20>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b06      	ldr	r3, [pc, #24]	; (8009fac <HAL_IncTick+0x24>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	4a04      	ldr	r2, [pc, #16]	; (8009fac <HAL_IncTick+0x24>)
 8009f9a:	6013      	str	r3, [r2, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20000008 	.word	0x20000008
 8009fac:	20044dc0 	.word	0x20044dc0

08009fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8009fb4:	4b03      	ldr	r3, [pc, #12]	; (8009fc4 <HAL_GetTick+0x14>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20044dc0 	.word	0x20044dc0

08009fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009fd0:	f7ff ffee 	bl	8009fb0 <HAL_GetTick>
 8009fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d005      	beq.n	8009fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009fe2:	4b09      	ldr	r3, [pc, #36]	; (800a008 <HAL_Delay+0x40>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009fee:	bf00      	nop
 8009ff0:	f7ff ffde 	bl	8009fb0 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d8f7      	bhi.n	8009ff0 <HAL_Delay+0x28>
  {
  }
}
 800a000:	bf00      	nop
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000008 	.word	0x20000008

0800a00c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e033      	b.n	800a08a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fd f842 	bl	80070b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f003 0310 	and.w	r3, r3, #16
 800a046:	2b00      	cmp	r3, #0
 800a048:	d118      	bne.n	800a07c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a052:	f023 0302 	bic.w	r3, r3, #2
 800a056:	f043 0202 	orr.w	r2, r3, #2
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fa5a 	bl	800a518 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f023 0303 	bic.w	r3, r3, #3
 800a072:	f043 0201 	orr.w	r2, r3, #1
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	641a      	str	r2, [r3, #64]	; 0x40
 800a07a:	e001      	b.n	800a080 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a088:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d101      	bne.n	800a0b2 <HAL_ADC_Start_DMA+0x1e>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e0cc      	b.n	800a24c <HAL_ADC_Start_DMA+0x1b8>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d018      	beq.n	800a0fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 0201 	orr.w	r2, r2, #1
 800a0d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a0d8:	4b5e      	ldr	r3, [pc, #376]	; (800a254 <HAL_ADC_Start_DMA+0x1c0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a5e      	ldr	r2, [pc, #376]	; (800a258 <HAL_ADC_Start_DMA+0x1c4>)
 800a0de:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e2:	0c9a      	lsrs	r2, r3, #18
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	4413      	add	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a0ec:	e002      	b.n	800a0f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1f9      	bne.n	800a0ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b01      	cmp	r3, #1
 800a106:	f040 80a0 	bne.w	800a24a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a112:	f023 0301 	bic.w	r3, r3, #1
 800a116:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a130:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a134:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a148:	d106      	bne.n	800a158 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14e:	f023 0206 	bic.w	r2, r3, #6
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	645a      	str	r2, [r3, #68]	; 0x44
 800a156:	e002      	b.n	800a15e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a166:	4b3d      	ldr	r3, [pc, #244]	; (800a25c <HAL_ADC_Start_DMA+0x1c8>)
 800a168:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	4a3c      	ldr	r2, [pc, #240]	; (800a260 <HAL_ADC_Start_DMA+0x1cc>)
 800a170:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	4a3b      	ldr	r2, [pc, #236]	; (800a264 <HAL_ADC_Start_DMA+0x1d0>)
 800a178:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	4a3a      	ldr	r2, [pc, #232]	; (800a268 <HAL_ADC_Start_DMA+0x1d4>)
 800a180:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a18a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a19a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	334c      	adds	r3, #76	; 0x4c
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f000 fcea 	bl	800ab94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d12a      	bne.n	800a222 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a26      	ldr	r2, [pc, #152]	; (800a26c <HAL_ADC_Start_DMA+0x1d8>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d015      	beq.n	800a202 <HAL_ADC_Start_DMA+0x16e>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a25      	ldr	r2, [pc, #148]	; (800a270 <HAL_ADC_Start_DMA+0x1dc>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d105      	bne.n	800a1ec <HAL_ADC_Start_DMA+0x158>
 800a1e0:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <HAL_ADC_Start_DMA+0x1c8>)
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f003 031f 	and.w	r3, r3, #31
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00a      	beq.n	800a202 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a20      	ldr	r2, [pc, #128]	; (800a274 <HAL_ADC_Start_DMA+0x1e0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d129      	bne.n	800a24a <HAL_ADC_Start_DMA+0x1b6>
 800a1f6:	4b19      	ldr	r3, [pc, #100]	; (800a25c <HAL_ADC_Start_DMA+0x1c8>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f003 031f 	and.w	r3, r3, #31
 800a1fe:	2b0f      	cmp	r3, #15
 800a200:	d823      	bhi.n	800a24a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d11c      	bne.n	800a24a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	e013      	b.n	800a24a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a11      	ldr	r2, [pc, #68]	; (800a26c <HAL_ADC_Start_DMA+0x1d8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d10e      	bne.n	800a24a <HAL_ADC_Start_DMA+0x1b6>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d107      	bne.n	800a24a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a248:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000000 	.word	0x20000000
 800a258:	431bde83 	.word	0x431bde83
 800a25c:	40012300 	.word	0x40012300
 800a260:	0800a711 	.word	0x0800a711
 800a264:	0800a7cb 	.word	0x0800a7cb
 800a268:	0800a7e7 	.word	0x0800a7e7
 800a26c:	40012000 	.word	0x40012000
 800a270:	40012100 	.word	0x40012100
 800a274:	40012200 	.word	0x40012200

0800a278 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_ADC_ConfigChannel+0x1c>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e113      	b.n	800a4f8 <HAL_ADC_ConfigChannel+0x244>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b09      	cmp	r3, #9
 800a2de:	d925      	bls.n	800a32c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68d9      	ldr	r1, [r3, #12]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3b1e      	subs	r3, #30
 800a2f6:	2207      	movs	r2, #7
 800a2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fc:	43da      	mvns	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	400a      	ands	r2, r1
 800a304:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68d9      	ldr	r1, [r3, #12]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	b29b      	uxth	r3, r3
 800a316:	4618      	mov	r0, r3
 800a318:	4603      	mov	r3, r0
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	4403      	add	r3, r0
 800a31e:	3b1e      	subs	r3, #30
 800a320:	409a      	lsls	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	430a      	orrs	r2, r1
 800a328:	60da      	str	r2, [r3, #12]
 800a32a:	e022      	b.n	800a372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6919      	ldr	r1, [r3, #16]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	4613      	mov	r3, r2
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	4413      	add	r3, r2
 800a340:	2207      	movs	r2, #7
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	43da      	mvns	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	400a      	ands	r2, r1
 800a34e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6919      	ldr	r1, [r3, #16]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	4618      	mov	r0, r3
 800a362:	4603      	mov	r3, r0
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	4403      	add	r3, r0
 800a368:	409a      	lsls	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b06      	cmp	r3, #6
 800a378:	d824      	bhi.n	800a3c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	3b05      	subs	r3, #5
 800a38c:	221f      	movs	r2, #31
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	43da      	mvns	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	400a      	ands	r2, r1
 800a39a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	3b05      	subs	r3, #5
 800a3b6:	fa00 f203 	lsl.w	r2, r0, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	635a      	str	r2, [r3, #52]	; 0x34
 800a3c2:	e04c      	b.n	800a45e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	2b0c      	cmp	r3, #12
 800a3ca:	d824      	bhi.n	800a416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	3b23      	subs	r3, #35	; 0x23
 800a3de:	221f      	movs	r2, #31
 800a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e4:	43da      	mvns	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	400a      	ands	r2, r1
 800a3ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	3b23      	subs	r3, #35	; 0x23
 800a408:	fa00 f203 	lsl.w	r2, r0, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	631a      	str	r2, [r3, #48]	; 0x30
 800a414:	e023      	b.n	800a45e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	3b41      	subs	r3, #65	; 0x41
 800a428:	221f      	movs	r2, #31
 800a42a:	fa02 f303 	lsl.w	r3, r2, r3
 800a42e:	43da      	mvns	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	400a      	ands	r2, r1
 800a436:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	b29b      	uxth	r3, r3
 800a444:	4618      	mov	r0, r3
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	3b41      	subs	r3, #65	; 0x41
 800a452:	fa00 f203 	lsl.w	r2, r0, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a45e:	4b29      	ldr	r3, [pc, #164]	; (800a504 <HAL_ADC_ConfigChannel+0x250>)
 800a460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a28      	ldr	r2, [pc, #160]	; (800a508 <HAL_ADC_ConfigChannel+0x254>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d10f      	bne.n	800a48c <HAL_ADC_ConfigChannel+0x1d8>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b12      	cmp	r3, #18
 800a472:	d10b      	bne.n	800a48c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1d      	ldr	r2, [pc, #116]	; (800a508 <HAL_ADC_ConfigChannel+0x254>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d12b      	bne.n	800a4ee <HAL_ADC_ConfigChannel+0x23a>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <HAL_ADC_ConfigChannel+0x258>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d003      	beq.n	800a4a8 <HAL_ADC_ConfigChannel+0x1f4>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b11      	cmp	r3, #17
 800a4a6:	d122      	bne.n	800a4ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a11      	ldr	r2, [pc, #68]	; (800a50c <HAL_ADC_ConfigChannel+0x258>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d111      	bne.n	800a4ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a4ca:	4b11      	ldr	r3, [pc, #68]	; (800a510 <HAL_ADC_ConfigChannel+0x25c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a11      	ldr	r2, [pc, #68]	; (800a514 <HAL_ADC_ConfigChannel+0x260>)
 800a4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d4:	0c9a      	lsrs	r2, r3, #18
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a4e0:	e002      	b.n	800a4e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1f9      	bne.n	800a4e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	40012300 	.word	0x40012300
 800a508:	40012000 	.word	0x40012000
 800a50c:	10000012 	.word	0x10000012
 800a510:	20000000 	.word	0x20000000
 800a514:	431bde83 	.word	0x431bde83

0800a518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a520:	4b79      	ldr	r3, [pc, #484]	; (800a708 <ADC_Init+0x1f0>)
 800a522:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	431a      	orrs	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a54c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6859      	ldr	r1, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	021a      	lsls	r2, r3, #8
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6859      	ldr	r1, [r3, #4]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6899      	ldr	r1, [r3, #8]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	4a58      	ldr	r2, [pc, #352]	; (800a70c <ADC_Init+0x1f4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d022      	beq.n	800a5f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a5be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6899      	ldr	r1, [r3, #8]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a5e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6899      	ldr	r1, [r3, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	609a      	str	r2, [r3, #8]
 800a5f4:	e00f      	b.n	800a616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a614:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0202 	bic.w	r2, r2, #2
 800a624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6899      	ldr	r1, [r3, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	7e1b      	ldrb	r3, [r3, #24]
 800a630:	005a      	lsls	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01b      	beq.n	800a67c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a652:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6859      	ldr	r1, [r3, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	3b01      	subs	r3, #1
 800a670:	035a      	lsls	r2, r3, #13
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	605a      	str	r2, [r3, #4]
 800a67a:	e007      	b.n	800a68c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a68a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	051a      	lsls	r2, r3, #20
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a6c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6899      	ldr	r1, [r3, #8]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6ce:	025a      	lsls	r2, r3, #9
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6899      	ldr	r1, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	029a      	lsls	r2, r3, #10
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	609a      	str	r2, [r3, #8]
}
 800a6fc:	bf00      	nop
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	40012300 	.word	0x40012300
 800a70c:	0f000001 	.word	0x0f000001

0800a710 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a726:	2b00      	cmp	r3, #0
 800a728:	d13c      	bne.n	800a7a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d12b      	bne.n	800a79c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d127      	bne.n	800a79c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a756:	2b00      	cmp	r3, #0
 800a758:	d006      	beq.n	800a768 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a764:	2b00      	cmp	r3, #0
 800a766:	d119      	bne.n	800a79c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f022 0220 	bic.w	r2, r2, #32
 800a776:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a794:	f043 0201 	orr.w	r2, r3, #1
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fd6b 	bl	800a278 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a7a2:	e00e      	b.n	800a7c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fd75 	bl	800a2a0 <HAL_ADC_ErrorCallback>
}
 800a7b6:	e004      	b.n	800a7c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7ff fd57 	bl	800a28c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2240      	movs	r2, #64	; 0x40
 800a7f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fe:	f043 0204 	orr.w	r2, r3, #4
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fd4a 	bl	800a2a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a824:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <__NVIC_SetPriorityGrouping+0x44>)
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a830:	4013      	ands	r3, r2
 800a832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a83c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a846:	4a04      	ldr	r2, [pc, #16]	; (800a858 <__NVIC_SetPriorityGrouping+0x44>)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	60d3      	str	r3, [r2, #12]
}
 800a84c:	bf00      	nop
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	e000ed00 	.word	0xe000ed00

0800a85c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a860:	4b04      	ldr	r3, [pc, #16]	; (800a874 <__NVIC_GetPriorityGrouping+0x18>)
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	0a1b      	lsrs	r3, r3, #8
 800a866:	f003 0307 	and.w	r3, r3, #7
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	e000ed00 	.word	0xe000ed00

0800a878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a886:	2b00      	cmp	r3, #0
 800a888:	db0b      	blt.n	800a8a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	f003 021f 	and.w	r2, r3, #31
 800a890:	4907      	ldr	r1, [pc, #28]	; (800a8b0 <__NVIC_EnableIRQ+0x38>)
 800a892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	2001      	movs	r0, #1
 800a89a:	fa00 f202 	lsl.w	r2, r0, r2
 800a89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a8a2:	bf00      	nop
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	e000e100 	.word	0xe000e100

0800a8b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	6039      	str	r1, [r7, #0]
 800a8be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	db0a      	blt.n	800a8de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	490c      	ldr	r1, [pc, #48]	; (800a900 <__NVIC_SetPriority+0x4c>)
 800a8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8d2:	0112      	lsls	r2, r2, #4
 800a8d4:	b2d2      	uxtb	r2, r2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a8dc:	e00a      	b.n	800a8f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	4908      	ldr	r1, [pc, #32]	; (800a904 <__NVIC_SetPriority+0x50>)
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	f003 030f 	and.w	r3, r3, #15
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	0112      	lsls	r2, r2, #4
 800a8ee:	b2d2      	uxtb	r2, r2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	761a      	strb	r2, [r3, #24]
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	e000e100 	.word	0xe000e100
 800a904:	e000ed00 	.word	0xe000ed00

0800a908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a908:	b480      	push	{r7}
 800a90a:	b089      	sub	sp, #36	; 0x24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	f1c3 0307 	rsb	r3, r3, #7
 800a922:	2b04      	cmp	r3, #4
 800a924:	bf28      	it	cs
 800a926:	2304      	movcs	r3, #4
 800a928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	3304      	adds	r3, #4
 800a92e:	2b06      	cmp	r3, #6
 800a930:	d902      	bls.n	800a938 <NVIC_EncodePriority+0x30>
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	3b03      	subs	r3, #3
 800a936:	e000      	b.n	800a93a <NVIC_EncodePriority+0x32>
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a93c:	f04f 32ff 	mov.w	r2, #4294967295
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	fa02 f303 	lsl.w	r3, r2, r3
 800a946:	43da      	mvns	r2, r3
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	401a      	ands	r2, r3
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a950:	f04f 31ff 	mov.w	r1, #4294967295
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	fa01 f303 	lsl.w	r3, r1, r3
 800a95a:	43d9      	mvns	r1, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a960:	4313      	orrs	r3, r2
         );
}
 800a962:	4618      	mov	r0, r3
 800a964:	3724      	adds	r7, #36	; 0x24
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
	...

0800a970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a980:	d301      	bcc.n	800a986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a982:	2301      	movs	r3, #1
 800a984:	e00f      	b.n	800a9a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a986:	4a0a      	ldr	r2, [pc, #40]	; (800a9b0 <SysTick_Config+0x40>)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a98e:	210f      	movs	r1, #15
 800a990:	f04f 30ff 	mov.w	r0, #4294967295
 800a994:	f7ff ff8e 	bl	800a8b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <SysTick_Config+0x40>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a99e:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <SysTick_Config+0x40>)
 800a9a0:	2207      	movs	r2, #7
 800a9a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	e000e010 	.word	0xe000e010

0800a9b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7ff ff29 	bl	800a814 <__NVIC_SetPriorityGrouping>
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b086      	sub	sp, #24
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
 800a9d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a9dc:	f7ff ff3e 	bl	800a85c <__NVIC_GetPriorityGrouping>
 800a9e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	6978      	ldr	r0, [r7, #20]
 800a9e8:	f7ff ff8e 	bl	800a908 <NVIC_EncodePriority>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff ff5d 	bl	800a8b4 <__NVIC_SetPriority>
}
 800a9fa:	bf00      	nop
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	4603      	mov	r3, r0
 800aa0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff ff31 	bl	800a878 <__NVIC_EnableIRQ>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff ffa2 	bl	800a970 <SysTick_Config>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aa44:	f7ff fab4 	bl	8009fb0 <HAL_GetTick>
 800aa48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e099      	b.n	800ab88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0201 	bic.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa74:	e00f      	b.n	800aa96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa76:	f7ff fa9b 	bl	8009fb0 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	2b05      	cmp	r3, #5
 800aa82:	d908      	bls.n	800aa96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2220      	movs	r2, #32
 800aa88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e078      	b.n	800ab88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e8      	bne.n	800aa76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	4b38      	ldr	r3, [pc, #224]	; (800ab90 <HAL_DMA_Init+0x158>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	2b04      	cmp	r3, #4
 800aaee:	d107      	bne.n	800ab00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f023 0307 	bic.w	r3, r3, #7
 800ab16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	2b04      	cmp	r3, #4
 800ab28:	d117      	bne.n	800ab5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fa9d 	bl	800b07c <DMA_CheckFifoParam>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d008      	beq.n	800ab5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2240      	movs	r2, #64	; 0x40
 800ab4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ab56:	2301      	movs	r3, #1
 800ab58:	e016      	b.n	800ab88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa54 	bl	800b010 <DMA_CalcBaseAndBitshift>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab70:	223f      	movs	r2, #63	; 0x3f
 800ab72:	409a      	lsls	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	f010803f 	.word	0xf010803f

0800ab94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d101      	bne.n	800abba <HAL_DMA_Start_IT+0x26>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e040      	b.n	800ac3c <HAL_DMA_Start_IT+0xa8>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d12f      	bne.n	800ac2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2202      	movs	r2, #2
 800abd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f9e6 	bl	800afb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abec:	223f      	movs	r2, #63	; 0x3f
 800abee:	409a      	lsls	r2, r3
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0216 	orr.w	r2, r2, #22
 800ac02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d007      	beq.n	800ac1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0208 	orr.w	r2, r2, #8
 800ac1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0201 	orr.w	r2, r2, #1
 800ac2a:	601a      	str	r2, [r3, #0]
 800ac2c:	e005      	b.n	800ac3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ac36:	2302      	movs	r3, #2
 800ac38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d004      	beq.n	800ac62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2280      	movs	r2, #128	; 0x80
 800ac5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e00c      	b.n	800ac7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2205      	movs	r2, #5
 800ac66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0201 	bic.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac94:	4b92      	ldr	r3, [pc, #584]	; (800aee0 <HAL_DMA_IRQHandler+0x258>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a92      	ldr	r2, [pc, #584]	; (800aee4 <HAL_DMA_IRQHandler+0x25c>)
 800ac9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9e:	0a9b      	lsrs	r3, r3, #10
 800aca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb2:	2208      	movs	r2, #8
 800acb4:	409a      	lsls	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4013      	ands	r3, r2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d01a      	beq.n	800acf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d013      	beq.n	800acf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0204 	bic.w	r2, r2, #4
 800acda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace0:	2208      	movs	r2, #8
 800ace2:	409a      	lsls	r2, r3
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acec:	f043 0201 	orr.w	r2, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acf8:	2201      	movs	r2, #1
 800acfa:	409a      	lsls	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4013      	ands	r3, r2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d012      	beq.n	800ad2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00b      	beq.n	800ad2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad16:	2201      	movs	r2, #1
 800ad18:	409a      	lsls	r2, r3
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad22:	f043 0202 	orr.w	r2, r3, #2
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad2e:	2204      	movs	r2, #4
 800ad30:	409a      	lsls	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4013      	ands	r3, r2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d012      	beq.n	800ad60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0302 	and.w	r3, r3, #2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4c:	2204      	movs	r2, #4
 800ad4e:	409a      	lsls	r2, r3
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad58:	f043 0204 	orr.w	r2, r3, #4
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad64:	2210      	movs	r2, #16
 800ad66:	409a      	lsls	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d043      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0308 	and.w	r3, r3, #8
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d03c      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad82:	2210      	movs	r2, #16
 800ad84:	409a      	lsls	r2, r3
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d018      	beq.n	800adca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d108      	bne.n	800adb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d024      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	4798      	blx	r3
 800adb6:	e01f      	b.n	800adf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01b      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	4798      	blx	r3
 800adc8:	e016      	b.n	800adf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add4:	2b00      	cmp	r3, #0
 800add6:	d107      	bne.n	800ade8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0208 	bic.w	r2, r2, #8
 800ade6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	2b00      	cmp	r3, #0
 800adee:	d003      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adfc:	2220      	movs	r2, #32
 800adfe:	409a      	lsls	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4013      	ands	r3, r2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 808e 	beq.w	800af26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 8086 	beq.w	800af26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae1e:	2220      	movs	r2, #32
 800ae20:	409a      	lsls	r2, r3
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d136      	bne.n	800aea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0216 	bic.w	r2, r2, #22
 800ae40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	695a      	ldr	r2, [r3, #20]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d103      	bne.n	800ae62 <HAL_DMA_IRQHandler+0x1da>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d007      	beq.n	800ae72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0208 	bic.w	r2, r2, #8
 800ae70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae76:	223f      	movs	r2, #63	; 0x3f
 800ae78:	409a      	lsls	r2, r3
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d07d      	beq.n	800af92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	4798      	blx	r3
        }
        return;
 800ae9e:	e078      	b.n	800af92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d01c      	beq.n	800aee8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d108      	bne.n	800aece <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d030      	beq.n	800af26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	4798      	blx	r3
 800aecc:	e02b      	b.n	800af26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d027      	beq.n	800af26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
 800aede:	e022      	b.n	800af26 <HAL_DMA_IRQHandler+0x29e>
 800aee0:	20000000 	.word	0x20000000
 800aee4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10f      	bne.n	800af16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0210 	bic.w	r2, r2, #16
 800af04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d032      	beq.n	800af94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d022      	beq.n	800af80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2205      	movs	r2, #5
 800af3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0201 	bic.w	r2, r2, #1
 800af50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	3301      	adds	r3, #1
 800af56:	60bb      	str	r3, [r7, #8]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d307      	bcc.n	800af6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1f2      	bne.n	800af52 <HAL_DMA_IRQHandler+0x2ca>
 800af6c:	e000      	b.n	800af70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800af6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d005      	beq.n	800af94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
 800af90:	e000      	b.n	800af94 <HAL_DMA_IRQHandler+0x30c>
        return;
 800af92:	bf00      	nop
    }
  }
}
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop

0800af9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800afd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d108      	bne.n	800aff4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aff2:	e007      	b.n	800b004 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	60da      	str	r2, [r3, #12]
}
 800b004:	bf00      	nop
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	3b10      	subs	r3, #16
 800b020:	4a14      	ldr	r2, [pc, #80]	; (800b074 <DMA_CalcBaseAndBitshift+0x64>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	091b      	lsrs	r3, r3, #4
 800b028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b02a:	4a13      	ldr	r2, [pc, #76]	; (800b078 <DMA_CalcBaseAndBitshift+0x68>)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4413      	add	r3, r2
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d909      	bls.n	800b052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b046:	f023 0303 	bic.w	r3, r3, #3
 800b04a:	1d1a      	adds	r2, r3, #4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	659a      	str	r2, [r3, #88]	; 0x58
 800b050:	e007      	b.n	800b062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	aaaaaaab 	.word	0xaaaaaaab
 800b078:	0801a2d0 	.word	0x0801a2d0

0800b07c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d11f      	bne.n	800b0d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d855      	bhi.n	800b148 <DMA_CheckFifoParam+0xcc>
 800b09c:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <DMA_CheckFifoParam+0x28>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b0b5 	.word	0x0800b0b5
 800b0a8:	0800b0c7 	.word	0x0800b0c7
 800b0ac:	0800b0b5 	.word	0x0800b0b5
 800b0b0:	0800b149 	.word	0x0800b149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d045      	beq.n	800b14c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0c4:	e042      	b.n	800b14c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b0ce:	d13f      	bne.n	800b150 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0d4:	e03c      	b.n	800b150 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0de:	d121      	bne.n	800b124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d836      	bhi.n	800b154 <DMA_CheckFifoParam+0xd8>
 800b0e6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ec <DMA_CheckFifoParam+0x70>)
 800b0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ec:	0800b0fd 	.word	0x0800b0fd
 800b0f0:	0800b103 	.word	0x0800b103
 800b0f4:	0800b0fd 	.word	0x0800b0fd
 800b0f8:	0800b115 	.word	0x0800b115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b100:	e02f      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d024      	beq.n	800b158 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b112:	e021      	b.n	800b158 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b11c:	d11e      	bne.n	800b15c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b122:	e01b      	b.n	800b15c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b02      	cmp	r3, #2
 800b128:	d902      	bls.n	800b130 <DMA_CheckFifoParam+0xb4>
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d003      	beq.n	800b136 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b12e:	e018      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	73fb      	strb	r3, [r7, #15]
      break;
 800b134:	e015      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00e      	beq.n	800b160 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	73fb      	strb	r3, [r7, #15]
      break;
 800b146:	e00b      	b.n	800b160 <DMA_CheckFifoParam+0xe4>
      break;
 800b148:	bf00      	nop
 800b14a:	e00a      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      break;
 800b14c:	bf00      	nop
 800b14e:	e008      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      break;
 800b150:	bf00      	nop
 800b152:	e006      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      break;
 800b154:	bf00      	nop
 800b156:	e004      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      break;
 800b158:	bf00      	nop
 800b15a:	e002      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      break;   
 800b15c:	bf00      	nop
 800b15e:	e000      	b.n	800b162 <DMA_CheckFifoParam+0xe6>
      break;
 800b160:	bf00      	nop
    }
  } 
  
  return status; 
 800b162:	7bfb      	ldrb	r3, [r7, #15]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b170:	b480      	push	{r7}
 800b172:	b089      	sub	sp, #36	; 0x24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b17e:	2300      	movs	r3, #0
 800b180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b182:	2300      	movs	r3, #0
 800b184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b186:	2300      	movs	r3, #0
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	e177      	b.n	800b47c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b18c:	2201      	movs	r2, #1
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	fa02 f303 	lsl.w	r3, r2, r3
 800b194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	4013      	ands	r3, r2
 800b19e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	f040 8166 	bne.w	800b476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d00b      	beq.n	800b1ca <HAL_GPIO_Init+0x5a>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d007      	beq.n	800b1ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b1be:	2b11      	cmp	r3, #17
 800b1c0:	d003      	beq.n	800b1ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2b12      	cmp	r3, #18
 800b1c8:	d130      	bne.n	800b22c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	2203      	movs	r2, #3
 800b1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1da:	43db      	mvns	r3, r3
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b200:	2201      	movs	r2, #1
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	fa02 f303 	lsl.w	r3, r2, r3
 800b208:	43db      	mvns	r3, r3
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	4013      	ands	r3, r2
 800b20e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	091b      	lsrs	r3, r3, #4
 800b216:	f003 0201 	and.w	r2, r3, #1
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	fa02 f303 	lsl.w	r3, r2, r3
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	4313      	orrs	r3, r2
 800b224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	2203      	movs	r2, #3
 800b238:	fa02 f303 	lsl.w	r3, r2, r3
 800b23c:	43db      	mvns	r3, r3
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	4013      	ands	r3, r2
 800b242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	fa02 f303 	lsl.w	r3, r2, r3
 800b250:	69ba      	ldr	r2, [r7, #24]
 800b252:	4313      	orrs	r3, r2
 800b254:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	69ba      	ldr	r2, [r7, #24]
 800b25a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d003      	beq.n	800b26c <HAL_GPIO_Init+0xfc>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	2b12      	cmp	r3, #18
 800b26a:	d123      	bne.n	800b2b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	08da      	lsrs	r2, r3, #3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3208      	adds	r2, #8
 800b274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	f003 0307 	and.w	r3, r3, #7
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	220f      	movs	r2, #15
 800b284:	fa02 f303 	lsl.w	r3, r2, r3
 800b288:	43db      	mvns	r3, r3
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	4013      	ands	r3, r2
 800b28e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	08da      	lsrs	r2, r3, #3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3208      	adds	r2, #8
 800b2ae:	69b9      	ldr	r1, [r7, #24]
 800b2b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	2203      	movs	r2, #3
 800b2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f003 0203 	and.w	r2, r3, #3
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 80c0 	beq.w	800b476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	4b65      	ldr	r3, [pc, #404]	; (800b490 <HAL_GPIO_Init+0x320>)
 800b2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2fe:	4a64      	ldr	r2, [pc, #400]	; (800b490 <HAL_GPIO_Init+0x320>)
 800b300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b304:	6453      	str	r3, [r2, #68]	; 0x44
 800b306:	4b62      	ldr	r3, [pc, #392]	; (800b490 <HAL_GPIO_Init+0x320>)
 800b308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b312:	4a60      	ldr	r2, [pc, #384]	; (800b494 <HAL_GPIO_Init+0x324>)
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	089b      	lsrs	r3, r3, #2
 800b318:	3302      	adds	r3, #2
 800b31a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b31e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	220f      	movs	r2, #15
 800b32a:	fa02 f303 	lsl.w	r3, r2, r3
 800b32e:	43db      	mvns	r3, r3
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	4013      	ands	r3, r2
 800b334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a57      	ldr	r2, [pc, #348]	; (800b498 <HAL_GPIO_Init+0x328>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d037      	beq.n	800b3ae <HAL_GPIO_Init+0x23e>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a56      	ldr	r2, [pc, #344]	; (800b49c <HAL_GPIO_Init+0x32c>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d031      	beq.n	800b3aa <HAL_GPIO_Init+0x23a>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a55      	ldr	r2, [pc, #340]	; (800b4a0 <HAL_GPIO_Init+0x330>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d02b      	beq.n	800b3a6 <HAL_GPIO_Init+0x236>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a54      	ldr	r2, [pc, #336]	; (800b4a4 <HAL_GPIO_Init+0x334>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d025      	beq.n	800b3a2 <HAL_GPIO_Init+0x232>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a53      	ldr	r2, [pc, #332]	; (800b4a8 <HAL_GPIO_Init+0x338>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d01f      	beq.n	800b39e <HAL_GPIO_Init+0x22e>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a52      	ldr	r2, [pc, #328]	; (800b4ac <HAL_GPIO_Init+0x33c>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d019      	beq.n	800b39a <HAL_GPIO_Init+0x22a>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a51      	ldr	r2, [pc, #324]	; (800b4b0 <HAL_GPIO_Init+0x340>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d013      	beq.n	800b396 <HAL_GPIO_Init+0x226>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a50      	ldr	r2, [pc, #320]	; (800b4b4 <HAL_GPIO_Init+0x344>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00d      	beq.n	800b392 <HAL_GPIO_Init+0x222>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a4f      	ldr	r2, [pc, #316]	; (800b4b8 <HAL_GPIO_Init+0x348>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d007      	beq.n	800b38e <HAL_GPIO_Init+0x21e>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a4e      	ldr	r2, [pc, #312]	; (800b4bc <HAL_GPIO_Init+0x34c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d101      	bne.n	800b38a <HAL_GPIO_Init+0x21a>
 800b386:	2309      	movs	r3, #9
 800b388:	e012      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b38a:	230a      	movs	r3, #10
 800b38c:	e010      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b38e:	2308      	movs	r3, #8
 800b390:	e00e      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b392:	2307      	movs	r3, #7
 800b394:	e00c      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b396:	2306      	movs	r3, #6
 800b398:	e00a      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b39a:	2305      	movs	r3, #5
 800b39c:	e008      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b39e:	2304      	movs	r3, #4
 800b3a0:	e006      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e004      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	e002      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e000      	b.n	800b3b0 <HAL_GPIO_Init+0x240>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	f002 0203 	and.w	r2, r2, #3
 800b3b6:	0092      	lsls	r2, r2, #2
 800b3b8:	4093      	lsls	r3, r2
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b3c0:	4934      	ldr	r1, [pc, #208]	; (800b494 <HAL_GPIO_Init+0x324>)
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	089b      	lsrs	r3, r3, #2
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	69ba      	ldr	r2, [r7, #24]
 800b3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b3ce:	4b3c      	ldr	r3, [pc, #240]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	43db      	mvns	r3, r3
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b3f2:	4a33      	ldr	r2, [pc, #204]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b3f8:	4b31      	ldr	r3, [pc, #196]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	43db      	mvns	r3, r3
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	4013      	ands	r3, r2
 800b406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	4313      	orrs	r3, r2
 800b41a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b41c:	4a28      	ldr	r2, [pc, #160]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b422:	4b27      	ldr	r3, [pc, #156]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	43db      	mvns	r3, r3
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	4013      	ands	r3, r2
 800b430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	4313      	orrs	r3, r2
 800b444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b446:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b44c:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	43db      	mvns	r3, r3
 800b456:	69ba      	ldr	r2, [r7, #24]
 800b458:	4013      	ands	r3, r2
 800b45a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b468:	69ba      	ldr	r2, [r7, #24]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b470:	4a13      	ldr	r2, [pc, #76]	; (800b4c0 <HAL_GPIO_Init+0x350>)
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	3301      	adds	r3, #1
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	2b0f      	cmp	r3, #15
 800b480:	f67f ae84 	bls.w	800b18c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b484:	bf00      	nop
 800b486:	3724      	adds	r7, #36	; 0x24
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	40023800 	.word	0x40023800
 800b494:	40013800 	.word	0x40013800
 800b498:	40020000 	.word	0x40020000
 800b49c:	40020400 	.word	0x40020400
 800b4a0:	40020800 	.word	0x40020800
 800b4a4:	40020c00 	.word	0x40020c00
 800b4a8:	40021000 	.word	0x40021000
 800b4ac:	40021400 	.word	0x40021400
 800b4b0:	40021800 	.word	0x40021800
 800b4b4:	40021c00 	.word	0x40021c00
 800b4b8:	40022000 	.word	0x40022000
 800b4bc:	40022400 	.word	0x40022400
 800b4c0:	40013c00 	.word	0x40013c00

0800b4c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691a      	ldr	r2, [r3, #16]
 800b4d4:	887b      	ldrh	r3, [r7, #2]
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	73fb      	strb	r3, [r7, #15]
 800b4e0:	e001      	b.n	800b4e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	807b      	strh	r3, [r7, #2]
 800b500:	4613      	mov	r3, r2
 800b502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b504:	787b      	ldrb	r3, [r7, #1]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b50a:	887a      	ldrh	r2, [r7, #2]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b510:	e003      	b.n	800b51a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b512:	887b      	ldrh	r3, [r7, #2]
 800b514:	041a      	lsls	r2, r3, #16
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	619a      	str	r2, [r3, #24]
}
 800b51a:	bf00      	nop
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
	...

0800b528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e11f      	b.n	800b77a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7fb fe62 	bl	8007218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2224      	movs	r2, #36	; 0x24
 800b558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f022 0201 	bic.w	r2, r2, #1
 800b56a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b57a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b58a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b58c:	f001 f96e 	bl	800c86c <HAL_RCC_GetPCLK1Freq>
 800b590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	4a7b      	ldr	r2, [pc, #492]	; (800b784 <HAL_I2C_Init+0x25c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d807      	bhi.n	800b5ac <HAL_I2C_Init+0x84>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4a7a      	ldr	r2, [pc, #488]	; (800b788 <HAL_I2C_Init+0x260>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	bf94      	ite	ls
 800b5a4:	2301      	movls	r3, #1
 800b5a6:	2300      	movhi	r3, #0
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	e006      	b.n	800b5ba <HAL_I2C_Init+0x92>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4a77      	ldr	r2, [pc, #476]	; (800b78c <HAL_I2C_Init+0x264>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	bf94      	ite	ls
 800b5b4:	2301      	movls	r3, #1
 800b5b6:	2300      	movhi	r3, #0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e0db      	b.n	800b77a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4a72      	ldr	r2, [pc, #456]	; (800b790 <HAL_I2C_Init+0x268>)
 800b5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ca:	0c9b      	lsrs	r3, r3, #18
 800b5cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4a64      	ldr	r2, [pc, #400]	; (800b784 <HAL_I2C_Init+0x25c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d802      	bhi.n	800b5fc <HAL_I2C_Init+0xd4>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	e009      	b.n	800b610 <HAL_I2C_Init+0xe8>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b602:	fb02 f303 	mul.w	r3, r2, r3
 800b606:	4a63      	ldr	r2, [pc, #396]	; (800b794 <HAL_I2C_Init+0x26c>)
 800b608:	fba2 2303 	umull	r2, r3, r2, r3
 800b60c:	099b      	lsrs	r3, r3, #6
 800b60e:	3301      	adds	r3, #1
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6812      	ldr	r2, [r2, #0]
 800b614:	430b      	orrs	r3, r1
 800b616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	4956      	ldr	r1, [pc, #344]	; (800b784 <HAL_I2C_Init+0x25c>)
 800b62c:	428b      	cmp	r3, r1
 800b62e:	d80d      	bhi.n	800b64c <HAL_I2C_Init+0x124>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	1e59      	subs	r1, r3, #1
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b63e:	3301      	adds	r3, #1
 800b640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b644:	2b04      	cmp	r3, #4
 800b646:	bf38      	it	cc
 800b648:	2304      	movcc	r3, #4
 800b64a:	e04f      	b.n	800b6ec <HAL_I2C_Init+0x1c4>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d111      	bne.n	800b678 <HAL_I2C_Init+0x150>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	1e58      	subs	r0, r3, #1
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6859      	ldr	r1, [r3, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	440b      	add	r3, r1
 800b662:	fbb0 f3f3 	udiv	r3, r0, r3
 800b666:	3301      	adds	r3, #1
 800b668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bf0c      	ite	eq
 800b670:	2301      	moveq	r3, #1
 800b672:	2300      	movne	r3, #0
 800b674:	b2db      	uxtb	r3, r3
 800b676:	e012      	b.n	800b69e <HAL_I2C_Init+0x176>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	1e58      	subs	r0, r3, #1
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6859      	ldr	r1, [r3, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	0099      	lsls	r1, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b68e:	3301      	adds	r3, #1
 800b690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b694:	2b00      	cmp	r3, #0
 800b696:	bf0c      	ite	eq
 800b698:	2301      	moveq	r3, #1
 800b69a:	2300      	movne	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <HAL_I2C_Init+0x17e>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e022      	b.n	800b6ec <HAL_I2C_Init+0x1c4>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10e      	bne.n	800b6cc <HAL_I2C_Init+0x1a4>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1e58      	subs	r0, r3, #1
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6859      	ldr	r1, [r3, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	440b      	add	r3, r1
 800b6bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6ca:	e00f      	b.n	800b6ec <HAL_I2C_Init+0x1c4>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	1e58      	subs	r0, r3, #1
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6859      	ldr	r1, [r3, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	440b      	add	r3, r1
 800b6da:	0099      	lsls	r1, r3, #2
 800b6dc:	440b      	add	r3, r1
 800b6de:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	6809      	ldr	r1, [r1, #0]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	69da      	ldr	r2, [r3, #28]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	431a      	orrs	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	430a      	orrs	r2, r1
 800b70e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b71a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6911      	ldr	r1, [r2, #16]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	68d2      	ldr	r2, [r2, #12]
 800b726:	4311      	orrs	r1, r2
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	6812      	ldr	r2, [r2, #0]
 800b72c:	430b      	orrs	r3, r1
 800b72e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	695a      	ldr	r2, [r3, #20]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f042 0201 	orr.w	r2, r2, #1
 800b75a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2220      	movs	r2, #32
 800b766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	000186a0 	.word	0x000186a0
 800b788:	001e847f 	.word	0x001e847f
 800b78c:	003d08ff 	.word	0x003d08ff
 800b790:	431bde83 	.word	0x431bde83
 800b794:	10624dd3 	.word	0x10624dd3

0800b798 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af02      	add	r7, sp, #8
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	817b      	strh	r3, [r7, #10]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7ac:	f7fe fc00 	bl	8009fb0 <HAL_GetTick>
 800b7b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	f040 80e0 	bne.w	800b980 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	2319      	movs	r3, #25
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4970      	ldr	r1, [pc, #448]	; (800b98c <HAL_I2C_Master_Transmit+0x1f4>)
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 fc58 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d001      	beq.n	800b7da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e0d3      	b.n	800b982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d101      	bne.n	800b7e8 <HAL_I2C_Master_Transmit+0x50>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	e0cc      	b.n	800b982 <HAL_I2C_Master_Transmit+0x1ea>
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d007      	beq.n	800b80e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f042 0201 	orr.w	r2, r2, #1
 800b80c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b81c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2221      	movs	r2, #33	; 0x21
 800b822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2210      	movs	r2, #16
 800b82a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	893a      	ldrh	r2, [r7, #8]
 800b83e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b844:	b29a      	uxth	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4a50      	ldr	r2, [pc, #320]	; (800b990 <HAL_I2C_Master_Transmit+0x1f8>)
 800b84e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b850:	8979      	ldrh	r1, [r7, #10]
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	6a3a      	ldr	r2, [r7, #32]
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 fac2 	bl	800bde0 <I2C_MasterRequestWrite>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e08d      	b.n	800b982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b866:	2300      	movs	r3, #0
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	613b      	str	r3, [r7, #16]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b87c:	e066      	b.n	800b94c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	6a39      	ldr	r1, [r7, #32]
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 fcd2 	bl	800c22c <I2C_WaitOnTXEFlagUntilTimeout>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00d      	beq.n	800b8aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b892:	2b04      	cmp	r3, #4
 800b894:	d107      	bne.n	800b8a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e06b      	b.n	800b982 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	781a      	ldrb	r2, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	1c5a      	adds	r2, r3, #1
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	d11b      	bne.n	800b920 <HAL_I2C_Master_Transmit+0x188>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d017      	beq.n	800b920 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	3b01      	subs	r3, #1
 800b90e:	b29a      	uxth	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	6a39      	ldr	r1, [r7, #32]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 fcc2 	bl	800c2ae <I2C_WaitOnBTFFlagUntilTimeout>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00d      	beq.n	800b94c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b934:	2b04      	cmp	r3, #4
 800b936:	d107      	bne.n	800b948 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b946:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e01a      	b.n	800b982 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	d194      	bne.n	800b87e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2220      	movs	r2, #32
 800b968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	e000      	b.n	800b982 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b980:	2302      	movs	r3, #2
  }
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	00100002 	.word	0x00100002
 800b990:	ffff0000 	.word	0xffff0000

0800b994 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08c      	sub	sp, #48	; 0x30
 800b998:	af02      	add	r7, sp, #8
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	607a      	str	r2, [r7, #4]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	817b      	strh	r3, [r7, #10]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b9a8:	f7fe fb02 	bl	8009fb0 <HAL_GetTick>
 800b9ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b20      	cmp	r3, #32
 800b9b8:	f040 820b 	bne.w	800bdd2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	2319      	movs	r3, #25
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	497c      	ldr	r1, [pc, #496]	; (800bbb8 <HAL_I2C_Master_Receive+0x224>)
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 fb5a 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e1fe      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d101      	bne.n	800b9e4 <HAL_I2C_Master_Receive+0x50>
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	e1f7      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d007      	beq.n	800ba0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f042 0201 	orr.w	r2, r2, #1
 800ba08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2222      	movs	r2, #34	; 0x22
 800ba1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2210      	movs	r2, #16
 800ba26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	893a      	ldrh	r2, [r7, #8]
 800ba3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	4a5c      	ldr	r2, [pc, #368]	; (800bbbc <HAL_I2C_Master_Receive+0x228>)
 800ba4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ba4c:	8979      	ldrh	r1, [r7, #10]
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 fa46 	bl	800bee4 <I2C_MasterRequestRead>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e1b8      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d113      	bne.n	800ba92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	623b      	str	r3, [r7, #32]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	623b      	str	r3, [r7, #32]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	623b      	str	r3, [r7, #32]
 800ba7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	e18c      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d11b      	bne.n	800bad2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baaa:	2300      	movs	r3, #0
 800baac:	61fb      	str	r3, [r7, #28]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	695b      	ldr	r3, [r3, #20]
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	61fb      	str	r3, [r7, #28]
 800babe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	e16c      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d11b      	bne.n	800bb12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bae8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bafa:	2300      	movs	r3, #0
 800bafc:	61bb      	str	r3, [r7, #24]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	61bb      	str	r3, [r7, #24]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	61bb      	str	r3, [r7, #24]
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	e14c      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bb38:	e138      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	f200 80f1 	bhi.w	800bd26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d123      	bne.n	800bb94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fbed 	bl	800c330 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e139      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	691a      	ldr	r2, [r3, #16]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb92:	e10b      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d14e      	bne.n	800bc3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	2200      	movs	r2, #0
 800bba4:	4906      	ldr	r1, [pc, #24]	; (800bbc0 <HAL_I2C_Master_Receive+0x22c>)
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 fa6a 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d008      	beq.n	800bbc4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e10e      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
 800bbb6:	bf00      	nop
 800bbb8:	00100002 	.word	0x00100002
 800bbbc:	ffff0000 	.word	0xffff0000
 800bbc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	691a      	ldr	r2, [r3, #16]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	691a      	ldr	r2, [r3, #16]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	b2d2      	uxtb	r2, r2
 800bc12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc22:	3b01      	subs	r3, #1
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc38:	e0b8      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	2200      	movs	r2, #0
 800bc42:	4966      	ldr	r1, [pc, #408]	; (800bddc <HAL_I2C_Master_Receive+0x448>)
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 fa1b 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e0bf      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	691a      	ldr	r2, [r3, #16]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	b2d2      	uxtb	r2, r2
 800bc70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc80:	3b01      	subs	r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	494f      	ldr	r1, [pc, #316]	; (800bddc <HAL_I2C_Master_Receive+0x448>)
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 f9ed 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e091      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	691a      	ldr	r2, [r3, #16]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	b2d2      	uxtb	r2, r2
 800bccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	3b01      	subs	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	691a      	ldr	r2, [r3, #16]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd24:	e042      	b.n	800bdac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 fb00 	bl	800c330 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e04c      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	691a      	ldr	r2, [r3, #16]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd56:	3b01      	subs	r3, #1
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	3b01      	subs	r3, #1
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	f003 0304 	and.w	r3, r3, #4
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d118      	bne.n	800bdac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	691a      	ldr	r2, [r3, #16]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	b2d2      	uxtb	r2, r2
 800bd86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd96:	3b01      	subs	r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f47f aec2 	bne.w	800bb3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	e000      	b.n	800bdd4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bdd2:	2302      	movs	r3, #2
  }
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3728      	adds	r7, #40	; 0x28
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	00010004 	.word	0x00010004

0800bde0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af02      	add	r7, sp, #8
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	607a      	str	r2, [r7, #4]
 800bdea:	603b      	str	r3, [r7, #0]
 800bdec:	460b      	mov	r3, r1
 800bdee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d006      	beq.n	800be0a <I2C_MasterRequestWrite+0x2a>
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d003      	beq.n	800be0a <I2C_MasterRequestWrite+0x2a>
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be08:	d108      	bne.n	800be1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	e00b      	b.n	800be34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be20:	2b12      	cmp	r3, #18
 800be22:	d107      	bne.n	800be34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 f91d 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00d      	beq.n	800be68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be5a:	d103      	bne.n	800be64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e035      	b.n	800bed4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be70:	d108      	bne.n	800be84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be72:	897b      	ldrh	r3, [r7, #10]
 800be74:	b2db      	uxtb	r3, r3
 800be76:	461a      	mov	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800be80:	611a      	str	r2, [r3, #16]
 800be82:	e01b      	b.n	800bebc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800be84:	897b      	ldrh	r3, [r7, #10]
 800be86:	11db      	asrs	r3, r3, #7
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 0306 	and.w	r3, r3, #6
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	f063 030f 	orn	r3, r3, #15
 800be94:	b2da      	uxtb	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	490e      	ldr	r1, [pc, #56]	; (800bedc <I2C_MasterRequestWrite+0xfc>)
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f943 	bl	800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e010      	b.n	800bed4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800beb2:	897b      	ldrh	r3, [r7, #10]
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	4907      	ldr	r1, [pc, #28]	; (800bee0 <I2C_MasterRequestWrite+0x100>)
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 f933 	bl	800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e000      	b.n	800bed4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3718      	adds	r7, #24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	00010008 	.word	0x00010008
 800bee0:	00010002 	.word	0x00010002

0800bee4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	607a      	str	r2, [r7, #4]
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	460b      	mov	r3, r1
 800bef2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d006      	beq.n	800bf1e <I2C_MasterRequestRead+0x3a>
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d003      	beq.n	800bf1e <I2C_MasterRequestRead+0x3a>
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf1c:	d108      	bne.n	800bf30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e00b      	b.n	800bf48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf34:	2b11      	cmp	r3, #17
 800bf36:	d107      	bne.n	800bf48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f893 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00d      	beq.n	800bf7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf6e:	d103      	bne.n	800bf78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e079      	b.n	800c070 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf84:	d108      	bne.n	800bf98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bf86:	897b      	ldrh	r3, [r7, #10]
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	f043 0301 	orr.w	r3, r3, #1
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	611a      	str	r2, [r3, #16]
 800bf96:	e05f      	b.n	800c058 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bf98:	897b      	ldrh	r3, [r7, #10]
 800bf9a:	11db      	asrs	r3, r3, #7
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0306 	and.w	r3, r3, #6
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	f063 030f 	orn	r3, r3, #15
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	4930      	ldr	r1, [pc, #192]	; (800c078 <I2C_MasterRequestRead+0x194>)
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f8b9 	bl	800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e054      	b.n	800c070 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bfc6:	897b      	ldrh	r3, [r7, #10]
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	4929      	ldr	r1, [pc, #164]	; (800c07c <I2C_MasterRequestRead+0x198>)
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 f8a9 	bl	800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e044      	b.n	800c070 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	613b      	str	r3, [r7, #16]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	613b      	str	r3, [r7, #16]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	613b      	str	r3, [r7, #16]
 800bffa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c00a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 f831 	bl	800c080 <I2C_WaitOnFlagUntilTimeout>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00d      	beq.n	800c040 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c032:	d103      	bne.n	800c03c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c03a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e017      	b.n	800c070 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c040:	897b      	ldrh	r3, [r7, #10]
 800c042:	11db      	asrs	r3, r3, #7
 800c044:	b2db      	uxtb	r3, r3
 800c046:	f003 0306 	and.w	r3, r3, #6
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f063 030e 	orn	r3, r3, #14
 800c050:	b2da      	uxtb	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	4907      	ldr	r1, [pc, #28]	; (800c07c <I2C_MasterRequestRead+0x198>)
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 f865 	bl	800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e000      	b.n	800c070 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	00010008 	.word	0x00010008
 800c07c:	00010002 	.word	0x00010002

0800c080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	4613      	mov	r3, r2
 800c08e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c090:	e025      	b.n	800c0de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d021      	beq.n	800c0de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c09a:	f7fd ff89 	bl	8009fb0 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d302      	bcc.n	800c0b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d116      	bne.n	800c0de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	f043 0220 	orr.w	r2, r3, #32
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e023      	b.n	800c126 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	0c1b      	lsrs	r3, r3, #16
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d10d      	bne.n	800c104 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	43da      	mvns	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	bf0c      	ite	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	461a      	mov	r2, r3
 800c102:	e00c      	b.n	800c11e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	43da      	mvns	r2, r3
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	4013      	ands	r3, r2
 800c110:	b29b      	uxth	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	bf0c      	ite	eq
 800c116:	2301      	moveq	r3, #1
 800c118:	2300      	movne	r3, #0
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	461a      	mov	r2, r3
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	429a      	cmp	r2, r3
 800c122:	d0b6      	beq.n	800c092 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	607a      	str	r2, [r7, #4]
 800c13a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c13c:	e051      	b.n	800c1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	695b      	ldr	r3, [r3, #20]
 800c144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c14c:	d123      	bne.n	800c196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c15c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c166:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2220      	movs	r2, #32
 800c172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	f043 0204 	orr.w	r2, r3, #4
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e046      	b.n	800c224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19c:	d021      	beq.n	800c1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c19e:	f7fd ff07 	bl	8009fb0 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d302      	bcc.n	800c1b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d116      	bne.n	800c1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ce:	f043 0220 	orr.w	r2, r3, #32
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e020      	b.n	800c224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	0c1b      	lsrs	r3, r3, #16
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d10c      	bne.n	800c206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	43da      	mvns	r2, r3
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bf14      	ite	ne
 800c1fe:	2301      	movne	r3, #1
 800c200:	2300      	moveq	r3, #0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	e00b      	b.n	800c21e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	43da      	mvns	r2, r3
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	4013      	ands	r3, r2
 800c212:	b29b      	uxth	r3, r3
 800c214:	2b00      	cmp	r3, #0
 800c216:	bf14      	ite	ne
 800c218:	2301      	movne	r3, #1
 800c21a:	2300      	moveq	r3, #0
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d18d      	bne.n	800c13e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c238:	e02d      	b.n	800c296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 f8ce 	bl	800c3dc <I2C_IsAcknowledgeFailed>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e02d      	b.n	800c2a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c250:	d021      	beq.n	800c296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c252:	f7fd fead 	bl	8009fb0 <HAL_GetTick>
 800c256:	4602      	mov	r2, r0
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d302      	bcc.n	800c268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d116      	bne.n	800c296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2220      	movs	r2, #32
 800c272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	f043 0220 	orr.w	r2, r3, #32
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e007      	b.n	800c2a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a0:	2b80      	cmp	r3, #128	; 0x80
 800c2a2:	d1ca      	bne.n	800c23a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2ba:	e02d      	b.n	800c318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f000 f88d 	bl	800c3dc <I2C_IsAcknowledgeFailed>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e02d      	b.n	800c328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d021      	beq.n	800c318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2d4:	f7fd fe6c 	bl	8009fb0 <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d302      	bcc.n	800c2ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d116      	bne.n	800c318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c304:	f043 0220 	orr.w	r2, r3, #32
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	e007      	b.n	800c328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	f003 0304 	and.w	r3, r3, #4
 800c322:	2b04      	cmp	r3, #4
 800c324:	d1ca      	bne.n	800c2bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c33c:	e042      	b.n	800c3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b10      	cmp	r3, #16
 800c34a:	d119      	bne.n	800c380 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f06f 0210 	mvn.w	r2, #16
 800c354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2220      	movs	r2, #32
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e029      	b.n	800c3d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c380:	f7fd fe16 	bl	8009fb0 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d302      	bcc.n	800c396 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d116      	bne.n	800c3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b0:	f043 0220 	orr.w	r2, r3, #32
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e007      	b.n	800c3d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	695b      	ldr	r3, [r3, #20]
 800c3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ce:	2b40      	cmp	r3, #64	; 0x40
 800c3d0:	d1b5      	bne.n	800c33e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3f2:	d11b      	bne.n	800c42c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c3fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2220      	movs	r2, #32
 800c408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	f043 0204 	orr.w	r2, r3, #4
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
	...

0800c43c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c446:	2300      	movs	r3, #0
 800c448:	603b      	str	r3, [r7, #0]
 800c44a:	4b20      	ldr	r3, [pc, #128]	; (800c4cc <HAL_PWREx_EnableOverDrive+0x90>)
 800c44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44e:	4a1f      	ldr	r2, [pc, #124]	; (800c4cc <HAL_PWREx_EnableOverDrive+0x90>)
 800c450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c454:	6413      	str	r3, [r2, #64]	; 0x40
 800c456:	4b1d      	ldr	r3, [pc, #116]	; (800c4cc <HAL_PWREx_EnableOverDrive+0x90>)
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c462:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x94>)
 800c464:	2201      	movs	r2, #1
 800c466:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c468:	f7fd fda2 	bl	8009fb0 <HAL_GetTick>
 800c46c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c46e:	e009      	b.n	800c484 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c470:	f7fd fd9e 	bl	8009fb0 <HAL_GetTick>
 800c474:	4602      	mov	r2, r0
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c47e:	d901      	bls.n	800c484 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	e01f      	b.n	800c4c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c484:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c490:	d1ee      	bne.n	800c470 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c492:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c494:	2201      	movs	r2, #1
 800c496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c498:	f7fd fd8a 	bl	8009fb0 <HAL_GetTick>
 800c49c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c49e:	e009      	b.n	800c4b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4a0:	f7fd fd86 	bl	8009fb0 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4ae:	d901      	bls.n	800c4b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	e007      	b.n	800c4c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4b4:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4c0:	d1ee      	bne.n	800c4a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40023800 	.word	0x40023800
 800c4d0:	420e0040 	.word	0x420e0040
 800c4d4:	40007000 	.word	0x40007000
 800c4d8:	420e0044 	.word	0x420e0044

0800c4dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e0cc      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c4f0:	4b68      	ldr	r3, [pc, #416]	; (800c694 <HAL_RCC_ClockConfig+0x1b8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 030f 	and.w	r3, r3, #15
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d90c      	bls.n	800c518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4fe:	4b65      	ldr	r3, [pc, #404]	; (800c694 <HAL_RCC_ClockConfig+0x1b8>)
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	b2d2      	uxtb	r2, r2
 800c504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c506:	4b63      	ldr	r3, [pc, #396]	; (800c694 <HAL_RCC_ClockConfig+0x1b8>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 030f 	and.w	r3, r3, #15
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d001      	beq.n	800c518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	e0b8      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0302 	and.w	r3, r3, #2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d020      	beq.n	800c566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0304 	and.w	r3, r3, #4
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d005      	beq.n	800c53c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c530:	4b59      	ldr	r3, [pc, #356]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	4a58      	ldr	r2, [pc, #352]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c53a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0308 	and.w	r3, r3, #8
 800c544:	2b00      	cmp	r3, #0
 800c546:	d005      	beq.n	800c554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c548:	4b53      	ldr	r3, [pc, #332]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	4a52      	ldr	r2, [pc, #328]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c54e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c554:	4b50      	ldr	r3, [pc, #320]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	494d      	ldr	r1, [pc, #308]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c562:	4313      	orrs	r3, r2
 800c564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d044      	beq.n	800c5fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d107      	bne.n	800c58a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c57a:	4b47      	ldr	r3, [pc, #284]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d119      	bne.n	800c5ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e07f      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d003      	beq.n	800c59a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c596:	2b03      	cmp	r3, #3
 800c598:	d107      	bne.n	800c5aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c59a:	4b3f      	ldr	r3, [pc, #252]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d109      	bne.n	800c5ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e06f      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5aa:	4b3b      	ldr	r3, [pc, #236]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e067      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c5ba:	4b37      	ldr	r3, [pc, #220]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f023 0203 	bic.w	r2, r3, #3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	4934      	ldr	r1, [pc, #208]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c5cc:	f7fd fcf0 	bl	8009fb0 <HAL_GetTick>
 800c5d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5d2:	e00a      	b.n	800c5ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5d4:	f7fd fcec 	bl	8009fb0 <HAL_GetTick>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d901      	bls.n	800c5ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e04f      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5ea:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f003 020c 	and.w	r2, r3, #12
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d1eb      	bne.n	800c5d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c5fc:	4b25      	ldr	r3, [pc, #148]	; (800c694 <HAL_RCC_ClockConfig+0x1b8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 030f 	and.w	r3, r3, #15
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	d20c      	bcs.n	800c624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c60a:	4b22      	ldr	r3, [pc, #136]	; (800c694 <HAL_RCC_ClockConfig+0x1b8>)
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	b2d2      	uxtb	r2, r2
 800c610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c612:	4b20      	ldr	r3, [pc, #128]	; (800c694 <HAL_RCC_ClockConfig+0x1b8>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 030f 	and.w	r3, r3, #15
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d001      	beq.n	800c624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e032      	b.n	800c68a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d008      	beq.n	800c642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c630:	4b19      	ldr	r3, [pc, #100]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	4916      	ldr	r1, [pc, #88]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0308 	and.w	r3, r3, #8
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d009      	beq.n	800c662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c64e:	4b12      	ldr	r3, [pc, #72]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	490e      	ldr	r1, [pc, #56]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c662:	f000 f821 	bl	800c6a8 <HAL_RCC_GetSysClockFreq>
 800c666:	4601      	mov	r1, r0
 800c668:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <HAL_RCC_ClockConfig+0x1bc>)
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	091b      	lsrs	r3, r3, #4
 800c66e:	f003 030f 	and.w	r3, r3, #15
 800c672:	4a0a      	ldr	r2, [pc, #40]	; (800c69c <HAL_RCC_ClockConfig+0x1c0>)
 800c674:	5cd3      	ldrb	r3, [r2, r3]
 800c676:	fa21 f303 	lsr.w	r3, r1, r3
 800c67a:	4a09      	ldr	r2, [pc, #36]	; (800c6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c67c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <HAL_RCC_ClockConfig+0x1c8>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4618      	mov	r0, r3
 800c684:	f7fd fc50 	bl	8009f28 <HAL_InitTick>

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	40023c00 	.word	0x40023c00
 800c698:	40023800 	.word	0x40023800
 800c69c:	0801a2b8 	.word	0x0801a2b8
 800c6a0:	20000000 	.word	0x20000000
 800c6a4:	20000004 	.word	0x20000004

0800c6a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	607b      	str	r3, [r7, #4]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60fb      	str	r3, [r7, #12]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c6be:	4b63      	ldr	r3, [pc, #396]	; (800c84c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f003 030c 	and.w	r3, r3, #12
 800c6c6:	2b04      	cmp	r3, #4
 800c6c8:	d007      	beq.n	800c6da <HAL_RCC_GetSysClockFreq+0x32>
 800c6ca:	2b08      	cmp	r3, #8
 800c6cc:	d008      	beq.n	800c6e0 <HAL_RCC_GetSysClockFreq+0x38>
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f040 80b4 	bne.w	800c83c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c6d4:	4b5e      	ldr	r3, [pc, #376]	; (800c850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c6d6:	60bb      	str	r3, [r7, #8]
       break;
 800c6d8:	e0b3      	b.n	800c842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c6da:	4b5d      	ldr	r3, [pc, #372]	; (800c850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c6dc:	60bb      	str	r3, [r7, #8]
      break;
 800c6de:	e0b0      	b.n	800c842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c6e0:	4b5a      	ldr	r3, [pc, #360]	; (800c84c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c6ea:	4b58      	ldr	r3, [pc, #352]	; (800c84c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d04a      	beq.n	800c78c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6f6:	4b55      	ldr	r3, [pc, #340]	; (800c84c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	099b      	lsrs	r3, r3, #6
 800c6fc:	f04f 0400 	mov.w	r4, #0
 800c700:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	ea03 0501 	and.w	r5, r3, r1
 800c70c:	ea04 0602 	and.w	r6, r4, r2
 800c710:	4629      	mov	r1, r5
 800c712:	4632      	mov	r2, r6
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	f04f 0400 	mov.w	r4, #0
 800c71c:	0154      	lsls	r4, r2, #5
 800c71e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c722:	014b      	lsls	r3, r1, #5
 800c724:	4619      	mov	r1, r3
 800c726:	4622      	mov	r2, r4
 800c728:	1b49      	subs	r1, r1, r5
 800c72a:	eb62 0206 	sbc.w	r2, r2, r6
 800c72e:	f04f 0300 	mov.w	r3, #0
 800c732:	f04f 0400 	mov.w	r4, #0
 800c736:	0194      	lsls	r4, r2, #6
 800c738:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c73c:	018b      	lsls	r3, r1, #6
 800c73e:	1a5b      	subs	r3, r3, r1
 800c740:	eb64 0402 	sbc.w	r4, r4, r2
 800c744:	f04f 0100 	mov.w	r1, #0
 800c748:	f04f 0200 	mov.w	r2, #0
 800c74c:	00e2      	lsls	r2, r4, #3
 800c74e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c752:	00d9      	lsls	r1, r3, #3
 800c754:	460b      	mov	r3, r1
 800c756:	4614      	mov	r4, r2
 800c758:	195b      	adds	r3, r3, r5
 800c75a:	eb44 0406 	adc.w	r4, r4, r6
 800c75e:	f04f 0100 	mov.w	r1, #0
 800c762:	f04f 0200 	mov.w	r2, #0
 800c766:	02a2      	lsls	r2, r4, #10
 800c768:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c76c:	0299      	lsls	r1, r3, #10
 800c76e:	460b      	mov	r3, r1
 800c770:	4614      	mov	r4, r2
 800c772:	4618      	mov	r0, r3
 800c774:	4621      	mov	r1, r4
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f04f 0400 	mov.w	r4, #0
 800c77c:	461a      	mov	r2, r3
 800c77e:	4623      	mov	r3, r4
 800c780:	f7f4 fa9a 	bl	8000cb8 <__aeabi_uldivmod>
 800c784:	4603      	mov	r3, r0
 800c786:	460c      	mov	r4, r1
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e049      	b.n	800c820 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c78c:	4b2f      	ldr	r3, [pc, #188]	; (800c84c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	099b      	lsrs	r3, r3, #6
 800c792:	f04f 0400 	mov.w	r4, #0
 800c796:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c79a:	f04f 0200 	mov.w	r2, #0
 800c79e:	ea03 0501 	and.w	r5, r3, r1
 800c7a2:	ea04 0602 	and.w	r6, r4, r2
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	4632      	mov	r2, r6
 800c7aa:	f04f 0300 	mov.w	r3, #0
 800c7ae:	f04f 0400 	mov.w	r4, #0
 800c7b2:	0154      	lsls	r4, r2, #5
 800c7b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c7b8:	014b      	lsls	r3, r1, #5
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4622      	mov	r2, r4
 800c7be:	1b49      	subs	r1, r1, r5
 800c7c0:	eb62 0206 	sbc.w	r2, r2, r6
 800c7c4:	f04f 0300 	mov.w	r3, #0
 800c7c8:	f04f 0400 	mov.w	r4, #0
 800c7cc:	0194      	lsls	r4, r2, #6
 800c7ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c7d2:	018b      	lsls	r3, r1, #6
 800c7d4:	1a5b      	subs	r3, r3, r1
 800c7d6:	eb64 0402 	sbc.w	r4, r4, r2
 800c7da:	f04f 0100 	mov.w	r1, #0
 800c7de:	f04f 0200 	mov.w	r2, #0
 800c7e2:	00e2      	lsls	r2, r4, #3
 800c7e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c7e8:	00d9      	lsls	r1, r3, #3
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	195b      	adds	r3, r3, r5
 800c7f0:	eb44 0406 	adc.w	r4, r4, r6
 800c7f4:	f04f 0100 	mov.w	r1, #0
 800c7f8:	f04f 0200 	mov.w	r2, #0
 800c7fc:	02a2      	lsls	r2, r4, #10
 800c7fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c802:	0299      	lsls	r1, r3, #10
 800c804:	460b      	mov	r3, r1
 800c806:	4614      	mov	r4, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	4621      	mov	r1, r4
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f04f 0400 	mov.w	r4, #0
 800c812:	461a      	mov	r2, r3
 800c814:	4623      	mov	r3, r4
 800c816:	f7f4 fa4f 	bl	8000cb8 <__aeabi_uldivmod>
 800c81a:	4603      	mov	r3, r0
 800c81c:	460c      	mov	r4, r1
 800c81e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	0c1b      	lsrs	r3, r3, #16
 800c826:	f003 0303 	and.w	r3, r3, #3
 800c82a:	3301      	adds	r3, #1
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	fbb2 f3f3 	udiv	r3, r2, r3
 800c838:	60bb      	str	r3, [r7, #8]
      break;
 800c83a:	e002      	b.n	800c842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c83c:	4b04      	ldr	r3, [pc, #16]	; (800c850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c83e:	60bb      	str	r3, [r7, #8]
      break;
 800c840:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c842:	68bb      	ldr	r3, [r7, #8]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84c:	40023800 	.word	0x40023800
 800c850:	00f42400 	.word	0x00f42400

0800c854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c858:	4b03      	ldr	r3, [pc, #12]	; (800c868 <HAL_RCC_GetHCLKFreq+0x14>)
 800c85a:	681b      	ldr	r3, [r3, #0]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	20000000 	.word	0x20000000

0800c86c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c870:	f7ff fff0 	bl	800c854 <HAL_RCC_GetHCLKFreq>
 800c874:	4601      	mov	r1, r0
 800c876:	4b05      	ldr	r3, [pc, #20]	; (800c88c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	0a9b      	lsrs	r3, r3, #10
 800c87c:	f003 0307 	and.w	r3, r3, #7
 800c880:	4a03      	ldr	r2, [pc, #12]	; (800c890 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c882:	5cd3      	ldrb	r3, [r2, r3]
 800c884:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c888:	4618      	mov	r0, r3
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	40023800 	.word	0x40023800
 800c890:	0801a2c8 	.word	0x0801a2c8

0800c894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c898:	f7ff ffdc 	bl	800c854 <HAL_RCC_GetHCLKFreq>
 800c89c:	4601      	mov	r1, r0
 800c89e:	4b05      	ldr	r3, [pc, #20]	; (800c8b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	0b5b      	lsrs	r3, r3, #13
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	4a03      	ldr	r2, [pc, #12]	; (800c8b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c8aa:	5cd3      	ldrb	r3, [r2, r3]
 800c8ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	40023800 	.word	0x40023800
 800c8b8:	0801a2c8 	.word	0x0801a2c8

0800c8bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00a      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c8e4:	4b66      	ldr	r3, [pc, #408]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f2:	4963      	ldr	r1, [pc, #396]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00a      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c906:	4b5e      	ldr	r3, [pc, #376]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c90c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c914:	495a      	ldr	r1, [pc, #360]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c916:	4313      	orrs	r3, r2
 800c918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10b      	bne.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c930:	2b00      	cmp	r3, #0
 800c932:	d105      	bne.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d075      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c940:	4b50      	ldr	r3, [pc, #320]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c946:	f7fd fb33 	bl	8009fb0 <HAL_GetTick>
 800c94a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c94c:	e008      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c94e:	f7fd fb2f 	bl	8009fb0 <HAL_GetTick>
 800c952:	4602      	mov	r2, r0
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d901      	bls.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e1dc      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c960:	4b47      	ldr	r3, [pc, #284]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1f0      	bne.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0301 	and.w	r3, r3, #1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d009      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	019a      	lsls	r2, r3, #6
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	071b      	lsls	r3, r3, #28
 800c984:	493e      	ldr	r1, [pc, #248]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c986:	4313      	orrs	r3, r2
 800c988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0302 	and.w	r3, r3, #2
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01f      	beq.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c998:	4b39      	ldr	r3, [pc, #228]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c99a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c99e:	0f1b      	lsrs	r3, r3, #28
 800c9a0:	f003 0307 	and.w	r3, r3, #7
 800c9a4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	019a      	lsls	r2, r3, #6
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	061b      	lsls	r3, r3, #24
 800c9b2:	431a      	orrs	r2, r3
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	071b      	lsls	r3, r3, #28
 800c9b8:	4931      	ldr	r1, [pc, #196]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c9c0:	4b2f      	ldr	r3, [pc, #188]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9c6:	f023 021f 	bic.w	r2, r3, #31
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	492b      	ldr	r1, [pc, #172]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00d      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	019a      	lsls	r2, r3, #6
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	061b      	lsls	r3, r3, #24
 800c9f0:	431a      	orrs	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	071b      	lsls	r3, r3, #28
 800c9f8:	4921      	ldr	r1, [pc, #132]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ca00:	4b20      	ldr	r3, [pc, #128]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ca02:	2201      	movs	r2, #1
 800ca04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca06:	f7fd fad3 	bl	8009fb0 <HAL_GetTick>
 800ca0a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca0c:	e008      	b.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ca0e:	f7fd facf 	bl	8009fb0 <HAL_GetTick>
 800ca12:	4602      	mov	r2, r0
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d901      	bls.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	e17c      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca20:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d0f0      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0304 	and.w	r3, r3, #4
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d112      	bne.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10c      	bne.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 80ce 	beq.w	800cbee <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ca56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca5a:	f040 80c8 	bne.w	800cbee <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ca5e:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca64:	f7fd faa4 	bl	8009fb0 <HAL_GetTick>
 800ca68:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca6a:	e00f      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ca6c:	f7fd faa0 	bl	8009fb0 <HAL_GetTick>
 800ca70:	4602      	mov	r2, r0
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d908      	bls.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca7a:	2303      	movs	r3, #3
 800ca7c:	e14d      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800ca7e:	bf00      	nop
 800ca80:	40023800 	.word	0x40023800
 800ca84:	42470068 	.word	0x42470068
 800ca88:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca8c:	4ba5      	ldr	r3, [pc, #660]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca98:	d0e8      	beq.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0304 	and.w	r3, r3, #4
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d02e      	beq.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800caa6:	4b9f      	ldr	r3, [pc, #636]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caac:	0c1b      	lsrs	r3, r3, #16
 800caae:	f003 0303 	and.w	r3, r3, #3
 800cab2:	3301      	adds	r3, #1
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cab8:	4b9a      	ldr	r3, [pc, #616]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cabe:	0f1b      	lsrs	r3, r3, #28
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	019a      	lsls	r2, r3, #6
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	085b      	lsrs	r3, r3, #1
 800cad0:	3b01      	subs	r3, #1
 800cad2:	041b      	lsls	r3, r3, #16
 800cad4:	431a      	orrs	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	061b      	lsls	r3, r3, #24
 800cadc:	431a      	orrs	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	071b      	lsls	r3, r3, #28
 800cae2:	4990      	ldr	r1, [pc, #576]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cae4:	4313      	orrs	r3, r2
 800cae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800caea:	4b8e      	ldr	r3, [pc, #568]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf8:	3b01      	subs	r3, #1
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	4989      	ldr	r1, [pc, #548]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0308 	and.w	r3, r3, #8
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d02c      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800cb10:	4b84      	ldr	r3, [pc, #528]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb16:	0c1b      	lsrs	r3, r3, #16
 800cb18:	f003 0303 	and.w	r3, r3, #3
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb22:	4b80      	ldr	r3, [pc, #512]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb28:	0e1b      	lsrs	r3, r3, #24
 800cb2a:	f003 030f 	and.w	r3, r3, #15
 800cb2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	019a      	lsls	r2, r3, #6
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	085b      	lsrs	r3, r3, #1
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	041b      	lsls	r3, r3, #16
 800cb3e:	431a      	orrs	r2, r3
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	061b      	lsls	r3, r3, #24
 800cb44:	431a      	orrs	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	69db      	ldr	r3, [r3, #28]
 800cb4a:	071b      	lsls	r3, r3, #28
 800cb4c:	4975      	ldr	r1, [pc, #468]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cb54:	4b73      	ldr	r3, [pc, #460]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	4970      	ldr	r1, [pc, #448]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb64:	4313      	orrs	r3, r2
 800cb66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d024      	beq.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cb7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb7e:	d11f      	bne.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb80:	4b68      	ldr	r3, [pc, #416]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb86:	0e1b      	lsrs	r3, r3, #24
 800cb88:	f003 030f 	and.w	r3, r3, #15
 800cb8c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cb8e:	4b65      	ldr	r3, [pc, #404]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb94:	0f1b      	lsrs	r3, r3, #28
 800cb96:	f003 0307 	and.w	r3, r3, #7
 800cb9a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	019a      	lsls	r2, r3, #6
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	085b      	lsrs	r3, r3, #1
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	041b      	lsls	r3, r3, #16
 800cbac:	431a      	orrs	r2, r3
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	061b      	lsls	r3, r3, #24
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	071b      	lsls	r3, r3, #28
 800cbb8:	495a      	ldr	r1, [pc, #360]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cbc0:	4b59      	ldr	r3, [pc, #356]	; (800cd28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cbc6:	f7fd f9f3 	bl	8009fb0 <HAL_GetTick>
 800cbca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbcc:	e008      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cbce:	f7fd f9ef 	bl	8009fb0 <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d901      	bls.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e09c      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbe0:	4b50      	ldr	r3, [pc, #320]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbec:	d1ef      	bne.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 0320 	and.w	r3, r3, #32
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 8083 	beq.w	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	60bb      	str	r3, [r7, #8]
 800cc00:	4b48      	ldr	r3, [pc, #288]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	4a47      	ldr	r2, [pc, #284]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc0a:	6413      	str	r3, [r2, #64]	; 0x40
 800cc0c:	4b45      	ldr	r3, [pc, #276]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc14:	60bb      	str	r3, [r7, #8]
 800cc16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cc18:	4b44      	ldr	r3, [pc, #272]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a43      	ldr	r2, [pc, #268]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cc1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc22:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc24:	f7fd f9c4 	bl	8009fb0 <HAL_GetTick>
 800cc28:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cc2a:	e008      	b.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cc2c:	f7fd f9c0 	bl	8009fb0 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d901      	bls.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e06d      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cc3e:	4b3b      	ldr	r3, [pc, #236]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0f0      	beq.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cc4a:	4b36      	ldr	r3, [pc, #216]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc52:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d02f      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d028      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc68:	4b2e      	ldr	r3, [pc, #184]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc70:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cc72:	4b2f      	ldr	r3, [pc, #188]	; (800cd30 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cc74:	2201      	movs	r2, #1
 800cc76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cc78:	4b2d      	ldr	r3, [pc, #180]	; (800cd30 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cc7e:	4a29      	ldr	r2, [pc, #164]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cc84:	4b27      	ldr	r3, [pc, #156]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d114      	bne.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cc90:	f7fd f98e 	bl	8009fb0 <HAL_GetTick>
 800cc94:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc96:	e00a      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc98:	f7fd f98a 	bl	8009fb0 <HAL_GetTick>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d901      	bls.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e035      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccae:	4b1d      	ldr	r3, [pc, #116]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb2:	f003 0302 	and.w	r3, r3, #2
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0ee      	beq.n	800cc98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccc6:	d10d      	bne.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ccc8:	4b16      	ldr	r3, [pc, #88]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ccd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccdc:	4911      	ldr	r1, [pc, #68]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	608b      	str	r3, [r1, #8]
 800cce2:	e005      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	4a0e      	ldr	r2, [pc, #56]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ccee:	6093      	str	r3, [r2, #8]
 800ccf0:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccfc:	4909      	ldr	r1, [pc, #36]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 0310 	and.w	r3, r3, #16
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cd14:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cd16:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	40023800 	.word	0x40023800
 800cd28:	42470070 	.word	0x42470070
 800cd2c:	40007000 	.word	0x40007000
 800cd30:	42470e40 	.word	0x42470e40
 800cd34:	424711e0 	.word	0x424711e0

0800cd38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d075      	beq.n	800ce3c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cd50:	4ba2      	ldr	r3, [pc, #648]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	f003 030c 	and.w	r3, r3, #12
 800cd58:	2b04      	cmp	r3, #4
 800cd5a:	d00c      	beq.n	800cd76 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd5c:	4b9f      	ldr	r3, [pc, #636]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cd64:	2b08      	cmp	r3, #8
 800cd66:	d112      	bne.n	800cd8e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd68:	4b9c      	ldr	r3, [pc, #624]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd74:	d10b      	bne.n	800cd8e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd76:	4b99      	ldr	r3, [pc, #612]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d05b      	beq.n	800ce3a <HAL_RCC_OscConfig+0x102>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d157      	bne.n	800ce3a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e20b      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd96:	d106      	bne.n	800cda6 <HAL_RCC_OscConfig+0x6e>
 800cd98:	4b90      	ldr	r3, [pc, #576]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a8f      	ldr	r2, [pc, #572]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cd9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	e01d      	b.n	800cde2 <HAL_RCC_OscConfig+0xaa>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cdae:	d10c      	bne.n	800cdca <HAL_RCC_OscConfig+0x92>
 800cdb0:	4b8a      	ldr	r3, [pc, #552]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a89      	ldr	r2, [pc, #548]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	4b87      	ldr	r3, [pc, #540]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a86      	ldr	r2, [pc, #536]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdc6:	6013      	str	r3, [r2, #0]
 800cdc8:	e00b      	b.n	800cde2 <HAL_RCC_OscConfig+0xaa>
 800cdca:	4b84      	ldr	r3, [pc, #528]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a83      	ldr	r2, [pc, #524]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	4b81      	ldr	r3, [pc, #516]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a80      	ldr	r2, [pc, #512]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cde0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d013      	beq.n	800ce12 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdea:	f7fd f8e1 	bl	8009fb0 <HAL_GetTick>
 800cdee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdf0:	e008      	b.n	800ce04 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cdf2:	f7fd f8dd 	bl	8009fb0 <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	2b64      	cmp	r3, #100	; 0x64
 800cdfe:	d901      	bls.n	800ce04 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e1d0      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce04:	4b75      	ldr	r3, [pc, #468]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0f0      	beq.n	800cdf2 <HAL_RCC_OscConfig+0xba>
 800ce10:	e014      	b.n	800ce3c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce12:	f7fd f8cd 	bl	8009fb0 <HAL_GetTick>
 800ce16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce18:	e008      	b.n	800ce2c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ce1a:	f7fd f8c9 	bl	8009fb0 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b64      	cmp	r3, #100	; 0x64
 800ce26:	d901      	bls.n	800ce2c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e1bc      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce2c:	4b6b      	ldr	r3, [pc, #428]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1f0      	bne.n	800ce1a <HAL_RCC_OscConfig+0xe2>
 800ce38:	e000      	b.n	800ce3c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 0302 	and.w	r3, r3, #2
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d063      	beq.n	800cf10 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ce48:	4b64      	ldr	r3, [pc, #400]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f003 030c 	and.w	r3, r3, #12
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce54:	4b61      	ldr	r3, [pc, #388]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	d11c      	bne.n	800ce9a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce60:	4b5e      	ldr	r3, [pc, #376]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d116      	bne.n	800ce9a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce6c:	4b5b      	ldr	r3, [pc, #364]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 0302 	and.w	r3, r3, #2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <HAL_RCC_OscConfig+0x14c>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d001      	beq.n	800ce84 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e190      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce84:	4b55      	ldr	r3, [pc, #340]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	4952      	ldr	r1, [pc, #328]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce98:	e03a      	b.n	800cf10 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d020      	beq.n	800cee4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cea2:	4b4f      	ldr	r3, [pc, #316]	; (800cfe0 <HAL_RCC_OscConfig+0x2a8>)
 800cea4:	2201      	movs	r2, #1
 800cea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea8:	f7fd f882 	bl	8009fb0 <HAL_GetTick>
 800ceac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ceae:	e008      	b.n	800cec2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ceb0:	f7fd f87e 	bl	8009fb0 <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d901      	bls.n	800cec2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cebe:	2303      	movs	r3, #3
 800cec0:	e171      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cec2:	4b46      	ldr	r3, [pc, #280]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0f0      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cece:	4b43      	ldr	r3, [pc, #268]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	493f      	ldr	r1, [pc, #252]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	600b      	str	r3, [r1, #0]
 800cee2:	e015      	b.n	800cf10 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cee4:	4b3e      	ldr	r3, [pc, #248]	; (800cfe0 <HAL_RCC_OscConfig+0x2a8>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceea:	f7fd f861 	bl	8009fb0 <HAL_GetTick>
 800ceee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cef0:	e008      	b.n	800cf04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cef2:	f7fd f85d 	bl	8009fb0 <HAL_GetTick>
 800cef6:	4602      	mov	r2, r0
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d901      	bls.n	800cf04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e150      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf04:	4b35      	ldr	r3, [pc, #212]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1f0      	bne.n	800cef2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0308 	and.w	r3, r3, #8
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d030      	beq.n	800cf7e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d016      	beq.n	800cf52 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf24:	4b2f      	ldr	r3, [pc, #188]	; (800cfe4 <HAL_RCC_OscConfig+0x2ac>)
 800cf26:	2201      	movs	r2, #1
 800cf28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf2a:	f7fd f841 	bl	8009fb0 <HAL_GetTick>
 800cf2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf30:	e008      	b.n	800cf44 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf32:	f7fd f83d 	bl	8009fb0 <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d901      	bls.n	800cf44 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cf40:	2303      	movs	r3, #3
 800cf42:	e130      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf44:	4b25      	ldr	r3, [pc, #148]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cf46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf48:	f003 0302 	and.w	r3, r3, #2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d0f0      	beq.n	800cf32 <HAL_RCC_OscConfig+0x1fa>
 800cf50:	e015      	b.n	800cf7e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf52:	4b24      	ldr	r3, [pc, #144]	; (800cfe4 <HAL_RCC_OscConfig+0x2ac>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf58:	f7fd f82a 	bl	8009fb0 <HAL_GetTick>
 800cf5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf5e:	e008      	b.n	800cf72 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf60:	f7fd f826 	bl	8009fb0 <HAL_GetTick>
 800cf64:	4602      	mov	r2, r0
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	2b02      	cmp	r3, #2
 800cf6c:	d901      	bls.n	800cf72 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	e119      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf72:	4b1a      	ldr	r3, [pc, #104]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cf74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf76:	f003 0302 	and.w	r3, r3, #2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1f0      	bne.n	800cf60 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0304 	and.w	r3, r3, #4
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 809f 	beq.w	800d0ca <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf90:	4b12      	ldr	r3, [pc, #72]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10f      	bne.n	800cfbc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa4:	4a0d      	ldr	r2, [pc, #52]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cfa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfaa:	6413      	str	r3, [r2, #64]	; 0x40
 800cfac:	4b0b      	ldr	r3, [pc, #44]	; (800cfdc <HAL_RCC_OscConfig+0x2a4>)
 800cfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfb4:	60fb      	str	r3, [r7, #12]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfbc:	4b0a      	ldr	r3, [pc, #40]	; (800cfe8 <HAL_RCC_OscConfig+0x2b0>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d120      	bne.n	800d00a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cfc8:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <HAL_RCC_OscConfig+0x2b0>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a06      	ldr	r2, [pc, #24]	; (800cfe8 <HAL_RCC_OscConfig+0x2b0>)
 800cfce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfd4:	f7fc ffec 	bl	8009fb0 <HAL_GetTick>
 800cfd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfda:	e010      	b.n	800cffe <HAL_RCC_OscConfig+0x2c6>
 800cfdc:	40023800 	.word	0x40023800
 800cfe0:	42470000 	.word	0x42470000
 800cfe4:	42470e80 	.word	0x42470e80
 800cfe8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfec:	f7fc ffe0 	bl	8009fb0 <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d901      	bls.n	800cffe <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cffa:	2303      	movs	r3, #3
 800cffc:	e0d3      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cffe:	4b6c      	ldr	r3, [pc, #432]	; (800d1b0 <HAL_RCC_OscConfig+0x478>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0f0      	beq.n	800cfec <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d106      	bne.n	800d020 <HAL_RCC_OscConfig+0x2e8>
 800d012:	4b68      	ldr	r3, [pc, #416]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d016:	4a67      	ldr	r2, [pc, #412]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d018:	f043 0301 	orr.w	r3, r3, #1
 800d01c:	6713      	str	r3, [r2, #112]	; 0x70
 800d01e:	e01c      	b.n	800d05a <HAL_RCC_OscConfig+0x322>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	2b05      	cmp	r3, #5
 800d026:	d10c      	bne.n	800d042 <HAL_RCC_OscConfig+0x30a>
 800d028:	4b62      	ldr	r3, [pc, #392]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d02c:	4a61      	ldr	r2, [pc, #388]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d02e:	f043 0304 	orr.w	r3, r3, #4
 800d032:	6713      	str	r3, [r2, #112]	; 0x70
 800d034:	4b5f      	ldr	r3, [pc, #380]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d038:	4a5e      	ldr	r2, [pc, #376]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d03a:	f043 0301 	orr.w	r3, r3, #1
 800d03e:	6713      	str	r3, [r2, #112]	; 0x70
 800d040:	e00b      	b.n	800d05a <HAL_RCC_OscConfig+0x322>
 800d042:	4b5c      	ldr	r3, [pc, #368]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d046:	4a5b      	ldr	r2, [pc, #364]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d048:	f023 0301 	bic.w	r3, r3, #1
 800d04c:	6713      	str	r3, [r2, #112]	; 0x70
 800d04e:	4b59      	ldr	r3, [pc, #356]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d052:	4a58      	ldr	r2, [pc, #352]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d054:	f023 0304 	bic.w	r3, r3, #4
 800d058:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d015      	beq.n	800d08e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d062:	f7fc ffa5 	bl	8009fb0 <HAL_GetTick>
 800d066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d068:	e00a      	b.n	800d080 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d06a:	f7fc ffa1 	bl	8009fb0 <HAL_GetTick>
 800d06e:	4602      	mov	r2, r0
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	f241 3288 	movw	r2, #5000	; 0x1388
 800d078:	4293      	cmp	r3, r2
 800d07a:	d901      	bls.n	800d080 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e092      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d080:	4b4c      	ldr	r3, [pc, #304]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0ee      	beq.n	800d06a <HAL_RCC_OscConfig+0x332>
 800d08c:	e014      	b.n	800d0b8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d08e:	f7fc ff8f 	bl	8009fb0 <HAL_GetTick>
 800d092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d094:	e00a      	b.n	800d0ac <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d096:	f7fc ff8b 	bl	8009fb0 <HAL_GetTick>
 800d09a:	4602      	mov	r2, r0
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d901      	bls.n	800d0ac <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e07c      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d0ac:	4b41      	ldr	r3, [pc, #260]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1ee      	bne.n	800d096 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d105      	bne.n	800d0ca <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0be:	4b3d      	ldr	r3, [pc, #244]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c2:	4a3c      	ldr	r2, [pc, #240]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d0c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d068      	beq.n	800d1a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d0d2:	4b38      	ldr	r3, [pc, #224]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	f003 030c 	and.w	r3, r3, #12
 800d0da:	2b08      	cmp	r3, #8
 800d0dc:	d060      	beq.n	800d1a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d145      	bne.n	800d172 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0e6:	4b34      	ldr	r3, [pc, #208]	; (800d1b8 <HAL_RCC_OscConfig+0x480>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ec:	f7fc ff60 	bl	8009fb0 <HAL_GetTick>
 800d0f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0f2:	e008      	b.n	800d106 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0f4:	f7fc ff5c 	bl	8009fb0 <HAL_GetTick>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d901      	bls.n	800d106 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	e04f      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d106:	4b2b      	ldr	r3, [pc, #172]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1f0      	bne.n	800d0f4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	69da      	ldr	r2, [r3, #28]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	431a      	orrs	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	019b      	lsls	r3, r3, #6
 800d122:	431a      	orrs	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d128:	085b      	lsrs	r3, r3, #1
 800d12a:	3b01      	subs	r3, #1
 800d12c:	041b      	lsls	r3, r3, #16
 800d12e:	431a      	orrs	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	061b      	lsls	r3, r3, #24
 800d136:	431a      	orrs	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13c:	071b      	lsls	r3, r3, #28
 800d13e:	491d      	ldr	r1, [pc, #116]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d140:	4313      	orrs	r3, r2
 800d142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d144:	4b1c      	ldr	r3, [pc, #112]	; (800d1b8 <HAL_RCC_OscConfig+0x480>)
 800d146:	2201      	movs	r2, #1
 800d148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d14a:	f7fc ff31 	bl	8009fb0 <HAL_GetTick>
 800d14e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d150:	e008      	b.n	800d164 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d152:	f7fc ff2d 	bl	8009fb0 <HAL_GetTick>
 800d156:	4602      	mov	r2, r0
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d901      	bls.n	800d164 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d160:	2303      	movs	r3, #3
 800d162:	e020      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d164:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d0f0      	beq.n	800d152 <HAL_RCC_OscConfig+0x41a>
 800d170:	e018      	b.n	800d1a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d172:	4b11      	ldr	r3, [pc, #68]	; (800d1b8 <HAL_RCC_OscConfig+0x480>)
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d178:	f7fc ff1a 	bl	8009fb0 <HAL_GetTick>
 800d17c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d17e:	e008      	b.n	800d192 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d180:	f7fc ff16 	bl	8009fb0 <HAL_GetTick>
 800d184:	4602      	mov	r2, r0
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d901      	bls.n	800d192 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e009      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d192:	4b08      	ldr	r3, [pc, #32]	; (800d1b4 <HAL_RCC_OscConfig+0x47c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1f0      	bne.n	800d180 <HAL_RCC_OscConfig+0x448>
 800d19e:	e001      	b.n	800d1a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	40007000 	.word	0x40007000
 800d1b4:	40023800 	.word	0x40023800
 800d1b8:	42470060 	.word	0x42470060

0800d1bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e022      	b.n	800d214 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d105      	bne.n	800d1e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7fa f895 	bl	8007310 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2203      	movs	r2, #3
 800d1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f814 	bl	800d21c <HAL_SD_InitCard>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e00a      	b.n	800d214 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d21c:	b5b0      	push	{r4, r5, r7, lr}
 800d21e:	b08e      	sub	sp, #56	; 0x38
 800d220:	af04      	add	r7, sp, #16
 800d222:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d224:	2300      	movs	r3, #0
 800d226:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d228:	2300      	movs	r3, #0
 800d22a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d22c:	2300      	movs	r3, #0
 800d22e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d230:	2300      	movs	r3, #0
 800d232:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d234:	2300      	movs	r3, #0
 800d236:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d238:	2376      	movs	r3, #118	; 0x76
 800d23a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681d      	ldr	r5, [r3, #0]
 800d240:	466c      	mov	r4, sp
 800d242:	f107 0314 	add.w	r3, r7, #20
 800d246:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d24a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d24e:	f107 0308 	add.w	r3, r7, #8
 800d252:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d254:	4628      	mov	r0, r5
 800d256:	f003 fa87 	bl	8010768 <SDIO_Init>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e031      	b.n	800d2d0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d26c:	4b1a      	ldr	r3, [pc, #104]	; (800d2d8 <HAL_SD_InitCard+0xbc>)
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f003 fabf 	bl	80107fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d27c:	4b16      	ldr	r3, [pc, #88]	; (800d2d8 <HAL_SD_InitCard+0xbc>)
 800d27e:	2201      	movs	r2, #1
 800d280:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 ffc6 	bl	800e214 <SD_PowerON>
 800d288:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00b      	beq.n	800d2a8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e013      	b.n	800d2d0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fee5 	bl	800e078 <SD_InitCard>
 800d2ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00b      	beq.n	800d2ce <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	431a      	orrs	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e000      	b.n	800d2d0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3728      	adds	r7, #40	; 0x28
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d2d8:	422580a0 	.word	0x422580a0

0800d2dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08c      	sub	sp, #48	; 0x30
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d107      	bne.n	800d304 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e0c7      	b.n	800d494 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	f040 80c0 	bne.w	800d492 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	441a      	add	r2, r3
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d322:	429a      	cmp	r2, r3
 800d324:	d907      	bls.n	800d336 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e0ae      	b.n	800d494 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2203      	movs	r2, #3
 800d33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2200      	movs	r2, #0
 800d344:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d354:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35a:	4a50      	ldr	r2, [pc, #320]	; (800d49c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d35c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d362:	4a4f      	ldr	r2, [pc, #316]	; (800d4a0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d364:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36a:	2200      	movs	r2, #0
 800d36c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3380      	adds	r3, #128	; 0x80
 800d378:	4619      	mov	r1, r3
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	025b      	lsls	r3, r3, #9
 800d380:	089b      	lsrs	r3, r3, #2
 800d382:	f7fd fc07 	bl	800ab94 <HAL_DMA_Start_IT>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d017      	beq.n	800d3bc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d39a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a40      	ldr	r2, [pc, #256]	; (800d4a4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e06b      	b.n	800d494 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d3bc:	4b3a      	ldr	r3, [pc, #232]	; (800d4a8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d3be:	2201      	movs	r2, #1
 800d3c0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d002      	beq.n	800d3d0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3cc:	025b      	lsls	r3, r3, #9
 800d3ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f003 faa1 	bl	8010920 <SDMMC_CmdBlockLength>
 800d3de:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00f      	beq.n	800d406 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a2e      	ldr	r2, [pc, #184]	; (800d4a4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e046      	b.n	800d494 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d406:	f04f 33ff 	mov.w	r3, #4294967295
 800d40a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	025b      	lsls	r3, r3, #9
 800d410:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d412:	2390      	movs	r3, #144	; 0x90
 800d414:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d416:	2302      	movs	r3, #2
 800d418:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d41e:	2301      	movs	r3, #1
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f107 0210 	add.w	r2, r7, #16
 800d42a:	4611      	mov	r1, r2
 800d42c:	4618      	mov	r0, r3
 800d42e:	f003 fa4b 	bl	80108c8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d90a      	bls.n	800d44e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2282      	movs	r2, #130	; 0x82
 800d43c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d444:	4618      	mov	r0, r3
 800d446:	f003 faaf 	bl	80109a8 <SDMMC_CmdReadMultiBlock>
 800d44a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d44c:	e009      	b.n	800d462 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2281      	movs	r2, #129	; 0x81
 800d452:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d45a:	4618      	mov	r0, r3
 800d45c:	f003 fa82 	bl	8010964 <SDMMC_CmdReadSingleBlock>
 800d460:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d012      	beq.n	800d48e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a0d      	ldr	r2, [pc, #52]	; (800d4a4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d46e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	431a      	orrs	r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e002      	b.n	800d494 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	e000      	b.n	800d494 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d492:	2302      	movs	r3, #2
  }
}
 800d494:	4618      	mov	r0, r3
 800d496:	3730      	adds	r7, #48	; 0x30
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	0800de87 	.word	0x0800de87
 800d4a0:	0800def9 	.word	0x0800def9
 800d4a4:	004005ff 	.word	0x004005ff
 800d4a8:	4225858c 	.word	0x4225858c

0800d4ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08c      	sub	sp, #48	; 0x30
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d107      	bne.n	800d4d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e0ca      	b.n	800d66a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	f040 80c3 	bne.w	800d668 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	441a      	add	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d907      	bls.n	800d506 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	e0b1      	b.n	800d66a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2203      	movs	r2, #3
 800d50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2200      	movs	r2, #0
 800d514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f042 021a 	orr.w	r2, r2, #26
 800d524:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52a:	4a52      	ldr	r2, [pc, #328]	; (800d674 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d52c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d532:	4a51      	ldr	r2, [pc, #324]	; (800d678 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d534:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	2200      	movs	r2, #0
 800d53c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d542:	2b01      	cmp	r3, #1
 800d544:	d002      	beq.n	800d54c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	025b      	lsls	r3, r3, #9
 800d54a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d554:	4618      	mov	r0, r3
 800d556:	f003 f9e3 	bl	8010920 <SDMMC_CmdBlockLength>
 800d55a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00f      	beq.n	800d582 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a45      	ldr	r2, [pc, #276]	; (800d67c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	431a      	orrs	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	e073      	b.n	800d66a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d90a      	bls.n	800d59e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	22a0      	movs	r2, #160	; 0xa0
 800d58c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d594:	4618      	mov	r0, r3
 800d596:	f003 fa4b 	bl	8010a30 <SDMMC_CmdWriteMultiBlock>
 800d59a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d59c:	e009      	b.n	800d5b2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2290      	movs	r2, #144	; 0x90
 800d5a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f003 fa1e 	bl	80109ec <SDMMC_CmdWriteSingleBlock>
 800d5b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d012      	beq.n	800d5de <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a2f      	ldr	r2, [pc, #188]	; (800d67c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d5be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e045      	b.n	800d66a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d5de:	4b28      	ldr	r3, [pc, #160]	; (800d680 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3380      	adds	r3, #128	; 0x80
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	025b      	lsls	r3, r3, #9
 800d5f6:	089b      	lsrs	r3, r3, #2
 800d5f8:	f7fd facc 	bl	800ab94 <HAL_DMA_Start_IT>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d01a      	beq.n	800d638 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f022 021a 	bic.w	r2, r2, #26
 800d610:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a19      	ldr	r2, [pc, #100]	; (800d67c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e018      	b.n	800d66a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d638:	f04f 33ff 	mov.w	r3, #4294967295
 800d63c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	025b      	lsls	r3, r3, #9
 800d642:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d644:	2390      	movs	r3, #144	; 0x90
 800d646:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d648:	2300      	movs	r3, #0
 800d64a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d650:	2301      	movs	r3, #1
 800d652:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f107 0210 	add.w	r2, r7, #16
 800d65c:	4611      	mov	r1, r2
 800d65e:	4618      	mov	r0, r3
 800d660:	f003 f932 	bl	80108c8 <SDIO_ConfigData>

      return HAL_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	e000      	b.n	800d66a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d668:	2302      	movs	r3, #2
  }
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3730      	adds	r7, #48	; 0x30
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	0800de5d 	.word	0x0800de5d
 800d678:	0800def9 	.word	0x0800def9
 800d67c:	004005ff 	.word	0x004005ff
 800d680:	4225858c 	.word	0x4225858c

0800d684 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d690:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d008      	beq.n	800d6b2 <HAL_SD_IRQHandler+0x2e>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f003 0308 	and.w	r3, r3, #8
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 ffc8 	bl	800e640 <SD_Read_IT>
 800d6b0:	e155      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 808f 	beq.w	800d7e0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6ca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	6812      	ldr	r2, [r2, #0]
 800d6d6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d6da:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d6de:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f022 0201 	bic.w	r2, r2, #1
 800d6ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d039      	beq.n	800d76e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f003 0302 	and.w	r3, r3, #2
 800d700:	2b00      	cmp	r3, #0
 800d702:	d104      	bne.n	800d70e <HAL_SD_IRQHandler+0x8a>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f003 0320 	and.w	r3, r3, #32
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d011      	beq.n	800d732 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4618      	mov	r0, r3
 800d714:	f003 f9ae 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800d718:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d008      	beq.n	800d732 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	431a      	orrs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 f91f 	bl	800d970 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f240 523a 	movw	r2, #1338	; 0x53a
 800d73a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d104      	bne.n	800d75e <HAL_SD_IRQHandler+0xda>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f003 fe04 	bl	801136c <HAL_SD_RxCpltCallback>
 800d764:	e0fb      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f003 fdf6 	bl	8011358 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d76c:	e0f7      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 80f2 	beq.w	800d95e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d011      	beq.n	800d7a8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	f003 f973 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800d78e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d008      	beq.n	800d7a8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	431a      	orrs	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f8e4 	bl	800d970 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f040 80d5 	bne.w	800d95e <HAL_SD_IRQHandler+0x2da>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f003 0302 	and.w	r3, r3, #2
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f040 80cf 	bne.w	800d95e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f022 0208 	bic.w	r2, r2, #8
 800d7ce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f003 fdbd 	bl	8011358 <HAL_SD_TxCpltCallback>
}
 800d7de:	e0be      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <HAL_SD_IRQHandler+0x17c>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f003 0308 	and.w	r3, r3, #8
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d003      	beq.n	800d800 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 ff72 	bl	800e6e2 <SD_Write_IT>
 800d7fe:	e0ae      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d806:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 80a7 	beq.w	800d95e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d816:	f003 0302 	and.w	r3, r3, #2
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d005      	beq.n	800d82a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d822:	f043 0202 	orr.w	r2, r3, #2
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b00      	cmp	r3, #0
 800d836:	d005      	beq.n	800d844 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	f043 0208 	orr.w	r2, r3, #8
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84a:	f003 0320 	and.w	r3, r3, #32
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d005      	beq.n	800d85e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d856:	f043 0220 	orr.w	r2, r3, #32
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d864:	f003 0310 	and.w	r3, r3, #16
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d005      	beq.n	800d878 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	f043 0210 	orr.w	r2, r3, #16
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d880:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d890:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f003 f8ec 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800d89c:	4602      	mov	r2, r0
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	431a      	orrs	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0308 	and.w	r3, r3, #8
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f855 	bl	800d970 <HAL_SD_ErrorCallback>
}
 800d8c6:	e04a      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d045      	beq.n	800d95e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f003 0310 	and.w	r3, r3, #16
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <HAL_SD_IRQHandler+0x262>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d011      	beq.n	800d90a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ea:	4a1f      	ldr	r2, [pc, #124]	; (800d968 <HAL_SD_IRQHandler+0x2e4>)
 800d8ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fd f9a6 	bl	800ac44 <HAL_DMA_Abort_IT>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d02f      	beq.n	800d95e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fb4a 	bl	800df9c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d908:	e029      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <HAL_SD_IRQHandler+0x29a>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d011      	beq.n	800d942 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d922:	4a12      	ldr	r2, [pc, #72]	; (800d96c <HAL_SD_IRQHandler+0x2e8>)
 800d924:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fd f98a 	bl	800ac44 <HAL_DMA_Abort_IT>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d013      	beq.n	800d95e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 fb65 	bl	800e00a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d940:	e00d      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f003 fcf4 	bl	8011344 <HAL_SD_AbortCallback>
}
 800d95c:	e7ff      	b.n	800d95e <HAL_SD_IRQHandler+0x2da>
 800d95e:	bf00      	nop
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	0800df9d 	.word	0x0800df9d
 800d96c:	0800e00b 	.word	0x0800e00b

0800d970 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d978:	bf00      	nop
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d992:	0f9b      	lsrs	r3, r3, #30
 800d994:	b2da      	uxtb	r2, r3
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d99e:	0e9b      	lsrs	r3, r3, #26
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 030f 	and.w	r3, r3, #15
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b0:	0e1b      	lsrs	r3, r3, #24
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	f003 0303 	and.w	r3, r3, #3
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c2:	0c1b      	lsrs	r3, r3, #16
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ce:	0a1b      	lsrs	r3, r3, #8
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e4:	0d1b      	lsrs	r3, r3, #20
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f0:	0c1b      	lsrs	r3, r3, #16
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 030f 	and.w	r3, r3, #15
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da02:	0bdb      	lsrs	r3, r3, #15
 800da04:	b2db      	uxtb	r3, r3
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da14:	0b9b      	lsrs	r3, r3, #14
 800da16:	b2db      	uxtb	r3, r3
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da26:	0b5b      	lsrs	r3, r3, #13
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da38:	0b1b      	lsrs	r3, r3, #12
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	f003 0301 	and.w	r3, r3, #1
 800da40:	b2da      	uxtb	r2, r3
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2200      	movs	r2, #0
 800da4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da50:	2b00      	cmp	r3, #0
 800da52:	d163      	bne.n	800db1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da58:	009a      	lsls	r2, r3, #2
 800da5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da5e:	4013      	ands	r3, r2
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800da64:	0f92      	lsrs	r2, r2, #30
 800da66:	431a      	orrs	r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	0edb      	lsrs	r3, r3, #27
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da82:	0e1b      	lsrs	r3, r3, #24
 800da84:	b2db      	uxtb	r3, r3
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da94:	0d5b      	lsrs	r3, r3, #21
 800da96:	b2db      	uxtb	r3, r3
 800da98:	f003 0307 	and.w	r3, r3, #7
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa6:	0c9b      	lsrs	r3, r3, #18
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	f003 0307 	and.w	r3, r3, #7
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab8:	0bdb      	lsrs	r3, r3, #15
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	f003 0307 	and.w	r3, r3, #7
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	7e1b      	ldrb	r3, [r3, #24]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	3302      	adds	r3, #2
 800dadc:	2201      	movs	r2, #1
 800dade:	fa02 f303 	lsl.w	r3, r2, r3
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dae6:	fb02 f203 	mul.w	r2, r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	7a1b      	ldrb	r3, [r3, #8]
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	f003 030f 	and.w	r3, r3, #15
 800daf8:	2201      	movs	r2, #1
 800dafa:	409a      	lsls	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800db08:	0a52      	lsrs	r2, r2, #9
 800db0a:	fb02 f203 	mul.w	r2, r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db18:	661a      	str	r2, [r3, #96]	; 0x60
 800db1a:	e031      	b.n	800db80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db20:	2b01      	cmp	r3, #1
 800db22:	d11d      	bne.n	800db60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db28:	041b      	lsls	r3, r3, #16
 800db2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db32:	0c1b      	lsrs	r3, r3, #16
 800db34:	431a      	orrs	r2, r3
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	3301      	adds	r3, #1
 800db40:	029a      	lsls	r2, r3, #10
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	661a      	str	r2, [r3, #96]	; 0x60
 800db5e:	e00f      	b.n	800db80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a58      	ldr	r2, [pc, #352]	; (800dcc8 <HAL_SD_GetCardCSD+0x344>)
 800db66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e09d      	b.n	800dcbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db84:	0b9b      	lsrs	r3, r3, #14
 800db86:	b2db      	uxtb	r3, r3
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db96:	09db      	lsrs	r3, r3, #7
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb8:	0fdb      	lsrs	r3, r3, #31
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc4:	0f5b      	lsrs	r3, r3, #29
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f003 0303 	and.w	r3, r3, #3
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd6:	0e9b      	lsrs	r3, r3, #26
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	f003 0307 	and.w	r3, r3, #7
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe8:	0d9b      	lsrs	r3, r3, #22
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	f003 030f 	and.w	r3, r3, #15
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbfa:	0d5b      	lsrs	r3, r3, #21
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc16:	0c1b      	lsrs	r3, r3, #16
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc2a:	0bdb      	lsrs	r3, r3, #15
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc3e:	0b9b      	lsrs	r3, r3, #14
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	f003 0301 	and.w	r3, r3, #1
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc52:	0b5b      	lsrs	r3, r3, #13
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc66:	0b1b      	lsrs	r3, r3, #12
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc7a:	0a9b      	lsrs	r3, r3, #10
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	f003 0303 	and.w	r3, r3, #3
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	f003 0303 	and.w	r3, r3, #3
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dca2:	085b      	lsrs	r3, r3, #1
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	004005ff 	.word	0x004005ff

0800dccc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd24:	b5b0      	push	{r4, r5, r7, lr}
 800dd26:	b08e      	sub	sp, #56	; 0x38
 800dd28:	af04      	add	r7, sp, #16
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2203      	movs	r2, #3
 800dd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d02e      	beq.n	800dd9c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd44:	d106      	bne.n	800dd54 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	639a      	str	r2, [r3, #56]	; 0x38
 800dd52:	e029      	b.n	800dda8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd5a:	d10a      	bne.n	800dd72 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 fb0f 	bl	800e380 <SD_WideBus_Enable>
 800dd62:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	639a      	str	r2, [r3, #56]	; 0x38
 800dd70:	e01a      	b.n	800dda8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10a      	bne.n	800dd8e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fb4c 	bl	800e416 <SD_WideBus_Disable>
 800dd7e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	431a      	orrs	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	639a      	str	r2, [r3, #56]	; 0x38
 800dd8c:	e00c      	b.n	800dda8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	639a      	str	r2, [r3, #56]	; 0x38
 800dd9a:	e005      	b.n	800dda8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d009      	beq.n	800ddc4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a18      	ldr	r2, [pc, #96]	; (800de18 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ddb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e024      	b.n	800de0e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681d      	ldr	r5, [r3, #0]
 800ddea:	466c      	mov	r4, sp
 800ddec:	f107 0318 	add.w	r3, r7, #24
 800ddf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ddf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ddf8:	f107 030c 	add.w	r3, r7, #12
 800ddfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ddfe:	4628      	mov	r0, r5
 800de00:	f002 fcb2 	bl	8010768 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3728      	adds	r7, #40	; 0x28
 800de12:	46bd      	mov	sp, r7
 800de14:	bdb0      	pop	{r4, r5, r7, pc}
 800de16:	bf00      	nop
 800de18:	004005ff 	.word	0x004005ff

0800de1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800de24:	2300      	movs	r3, #0
 800de26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800de28:	f107 030c 	add.w	r3, r7, #12
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fa7e 	bl	800e330 <SD_SendStatus>
 800de34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d005      	beq.n	800de48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	431a      	orrs	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	0a5b      	lsrs	r3, r3, #9
 800de4c:	f003 030f 	and.w	r3, r3, #15
 800de50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de52:	693b      	ldr	r3, [r7, #16]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de68:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800de7a:	bf00      	nop
 800de7c:	3714      	adds	r7, #20
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b084      	sub	sp, #16
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de92:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de98:	2b82      	cmp	r3, #130	; 0x82
 800de9a:	d111      	bne.n	800dec0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f002 fde7 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800dea6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d008      	beq.n	800dec0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	431a      	orrs	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f7ff fd58 	bl	800d970 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f022 0208 	bic.w	r2, r2, #8
 800dece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f240 523a 	movw	r2, #1338	; 0x53a
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2201      	movs	r2, #1
 800dede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f003 fa3f 	bl	801136c <HAL_SD_RxCpltCallback>
#endif
}
 800deee:	bf00      	nop
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
	...

0800def8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df04:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7fd f848 	bl	800af9c <HAL_DMA_GetError>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b02      	cmp	r3, #2
 800df10:	d03e      	beq.n	800df90 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df18:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df20:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d002      	beq.n	800df2e <SD_DMAError+0x36>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d12d      	bne.n	800df8a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a19      	ldr	r2, [pc, #100]	; (800df98 <SD_DMAError+0xa0>)
 800df34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800df44:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800df52:	6978      	ldr	r0, [r7, #20]
 800df54:	f7ff ff62 	bl	800de1c <HAL_SD_GetCardState>
 800df58:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b06      	cmp	r3, #6
 800df5e:	d002      	beq.n	800df66 <SD_DMAError+0x6e>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b05      	cmp	r3, #5
 800df64:	d10a      	bne.n	800df7c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f002 fd82 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800df70:	4602      	mov	r2, r0
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	431a      	orrs	r2, r3
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2201      	movs	r2, #1
 800df80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2200      	movs	r2, #0
 800df88:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800df8a:	6978      	ldr	r0, [r7, #20]
 800df8c:	f7ff fcf0 	bl	800d970 <HAL_SD_ErrorCallback>
#endif
  }
}
 800df90:	bf00      	nop
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	004005ff 	.word	0x004005ff

0800df9c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfb2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff ff31 	bl	800de1c <HAL_SD_GetCardState>
 800dfba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2b06      	cmp	r3, #6
 800dfce:	d002      	beq.n	800dfd6 <SD_DMATxAbort+0x3a>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b05      	cmp	r3, #5
 800dfd4:	d10a      	bne.n	800dfec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f002 fd4a 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	431a      	orrs	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d103      	bne.n	800dffc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f003 f9a5 	bl	8011344 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dffa:	e002      	b.n	800e002 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f7ff fcb7 	bl	800d970 <HAL_SD_ErrorCallback>
}
 800e002:	bf00      	nop
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b084      	sub	sp, #16
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e016:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e020:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f7ff fefa 	bl	800de1c <HAL_SD_GetCardState>
 800e028:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b06      	cmp	r3, #6
 800e03c:	d002      	beq.n	800e044 <SD_DMARxAbort+0x3a>
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b05      	cmp	r3, #5
 800e042:	d10a      	bne.n	800e05a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4618      	mov	r0, r3
 800e04a:	f002 fd13 	bl	8010a74 <SDMMC_CmdStopTransfer>
 800e04e:	4602      	mov	r2, r0
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e054:	431a      	orrs	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d103      	bne.n	800e06a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f003 f96e 	bl	8011344 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e068:	e002      	b.n	800e070 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7ff fc80 	bl	800d970 <HAL_SD_ErrorCallback>
}
 800e070:	bf00      	nop
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e078:	b5b0      	push	{r4, r5, r7, lr}
 800e07a:	b094      	sub	sp, #80	; 0x50
 800e07c:	af04      	add	r7, sp, #16
 800e07e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e080:	2301      	movs	r3, #1
 800e082:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4618      	mov	r0, r3
 800e08a:	f002 fbc5 	bl	8010818 <SDIO_GetPowerState>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e094:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e098:	e0b7      	b.n	800e20a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d02f      	beq.n	800e102 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f002 fdee 	bl	8010c88 <SDMMC_CmdSendCID>
 800e0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <SD_InitCard+0x40>
    {
      return errorstate;
 800e0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b6:	e0a8      	b.n	800e20a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f002 fbef 	bl	80108a2 <SDIO_GetResponse>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2104      	movs	r1, #4
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f002 fbe6 	bl	80108a2 <SDIO_GetResponse>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2108      	movs	r1, #8
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f002 fbdd 	bl	80108a2 <SDIO_GetResponse>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	210c      	movs	r1, #12
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f002 fbd4 	bl	80108a2 <SDIO_GetResponse>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e106:	2b03      	cmp	r3, #3
 800e108:	d00d      	beq.n	800e126 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f107 020e 	add.w	r2, r7, #14
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f002 fdf4 	bl	8010d02 <SDMMC_CmdSetRelAdd>
 800e11a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <SD_InitCard+0xae>
    {
      return errorstate;
 800e122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e124:	e071      	b.n	800e20a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d036      	beq.n	800e19c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e12e:	89fb      	ldrh	r3, [r7, #14]
 800e130:	461a      	mov	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e13e:	041b      	lsls	r3, r3, #16
 800e140:	4619      	mov	r1, r3
 800e142:	4610      	mov	r0, r2
 800e144:	f002 fdbe 	bl	8010cc4 <SDMMC_CmdSendCSD>
 800e148:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e152:	e05a      	b.n	800e20a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2100      	movs	r1, #0
 800e15a:	4618      	mov	r0, r3
 800e15c:	f002 fba1 	bl	80108a2 <SDIO_GetResponse>
 800e160:	4602      	mov	r2, r0
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2104      	movs	r1, #4
 800e16c:	4618      	mov	r0, r3
 800e16e:	f002 fb98 	bl	80108a2 <SDIO_GetResponse>
 800e172:	4602      	mov	r2, r0
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2108      	movs	r1, #8
 800e17e:	4618      	mov	r0, r3
 800e180:	f002 fb8f 	bl	80108a2 <SDIO_GetResponse>
 800e184:	4602      	mov	r2, r0
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	210c      	movs	r1, #12
 800e190:	4618      	mov	r0, r3
 800e192:	f002 fb86 	bl	80108a2 <SDIO_GetResponse>
 800e196:	4602      	mov	r2, r0
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2104      	movs	r1, #4
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f002 fb7d 	bl	80108a2 <SDIO_GetResponse>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	0d1a      	lsrs	r2, r3, #20
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e1b0:	f107 0310 	add.w	r3, r7, #16
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7ff fbe4 	bl	800d984 <HAL_SD_GetCardCSD>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1c6:	e020      	b.n	800e20a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6819      	ldr	r1, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d0:	041b      	lsls	r3, r3, #16
 800e1d2:	f04f 0400 	mov.w	r4, #0
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4623      	mov	r3, r4
 800e1da:	4608      	mov	r0, r1
 800e1dc:	f002 fc6c 	bl	8010ab8 <SDMMC_CmdSelDesel>
 800e1e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <SD_InitCard+0x174>
  {
    return errorstate;
 800e1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ea:	e00e      	b.n	800e20a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681d      	ldr	r5, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	466c      	mov	r4, sp
 800e1f4:	f103 0210 	add.w	r2, r3, #16
 800e1f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800e1fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1fe:	3304      	adds	r3, #4
 800e200:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e202:	4628      	mov	r0, r5
 800e204:	f002 fab0 	bl	8010768 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3740      	adds	r7, #64	; 0x40
 800e20e:	46bd      	mov	sp, r7
 800e210:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e214 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e21c:	2300      	movs	r3, #0
 800e21e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e220:	2300      	movs	r3, #0
 800e222:	617b      	str	r3, [r7, #20]
 800e224:	2300      	movs	r3, #0
 800e226:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f002 fc66 	bl	8010afe <SDMMC_CmdGoIdleState>
 800e232:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	e072      	b.n	800e324 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4618      	mov	r0, r3
 800e244:	f002 fc79 	bl	8010b3a <SDMMC_CmdOperCond>
 800e248:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00d      	beq.n	800e26c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f002 fc4f 	bl	8010afe <SDMMC_CmdGoIdleState>
 800e260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d004      	beq.n	800e272 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	e05b      	b.n	800e324 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e276:	2b01      	cmp	r3, #1
 800e278:	d137      	bne.n	800e2ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f002 fc79 	bl	8010b78 <SDMMC_CmdAppCommand>
 800e286:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d02d      	beq.n	800e2ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e28e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e292:	e047      	b.n	800e324 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2100      	movs	r1, #0
 800e29a:	4618      	mov	r0, r3
 800e29c:	f002 fc6c 	bl	8010b78 <SDMMC_CmdAppCommand>
 800e2a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <SD_PowerON+0x98>
    {
      return errorstate;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	e03b      	b.n	800e324 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	491e      	ldr	r1, [pc, #120]	; (800e32c <SD_PowerON+0x118>)
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f002 fc82 	bl	8010bbc <SDMMC_CmdAppOperCommand>
 800e2b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2c4:	e02e      	b.n	800e324 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f002 fae8 	bl	80108a2 <SDIO_GetResponse>
 800e2d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	0fdb      	lsrs	r3, r3, #31
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d101      	bne.n	800e2e0 <SD_PowerON+0xcc>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e000      	b.n	800e2e2 <SD_PowerON+0xce>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	613b      	str	r3, [r7, #16]

    count++;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d802      	bhi.n	800e2fa <SD_PowerON+0xe6>
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d0cc      	beq.n	800e294 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e300:	4293      	cmp	r3, r2
 800e302:	d902      	bls.n	800e30a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e308:	e00c      	b.n	800e324 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d003      	beq.n	800e31c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	645a      	str	r2, [r3, #68]	; 0x44
 800e31a:	e002      	b.n	800e322 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3718      	adds	r7, #24
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	c1100000 	.word	0xc1100000

0800e330 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d102      	bne.n	800e346 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e344:	e018      	b.n	800e378 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e34e:	041b      	lsls	r3, r3, #16
 800e350:	4619      	mov	r1, r3
 800e352:	4610      	mov	r0, r2
 800e354:	f002 fcf6 	bl	8010d44 <SDMMC_CmdSendStatus>
 800e358:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	e009      	b.n	800e378 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2100      	movs	r1, #0
 800e36a:	4618      	mov	r0, r3
 800e36c:	f002 fa99 	bl	80108a2 <SDIO_GetResponse>
 800e370:	4602      	mov	r2, r0
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e388:	2300      	movs	r3, #0
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	2300      	movs	r3, #0
 800e38e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2100      	movs	r1, #0
 800e396:	4618      	mov	r0, r3
 800e398:	f002 fa83 	bl	80108a2 <SDIO_GetResponse>
 800e39c:	4603      	mov	r3, r0
 800e39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3a6:	d102      	bne.n	800e3ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ac:	e02f      	b.n	800e40e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3ae:	f107 030c 	add.w	r3, r7, #12
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 f879 	bl	800e4ac <SD_FindSCR>
 800e3ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	e023      	b.n	800e40e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d01c      	beq.n	800e40a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3d8:	041b      	lsls	r3, r3, #16
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f002 fbcb 	bl	8010b78 <SDMMC_CmdAppCommand>
 800e3e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	e00f      	b.n	800e40e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2102      	movs	r1, #2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f002 fc04 	bl	8010c02 <SDMMC_CmdBusWidth>
 800e3fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	e003      	b.n	800e40e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e406:	2300      	movs	r3, #0
 800e408:	e001      	b.n	800e40e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e40a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b086      	sub	sp, #24
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e41e:	2300      	movs	r3, #0
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	2300      	movs	r3, #0
 800e424:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2100      	movs	r1, #0
 800e42c:	4618      	mov	r0, r3
 800e42e:	f002 fa38 	bl	80108a2 <SDIO_GetResponse>
 800e432:	4603      	mov	r3, r0
 800e434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e43c:	d102      	bne.n	800e444 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e43e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e442:	e02f      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e444:	f107 030c 	add.w	r3, r7, #12
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f82e 	bl	800e4ac <SD_FindSCR>
 800e450:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	e023      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e462:	2b00      	cmp	r3, #0
 800e464:	d01c      	beq.n	800e4a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	4619      	mov	r1, r3
 800e472:	4610      	mov	r0, r2
 800e474:	f002 fb80 	bl	8010b78 <SDMMC_CmdAppCommand>
 800e478:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	e00f      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2100      	movs	r1, #0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f002 fbb9 	bl	8010c02 <SDMMC_CmdBusWidth>
 800e490:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	e003      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e49c:	2300      	movs	r3, #0
 800e49e:	e001      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4ac:	b590      	push	{r4, r7, lr}
 800e4ae:	b08f      	sub	sp, #60	; 0x3c
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4b6:	f7fb fd7b 	bl	8009fb0 <HAL_GetTick>
 800e4ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	60bb      	str	r3, [r7, #8]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2108      	movs	r1, #8
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f002 fa24 	bl	8010920 <SDMMC_CmdBlockLength>
 800e4d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	e0a9      	b.n	800e638 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ec:	041b      	lsls	r3, r3, #16
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	f002 fb41 	bl	8010b78 <SDMMC_CmdAppCommand>
 800e4f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	e09a      	b.n	800e638 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e502:	f04f 33ff 	mov.w	r3, #4294967295
 800e506:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e508:	2308      	movs	r3, #8
 800e50a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e50c:	2330      	movs	r3, #48	; 0x30
 800e50e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e510:	2302      	movs	r3, #2
 800e512:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e514:	2300      	movs	r3, #0
 800e516:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e518:	2301      	movs	r3, #1
 800e51a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f107 0210 	add.w	r2, r7, #16
 800e524:	4611      	mov	r1, r2
 800e526:	4618      	mov	r0, r3
 800e528:	f002 f9ce 	bl	80108c8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4618      	mov	r0, r3
 800e532:	f002 fb88 	bl	8010c46 <SDMMC_CmdSendSCR>
 800e536:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d022      	beq.n	800e584 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	e07a      	b.n	800e638 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00e      	beq.n	800e56e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6819      	ldr	r1, [r3, #0]
 800e554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	f107 0208 	add.w	r2, r7, #8
 800e55c:	18d4      	adds	r4, r2, r3
 800e55e:	4608      	mov	r0, r1
 800e560:	f002 f92d 	bl	80107be <SDIO_ReadFIFO>
 800e564:	4603      	mov	r3, r0
 800e566:	6023      	str	r3, [r4, #0]
      index++;
 800e568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56a:	3301      	adds	r3, #1
 800e56c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e56e:	f7fb fd1f 	bl	8009fb0 <HAL_GetTick>
 800e572:	4602      	mov	r2, r0
 800e574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57c:	d102      	bne.n	800e584 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e57e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e582:	e059      	b.n	800e638 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e58a:	f240 432a 	movw	r3, #1066	; 0x42a
 800e58e:	4013      	ands	r3, r2
 800e590:	2b00      	cmp	r3, #0
 800e592:	d0d6      	beq.n	800e542 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d005      	beq.n	800e5ae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2208      	movs	r2, #8
 800e5a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5aa:	2308      	movs	r3, #8
 800e5ac:	e044      	b.n	800e638 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d005      	beq.n	800e5c8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	e037      	b.n	800e638 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ce:	f003 0320 	and.w	r3, r3, #32
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d005      	beq.n	800e5e2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e5de:	2320      	movs	r3, #32
 800e5e0:	e02a      	b.n	800e638 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f240 523a 	movw	r2, #1338	; 0x53a
 800e5ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	061a      	lsls	r2, r3, #24
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	021b      	lsls	r3, r3, #8
 800e5f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	0a1b      	lsrs	r3, r3, #8
 800e5fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e602:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	0e1b      	lsrs	r3, r3, #24
 800e608:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	601a      	str	r2, [r3, #0]
    scr++;
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	3304      	adds	r3, #4
 800e612:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	061a      	lsls	r2, r3, #24
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	021b      	lsls	r3, r3, #8
 800e61c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e620:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	0a1b      	lsrs	r3, r3, #8
 800e626:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e62a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	0e1b      	lsrs	r3, r3, #24
 800e630:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	373c      	adds	r7, #60	; 0x3c
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd90      	pop	{r4, r7, pc}

0800e640 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e64c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e652:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d03f      	beq.n	800e6da <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e65a:	2300      	movs	r3, #0
 800e65c:	617b      	str	r3, [r7, #20]
 800e65e:	e033      	b.n	800e6c8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	f002 f8aa 	bl	80107be <SDIO_ReadFIFO>
 800e66a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	3301      	adds	r3, #1
 800e678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	0a1b      	lsrs	r3, r3, #8
 800e684:	b2da      	uxtb	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3301      	adds	r3, #1
 800e68e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	3b01      	subs	r3, #1
 800e694:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	0c1b      	lsrs	r3, r3, #16
 800e69a:	b2da      	uxtb	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	0e1b      	lsrs	r3, r3, #24
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2b07      	cmp	r3, #7
 800e6cc:	d9c8      	bls.n	800e660 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	693a      	ldr	r2, [r7, #16]
 800e6d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e6da:	bf00      	nop
 800e6dc:	3718      	adds	r7, #24
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b086      	sub	sp, #24
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d043      	beq.n	800e784 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	e037      	b.n	800e772 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3301      	adds	r3, #1
 800e70c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	3b01      	subs	r3, #1
 800e712:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	021a      	lsls	r2, r3, #8
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3301      	adds	r3, #1
 800e724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	3b01      	subs	r3, #1
 800e72a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	041a      	lsls	r2, r3, #16
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	4313      	orrs	r3, r2
 800e736:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3301      	adds	r3, #1
 800e73c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	3b01      	subs	r3, #1
 800e742:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	061a      	lsls	r2, r3, #24
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	3301      	adds	r3, #1
 800e754:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	3b01      	subs	r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f107 0208 	add.w	r2, r7, #8
 800e764:	4611      	mov	r1, r2
 800e766:	4618      	mov	r0, r3
 800e768:	f002 f836 	bl	80107d8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	3301      	adds	r3, #1
 800e770:	617b      	str	r3, [r7, #20]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	2b07      	cmp	r3, #7
 800e776:	d9c4      	bls.n	800e702 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e784:	bf00      	nop
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e056      	b.n	800e84c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d106      	bne.n	800e7be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7f8 fe9b 	bl	80074f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	685a      	ldr	r2, [r3, #4]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	431a      	orrs	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	431a      	orrs	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	431a      	orrs	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	699b      	ldr	r3, [r3, #24]
 800e7f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	431a      	orrs	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a1b      	ldr	r3, [r3, #32]
 800e806:	ea42 0103 	orr.w	r1, r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	430a      	orrs	r2, r1
 800e814:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	699b      	ldr	r3, [r3, #24]
 800e81a:	0c1b      	lsrs	r3, r3, #16
 800e81c:	f003 0104 	and.w	r1, r3, #4
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	430a      	orrs	r2, r1
 800e82a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	69da      	ldr	r2, [r3, #28]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e83a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b088      	sub	sp, #32
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	603b      	str	r3, [r7, #0]
 800e860:	4613      	mov	r3, r2
 800e862:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d101      	bne.n	800e876 <HAL_SPI_Transmit+0x22>
 800e872:	2302      	movs	r3, #2
 800e874:	e11e      	b.n	800eab4 <HAL_SPI_Transmit+0x260>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e87e:	f7fb fb97 	bl	8009fb0 <HAL_GetTick>
 800e882:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e884:	88fb      	ldrh	r3, [r7, #6]
 800e886:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b01      	cmp	r3, #1
 800e892:	d002      	beq.n	800e89a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e894:	2302      	movs	r3, #2
 800e896:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e898:	e103      	b.n	800eaa2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <HAL_SPI_Transmit+0x52>
 800e8a0:	88fb      	ldrh	r3, [r7, #6]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d102      	bne.n	800e8ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e8aa:	e0fa      	b.n	800eaa2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2203      	movs	r2, #3
 800e8b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	88fa      	ldrh	r2, [r7, #6]
 800e8c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	88fa      	ldrh	r2, [r7, #6]
 800e8ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8f2:	d107      	bne.n	800e904 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e90e:	2b40      	cmp	r3, #64	; 0x40
 800e910:	d007      	beq.n	800e922 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e92a:	d14b      	bne.n	800e9c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <HAL_SPI_Transmit+0xe6>
 800e934:	8afb      	ldrh	r3, [r7, #22]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d13e      	bne.n	800e9b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e93e:	881a      	ldrh	r2, [r3, #0]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e94a:	1c9a      	adds	r2, r3, #2
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e954:	b29b      	uxth	r3, r3
 800e956:	3b01      	subs	r3, #1
 800e958:	b29a      	uxth	r2, r3
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e95e:	e02b      	b.n	800e9b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	689b      	ldr	r3, [r3, #8]
 800e966:	f003 0302 	and.w	r3, r3, #2
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d112      	bne.n	800e994 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e972:	881a      	ldrh	r2, [r3, #0]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97e:	1c9a      	adds	r2, r3, #2
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e988:	b29b      	uxth	r3, r3
 800e98a:	3b01      	subs	r3, #1
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	86da      	strh	r2, [r3, #54]	; 0x36
 800e992:	e011      	b.n	800e9b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e994:	f7fb fb0c 	bl	8009fb0 <HAL_GetTick>
 800e998:	4602      	mov	r2, r0
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d803      	bhi.n	800e9ac <HAL_SPI_Transmit+0x158>
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9aa:	d102      	bne.n	800e9b2 <HAL_SPI_Transmit+0x15e>
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e9b6:	e074      	b.n	800eaa2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1ce      	bne.n	800e960 <HAL_SPI_Transmit+0x10c>
 800e9c2:	e04c      	b.n	800ea5e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <HAL_SPI_Transmit+0x17e>
 800e9cc:	8afb      	ldrh	r3, [r7, #22]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d140      	bne.n	800ea54 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	330c      	adds	r3, #12
 800e9dc:	7812      	ldrb	r2, [r2, #0]
 800e9de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e4:	1c5a      	adds	r2, r3, #1
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e9f8:	e02c      	b.n	800ea54 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	f003 0302 	and.w	r3, r3, #2
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	d113      	bne.n	800ea30 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	330c      	adds	r3, #12
 800ea12:	7812      	ldrb	r2, [r2, #0]
 800ea14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	3b01      	subs	r3, #1
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ea2e:	e011      	b.n	800ea54 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea30:	f7fb fabe 	bl	8009fb0 <HAL_GetTick>
 800ea34:	4602      	mov	r2, r0
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d803      	bhi.n	800ea48 <HAL_SPI_Transmit+0x1f4>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea46:	d102      	bne.n	800ea4e <HAL_SPI_Transmit+0x1fa>
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d102      	bne.n	800ea54 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ea52:	e026      	b.n	800eaa2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1cd      	bne.n	800e9fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea5e:	69ba      	ldr	r2, [r7, #24]
 800ea60:	6839      	ldr	r1, [r7, #0]
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f000 fba4 	bl	800f1b0 <SPI_EndRxTxTransaction>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2220      	movs	r2, #32
 800ea72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	613b      	str	r3, [r7, #16]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	613b      	str	r3, [r7, #16]
 800ea90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d002      	beq.n	800eaa0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	77fb      	strb	r3, [r7, #31]
 800ea9e:	e000      	b.n	800eaa2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800eaa0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eab2:	7ffb      	ldrb	r3, [r7, #31]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3720      	adds	r7, #32
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	4613      	mov	r3, r2
 800eaca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eacc:	2300      	movs	r3, #0
 800eace:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ead8:	d112      	bne.n	800eb00 <HAL_SPI_Receive+0x44>
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10e      	bne.n	800eb00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2204      	movs	r2, #4
 800eae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800eaea:	88fa      	ldrh	r2, [r7, #6]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	68b9      	ldr	r1, [r7, #8]
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f000 f8e9 	bl	800ecce <HAL_SPI_TransmitReceive>
 800eafc:	4603      	mov	r3, r0
 800eafe:	e0e2      	b.n	800ecc6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d101      	bne.n	800eb0e <HAL_SPI_Receive+0x52>
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	e0db      	b.n	800ecc6 <HAL_SPI_Receive+0x20a>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb16:	f7fb fa4b 	bl	8009fb0 <HAL_GetTick>
 800eb1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d002      	beq.n	800eb2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800eb28:	2302      	movs	r3, #2
 800eb2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb2c:	e0c2      	b.n	800ecb4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <HAL_SPI_Receive+0x7e>
 800eb34:	88fb      	ldrh	r3, [r7, #6]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d102      	bne.n	800eb40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb3e:	e0b9      	b.n	800ecb4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2204      	movs	r2, #4
 800eb44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	88fa      	ldrh	r2, [r7, #6]
 800eb58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	88fa      	ldrh	r2, [r7, #6]
 800eb5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb86:	d107      	bne.n	800eb98 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eb96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eba2:	2b40      	cmp	r3, #64	; 0x40
 800eba4:	d007      	beq.n	800ebb6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d162      	bne.n	800ec84 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ebbe:	e02e      	b.n	800ec1e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	f003 0301 	and.w	r3, r3, #1
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d115      	bne.n	800ebfa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f103 020c 	add.w	r2, r3, #12
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebda:	7812      	ldrb	r2, [r2, #0]
 800ebdc:	b2d2      	uxtb	r2, r2
 800ebde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebf8:	e011      	b.n	800ec1e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebfa:	f7fb f9d9 	bl	8009fb0 <HAL_GetTick>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d803      	bhi.n	800ec12 <HAL_SPI_Receive+0x156>
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec10:	d102      	bne.n	800ec18 <HAL_SPI_Receive+0x15c>
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d102      	bne.n	800ec1e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ec18:	2303      	movs	r3, #3
 800ec1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ec1c:	e04a      	b.n	800ecb4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1cb      	bne.n	800ebc0 <HAL_SPI_Receive+0x104>
 800ec28:	e031      	b.n	800ec8e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d113      	bne.n	800ec60 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68da      	ldr	r2, [r3, #12]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec42:	b292      	uxth	r2, r2
 800ec44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4a:	1c9a      	adds	r2, r3, #2
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3b01      	subs	r3, #1
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec5e:	e011      	b.n	800ec84 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec60:	f7fb f9a6 	bl	8009fb0 <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d803      	bhi.n	800ec78 <HAL_SPI_Receive+0x1bc>
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec76:	d102      	bne.n	800ec7e <HAL_SPI_Receive+0x1c2>
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ec82:	e017      	b.n	800ecb4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1cd      	bne.n	800ec2a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f000 fa27 	bl	800f0e6 <SPI_EndRxTransaction>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2220      	movs	r2, #32
 800eca2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ecac:	2301      	movs	r3, #1
 800ecae:	75fb      	strb	r3, [r7, #23]
 800ecb0:	e000      	b.n	800ecb4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ecb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ecc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b08c      	sub	sp, #48	; 0x30
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	60f8      	str	r0, [r7, #12]
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	607a      	str	r2, [r7, #4]
 800ecda:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ece0:	2300      	movs	r3, #0
 800ece2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d101      	bne.n	800ecf4 <HAL_SPI_TransmitReceive+0x26>
 800ecf0:	2302      	movs	r3, #2
 800ecf2:	e18a      	b.n	800f00a <HAL_SPI_TransmitReceive+0x33c>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ecfc:	f7fb f958 	bl	8009fb0 <HAL_GetTick>
 800ed00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ed12:	887b      	ldrh	r3, [r7, #2]
 800ed14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ed16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d00f      	beq.n	800ed3e <HAL_SPI_TransmitReceive+0x70>
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed24:	d107      	bne.n	800ed36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d103      	bne.n	800ed36 <HAL_SPI_TransmitReceive+0x68>
 800ed2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d003      	beq.n	800ed3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ed36:	2302      	movs	r3, #2
 800ed38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ed3c:	e15b      	b.n	800eff6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d005      	beq.n	800ed50 <HAL_SPI_TransmitReceive+0x82>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <HAL_SPI_TransmitReceive+0x82>
 800ed4a:	887b      	ldrh	r3, [r7, #2]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d103      	bne.n	800ed58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ed56:	e14e      	b.n	800eff6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	2b04      	cmp	r3, #4
 800ed62:	d003      	beq.n	800ed6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2205      	movs	r2, #5
 800ed68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	887a      	ldrh	r2, [r7, #2]
 800ed7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	887a      	ldrh	r2, [r7, #2]
 800ed82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	887a      	ldrh	r2, [r7, #2]
 800ed8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	887a      	ldrh	r2, [r7, #2]
 800ed94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edac:	2b40      	cmp	r3, #64	; 0x40
 800edae:	d007      	beq.n	800edc0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edc8:	d178      	bne.n	800eebc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <HAL_SPI_TransmitReceive+0x10a>
 800edd2:	8b7b      	ldrh	r3, [r7, #26]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d166      	bne.n	800eea6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eddc:	881a      	ldrh	r2, [r3, #0]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede8:	1c9a      	adds	r2, r3, #2
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	3b01      	subs	r3, #1
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edfc:	e053      	b.n	800eea6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	f003 0302 	and.w	r3, r3, #2
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d11b      	bne.n	800ee44 <HAL_SPI_TransmitReceive+0x176>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d016      	beq.n	800ee44 <HAL_SPI_TransmitReceive+0x176>
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d113      	bne.n	800ee44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee20:	881a      	ldrh	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2c:	1c9a      	adds	r2, r3, #2
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee40:	2300      	movs	r3, #0
 800ee42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	689b      	ldr	r3, [r3, #8]
 800ee4a:	f003 0301 	and.w	r3, r3, #1
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d119      	bne.n	800ee86 <HAL_SPI_TransmitReceive+0x1b8>
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d014      	beq.n	800ee86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68da      	ldr	r2, [r3, #12]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee66:	b292      	uxth	r2, r2
 800ee68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6e:	1c9a      	adds	r2, r3, #2
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee82:	2301      	movs	r3, #1
 800ee84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ee86:	f7fb f893 	bl	8009fb0 <HAL_GetTick>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d807      	bhi.n	800eea6 <HAL_SPI_TransmitReceive+0x1d8>
 800ee96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9c:	d003      	beq.n	800eea6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eea4:	e0a7      	b.n	800eff6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d1a6      	bne.n	800edfe <HAL_SPI_TransmitReceive+0x130>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1a1      	bne.n	800edfe <HAL_SPI_TransmitReceive+0x130>
 800eeba:	e07c      	b.n	800efb6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <HAL_SPI_TransmitReceive+0x1fc>
 800eec4:	8b7b      	ldrh	r3, [r7, #26]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d16b      	bne.n	800efa2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	330c      	adds	r3, #12
 800eed4:	7812      	ldrb	r2, [r2, #0]
 800eed6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eedc:	1c5a      	adds	r2, r3, #1
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	3b01      	subs	r3, #1
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eef0:	e057      	b.n	800efa2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	f003 0302 	and.w	r3, r3, #2
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d11c      	bne.n	800ef3a <HAL_SPI_TransmitReceive+0x26c>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d017      	beq.n	800ef3a <HAL_SPI_TransmitReceive+0x26c>
 800ef0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d114      	bne.n	800ef3a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	330c      	adds	r3, #12
 800ef1a:	7812      	ldrb	r2, [r2, #0]
 800ef1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef22:	1c5a      	adds	r2, r3, #1
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef36:	2300      	movs	r3, #0
 800ef38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d119      	bne.n	800ef7c <HAL_SPI_TransmitReceive+0x2ae>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d014      	beq.n	800ef7c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68da      	ldr	r2, [r3, #12]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef5c:	b2d2      	uxtb	r2, r2
 800ef5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	3b01      	subs	r3, #1
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ef7c:	f7fb f818 	bl	8009fb0 <HAL_GetTick>
 800ef80:	4602      	mov	r2, r0
 800ef82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d803      	bhi.n	800ef94 <HAL_SPI_TransmitReceive+0x2c6>
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	d102      	bne.n	800ef9a <HAL_SPI_TransmitReceive+0x2cc>
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d103      	bne.n	800efa2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ef9a:	2303      	movs	r3, #3
 800ef9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800efa0:	e029      	b.n	800eff6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1a2      	bne.n	800eef2 <HAL_SPI_TransmitReceive+0x224>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d19d      	bne.n	800eef2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800efb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f000 f8f8 	bl	800f1b0 <SPI_EndRxTxTransaction>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d006      	beq.n	800efd4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2220      	movs	r2, #32
 800efd0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800efd2:	e010      	b.n	800eff6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10b      	bne.n	800eff4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efdc:	2300      	movs	r3, #0
 800efde:	617b      	str	r3, [r7, #20]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	617b      	str	r3, [r7, #20]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	e000      	b.n	800eff6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800eff4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2201      	movs	r2, #1
 800effa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3730      	adds	r7, #48	; 0x30
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b084      	sub	sp, #16
 800f016:	af00      	add	r7, sp, #0
 800f018:	60f8      	str	r0, [r7, #12]
 800f01a:	60b9      	str	r1, [r7, #8]
 800f01c:	603b      	str	r3, [r7, #0]
 800f01e:	4613      	mov	r3, r2
 800f020:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f022:	e04c      	b.n	800f0be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f02a:	d048      	beq.n	800f0be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f02c:	f7fa ffc0 	bl	8009fb0 <HAL_GetTick>
 800f030:	4602      	mov	r2, r0
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	683a      	ldr	r2, [r7, #0]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d902      	bls.n	800f042 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d13d      	bne.n	800f0be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f05a:	d111      	bne.n	800f080 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f064:	d004      	beq.n	800f070 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f06e:	d107      	bne.n	800f080 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f07e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f088:	d10f      	bne.n	800f0aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f098:	601a      	str	r2, [r3, #0]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f0a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	e00f      	b.n	800f0de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	689a      	ldr	r2, [r3, #8]
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	4013      	ands	r3, r2
 800f0c8:	68ba      	ldr	r2, [r7, #8]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	bf0c      	ite	eq
 800f0ce:	2301      	moveq	r3, #1
 800f0d0:	2300      	movne	r3, #0
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	79fb      	ldrb	r3, [r7, #7]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d1a3      	bne.n	800f024 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b086      	sub	sp, #24
 800f0ea:	af02      	add	r7, sp, #8
 800f0ec:	60f8      	str	r0, [r7, #12]
 800f0ee:	60b9      	str	r1, [r7, #8]
 800f0f0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0fa:	d111      	bne.n	800f120 <SPI_EndRxTransaction+0x3a>
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f104:	d004      	beq.n	800f110 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f10e:	d107      	bne.n	800f120 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f11e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f128:	d12a      	bne.n	800f180 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	689b      	ldr	r3, [r3, #8]
 800f12e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f132:	d012      	beq.n	800f15a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2200      	movs	r2, #0
 800f13c:	2180      	movs	r1, #128	; 0x80
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f7ff ff67 	bl	800f012 <SPI_WaitFlagStateUntilTimeout>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d02d      	beq.n	800f1a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f14e:	f043 0220 	orr.w	r2, r3, #32
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f156:	2303      	movs	r3, #3
 800f158:	e026      	b.n	800f1a8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2200      	movs	r2, #0
 800f162:	2101      	movs	r1, #1
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff ff54 	bl	800f012 <SPI_WaitFlagStateUntilTimeout>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d01a      	beq.n	800f1a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f174:	f043 0220 	orr.w	r2, r3, #32
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e013      	b.n	800f1a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2200      	movs	r2, #0
 800f188:	2101      	movs	r1, #1
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f7ff ff41 	bl	800f012 <SPI_WaitFlagStateUntilTimeout>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d007      	beq.n	800f1a6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f19a:	f043 0220 	orr.w	r2, r3, #32
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f1a2:	2303      	movs	r3, #3
 800f1a4:	e000      	b.n	800f1a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f1bc:	4b1b      	ldr	r3, [pc, #108]	; (800f22c <SPI_EndRxTxTransaction+0x7c>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a1b      	ldr	r2, [pc, #108]	; (800f230 <SPI_EndRxTxTransaction+0x80>)
 800f1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c6:	0d5b      	lsrs	r3, r3, #21
 800f1c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1cc:	fb02 f303 	mul.w	r3, r2, r3
 800f1d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1da:	d112      	bne.n	800f202 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2180      	movs	r1, #128	; 0x80
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff ff13 	bl	800f012 <SPI_WaitFlagStateUntilTimeout>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d016      	beq.n	800f220 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f6:	f043 0220 	orr.w	r2, r3, #32
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e00f      	b.n	800f222 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00a      	beq.n	800f21e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f218:	2b80      	cmp	r3, #128	; 0x80
 800f21a:	d0f2      	beq.n	800f202 <SPI_EndRxTxTransaction+0x52>
 800f21c:	e000      	b.n	800f220 <SPI_EndRxTxTransaction+0x70>
        break;
 800f21e:	bf00      	nop
  }

  return HAL_OK;
 800f220:	2300      	movs	r3, #0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20000000 	.word	0x20000000
 800f230:	165e9f81 	.word	0x165e9f81

0800f234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f242:	2301      	movs	r3, #1
 800f244:	e01d      	b.n	800f282 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d106      	bne.n	800f260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7f8 fa06 	bl	800766c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2202      	movs	r2, #2
 800f264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	3304      	adds	r3, #4
 800f270:	4619      	mov	r1, r3
 800f272:	4610      	mov	r0, r2
 800f274:	f000 fb56 	bl	800f924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f280:	2300      	movs	r3, #0
}
 800f282:	4618      	mov	r0, r3
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f28a:	b480      	push	{r7}
 800f28c:	b085      	sub	sp, #20
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68da      	ldr	r2, [r3, #12]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f042 0201 	orr.w	r2, r2, #1
 800f2a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	f003 0307 	and.w	r3, r3, #7
 800f2ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2b06      	cmp	r3, #6
 800f2b2:	d007      	beq.n	800f2c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f042 0201 	orr.w	r2, r2, #1
 800f2c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3714      	adds	r7, #20
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b082      	sub	sp, #8
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e01d      	b.n	800f320 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d106      	bne.n	800f2fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7f8 f943 	bl	8007584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2202      	movs	r2, #2
 800f302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	3304      	adds	r3, #4
 800f30e:	4619      	mov	r1, r3
 800f310:	4610      	mov	r0, r2
 800f312:	f000 fb07 	bl	800f924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2201      	movs	r2, #1
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 fd42 	bl	800fdc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4a15      	ldr	r2, [pc, #84]	; (800f39c <HAL_TIM_PWM_Start+0x74>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d004      	beq.n	800f354 <HAL_TIM_PWM_Start+0x2c>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4a14      	ldr	r2, [pc, #80]	; (800f3a0 <HAL_TIM_PWM_Start+0x78>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d101      	bne.n	800f358 <HAL_TIM_PWM_Start+0x30>
 800f354:	2301      	movs	r3, #1
 800f356:	e000      	b.n	800f35a <HAL_TIM_PWM_Start+0x32>
 800f358:	2300      	movs	r3, #0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d007      	beq.n	800f36e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f36c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	f003 0307 	and.w	r3, r3, #7
 800f378:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b06      	cmp	r3, #6
 800f37e:	d007      	beq.n	800f390 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f042 0201 	orr.w	r2, r2, #1
 800f38e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	40010000 	.word	0x40010000
 800f3a0:	40010400 	.word	0x40010400

0800f3a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e083      	b.n	800f4c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d106      	bne.n	800f3d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7f8 f9dd 	bl	800778c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2202      	movs	r2, #2
 800f3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	6812      	ldr	r2, [r2, #0]
 800f3e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3e8:	f023 0307 	bic.w	r3, r3, #7
 800f3ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	4610      	mov	r0, r2
 800f3fa:	f000 fa93 	bl	800f924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	6a1b      	ldr	r3, [r3, #32]
 800f414:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f426:	f023 0303 	bic.w	r3, r3, #3
 800f42a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	689a      	ldr	r2, [r3, #8]
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	699b      	ldr	r3, [r3, #24]
 800f434:	021b      	lsls	r3, r3, #8
 800f436:	4313      	orrs	r3, r2
 800f438:	693a      	ldr	r2, [r7, #16]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f444:	f023 030c 	bic.w	r3, r3, #12
 800f448:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	68da      	ldr	r2, [r3, #12]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	69db      	ldr	r3, [r3, #28]
 800f45e:	021b      	lsls	r3, r3, #8
 800f460:	4313      	orrs	r3, r2
 800f462:	693a      	ldr	r2, [r7, #16]
 800f464:	4313      	orrs	r3, r2
 800f466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	691b      	ldr	r3, [r3, #16]
 800f46c:	011a      	lsls	r2, r3, #4
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	031b      	lsls	r3, r3, #12
 800f474:	4313      	orrs	r3, r2
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	4313      	orrs	r3, r2
 800f47a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f482:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f48a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	685a      	ldr	r2, [r3, #4]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	695b      	ldr	r3, [r3, #20]
 800f494:	011b      	lsls	r3, r3, #4
 800f496:	4313      	orrs	r3, r2
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	4313      	orrs	r3, r2
 800f49c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	693a      	ldr	r2, [r7, #16]
 800f4ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3718      	adds	r7, #24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d002      	beq.n	800f4de <HAL_TIM_Encoder_Start+0x16>
 800f4d8:	2b04      	cmp	r3, #4
 800f4da:	d008      	beq.n	800f4ee <HAL_TIM_Encoder_Start+0x26>
 800f4dc:	e00f      	b.n	800f4fe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 fc6c 	bl	800fdc4 <TIM_CCxChannelCmd>
      break;
 800f4ec:	e016      	b.n	800f51c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	2104      	movs	r1, #4
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 fc64 	bl	800fdc4 <TIM_CCxChannelCmd>
      break;
 800f4fc:	e00e      	b.n	800f51c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2201      	movs	r2, #1
 800f504:	2100      	movs	r1, #0
 800f506:	4618      	mov	r0, r3
 800f508:	f000 fc5c 	bl	800fdc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2201      	movs	r2, #1
 800f512:	2104      	movs	r1, #4
 800f514:	4618      	mov	r0, r3
 800f516:	f000 fc55 	bl	800fdc4 <TIM_CCxChannelCmd>
      break;
 800f51a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f042 0201 	orr.w	r2, r2, #1
 800f52a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}

0800f536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f536:	b580      	push	{r7, lr}
 800f538:	b082      	sub	sp, #8
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	f003 0302 	and.w	r3, r3, #2
 800f548:	2b02      	cmp	r3, #2
 800f54a:	d122      	bne.n	800f592 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	f003 0302 	and.w	r3, r3, #2
 800f556:	2b02      	cmp	r3, #2
 800f558:	d11b      	bne.n	800f592 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f06f 0202 	mvn.w	r2, #2
 800f562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	699b      	ldr	r3, [r3, #24]
 800f570:	f003 0303 	and.w	r3, r3, #3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d003      	beq.n	800f580 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 f9b5 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f57e:	e005      	b.n	800f58c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f9a7 	bl	800f8d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f9b8 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	f003 0304 	and.w	r3, r3, #4
 800f59c:	2b04      	cmp	r3, #4
 800f59e:	d122      	bne.n	800f5e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	f003 0304 	and.w	r3, r3, #4
 800f5aa:	2b04      	cmp	r3, #4
 800f5ac:	d11b      	bne.n	800f5e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f06f 0204 	mvn.w	r2, #4
 800f5b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	699b      	ldr	r3, [r3, #24]
 800f5c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 f98b 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f5d2:	e005      	b.n	800f5e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f97d 	bl	800f8d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f98e 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	691b      	ldr	r3, [r3, #16]
 800f5ec:	f003 0308 	and.w	r3, r3, #8
 800f5f0:	2b08      	cmp	r3, #8
 800f5f2:	d122      	bne.n	800f63a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	f003 0308 	and.w	r3, r3, #8
 800f5fe:	2b08      	cmp	r3, #8
 800f600:	d11b      	bne.n	800f63a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f06f 0208 	mvn.w	r2, #8
 800f60a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2204      	movs	r2, #4
 800f610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	69db      	ldr	r3, [r3, #28]
 800f618:	f003 0303 	and.w	r3, r3, #3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d003      	beq.n	800f628 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 f961 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f626:	e005      	b.n	800f634 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 f953 	bl	800f8d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f964 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	f003 0310 	and.w	r3, r3, #16
 800f644:	2b10      	cmp	r3, #16
 800f646:	d122      	bne.n	800f68e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	f003 0310 	and.w	r3, r3, #16
 800f652:	2b10      	cmp	r3, #16
 800f654:	d11b      	bne.n	800f68e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f06f 0210 	mvn.w	r2, #16
 800f65e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2208      	movs	r2, #8
 800f664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f670:	2b00      	cmp	r3, #0
 800f672:	d003      	beq.n	800f67c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f937 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f67a:	e005      	b.n	800f688 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 f929 	bl	800f8d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f93a 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	691b      	ldr	r3, [r3, #16]
 800f694:	f003 0301 	and.w	r3, r3, #1
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d10e      	bne.n	800f6ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d107      	bne.n	800f6ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f06f 0201 	mvn.w	r2, #1
 800f6b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f6 fd53 	bl	8006160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6c4:	2b80      	cmp	r3, #128	; 0x80
 800f6c6:	d10e      	bne.n	800f6e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6d2:	2b80      	cmp	r3, #128	; 0x80
 800f6d4:	d107      	bne.n	800f6e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 fc6d 	bl	800ffc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6f0:	2b40      	cmp	r3, #64	; 0x40
 800f6f2:	d10e      	bne.n	800f712 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6fe:	2b40      	cmp	r3, #64	; 0x40
 800f700:	d107      	bne.n	800f712 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 f8ff 	bl	800f910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	691b      	ldr	r3, [r3, #16]
 800f718:	f003 0320 	and.w	r3, r3, #32
 800f71c:	2b20      	cmp	r3, #32
 800f71e:	d10e      	bne.n	800f73e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	f003 0320 	and.w	r3, r3, #32
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	d107      	bne.n	800f73e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f06f 0220 	mvn.w	r2, #32
 800f736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 fc37 	bl	800ffac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f73e:	bf00      	nop
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
	...

0800f748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d101      	bne.n	800f762 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f75e:	2302      	movs	r3, #2
 800f760:	e0b4      	b.n	800f8cc <HAL_TIM_PWM_ConfigChannel+0x184>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2201      	movs	r2, #1
 800f766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2202      	movs	r2, #2
 800f76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b0c      	cmp	r3, #12
 800f776:	f200 809f 	bhi.w	800f8b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f77a:	a201      	add	r2, pc, #4	; (adr r2, 800f780 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f780:	0800f7b5 	.word	0x0800f7b5
 800f784:	0800f8b9 	.word	0x0800f8b9
 800f788:	0800f8b9 	.word	0x0800f8b9
 800f78c:	0800f8b9 	.word	0x0800f8b9
 800f790:	0800f7f5 	.word	0x0800f7f5
 800f794:	0800f8b9 	.word	0x0800f8b9
 800f798:	0800f8b9 	.word	0x0800f8b9
 800f79c:	0800f8b9 	.word	0x0800f8b9
 800f7a0:	0800f837 	.word	0x0800f837
 800f7a4:	0800f8b9 	.word	0x0800f8b9
 800f7a8:	0800f8b9 	.word	0x0800f8b9
 800f7ac:	0800f8b9 	.word	0x0800f8b9
 800f7b0:	0800f877 	.word	0x0800f877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	68b9      	ldr	r1, [r7, #8]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 f952 	bl	800fa64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	699a      	ldr	r2, [r3, #24]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f042 0208 	orr.w	r2, r2, #8
 800f7ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	699a      	ldr	r2, [r3, #24]
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f022 0204 	bic.w	r2, r2, #4
 800f7de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	6999      	ldr	r1, [r3, #24]
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	691a      	ldr	r2, [r3, #16]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	430a      	orrs	r2, r1
 800f7f0:	619a      	str	r2, [r3, #24]
      break;
 800f7f2:	e062      	b.n	800f8ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68b9      	ldr	r1, [r7, #8]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 f9a2 	bl	800fb44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	699a      	ldr	r2, [r3, #24]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f80e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	699a      	ldr	r2, [r3, #24]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f81e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	6999      	ldr	r1, [r3, #24]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	021a      	lsls	r2, r3, #8
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	430a      	orrs	r2, r1
 800f832:	619a      	str	r2, [r3, #24]
      break;
 800f834:	e041      	b.n	800f8ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	68b9      	ldr	r1, [r7, #8]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f000 f9f7 	bl	800fc30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	69da      	ldr	r2, [r3, #28]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f042 0208 	orr.w	r2, r2, #8
 800f850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	69da      	ldr	r2, [r3, #28]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f022 0204 	bic.w	r2, r2, #4
 800f860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	69d9      	ldr	r1, [r3, #28]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	691a      	ldr	r2, [r3, #16]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	430a      	orrs	r2, r1
 800f872:	61da      	str	r2, [r3, #28]
      break;
 800f874:	e021      	b.n	800f8ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	68b9      	ldr	r1, [r7, #8]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 fa4b 	bl	800fd18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	69da      	ldr	r2, [r3, #28]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	69da      	ldr	r2, [r3, #28]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	69d9      	ldr	r1, [r3, #28]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	021a      	lsls	r2, r3, #8
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	61da      	str	r2, [r3, #28]
      break;
 800f8b6:	e000      	b.n	800f8ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f8b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a40      	ldr	r2, [pc, #256]	; (800fa38 <TIM_Base_SetConfig+0x114>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d013      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f942:	d00f      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a3d      	ldr	r2, [pc, #244]	; (800fa3c <TIM_Base_SetConfig+0x118>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d00b      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a3c      	ldr	r2, [pc, #240]	; (800fa40 <TIM_Base_SetConfig+0x11c>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d007      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a3b      	ldr	r2, [pc, #236]	; (800fa44 <TIM_Base_SetConfig+0x120>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d003      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a3a      	ldr	r2, [pc, #232]	; (800fa48 <TIM_Base_SetConfig+0x124>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d108      	bne.n	800f976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f96a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	4313      	orrs	r3, r2
 800f974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a2f      	ldr	r2, [pc, #188]	; (800fa38 <TIM_Base_SetConfig+0x114>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d02b      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f984:	d027      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a2c      	ldr	r2, [pc, #176]	; (800fa3c <TIM_Base_SetConfig+0x118>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d023      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a2b      	ldr	r2, [pc, #172]	; (800fa40 <TIM_Base_SetConfig+0x11c>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d01f      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a2a      	ldr	r2, [pc, #168]	; (800fa44 <TIM_Base_SetConfig+0x120>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d01b      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a29      	ldr	r2, [pc, #164]	; (800fa48 <TIM_Base_SetConfig+0x124>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d017      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a28      	ldr	r2, [pc, #160]	; (800fa4c <TIM_Base_SetConfig+0x128>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d013      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a27      	ldr	r2, [pc, #156]	; (800fa50 <TIM_Base_SetConfig+0x12c>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d00f      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4a26      	ldr	r2, [pc, #152]	; (800fa54 <TIM_Base_SetConfig+0x130>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d00b      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4a25      	ldr	r2, [pc, #148]	; (800fa58 <TIM_Base_SetConfig+0x134>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d007      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4a24      	ldr	r2, [pc, #144]	; (800fa5c <TIM_Base_SetConfig+0x138>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d003      	beq.n	800f9d6 <TIM_Base_SetConfig+0xb2>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4a23      	ldr	r2, [pc, #140]	; (800fa60 <TIM_Base_SetConfig+0x13c>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d108      	bne.n	800f9e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	695b      	ldr	r3, [r3, #20]
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	689a      	ldr	r2, [r3, #8]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a0a      	ldr	r2, [pc, #40]	; (800fa38 <TIM_Base_SetConfig+0x114>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d003      	beq.n	800fa1c <TIM_Base_SetConfig+0xf8>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a0c      	ldr	r2, [pc, #48]	; (800fa48 <TIM_Base_SetConfig+0x124>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d103      	bne.n	800fa24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	691a      	ldr	r2, [r3, #16]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	615a      	str	r2, [r3, #20]
}
 800fa2a:	bf00      	nop
 800fa2c:	3714      	adds	r7, #20
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	40010000 	.word	0x40010000
 800fa3c:	40000400 	.word	0x40000400
 800fa40:	40000800 	.word	0x40000800
 800fa44:	40000c00 	.word	0x40000c00
 800fa48:	40010400 	.word	0x40010400
 800fa4c:	40014000 	.word	0x40014000
 800fa50:	40014400 	.word	0x40014400
 800fa54:	40014800 	.word	0x40014800
 800fa58:	40001800 	.word	0x40001800
 800fa5c:	40001c00 	.word	0x40001c00
 800fa60:	40002000 	.word	0x40002000

0800fa64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b087      	sub	sp, #28
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6a1b      	ldr	r3, [r3, #32]
 800fa72:	f023 0201 	bic.w	r2, r3, #1
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6a1b      	ldr	r3, [r3, #32]
 800fa7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	699b      	ldr	r3, [r3, #24]
 800fa8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f023 0303 	bic.w	r3, r3, #3
 800fa9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	f023 0302 	bic.w	r3, r3, #2
 800faac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	697a      	ldr	r2, [r7, #20]
 800fab4:	4313      	orrs	r3, r2
 800fab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4a20      	ldr	r2, [pc, #128]	; (800fb3c <TIM_OC1_SetConfig+0xd8>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d003      	beq.n	800fac8 <TIM_OC1_SetConfig+0x64>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4a1f      	ldr	r2, [pc, #124]	; (800fb40 <TIM_OC1_SetConfig+0xdc>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d10c      	bne.n	800fae2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f023 0308 	bic.w	r3, r3, #8
 800face:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	4313      	orrs	r3, r2
 800fad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	f023 0304 	bic.w	r3, r3, #4
 800fae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a15      	ldr	r2, [pc, #84]	; (800fb3c <TIM_OC1_SetConfig+0xd8>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d003      	beq.n	800faf2 <TIM_OC1_SetConfig+0x8e>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4a14      	ldr	r2, [pc, #80]	; (800fb40 <TIM_OC1_SetConfig+0xdc>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d111      	bne.n	800fb16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800faf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	695b      	ldr	r3, [r3, #20]
 800fb06:	693a      	ldr	r2, [r7, #16]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	693a      	ldr	r2, [r7, #16]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	697a      	ldr	r2, [r7, #20]
 800fb2e:	621a      	str	r2, [r3, #32]
}
 800fb30:	bf00      	nop
 800fb32:	371c      	adds	r7, #28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	40010000 	.word	0x40010000
 800fb40:	40010400 	.word	0x40010400

0800fb44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b087      	sub	sp, #28
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6a1b      	ldr	r3, [r3, #32]
 800fb52:	f023 0210 	bic.w	r2, r3, #16
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a1b      	ldr	r3, [r3, #32]
 800fb5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	021b      	lsls	r3, r3, #8
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	4313      	orrs	r3, r2
 800fb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	f023 0320 	bic.w	r3, r3, #32
 800fb8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	011b      	lsls	r3, r3, #4
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4a22      	ldr	r2, [pc, #136]	; (800fc28 <TIM_OC2_SetConfig+0xe4>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d003      	beq.n	800fbac <TIM_OC2_SetConfig+0x68>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	4a21      	ldr	r2, [pc, #132]	; (800fc2c <TIM_OC2_SetConfig+0xe8>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d10d      	bne.n	800fbc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	011b      	lsls	r3, r3, #4
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a17      	ldr	r2, [pc, #92]	; (800fc28 <TIM_OC2_SetConfig+0xe4>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d003      	beq.n	800fbd8 <TIM_OC2_SetConfig+0x94>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a16      	ldr	r2, [pc, #88]	; (800fc2c <TIM_OC2_SetConfig+0xe8>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d113      	bne.n	800fc00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	693a      	ldr	r2, [r7, #16]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	699b      	ldr	r3, [r3, #24]
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	693a      	ldr	r2, [r7, #16]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	697a      	ldr	r2, [r7, #20]
 800fc18:	621a      	str	r2, [r3, #32]
}
 800fc1a:	bf00      	nop
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	40010000 	.word	0x40010000
 800fc2c:	40010400 	.word	0x40010400

0800fc30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a1b      	ldr	r3, [r3, #32]
 800fc4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	69db      	ldr	r3, [r3, #28]
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f023 0303 	bic.w	r3, r3, #3
 800fc66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	021b      	lsls	r3, r3, #8
 800fc80:	697a      	ldr	r2, [r7, #20]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4a21      	ldr	r2, [pc, #132]	; (800fd10 <TIM_OC3_SetConfig+0xe0>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d003      	beq.n	800fc96 <TIM_OC3_SetConfig+0x66>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a20      	ldr	r2, [pc, #128]	; (800fd14 <TIM_OC3_SetConfig+0xe4>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d10d      	bne.n	800fcb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	021b      	lsls	r3, r3, #8
 800fca4:	697a      	ldr	r2, [r7, #20]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fcb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a16      	ldr	r2, [pc, #88]	; (800fd10 <TIM_OC3_SetConfig+0xe0>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d003      	beq.n	800fcc2 <TIM_OC3_SetConfig+0x92>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a15      	ldr	r2, [pc, #84]	; (800fd14 <TIM_OC3_SetConfig+0xe4>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d113      	bne.n	800fcea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	011b      	lsls	r3, r3, #4
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	011b      	lsls	r3, r3, #4
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	693a      	ldr	r2, [r7, #16]
 800fcee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	68fa      	ldr	r2, [r7, #12]
 800fcf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	685a      	ldr	r2, [r3, #4]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	697a      	ldr	r2, [r7, #20]
 800fd02:	621a      	str	r2, [r3, #32]
}
 800fd04:	bf00      	nop
 800fd06:	371c      	adds	r7, #28
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	40010000 	.word	0x40010000
 800fd14:	40010400 	.word	0x40010400

0800fd18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b087      	sub	sp, #28
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a1b      	ldr	r3, [r3, #32]
 800fd26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	021b      	lsls	r3, r3, #8
 800fd56:	68fa      	ldr	r2, [r7, #12]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	689b      	ldr	r3, [r3, #8]
 800fd68:	031b      	lsls	r3, r3, #12
 800fd6a:	693a      	ldr	r2, [r7, #16]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a12      	ldr	r2, [pc, #72]	; (800fdbc <TIM_OC4_SetConfig+0xa4>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d003      	beq.n	800fd80 <TIM_OC4_SetConfig+0x68>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a11      	ldr	r2, [pc, #68]	; (800fdc0 <TIM_OC4_SetConfig+0xa8>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d109      	bne.n	800fd94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	695b      	ldr	r3, [r3, #20]
 800fd8c:	019b      	lsls	r3, r3, #6
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	693a      	ldr	r2, [r7, #16]
 800fdac:	621a      	str	r2, [r3, #32]
}
 800fdae:	bf00      	nop
 800fdb0:	371c      	adds	r7, #28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	40010000 	.word	0x40010000
 800fdc0:	40010400 	.word	0x40010400

0800fdc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	f003 031f 	and.w	r3, r3, #31
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	fa02 f303 	lsl.w	r3, r2, r3
 800fddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6a1a      	ldr	r2, [r3, #32]
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	43db      	mvns	r3, r3
 800fde6:	401a      	ands	r2, r3
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6a1a      	ldr	r2, [r3, #32]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	f003 031f 	and.w	r3, r3, #31
 800fdf6:	6879      	ldr	r1, [r7, #4]
 800fdf8:	fa01 f303 	lsl.w	r3, r1, r3
 800fdfc:	431a      	orrs	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	621a      	str	r2, [r3, #32]
}
 800fe02:	bf00      	nop
 800fe04:	371c      	adds	r7, #28
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
	...

0800fe10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d101      	bne.n	800fe28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe24:	2302      	movs	r3, #2
 800fe26:	e05a      	b.n	800fede <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2202      	movs	r2, #2
 800fe34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a21      	ldr	r2, [pc, #132]	; (800feec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d022      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe74:	d01d      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a1d      	ldr	r2, [pc, #116]	; (800fef0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d018      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a1b      	ldr	r2, [pc, #108]	; (800fef4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d013      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a1a      	ldr	r2, [pc, #104]	; (800fef8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d00e      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a18      	ldr	r2, [pc, #96]	; (800fefc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d009      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a17      	ldr	r2, [pc, #92]	; (800ff00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d004      	beq.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a15      	ldr	r2, [pc, #84]	; (800ff04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d10c      	bne.n	800fecc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800feb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	4313      	orrs	r3, r2
 800fec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2201      	movs	r2, #1
 800fed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fedc:	2300      	movs	r3, #0
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3714      	adds	r7, #20
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	40010000 	.word	0x40010000
 800fef0:	40000400 	.word	0x40000400
 800fef4:	40000800 	.word	0x40000800
 800fef8:	40000c00 	.word	0x40000c00
 800fefc:	40010400 	.word	0x40010400
 800ff00:	40014000 	.word	0x40014000
 800ff04:	40001800 	.word	0x40001800

0800ff08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ff12:	2300      	movs	r3, #0
 800ff14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d101      	bne.n	800ff24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ff20:	2302      	movs	r3, #2
 800ff22:	e03d      	b.n	800ffa0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	4313      	orrs	r3, r2
 800ff38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	4313      	orrs	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	4313      	orrs	r3, r2
 800ff54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4313      	orrs	r3, r2
 800ff62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	695b      	ldr	r3, [r3, #20]
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	69db      	ldr	r3, [r3, #28]
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68fa      	ldr	r2, [r7, #12]
 800ff94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3714      	adds	r7, #20
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ffc8:	bf00      	nop
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d101      	bne.n	800ffe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e03f      	b.n	8010066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d106      	bne.n	8010000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7f7 fcf0 	bl	80079e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2224      	movs	r2, #36	; 0x24
 8010004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68da      	ldr	r2, [r3, #12]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f829 	bl	8010070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	691a      	ldr	r2, [r3, #16]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801002c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	695a      	ldr	r2, [r3, #20]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801003c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68da      	ldr	r2, [r3, #12]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801004c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2220      	movs	r2, #32
 8010058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2220      	movs	r2, #32
 8010060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	b085      	sub	sp, #20
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	691b      	ldr	r3, [r3, #16]
 8010080:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	68da      	ldr	r2, [r3, #12]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	430a      	orrs	r2, r1
 801008e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	689a      	ldr	r2, [r3, #8]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	431a      	orrs	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	431a      	orrs	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	69db      	ldr	r3, [r3, #28]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80100b2:	f023 030c 	bic.w	r3, r3, #12
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	6812      	ldr	r2, [r2, #0]
 80100ba:	68f9      	ldr	r1, [r7, #12]
 80100bc:	430b      	orrs	r3, r1
 80100be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	695b      	ldr	r3, [r3, #20]
 80100c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	699a      	ldr	r2, [r3, #24]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	430a      	orrs	r2, r1
 80100d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	69db      	ldr	r3, [r3, #28]
 80100da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100de:	f040 818b 	bne.w	80103f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4ac1      	ldr	r2, [pc, #772]	; (80103ec <UART_SetConfig+0x37c>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d005      	beq.n	80100f8 <UART_SetConfig+0x88>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4abf      	ldr	r2, [pc, #764]	; (80103f0 <UART_SetConfig+0x380>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	f040 80bd 	bne.w	8010272 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80100f8:	f7fc fbcc 	bl	800c894 <HAL_RCC_GetPCLK2Freq>
 80100fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	461d      	mov	r5, r3
 8010102:	f04f 0600 	mov.w	r6, #0
 8010106:	46a8      	mov	r8, r5
 8010108:	46b1      	mov	r9, r6
 801010a:	eb18 0308 	adds.w	r3, r8, r8
 801010e:	eb49 0409 	adc.w	r4, r9, r9
 8010112:	4698      	mov	r8, r3
 8010114:	46a1      	mov	r9, r4
 8010116:	eb18 0805 	adds.w	r8, r8, r5
 801011a:	eb49 0906 	adc.w	r9, r9, r6
 801011e:	f04f 0100 	mov.w	r1, #0
 8010122:	f04f 0200 	mov.w	r2, #0
 8010126:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801012a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801012e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010132:	4688      	mov	r8, r1
 8010134:	4691      	mov	r9, r2
 8010136:	eb18 0005 	adds.w	r0, r8, r5
 801013a:	eb49 0106 	adc.w	r1, r9, r6
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	461d      	mov	r5, r3
 8010144:	f04f 0600 	mov.w	r6, #0
 8010148:	196b      	adds	r3, r5, r5
 801014a:	eb46 0406 	adc.w	r4, r6, r6
 801014e:	461a      	mov	r2, r3
 8010150:	4623      	mov	r3, r4
 8010152:	f7f0 fdb1 	bl	8000cb8 <__aeabi_uldivmod>
 8010156:	4603      	mov	r3, r0
 8010158:	460c      	mov	r4, r1
 801015a:	461a      	mov	r2, r3
 801015c:	4ba5      	ldr	r3, [pc, #660]	; (80103f4 <UART_SetConfig+0x384>)
 801015e:	fba3 2302 	umull	r2, r3, r3, r2
 8010162:	095b      	lsrs	r3, r3, #5
 8010164:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	461d      	mov	r5, r3
 801016c:	f04f 0600 	mov.w	r6, #0
 8010170:	46a9      	mov	r9, r5
 8010172:	46b2      	mov	sl, r6
 8010174:	eb19 0309 	adds.w	r3, r9, r9
 8010178:	eb4a 040a 	adc.w	r4, sl, sl
 801017c:	4699      	mov	r9, r3
 801017e:	46a2      	mov	sl, r4
 8010180:	eb19 0905 	adds.w	r9, r9, r5
 8010184:	eb4a 0a06 	adc.w	sl, sl, r6
 8010188:	f04f 0100 	mov.w	r1, #0
 801018c:	f04f 0200 	mov.w	r2, #0
 8010190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010194:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010198:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801019c:	4689      	mov	r9, r1
 801019e:	4692      	mov	sl, r2
 80101a0:	eb19 0005 	adds.w	r0, r9, r5
 80101a4:	eb4a 0106 	adc.w	r1, sl, r6
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	461d      	mov	r5, r3
 80101ae:	f04f 0600 	mov.w	r6, #0
 80101b2:	196b      	adds	r3, r5, r5
 80101b4:	eb46 0406 	adc.w	r4, r6, r6
 80101b8:	461a      	mov	r2, r3
 80101ba:	4623      	mov	r3, r4
 80101bc:	f7f0 fd7c 	bl	8000cb8 <__aeabi_uldivmod>
 80101c0:	4603      	mov	r3, r0
 80101c2:	460c      	mov	r4, r1
 80101c4:	461a      	mov	r2, r3
 80101c6:	4b8b      	ldr	r3, [pc, #556]	; (80103f4 <UART_SetConfig+0x384>)
 80101c8:	fba3 1302 	umull	r1, r3, r3, r2
 80101cc:	095b      	lsrs	r3, r3, #5
 80101ce:	2164      	movs	r1, #100	; 0x64
 80101d0:	fb01 f303 	mul.w	r3, r1, r3
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	00db      	lsls	r3, r3, #3
 80101d8:	3332      	adds	r3, #50	; 0x32
 80101da:	4a86      	ldr	r2, [pc, #536]	; (80103f4 <UART_SetConfig+0x384>)
 80101dc:	fba2 2303 	umull	r2, r3, r2, r3
 80101e0:	095b      	lsrs	r3, r3, #5
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80101e8:	4498      	add	r8, r3
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	461d      	mov	r5, r3
 80101ee:	f04f 0600 	mov.w	r6, #0
 80101f2:	46a9      	mov	r9, r5
 80101f4:	46b2      	mov	sl, r6
 80101f6:	eb19 0309 	adds.w	r3, r9, r9
 80101fa:	eb4a 040a 	adc.w	r4, sl, sl
 80101fe:	4699      	mov	r9, r3
 8010200:	46a2      	mov	sl, r4
 8010202:	eb19 0905 	adds.w	r9, r9, r5
 8010206:	eb4a 0a06 	adc.w	sl, sl, r6
 801020a:	f04f 0100 	mov.w	r1, #0
 801020e:	f04f 0200 	mov.w	r2, #0
 8010212:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010216:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801021a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801021e:	4689      	mov	r9, r1
 8010220:	4692      	mov	sl, r2
 8010222:	eb19 0005 	adds.w	r0, r9, r5
 8010226:	eb4a 0106 	adc.w	r1, sl, r6
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	461d      	mov	r5, r3
 8010230:	f04f 0600 	mov.w	r6, #0
 8010234:	196b      	adds	r3, r5, r5
 8010236:	eb46 0406 	adc.w	r4, r6, r6
 801023a:	461a      	mov	r2, r3
 801023c:	4623      	mov	r3, r4
 801023e:	f7f0 fd3b 	bl	8000cb8 <__aeabi_uldivmod>
 8010242:	4603      	mov	r3, r0
 8010244:	460c      	mov	r4, r1
 8010246:	461a      	mov	r2, r3
 8010248:	4b6a      	ldr	r3, [pc, #424]	; (80103f4 <UART_SetConfig+0x384>)
 801024a:	fba3 1302 	umull	r1, r3, r3, r2
 801024e:	095b      	lsrs	r3, r3, #5
 8010250:	2164      	movs	r1, #100	; 0x64
 8010252:	fb01 f303 	mul.w	r3, r1, r3
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	00db      	lsls	r3, r3, #3
 801025a:	3332      	adds	r3, #50	; 0x32
 801025c:	4a65      	ldr	r2, [pc, #404]	; (80103f4 <UART_SetConfig+0x384>)
 801025e:	fba2 2303 	umull	r2, r3, r2, r3
 8010262:	095b      	lsrs	r3, r3, #5
 8010264:	f003 0207 	and.w	r2, r3, #7
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4442      	add	r2, r8
 801026e:	609a      	str	r2, [r3, #8]
 8010270:	e26f      	b.n	8010752 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010272:	f7fc fafb 	bl	800c86c <HAL_RCC_GetPCLK1Freq>
 8010276:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	461d      	mov	r5, r3
 801027c:	f04f 0600 	mov.w	r6, #0
 8010280:	46a8      	mov	r8, r5
 8010282:	46b1      	mov	r9, r6
 8010284:	eb18 0308 	adds.w	r3, r8, r8
 8010288:	eb49 0409 	adc.w	r4, r9, r9
 801028c:	4698      	mov	r8, r3
 801028e:	46a1      	mov	r9, r4
 8010290:	eb18 0805 	adds.w	r8, r8, r5
 8010294:	eb49 0906 	adc.w	r9, r9, r6
 8010298:	f04f 0100 	mov.w	r1, #0
 801029c:	f04f 0200 	mov.w	r2, #0
 80102a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80102a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80102a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80102ac:	4688      	mov	r8, r1
 80102ae:	4691      	mov	r9, r2
 80102b0:	eb18 0005 	adds.w	r0, r8, r5
 80102b4:	eb49 0106 	adc.w	r1, r9, r6
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	461d      	mov	r5, r3
 80102be:	f04f 0600 	mov.w	r6, #0
 80102c2:	196b      	adds	r3, r5, r5
 80102c4:	eb46 0406 	adc.w	r4, r6, r6
 80102c8:	461a      	mov	r2, r3
 80102ca:	4623      	mov	r3, r4
 80102cc:	f7f0 fcf4 	bl	8000cb8 <__aeabi_uldivmod>
 80102d0:	4603      	mov	r3, r0
 80102d2:	460c      	mov	r4, r1
 80102d4:	461a      	mov	r2, r3
 80102d6:	4b47      	ldr	r3, [pc, #284]	; (80103f4 <UART_SetConfig+0x384>)
 80102d8:	fba3 2302 	umull	r2, r3, r3, r2
 80102dc:	095b      	lsrs	r3, r3, #5
 80102de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	461d      	mov	r5, r3
 80102e6:	f04f 0600 	mov.w	r6, #0
 80102ea:	46a9      	mov	r9, r5
 80102ec:	46b2      	mov	sl, r6
 80102ee:	eb19 0309 	adds.w	r3, r9, r9
 80102f2:	eb4a 040a 	adc.w	r4, sl, sl
 80102f6:	4699      	mov	r9, r3
 80102f8:	46a2      	mov	sl, r4
 80102fa:	eb19 0905 	adds.w	r9, r9, r5
 80102fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8010302:	f04f 0100 	mov.w	r1, #0
 8010306:	f04f 0200 	mov.w	r2, #0
 801030a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801030e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010312:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010316:	4689      	mov	r9, r1
 8010318:	4692      	mov	sl, r2
 801031a:	eb19 0005 	adds.w	r0, r9, r5
 801031e:	eb4a 0106 	adc.w	r1, sl, r6
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	461d      	mov	r5, r3
 8010328:	f04f 0600 	mov.w	r6, #0
 801032c:	196b      	adds	r3, r5, r5
 801032e:	eb46 0406 	adc.w	r4, r6, r6
 8010332:	461a      	mov	r2, r3
 8010334:	4623      	mov	r3, r4
 8010336:	f7f0 fcbf 	bl	8000cb8 <__aeabi_uldivmod>
 801033a:	4603      	mov	r3, r0
 801033c:	460c      	mov	r4, r1
 801033e:	461a      	mov	r2, r3
 8010340:	4b2c      	ldr	r3, [pc, #176]	; (80103f4 <UART_SetConfig+0x384>)
 8010342:	fba3 1302 	umull	r1, r3, r3, r2
 8010346:	095b      	lsrs	r3, r3, #5
 8010348:	2164      	movs	r1, #100	; 0x64
 801034a:	fb01 f303 	mul.w	r3, r1, r3
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	3332      	adds	r3, #50	; 0x32
 8010354:	4a27      	ldr	r2, [pc, #156]	; (80103f4 <UART_SetConfig+0x384>)
 8010356:	fba2 2303 	umull	r2, r3, r2, r3
 801035a:	095b      	lsrs	r3, r3, #5
 801035c:	005b      	lsls	r3, r3, #1
 801035e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010362:	4498      	add	r8, r3
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	461d      	mov	r5, r3
 8010368:	f04f 0600 	mov.w	r6, #0
 801036c:	46a9      	mov	r9, r5
 801036e:	46b2      	mov	sl, r6
 8010370:	eb19 0309 	adds.w	r3, r9, r9
 8010374:	eb4a 040a 	adc.w	r4, sl, sl
 8010378:	4699      	mov	r9, r3
 801037a:	46a2      	mov	sl, r4
 801037c:	eb19 0905 	adds.w	r9, r9, r5
 8010380:	eb4a 0a06 	adc.w	sl, sl, r6
 8010384:	f04f 0100 	mov.w	r1, #0
 8010388:	f04f 0200 	mov.w	r2, #0
 801038c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010398:	4689      	mov	r9, r1
 801039a:	4692      	mov	sl, r2
 801039c:	eb19 0005 	adds.w	r0, r9, r5
 80103a0:	eb4a 0106 	adc.w	r1, sl, r6
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	461d      	mov	r5, r3
 80103aa:	f04f 0600 	mov.w	r6, #0
 80103ae:	196b      	adds	r3, r5, r5
 80103b0:	eb46 0406 	adc.w	r4, r6, r6
 80103b4:	461a      	mov	r2, r3
 80103b6:	4623      	mov	r3, r4
 80103b8:	f7f0 fc7e 	bl	8000cb8 <__aeabi_uldivmod>
 80103bc:	4603      	mov	r3, r0
 80103be:	460c      	mov	r4, r1
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <UART_SetConfig+0x384>)
 80103c4:	fba3 1302 	umull	r1, r3, r3, r2
 80103c8:	095b      	lsrs	r3, r3, #5
 80103ca:	2164      	movs	r1, #100	; 0x64
 80103cc:	fb01 f303 	mul.w	r3, r1, r3
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	00db      	lsls	r3, r3, #3
 80103d4:	3332      	adds	r3, #50	; 0x32
 80103d6:	4a07      	ldr	r2, [pc, #28]	; (80103f4 <UART_SetConfig+0x384>)
 80103d8:	fba2 2303 	umull	r2, r3, r2, r3
 80103dc:	095b      	lsrs	r3, r3, #5
 80103de:	f003 0207 	and.w	r2, r3, #7
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4442      	add	r2, r8
 80103e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80103ea:	e1b2      	b.n	8010752 <UART_SetConfig+0x6e2>
 80103ec:	40011000 	.word	0x40011000
 80103f0:	40011400 	.word	0x40011400
 80103f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4ad7      	ldr	r2, [pc, #860]	; (801075c <UART_SetConfig+0x6ec>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d005      	beq.n	801040e <UART_SetConfig+0x39e>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4ad6      	ldr	r2, [pc, #856]	; (8010760 <UART_SetConfig+0x6f0>)
 8010408:	4293      	cmp	r3, r2
 801040a:	f040 80d1 	bne.w	80105b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801040e:	f7fc fa41 	bl	800c894 <HAL_RCC_GetPCLK2Freq>
 8010412:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	469a      	mov	sl, r3
 8010418:	f04f 0b00 	mov.w	fp, #0
 801041c:	46d0      	mov	r8, sl
 801041e:	46d9      	mov	r9, fp
 8010420:	eb18 0308 	adds.w	r3, r8, r8
 8010424:	eb49 0409 	adc.w	r4, r9, r9
 8010428:	4698      	mov	r8, r3
 801042a:	46a1      	mov	r9, r4
 801042c:	eb18 080a 	adds.w	r8, r8, sl
 8010430:	eb49 090b 	adc.w	r9, r9, fp
 8010434:	f04f 0100 	mov.w	r1, #0
 8010438:	f04f 0200 	mov.w	r2, #0
 801043c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010440:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010444:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010448:	4688      	mov	r8, r1
 801044a:	4691      	mov	r9, r2
 801044c:	eb1a 0508 	adds.w	r5, sl, r8
 8010450:	eb4b 0609 	adc.w	r6, fp, r9
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	4619      	mov	r1, r3
 801045a:	f04f 0200 	mov.w	r2, #0
 801045e:	f04f 0300 	mov.w	r3, #0
 8010462:	f04f 0400 	mov.w	r4, #0
 8010466:	0094      	lsls	r4, r2, #2
 8010468:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801046c:	008b      	lsls	r3, r1, #2
 801046e:	461a      	mov	r2, r3
 8010470:	4623      	mov	r3, r4
 8010472:	4628      	mov	r0, r5
 8010474:	4631      	mov	r1, r6
 8010476:	f7f0 fc1f 	bl	8000cb8 <__aeabi_uldivmod>
 801047a:	4603      	mov	r3, r0
 801047c:	460c      	mov	r4, r1
 801047e:	461a      	mov	r2, r3
 8010480:	4bb8      	ldr	r3, [pc, #736]	; (8010764 <UART_SetConfig+0x6f4>)
 8010482:	fba3 2302 	umull	r2, r3, r3, r2
 8010486:	095b      	lsrs	r3, r3, #5
 8010488:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	469b      	mov	fp, r3
 8010490:	f04f 0c00 	mov.w	ip, #0
 8010494:	46d9      	mov	r9, fp
 8010496:	46e2      	mov	sl, ip
 8010498:	eb19 0309 	adds.w	r3, r9, r9
 801049c:	eb4a 040a 	adc.w	r4, sl, sl
 80104a0:	4699      	mov	r9, r3
 80104a2:	46a2      	mov	sl, r4
 80104a4:	eb19 090b 	adds.w	r9, r9, fp
 80104a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80104ac:	f04f 0100 	mov.w	r1, #0
 80104b0:	f04f 0200 	mov.w	r2, #0
 80104b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104c0:	4689      	mov	r9, r1
 80104c2:	4692      	mov	sl, r2
 80104c4:	eb1b 0509 	adds.w	r5, fp, r9
 80104c8:	eb4c 060a 	adc.w	r6, ip, sl
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	4619      	mov	r1, r3
 80104d2:	f04f 0200 	mov.w	r2, #0
 80104d6:	f04f 0300 	mov.w	r3, #0
 80104da:	f04f 0400 	mov.w	r4, #0
 80104de:	0094      	lsls	r4, r2, #2
 80104e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104e4:	008b      	lsls	r3, r1, #2
 80104e6:	461a      	mov	r2, r3
 80104e8:	4623      	mov	r3, r4
 80104ea:	4628      	mov	r0, r5
 80104ec:	4631      	mov	r1, r6
 80104ee:	f7f0 fbe3 	bl	8000cb8 <__aeabi_uldivmod>
 80104f2:	4603      	mov	r3, r0
 80104f4:	460c      	mov	r4, r1
 80104f6:	461a      	mov	r2, r3
 80104f8:	4b9a      	ldr	r3, [pc, #616]	; (8010764 <UART_SetConfig+0x6f4>)
 80104fa:	fba3 1302 	umull	r1, r3, r3, r2
 80104fe:	095b      	lsrs	r3, r3, #5
 8010500:	2164      	movs	r1, #100	; 0x64
 8010502:	fb01 f303 	mul.w	r3, r1, r3
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	011b      	lsls	r3, r3, #4
 801050a:	3332      	adds	r3, #50	; 0x32
 801050c:	4a95      	ldr	r2, [pc, #596]	; (8010764 <UART_SetConfig+0x6f4>)
 801050e:	fba2 2303 	umull	r2, r3, r2, r3
 8010512:	095b      	lsrs	r3, r3, #5
 8010514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010518:	4498      	add	r8, r3
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	469b      	mov	fp, r3
 801051e:	f04f 0c00 	mov.w	ip, #0
 8010522:	46d9      	mov	r9, fp
 8010524:	46e2      	mov	sl, ip
 8010526:	eb19 0309 	adds.w	r3, r9, r9
 801052a:	eb4a 040a 	adc.w	r4, sl, sl
 801052e:	4699      	mov	r9, r3
 8010530:	46a2      	mov	sl, r4
 8010532:	eb19 090b 	adds.w	r9, r9, fp
 8010536:	eb4a 0a0c 	adc.w	sl, sl, ip
 801053a:	f04f 0100 	mov.w	r1, #0
 801053e:	f04f 0200 	mov.w	r2, #0
 8010542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010546:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801054a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801054e:	4689      	mov	r9, r1
 8010550:	4692      	mov	sl, r2
 8010552:	eb1b 0509 	adds.w	r5, fp, r9
 8010556:	eb4c 060a 	adc.w	r6, ip, sl
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	4619      	mov	r1, r3
 8010560:	f04f 0200 	mov.w	r2, #0
 8010564:	f04f 0300 	mov.w	r3, #0
 8010568:	f04f 0400 	mov.w	r4, #0
 801056c:	0094      	lsls	r4, r2, #2
 801056e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010572:	008b      	lsls	r3, r1, #2
 8010574:	461a      	mov	r2, r3
 8010576:	4623      	mov	r3, r4
 8010578:	4628      	mov	r0, r5
 801057a:	4631      	mov	r1, r6
 801057c:	f7f0 fb9c 	bl	8000cb8 <__aeabi_uldivmod>
 8010580:	4603      	mov	r3, r0
 8010582:	460c      	mov	r4, r1
 8010584:	461a      	mov	r2, r3
 8010586:	4b77      	ldr	r3, [pc, #476]	; (8010764 <UART_SetConfig+0x6f4>)
 8010588:	fba3 1302 	umull	r1, r3, r3, r2
 801058c:	095b      	lsrs	r3, r3, #5
 801058e:	2164      	movs	r1, #100	; 0x64
 8010590:	fb01 f303 	mul.w	r3, r1, r3
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	011b      	lsls	r3, r3, #4
 8010598:	3332      	adds	r3, #50	; 0x32
 801059a:	4a72      	ldr	r2, [pc, #456]	; (8010764 <UART_SetConfig+0x6f4>)
 801059c:	fba2 2303 	umull	r2, r3, r2, r3
 80105a0:	095b      	lsrs	r3, r3, #5
 80105a2:	f003 020f 	and.w	r2, r3, #15
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4442      	add	r2, r8
 80105ac:	609a      	str	r2, [r3, #8]
 80105ae:	e0d0      	b.n	8010752 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80105b0:	f7fc f95c 	bl	800c86c <HAL_RCC_GetPCLK1Freq>
 80105b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	469a      	mov	sl, r3
 80105ba:	f04f 0b00 	mov.w	fp, #0
 80105be:	46d0      	mov	r8, sl
 80105c0:	46d9      	mov	r9, fp
 80105c2:	eb18 0308 	adds.w	r3, r8, r8
 80105c6:	eb49 0409 	adc.w	r4, r9, r9
 80105ca:	4698      	mov	r8, r3
 80105cc:	46a1      	mov	r9, r4
 80105ce:	eb18 080a 	adds.w	r8, r8, sl
 80105d2:	eb49 090b 	adc.w	r9, r9, fp
 80105d6:	f04f 0100 	mov.w	r1, #0
 80105da:	f04f 0200 	mov.w	r2, #0
 80105de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80105e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80105e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80105ea:	4688      	mov	r8, r1
 80105ec:	4691      	mov	r9, r2
 80105ee:	eb1a 0508 	adds.w	r5, sl, r8
 80105f2:	eb4b 0609 	adc.w	r6, fp, r9
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	4619      	mov	r1, r3
 80105fc:	f04f 0200 	mov.w	r2, #0
 8010600:	f04f 0300 	mov.w	r3, #0
 8010604:	f04f 0400 	mov.w	r4, #0
 8010608:	0094      	lsls	r4, r2, #2
 801060a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801060e:	008b      	lsls	r3, r1, #2
 8010610:	461a      	mov	r2, r3
 8010612:	4623      	mov	r3, r4
 8010614:	4628      	mov	r0, r5
 8010616:	4631      	mov	r1, r6
 8010618:	f7f0 fb4e 	bl	8000cb8 <__aeabi_uldivmod>
 801061c:	4603      	mov	r3, r0
 801061e:	460c      	mov	r4, r1
 8010620:	461a      	mov	r2, r3
 8010622:	4b50      	ldr	r3, [pc, #320]	; (8010764 <UART_SetConfig+0x6f4>)
 8010624:	fba3 2302 	umull	r2, r3, r3, r2
 8010628:	095b      	lsrs	r3, r3, #5
 801062a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	469b      	mov	fp, r3
 8010632:	f04f 0c00 	mov.w	ip, #0
 8010636:	46d9      	mov	r9, fp
 8010638:	46e2      	mov	sl, ip
 801063a:	eb19 0309 	adds.w	r3, r9, r9
 801063e:	eb4a 040a 	adc.w	r4, sl, sl
 8010642:	4699      	mov	r9, r3
 8010644:	46a2      	mov	sl, r4
 8010646:	eb19 090b 	adds.w	r9, r9, fp
 801064a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801064e:	f04f 0100 	mov.w	r1, #0
 8010652:	f04f 0200 	mov.w	r2, #0
 8010656:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801065a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801065e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010662:	4689      	mov	r9, r1
 8010664:	4692      	mov	sl, r2
 8010666:	eb1b 0509 	adds.w	r5, fp, r9
 801066a:	eb4c 060a 	adc.w	r6, ip, sl
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	4619      	mov	r1, r3
 8010674:	f04f 0200 	mov.w	r2, #0
 8010678:	f04f 0300 	mov.w	r3, #0
 801067c:	f04f 0400 	mov.w	r4, #0
 8010680:	0094      	lsls	r4, r2, #2
 8010682:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010686:	008b      	lsls	r3, r1, #2
 8010688:	461a      	mov	r2, r3
 801068a:	4623      	mov	r3, r4
 801068c:	4628      	mov	r0, r5
 801068e:	4631      	mov	r1, r6
 8010690:	f7f0 fb12 	bl	8000cb8 <__aeabi_uldivmod>
 8010694:	4603      	mov	r3, r0
 8010696:	460c      	mov	r4, r1
 8010698:	461a      	mov	r2, r3
 801069a:	4b32      	ldr	r3, [pc, #200]	; (8010764 <UART_SetConfig+0x6f4>)
 801069c:	fba3 1302 	umull	r1, r3, r3, r2
 80106a0:	095b      	lsrs	r3, r3, #5
 80106a2:	2164      	movs	r1, #100	; 0x64
 80106a4:	fb01 f303 	mul.w	r3, r1, r3
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	011b      	lsls	r3, r3, #4
 80106ac:	3332      	adds	r3, #50	; 0x32
 80106ae:	4a2d      	ldr	r2, [pc, #180]	; (8010764 <UART_SetConfig+0x6f4>)
 80106b0:	fba2 2303 	umull	r2, r3, r2, r3
 80106b4:	095b      	lsrs	r3, r3, #5
 80106b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106ba:	4498      	add	r8, r3
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	469b      	mov	fp, r3
 80106c0:	f04f 0c00 	mov.w	ip, #0
 80106c4:	46d9      	mov	r9, fp
 80106c6:	46e2      	mov	sl, ip
 80106c8:	eb19 0309 	adds.w	r3, r9, r9
 80106cc:	eb4a 040a 	adc.w	r4, sl, sl
 80106d0:	4699      	mov	r9, r3
 80106d2:	46a2      	mov	sl, r4
 80106d4:	eb19 090b 	adds.w	r9, r9, fp
 80106d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80106dc:	f04f 0100 	mov.w	r1, #0
 80106e0:	f04f 0200 	mov.w	r2, #0
 80106e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80106e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80106ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80106f0:	4689      	mov	r9, r1
 80106f2:	4692      	mov	sl, r2
 80106f4:	eb1b 0509 	adds.w	r5, fp, r9
 80106f8:	eb4c 060a 	adc.w	r6, ip, sl
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	4619      	mov	r1, r3
 8010702:	f04f 0200 	mov.w	r2, #0
 8010706:	f04f 0300 	mov.w	r3, #0
 801070a:	f04f 0400 	mov.w	r4, #0
 801070e:	0094      	lsls	r4, r2, #2
 8010710:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010714:	008b      	lsls	r3, r1, #2
 8010716:	461a      	mov	r2, r3
 8010718:	4623      	mov	r3, r4
 801071a:	4628      	mov	r0, r5
 801071c:	4631      	mov	r1, r6
 801071e:	f7f0 facb 	bl	8000cb8 <__aeabi_uldivmod>
 8010722:	4603      	mov	r3, r0
 8010724:	460c      	mov	r4, r1
 8010726:	461a      	mov	r2, r3
 8010728:	4b0e      	ldr	r3, [pc, #56]	; (8010764 <UART_SetConfig+0x6f4>)
 801072a:	fba3 1302 	umull	r1, r3, r3, r2
 801072e:	095b      	lsrs	r3, r3, #5
 8010730:	2164      	movs	r1, #100	; 0x64
 8010732:	fb01 f303 	mul.w	r3, r1, r3
 8010736:	1ad3      	subs	r3, r2, r3
 8010738:	011b      	lsls	r3, r3, #4
 801073a:	3332      	adds	r3, #50	; 0x32
 801073c:	4a09      	ldr	r2, [pc, #36]	; (8010764 <UART_SetConfig+0x6f4>)
 801073e:	fba2 2303 	umull	r2, r3, r2, r3
 8010742:	095b      	lsrs	r3, r3, #5
 8010744:	f003 020f 	and.w	r2, r3, #15
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4442      	add	r2, r8
 801074e:	609a      	str	r2, [r3, #8]
}
 8010750:	e7ff      	b.n	8010752 <UART_SetConfig+0x6e2>
 8010752:	bf00      	nop
 8010754:	3714      	adds	r7, #20
 8010756:	46bd      	mov	sp, r7
 8010758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075c:	40011000 	.word	0x40011000
 8010760:	40011400 	.word	0x40011400
 8010764:	51eb851f 	.word	0x51eb851f

08010768 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010768:	b084      	sub	sp, #16
 801076a:	b480      	push	{r7}
 801076c:	b085      	sub	sp, #20
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	f107 001c 	add.w	r0, r7, #28
 8010776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801077a:	2300      	movs	r3, #0
 801077c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801077e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010780:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010782:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010786:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010788:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801078a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801078e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010792:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	4313      	orrs	r3, r2
 8010798:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80107a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	431a      	orrs	r2, r3
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3714      	adds	r7, #20
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	b004      	add	sp, #16
 80107bc:	4770      	bx	lr

080107be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80107be:	b480      	push	{r7}
 80107c0:	b083      	sub	sp, #12
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b082      	sub	sp, #8
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2203      	movs	r2, #3
 8010806:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010808:	2002      	movs	r0, #2
 801080a:	f7f9 fbdd 	bl	8009fc8 <HAL_Delay>
  
  return HAL_OK;
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f003 0303 	and.w	r3, r3, #3
}
 8010828:	4618      	mov	r0, r3
 801082a:	370c      	adds	r7, #12
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801083e:	2300      	movs	r3, #0
 8010840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010852:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010858:	431a      	orrs	r2, r3
                       Command->CPSM);
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801085e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	4313      	orrs	r3, r2
 8010864:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801086e:	f023 030f 	bic.w	r3, r3, #15
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	431a      	orrs	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3714      	adds	r7, #20
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr

08010888 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	b2db      	uxtb	r3, r3
}
 8010896:	4618      	mov	r0, r3
 8010898:	370c      	adds	r7, #12
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr

080108a2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80108a2:	b480      	push	{r7}
 80108a4:	b085      	sub	sp, #20
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
 80108aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3314      	adds	r3, #20
 80108b0:	461a      	mov	r2, r3
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	4413      	add	r3, r2
 80108b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
}  
 80108bc:	4618      	mov	r0, r3
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80108f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80108fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	4313      	orrs	r3, r2
 8010900:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010906:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	431a      	orrs	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010912:	2300      	movs	r3, #0

}
 8010914:	4618      	mov	r0, r3
 8010916:	3714      	adds	r7, #20
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b088      	sub	sp, #32
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801092e:	2310      	movs	r3, #16
 8010930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010932:	2340      	movs	r3, #64	; 0x40
 8010934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801093e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff ff74 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801094c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010950:	2110      	movs	r1, #16
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 fa40 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801095a:	69fb      	ldr	r3, [r7, #28]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3720      	adds	r7, #32
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b088      	sub	sp, #32
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010972:	2311      	movs	r3, #17
 8010974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010976:	2340      	movs	r3, #64	; 0x40
 8010978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801097a:	2300      	movs	r3, #0
 801097c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010984:	f107 0308 	add.w	r3, r7, #8
 8010988:	4619      	mov	r1, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ff52 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010990:	f241 3288 	movw	r2, #5000	; 0x1388
 8010994:	2111      	movs	r1, #17
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 fa1e 	bl	8010dd8 <SDMMC_GetCmdResp1>
 801099c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801099e:	69fb      	ldr	r3, [r7, #28]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3720      	adds	r7, #32
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b088      	sub	sp, #32
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80109b6:	2312      	movs	r3, #18
 80109b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109ba:	2340      	movs	r3, #64	; 0x40
 80109bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109be:	2300      	movs	r3, #0
 80109c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109c8:	f107 0308 	add.w	r3, r7, #8
 80109cc:	4619      	mov	r1, r3
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff ff30 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80109d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109d8:	2112      	movs	r1, #18
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f9fc 	bl	8010dd8 <SDMMC_GetCmdResp1>
 80109e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e2:	69fb      	ldr	r3, [r7, #28]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3720      	adds	r7, #32
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b088      	sub	sp, #32
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80109fa:	2318      	movs	r3, #24
 80109fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109fe:	2340      	movs	r3, #64	; 0x40
 8010a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a02:	2300      	movs	r3, #0
 8010a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff ff0e 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a1c:	2118      	movs	r1, #24
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f9da 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a26:	69fb      	ldr	r3, [r7, #28]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3720      	adds	r7, #32
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a3e:	2319      	movs	r3, #25
 8010a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a42:	2340      	movs	r3, #64	; 0x40
 8010a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a46:	2300      	movs	r3, #0
 8010a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a50:	f107 0308 	add.w	r3, r7, #8
 8010a54:	4619      	mov	r1, r3
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f7ff feec 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a60:	2119      	movs	r1, #25
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 f9b8 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a6a:	69fb      	ldr	r3, [r7, #28]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3720      	adds	r7, #32
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b088      	sub	sp, #32
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010a80:	230c      	movs	r3, #12
 8010a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a84:	2340      	movs	r3, #64	; 0x40
 8010a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a92:	f107 0308 	add.w	r3, r7, #8
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff fecb 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010a9e:	4a05      	ldr	r2, [pc, #20]	; (8010ab4 <SDMMC_CmdStopTransfer+0x40>)
 8010aa0:	210c      	movs	r1, #12
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f998 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aaa:	69fb      	ldr	r3, [r7, #28]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3720      	adds	r7, #32
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	05f5e100 	.word	0x05f5e100

08010ab8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b08a      	sub	sp, #40	; 0x28
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010ac8:	2307      	movs	r3, #7
 8010aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010acc:	2340      	movs	r3, #64	; 0x40
 8010ace:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ad8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ada:	f107 0310 	add.w	r3, r7, #16
 8010ade:	4619      	mov	r1, r3
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f7ff fea7 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aea:	2107      	movs	r1, #7
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f000 f973 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010af2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3728      	adds	r7, #40	; 0x28
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b088      	sub	sp, #32
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010b06:	2300      	movs	r3, #0
 8010b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b12:	2300      	movs	r3, #0
 8010b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b1c:	f107 0308 	add.w	r3, r7, #8
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff fe86 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 f92d 	bl	8010d88 <SDMMC_GetCmdError>
 8010b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b30:	69fb      	ldr	r3, [r7, #28]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b088      	sub	sp, #32
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010b42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010b48:	2308      	movs	r3, #8
 8010b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b4c:	2340      	movs	r3, #64	; 0x40
 8010b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b50:	2300      	movs	r3, #0
 8010b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff fe67 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 fb16 	bl	8011198 <SDMMC_GetCmdResp7>
 8010b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3720      	adds	r7, #32
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b088      	sub	sp, #32
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010b86:	2337      	movs	r3, #55	; 0x37
 8010b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b8a:	2340      	movs	r3, #64	; 0x40
 8010b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b98:	f107 0308 	add.w	r3, r7, #8
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7ff fe48 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ba8:	2137      	movs	r1, #55	; 0x37
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 f914 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010bb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb2:	69fb      	ldr	r3, [r7, #28]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3720      	adds	r7, #32
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b088      	sub	sp, #32
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010bd2:	2329      	movs	r3, #41	; 0x29
 8010bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bd6:	2340      	movs	r3, #64	; 0x40
 8010bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010be4:	f107 0308 	add.w	r3, r7, #8
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f7ff fe22 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fa23 	bl	801103c <SDMMC_GetCmdResp3>
 8010bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf8:	69fb      	ldr	r3, [r7, #28]
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3720      	adds	r7, #32
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b088      	sub	sp, #32
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
 8010c0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010c10:	2306      	movs	r3, #6
 8010c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c14:	2340      	movs	r3, #64	; 0x40
 8010c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c22:	f107 0308 	add.w	r3, r7, #8
 8010c26:	4619      	mov	r1, r3
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7ff fe03 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c32:	2106      	movs	r1, #6
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f8cf 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3720      	adds	r7, #32
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b088      	sub	sp, #32
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010c52:	2333      	movs	r3, #51	; 0x33
 8010c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c56:	2340      	movs	r3, #64	; 0x40
 8010c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c64:	f107 0308 	add.w	r3, r7, #8
 8010c68:	4619      	mov	r1, r3
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7ff fde2 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c74:	2133      	movs	r1, #51	; 0x33
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f8ae 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c7e:	69fb      	ldr	r3, [r7, #28]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3720      	adds	r7, #32
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b088      	sub	sp, #32
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010c90:	2300      	movs	r3, #0
 8010c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010c94:	2302      	movs	r3, #2
 8010c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c98:	23c0      	movs	r3, #192	; 0xc0
 8010c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ca4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ca6:	f107 0308 	add.w	r3, r7, #8
 8010caa:	4619      	mov	r1, r3
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff fdc1 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 f97c 	bl	8010fb0 <SDMMC_GetCmdResp2>
 8010cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cba:	69fb      	ldr	r3, [r7, #28]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3720      	adds	r7, #32
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b088      	sub	sp, #32
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010cd2:	2309      	movs	r3, #9
 8010cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010cd6:	23c0      	movs	r3, #192	; 0xc0
 8010cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ce2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ce4:	f107 0308 	add.w	r3, r7, #8
 8010ce8:	4619      	mov	r1, r3
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f7ff fda2 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f95d 	bl	8010fb0 <SDMMC_GetCmdResp2>
 8010cf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cf8:	69fb      	ldr	r3, [r7, #28]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3720      	adds	r7, #32
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b088      	sub	sp, #32
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
 8010d0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d10:	2303      	movs	r3, #3
 8010d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d14:	2340      	movs	r3, #64	; 0x40
 8010d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d22:	f107 0308 	add.w	r3, r7, #8
 8010d26:	4619      	mov	r1, r3
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7ff fd83 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	2103      	movs	r1, #3
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 f9bc 	bl	80110b0 <SDMMC_GetCmdResp6>
 8010d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d3a:	69fb      	ldr	r3, [r7, #28]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3720      	adds	r7, #32
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b088      	sub	sp, #32
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010d52:	230d      	movs	r3, #13
 8010d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d56:	2340      	movs	r3, #64	; 0x40
 8010d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d64:	f107 0308 	add.w	r3, r7, #8
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7ff fd62 	bl	8010834 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d74:	210d      	movs	r1, #13
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 f82e 	bl	8010dd8 <SDMMC_GetCmdResp1>
 8010d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d7e:	69fb      	ldr	r3, [r7, #28]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3720      	adds	r7, #32
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010d88:	b490      	push	{r4, r7}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d90:	4b0f      	ldr	r3, [pc, #60]	; (8010dd0 <SDMMC_GetCmdError+0x48>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a0f      	ldr	r2, [pc, #60]	; (8010dd4 <SDMMC_GetCmdError+0x4c>)
 8010d96:	fba2 2303 	umull	r2, r3, r2, r3
 8010d9a:	0a5b      	lsrs	r3, r3, #9
 8010d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010da0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010da4:	4623      	mov	r3, r4
 8010da6:	1e5c      	subs	r4, r3, #1
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d102      	bne.n	8010db2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010db0:	e009      	b.n	8010dc6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d0f2      	beq.n	8010da4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	22c5      	movs	r2, #197	; 0xc5
 8010dc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3708      	adds	r7, #8
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bc90      	pop	{r4, r7}
 8010dce:	4770      	bx	lr
 8010dd0:	20000000 	.word	0x20000000
 8010dd4:	10624dd3 	.word	0x10624dd3

08010dd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010dd8:	b590      	push	{r4, r7, lr}
 8010dda:	b087      	sub	sp, #28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	460b      	mov	r3, r1
 8010de2:	607a      	str	r2, [r7, #4]
 8010de4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010de6:	4b6f      	ldr	r3, [pc, #444]	; (8010fa4 <SDMMC_GetCmdResp1+0x1cc>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a6f      	ldr	r2, [pc, #444]	; (8010fa8 <SDMMC_GetCmdResp1+0x1d0>)
 8010dec:	fba2 2303 	umull	r2, r3, r2, r3
 8010df0:	0a5b      	lsrs	r3, r3, #9
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010df8:	4623      	mov	r3, r4
 8010dfa:	1e5c      	subs	r4, r3, #1
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d102      	bne.n	8010e06 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e04:	e0c9      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d0f0      	beq.n	8010df8 <SDMMC_GetCmdResp1+0x20>
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1eb      	bne.n	8010df8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e24:	f003 0304 	and.w	r3, r3, #4
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d004      	beq.n	8010e36 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2204      	movs	r2, #4
 8010e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e32:	2304      	movs	r3, #4
 8010e34:	e0b1      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d004      	beq.n	8010e4c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2201      	movs	r2, #1
 8010e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e0a6      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	22c5      	movs	r2, #197	; 0xc5
 8010e50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f7ff fd18 	bl	8010888 <SDIO_GetCommandResponse>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	7afb      	ldrb	r3, [r7, #11]
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d001      	beq.n	8010e66 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e62:	2301      	movs	r3, #1
 8010e64:	e099      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010e66:	2100      	movs	r1, #0
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	f7ff fd1a 	bl	80108a2 <SDIO_GetResponse>
 8010e6e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010e70:	693a      	ldr	r2, [r7, #16]
 8010e72:	4b4e      	ldr	r3, [pc, #312]	; (8010fac <SDMMC_GetCmdResp1+0x1d4>)
 8010e74:	4013      	ands	r3, r2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d101      	bne.n	8010e7e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	e08d      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	da02      	bge.n	8010e8a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010e88:	e087      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e94:	2340      	movs	r3, #64	; 0x40
 8010e96:	e080      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d001      	beq.n	8010ea6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010ea2:	2380      	movs	r3, #128	; 0x80
 8010ea4:	e079      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010eb4:	e071      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d002      	beq.n	8010ec6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ec4:	e069      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ed4:	e061      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ee4:	e059      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ef4:	e051      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f04:	e049      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d002      	beq.n	8010f16 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f14:	e041      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d002      	beq.n	8010f26 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f24:	e039      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010f34:	e031      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010f44:	e029      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d002      	beq.n	8010f56 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010f50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010f54:	e021      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d002      	beq.n	8010f66 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010f60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010f64:	e019      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d002      	beq.n	8010f76 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010f74:	e011      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d002      	beq.n	8010f86 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010f84:	e009      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	f003 0308 	and.w	r3, r3, #8
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d002      	beq.n	8010f96 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010f90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010f94:	e001      	b.n	8010f9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	371c      	adds	r7, #28
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd90      	pop	{r4, r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20000000 	.word	0x20000000
 8010fa8:	10624dd3 	.word	0x10624dd3
 8010fac:	fdffe008 	.word	0xfdffe008

08010fb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010fb0:	b490      	push	{r4, r7}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fb8:	4b1e      	ldr	r3, [pc, #120]	; (8011034 <SDMMC_GetCmdResp2+0x84>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4a1e      	ldr	r2, [pc, #120]	; (8011038 <SDMMC_GetCmdResp2+0x88>)
 8010fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010fc2:	0a5b      	lsrs	r3, r3, #9
 8010fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fc8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010fcc:	4623      	mov	r3, r4
 8010fce:	1e5c      	subs	r4, r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d102      	bne.n	8010fda <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fd8:	e026      	b.n	8011028 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fde:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0f0      	beq.n	8010fcc <SDMMC_GetCmdResp2+0x1c>
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d1eb      	bne.n	8010fcc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff8:	f003 0304 	and.w	r3, r3, #4
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d004      	beq.n	801100a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2204      	movs	r2, #4
 8011004:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011006:	2304      	movs	r3, #4
 8011008:	e00e      	b.n	8011028 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801100e:	f003 0301 	and.w	r3, r3, #1
 8011012:	2b00      	cmp	r3, #0
 8011014:	d004      	beq.n	8011020 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801101c:	2301      	movs	r3, #1
 801101e:	e003      	b.n	8011028 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	22c5      	movs	r2, #197	; 0xc5
 8011024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011026:	2300      	movs	r3, #0
}
 8011028:	4618      	mov	r0, r3
 801102a:	3710      	adds	r7, #16
 801102c:	46bd      	mov	sp, r7
 801102e:	bc90      	pop	{r4, r7}
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	20000000 	.word	0x20000000
 8011038:	10624dd3 	.word	0x10624dd3

0801103c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801103c:	b490      	push	{r4, r7}
 801103e:	b084      	sub	sp, #16
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011044:	4b18      	ldr	r3, [pc, #96]	; (80110a8 <SDMMC_GetCmdResp3+0x6c>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a18      	ldr	r2, [pc, #96]	; (80110ac <SDMMC_GetCmdResp3+0x70>)
 801104a:	fba2 2303 	umull	r2, r3, r2, r3
 801104e:	0a5b      	lsrs	r3, r3, #9
 8011050:	f241 3288 	movw	r2, #5000	; 0x1388
 8011054:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011058:	4623      	mov	r3, r4
 801105a:	1e5c      	subs	r4, r3, #1
 801105c:	2b00      	cmp	r3, #0
 801105e:	d102      	bne.n	8011066 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011064:	e01b      	b.n	801109e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801106a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011072:	2b00      	cmp	r3, #0
 8011074:	d0f0      	beq.n	8011058 <SDMMC_GetCmdResp3+0x1c>
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801107c:	2b00      	cmp	r3, #0
 801107e:	d1eb      	bne.n	8011058 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011084:	f003 0304 	and.w	r3, r3, #4
 8011088:	2b00      	cmp	r3, #0
 801108a:	d004      	beq.n	8011096 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2204      	movs	r2, #4
 8011090:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011092:	2304      	movs	r3, #4
 8011094:	e003      	b.n	801109e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	22c5      	movs	r2, #197	; 0xc5
 801109a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bc90      	pop	{r4, r7}
 80110a6:	4770      	bx	lr
 80110a8:	20000000 	.word	0x20000000
 80110ac:	10624dd3 	.word	0x10624dd3

080110b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80110b0:	b590      	push	{r4, r7, lr}
 80110b2:	b087      	sub	sp, #28
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	460b      	mov	r3, r1
 80110ba:	607a      	str	r2, [r7, #4]
 80110bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110be:	4b34      	ldr	r3, [pc, #208]	; (8011190 <SDMMC_GetCmdResp6+0xe0>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a34      	ldr	r2, [pc, #208]	; (8011194 <SDMMC_GetCmdResp6+0xe4>)
 80110c4:	fba2 2303 	umull	r2, r3, r2, r3
 80110c8:	0a5b      	lsrs	r3, r3, #9
 80110ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80110ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110d2:	4623      	mov	r3, r4
 80110d4:	1e5c      	subs	r4, r3, #1
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d102      	bne.n	80110e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110de:	e052      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d0f0      	beq.n	80110d2 <SDMMC_GetCmdResp6+0x22>
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1eb      	bne.n	80110d2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fe:	f003 0304 	and.w	r3, r3, #4
 8011102:	2b00      	cmp	r3, #0
 8011104:	d004      	beq.n	8011110 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2204      	movs	r2, #4
 801110a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801110c:	2304      	movs	r3, #4
 801110e:	e03a      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011114:	f003 0301 	and.w	r3, r3, #1
 8011118:	2b00      	cmp	r3, #0
 801111a:	d004      	beq.n	8011126 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2201      	movs	r2, #1
 8011120:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011122:	2301      	movs	r3, #1
 8011124:	e02f      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7ff fbae 	bl	8010888 <SDIO_GetCommandResponse>
 801112c:	4603      	mov	r3, r0
 801112e:	461a      	mov	r2, r3
 8011130:	7afb      	ldrb	r3, [r7, #11]
 8011132:	4293      	cmp	r3, r2
 8011134:	d001      	beq.n	801113a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011136:	2301      	movs	r3, #1
 8011138:	e025      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	22c5      	movs	r2, #197	; 0xc5
 801113e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011140:	2100      	movs	r1, #0
 8011142:	68f8      	ldr	r0, [r7, #12]
 8011144:	f7ff fbad 	bl	80108a2 <SDIO_GetResponse>
 8011148:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011150:	2b00      	cmp	r3, #0
 8011152:	d106      	bne.n	8011162 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	0c1b      	lsrs	r3, r3, #16
 8011158:	b29a      	uxth	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801115e:	2300      	movs	r3, #0
 8011160:	e011      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801116c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011170:	e009      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011178:	2b00      	cmp	r3, #0
 801117a:	d002      	beq.n	8011182 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011180:	e001      	b.n	8011186 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011186:	4618      	mov	r0, r3
 8011188:	371c      	adds	r7, #28
 801118a:	46bd      	mov	sp, r7
 801118c:	bd90      	pop	{r4, r7, pc}
 801118e:	bf00      	nop
 8011190:	20000000 	.word	0x20000000
 8011194:	10624dd3 	.word	0x10624dd3

08011198 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011198:	b490      	push	{r4, r7}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111a0:	4b21      	ldr	r3, [pc, #132]	; (8011228 <SDMMC_GetCmdResp7+0x90>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a21      	ldr	r2, [pc, #132]	; (801122c <SDMMC_GetCmdResp7+0x94>)
 80111a6:	fba2 2303 	umull	r2, r3, r2, r3
 80111aa:	0a5b      	lsrs	r3, r3, #9
 80111ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80111b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80111b4:	4623      	mov	r3, r4
 80111b6:	1e5c      	subs	r4, r3, #1
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d102      	bne.n	80111c2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111c0:	e02c      	b.n	801121c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0f0      	beq.n	80111b4 <SDMMC_GetCmdResp7+0x1c>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1eb      	bne.n	80111b4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e0:	f003 0304 	and.w	r3, r3, #4
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d004      	beq.n	80111f2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2204      	movs	r2, #4
 80111ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111ee:	2304      	movs	r3, #4
 80111f0:	e014      	b.n	801121c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111f6:	f003 0301 	and.w	r3, r3, #1
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d004      	beq.n	8011208 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2201      	movs	r2, #1
 8011202:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011204:	2301      	movs	r3, #1
 8011206:	e009      	b.n	801121c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2240      	movs	r2, #64	; 0x40
 8011218:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801121a:	2300      	movs	r3, #0
  
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bc90      	pop	{r4, r7}
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	20000000 	.word	0x20000000
 801122c:	10624dd3 	.word	0x10624dd3

08011230 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011234:	4904      	ldr	r1, [pc, #16]	; (8011248 <MX_FATFS_Init+0x18>)
 8011236:	4805      	ldr	r0, [pc, #20]	; (801124c <MX_FATFS_Init+0x1c>)
 8011238:	f003 fb9c 	bl	8014974 <FATFS_LinkDriver>
 801123c:	4603      	mov	r3, r0
 801123e:	461a      	mov	r2, r3
 8011240:	4b03      	ldr	r3, [pc, #12]	; (8011250 <MX_FATFS_Init+0x20>)
 8011242:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011244:	bf00      	nop
 8011246:	bd80      	pop	{r7, pc}
 8011248:	20044dc8 	.word	0x20044dc8
 801124c:	0801a2d8 	.word	0x0801a2d8
 8011250:	20044dc4 	.word	0x20044dc4

08011254 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801125a:	2300      	movs	r3, #0
 801125c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801125e:	f000 f896 	bl	801138e <BSP_SD_IsDetected>
 8011262:	4603      	mov	r3, r0
 8011264:	2b01      	cmp	r3, #1
 8011266:	d001      	beq.n	801126c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011268:	2301      	movs	r3, #1
 801126a:	e012      	b.n	8011292 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801126c:	480b      	ldr	r0, [pc, #44]	; (801129c <BSP_SD_Init+0x48>)
 801126e:	f7fb ffa5 	bl	800d1bc <HAL_SD_Init>
 8011272:	4603      	mov	r3, r0
 8011274:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011276:	79fb      	ldrb	r3, [r7, #7]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d109      	bne.n	8011290 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801127c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011280:	4806      	ldr	r0, [pc, #24]	; (801129c <BSP_SD_Init+0x48>)
 8011282:	f7fc fd4f 	bl	800dd24 <HAL_SD_ConfigWideBusOperation>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801128c:	2301      	movs	r3, #1
 801128e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011290:	79fb      	ldrb	r3, [r7, #7]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	20044bc4 	.word	0x20044bc4

080112a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	68f9      	ldr	r1, [r7, #12]
 80112b6:	4806      	ldr	r0, [pc, #24]	; (80112d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80112b8:	f7fc f810 	bl	800d2dc <HAL_SD_ReadBlocks_DMA>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112c2:	2301      	movs	r3, #1
 80112c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3718      	adds	r7, #24
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	20044bc4 	.word	0x20044bc4

080112d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	68ba      	ldr	r2, [r7, #8]
 80112e8:	68f9      	ldr	r1, [r7, #12]
 80112ea:	4806      	ldr	r0, [pc, #24]	; (8011304 <BSP_SD_WriteBlocks_DMA+0x30>)
 80112ec:	f7fc f8de 	bl	800d4ac <HAL_SD_WriteBlocks_DMA>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d001      	beq.n	80112fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112f6:	2301      	movs	r3, #1
 80112f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3718      	adds	r7, #24
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	20044bc4 	.word	0x20044bc4

08011308 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801130c:	4805      	ldr	r0, [pc, #20]	; (8011324 <BSP_SD_GetCardState+0x1c>)
 801130e:	f7fc fd85 	bl	800de1c <HAL_SD_GetCardState>
 8011312:	4603      	mov	r3, r0
 8011314:	2b04      	cmp	r3, #4
 8011316:	bf14      	ite	ne
 8011318:	2301      	movne	r3, #1
 801131a:	2300      	moveq	r3, #0
 801131c:	b2db      	uxtb	r3, r3
}
 801131e:	4618      	mov	r0, r3
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	20044bc4 	.word	0x20044bc4

08011328 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011330:	6879      	ldr	r1, [r7, #4]
 8011332:	4803      	ldr	r0, [pc, #12]	; (8011340 <BSP_SD_GetCardInfo+0x18>)
 8011334:	f7fc fcca 	bl	800dccc <HAL_SD_GetCardInfo>
}
 8011338:	bf00      	nop
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	20044bc4 	.word	0x20044bc4

08011344 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801134c:	f000 f818 	bl	8011380 <BSP_SD_AbortCallback>
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011360:	f000 f9a8 	bl	80116b4 <BSP_SD_WriteCpltCallback>
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011374:	f000 f9aa 	bl	80116cc <BSP_SD_ReadCpltCallback>
}
 8011378:	bf00      	nop
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011380:	b480      	push	{r7}
 8011382:	af00      	add	r7, sp, #0

}
 8011384:	bf00      	nop
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801138e:	b580      	push	{r7, lr}
 8011390:	b082      	sub	sp, #8
 8011392:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011394:	2301      	movs	r3, #1
 8011396:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011398:	f000 f80c 	bl	80113b4 <BSP_PlatformIsDetected>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d101      	bne.n	80113a6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80113a2:	2300      	movs	r3, #0
 80113a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80113a6:	79fb      	ldrb	r3, [r7, #7]
 80113a8:	b2db      	uxtb	r3, r3
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
	...

080113b4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80113ba:	2301      	movs	r3, #1
 80113bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80113be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80113c2:	4806      	ldr	r0, [pc, #24]	; (80113dc <BSP_PlatformIsDetected+0x28>)
 80113c4:	f7fa f87e 	bl	800b4c4 <HAL_GPIO_ReadPin>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d001      	beq.n	80113d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80113ce:	2300      	movs	r3, #0
 80113d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80113d2:	79fb      	ldrb	r3, [r7, #7]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3708      	adds	r7, #8
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	40020000 	.word	0x40020000

080113e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80113e8:	f7f8 fde2 	bl	8009fb0 <HAL_GetTick>
 80113ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80113ee:	e006      	b.n	80113fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80113f0:	f7ff ff8a 	bl	8011308 <BSP_SD_GetCardState>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d101      	bne.n	80113fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80113fa:	2300      	movs	r3, #0
 80113fc:	e009      	b.n	8011412 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80113fe:	f7f8 fdd7 	bl	8009fb0 <HAL_GetTick>
 8011402:	4602      	mov	r2, r0
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	429a      	cmp	r2, r3
 801140c:	d8f0      	bhi.n	80113f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801140e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
	...

0801141c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011426:	4b0b      	ldr	r3, [pc, #44]	; (8011454 <SD_CheckStatus+0x38>)
 8011428:	2201      	movs	r2, #1
 801142a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801142c:	f7ff ff6c 	bl	8011308 <BSP_SD_GetCardState>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d107      	bne.n	8011446 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011436:	4b07      	ldr	r3, [pc, #28]	; (8011454 <SD_CheckStatus+0x38>)
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	b2db      	uxtb	r3, r3
 801143c:	f023 0301 	bic.w	r3, r3, #1
 8011440:	b2da      	uxtb	r2, r3
 8011442:	4b04      	ldr	r3, [pc, #16]	; (8011454 <SD_CheckStatus+0x38>)
 8011444:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011446:	4b03      	ldr	r3, [pc, #12]	; (8011454 <SD_CheckStatus+0x38>)
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	b2db      	uxtb	r3, r3
}
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20000009 	.word	0x20000009

08011458 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	4603      	mov	r3, r0
 8011460:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011462:	f7ff fef7 	bl	8011254 <BSP_SD_Init>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d107      	bne.n	801147c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801146c:	79fb      	ldrb	r3, [r7, #7]
 801146e:	4618      	mov	r0, r3
 8011470:	f7ff ffd4 	bl	801141c <SD_CheckStatus>
 8011474:	4603      	mov	r3, r0
 8011476:	461a      	mov	r2, r3
 8011478:	4b04      	ldr	r3, [pc, #16]	; (801148c <SD_initialize+0x34>)
 801147a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801147c:	4b03      	ldr	r3, [pc, #12]	; (801148c <SD_initialize+0x34>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	b2db      	uxtb	r3, r3
}
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20000009 	.word	0x20000009

08011490 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	4603      	mov	r3, r0
 8011498:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801149a:	79fb      	ldrb	r3, [r7, #7]
 801149c:	4618      	mov	r0, r3
 801149e:	f7ff ffbd 	bl	801141c <SD_CheckStatus>
 80114a2:	4603      	mov	r3, r0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b086      	sub	sp, #24
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	60b9      	str	r1, [r7, #8]
 80114b4:	607a      	str	r2, [r7, #4]
 80114b6:	603b      	str	r3, [r7, #0]
 80114b8:	4603      	mov	r3, r0
 80114ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114bc:	2301      	movs	r3, #1
 80114be:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80114c4:	f7ff ff8c 	bl	80113e0 <SD_CheckStatusWithTimeout>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da01      	bge.n	80114d2 <SD_read+0x26>
  {
    return res;
 80114ce:	7dfb      	ldrb	r3, [r7, #23]
 80114d0:	e03b      	b.n	801154a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80114d2:	683a      	ldr	r2, [r7, #0]
 80114d4:	6879      	ldr	r1, [r7, #4]
 80114d6:	68b8      	ldr	r0, [r7, #8]
 80114d8:	f7ff fee2 	bl	80112a0 <BSP_SD_ReadBlocks_DMA>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d132      	bne.n	8011548 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80114e2:	4b1c      	ldr	r3, [pc, #112]	; (8011554 <SD_read+0xa8>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80114e8:	f7f8 fd62 	bl	8009fb0 <HAL_GetTick>
 80114ec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114ee:	bf00      	nop
 80114f0:	4b18      	ldr	r3, [pc, #96]	; (8011554 <SD_read+0xa8>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d108      	bne.n	801150a <SD_read+0x5e>
 80114f8:	f7f8 fd5a 	bl	8009fb0 <HAL_GetTick>
 80114fc:	4602      	mov	r2, r0
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	f247 522f 	movw	r2, #29999	; 0x752f
 8011506:	4293      	cmp	r3, r2
 8011508:	d9f2      	bls.n	80114f0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801150a:	4b12      	ldr	r3, [pc, #72]	; (8011554 <SD_read+0xa8>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d102      	bne.n	8011518 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011512:	2301      	movs	r3, #1
 8011514:	75fb      	strb	r3, [r7, #23]
 8011516:	e017      	b.n	8011548 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011518:	4b0e      	ldr	r3, [pc, #56]	; (8011554 <SD_read+0xa8>)
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801151e:	f7f8 fd47 	bl	8009fb0 <HAL_GetTick>
 8011522:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011524:	e007      	b.n	8011536 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011526:	f7ff feef 	bl	8011308 <BSP_SD_GetCardState>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d102      	bne.n	8011536 <SD_read+0x8a>
          {
            res = RES_OK;
 8011530:	2300      	movs	r3, #0
 8011532:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011534:	e008      	b.n	8011548 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011536:	f7f8 fd3b 	bl	8009fb0 <HAL_GetTick>
 801153a:	4602      	mov	r2, r0
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	f247 522f 	movw	r2, #29999	; 0x752f
 8011544:	4293      	cmp	r3, r2
 8011546:	d9ee      	bls.n	8011526 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011548:	7dfb      	ldrb	r3, [r7, #23]
}
 801154a:	4618      	mov	r0, r3
 801154c:	3718      	adds	r7, #24
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	20042460 	.word	0x20042460

08011558 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	607a      	str	r2, [r7, #4]
 8011562:	603b      	str	r3, [r7, #0]
 8011564:	4603      	mov	r3, r0
 8011566:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011568:	2301      	movs	r3, #1
 801156a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801156c:	4b24      	ldr	r3, [pc, #144]	; (8011600 <SD_write+0xa8>)
 801156e:	2200      	movs	r2, #0
 8011570:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011572:	f247 5030 	movw	r0, #30000	; 0x7530
 8011576:	f7ff ff33 	bl	80113e0 <SD_CheckStatusWithTimeout>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	da01      	bge.n	8011584 <SD_write+0x2c>
  {
    return res;
 8011580:	7dfb      	ldrb	r3, [r7, #23]
 8011582:	e038      	b.n	80115f6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	6879      	ldr	r1, [r7, #4]
 8011588:	68b8      	ldr	r0, [r7, #8]
 801158a:	f7ff fea3 	bl	80112d4 <BSP_SD_WriteBlocks_DMA>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d12f      	bne.n	80115f4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011594:	f7f8 fd0c 	bl	8009fb0 <HAL_GetTick>
 8011598:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801159a:	bf00      	nop
 801159c:	4b18      	ldr	r3, [pc, #96]	; (8011600 <SD_write+0xa8>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d108      	bne.n	80115b6 <SD_write+0x5e>
 80115a4:	f7f8 fd04 	bl	8009fb0 <HAL_GetTick>
 80115a8:	4602      	mov	r2, r0
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	f247 522f 	movw	r2, #29999	; 0x752f
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d9f2      	bls.n	801159c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80115b6:	4b12      	ldr	r3, [pc, #72]	; (8011600 <SD_write+0xa8>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d102      	bne.n	80115c4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	75fb      	strb	r3, [r7, #23]
 80115c2:	e017      	b.n	80115f4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80115c4:	4b0e      	ldr	r3, [pc, #56]	; (8011600 <SD_write+0xa8>)
 80115c6:	2200      	movs	r2, #0
 80115c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80115ca:	f7f8 fcf1 	bl	8009fb0 <HAL_GetTick>
 80115ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115d0:	e007      	b.n	80115e2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115d2:	f7ff fe99 	bl	8011308 <BSP_SD_GetCardState>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d102      	bne.n	80115e2 <SD_write+0x8a>
          {
            res = RES_OK;
 80115dc:	2300      	movs	r3, #0
 80115de:	75fb      	strb	r3, [r7, #23]
            break;
 80115e0:	e008      	b.n	80115f4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115e2:	f7f8 fce5 	bl	8009fb0 <HAL_GetTick>
 80115e6:	4602      	mov	r2, r0
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	1ad3      	subs	r3, r2, r3
 80115ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d9ee      	bls.n	80115d2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80115f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	2004245c 	.word	0x2004245c

08011604 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b08c      	sub	sp, #48	; 0x30
 8011608:	af00      	add	r7, sp, #0
 801160a:	4603      	mov	r3, r0
 801160c:	603a      	str	r2, [r7, #0]
 801160e:	71fb      	strb	r3, [r7, #7]
 8011610:	460b      	mov	r3, r1
 8011612:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801161a:	4b25      	ldr	r3, [pc, #148]	; (80116b0 <SD_ioctl+0xac>)
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	b2db      	uxtb	r3, r3
 8011620:	f003 0301 	and.w	r3, r3, #1
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <SD_ioctl+0x28>
 8011628:	2303      	movs	r3, #3
 801162a:	e03c      	b.n	80116a6 <SD_ioctl+0xa2>

  switch (cmd)
 801162c:	79bb      	ldrb	r3, [r7, #6]
 801162e:	2b03      	cmp	r3, #3
 8011630:	d834      	bhi.n	801169c <SD_ioctl+0x98>
 8011632:	a201      	add	r2, pc, #4	; (adr r2, 8011638 <SD_ioctl+0x34>)
 8011634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011638:	08011649 	.word	0x08011649
 801163c:	08011651 	.word	0x08011651
 8011640:	08011669 	.word	0x08011669
 8011644:	08011683 	.word	0x08011683
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011648:	2300      	movs	r3, #0
 801164a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801164e:	e028      	b.n	80116a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011650:	f107 030c 	add.w	r3, r7, #12
 8011654:	4618      	mov	r0, r3
 8011656:	f7ff fe67 	bl	8011328 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011666:	e01c      	b.n	80116a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011668:	f107 030c 	add.w	r3, r7, #12
 801166c:	4618      	mov	r0, r3
 801166e:	f7ff fe5b 	bl	8011328 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011674:	b29a      	uxth	r2, r3
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011680:	e00f      	b.n	80116a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011682:	f107 030c 	add.w	r3, r7, #12
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff fe4e 	bl	8011328 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168e:	0a5a      	lsrs	r2, r3, #9
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011694:	2300      	movs	r3, #0
 8011696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801169a:	e002      	b.n	80116a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801169c:	2304      	movs	r3, #4
 801169e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80116a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3730      	adds	r7, #48	; 0x30
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	20000009 	.word	0x20000009

080116b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80116b4:	b480      	push	{r7}
 80116b6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80116b8:	4b03      	ldr	r3, [pc, #12]	; (80116c8 <BSP_SD_WriteCpltCallback+0x14>)
 80116ba:	2201      	movs	r2, #1
 80116bc:	601a      	str	r2, [r3, #0]
}
 80116be:	bf00      	nop
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	2004245c 	.word	0x2004245c

080116cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80116cc:	b480      	push	{r7}
 80116ce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80116d0:	4b03      	ldr	r3, [pc, #12]	; (80116e0 <BSP_SD_ReadCpltCallback+0x14>)
 80116d2:	2201      	movs	r2, #1
 80116d4:	601a      	str	r2, [r3, #0]
}
 80116d6:	bf00      	nop
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr
 80116e0:	20042460 	.word	0x20042460

080116e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	4603      	mov	r3, r0
 80116ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80116ee:	79fb      	ldrb	r3, [r7, #7]
 80116f0:	4a08      	ldr	r2, [pc, #32]	; (8011714 <disk_status+0x30>)
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	79fa      	ldrb	r2, [r7, #7]
 80116fc:	4905      	ldr	r1, [pc, #20]	; (8011714 <disk_status+0x30>)
 80116fe:	440a      	add	r2, r1
 8011700:	7a12      	ldrb	r2, [r2, #8]
 8011702:	4610      	mov	r0, r2
 8011704:	4798      	blx	r3
 8011706:	4603      	mov	r3, r0
 8011708:	73fb      	strb	r3, [r7, #15]
  return stat;
 801170a:	7bfb      	ldrb	r3, [r7, #15]
}
 801170c:	4618      	mov	r0, r3
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	2004248c 	.word	0x2004248c

08011718 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	4603      	mov	r3, r0
 8011720:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011722:	2300      	movs	r3, #0
 8011724:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011726:	79fb      	ldrb	r3, [r7, #7]
 8011728:	4a0d      	ldr	r2, [pc, #52]	; (8011760 <disk_initialize+0x48>)
 801172a:	5cd3      	ldrb	r3, [r2, r3]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d111      	bne.n	8011754 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	4a0b      	ldr	r2, [pc, #44]	; (8011760 <disk_initialize+0x48>)
 8011734:	2101      	movs	r1, #1
 8011736:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011738:	79fb      	ldrb	r3, [r7, #7]
 801173a:	4a09      	ldr	r2, [pc, #36]	; (8011760 <disk_initialize+0x48>)
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	4413      	add	r3, r2
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	79fa      	ldrb	r2, [r7, #7]
 8011746:	4906      	ldr	r1, [pc, #24]	; (8011760 <disk_initialize+0x48>)
 8011748:	440a      	add	r2, r1
 801174a:	7a12      	ldrb	r2, [r2, #8]
 801174c:	4610      	mov	r0, r2
 801174e:	4798      	blx	r3
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011754:	7bfb      	ldrb	r3, [r7, #15]
}
 8011756:	4618      	mov	r0, r3
 8011758:	3710      	adds	r7, #16
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	2004248c 	.word	0x2004248c

08011764 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011764:	b590      	push	{r4, r7, lr}
 8011766:	b087      	sub	sp, #28
 8011768:	af00      	add	r7, sp, #0
 801176a:	60b9      	str	r1, [r7, #8]
 801176c:	607a      	str	r2, [r7, #4]
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	4603      	mov	r3, r0
 8011772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011774:	7bfb      	ldrb	r3, [r7, #15]
 8011776:	4a0a      	ldr	r2, [pc, #40]	; (80117a0 <disk_read+0x3c>)
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4413      	add	r3, r2
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	689c      	ldr	r4, [r3, #8]
 8011780:	7bfb      	ldrb	r3, [r7, #15]
 8011782:	4a07      	ldr	r2, [pc, #28]	; (80117a0 <disk_read+0x3c>)
 8011784:	4413      	add	r3, r2
 8011786:	7a18      	ldrb	r0, [r3, #8]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	68b9      	ldr	r1, [r7, #8]
 801178e:	47a0      	blx	r4
 8011790:	4603      	mov	r3, r0
 8011792:	75fb      	strb	r3, [r7, #23]
  return res;
 8011794:	7dfb      	ldrb	r3, [r7, #23]
}
 8011796:	4618      	mov	r0, r3
 8011798:	371c      	adds	r7, #28
 801179a:	46bd      	mov	sp, r7
 801179c:	bd90      	pop	{r4, r7, pc}
 801179e:	bf00      	nop
 80117a0:	2004248c 	.word	0x2004248c

080117a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80117a4:	b590      	push	{r4, r7, lr}
 80117a6:	b087      	sub	sp, #28
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60b9      	str	r1, [r7, #8]
 80117ac:	607a      	str	r2, [r7, #4]
 80117ae:	603b      	str	r3, [r7, #0]
 80117b0:	4603      	mov	r3, r0
 80117b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80117b4:	7bfb      	ldrb	r3, [r7, #15]
 80117b6:	4a0a      	ldr	r2, [pc, #40]	; (80117e0 <disk_write+0x3c>)
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	4413      	add	r3, r2
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	68dc      	ldr	r4, [r3, #12]
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
 80117c2:	4a07      	ldr	r2, [pc, #28]	; (80117e0 <disk_write+0x3c>)
 80117c4:	4413      	add	r3, r2
 80117c6:	7a18      	ldrb	r0, [r3, #8]
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	47a0      	blx	r4
 80117d0:	4603      	mov	r3, r0
 80117d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80117d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	371c      	adds	r7, #28
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd90      	pop	{r4, r7, pc}
 80117de:	bf00      	nop
 80117e0:	2004248c 	.word	0x2004248c

080117e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	603a      	str	r2, [r7, #0]
 80117ee:	71fb      	strb	r3, [r7, #7]
 80117f0:	460b      	mov	r3, r1
 80117f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80117f4:	79fb      	ldrb	r3, [r7, #7]
 80117f6:	4a09      	ldr	r2, [pc, #36]	; (801181c <disk_ioctl+0x38>)
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	4413      	add	r3, r2
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	79fa      	ldrb	r2, [r7, #7]
 8011802:	4906      	ldr	r1, [pc, #24]	; (801181c <disk_ioctl+0x38>)
 8011804:	440a      	add	r2, r1
 8011806:	7a10      	ldrb	r0, [r2, #8]
 8011808:	79b9      	ldrb	r1, [r7, #6]
 801180a:	683a      	ldr	r2, [r7, #0]
 801180c:	4798      	blx	r3
 801180e:	4603      	mov	r3, r0
 8011810:	73fb      	strb	r3, [r7, #15]
  return res;
 8011812:	7bfb      	ldrb	r3, [r7, #15]
}
 8011814:	4618      	mov	r0, r3
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	2004248c 	.word	0x2004248c

08011820 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3301      	adds	r3, #1
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011830:	89fb      	ldrh	r3, [r7, #14]
 8011832:	021b      	lsls	r3, r3, #8
 8011834:	b21a      	sxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	b21b      	sxth	r3, r3
 801183c:	4313      	orrs	r3, r2
 801183e:	b21b      	sxth	r3, r3
 8011840:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011842:	89fb      	ldrh	r3, [r7, #14]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3714      	adds	r7, #20
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	3303      	adds	r3, #3
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	021b      	lsls	r3, r3, #8
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	3202      	adds	r2, #2
 8011868:	7812      	ldrb	r2, [r2, #0]
 801186a:	4313      	orrs	r3, r2
 801186c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	021b      	lsls	r3, r3, #8
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	3201      	adds	r2, #1
 8011876:	7812      	ldrb	r2, [r2, #0]
 8011878:	4313      	orrs	r3, r2
 801187a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	021b      	lsls	r3, r3, #8
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	7812      	ldrb	r2, [r2, #0]
 8011884:	4313      	orrs	r3, r2
 8011886:	60fb      	str	r3, [r7, #12]
	return rv;
 8011888:	68fb      	ldr	r3, [r7, #12]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3714      	adds	r7, #20
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011896:	b480      	push	{r7}
 8011898:	b083      	sub	sp, #12
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
 801189e:	460b      	mov	r3, r1
 80118a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	1c5a      	adds	r2, r3, #1
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	887a      	ldrh	r2, [r7, #2]
 80118aa:	b2d2      	uxtb	r2, r2
 80118ac:	701a      	strb	r2, [r3, #0]
 80118ae:	887b      	ldrh	r3, [r7, #2]
 80118b0:	0a1b      	lsrs	r3, r3, #8
 80118b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	1c5a      	adds	r2, r3, #1
 80118b8:	607a      	str	r2, [r7, #4]
 80118ba:	887a      	ldrh	r2, [r7, #2]
 80118bc:	b2d2      	uxtb	r2, r2
 80118be:	701a      	strb	r2, [r3, #0]
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	607a      	str	r2, [r7, #4]
 80118dc:	683a      	ldr	r2, [r7, #0]
 80118de:	b2d2      	uxtb	r2, r2
 80118e0:	701a      	strb	r2, [r3, #0]
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	0a1b      	lsrs	r3, r3, #8
 80118e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	1c5a      	adds	r2, r3, #1
 80118ec:	607a      	str	r2, [r7, #4]
 80118ee:	683a      	ldr	r2, [r7, #0]
 80118f0:	b2d2      	uxtb	r2, r2
 80118f2:	701a      	strb	r2, [r3, #0]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	0a1b      	lsrs	r3, r3, #8
 80118f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	1c5a      	adds	r2, r3, #1
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	683a      	ldr	r2, [r7, #0]
 8011902:	b2d2      	uxtb	r2, r2
 8011904:	701a      	strb	r2, [r3, #0]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	0a1b      	lsrs	r3, r3, #8
 801190a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	1c5a      	adds	r2, r3, #1
 8011910:	607a      	str	r2, [r7, #4]
 8011912:	683a      	ldr	r2, [r7, #0]
 8011914:	b2d2      	uxtb	r2, r2
 8011916:	701a      	strb	r2, [r3, #0]
}
 8011918:	bf00      	nop
 801191a:	370c      	adds	r7, #12
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011924:	b480      	push	{r7}
 8011926:	b087      	sub	sp, #28
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00d      	beq.n	801195a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801193e:	693a      	ldr	r2, [r7, #16]
 8011940:	1c53      	adds	r3, r2, #1
 8011942:	613b      	str	r3, [r7, #16]
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	1c59      	adds	r1, r3, #1
 8011948:	6179      	str	r1, [r7, #20]
 801194a:	7812      	ldrb	r2, [r2, #0]
 801194c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	3b01      	subs	r3, #1
 8011952:	607b      	str	r3, [r7, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1f1      	bne.n	801193e <mem_cpy+0x1a>
	}
}
 801195a:	bf00      	nop
 801195c:	371c      	adds	r7, #28
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr

08011966 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011966:	b480      	push	{r7}
 8011968:	b087      	sub	sp, #28
 801196a:	af00      	add	r7, sp, #0
 801196c:	60f8      	str	r0, [r7, #12]
 801196e:	60b9      	str	r1, [r7, #8]
 8011970:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	617a      	str	r2, [r7, #20]
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	b2d2      	uxtb	r2, r2
 8011980:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	3b01      	subs	r3, #1
 8011986:	607b      	str	r3, [r7, #4]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1f3      	bne.n	8011976 <mem_set+0x10>
}
 801198e:	bf00      	nop
 8011990:	371c      	adds	r7, #28
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr

0801199a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801199a:	b480      	push	{r7}
 801199c:	b089      	sub	sp, #36	; 0x24
 801199e:	af00      	add	r7, sp, #0
 80119a0:	60f8      	str	r0, [r7, #12]
 80119a2:	60b9      	str	r1, [r7, #8]
 80119a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	61fb      	str	r3, [r7, #28]
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	1c5a      	adds	r2, r3, #1
 80119b6:	61fa      	str	r2, [r7, #28]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	4619      	mov	r1, r3
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	1c5a      	adds	r2, r3, #1
 80119c0:	61ba      	str	r2, [r7, #24]
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	1acb      	subs	r3, r1, r3
 80119c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	3b01      	subs	r3, #1
 80119cc:	607b      	str	r3, [r7, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d002      	beq.n	80119da <mem_cmp+0x40>
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d0eb      	beq.n	80119b2 <mem_cmp+0x18>

	return r;
 80119da:	697b      	ldr	r3, [r7, #20]
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3724      	adds	r7, #36	; 0x24
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80119f2:	e002      	b.n	80119fa <chk_chr+0x12>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	3301      	adds	r3, #1
 80119f8:	607b      	str	r3, [r7, #4]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d005      	beq.n	8011a0e <chk_chr+0x26>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	461a      	mov	r2, r3
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d1f2      	bne.n	80119f4 <chk_chr+0xc>
	return *str;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	781b      	ldrb	r3, [r3, #0]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
	...

08011a20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b085      	sub	sp, #20
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	60bb      	str	r3, [r7, #8]
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	60fb      	str	r3, [r7, #12]
 8011a32:	e029      	b.n	8011a88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011a34:	4a27      	ldr	r2, [pc, #156]	; (8011ad4 <chk_lock+0xb4>)
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	011b      	lsls	r3, r3, #4
 8011a3a:	4413      	add	r3, r2
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d01d      	beq.n	8011a7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a42:	4a24      	ldr	r2, [pc, #144]	; (8011ad4 <chk_lock+0xb4>)
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	011b      	lsls	r3, r3, #4
 8011a48:	4413      	add	r3, r2
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d116      	bne.n	8011a82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011a54:	4a1f      	ldr	r2, [pc, #124]	; (8011ad4 <chk_lock+0xb4>)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	011b      	lsls	r3, r3, #4
 8011a5a:	4413      	add	r3, r2
 8011a5c:	3304      	adds	r3, #4
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d10c      	bne.n	8011a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a68:	4a1a      	ldr	r2, [pc, #104]	; (8011ad4 <chk_lock+0xb4>)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	011b      	lsls	r3, r3, #4
 8011a6e:	4413      	add	r3, r2
 8011a70:	3308      	adds	r3, #8
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d102      	bne.n	8011a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a7c:	e007      	b.n	8011a8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011a7e:	2301      	movs	r3, #1
 8011a80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	3301      	adds	r3, #1
 8011a86:	60fb      	str	r3, [r7, #12]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	d9d2      	bls.n	8011a34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2b02      	cmp	r3, #2
 8011a92:	d109      	bne.n	8011aa8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d102      	bne.n	8011aa0 <chk_lock+0x80>
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d101      	bne.n	8011aa4 <chk_lock+0x84>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e010      	b.n	8011ac6 <chk_lock+0xa6>
 8011aa4:	2312      	movs	r3, #18
 8011aa6:	e00e      	b.n	8011ac6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d108      	bne.n	8011ac0 <chk_lock+0xa0>
 8011aae:	4a09      	ldr	r2, [pc, #36]	; (8011ad4 <chk_lock+0xb4>)
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	011b      	lsls	r3, r3, #4
 8011ab4:	4413      	add	r3, r2
 8011ab6:	330c      	adds	r3, #12
 8011ab8:	881b      	ldrh	r3, [r3, #0]
 8011aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011abe:	d101      	bne.n	8011ac4 <chk_lock+0xa4>
 8011ac0:	2310      	movs	r3, #16
 8011ac2:	e000      	b.n	8011ac6 <chk_lock+0xa6>
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3714      	adds	r7, #20
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	2004246c 	.word	0x2004246c

08011ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	607b      	str	r3, [r7, #4]
 8011ae2:	e002      	b.n	8011aea <enq_lock+0x12>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	607b      	str	r3, [r7, #4]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d806      	bhi.n	8011afe <enq_lock+0x26>
 8011af0:	4a09      	ldr	r2, [pc, #36]	; (8011b18 <enq_lock+0x40>)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	011b      	lsls	r3, r3, #4
 8011af6:	4413      	add	r3, r2
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1f2      	bne.n	8011ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2b02      	cmp	r3, #2
 8011b02:	bf14      	ite	ne
 8011b04:	2301      	movne	r3, #1
 8011b06:	2300      	moveq	r3, #0
 8011b08:	b2db      	uxtb	r3, r3
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	2004246c 	.word	0x2004246c

08011b1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b26:	2300      	movs	r3, #0
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	e01f      	b.n	8011b6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011b2c:	4a41      	ldr	r2, [pc, #260]	; (8011c34 <inc_lock+0x118>)
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	011b      	lsls	r3, r3, #4
 8011b32:	4413      	add	r3, r2
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d113      	bne.n	8011b66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011b3e:	4a3d      	ldr	r2, [pc, #244]	; (8011c34 <inc_lock+0x118>)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	011b      	lsls	r3, r3, #4
 8011b44:	4413      	add	r3, r2
 8011b46:	3304      	adds	r3, #4
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d109      	bne.n	8011b66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011b52:	4a38      	ldr	r2, [pc, #224]	; (8011c34 <inc_lock+0x118>)
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	011b      	lsls	r3, r3, #4
 8011b58:	4413      	add	r3, r2
 8011b5a:	3308      	adds	r3, #8
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d006      	beq.n	8011b74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d9dc      	bls.n	8011b2c <inc_lock+0x10>
 8011b72:	e000      	b.n	8011b76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011b74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2b02      	cmp	r3, #2
 8011b7a:	d132      	bne.n	8011be2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	60fb      	str	r3, [r7, #12]
 8011b80:	e002      	b.n	8011b88 <inc_lock+0x6c>
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	3301      	adds	r3, #1
 8011b86:	60fb      	str	r3, [r7, #12]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d806      	bhi.n	8011b9c <inc_lock+0x80>
 8011b8e:	4a29      	ldr	r2, [pc, #164]	; (8011c34 <inc_lock+0x118>)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	011b      	lsls	r3, r3, #4
 8011b94:	4413      	add	r3, r2
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1f2      	bne.n	8011b82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d101      	bne.n	8011ba6 <inc_lock+0x8a>
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	e040      	b.n	8011c28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	4922      	ldr	r1, [pc, #136]	; (8011c34 <inc_lock+0x118>)
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	011b      	lsls	r3, r3, #4
 8011bb0:	440b      	add	r3, r1
 8011bb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	689a      	ldr	r2, [r3, #8]
 8011bb8:	491e      	ldr	r1, [pc, #120]	; (8011c34 <inc_lock+0x118>)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	011b      	lsls	r3, r3, #4
 8011bbe:	440b      	add	r3, r1
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	695a      	ldr	r2, [r3, #20]
 8011bc8:	491a      	ldr	r1, [pc, #104]	; (8011c34 <inc_lock+0x118>)
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	011b      	lsls	r3, r3, #4
 8011bce:	440b      	add	r3, r1
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011bd4:	4a17      	ldr	r2, [pc, #92]	; (8011c34 <inc_lock+0x118>)
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	011b      	lsls	r3, r3, #4
 8011bda:	4413      	add	r3, r2
 8011bdc:	330c      	adds	r3, #12
 8011bde:	2200      	movs	r2, #0
 8011be0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d009      	beq.n	8011bfc <inc_lock+0xe0>
 8011be8:	4a12      	ldr	r2, [pc, #72]	; (8011c34 <inc_lock+0x118>)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	011b      	lsls	r3, r3, #4
 8011bee:	4413      	add	r3, r2
 8011bf0:	330c      	adds	r3, #12
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <inc_lock+0xe0>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e015      	b.n	8011c28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d108      	bne.n	8011c14 <inc_lock+0xf8>
 8011c02:	4a0c      	ldr	r2, [pc, #48]	; (8011c34 <inc_lock+0x118>)
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	011b      	lsls	r3, r3, #4
 8011c08:	4413      	add	r3, r2
 8011c0a:	330c      	adds	r3, #12
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	e001      	b.n	8011c18 <inc_lock+0xfc>
 8011c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011c18:	4906      	ldr	r1, [pc, #24]	; (8011c34 <inc_lock+0x118>)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	011b      	lsls	r3, r3, #4
 8011c1e:	440b      	add	r3, r1
 8011c20:	330c      	adds	r3, #12
 8011c22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	3301      	adds	r3, #1
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	2004246c 	.word	0x2004246c

08011c38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b085      	sub	sp, #20
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	3b01      	subs	r3, #1
 8011c44:	607b      	str	r3, [r7, #4]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d825      	bhi.n	8011c98 <dec_lock+0x60>
		n = Files[i].ctr;
 8011c4c:	4a17      	ldr	r2, [pc, #92]	; (8011cac <dec_lock+0x74>)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	011b      	lsls	r3, r3, #4
 8011c52:	4413      	add	r3, r2
 8011c54:	330c      	adds	r3, #12
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011c5a:	89fb      	ldrh	r3, [r7, #14]
 8011c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c60:	d101      	bne.n	8011c66 <dec_lock+0x2e>
 8011c62:	2300      	movs	r3, #0
 8011c64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011c66:	89fb      	ldrh	r3, [r7, #14]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d002      	beq.n	8011c72 <dec_lock+0x3a>
 8011c6c:	89fb      	ldrh	r3, [r7, #14]
 8011c6e:	3b01      	subs	r3, #1
 8011c70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011c72:	4a0e      	ldr	r2, [pc, #56]	; (8011cac <dec_lock+0x74>)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	011b      	lsls	r3, r3, #4
 8011c78:	4413      	add	r3, r2
 8011c7a:	330c      	adds	r3, #12
 8011c7c:	89fa      	ldrh	r2, [r7, #14]
 8011c7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011c80:	89fb      	ldrh	r3, [r7, #14]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d105      	bne.n	8011c92 <dec_lock+0x5a>
 8011c86:	4a09      	ldr	r2, [pc, #36]	; (8011cac <dec_lock+0x74>)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	011b      	lsls	r3, r3, #4
 8011c8c:	4413      	add	r3, r2
 8011c8e:	2200      	movs	r2, #0
 8011c90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011c92:	2300      	movs	r3, #0
 8011c94:	737b      	strb	r3, [r7, #13]
 8011c96:	e001      	b.n	8011c9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011c98:	2302      	movs	r3, #2
 8011c9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011c9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3714      	adds	r7, #20
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop
 8011cac:	2004246c 	.word	0x2004246c

08011cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b085      	sub	sp, #20
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011cb8:	2300      	movs	r3, #0
 8011cba:	60fb      	str	r3, [r7, #12]
 8011cbc:	e010      	b.n	8011ce0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011cbe:	4a0d      	ldr	r2, [pc, #52]	; (8011cf4 <clear_lock+0x44>)
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	011b      	lsls	r3, r3, #4
 8011cc4:	4413      	add	r3, r2
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d105      	bne.n	8011cda <clear_lock+0x2a>
 8011cce:	4a09      	ldr	r2, [pc, #36]	; (8011cf4 <clear_lock+0x44>)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	011b      	lsls	r3, r3, #4
 8011cd4:	4413      	add	r3, r2
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	60fb      	str	r3, [r7, #12]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d9eb      	bls.n	8011cbe <clear_lock+0xe>
	}
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	2004246c 	.word	0x2004246c

08011cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011d00:	2300      	movs	r3, #0
 8011d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	78db      	ldrb	r3, [r3, #3]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d034      	beq.n	8011d76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	7858      	ldrb	r0, [r3, #1]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	f7ff fd40 	bl	80117a4 <disk_write>
 8011d24:	4603      	mov	r3, r0
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d002      	beq.n	8011d30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	73fb      	strb	r3, [r7, #15]
 8011d2e:	e022      	b.n	8011d76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2200      	movs	r2, #0
 8011d34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d3a:	697a      	ldr	r2, [r7, #20]
 8011d3c:	1ad2      	subs	r2, r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6a1b      	ldr	r3, [r3, #32]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d217      	bcs.n	8011d76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	789b      	ldrb	r3, [r3, #2]
 8011d4a:	613b      	str	r3, [r7, #16]
 8011d4c:	e010      	b.n	8011d70 <sync_window+0x78>
					wsect += fs->fsize;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6a1b      	ldr	r3, [r3, #32]
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	4413      	add	r3, r2
 8011d56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	7858      	ldrb	r0, [r3, #1]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d62:	2301      	movs	r3, #1
 8011d64:	697a      	ldr	r2, [r7, #20]
 8011d66:	f7ff fd1d 	bl	80117a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	613b      	str	r3, [r7, #16]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d8eb      	bhi.n	8011d4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3718      	adds	r7, #24
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d01b      	beq.n	8011dd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7ff ffad 	bl	8011cf8 <sync_window>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011da2:	7bfb      	ldrb	r3, [r7, #15]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d113      	bne.n	8011dd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	7858      	ldrb	r0, [r3, #1]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011db2:	2301      	movs	r3, #1
 8011db4:	683a      	ldr	r2, [r7, #0]
 8011db6:	f7ff fcd5 	bl	8011764 <disk_read>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d004      	beq.n	8011dca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
	...

08011ddc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7ff ff87 	bl	8011cf8 <sync_window>
 8011dea:	4603      	mov	r3, r0
 8011dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011dee:	7bfb      	ldrb	r3, [r7, #15]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d159      	bne.n	8011ea8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d149      	bne.n	8011e90 <sync_fs+0xb4>
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	791b      	ldrb	r3, [r3, #4]
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d145      	bne.n	8011e90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	899b      	ldrh	r3, [r3, #12]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	2100      	movs	r1, #0
 8011e12:	f7ff fda8 	bl	8011966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	3338      	adds	r3, #56	; 0x38
 8011e1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e1e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7ff fd37 	bl	8011896 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	3338      	adds	r3, #56	; 0x38
 8011e2c:	4921      	ldr	r1, [pc, #132]	; (8011eb4 <sync_fs+0xd8>)
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff fd4c 	bl	80118cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	3338      	adds	r3, #56	; 0x38
 8011e38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e3c:	491e      	ldr	r1, [pc, #120]	; (8011eb8 <sync_fs+0xdc>)
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7ff fd44 	bl	80118cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3338      	adds	r3, #56	; 0x38
 8011e48:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	695b      	ldr	r3, [r3, #20]
 8011e50:	4619      	mov	r1, r3
 8011e52:	4610      	mov	r0, r2
 8011e54:	f7ff fd3a 	bl	80118cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	3338      	adds	r3, #56	; 0x38
 8011e5c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	691b      	ldr	r3, [r3, #16]
 8011e64:	4619      	mov	r1, r3
 8011e66:	4610      	mov	r0, r2
 8011e68:	f7ff fd30 	bl	80118cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e70:	1c5a      	adds	r2, r3, #1
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	7858      	ldrb	r0, [r3, #1]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e84:	2301      	movs	r3, #1
 8011e86:	f7ff fc8d 	bl	80117a4 <disk_write>
			fs->fsi_flag = 0;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	785b      	ldrb	r3, [r3, #1]
 8011e94:	2200      	movs	r2, #0
 8011e96:	2100      	movs	r1, #0
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff fca3 	bl	80117e4 <disk_ioctl>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d001      	beq.n	8011ea8 <sync_fs+0xcc>
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3710      	adds	r7, #16
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	41615252 	.word	0x41615252
 8011eb8:	61417272 	.word	0x61417272

08011ebc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b083      	sub	sp, #12
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	3b02      	subs	r3, #2
 8011eca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	69db      	ldr	r3, [r3, #28]
 8011ed0:	3b02      	subs	r3, #2
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d301      	bcc.n	8011edc <clust2sect+0x20>
 8011ed8:	2300      	movs	r3, #0
 8011eda:	e008      	b.n	8011eee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	895b      	ldrh	r3, [r3, #10]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	fb03 f202 	mul.w	r2, r3, r2
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eec:	4413      	add	r3, r2
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	370c      	adds	r7, #12
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr

08011efa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b086      	sub	sp, #24
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
 8011f02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d904      	bls.n	8011f1a <get_fat+0x20>
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	69db      	ldr	r3, [r3, #28]
 8011f14:	683a      	ldr	r2, [r7, #0]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d302      	bcc.n	8011f20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	617b      	str	r3, [r7, #20]
 8011f1e:	e0b7      	b.n	8012090 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011f20:	f04f 33ff 	mov.w	r3, #4294967295
 8011f24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d05a      	beq.n	8011fe4 <get_fat+0xea>
 8011f2e:	2b03      	cmp	r3, #3
 8011f30:	d07d      	beq.n	801202e <get_fat+0x134>
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	f040 80a2 	bne.w	801207c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	60fb      	str	r3, [r7, #12]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	085b      	lsrs	r3, r3, #1
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	4413      	add	r3, r2
 8011f44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	899b      	ldrh	r3, [r3, #12]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f56:	4413      	add	r3, r2
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6938      	ldr	r0, [r7, #16]
 8011f5c:	f7ff ff10 	bl	8011d80 <move_window>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	f040 808d 	bne.w	8012082 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	1c5a      	adds	r2, r3, #1
 8011f6c:	60fa      	str	r2, [r7, #12]
 8011f6e:	693a      	ldr	r2, [r7, #16]
 8011f70:	8992      	ldrh	r2, [r2, #12]
 8011f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f76:	fb02 f201 	mul.w	r2, r2, r1
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	693a      	ldr	r2, [r7, #16]
 8011f7e:	4413      	add	r3, r2
 8011f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	899b      	ldrh	r3, [r3, #12]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f96:	4413      	add	r3, r2
 8011f98:	4619      	mov	r1, r3
 8011f9a:	6938      	ldr	r0, [r7, #16]
 8011f9c:	f7ff fef0 	bl	8011d80 <move_window>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d16f      	bne.n	8012086 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	899b      	ldrh	r3, [r3, #12]
 8011faa:	461a      	mov	r2, r3
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fb2:	fb02 f201 	mul.w	r2, r2, r1
 8011fb6:	1a9b      	subs	r3, r3, r2
 8011fb8:	693a      	ldr	r2, [r7, #16]
 8011fba:	4413      	add	r3, r2
 8011fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011fc0:	021b      	lsls	r3, r3, #8
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	f003 0301 	and.w	r3, r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d002      	beq.n	8011fda <get_fat+0xe0>
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	091b      	lsrs	r3, r3, #4
 8011fd8:	e002      	b.n	8011fe0 <get_fat+0xe6>
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011fe0:	617b      	str	r3, [r7, #20]
			break;
 8011fe2:	e055      	b.n	8012090 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	899b      	ldrh	r3, [r3, #12]
 8011fec:	085b      	lsrs	r3, r3, #1
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ff8:	4413      	add	r3, r2
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	6938      	ldr	r0, [r7, #16]
 8011ffe:	f7ff febf 	bl	8011d80 <move_window>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d140      	bne.n	801208a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	005b      	lsls	r3, r3, #1
 8012012:	693a      	ldr	r2, [r7, #16]
 8012014:	8992      	ldrh	r2, [r2, #12]
 8012016:	fbb3 f0f2 	udiv	r0, r3, r2
 801201a:	fb02 f200 	mul.w	r2, r2, r0
 801201e:	1a9b      	subs	r3, r3, r2
 8012020:	440b      	add	r3, r1
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff fbfc 	bl	8011820 <ld_word>
 8012028:	4603      	mov	r3, r0
 801202a:	617b      	str	r3, [r7, #20]
			break;
 801202c:	e030      	b.n	8012090 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	899b      	ldrh	r3, [r3, #12]
 8012036:	089b      	lsrs	r3, r3, #2
 8012038:	b29b      	uxth	r3, r3
 801203a:	4619      	mov	r1, r3
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012042:	4413      	add	r3, r2
 8012044:	4619      	mov	r1, r3
 8012046:	6938      	ldr	r0, [r7, #16]
 8012048:	f7ff fe9a 	bl	8011d80 <move_window>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d11d      	bne.n	801208e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	693a      	ldr	r2, [r7, #16]
 801205e:	8992      	ldrh	r2, [r2, #12]
 8012060:	fbb3 f0f2 	udiv	r0, r3, r2
 8012064:	fb02 f200 	mul.w	r2, r2, r0
 8012068:	1a9b      	subs	r3, r3, r2
 801206a:	440b      	add	r3, r1
 801206c:	4618      	mov	r0, r3
 801206e:	f7ff fbef 	bl	8011850 <ld_dword>
 8012072:	4603      	mov	r3, r0
 8012074:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012078:	617b      	str	r3, [r7, #20]
			break;
 801207a:	e009      	b.n	8012090 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801207c:	2301      	movs	r3, #1
 801207e:	617b      	str	r3, [r7, #20]
 8012080:	e006      	b.n	8012090 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012082:	bf00      	nop
 8012084:	e004      	b.n	8012090 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012086:	bf00      	nop
 8012088:	e002      	b.n	8012090 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801208a:	bf00      	nop
 801208c:	e000      	b.n	8012090 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801208e:	bf00      	nop
		}
	}

	return val;
 8012090:	697b      	ldr	r3, [r7, #20]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3718      	adds	r7, #24
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}

0801209a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801209a:	b590      	push	{r4, r7, lr}
 801209c:	b089      	sub	sp, #36	; 0x24
 801209e:	af00      	add	r7, sp, #0
 80120a0:	60f8      	str	r0, [r7, #12]
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80120a6:	2302      	movs	r3, #2
 80120a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	f240 8106 	bls.w	80122be <put_fat+0x224>
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	69db      	ldr	r3, [r3, #28]
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	f080 8100 	bcs.w	80122be <put_fat+0x224>
		switch (fs->fs_type) {
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	f000 8088 	beq.w	80121d8 <put_fat+0x13e>
 80120c8:	2b03      	cmp	r3, #3
 80120ca:	f000 80b0 	beq.w	801222e <put_fat+0x194>
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	f040 80f5 	bne.w	80122be <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	61bb      	str	r3, [r7, #24]
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	085b      	lsrs	r3, r3, #1
 80120dc:	69ba      	ldr	r2, [r7, #24]
 80120de:	4413      	add	r3, r2
 80120e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	899b      	ldrh	r3, [r3, #12]
 80120ea:	4619      	mov	r1, r3
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80120f2:	4413      	add	r3, r2
 80120f4:	4619      	mov	r1, r3
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f7ff fe42 	bl	8011d80 <move_window>
 80120fc:	4603      	mov	r3, r0
 80120fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012100:	7ffb      	ldrb	r3, [r7, #31]
 8012102:	2b00      	cmp	r3, #0
 8012104:	f040 80d4 	bne.w	80122b0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	1c5a      	adds	r2, r3, #1
 8012112:	61ba      	str	r2, [r7, #24]
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	8992      	ldrh	r2, [r2, #12]
 8012118:	fbb3 f0f2 	udiv	r0, r3, r2
 801211c:	fb02 f200 	mul.w	r2, r2, r0
 8012120:	1a9b      	subs	r3, r3, r2
 8012122:	440b      	add	r3, r1
 8012124:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	f003 0301 	and.w	r3, r3, #1
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00d      	beq.n	801214c <put_fat+0xb2>
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	b25b      	sxtb	r3, r3
 8012136:	f003 030f 	and.w	r3, r3, #15
 801213a:	b25a      	sxtb	r2, r3
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	b2db      	uxtb	r3, r3
 8012140:	011b      	lsls	r3, r3, #4
 8012142:	b25b      	sxtb	r3, r3
 8012144:	4313      	orrs	r3, r2
 8012146:	b25b      	sxtb	r3, r3
 8012148:	b2db      	uxtb	r3, r3
 801214a:	e001      	b.n	8012150 <put_fat+0xb6>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	b2db      	uxtb	r3, r3
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2201      	movs	r2, #1
 8012158:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	899b      	ldrh	r3, [r3, #12]
 8012162:	4619      	mov	r1, r3
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	fbb3 f3f1 	udiv	r3, r3, r1
 801216a:	4413      	add	r3, r2
 801216c:	4619      	mov	r1, r3
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f7ff fe06 	bl	8011d80 <move_window>
 8012174:	4603      	mov	r3, r0
 8012176:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012178:	7ffb      	ldrb	r3, [r7, #31]
 801217a:	2b00      	cmp	r3, #0
 801217c:	f040 809a 	bne.w	80122b4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	899b      	ldrh	r3, [r3, #12]
 801218a:	461a      	mov	r2, r3
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012192:	fb02 f200 	mul.w	r2, r2, r0
 8012196:	1a9b      	subs	r3, r3, r2
 8012198:	440b      	add	r3, r1
 801219a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	f003 0301 	and.w	r3, r3, #1
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d003      	beq.n	80121ae <put_fat+0x114>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	091b      	lsrs	r3, r3, #4
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	e00e      	b.n	80121cc <put_fat+0x132>
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	b25b      	sxtb	r3, r3
 80121b4:	f023 030f 	bic.w	r3, r3, #15
 80121b8:	b25a      	sxtb	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	0a1b      	lsrs	r3, r3, #8
 80121be:	b25b      	sxtb	r3, r3
 80121c0:	f003 030f 	and.w	r3, r3, #15
 80121c4:	b25b      	sxtb	r3, r3
 80121c6:	4313      	orrs	r3, r2
 80121c8:	b25b      	sxtb	r3, r3
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	697a      	ldr	r2, [r7, #20]
 80121ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2201      	movs	r2, #1
 80121d4:	70da      	strb	r2, [r3, #3]
			break;
 80121d6:	e072      	b.n	80122be <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	899b      	ldrh	r3, [r3, #12]
 80121e0:	085b      	lsrs	r3, r3, #1
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	4619      	mov	r1, r3
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80121ec:	4413      	add	r3, r2
 80121ee:	4619      	mov	r1, r3
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f7ff fdc5 	bl	8011d80 <move_window>
 80121f6:	4603      	mov	r3, r0
 80121f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121fa:	7ffb      	ldrb	r3, [r7, #31]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d15b      	bne.n	80122b8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	005b      	lsls	r3, r3, #1
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	8992      	ldrh	r2, [r2, #12]
 801220e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012212:	fb02 f200 	mul.w	r2, r2, r0
 8012216:	1a9b      	subs	r3, r3, r2
 8012218:	440b      	add	r3, r1
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	b292      	uxth	r2, r2
 801221e:	4611      	mov	r1, r2
 8012220:	4618      	mov	r0, r3
 8012222:	f7ff fb38 	bl	8011896 <st_word>
			fs->wflag = 1;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2201      	movs	r2, #1
 801222a:	70da      	strb	r2, [r3, #3]
			break;
 801222c:	e047      	b.n	80122be <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	899b      	ldrh	r3, [r3, #12]
 8012236:	089b      	lsrs	r3, r3, #2
 8012238:	b29b      	uxth	r3, r3
 801223a:	4619      	mov	r1, r3
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012242:	4413      	add	r3, r2
 8012244:	4619      	mov	r1, r3
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f7ff fd9a 	bl	8011d80 <move_window>
 801224c:	4603      	mov	r3, r0
 801224e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012250:	7ffb      	ldrb	r3, [r7, #31]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d132      	bne.n	80122bc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	8992      	ldrh	r2, [r2, #12]
 801226a:	fbb3 f0f2 	udiv	r0, r3, r2
 801226e:	fb02 f200 	mul.w	r2, r2, r0
 8012272:	1a9b      	subs	r3, r3, r2
 8012274:	440b      	add	r3, r1
 8012276:	4618      	mov	r0, r3
 8012278:	f7ff faea 	bl	8011850 <ld_dword>
 801227c:	4603      	mov	r3, r0
 801227e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012282:	4323      	orrs	r3, r4
 8012284:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	68fa      	ldr	r2, [r7, #12]
 8012292:	8992      	ldrh	r2, [r2, #12]
 8012294:	fbb3 f0f2 	udiv	r0, r3, r2
 8012298:	fb02 f200 	mul.w	r2, r2, r0
 801229c:	1a9b      	subs	r3, r3, r2
 801229e:	440b      	add	r3, r1
 80122a0:	6879      	ldr	r1, [r7, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7ff fb12 	bl	80118cc <st_dword>
			fs->wflag = 1;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2201      	movs	r2, #1
 80122ac:	70da      	strb	r2, [r3, #3]
			break;
 80122ae:	e006      	b.n	80122be <put_fat+0x224>
			if (res != FR_OK) break;
 80122b0:	bf00      	nop
 80122b2:	e004      	b.n	80122be <put_fat+0x224>
			if (res != FR_OK) break;
 80122b4:	bf00      	nop
 80122b6:	e002      	b.n	80122be <put_fat+0x224>
			if (res != FR_OK) break;
 80122b8:	bf00      	nop
 80122ba:	e000      	b.n	80122be <put_fat+0x224>
			if (res != FR_OK) break;
 80122bc:	bf00      	nop
		}
	}
	return res;
 80122be:	7ffb      	ldrb	r3, [r7, #31]
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3724      	adds	r7, #36	; 0x24
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd90      	pop	{r4, r7, pc}

080122c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b088      	sub	sp, #32
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80122d4:	2300      	movs	r3, #0
 80122d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d904      	bls.n	80122ee <remove_chain+0x26>
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	69db      	ldr	r3, [r3, #28]
 80122e8:	68ba      	ldr	r2, [r7, #8]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d301      	bcc.n	80122f2 <remove_chain+0x2a>
 80122ee:	2302      	movs	r3, #2
 80122f0:	e04b      	b.n	801238a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d00c      	beq.n	8012312 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80122f8:	f04f 32ff 	mov.w	r2, #4294967295
 80122fc:	6879      	ldr	r1, [r7, #4]
 80122fe:	69b8      	ldr	r0, [r7, #24]
 8012300:	f7ff fecb 	bl	801209a <put_fat>
 8012304:	4603      	mov	r3, r0
 8012306:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012308:	7ffb      	ldrb	r3, [r7, #31]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <remove_chain+0x4a>
 801230e:	7ffb      	ldrb	r3, [r7, #31]
 8012310:	e03b      	b.n	801238a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012312:	68b9      	ldr	r1, [r7, #8]
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f7ff fdf0 	bl	8011efa <get_fat>
 801231a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d031      	beq.n	8012386 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	2b01      	cmp	r3, #1
 8012326:	d101      	bne.n	801232c <remove_chain+0x64>
 8012328:	2302      	movs	r3, #2
 801232a:	e02e      	b.n	801238a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012332:	d101      	bne.n	8012338 <remove_chain+0x70>
 8012334:	2301      	movs	r3, #1
 8012336:	e028      	b.n	801238a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012338:	2200      	movs	r2, #0
 801233a:	68b9      	ldr	r1, [r7, #8]
 801233c:	69b8      	ldr	r0, [r7, #24]
 801233e:	f7ff feac 	bl	801209a <put_fat>
 8012342:	4603      	mov	r3, r0
 8012344:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012346:	7ffb      	ldrb	r3, [r7, #31]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d001      	beq.n	8012350 <remove_chain+0x88>
 801234c:	7ffb      	ldrb	r3, [r7, #31]
 801234e:	e01c      	b.n	801238a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	695a      	ldr	r2, [r3, #20]
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	69db      	ldr	r3, [r3, #28]
 8012358:	3b02      	subs	r3, #2
 801235a:	429a      	cmp	r2, r3
 801235c:	d20b      	bcs.n	8012376 <remove_chain+0xae>
			fs->free_clst++;
 801235e:	69bb      	ldr	r3, [r7, #24]
 8012360:	695b      	ldr	r3, [r3, #20]
 8012362:	1c5a      	adds	r2, r3, #1
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	791b      	ldrb	r3, [r3, #4]
 801236c:	f043 0301 	orr.w	r3, r3, #1
 8012370:	b2da      	uxtb	r2, r3
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	69db      	ldr	r3, [r3, #28]
 801237e:	68ba      	ldr	r2, [r7, #8]
 8012380:	429a      	cmp	r2, r3
 8012382:	d3c6      	bcc.n	8012312 <remove_chain+0x4a>
 8012384:	e000      	b.n	8012388 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012386:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012388:	2300      	movs	r3, #0
}
 801238a:	4618      	mov	r0, r3
 801238c:	3720      	adds	r7, #32
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b088      	sub	sp, #32
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
 801239a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d10d      	bne.n	80123c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d004      	beq.n	80123be <create_chain+0x2c>
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	69db      	ldr	r3, [r3, #28]
 80123b8:	69ba      	ldr	r2, [r7, #24]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d31b      	bcc.n	80123f6 <create_chain+0x64>
 80123be:	2301      	movs	r3, #1
 80123c0:	61bb      	str	r3, [r7, #24]
 80123c2:	e018      	b.n	80123f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80123c4:	6839      	ldr	r1, [r7, #0]
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ff fd97 	bl	8011efa <get_fat>
 80123cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d801      	bhi.n	80123d8 <create_chain+0x46>
 80123d4:	2301      	movs	r3, #1
 80123d6:	e070      	b.n	80124ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123de:	d101      	bne.n	80123e4 <create_chain+0x52>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	e06a      	b.n	80124ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	69db      	ldr	r3, [r3, #28]
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d201      	bcs.n	80123f2 <create_chain+0x60>
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	e063      	b.n	80124ba <create_chain+0x128>
		scl = clst;
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	3301      	adds	r3, #1
 80123fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	69db      	ldr	r3, [r3, #28]
 8012404:	69fa      	ldr	r2, [r7, #28]
 8012406:	429a      	cmp	r2, r3
 8012408:	d307      	bcc.n	801241a <create_chain+0x88>
				ncl = 2;
 801240a:	2302      	movs	r3, #2
 801240c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801240e:	69fa      	ldr	r2, [r7, #28]
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	429a      	cmp	r2, r3
 8012414:	d901      	bls.n	801241a <create_chain+0x88>
 8012416:	2300      	movs	r3, #0
 8012418:	e04f      	b.n	80124ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801241a:	69f9      	ldr	r1, [r7, #28]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff fd6c 	bl	8011efa <get_fat>
 8012422:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00e      	beq.n	8012448 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d003      	beq.n	8012438 <create_chain+0xa6>
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012436:	d101      	bne.n	801243c <create_chain+0xaa>
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	e03e      	b.n	80124ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801243c:	69fa      	ldr	r2, [r7, #28]
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	429a      	cmp	r2, r3
 8012442:	d1da      	bne.n	80123fa <create_chain+0x68>
 8012444:	2300      	movs	r3, #0
 8012446:	e038      	b.n	80124ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012448:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801244a:	f04f 32ff 	mov.w	r2, #4294967295
 801244e:	69f9      	ldr	r1, [r7, #28]
 8012450:	6938      	ldr	r0, [r7, #16]
 8012452:	f7ff fe22 	bl	801209a <put_fat>
 8012456:	4603      	mov	r3, r0
 8012458:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801245a:	7dfb      	ldrb	r3, [r7, #23]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d109      	bne.n	8012474 <create_chain+0xe2>
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d006      	beq.n	8012474 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012466:	69fa      	ldr	r2, [r7, #28]
 8012468:	6839      	ldr	r1, [r7, #0]
 801246a:	6938      	ldr	r0, [r7, #16]
 801246c:	f7ff fe15 	bl	801209a <put_fat>
 8012470:	4603      	mov	r3, r0
 8012472:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012474:	7dfb      	ldrb	r3, [r7, #23]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d116      	bne.n	80124a8 <create_chain+0x116>
		fs->last_clst = ncl;
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	69fa      	ldr	r2, [r7, #28]
 801247e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	695a      	ldr	r2, [r3, #20]
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	69db      	ldr	r3, [r3, #28]
 8012488:	3b02      	subs	r3, #2
 801248a:	429a      	cmp	r2, r3
 801248c:	d804      	bhi.n	8012498 <create_chain+0x106>
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	695b      	ldr	r3, [r3, #20]
 8012492:	1e5a      	subs	r2, r3, #1
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	791b      	ldrb	r3, [r3, #4]
 801249c:	f043 0301 	orr.w	r3, r3, #1
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	711a      	strb	r2, [r3, #4]
 80124a6:	e007      	b.n	80124b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80124a8:	7dfb      	ldrb	r3, [r7, #23]
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d102      	bne.n	80124b4 <create_chain+0x122>
 80124ae:	f04f 33ff 	mov.w	r3, #4294967295
 80124b2:	e000      	b.n	80124b6 <create_chain+0x124>
 80124b4:	2301      	movs	r3, #1
 80124b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80124b8:	69fb      	ldr	r3, [r7, #28]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3720      	adds	r7, #32
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80124c2:	b480      	push	{r7}
 80124c4:	b087      	sub	sp, #28
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d6:	3304      	adds	r3, #4
 80124d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	899b      	ldrh	r3, [r3, #12]
 80124de:	461a      	mov	r2, r3
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	8952      	ldrh	r2, [r2, #10]
 80124ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80124ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	1d1a      	adds	r2, r3, #4
 80124f4:	613a      	str	r2, [r7, #16]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d101      	bne.n	8012504 <clmt_clust+0x42>
 8012500:	2300      	movs	r3, #0
 8012502:	e010      	b.n	8012526 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	429a      	cmp	r2, r3
 801250a:	d307      	bcc.n	801251c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801250c:	697a      	ldr	r2, [r7, #20]
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	1ad3      	subs	r3, r2, r3
 8012512:	617b      	str	r3, [r7, #20]
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	3304      	adds	r3, #4
 8012518:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801251a:	e7e9      	b.n	80124f0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801251c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	681a      	ldr	r2, [r3, #0]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	4413      	add	r3, r2
}
 8012526:	4618      	mov	r0, r3
 8012528:	371c      	adds	r7, #28
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr

08012532 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b086      	sub	sp, #24
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012548:	d204      	bcs.n	8012554 <dir_sdi+0x22>
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	f003 031f 	and.w	r3, r3, #31
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012554:	2302      	movs	r3, #2
 8012556:	e071      	b.n	801263c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	683a      	ldr	r2, [r7, #0]
 801255c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	689b      	ldr	r3, [r3, #8]
 8012562:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <dir_sdi+0x46>
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	2b02      	cmp	r3, #2
 8012570:	d902      	bls.n	8012578 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012576:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d10c      	bne.n	8012598 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	095b      	lsrs	r3, r3, #5
 8012582:	693a      	ldr	r2, [r7, #16]
 8012584:	8912      	ldrh	r2, [r2, #8]
 8012586:	4293      	cmp	r3, r2
 8012588:	d301      	bcc.n	801258e <dir_sdi+0x5c>
 801258a:	2302      	movs	r3, #2
 801258c:	e056      	b.n	801263c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	61da      	str	r2, [r3, #28]
 8012596:	e02d      	b.n	80125f4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	895b      	ldrh	r3, [r3, #10]
 801259c:	461a      	mov	r2, r3
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	899b      	ldrh	r3, [r3, #12]
 80125a2:	fb03 f302 	mul.w	r3, r3, r2
 80125a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80125a8:	e019      	b.n	80125de <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6979      	ldr	r1, [r7, #20]
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7ff fca3 	bl	8011efa <get_fat>
 80125b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125bc:	d101      	bne.n	80125c2 <dir_sdi+0x90>
 80125be:	2301      	movs	r3, #1
 80125c0:	e03c      	b.n	801263c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d904      	bls.n	80125d2 <dir_sdi+0xa0>
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	69db      	ldr	r3, [r3, #28]
 80125cc:	697a      	ldr	r2, [r7, #20]
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d301      	bcc.n	80125d6 <dir_sdi+0xa4>
 80125d2:	2302      	movs	r3, #2
 80125d4:	e032      	b.n	801263c <dir_sdi+0x10a>
			ofs -= csz;
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d2e1      	bcs.n	80125aa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80125e6:	6979      	ldr	r1, [r7, #20]
 80125e8:	6938      	ldr	r0, [r7, #16]
 80125ea:	f7ff fc67 	bl	8011ebc <clust2sect>
 80125ee:	4602      	mov	r2, r0
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	697a      	ldr	r2, [r7, #20]
 80125f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	69db      	ldr	r3, [r3, #28]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d101      	bne.n	8012606 <dir_sdi+0xd4>
 8012602:	2302      	movs	r3, #2
 8012604:	e01a      	b.n	801263c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	69da      	ldr	r2, [r3, #28]
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	899b      	ldrh	r3, [r3, #12]
 801260e:	4619      	mov	r1, r3
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	fbb3 f3f1 	udiv	r3, r3, r1
 8012616:	441a      	add	r2, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	899b      	ldrh	r3, [r3, #12]
 8012626:	461a      	mov	r2, r3
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	fbb3 f0f2 	udiv	r0, r3, r2
 801262e:	fb02 f200 	mul.w	r2, r2, r0
 8012632:	1a9b      	subs	r3, r3, r2
 8012634:	18ca      	adds	r2, r1, r3
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801263a:	2300      	movs	r3, #0
}
 801263c:	4618      	mov	r0, r3
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b086      	sub	sp, #24
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	3320      	adds	r3, #32
 801265a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	69db      	ldr	r3, [r3, #28]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d003      	beq.n	801266c <dir_next+0x28>
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801266a:	d301      	bcc.n	8012670 <dir_next+0x2c>
 801266c:	2304      	movs	r3, #4
 801266e:	e0bb      	b.n	80127e8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	899b      	ldrh	r3, [r3, #12]
 8012674:	461a      	mov	r2, r3
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	fbb3 f1f2 	udiv	r1, r3, r2
 801267c:	fb02 f201 	mul.w	r2, r2, r1
 8012680:	1a9b      	subs	r3, r3, r2
 8012682:	2b00      	cmp	r3, #0
 8012684:	f040 809d 	bne.w	80127c2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	69db      	ldr	r3, [r3, #28]
 801268c:	1c5a      	adds	r2, r3, #1
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	699b      	ldr	r3, [r3, #24]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10b      	bne.n	80126b2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	095b      	lsrs	r3, r3, #5
 801269e:	68fa      	ldr	r2, [r7, #12]
 80126a0:	8912      	ldrh	r2, [r2, #8]
 80126a2:	4293      	cmp	r3, r2
 80126a4:	f0c0 808d 	bcc.w	80127c2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	61da      	str	r2, [r3, #28]
 80126ae:	2304      	movs	r3, #4
 80126b0:	e09a      	b.n	80127e8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	899b      	ldrh	r3, [r3, #12]
 80126b6:	461a      	mov	r2, r3
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	8952      	ldrh	r2, [r2, #10]
 80126c2:	3a01      	subs	r2, #1
 80126c4:	4013      	ands	r3, r2
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d17b      	bne.n	80127c2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	699b      	ldr	r3, [r3, #24]
 80126d0:	4619      	mov	r1, r3
 80126d2:	4610      	mov	r0, r2
 80126d4:	f7ff fc11 	bl	8011efa <get_fat>
 80126d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d801      	bhi.n	80126e4 <dir_next+0xa0>
 80126e0:	2302      	movs	r3, #2
 80126e2:	e081      	b.n	80127e8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ea:	d101      	bne.n	80126f0 <dir_next+0xac>
 80126ec:	2301      	movs	r3, #1
 80126ee:	e07b      	b.n	80127e8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	69db      	ldr	r3, [r3, #28]
 80126f4:	697a      	ldr	r2, [r7, #20]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d359      	bcc.n	80127ae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d104      	bne.n	801270a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	61da      	str	r2, [r3, #28]
 8012706:	2304      	movs	r3, #4
 8012708:	e06e      	b.n	80127e8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	699b      	ldr	r3, [r3, #24]
 8012710:	4619      	mov	r1, r3
 8012712:	4610      	mov	r0, r2
 8012714:	f7ff fe3d 	bl	8012392 <create_chain>
 8012718:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d101      	bne.n	8012724 <dir_next+0xe0>
 8012720:	2307      	movs	r3, #7
 8012722:	e061      	b.n	80127e8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d101      	bne.n	801272e <dir_next+0xea>
 801272a:	2302      	movs	r3, #2
 801272c:	e05c      	b.n	80127e8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012734:	d101      	bne.n	801273a <dir_next+0xf6>
 8012736:	2301      	movs	r3, #1
 8012738:	e056      	b.n	80127e8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	f7ff fadc 	bl	8011cf8 <sync_window>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d001      	beq.n	801274a <dir_next+0x106>
 8012746:	2301      	movs	r3, #1
 8012748:	e04e      	b.n	80127e8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	899b      	ldrh	r3, [r3, #12]
 8012754:	461a      	mov	r2, r3
 8012756:	2100      	movs	r1, #0
 8012758:	f7ff f905 	bl	8011966 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801275c:	2300      	movs	r3, #0
 801275e:	613b      	str	r3, [r7, #16]
 8012760:	6979      	ldr	r1, [r7, #20]
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f7ff fbaa 	bl	8011ebc <clust2sect>
 8012768:	4602      	mov	r2, r0
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	635a      	str	r2, [r3, #52]	; 0x34
 801276e:	e012      	b.n	8012796 <dir_next+0x152>
						fs->wflag = 1;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2201      	movs	r2, #1
 8012774:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012776:	68f8      	ldr	r0, [r7, #12]
 8012778:	f7ff fabe 	bl	8011cf8 <sync_window>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <dir_next+0x142>
 8012782:	2301      	movs	r3, #1
 8012784:	e030      	b.n	80127e8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	3301      	adds	r3, #1
 801278a:	613b      	str	r3, [r7, #16]
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012790:	1c5a      	adds	r2, r3, #1
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	635a      	str	r2, [r3, #52]	; 0x34
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	895b      	ldrh	r3, [r3, #10]
 801279a:	461a      	mov	r2, r3
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	4293      	cmp	r3, r2
 80127a0:	d3e6      	bcc.n	8012770 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	1ad2      	subs	r2, r2, r3
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	697a      	ldr	r2, [r7, #20]
 80127b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80127b4:	6979      	ldr	r1, [r7, #20]
 80127b6:	68f8      	ldr	r0, [r7, #12]
 80127b8:	f7ff fb80 	bl	8011ebc <clust2sect>
 80127bc:	4602      	mov	r2, r0
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	899b      	ldrh	r3, [r3, #12]
 80127d2:	461a      	mov	r2, r3
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80127da:	fb02 f200 	mul.w	r2, r2, r0
 80127de:	1a9b      	subs	r3, r3, r2
 80127e0:	18ca      	adds	r2, r1, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3718      	adds	r7, #24
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012800:	2100      	movs	r1, #0
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7ff fe95 	bl	8012532 <dir_sdi>
 8012808:	4603      	mov	r3, r0
 801280a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801280c:	7dfb      	ldrb	r3, [r7, #23]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d12b      	bne.n	801286a <dir_alloc+0x7a>
		n = 0;
 8012812:	2300      	movs	r3, #0
 8012814:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	69db      	ldr	r3, [r3, #28]
 801281a:	4619      	mov	r1, r3
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f7ff faaf 	bl	8011d80 <move_window>
 8012822:	4603      	mov	r3, r0
 8012824:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d11d      	bne.n	8012868 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a1b      	ldr	r3, [r3, #32]
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	2be5      	cmp	r3, #229	; 0xe5
 8012834:	d004      	beq.n	8012840 <dir_alloc+0x50>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6a1b      	ldr	r3, [r3, #32]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d107      	bne.n	8012850 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	3301      	adds	r3, #1
 8012844:	613b      	str	r3, [r7, #16]
 8012846:	693a      	ldr	r2, [r7, #16]
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	429a      	cmp	r2, r3
 801284c:	d102      	bne.n	8012854 <dir_alloc+0x64>
 801284e:	e00c      	b.n	801286a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012850:	2300      	movs	r3, #0
 8012852:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012854:	2101      	movs	r1, #1
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f7ff fef4 	bl	8012644 <dir_next>
 801285c:	4603      	mov	r3, r0
 801285e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012860:	7dfb      	ldrb	r3, [r7, #23]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d0d7      	beq.n	8012816 <dir_alloc+0x26>
 8012866:	e000      	b.n	801286a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012868:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	2b04      	cmp	r3, #4
 801286e:	d101      	bne.n	8012874 <dir_alloc+0x84>
 8012870:	2307      	movs	r3, #7
 8012872:	75fb      	strb	r3, [r7, #23]
	return res;
 8012874:	7dfb      	ldrb	r3, [r7, #23]
}
 8012876:	4618      	mov	r0, r3
 8012878:	3718      	adds	r7, #24
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801287e:	b580      	push	{r7, lr}
 8012880:	b084      	sub	sp, #16
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	331a      	adds	r3, #26
 801288c:	4618      	mov	r0, r3
 801288e:	f7fe ffc7 	bl	8011820 <ld_word>
 8012892:	4603      	mov	r3, r0
 8012894:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	2b03      	cmp	r3, #3
 801289c:	d109      	bne.n	80128b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	3314      	adds	r3, #20
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fe ffbc 	bl	8011820 <ld_word>
 80128a8:	4603      	mov	r3, r0
 80128aa:	041b      	lsls	r3, r3, #16
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	4313      	orrs	r3, r2
 80128b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80128b2:	68fb      	ldr	r3, [r7, #12]
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	331a      	adds	r3, #26
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	b292      	uxth	r2, r2
 80128d0:	4611      	mov	r1, r2
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fe ffdf 	bl	8011896 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b03      	cmp	r3, #3
 80128de:	d109      	bne.n	80128f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	f103 0214 	add.w	r2, r3, #20
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	0c1b      	lsrs	r3, r3, #16
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	4619      	mov	r1, r3
 80128ee:	4610      	mov	r0, r2
 80128f0:	f7fe ffd1 	bl	8011896 <st_word>
	}
}
 80128f4:	bf00      	nop
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b086      	sub	sp, #24
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012906:	2304      	movs	r3, #4
 8012908:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012910:	e03c      	b.n	801298c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	69db      	ldr	r3, [r3, #28]
 8012916:	4619      	mov	r1, r3
 8012918:	6938      	ldr	r0, [r7, #16]
 801291a:	f7ff fa31 	bl	8011d80 <move_window>
 801291e:	4603      	mov	r3, r0
 8012920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012922:	7dfb      	ldrb	r3, [r7, #23]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d136      	bne.n	8012996 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6a1b      	ldr	r3, [r3, #32]
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012930:	7bfb      	ldrb	r3, [r7, #15]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d102      	bne.n	801293c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012936:	2304      	movs	r3, #4
 8012938:	75fb      	strb	r3, [r7, #23]
 801293a:	e031      	b.n	80129a0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a1b      	ldr	r3, [r3, #32]
 8012940:	330b      	adds	r3, #11
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012948:	73bb      	strb	r3, [r7, #14]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	7bba      	ldrb	r2, [r7, #14]
 801294e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012950:	7bfb      	ldrb	r3, [r7, #15]
 8012952:	2be5      	cmp	r3, #229	; 0xe5
 8012954:	d011      	beq.n	801297a <dir_read+0x7e>
 8012956:	7bfb      	ldrb	r3, [r7, #15]
 8012958:	2b2e      	cmp	r3, #46	; 0x2e
 801295a:	d00e      	beq.n	801297a <dir_read+0x7e>
 801295c:	7bbb      	ldrb	r3, [r7, #14]
 801295e:	2b0f      	cmp	r3, #15
 8012960:	d00b      	beq.n	801297a <dir_read+0x7e>
 8012962:	7bbb      	ldrb	r3, [r7, #14]
 8012964:	f023 0320 	bic.w	r3, r3, #32
 8012968:	2b08      	cmp	r3, #8
 801296a:	bf0c      	ite	eq
 801296c:	2301      	moveq	r3, #1
 801296e:	2300      	movne	r3, #0
 8012970:	b2db      	uxtb	r3, r3
 8012972:	461a      	mov	r2, r3
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	4293      	cmp	r3, r2
 8012978:	d00f      	beq.n	801299a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801297a:	2100      	movs	r1, #0
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff fe61 	bl	8012644 <dir_next>
 8012982:	4603      	mov	r3, r0
 8012984:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012986:	7dfb      	ldrb	r3, [r7, #23]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d108      	bne.n	801299e <dir_read+0xa2>
	while (dp->sect) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	69db      	ldr	r3, [r3, #28]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1be      	bne.n	8012912 <dir_read+0x16>
 8012994:	e004      	b.n	80129a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012996:	bf00      	nop
 8012998:	e002      	b.n	80129a0 <dir_read+0xa4>
				break;
 801299a:	bf00      	nop
 801299c:	e000      	b.n	80129a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 801299e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80129a0:	7dfb      	ldrb	r3, [r7, #23]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <dir_read+0xb0>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	61da      	str	r2, [r3, #28]
	return res;
 80129ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3718      	adds	r7, #24
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b086      	sub	sp, #24
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80129c4:	2100      	movs	r1, #0
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7ff fdb3 	bl	8012532 <dir_sdi>
 80129cc:	4603      	mov	r3, r0
 80129ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80129d0:	7dfb      	ldrb	r3, [r7, #23]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d001      	beq.n	80129da <dir_find+0x24>
 80129d6:	7dfb      	ldrb	r3, [r7, #23]
 80129d8:	e03e      	b.n	8012a58 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	69db      	ldr	r3, [r3, #28]
 80129de:	4619      	mov	r1, r3
 80129e0:	6938      	ldr	r0, [r7, #16]
 80129e2:	f7ff f9cd 	bl	8011d80 <move_window>
 80129e6:	4603      	mov	r3, r0
 80129e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d12f      	bne.n	8012a50 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a1b      	ldr	r3, [r3, #32]
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80129f8:	7bfb      	ldrb	r3, [r7, #15]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d102      	bne.n	8012a04 <dir_find+0x4e>
 80129fe:	2304      	movs	r3, #4
 8012a00:	75fb      	strb	r3, [r7, #23]
 8012a02:	e028      	b.n	8012a56 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6a1b      	ldr	r3, [r3, #32]
 8012a08:	330b      	adds	r3, #11
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6a1b      	ldr	r3, [r3, #32]
 8012a1a:	330b      	adds	r3, #11
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	f003 0308 	and.w	r3, r3, #8
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d10a      	bne.n	8012a3c <dir_find+0x86>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6a18      	ldr	r0, [r3, #32]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3324      	adds	r3, #36	; 0x24
 8012a2e:	220b      	movs	r2, #11
 8012a30:	4619      	mov	r1, r3
 8012a32:	f7fe ffb2 	bl	801199a <mem_cmp>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d00b      	beq.n	8012a54 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff fe00 	bl	8012644 <dir_next>
 8012a44:	4603      	mov	r3, r0
 8012a46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012a48:	7dfb      	ldrb	r3, [r7, #23]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d0c5      	beq.n	80129da <dir_find+0x24>
 8012a4e:	e002      	b.n	8012a56 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012a50:	bf00      	nop
 8012a52:	e000      	b.n	8012a56 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012a54:	bf00      	nop

	return res;
 8012a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3718      	adds	r7, #24
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012a6e:	2101      	movs	r1, #1
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7ff febd 	bl	80127f0 <dir_alloc>
 8012a76:	4603      	mov	r3, r0
 8012a78:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012a7a:	7bfb      	ldrb	r3, [r7, #15]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d11c      	bne.n	8012aba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	69db      	ldr	r3, [r3, #28]
 8012a84:	4619      	mov	r1, r3
 8012a86:	68b8      	ldr	r0, [r7, #8]
 8012a88:	f7ff f97a 	bl	8011d80 <move_window>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012a90:	7bfb      	ldrb	r3, [r7, #15]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d111      	bne.n	8012aba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	2220      	movs	r2, #32
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fe ff61 	bl	8011966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a18      	ldr	r0, [r3, #32]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3324      	adds	r3, #36	; 0x24
 8012aac:	220b      	movs	r2, #11
 8012aae:	4619      	mov	r1, r3
 8012ab0:	f7fe ff38 	bl	8011924 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	69db      	ldr	r3, [r3, #28]
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	68f8      	ldr	r0, [r7, #12]
 8012ada:	f7ff f951 	bl	8011d80 <move_window>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012ae2:	7afb      	ldrb	r3, [r7, #11]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d106      	bne.n	8012af6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6a1b      	ldr	r3, [r3, #32]
 8012aec:	22e5      	movs	r2, #229	; 0xe5
 8012aee:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2201      	movs	r2, #1
 8012af4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012af6:	7afb      	ldrb	r3, [r7, #11]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b088      	sub	sp, #32
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	60fb      	str	r3, [r7, #12]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	3324      	adds	r3, #36	; 0x24
 8012b14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012b16:	220b      	movs	r2, #11
 8012b18:	2120      	movs	r1, #32
 8012b1a:	68b8      	ldr	r0, [r7, #8]
 8012b1c:	f7fe ff23 	bl	8011966 <mem_set>
	si = i = 0; ni = 8;
 8012b20:	2300      	movs	r3, #0
 8012b22:	613b      	str	r3, [r7, #16]
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	617b      	str	r3, [r7, #20]
 8012b28:	2308      	movs	r3, #8
 8012b2a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012b2c:	68fa      	ldr	r2, [r7, #12]
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	4413      	add	r3, r2
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	2b2e      	cmp	r3, #46	; 0x2e
 8012b36:	d12f      	bne.n	8012b98 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	1c5a      	adds	r2, r3, #1
 8012b3c:	617a      	str	r2, [r7, #20]
 8012b3e:	68fa      	ldr	r2, [r7, #12]
 8012b40:	4413      	add	r3, r2
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012b46:	7ffb      	ldrb	r3, [r7, #31]
 8012b48:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4a:	d10a      	bne.n	8012b62 <create_name+0x62>
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	d807      	bhi.n	8012b62 <create_name+0x62>
			sfn[i++] = c;
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	1c5a      	adds	r2, r3, #1
 8012b56:	613a      	str	r2, [r7, #16]
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	7ffa      	ldrb	r2, [r7, #31]
 8012b5e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012b60:	e7ea      	b.n	8012b38 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012b62:	7ffb      	ldrb	r3, [r7, #31]
 8012b64:	2b2f      	cmp	r3, #47	; 0x2f
 8012b66:	d007      	beq.n	8012b78 <create_name+0x78>
 8012b68:	7ffb      	ldrb	r3, [r7, #31]
 8012b6a:	2b5c      	cmp	r3, #92	; 0x5c
 8012b6c:	d004      	beq.n	8012b78 <create_name+0x78>
 8012b6e:	7ffb      	ldrb	r3, [r7, #31]
 8012b70:	2b20      	cmp	r3, #32
 8012b72:	d901      	bls.n	8012b78 <create_name+0x78>
 8012b74:	2306      	movs	r3, #6
 8012b76:	e084      	b.n	8012c82 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	441a      	add	r2, r3
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012b82:	7ffb      	ldrb	r3, [r7, #31]
 8012b84:	2b20      	cmp	r3, #32
 8012b86:	d801      	bhi.n	8012b8c <create_name+0x8c>
 8012b88:	2224      	movs	r2, #36	; 0x24
 8012b8a:	e000      	b.n	8012b8e <create_name+0x8e>
 8012b8c:	2220      	movs	r2, #32
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	330b      	adds	r3, #11
 8012b92:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012b94:	2300      	movs	r3, #0
 8012b96:	e074      	b.n	8012c82 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	617a      	str	r2, [r7, #20]
 8012b9e:	68fa      	ldr	r2, [r7, #12]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012ba6:	7ffb      	ldrb	r3, [r7, #31]
 8012ba8:	2b20      	cmp	r3, #32
 8012baa:	d94e      	bls.n	8012c4a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012bac:	7ffb      	ldrb	r3, [r7, #31]
 8012bae:	2b2f      	cmp	r3, #47	; 0x2f
 8012bb0:	d006      	beq.n	8012bc0 <create_name+0xc0>
 8012bb2:	7ffb      	ldrb	r3, [r7, #31]
 8012bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8012bb6:	d110      	bne.n	8012bda <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012bb8:	e002      	b.n	8012bc0 <create_name+0xc0>
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	617b      	str	r3, [r7, #20]
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b2f      	cmp	r3, #47	; 0x2f
 8012bca:	d0f6      	beq.n	8012bba <create_name+0xba>
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b5c      	cmp	r3, #92	; 0x5c
 8012bd6:	d0f0      	beq.n	8012bba <create_name+0xba>
			break;
 8012bd8:	e038      	b.n	8012c4c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012bda:	7ffb      	ldrb	r3, [r7, #31]
 8012bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8012bde:	d003      	beq.n	8012be8 <create_name+0xe8>
 8012be0:	693a      	ldr	r2, [r7, #16]
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d30c      	bcc.n	8012c02 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	2b0b      	cmp	r3, #11
 8012bec:	d002      	beq.n	8012bf4 <create_name+0xf4>
 8012bee:	7ffb      	ldrb	r3, [r7, #31]
 8012bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8012bf2:	d001      	beq.n	8012bf8 <create_name+0xf8>
 8012bf4:	2306      	movs	r3, #6
 8012bf6:	e044      	b.n	8012c82 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012bf8:	2308      	movs	r3, #8
 8012bfa:	613b      	str	r3, [r7, #16]
 8012bfc:	230b      	movs	r3, #11
 8012bfe:	61bb      	str	r3, [r7, #24]
			continue;
 8012c00:	e022      	b.n	8012c48 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	da04      	bge.n	8012c14 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012c0a:	7ffb      	ldrb	r3, [r7, #31]
 8012c0c:	3b80      	subs	r3, #128	; 0x80
 8012c0e:	4a1f      	ldr	r2, [pc, #124]	; (8012c8c <create_name+0x18c>)
 8012c10:	5cd3      	ldrb	r3, [r2, r3]
 8012c12:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012c14:	7ffb      	ldrb	r3, [r7, #31]
 8012c16:	4619      	mov	r1, r3
 8012c18:	481d      	ldr	r0, [pc, #116]	; (8012c90 <create_name+0x190>)
 8012c1a:	f7fe fee5 	bl	80119e8 <chk_chr>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d001      	beq.n	8012c28 <create_name+0x128>
 8012c24:	2306      	movs	r3, #6
 8012c26:	e02c      	b.n	8012c82 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012c28:	7ffb      	ldrb	r3, [r7, #31]
 8012c2a:	2b60      	cmp	r3, #96	; 0x60
 8012c2c:	d905      	bls.n	8012c3a <create_name+0x13a>
 8012c2e:	7ffb      	ldrb	r3, [r7, #31]
 8012c30:	2b7a      	cmp	r3, #122	; 0x7a
 8012c32:	d802      	bhi.n	8012c3a <create_name+0x13a>
 8012c34:	7ffb      	ldrb	r3, [r7, #31]
 8012c36:	3b20      	subs	r3, #32
 8012c38:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	1c5a      	adds	r2, r3, #1
 8012c3e:	613a      	str	r2, [r7, #16]
 8012c40:	68ba      	ldr	r2, [r7, #8]
 8012c42:	4413      	add	r3, r2
 8012c44:	7ffa      	ldrb	r2, [r7, #31]
 8012c46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012c48:	e7a6      	b.n	8012b98 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012c4a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	441a      	add	r2, r3
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d101      	bne.n	8012c60 <create_name+0x160>
 8012c5c:	2306      	movs	r3, #6
 8012c5e:	e010      	b.n	8012c82 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	2be5      	cmp	r3, #229	; 0xe5
 8012c66:	d102      	bne.n	8012c6e <create_name+0x16e>
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	2205      	movs	r2, #5
 8012c6c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012c6e:	7ffb      	ldrb	r3, [r7, #31]
 8012c70:	2b20      	cmp	r3, #32
 8012c72:	d801      	bhi.n	8012c78 <create_name+0x178>
 8012c74:	2204      	movs	r2, #4
 8012c76:	e000      	b.n	8012c7a <create_name+0x17a>
 8012c78:	2200      	movs	r2, #0
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	330b      	adds	r3, #11
 8012c7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012c80:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3720      	adds	r7, #32
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	0801a2ec 	.word	0x0801a2ec
 8012c90:	0801a29c 	.word	0x0801a29c

08012c94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b086      	sub	sp, #24
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	2b2f      	cmp	r3, #47	; 0x2f
 8012cae:	d00b      	beq.n	8012cc8 <follow_path+0x34>
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8012cb6:	d007      	beq.n	8012cc8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	699a      	ldr	r2, [r3, #24]
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	609a      	str	r2, [r3, #8]
 8012cc0:	e00d      	b.n	8012cde <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	603b      	str	r3, [r7, #0]
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8012cce:	d0f8      	beq.n	8012cc2 <follow_path+0x2e>
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	2b5c      	cmp	r3, #92	; 0x5c
 8012cd6:	d0f4      	beq.n	8012cc2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	2b1f      	cmp	r3, #31
 8012ce4:	d80a      	bhi.n	8012cfc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2280      	movs	r2, #128	; 0x80
 8012cea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012cee:	2100      	movs	r1, #0
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f7ff fc1e 	bl	8012532 <dir_sdi>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	75fb      	strb	r3, [r7, #23]
 8012cfa:	e05b      	b.n	8012db4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012cfc:	463b      	mov	r3, r7
 8012cfe:	4619      	mov	r1, r3
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f7ff fefd 	bl	8012b00 <create_name>
 8012d06:	4603      	mov	r3, r0
 8012d08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d0a:	7dfb      	ldrb	r3, [r7, #23]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d14c      	bne.n	8012daa <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7ff fe50 	bl	80129b6 <dir_find>
 8012d16:	4603      	mov	r3, r0
 8012d18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012d22:	7dfb      	ldrb	r3, [r7, #23]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d01b      	beq.n	8012d60 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012d28:	7dfb      	ldrb	r3, [r7, #23]
 8012d2a:	2b04      	cmp	r3, #4
 8012d2c:	d13f      	bne.n	8012dae <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012d2e:	7afb      	ldrb	r3, [r7, #11]
 8012d30:	f003 0320 	and.w	r3, r3, #32
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d00b      	beq.n	8012d50 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012d38:	7afb      	ldrb	r3, [r7, #11]
 8012d3a:	f003 0304 	and.w	r3, r3, #4
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d031      	beq.n	8012da6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2280      	movs	r2, #128	; 0x80
 8012d46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012d4e:	e02e      	b.n	8012dae <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012d50:	7afb      	ldrb	r3, [r7, #11]
 8012d52:	f003 0304 	and.w	r3, r3, #4
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d129      	bne.n	8012dae <follow_path+0x11a>
 8012d5a:	2305      	movs	r3, #5
 8012d5c:	75fb      	strb	r3, [r7, #23]
				break;
 8012d5e:	e026      	b.n	8012dae <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012d60:	7afb      	ldrb	r3, [r7, #11]
 8012d62:	f003 0304 	and.w	r3, r3, #4
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d123      	bne.n	8012db2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	799b      	ldrb	r3, [r3, #6]
 8012d6e:	f003 0310 	and.w	r3, r3, #16
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d102      	bne.n	8012d7c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012d76:	2305      	movs	r3, #5
 8012d78:	75fb      	strb	r3, [r7, #23]
 8012d7a:	e01b      	b.n	8012db4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	695b      	ldr	r3, [r3, #20]
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	8992      	ldrh	r2, [r2, #12]
 8012d8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8012d8e:	fb02 f200 	mul.w	r2, r2, r0
 8012d92:	1a9b      	subs	r3, r3, r2
 8012d94:	440b      	add	r3, r1
 8012d96:	4619      	mov	r1, r3
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f7ff fd70 	bl	801287e <ld_clust>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	609a      	str	r2, [r3, #8]
 8012da4:	e7aa      	b.n	8012cfc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012da6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012da8:	e7a8      	b.n	8012cfc <follow_path+0x68>
			if (res != FR_OK) break;
 8012daa:	bf00      	nop
 8012dac:	e002      	b.n	8012db4 <follow_path+0x120>
				break;
 8012dae:	bf00      	nop
 8012db0:	e000      	b.n	8012db4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012db2:	bf00      	nop
			}
		}
	}

	return res;
 8012db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3718      	adds	r7, #24
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012dbe:	b480      	push	{r7}
 8012dc0:	b087      	sub	sp, #28
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8012dca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d031      	beq.n	8012e38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	617b      	str	r3, [r7, #20]
 8012dda:	e002      	b.n	8012de2 <get_ldnumber+0x24>
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	3301      	adds	r3, #1
 8012de0:	617b      	str	r3, [r7, #20]
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	2b20      	cmp	r3, #32
 8012de8:	d903      	bls.n	8012df2 <get_ldnumber+0x34>
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	2b3a      	cmp	r3, #58	; 0x3a
 8012df0:	d1f4      	bne.n	8012ddc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b3a      	cmp	r3, #58	; 0x3a
 8012df8:	d11c      	bne.n	8012e34 <get_ldnumber+0x76>
			tp = *path;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	1c5a      	adds	r2, r3, #1
 8012e04:	60fa      	str	r2, [r7, #12]
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	3b30      	subs	r3, #48	; 0x30
 8012e0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	2b09      	cmp	r3, #9
 8012e10:	d80e      	bhi.n	8012e30 <get_ldnumber+0x72>
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d10a      	bne.n	8012e30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d107      	bne.n	8012e30 <get_ldnumber+0x72>
					vol = (int)i;
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	3301      	adds	r3, #1
 8012e28:	617b      	str	r3, [r7, #20]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	697a      	ldr	r2, [r7, #20]
 8012e2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	e002      	b.n	8012e3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012e34:	2300      	movs	r3, #0
 8012e36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012e38:	693b      	ldr	r3, [r7, #16]
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	371c      	adds	r7, #28
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
	...

08012e48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2200      	movs	r2, #0
 8012e56:	70da      	strb	r2, [r3, #3]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e5e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012e60:	6839      	ldr	r1, [r7, #0]
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7fe ff8c 	bl	8011d80 <move_window>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <check_fs+0x2a>
 8012e6e:	2304      	movs	r3, #4
 8012e70:	e038      	b.n	8012ee4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	3338      	adds	r3, #56	; 0x38
 8012e76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fe fcd0 	bl	8011820 <ld_word>
 8012e80:	4603      	mov	r3, r0
 8012e82:	461a      	mov	r2, r3
 8012e84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d001      	beq.n	8012e90 <check_fs+0x48>
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	e029      	b.n	8012ee4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e96:	2be9      	cmp	r3, #233	; 0xe9
 8012e98:	d009      	beq.n	8012eae <check_fs+0x66>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012ea0:	2beb      	cmp	r3, #235	; 0xeb
 8012ea2:	d11e      	bne.n	8012ee2 <check_fs+0x9a>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012eaa:	2b90      	cmp	r3, #144	; 0x90
 8012eac:	d119      	bne.n	8012ee2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	3338      	adds	r3, #56	; 0x38
 8012eb2:	3336      	adds	r3, #54	; 0x36
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7fe fccb 	bl	8011850 <ld_dword>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ec0:	4a0a      	ldr	r2, [pc, #40]	; (8012eec <check_fs+0xa4>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d101      	bne.n	8012eca <check_fs+0x82>
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e00c      	b.n	8012ee4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	3338      	adds	r3, #56	; 0x38
 8012ece:	3352      	adds	r3, #82	; 0x52
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7fe fcbd 	bl	8011850 <ld_dword>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	4b05      	ldr	r3, [pc, #20]	; (8012ef0 <check_fs+0xa8>)
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d101      	bne.n	8012ee2 <check_fs+0x9a>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	e000      	b.n	8012ee4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012ee2:	2302      	movs	r3, #2
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3708      	adds	r7, #8
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	00544146 	.word	0x00544146
 8012ef0:	33544146 	.word	0x33544146

08012ef4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b096      	sub	sp, #88	; 0x58
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	4613      	mov	r3, r2
 8012f00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	2200      	movs	r2, #0
 8012f06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f7ff ff58 	bl	8012dbe <get_ldnumber>
 8012f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	da01      	bge.n	8012f1a <find_volume+0x26>
 8012f16:	230b      	movs	r3, #11
 8012f18:	e268      	b.n	80133ec <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012f1a:	4ab0      	ldr	r2, [pc, #704]	; (80131dc <find_volume+0x2e8>)
 8012f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <find_volume+0x3a>
 8012f2a:	230c      	movs	r3, #12
 8012f2c:	e25e      	b.n	80133ec <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012f34:	79fb      	ldrb	r3, [r7, #7]
 8012f36:	f023 0301 	bic.w	r3, r3, #1
 8012f3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d01a      	beq.n	8012f7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f46:	785b      	ldrb	r3, [r3, #1]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7fe fbcb 	bl	80116e4 <disk_status>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f58:	f003 0301 	and.w	r3, r3, #1
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d10c      	bne.n	8012f7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012f60:	79fb      	ldrb	r3, [r7, #7]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d007      	beq.n	8012f76 <find_volume+0x82>
 8012f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f6a:	f003 0304 	and.w	r3, r3, #4
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d001      	beq.n	8012f76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012f72:	230a      	movs	r3, #10
 8012f74:	e23a      	b.n	80133ec <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012f76:	2300      	movs	r3, #0
 8012f78:	e238      	b.n	80133ec <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8a:	785b      	ldrb	r3, [r3, #1]
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fe fbc3 	bl	8011718 <disk_initialize>
 8012f92:	4603      	mov	r3, r0
 8012f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f9c:	f003 0301 	and.w	r3, r3, #1
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d001      	beq.n	8012fa8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012fa4:	2303      	movs	r3, #3
 8012fa6:	e221      	b.n	80133ec <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012fa8:	79fb      	ldrb	r3, [r7, #7]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d007      	beq.n	8012fbe <find_volume+0xca>
 8012fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fb2:	f003 0304 	and.w	r3, r3, #4
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d001      	beq.n	8012fbe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012fba:	230a      	movs	r3, #10
 8012fbc:	e216      	b.n	80133ec <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc0:	7858      	ldrb	r0, [r3, #1]
 8012fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc4:	330c      	adds	r3, #12
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	2102      	movs	r1, #2
 8012fca:	f7fe fc0b 	bl	80117e4 <disk_ioctl>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d001      	beq.n	8012fd8 <find_volume+0xe4>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e209      	b.n	80133ec <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fda:	899b      	ldrh	r3, [r3, #12]
 8012fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fe0:	d80d      	bhi.n	8012ffe <find_volume+0x10a>
 8012fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe4:	899b      	ldrh	r3, [r3, #12]
 8012fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fea:	d308      	bcc.n	8012ffe <find_volume+0x10a>
 8012fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fee:	899b      	ldrh	r3, [r3, #12]
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff4:	899b      	ldrh	r3, [r3, #12]
 8012ff6:	3b01      	subs	r3, #1
 8012ff8:	4013      	ands	r3, r2
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d001      	beq.n	8013002 <find_volume+0x10e>
 8012ffe:	2301      	movs	r3, #1
 8013000:	e1f4      	b.n	80133ec <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013002:	2300      	movs	r3, #0
 8013004:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801300a:	f7ff ff1d 	bl	8012e48 <check_fs>
 801300e:	4603      	mov	r3, r0
 8013010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013018:	2b02      	cmp	r3, #2
 801301a:	d14b      	bne.n	80130b4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801301c:	2300      	movs	r3, #0
 801301e:	643b      	str	r3, [r7, #64]	; 0x40
 8013020:	e01f      	b.n	8013062 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801302a:	011b      	lsls	r3, r3, #4
 801302c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013030:	4413      	add	r3, r2
 8013032:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013036:	3304      	adds	r3, #4
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d006      	beq.n	801304c <find_volume+0x158>
 801303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013040:	3308      	adds	r3, #8
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe fc04 	bl	8011850 <ld_dword>
 8013048:	4602      	mov	r2, r0
 801304a:	e000      	b.n	801304e <find_volume+0x15a>
 801304c:	2200      	movs	r2, #0
 801304e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013056:	440b      	add	r3, r1
 8013058:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801305e:	3301      	adds	r3, #1
 8013060:	643b      	str	r3, [r7, #64]	; 0x40
 8013062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013064:	2b03      	cmp	r3, #3
 8013066:	d9dc      	bls.n	8013022 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013068:	2300      	movs	r3, #0
 801306a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801306e:	2b00      	cmp	r3, #0
 8013070:	d002      	beq.n	8013078 <find_volume+0x184>
 8013072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013074:	3b01      	subs	r3, #1
 8013076:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013080:	4413      	add	r3, r2
 8013082:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013086:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801308a:	2b00      	cmp	r3, #0
 801308c:	d005      	beq.n	801309a <find_volume+0x1a6>
 801308e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013092:	f7ff fed9 	bl	8012e48 <check_fs>
 8013096:	4603      	mov	r3, r0
 8013098:	e000      	b.n	801309c <find_volume+0x1a8>
 801309a:	2303      	movs	r3, #3
 801309c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80130a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d905      	bls.n	80130b4 <find_volume+0x1c0>
 80130a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130aa:	3301      	adds	r3, #1
 80130ac:	643b      	str	r3, [r7, #64]	; 0x40
 80130ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130b0:	2b03      	cmp	r3, #3
 80130b2:	d9e1      	bls.n	8013078 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80130b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130b8:	2b04      	cmp	r3, #4
 80130ba:	d101      	bne.n	80130c0 <find_volume+0x1cc>
 80130bc:	2301      	movs	r3, #1
 80130be:	e195      	b.n	80133ec <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80130c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d901      	bls.n	80130cc <find_volume+0x1d8>
 80130c8:	230d      	movs	r3, #13
 80130ca:	e18f      	b.n	80133ec <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80130cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ce:	3338      	adds	r3, #56	; 0x38
 80130d0:	330b      	adds	r3, #11
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fe fba4 	bl	8011820 <ld_word>
 80130d8:	4603      	mov	r3, r0
 80130da:	461a      	mov	r2, r3
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	899b      	ldrh	r3, [r3, #12]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d001      	beq.n	80130e8 <find_volume+0x1f4>
 80130e4:	230d      	movs	r3, #13
 80130e6:	e181      	b.n	80133ec <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80130e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ea:	3338      	adds	r3, #56	; 0x38
 80130ec:	3316      	adds	r3, #22
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fe fb96 	bl	8011820 <ld_word>
 80130f4:	4603      	mov	r3, r0
 80130f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80130f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d106      	bne.n	801310c <find_volume+0x218>
 80130fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013100:	3338      	adds	r3, #56	; 0x38
 8013102:	3324      	adds	r3, #36	; 0x24
 8013104:	4618      	mov	r0, r3
 8013106:	f7fe fba3 	bl	8011850 <ld_dword>
 801310a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013110:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311e:	789b      	ldrb	r3, [r3, #2]
 8013120:	2b01      	cmp	r3, #1
 8013122:	d005      	beq.n	8013130 <find_volume+0x23c>
 8013124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013126:	789b      	ldrb	r3, [r3, #2]
 8013128:	2b02      	cmp	r3, #2
 801312a:	d001      	beq.n	8013130 <find_volume+0x23c>
 801312c:	230d      	movs	r3, #13
 801312e:	e15d      	b.n	80133ec <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013132:	789b      	ldrb	r3, [r3, #2]
 8013134:	461a      	mov	r2, r3
 8013136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013138:	fb02 f303 	mul.w	r3, r2, r3
 801313c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013144:	b29a      	uxth	r2, r3
 8013146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013148:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314c:	895b      	ldrh	r3, [r3, #10]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d008      	beq.n	8013164 <find_volume+0x270>
 8013152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013154:	895b      	ldrh	r3, [r3, #10]
 8013156:	461a      	mov	r2, r3
 8013158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315a:	895b      	ldrh	r3, [r3, #10]
 801315c:	3b01      	subs	r3, #1
 801315e:	4013      	ands	r3, r2
 8013160:	2b00      	cmp	r3, #0
 8013162:	d001      	beq.n	8013168 <find_volume+0x274>
 8013164:	230d      	movs	r3, #13
 8013166:	e141      	b.n	80133ec <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316a:	3338      	adds	r3, #56	; 0x38
 801316c:	3311      	adds	r3, #17
 801316e:	4618      	mov	r0, r3
 8013170:	f7fe fb56 	bl	8011820 <ld_word>
 8013174:	4603      	mov	r3, r0
 8013176:	461a      	mov	r2, r3
 8013178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317e:	891b      	ldrh	r3, [r3, #8]
 8013180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013182:	8992      	ldrh	r2, [r2, #12]
 8013184:	0952      	lsrs	r2, r2, #5
 8013186:	b292      	uxth	r2, r2
 8013188:	fbb3 f1f2 	udiv	r1, r3, r2
 801318c:	fb02 f201 	mul.w	r2, r2, r1
 8013190:	1a9b      	subs	r3, r3, r2
 8013192:	b29b      	uxth	r3, r3
 8013194:	2b00      	cmp	r3, #0
 8013196:	d001      	beq.n	801319c <find_volume+0x2a8>
 8013198:	230d      	movs	r3, #13
 801319a:	e127      	b.n	80133ec <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319e:	3338      	adds	r3, #56	; 0x38
 80131a0:	3313      	adds	r3, #19
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fe fb3c 	bl	8011820 <ld_word>
 80131a8:	4603      	mov	r3, r0
 80131aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80131ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <find_volume+0x2cc>
 80131b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b4:	3338      	adds	r3, #56	; 0x38
 80131b6:	3320      	adds	r3, #32
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7fe fb49 	bl	8011850 <ld_dword>
 80131be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80131c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c2:	3338      	adds	r3, #56	; 0x38
 80131c4:	330e      	adds	r3, #14
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7fe fb2a 	bl	8011820 <ld_word>
 80131cc:	4603      	mov	r3, r0
 80131ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80131d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d104      	bne.n	80131e0 <find_volume+0x2ec>
 80131d6:	230d      	movs	r3, #13
 80131d8:	e108      	b.n	80133ec <find_volume+0x4f8>
 80131da:	bf00      	nop
 80131dc:	20042464 	.word	0x20042464

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80131e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80131e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131e4:	4413      	add	r3, r2
 80131e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131e8:	8911      	ldrh	r1, [r2, #8]
 80131ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131ec:	8992      	ldrh	r2, [r2, #12]
 80131ee:	0952      	lsrs	r2, r2, #5
 80131f0:	b292      	uxth	r2, r2
 80131f2:	fbb1 f2f2 	udiv	r2, r1, r2
 80131f6:	b292      	uxth	r2, r2
 80131f8:	4413      	add	r3, r2
 80131fa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80131fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80131fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013200:	429a      	cmp	r2, r3
 8013202:	d201      	bcs.n	8013208 <find_volume+0x314>
 8013204:	230d      	movs	r3, #13
 8013206:	e0f1      	b.n	80133ec <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320c:	1ad3      	subs	r3, r2, r3
 801320e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013210:	8952      	ldrh	r2, [r2, #10]
 8013212:	fbb3 f3f2 	udiv	r3, r3, r2
 8013216:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321a:	2b00      	cmp	r3, #0
 801321c:	d101      	bne.n	8013222 <find_volume+0x32e>
 801321e:	230d      	movs	r3, #13
 8013220:	e0e4      	b.n	80133ec <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013222:	2303      	movs	r3, #3
 8013224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801322e:	4293      	cmp	r3, r2
 8013230:	d802      	bhi.n	8013238 <find_volume+0x344>
 8013232:	2302      	movs	r3, #2
 8013234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801323e:	4293      	cmp	r3, r2
 8013240:	d802      	bhi.n	8013248 <find_volume+0x354>
 8013242:	2301      	movs	r3, #1
 8013244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324a:	1c9a      	adds	r2, r3, #2
 801324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013254:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013256:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801325a:	441a      	add	r2, r3
 801325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013264:	441a      	add	r2, r3
 8013266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013268:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801326a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801326e:	2b03      	cmp	r3, #3
 8013270:	d11e      	bne.n	80132b0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013274:	3338      	adds	r3, #56	; 0x38
 8013276:	332a      	adds	r3, #42	; 0x2a
 8013278:	4618      	mov	r0, r3
 801327a:	f7fe fad1 	bl	8011820 <ld_word>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d001      	beq.n	8013288 <find_volume+0x394>
 8013284:	230d      	movs	r3, #13
 8013286:	e0b1      	b.n	80133ec <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328a:	891b      	ldrh	r3, [r3, #8]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d001      	beq.n	8013294 <find_volume+0x3a0>
 8013290:	230d      	movs	r3, #13
 8013292:	e0ab      	b.n	80133ec <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013296:	3338      	adds	r3, #56	; 0x38
 8013298:	332c      	adds	r3, #44	; 0x2c
 801329a:	4618      	mov	r0, r3
 801329c:	f7fe fad8 	bl	8011850 <ld_dword>
 80132a0:	4602      	mov	r2, r0
 80132a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80132a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a8:	69db      	ldr	r3, [r3, #28]
 80132aa:	009b      	lsls	r3, r3, #2
 80132ac:	647b      	str	r3, [r7, #68]	; 0x44
 80132ae:	e01f      	b.n	80132f0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80132b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b2:	891b      	ldrh	r3, [r3, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <find_volume+0x3c8>
 80132b8:	230d      	movs	r3, #13
 80132ba:	e097      	b.n	80133ec <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80132bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80132c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132c2:	441a      	add	r2, r3
 80132c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80132c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132cc:	2b02      	cmp	r3, #2
 80132ce:	d103      	bne.n	80132d8 <find_volume+0x3e4>
 80132d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d2:	69db      	ldr	r3, [r3, #28]
 80132d4:	005b      	lsls	r3, r3, #1
 80132d6:	e00a      	b.n	80132ee <find_volume+0x3fa>
 80132d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132da:	69da      	ldr	r2, [r3, #28]
 80132dc:	4613      	mov	r3, r2
 80132de:	005b      	lsls	r3, r3, #1
 80132e0:	4413      	add	r3, r2
 80132e2:	085a      	lsrs	r2, r3, #1
 80132e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e6:	69db      	ldr	r3, [r3, #28]
 80132e8:	f003 0301 	and.w	r3, r3, #1
 80132ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80132ee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80132f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f2:	6a1a      	ldr	r2, [r3, #32]
 80132f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f6:	899b      	ldrh	r3, [r3, #12]
 80132f8:	4619      	mov	r1, r3
 80132fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132fc:	440b      	add	r3, r1
 80132fe:	3b01      	subs	r3, #1
 8013300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013302:	8989      	ldrh	r1, [r1, #12]
 8013304:	fbb3 f3f1 	udiv	r3, r3, r1
 8013308:	429a      	cmp	r2, r3
 801330a:	d201      	bcs.n	8013310 <find_volume+0x41c>
 801330c:	230d      	movs	r3, #13
 801330e:	e06d      	b.n	80133ec <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013312:	f04f 32ff 	mov.w	r2, #4294967295
 8013316:	615a      	str	r2, [r3, #20]
 8013318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331a:	695a      	ldr	r2, [r3, #20]
 801331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013322:	2280      	movs	r2, #128	; 0x80
 8013324:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801332a:	2b03      	cmp	r3, #3
 801332c:	d149      	bne.n	80133c2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013330:	3338      	adds	r3, #56	; 0x38
 8013332:	3330      	adds	r3, #48	; 0x30
 8013334:	4618      	mov	r0, r3
 8013336:	f7fe fa73 	bl	8011820 <ld_word>
 801333a:	4603      	mov	r3, r0
 801333c:	2b01      	cmp	r3, #1
 801333e:	d140      	bne.n	80133c2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013342:	3301      	adds	r3, #1
 8013344:	4619      	mov	r1, r3
 8013346:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013348:	f7fe fd1a 	bl	8011d80 <move_window>
 801334c:	4603      	mov	r3, r0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d137      	bne.n	80133c2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8013352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013354:	2200      	movs	r2, #0
 8013356:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801335a:	3338      	adds	r3, #56	; 0x38
 801335c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013360:	4618      	mov	r0, r3
 8013362:	f7fe fa5d 	bl	8011820 <ld_word>
 8013366:	4603      	mov	r3, r0
 8013368:	461a      	mov	r2, r3
 801336a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801336e:	429a      	cmp	r2, r3
 8013370:	d127      	bne.n	80133c2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013374:	3338      	adds	r3, #56	; 0x38
 8013376:	4618      	mov	r0, r3
 8013378:	f7fe fa6a 	bl	8011850 <ld_dword>
 801337c:	4602      	mov	r2, r0
 801337e:	4b1d      	ldr	r3, [pc, #116]	; (80133f4 <find_volume+0x500>)
 8013380:	429a      	cmp	r2, r3
 8013382:	d11e      	bne.n	80133c2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013386:	3338      	adds	r3, #56	; 0x38
 8013388:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801338c:	4618      	mov	r0, r3
 801338e:	f7fe fa5f 	bl	8011850 <ld_dword>
 8013392:	4602      	mov	r2, r0
 8013394:	4b18      	ldr	r3, [pc, #96]	; (80133f8 <find_volume+0x504>)
 8013396:	429a      	cmp	r2, r3
 8013398:	d113      	bne.n	80133c2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801339c:	3338      	adds	r3, #56	; 0x38
 801339e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7fe fa54 	bl	8011850 <ld_dword>
 80133a8:	4602      	mov	r2, r0
 80133aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80133ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b0:	3338      	adds	r3, #56	; 0x38
 80133b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fe fa4a 	bl	8011850 <ld_dword>
 80133bc:	4602      	mov	r2, r0
 80133be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80133c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80133c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80133ca:	4b0c      	ldr	r3, [pc, #48]	; (80133fc <find_volume+0x508>)
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	3301      	adds	r3, #1
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	4b0a      	ldr	r3, [pc, #40]	; (80133fc <find_volume+0x508>)
 80133d4:	801a      	strh	r2, [r3, #0]
 80133d6:	4b09      	ldr	r3, [pc, #36]	; (80133fc <find_volume+0x508>)
 80133d8:	881a      	ldrh	r2, [r3, #0]
 80133da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133dc:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80133de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e0:	2200      	movs	r2, #0
 80133e2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80133e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133e6:	f7fe fc63 	bl	8011cb0 <clear_lock>
#endif
	return FR_OK;
 80133ea:	2300      	movs	r3, #0
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3758      	adds	r7, #88	; 0x58
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	41615252 	.word	0x41615252
 80133f8:	61417272 	.word	0x61417272
 80133fc:	20042468 	.word	0x20042468

08013400 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801340a:	2309      	movs	r3, #9
 801340c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d01c      	beq.n	801344e <validate+0x4e>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d018      	beq.n	801344e <validate+0x4e>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d013      	beq.n	801344e <validate+0x4e>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	889a      	ldrh	r2, [r3, #4]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	88db      	ldrh	r3, [r3, #6]
 8013430:	429a      	cmp	r2, r3
 8013432:	d10c      	bne.n	801344e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	785b      	ldrb	r3, [r3, #1]
 801343a:	4618      	mov	r0, r3
 801343c:	f7fe f952 	bl	80116e4 <disk_status>
 8013440:	4603      	mov	r3, r0
 8013442:	f003 0301 	and.w	r3, r3, #1
 8013446:	2b00      	cmp	r3, #0
 8013448:	d101      	bne.n	801344e <validate+0x4e>
			res = FR_OK;
 801344a:	2300      	movs	r3, #0
 801344c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801344e:	7bfb      	ldrb	r3, [r7, #15]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d102      	bne.n	801345a <validate+0x5a>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	e000      	b.n	801345c <validate+0x5c>
 801345a:	2300      	movs	r3, #0
 801345c:	683a      	ldr	r2, [r7, #0]
 801345e:	6013      	str	r3, [r2, #0]
	return res;
 8013460:	7bfb      	ldrb	r3, [r7, #15]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
	...

0801346c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b088      	sub	sp, #32
 8013470:	af00      	add	r7, sp, #0
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	4613      	mov	r3, r2
 8013478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801347e:	f107 0310 	add.w	r3, r7, #16
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff fc9b 	bl	8012dbe <get_ldnumber>
 8013488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	2b00      	cmp	r3, #0
 801348e:	da01      	bge.n	8013494 <f_mount+0x28>
 8013490:	230b      	movs	r3, #11
 8013492:	e02b      	b.n	80134ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013494:	4a17      	ldr	r2, [pc, #92]	; (80134f4 <f_mount+0x88>)
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801349c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801349e:	69bb      	ldr	r3, [r7, #24]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d005      	beq.n	80134b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80134a4:	69b8      	ldr	r0, [r7, #24]
 80134a6:	f7fe fc03 	bl	8011cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	2200      	movs	r2, #0
 80134ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2200      	movs	r2, #0
 80134ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80134bc:	68fa      	ldr	r2, [r7, #12]
 80134be:	490d      	ldr	r1, [pc, #52]	; (80134f4 <f_mount+0x88>)
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d002      	beq.n	80134d2 <f_mount+0x66>
 80134cc:	79fb      	ldrb	r3, [r7, #7]
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d001      	beq.n	80134d6 <f_mount+0x6a>
 80134d2:	2300      	movs	r3, #0
 80134d4:	e00a      	b.n	80134ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80134d6:	f107 010c 	add.w	r1, r7, #12
 80134da:	f107 0308 	add.w	r3, r7, #8
 80134de:	2200      	movs	r2, #0
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7ff fd07 	bl	8012ef4 <find_volume>
 80134e6:	4603      	mov	r3, r0
 80134e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3720      	adds	r7, #32
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	20042464 	.word	0x20042464

080134f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b098      	sub	sp, #96	; 0x60
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	4613      	mov	r3, r2
 8013504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d101      	bne.n	8013510 <f_open+0x18>
 801350c:	2309      	movs	r3, #9
 801350e:	e1ba      	b.n	8013886 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013518:	79fa      	ldrb	r2, [r7, #7]
 801351a:	f107 0110 	add.w	r1, r7, #16
 801351e:	f107 0308 	add.w	r3, r7, #8
 8013522:	4618      	mov	r0, r3
 8013524:	f7ff fce6 	bl	8012ef4 <find_volume>
 8013528:	4603      	mov	r3, r0
 801352a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801352e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013532:	2b00      	cmp	r3, #0
 8013534:	f040 819e 	bne.w	8013874 <f_open+0x37c>
		dj.obj.fs = fs;
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	f107 0314 	add.w	r3, r7, #20
 8013542:	4611      	mov	r1, r2
 8013544:	4618      	mov	r0, r3
 8013546:	f7ff fba5 	bl	8012c94 <follow_path>
 801354a:	4603      	mov	r3, r0
 801354c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013554:	2b00      	cmp	r3, #0
 8013556:	d11a      	bne.n	801358e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013558:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801355c:	b25b      	sxtb	r3, r3
 801355e:	2b00      	cmp	r3, #0
 8013560:	da03      	bge.n	801356a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013562:	2306      	movs	r3, #6
 8013564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013568:	e011      	b.n	801358e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801356a:	79fb      	ldrb	r3, [r7, #7]
 801356c:	f023 0301 	bic.w	r3, r3, #1
 8013570:	2b00      	cmp	r3, #0
 8013572:	bf14      	ite	ne
 8013574:	2301      	movne	r3, #1
 8013576:	2300      	moveq	r3, #0
 8013578:	b2db      	uxtb	r3, r3
 801357a:	461a      	mov	r2, r3
 801357c:	f107 0314 	add.w	r3, r7, #20
 8013580:	4611      	mov	r1, r2
 8013582:	4618      	mov	r0, r3
 8013584:	f7fe fa4c 	bl	8011a20 <chk_lock>
 8013588:	4603      	mov	r3, r0
 801358a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	f003 031c 	and.w	r3, r3, #28
 8013594:	2b00      	cmp	r3, #0
 8013596:	d07e      	beq.n	8013696 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013598:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801359c:	2b00      	cmp	r3, #0
 801359e:	d017      	beq.n	80135d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80135a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135a4:	2b04      	cmp	r3, #4
 80135a6:	d10e      	bne.n	80135c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80135a8:	f7fe fa96 	bl	8011ad8 <enq_lock>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d006      	beq.n	80135c0 <f_open+0xc8>
 80135b2:	f107 0314 	add.w	r3, r7, #20
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7ff fa52 	bl	8012a60 <dir_register>
 80135bc:	4603      	mov	r3, r0
 80135be:	e000      	b.n	80135c2 <f_open+0xca>
 80135c0:	2312      	movs	r3, #18
 80135c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	f043 0308 	orr.w	r3, r3, #8
 80135cc:	71fb      	strb	r3, [r7, #7]
 80135ce:	e010      	b.n	80135f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80135d0:	7ebb      	ldrb	r3, [r7, #26]
 80135d2:	f003 0311 	and.w	r3, r3, #17
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d003      	beq.n	80135e2 <f_open+0xea>
					res = FR_DENIED;
 80135da:	2307      	movs	r3, #7
 80135dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135e0:	e007      	b.n	80135f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80135e2:	79fb      	ldrb	r3, [r7, #7]
 80135e4:	f003 0304 	and.w	r3, r3, #4
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d002      	beq.n	80135f2 <f_open+0xfa>
 80135ec:	2308      	movs	r3, #8
 80135ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80135f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d167      	bne.n	80136ca <f_open+0x1d2>
 80135fa:	79fb      	ldrb	r3, [r7, #7]
 80135fc:	f003 0308 	and.w	r3, r3, #8
 8013600:	2b00      	cmp	r3, #0
 8013602:	d062      	beq.n	80136ca <f_open+0x1d2>
				dw = GET_FATTIME();
 8013604:	4ba2      	ldr	r3, [pc, #648]	; (8013890 <f_open+0x398>)
 8013606:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801360a:	330e      	adds	r3, #14
 801360c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801360e:	4618      	mov	r0, r3
 8013610:	f7fe f95c 	bl	80118cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013616:	3316      	adds	r3, #22
 8013618:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801361a:	4618      	mov	r0, r3
 801361c:	f7fe f956 	bl	80118cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013622:	330b      	adds	r3, #11
 8013624:	2220      	movs	r2, #32
 8013626:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801362c:	4611      	mov	r1, r2
 801362e:	4618      	mov	r0, r3
 8013630:	f7ff f925 	bl	801287e <ld_clust>
 8013634:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801363a:	2200      	movs	r2, #0
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff f93d 	bl	80128bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013644:	331c      	adds	r3, #28
 8013646:	2100      	movs	r1, #0
 8013648:	4618      	mov	r0, r3
 801364a:	f7fe f93f 	bl	80118cc <st_dword>
					fs->wflag = 1;
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	2201      	movs	r2, #1
 8013652:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013656:	2b00      	cmp	r3, #0
 8013658:	d037      	beq.n	80136ca <f_open+0x1d2>
						dw = fs->winsect;
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801365e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013660:	f107 0314 	add.w	r3, r7, #20
 8013664:	2200      	movs	r2, #0
 8013666:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013668:	4618      	mov	r0, r3
 801366a:	f7fe fe2d 	bl	80122c8 <remove_chain>
 801366e:	4603      	mov	r3, r0
 8013670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013678:	2b00      	cmp	r3, #0
 801367a:	d126      	bne.n	80136ca <f_open+0x1d2>
							res = move_window(fs, dw);
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013680:	4618      	mov	r0, r3
 8013682:	f7fe fb7d 	bl	8011d80 <move_window>
 8013686:	4603      	mov	r3, r0
 8013688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013690:	3a01      	subs	r2, #1
 8013692:	611a      	str	r2, [r3, #16]
 8013694:	e019      	b.n	80136ca <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801369a:	2b00      	cmp	r3, #0
 801369c:	d115      	bne.n	80136ca <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801369e:	7ebb      	ldrb	r3, [r7, #26]
 80136a0:	f003 0310 	and.w	r3, r3, #16
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d003      	beq.n	80136b0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80136a8:	2304      	movs	r3, #4
 80136aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80136ae:	e00c      	b.n	80136ca <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80136b0:	79fb      	ldrb	r3, [r7, #7]
 80136b2:	f003 0302 	and.w	r3, r3, #2
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d007      	beq.n	80136ca <f_open+0x1d2>
 80136ba:	7ebb      	ldrb	r3, [r7, #26]
 80136bc:	f003 0301 	and.w	r3, r3, #1
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d002      	beq.n	80136ca <f_open+0x1d2>
						res = FR_DENIED;
 80136c4:	2307      	movs	r3, #7
 80136c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80136ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d128      	bne.n	8013724 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80136d2:	79fb      	ldrb	r3, [r7, #7]
 80136d4:	f003 0308 	and.w	r3, r3, #8
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d003      	beq.n	80136e4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80136dc:	79fb      	ldrb	r3, [r7, #7]
 80136de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136e2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80136ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136f2:	79fb      	ldrb	r3, [r7, #7]
 80136f4:	f023 0301 	bic.w	r3, r3, #1
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	bf14      	ite	ne
 80136fc:	2301      	movne	r3, #1
 80136fe:	2300      	moveq	r3, #0
 8013700:	b2db      	uxtb	r3, r3
 8013702:	461a      	mov	r2, r3
 8013704:	f107 0314 	add.w	r3, r7, #20
 8013708:	4611      	mov	r1, r2
 801370a:	4618      	mov	r0, r3
 801370c:	f7fe fa06 	bl	8011b1c <inc_lock>
 8013710:	4602      	mov	r2, r0
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	691b      	ldr	r3, [r3, #16]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d102      	bne.n	8013724 <f_open+0x22c>
 801371e:	2302      	movs	r3, #2
 8013720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013728:	2b00      	cmp	r3, #0
 801372a:	f040 80a3 	bne.w	8013874 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013732:	4611      	mov	r1, r2
 8013734:	4618      	mov	r0, r3
 8013736:	f7ff f8a2 	bl	801287e <ld_clust>
 801373a:	4602      	mov	r2, r0
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013742:	331c      	adds	r3, #28
 8013744:	4618      	mov	r0, r3
 8013746:	f7fe f883 	bl	8011850 <ld_dword>
 801374a:	4602      	mov	r2, r0
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2200      	movs	r2, #0
 8013754:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013756:	693a      	ldr	r2, [r7, #16]
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	88da      	ldrh	r2, [r3, #6]
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	79fa      	ldrb	r2, [r7, #7]
 8013768:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2200      	movs	r2, #0
 8013774:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	2200      	movs	r2, #0
 801377a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	3330      	adds	r3, #48	; 0x30
 8013780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013784:	2100      	movs	r1, #0
 8013786:	4618      	mov	r0, r3
 8013788:	f7fe f8ed 	bl	8011966 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801378c:	79fb      	ldrb	r3, [r7, #7]
 801378e:	f003 0320 	and.w	r3, r3, #32
 8013792:	2b00      	cmp	r3, #0
 8013794:	d06e      	beq.n	8013874 <f_open+0x37c>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d06a      	beq.n	8013874 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	68da      	ldr	r2, [r3, #12]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	895b      	ldrh	r3, [r3, #10]
 80137aa:	461a      	mov	r2, r3
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	899b      	ldrh	r3, [r3, #12]
 80137b0:	fb03 f302 	mul.w	r3, r3, r2
 80137b4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	689b      	ldr	r3, [r3, #8]
 80137ba:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	657b      	str	r3, [r7, #84]	; 0x54
 80137c2:	e016      	b.n	80137f2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7fe fb96 	bl	8011efa <get_fat>
 80137ce:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80137d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d802      	bhi.n	80137dc <f_open+0x2e4>
 80137d6:	2302      	movs	r3, #2
 80137d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80137dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137e2:	d102      	bne.n	80137ea <f_open+0x2f2>
 80137e4:	2301      	movs	r3, #1
 80137e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	657b      	str	r3, [r7, #84]	; 0x54
 80137f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d103      	bne.n	8013802 <f_open+0x30a>
 80137fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137fe:	429a      	cmp	r2, r3
 8013800:	d8e0      	bhi.n	80137c4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013806:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801380c:	2b00      	cmp	r3, #0
 801380e:	d131      	bne.n	8013874 <f_open+0x37c>
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	899b      	ldrh	r3, [r3, #12]
 8013814:	461a      	mov	r2, r3
 8013816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013818:	fbb3 f1f2 	udiv	r1, r3, r2
 801381c:	fb02 f201 	mul.w	r2, r2, r1
 8013820:	1a9b      	subs	r3, r3, r2
 8013822:	2b00      	cmp	r3, #0
 8013824:	d026      	beq.n	8013874 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801382a:	4618      	mov	r0, r3
 801382c:	f7fe fb46 	bl	8011ebc <clust2sect>
 8013830:	6478      	str	r0, [r7, #68]	; 0x44
 8013832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013834:	2b00      	cmp	r3, #0
 8013836:	d103      	bne.n	8013840 <f_open+0x348>
						res = FR_INT_ERR;
 8013838:	2302      	movs	r3, #2
 801383a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801383e:	e019      	b.n	8013874 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	899b      	ldrh	r3, [r3, #12]
 8013844:	461a      	mov	r2, r3
 8013846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013848:	fbb3 f2f2 	udiv	r2, r3, r2
 801384c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801384e:	441a      	add	r2, r3
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	7858      	ldrb	r0, [r3, #1]
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	6a1a      	ldr	r2, [r3, #32]
 8013862:	2301      	movs	r3, #1
 8013864:	f7fd ff7e 	bl	8011764 <disk_read>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d002      	beq.n	8013874 <f_open+0x37c>
 801386e:	2301      	movs	r3, #1
 8013870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013878:	2b00      	cmp	r3, #0
 801387a:	d002      	beq.n	8013882 <f_open+0x38a>
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2200      	movs	r2, #0
 8013880:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013886:	4618      	mov	r0, r3
 8013888:	3760      	adds	r7, #96	; 0x60
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	274a0000 	.word	0x274a0000

08013894 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b08e      	sub	sp, #56	; 0x38
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	607a      	str	r2, [r7, #4]
 80138a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	2200      	movs	r2, #0
 80138aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f107 0214 	add.w	r2, r7, #20
 80138b2:	4611      	mov	r1, r2
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7ff fda3 	bl	8013400 <validate>
 80138ba:	4603      	mov	r3, r0
 80138bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80138c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d107      	bne.n	80138d8 <f_read+0x44>
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	7d5b      	ldrb	r3, [r3, #21]
 80138cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80138d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d002      	beq.n	80138de <f_read+0x4a>
 80138d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138dc:	e135      	b.n	8013b4a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	7d1b      	ldrb	r3, [r3, #20]
 80138e2:	f003 0301 	and.w	r3, r3, #1
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d101      	bne.n	80138ee <f_read+0x5a>
 80138ea:	2307      	movs	r3, #7
 80138ec:	e12d      	b.n	8013b4a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	68da      	ldr	r2, [r3, #12]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	1ad3      	subs	r3, r2, r3
 80138f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	429a      	cmp	r2, r3
 8013900:	f240 811e 	bls.w	8013b40 <f_read+0x2ac>
 8013904:	6a3b      	ldr	r3, [r7, #32]
 8013906:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013908:	e11a      	b.n	8013b40 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	699b      	ldr	r3, [r3, #24]
 801390e:	697a      	ldr	r2, [r7, #20]
 8013910:	8992      	ldrh	r2, [r2, #12]
 8013912:	fbb3 f1f2 	udiv	r1, r3, r2
 8013916:	fb02 f201 	mul.w	r2, r2, r1
 801391a:	1a9b      	subs	r3, r3, r2
 801391c:	2b00      	cmp	r3, #0
 801391e:	f040 80d5 	bne.w	8013acc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	699b      	ldr	r3, [r3, #24]
 8013926:	697a      	ldr	r2, [r7, #20]
 8013928:	8992      	ldrh	r2, [r2, #12]
 801392a:	fbb3 f3f2 	udiv	r3, r3, r2
 801392e:	697a      	ldr	r2, [r7, #20]
 8013930:	8952      	ldrh	r2, [r2, #10]
 8013932:	3a01      	subs	r2, #1
 8013934:	4013      	ands	r3, r2
 8013936:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d12f      	bne.n	801399e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	699b      	ldr	r3, [r3, #24]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d103      	bne.n	801394e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	633b      	str	r3, [r7, #48]	; 0x30
 801394c:	e013      	b.n	8013976 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013952:	2b00      	cmp	r3, #0
 8013954:	d007      	beq.n	8013966 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	4619      	mov	r1, r3
 801395c:	68f8      	ldr	r0, [r7, #12]
 801395e:	f7fe fdb0 	bl	80124c2 <clmt_clust>
 8013962:	6338      	str	r0, [r7, #48]	; 0x30
 8013964:	e007      	b.n	8013976 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013966:	68fa      	ldr	r2, [r7, #12]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	69db      	ldr	r3, [r3, #28]
 801396c:	4619      	mov	r1, r3
 801396e:	4610      	mov	r0, r2
 8013970:	f7fe fac3 	bl	8011efa <get_fat>
 8013974:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013978:	2b01      	cmp	r3, #1
 801397a:	d804      	bhi.n	8013986 <f_read+0xf2>
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2202      	movs	r2, #2
 8013980:	755a      	strb	r2, [r3, #21]
 8013982:	2302      	movs	r3, #2
 8013984:	e0e1      	b.n	8013b4a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801398c:	d104      	bne.n	8013998 <f_read+0x104>
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2201      	movs	r2, #1
 8013992:	755a      	strb	r2, [r3, #21]
 8013994:	2301      	movs	r3, #1
 8013996:	e0d8      	b.n	8013b4a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801399c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801399e:	697a      	ldr	r2, [r7, #20]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	69db      	ldr	r3, [r3, #28]
 80139a4:	4619      	mov	r1, r3
 80139a6:	4610      	mov	r0, r2
 80139a8:	f7fe fa88 	bl	8011ebc <clust2sect>
 80139ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d104      	bne.n	80139be <f_read+0x12a>
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2202      	movs	r2, #2
 80139b8:	755a      	strb	r2, [r3, #21]
 80139ba:	2302      	movs	r3, #2
 80139bc:	e0c5      	b.n	8013b4a <f_read+0x2b6>
			sect += csect;
 80139be:	69ba      	ldr	r2, [r7, #24]
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	4413      	add	r3, r2
 80139c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	899b      	ldrh	r3, [r3, #12]
 80139ca:	461a      	mov	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80139d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80139d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d041      	beq.n	8013a5e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80139da:	69fa      	ldr	r2, [r7, #28]
 80139dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139de:	4413      	add	r3, r2
 80139e0:	697a      	ldr	r2, [r7, #20]
 80139e2:	8952      	ldrh	r2, [r2, #10]
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d905      	bls.n	80139f4 <f_read+0x160>
					cc = fs->csize - csect;
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	895b      	ldrh	r3, [r3, #10]
 80139ec:	461a      	mov	r2, r3
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	1ad3      	subs	r3, r2, r3
 80139f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	7858      	ldrb	r0, [r3, #1]
 80139f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fa:	69ba      	ldr	r2, [r7, #24]
 80139fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139fe:	f7fd feb1 	bl	8011764 <disk_read>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d004      	beq.n	8013a12 <f_read+0x17e>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	755a      	strb	r2, [r3, #21]
 8013a0e:	2301      	movs	r3, #1
 8013a10:	e09b      	b.n	8013b4a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	7d1b      	ldrb	r3, [r3, #20]
 8013a16:	b25b      	sxtb	r3, r3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	da18      	bge.n	8013a4e <f_read+0x1ba>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	6a1a      	ldr	r2, [r3, #32]
 8013a20:	69bb      	ldr	r3, [r7, #24]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d911      	bls.n	8013a4e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	6a1a      	ldr	r2, [r3, #32]
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	697a      	ldr	r2, [r7, #20]
 8013a34:	8992      	ldrh	r2, [r2, #12]
 8013a36:	fb02 f303 	mul.w	r3, r2, r3
 8013a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a3c:	18d0      	adds	r0, r2, r3
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	899b      	ldrh	r3, [r3, #12]
 8013a48:	461a      	mov	r2, r3
 8013a4a:	f7fd ff6b 	bl	8011924 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	899b      	ldrh	r3, [r3, #12]
 8013a52:	461a      	mov	r2, r3
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	fb02 f303 	mul.w	r3, r2, r3
 8013a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013a5c:	e05c      	b.n	8013b18 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	6a1b      	ldr	r3, [r3, #32]
 8013a62:	69ba      	ldr	r2, [r7, #24]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d02e      	beq.n	8013ac6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	7d1b      	ldrb	r3, [r3, #20]
 8013a6c:	b25b      	sxtb	r3, r3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	da18      	bge.n	8013aa4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	7858      	ldrb	r0, [r3, #1]
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6a1a      	ldr	r2, [r3, #32]
 8013a80:	2301      	movs	r3, #1
 8013a82:	f7fd fe8f 	bl	80117a4 <disk_write>
 8013a86:	4603      	mov	r3, r0
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d004      	beq.n	8013a96 <f_read+0x202>
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2201      	movs	r2, #1
 8013a90:	755a      	strb	r2, [r3, #21]
 8013a92:	2301      	movs	r3, #1
 8013a94:	e059      	b.n	8013b4a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	7d1b      	ldrb	r3, [r3, #20]
 8013a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	7858      	ldrb	r0, [r3, #1]
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013aae:	2301      	movs	r3, #1
 8013ab0:	69ba      	ldr	r2, [r7, #24]
 8013ab2:	f7fd fe57 	bl	8011764 <disk_read>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d004      	beq.n	8013ac6 <f_read+0x232>
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2201      	movs	r2, #1
 8013ac0:	755a      	strb	r2, [r3, #21]
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	e041      	b.n	8013b4a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	69ba      	ldr	r2, [r7, #24]
 8013aca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	899b      	ldrh	r3, [r3, #12]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	699b      	ldr	r3, [r3, #24]
 8013ad6:	697a      	ldr	r2, [r7, #20]
 8013ad8:	8992      	ldrh	r2, [r2, #12]
 8013ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ade:	fb02 f201 	mul.w	r2, r2, r1
 8013ae2:	1a9b      	subs	r3, r3, r2
 8013ae4:	1ac3      	subs	r3, r0, r3
 8013ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d901      	bls.n	8013af4 <f_read+0x260>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	699b      	ldr	r3, [r3, #24]
 8013afe:	697a      	ldr	r2, [r7, #20]
 8013b00:	8992      	ldrh	r2, [r2, #12]
 8013b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b06:	fb02 f200 	mul.w	r2, r2, r0
 8013b0a:	1a9b      	subs	r3, r3, r2
 8013b0c:	440b      	add	r3, r1
 8013b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b10:	4619      	mov	r1, r3
 8013b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b14:	f7fd ff06 	bl	8011924 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1c:	4413      	add	r3, r2
 8013b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	699a      	ldr	r2, [r3, #24]
 8013b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b26:	441a      	add	r2, r3
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	619a      	str	r2, [r3, #24]
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b32:	441a      	add	r2, r3
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	601a      	str	r2, [r3, #0]
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3c:	1ad3      	subs	r3, r2, r3
 8013b3e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	f47f aee1 	bne.w	801390a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013b48:	2300      	movs	r3, #0
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3738      	adds	r7, #56	; 0x38
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b08c      	sub	sp, #48	; 0x30
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	607a      	str	r2, [r7, #4]
 8013b5e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	2200      	movs	r2, #0
 8013b68:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f107 0210 	add.w	r2, r7, #16
 8013b70:	4611      	mov	r1, r2
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7ff fc44 	bl	8013400 <validate>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d107      	bne.n	8013b96 <f_write+0x44>
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	7d5b      	ldrb	r3, [r3, #21]
 8013b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d002      	beq.n	8013b9c <f_write+0x4a>
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9a:	e16a      	b.n	8013e72 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ba0:	f003 0302 	and.w	r3, r3, #2
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d101      	bne.n	8013bac <f_write+0x5a>
 8013ba8:	2307      	movs	r3, #7
 8013baa:	e162      	b.n	8013e72 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	699a      	ldr	r2, [r3, #24]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	441a      	add	r2, r3
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	699b      	ldr	r3, [r3, #24]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	f080 814c 	bcs.w	8013e56 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	699b      	ldr	r3, [r3, #24]
 8013bc2:	43db      	mvns	r3, r3
 8013bc4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013bc6:	e146      	b.n	8013e56 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	699b      	ldr	r3, [r3, #24]
 8013bcc:	693a      	ldr	r2, [r7, #16]
 8013bce:	8992      	ldrh	r2, [r2, #12]
 8013bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bd4:	fb02 f201 	mul.w	r2, r2, r1
 8013bd8:	1a9b      	subs	r3, r3, r2
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f040 80f1 	bne.w	8013dc2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	699b      	ldr	r3, [r3, #24]
 8013be4:	693a      	ldr	r2, [r7, #16]
 8013be6:	8992      	ldrh	r2, [r2, #12]
 8013be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013bec:	693a      	ldr	r2, [r7, #16]
 8013bee:	8952      	ldrh	r2, [r2, #10]
 8013bf0:	3a01      	subs	r2, #1
 8013bf2:	4013      	ands	r3, r2
 8013bf4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d143      	bne.n	8013c84 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	699b      	ldr	r3, [r3, #24]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d10c      	bne.n	8013c1e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	689b      	ldr	r3, [r3, #8]
 8013c08:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d11a      	bne.n	8013c46 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2100      	movs	r1, #0
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fe fbbc 	bl	8012392 <create_chain>
 8013c1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c1c:	e013      	b.n	8013c46 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d007      	beq.n	8013c36 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f7fe fc48 	bl	80124c2 <clmt_clust>
 8013c32:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c34:	e007      	b.n	8013c46 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	69db      	ldr	r3, [r3, #28]
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	4610      	mov	r0, r2
 8013c40:	f7fe fba7 	bl	8012392 <create_chain>
 8013c44:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f000 8109 	beq.w	8013e60 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d104      	bne.n	8013c5e <f_write+0x10c>
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2202      	movs	r2, #2
 8013c58:	755a      	strb	r2, [r3, #21]
 8013c5a:	2302      	movs	r3, #2
 8013c5c:	e109      	b.n	8013e72 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c64:	d104      	bne.n	8013c70 <f_write+0x11e>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	2201      	movs	r2, #1
 8013c6a:	755a      	strb	r2, [r3, #21]
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	e100      	b.n	8013e72 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c74:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d102      	bne.n	8013c84 <f_write+0x132>
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c82:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	7d1b      	ldrb	r3, [r3, #20]
 8013c88:	b25b      	sxtb	r3, r3
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	da18      	bge.n	8013cc0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	7858      	ldrb	r0, [r3, #1]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	6a1a      	ldr	r2, [r3, #32]
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	f7fd fd81 	bl	80117a4 <disk_write>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d004      	beq.n	8013cb2 <f_write+0x160>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	2201      	movs	r2, #1
 8013cac:	755a      	strb	r2, [r3, #21]
 8013cae:	2301      	movs	r3, #1
 8013cb0:	e0df      	b.n	8013e72 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	7d1b      	ldrb	r3, [r3, #20]
 8013cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cba:	b2da      	uxtb	r2, r3
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013cc0:	693a      	ldr	r2, [r7, #16]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	69db      	ldr	r3, [r3, #28]
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	4610      	mov	r0, r2
 8013cca:	f7fe f8f7 	bl	8011ebc <clust2sect>
 8013cce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d104      	bne.n	8013ce0 <f_write+0x18e>
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2202      	movs	r2, #2
 8013cda:	755a      	strb	r2, [r3, #21]
 8013cdc:	2302      	movs	r3, #2
 8013cde:	e0c8      	b.n	8013e72 <f_write+0x320>
			sect += csect;
 8013ce0:	697a      	ldr	r2, [r7, #20]
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	899b      	ldrh	r3, [r3, #12]
 8013cec:	461a      	mov	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013cf4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013cf6:	6a3b      	ldr	r3, [r7, #32]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d043      	beq.n	8013d84 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013cfc:	69ba      	ldr	r2, [r7, #24]
 8013cfe:	6a3b      	ldr	r3, [r7, #32]
 8013d00:	4413      	add	r3, r2
 8013d02:	693a      	ldr	r2, [r7, #16]
 8013d04:	8952      	ldrh	r2, [r2, #10]
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d905      	bls.n	8013d16 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	895b      	ldrh	r3, [r3, #10]
 8013d0e:	461a      	mov	r2, r3
 8013d10:	69bb      	ldr	r3, [r7, #24]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	7858      	ldrb	r0, [r3, #1]
 8013d1a:	6a3b      	ldr	r3, [r7, #32]
 8013d1c:	697a      	ldr	r2, [r7, #20]
 8013d1e:	69f9      	ldr	r1, [r7, #28]
 8013d20:	f7fd fd40 	bl	80117a4 <disk_write>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d004      	beq.n	8013d34 <f_write+0x1e2>
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	755a      	strb	r2, [r3, #21]
 8013d30:	2301      	movs	r3, #1
 8013d32:	e09e      	b.n	8013e72 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	6a1a      	ldr	r2, [r3, #32]
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	6a3a      	ldr	r2, [r7, #32]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d918      	bls.n	8013d74 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	6a1a      	ldr	r2, [r3, #32]
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	693a      	ldr	r2, [r7, #16]
 8013d52:	8992      	ldrh	r2, [r2, #12]
 8013d54:	fb02 f303 	mul.w	r3, r2, r3
 8013d58:	69fa      	ldr	r2, [r7, #28]
 8013d5a:	18d1      	adds	r1, r2, r3
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	899b      	ldrh	r3, [r3, #12]
 8013d60:	461a      	mov	r2, r3
 8013d62:	f7fd fddf 	bl	8011924 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	7d1b      	ldrb	r3, [r3, #20]
 8013d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d6e:	b2da      	uxtb	r2, r3
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	899b      	ldrh	r3, [r3, #12]
 8013d78:	461a      	mov	r2, r3
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	fb02 f303 	mul.w	r3, r2, r3
 8013d80:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013d82:	e04b      	b.n	8013e1c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	6a1b      	ldr	r3, [r3, #32]
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d016      	beq.n	8013dbc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	699a      	ldr	r2, [r3, #24]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d210      	bcs.n	8013dbc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	7858      	ldrb	r0, [r3, #1]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013da4:	2301      	movs	r3, #1
 8013da6:	697a      	ldr	r2, [r7, #20]
 8013da8:	f7fd fcdc 	bl	8011764 <disk_read>
 8013dac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d004      	beq.n	8013dbc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2201      	movs	r2, #1
 8013db6:	755a      	strb	r2, [r3, #21]
 8013db8:	2301      	movs	r3, #1
 8013dba:	e05a      	b.n	8013e72 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	697a      	ldr	r2, [r7, #20]
 8013dc0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	899b      	ldrh	r3, [r3, #12]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	699b      	ldr	r3, [r3, #24]
 8013dcc:	693a      	ldr	r2, [r7, #16]
 8013dce:	8992      	ldrh	r2, [r2, #12]
 8013dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dd4:	fb02 f201 	mul.w	r2, r2, r1
 8013dd8:	1a9b      	subs	r3, r3, r2
 8013dda:	1ac3      	subs	r3, r0, r3
 8013ddc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d901      	bls.n	8013dea <f_write+0x298>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	699b      	ldr	r3, [r3, #24]
 8013df4:	693a      	ldr	r2, [r7, #16]
 8013df6:	8992      	ldrh	r2, [r2, #12]
 8013df8:	fbb3 f0f2 	udiv	r0, r3, r2
 8013dfc:	fb02 f200 	mul.w	r2, r2, r0
 8013e00:	1a9b      	subs	r3, r3, r2
 8013e02:	440b      	add	r3, r1
 8013e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e06:	69f9      	ldr	r1, [r7, #28]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fd fd8b 	bl	8011924 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	7d1b      	ldrb	r3, [r3, #20]
 8013e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e16:	b2da      	uxtb	r2, r3
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013e1c:	69fa      	ldr	r2, [r7, #28]
 8013e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e20:	4413      	add	r3, r2
 8013e22:	61fb      	str	r3, [r7, #28]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	699a      	ldr	r2, [r3, #24]
 8013e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2a:	441a      	add	r2, r3
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	619a      	str	r2, [r3, #24]
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	68da      	ldr	r2, [r3, #12]
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	699b      	ldr	r3, [r3, #24]
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	bf38      	it	cc
 8013e3c:	461a      	movcc	r2, r3
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	60da      	str	r2, [r3, #12]
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	681a      	ldr	r2, [r3, #0]
 8013e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e48:	441a      	add	r2, r3
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	601a      	str	r2, [r3, #0]
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	f47f aeb5 	bne.w	8013bc8 <f_write+0x76>
 8013e5e:	e000      	b.n	8013e62 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e60:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	7d1b      	ldrb	r3, [r3, #20]
 8013e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e6a:	b2da      	uxtb	r2, r3
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013e70:	2300      	movs	r3, #0
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3730      	adds	r7, #48	; 0x30
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
	...

08013e7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b086      	sub	sp, #24
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f107 0208 	add.w	r2, r7, #8
 8013e8a:	4611      	mov	r1, r2
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7ff fab7 	bl	8013400 <validate>
 8013e92:	4603      	mov	r3, r0
 8013e94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d167      	bne.n	8013f6c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d061      	beq.n	8013f6c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	7d1b      	ldrb	r3, [r3, #20]
 8013eac:	b25b      	sxtb	r3, r3
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	da15      	bge.n	8013ede <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	7858      	ldrb	r0, [r3, #1]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6a1a      	ldr	r2, [r3, #32]
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	f7fd fc6f 	bl	80117a4 <disk_write>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d001      	beq.n	8013ed0 <f_sync+0x54>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	e04e      	b.n	8013f6e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	7d1b      	ldrb	r3, [r3, #20]
 8013ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ed8:	b2da      	uxtb	r2, r3
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013ede:	4b26      	ldr	r3, [pc, #152]	; (8013f78 <f_sync+0xfc>)
 8013ee0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013ee2:	68ba      	ldr	r2, [r7, #8]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee8:	4619      	mov	r1, r3
 8013eea:	4610      	mov	r0, r2
 8013eec:	f7fd ff48 	bl	8011d80 <move_window>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013ef4:	7dfb      	ldrb	r3, [r7, #23]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d138      	bne.n	8013f6c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	330b      	adds	r3, #11
 8013f04:	781a      	ldrb	r2, [r3, #0]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	330b      	adds	r3, #11
 8013f0a:	f042 0220 	orr.w	r2, r2, #32
 8013f0e:	b2d2      	uxtb	r2, r2
 8013f10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6818      	ldr	r0, [r3, #0]
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	461a      	mov	r2, r3
 8013f1c:	68f9      	ldr	r1, [r7, #12]
 8013f1e:	f7fe fccd 	bl	80128bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f103 021c 	add.w	r2, r3, #28
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	4610      	mov	r0, r2
 8013f30:	f7fd fccc 	bl	80118cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3316      	adds	r3, #22
 8013f38:	6939      	ldr	r1, [r7, #16]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fd fcc6 	bl	80118cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3312      	adds	r3, #18
 8013f44:	2100      	movs	r1, #0
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fd fca5 	bl	8011896 <st_word>
					fs->wflag = 1;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2201      	movs	r2, #1
 8013f50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fd ff41 	bl	8011ddc <sync_fs>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	7d1b      	ldrb	r3, [r3, #20]
 8013f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f66:	b2da      	uxtb	r2, r3
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3718      	adds	r7, #24
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	bf00      	nop
 8013f78:	274a0000 	.word	0x274a0000

08013f7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7ff ff79 	bl	8013e7c <f_sync>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013f8e:	7bfb      	ldrb	r3, [r7, #15]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d118      	bne.n	8013fc6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f107 0208 	add.w	r2, r7, #8
 8013f9a:	4611      	mov	r1, r2
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7ff fa2f 	bl	8013400 <validate>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013fa6:	7bfb      	ldrb	r3, [r7, #15]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d10c      	bne.n	8013fc6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	691b      	ldr	r3, [r3, #16]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fd fe41 	bl	8011c38 <dec_lock>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013fba:	7bfb      	ldrb	r3, [r7, #15]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d102      	bne.n	8013fc6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013fd0:	b590      	push	{r4, r7, lr}
 8013fd2:	b091      	sub	sp, #68	; 0x44
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013fd8:	f107 0108 	add.w	r1, r7, #8
 8013fdc:	1d3b      	adds	r3, r7, #4
 8013fde:	2200      	movs	r2, #0
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe ff87 	bl	8012ef4 <find_volume>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013fec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d131      	bne.n	8014058 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	f107 030c 	add.w	r3, r7, #12
 8013ffe:	4611      	mov	r1, r2
 8014000:	4618      	mov	r0, r3
 8014002:	f7fe fe47 	bl	8012c94 <follow_path>
 8014006:	4603      	mov	r3, r0
 8014008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801400c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014010:	2b00      	cmp	r3, #0
 8014012:	d11a      	bne.n	801404a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014014:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014018:	b25b      	sxtb	r3, r3
 801401a:	2b00      	cmp	r3, #0
 801401c:	da03      	bge.n	8014026 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	697a      	ldr	r2, [r7, #20]
 8014022:	619a      	str	r2, [r3, #24]
 8014024:	e011      	b.n	801404a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8014026:	7cbb      	ldrb	r3, [r7, #18]
 8014028:	f003 0310 	and.w	r3, r3, #16
 801402c:	2b00      	cmp	r3, #0
 801402e:	d009      	beq.n	8014044 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014034:	68bc      	ldr	r4, [r7, #8]
 8014036:	4611      	mov	r1, r2
 8014038:	4618      	mov	r0, r3
 801403a:	f7fe fc20 	bl	801287e <ld_clust>
 801403e:	4603      	mov	r3, r0
 8014040:	61a3      	str	r3, [r4, #24]
 8014042:	e002      	b.n	801404a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8014044:	2305      	movs	r3, #5
 8014046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801404a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801404e:	2b04      	cmp	r3, #4
 8014050:	d102      	bne.n	8014058 <f_chdir+0x88>
 8014052:	2305      	movs	r3, #5
 8014054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8014058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801405c:	4618      	mov	r0, r3
 801405e:	3744      	adds	r7, #68	; 0x44
 8014060:	46bd      	mov	sp, r7
 8014062:	bd90      	pop	{r4, r7, pc}

08014064 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b090      	sub	sp, #64	; 0x40
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f107 0208 	add.w	r2, r7, #8
 8014074:	4611      	mov	r1, r2
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff f9c2 	bl	8013400 <validate>
 801407c:	4603      	mov	r3, r0
 801407e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014082:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014086:	2b00      	cmp	r3, #0
 8014088:	d103      	bne.n	8014092 <f_lseek+0x2e>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	7d5b      	ldrb	r3, [r3, #21]
 801408e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014096:	2b00      	cmp	r3, #0
 8014098:	d002      	beq.n	80140a0 <f_lseek+0x3c>
 801409a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801409e:	e201      	b.n	80144a4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	f000 80d9 	beq.w	801425c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b0:	d15a      	bne.n	8014168 <f_lseek+0x104>
			tbl = fp->cltbl;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80140b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ba:	1d1a      	adds	r2, r3, #4
 80140bc:	627a      	str	r2, [r7, #36]	; 0x24
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	617b      	str	r3, [r7, #20]
 80140c2:	2302      	movs	r3, #2
 80140c4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80140cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d03a      	beq.n	8014148 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80140d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d4:	613b      	str	r3, [r7, #16]
 80140d6:	2300      	movs	r3, #0
 80140d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140dc:	3302      	adds	r3, #2
 80140de:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80140e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e2:	60fb      	str	r3, [r7, #12]
 80140e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e6:	3301      	adds	r3, #1
 80140e8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7fd ff03 	bl	8011efa <get_fat>
 80140f4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80140f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d804      	bhi.n	8014106 <f_lseek+0xa2>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2202      	movs	r2, #2
 8014100:	755a      	strb	r2, [r3, #21]
 8014102:	2302      	movs	r3, #2
 8014104:	e1ce      	b.n	80144a4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801410c:	d104      	bne.n	8014118 <f_lseek+0xb4>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2201      	movs	r2, #1
 8014112:	755a      	strb	r2, [r3, #21]
 8014114:	2301      	movs	r3, #1
 8014116:	e1c5      	b.n	80144a4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	3301      	adds	r3, #1
 801411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801411e:	429a      	cmp	r2, r3
 8014120:	d0de      	beq.n	80140e0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	429a      	cmp	r2, r3
 8014128:	d809      	bhi.n	801413e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412c:	1d1a      	adds	r2, r3, #4
 801412e:	627a      	str	r2, [r7, #36]	; 0x24
 8014130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014132:	601a      	str	r2, [r3, #0]
 8014134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014136:	1d1a      	adds	r2, r3, #4
 8014138:	627a      	str	r2, [r7, #36]	; 0x24
 801413a:	693a      	ldr	r2, [r7, #16]
 801413c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	69db      	ldr	r3, [r3, #28]
 8014142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014144:	429a      	cmp	r2, r3
 8014146:	d3c4      	bcc.n	80140d2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801414e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	429a      	cmp	r2, r3
 8014156:	d803      	bhi.n	8014160 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415a:	2200      	movs	r2, #0
 801415c:	601a      	str	r2, [r3, #0]
 801415e:	e19f      	b.n	80144a0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014160:	2311      	movs	r3, #17
 8014162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014166:	e19b      	b.n	80144a0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	683a      	ldr	r2, [r7, #0]
 801416e:	429a      	cmp	r2, r3
 8014170:	d902      	bls.n	8014178 <f_lseek+0x114>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	68db      	ldr	r3, [r3, #12]
 8014176:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	683a      	ldr	r2, [r7, #0]
 801417c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	2b00      	cmp	r3, #0
 8014182:	f000 818d 	beq.w	80144a0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	3b01      	subs	r3, #1
 801418a:	4619      	mov	r1, r3
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f7fe f998 	bl	80124c2 <clmt_clust>
 8014192:	4602      	mov	r2, r0
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	69db      	ldr	r3, [r3, #28]
 801419e:	4619      	mov	r1, r3
 80141a0:	4610      	mov	r0, r2
 80141a2:	f7fd fe8b 	bl	8011ebc <clust2sect>
 80141a6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d104      	bne.n	80141b8 <f_lseek+0x154>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2202      	movs	r2, #2
 80141b2:	755a      	strb	r2, [r3, #21]
 80141b4:	2302      	movs	r3, #2
 80141b6:	e175      	b.n	80144a4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	3b01      	subs	r3, #1
 80141bc:	68ba      	ldr	r2, [r7, #8]
 80141be:	8992      	ldrh	r2, [r2, #12]
 80141c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c4:	68ba      	ldr	r2, [r7, #8]
 80141c6:	8952      	ldrh	r2, [r2, #10]
 80141c8:	3a01      	subs	r2, #1
 80141ca:	4013      	ands	r3, r2
 80141cc:	69ba      	ldr	r2, [r7, #24]
 80141ce:	4413      	add	r3, r2
 80141d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	699b      	ldr	r3, [r3, #24]
 80141d6:	68ba      	ldr	r2, [r7, #8]
 80141d8:	8992      	ldrh	r2, [r2, #12]
 80141da:	fbb3 f1f2 	udiv	r1, r3, r2
 80141de:	fb02 f201 	mul.w	r2, r2, r1
 80141e2:	1a9b      	subs	r3, r3, r2
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f000 815b 	beq.w	80144a0 <f_lseek+0x43c>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6a1b      	ldr	r3, [r3, #32]
 80141ee:	69ba      	ldr	r2, [r7, #24]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	f000 8155 	beq.w	80144a0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	7d1b      	ldrb	r3, [r3, #20]
 80141fa:	b25b      	sxtb	r3, r3
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	da18      	bge.n	8014232 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	7858      	ldrb	r0, [r3, #1]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6a1a      	ldr	r2, [r3, #32]
 801420e:	2301      	movs	r3, #1
 8014210:	f7fd fac8 	bl	80117a4 <disk_write>
 8014214:	4603      	mov	r3, r0
 8014216:	2b00      	cmp	r3, #0
 8014218:	d004      	beq.n	8014224 <f_lseek+0x1c0>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2201      	movs	r2, #1
 801421e:	755a      	strb	r2, [r3, #21]
 8014220:	2301      	movs	r3, #1
 8014222:	e13f      	b.n	80144a4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	7d1b      	ldrb	r3, [r3, #20]
 8014228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801422c:	b2da      	uxtb	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	7858      	ldrb	r0, [r3, #1]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801423c:	2301      	movs	r3, #1
 801423e:	69ba      	ldr	r2, [r7, #24]
 8014240:	f7fd fa90 	bl	8011764 <disk_read>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d004      	beq.n	8014254 <f_lseek+0x1f0>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2201      	movs	r2, #1
 801424e:	755a      	strb	r2, [r3, #21]
 8014250:	2301      	movs	r3, #1
 8014252:	e127      	b.n	80144a4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	69ba      	ldr	r2, [r7, #24]
 8014258:	621a      	str	r2, [r3, #32]
 801425a:	e121      	b.n	80144a0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	68db      	ldr	r3, [r3, #12]
 8014260:	683a      	ldr	r2, [r7, #0]
 8014262:	429a      	cmp	r2, r3
 8014264:	d908      	bls.n	8014278 <f_lseek+0x214>
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	7d1b      	ldrb	r3, [r3, #20]
 801426a:	f003 0302 	and.w	r3, r3, #2
 801426e:	2b00      	cmp	r3, #0
 8014270:	d102      	bne.n	8014278 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	68db      	ldr	r3, [r3, #12]
 8014276:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	699b      	ldr	r3, [r3, #24]
 801427c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801427e:	2300      	movs	r3, #0
 8014280:	637b      	str	r3, [r7, #52]	; 0x34
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014286:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	f000 80b5 	beq.w	80143fa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	895b      	ldrh	r3, [r3, #10]
 8014294:	461a      	mov	r2, r3
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	899b      	ldrh	r3, [r3, #12]
 801429a:	fb03 f302 	mul.w	r3, r3, r2
 801429e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d01b      	beq.n	80142de <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	1e5a      	subs	r2, r3, #1
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80142b0:	6a3b      	ldr	r3, [r7, #32]
 80142b2:	1e59      	subs	r1, r3, #1
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d30f      	bcc.n	80142de <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80142be:	6a3b      	ldr	r3, [r7, #32]
 80142c0:	1e5a      	subs	r2, r3, #1
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	425b      	negs	r3, r3
 80142c6:	401a      	ands	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	699b      	ldr	r3, [r3, #24]
 80142d0:	683a      	ldr	r2, [r7, #0]
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	69db      	ldr	r3, [r3, #28]
 80142da:	63bb      	str	r3, [r7, #56]	; 0x38
 80142dc:	e022      	b.n	8014324 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80142e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d119      	bne.n	801431e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2100      	movs	r1, #0
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7fe f84f 	bl	8012392 <create_chain>
 80142f4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80142f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d104      	bne.n	8014306 <f_lseek+0x2a2>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2202      	movs	r2, #2
 8014300:	755a      	strb	r2, [r3, #21]
 8014302:	2302      	movs	r3, #2
 8014304:	e0ce      	b.n	80144a4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801430c:	d104      	bne.n	8014318 <f_lseek+0x2b4>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2201      	movs	r2, #1
 8014312:	755a      	strb	r2, [r3, #21]
 8014314:	2301      	movs	r3, #1
 8014316:	e0c5      	b.n	80144a4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801431c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014322:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014326:	2b00      	cmp	r3, #0
 8014328:	d067      	beq.n	80143fa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801432a:	e03a      	b.n	80143a2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801432c:	683a      	ldr	r2, [r7, #0]
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	1ad3      	subs	r3, r2, r3
 8014332:	603b      	str	r3, [r7, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	699a      	ldr	r2, [r3, #24]
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	441a      	add	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	7d1b      	ldrb	r3, [r3, #20]
 8014344:	f003 0302 	and.w	r3, r3, #2
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00b      	beq.n	8014364 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014350:	4618      	mov	r0, r3
 8014352:	f7fe f81e 	bl	8012392 <create_chain>
 8014356:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435a:	2b00      	cmp	r3, #0
 801435c:	d108      	bne.n	8014370 <f_lseek+0x30c>
							ofs = 0; break;
 801435e:	2300      	movs	r3, #0
 8014360:	603b      	str	r3, [r7, #0]
 8014362:	e022      	b.n	80143aa <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014368:	4618      	mov	r0, r3
 801436a:	f7fd fdc6 	bl	8011efa <get_fat>
 801436e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014376:	d104      	bne.n	8014382 <f_lseek+0x31e>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2201      	movs	r2, #1
 801437c:	755a      	strb	r2, [r3, #21]
 801437e:	2301      	movs	r3, #1
 8014380:	e090      	b.n	80144a4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014384:	2b01      	cmp	r3, #1
 8014386:	d904      	bls.n	8014392 <f_lseek+0x32e>
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	69db      	ldr	r3, [r3, #28]
 801438c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801438e:	429a      	cmp	r2, r3
 8014390:	d304      	bcc.n	801439c <f_lseek+0x338>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2202      	movs	r2, #2
 8014396:	755a      	strb	r2, [r3, #21]
 8014398:	2302      	movs	r3, #2
 801439a:	e083      	b.n	80144a4 <f_lseek+0x440>
					fp->clust = clst;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143a0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80143a2:	683a      	ldr	r2, [r7, #0]
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d8c0      	bhi.n	801432c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	699a      	ldr	r2, [r3, #24]
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	441a      	add	r2, r3
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	899b      	ldrh	r3, [r3, #12]
 80143ba:	461a      	mov	r2, r3
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	fbb3 f1f2 	udiv	r1, r3, r2
 80143c2:	fb02 f201 	mul.w	r2, r2, r1
 80143c6:	1a9b      	subs	r3, r3, r2
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d016      	beq.n	80143fa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7fd fd73 	bl	8011ebc <clust2sect>
 80143d6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80143d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d104      	bne.n	80143e8 <f_lseek+0x384>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2202      	movs	r2, #2
 80143e2:	755a      	strb	r2, [r3, #21]
 80143e4:	2302      	movs	r3, #2
 80143e6:	e05d      	b.n	80144a4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	899b      	ldrh	r3, [r3, #12]
 80143ec:	461a      	mov	r2, r3
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80143f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143f6:	4413      	add	r3, r2
 80143f8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	699a      	ldr	r2, [r3, #24]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	429a      	cmp	r2, r3
 8014404:	d90a      	bls.n	801441c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	699a      	ldr	r2, [r3, #24]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	7d1b      	ldrb	r3, [r3, #20]
 8014412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014416:	b2da      	uxtb	r2, r3
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	699b      	ldr	r3, [r3, #24]
 8014420:	68ba      	ldr	r2, [r7, #8]
 8014422:	8992      	ldrh	r2, [r2, #12]
 8014424:	fbb3 f1f2 	udiv	r1, r3, r2
 8014428:	fb02 f201 	mul.w	r2, r2, r1
 801442c:	1a9b      	subs	r3, r3, r2
 801442e:	2b00      	cmp	r3, #0
 8014430:	d036      	beq.n	80144a0 <f_lseek+0x43c>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	6a1b      	ldr	r3, [r3, #32]
 8014436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014438:	429a      	cmp	r2, r3
 801443a:	d031      	beq.n	80144a0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	7d1b      	ldrb	r3, [r3, #20]
 8014440:	b25b      	sxtb	r3, r3
 8014442:	2b00      	cmp	r3, #0
 8014444:	da18      	bge.n	8014478 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	7858      	ldrb	r0, [r3, #1]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6a1a      	ldr	r2, [r3, #32]
 8014454:	2301      	movs	r3, #1
 8014456:	f7fd f9a5 	bl	80117a4 <disk_write>
 801445a:	4603      	mov	r3, r0
 801445c:	2b00      	cmp	r3, #0
 801445e:	d004      	beq.n	801446a <f_lseek+0x406>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2201      	movs	r2, #1
 8014464:	755a      	strb	r2, [r3, #21]
 8014466:	2301      	movs	r3, #1
 8014468:	e01c      	b.n	80144a4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	7d1b      	ldrb	r3, [r3, #20]
 801446e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014472:	b2da      	uxtb	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	7858      	ldrb	r0, [r3, #1]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014482:	2301      	movs	r3, #1
 8014484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014486:	f7fd f96d 	bl	8011764 <disk_read>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d004      	beq.n	801449a <f_lseek+0x436>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2201      	movs	r2, #1
 8014494:	755a      	strb	r2, [r3, #21]
 8014496:	2301      	movs	r3, #1
 8014498:	e004      	b.n	80144a4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801449e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80144a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3740      	adds	r7, #64	; 0x40
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b09e      	sub	sp, #120	; 0x78
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80144b4:	2300      	movs	r3, #0
 80144b6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80144b8:	f107 010c 	add.w	r1, r7, #12
 80144bc:	1d3b      	adds	r3, r7, #4
 80144be:	2202      	movs	r2, #2
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7fe fd17 	bl	8012ef4 <find_volume>
 80144c6:	4603      	mov	r3, r0
 80144c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80144d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f040 80a4 	bne.w	8014622 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80144e0:	4611      	mov	r1, r2
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fe fbd6 	bl	8012c94 <follow_path>
 80144e8:	4603      	mov	r3, r0
 80144ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80144ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d108      	bne.n	8014508 <f_unlink+0x5c>
 80144f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80144fa:	f003 0320 	and.w	r3, r3, #32
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d002      	beq.n	8014508 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014502:	2306      	movs	r3, #6
 8014504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014508:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801450c:	2b00      	cmp	r3, #0
 801450e:	d108      	bne.n	8014522 <f_unlink+0x76>
 8014510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014514:	2102      	movs	r1, #2
 8014516:	4618      	mov	r0, r3
 8014518:	f7fd fa82 	bl	8011a20 <chk_lock>
 801451c:	4603      	mov	r3, r0
 801451e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014522:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014526:	2b00      	cmp	r3, #0
 8014528:	d17b      	bne.n	8014622 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801452a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801452e:	b25b      	sxtb	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	da03      	bge.n	801453c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014534:	2306      	movs	r3, #6
 8014536:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801453a:	e008      	b.n	801454e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801453c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014540:	f003 0301 	and.w	r3, r3, #1
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014548:	2307      	movs	r3, #7
 801454a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801454e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014552:	2b00      	cmp	r3, #0
 8014554:	d13d      	bne.n	80145d2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801455a:	4611      	mov	r1, r2
 801455c:	4618      	mov	r0, r3
 801455e:	f7fe f98e 	bl	801287e <ld_clust>
 8014562:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014564:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014568:	f003 0310 	and.w	r3, r3, #16
 801456c:	2b00      	cmp	r3, #0
 801456e:	d030      	beq.n	80145d2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	699b      	ldr	r3, [r3, #24]
 8014574:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014576:	429a      	cmp	r2, r3
 8014578:	d103      	bne.n	8014582 <f_unlink+0xd6>
						res = FR_DENIED;
 801457a:	2307      	movs	r3, #7
 801457c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014580:	e027      	b.n	80145d2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014588:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801458a:	f107 0310 	add.w	r3, r7, #16
 801458e:	2100      	movs	r1, #0
 8014590:	4618      	mov	r0, r3
 8014592:	f7fd ffce 	bl	8012532 <dir_sdi>
 8014596:	4603      	mov	r3, r0
 8014598:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801459c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d116      	bne.n	80145d2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80145a4:	f107 0310 	add.w	r3, r7, #16
 80145a8:	2100      	movs	r1, #0
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7fe f9a6 	bl	80128fc <dir_read>
 80145b0:	4603      	mov	r3, r0
 80145b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80145b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d102      	bne.n	80145c4 <f_unlink+0x118>
 80145be:	2307      	movs	r3, #7
 80145c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80145c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145c8:	2b04      	cmp	r3, #4
 80145ca:	d102      	bne.n	80145d2 <f_unlink+0x126>
 80145cc:	2300      	movs	r3, #0
 80145ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80145d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d123      	bne.n	8014622 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80145da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fe fa70 	bl	8012ac4 <dir_remove>
 80145e4:	4603      	mov	r3, r0
 80145e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80145ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d10c      	bne.n	801460c <f_unlink+0x160>
 80145f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d009      	beq.n	801460c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80145f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80145fc:	2200      	movs	r2, #0
 80145fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014600:	4618      	mov	r0, r3
 8014602:	f7fd fe61 	bl	80122c8 <remove_chain>
 8014606:	4603      	mov	r3, r0
 8014608:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801460c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014610:	2b00      	cmp	r3, #0
 8014612:	d106      	bne.n	8014622 <f_unlink+0x176>
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	4618      	mov	r0, r3
 8014618:	f7fd fbe0 	bl	8011ddc <sync_fs>
 801461c:	4603      	mov	r3, r0
 801461e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014622:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014626:	4618      	mov	r0, r3
 8014628:	3778      	adds	r7, #120	; 0x78
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
	...

08014630 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b096      	sub	sp, #88	; 0x58
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014638:	f107 0108 	add.w	r1, r7, #8
 801463c:	1d3b      	adds	r3, r7, #4
 801463e:	2202      	movs	r2, #2
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fc57 	bl	8012ef4 <find_volume>
 8014646:	4603      	mov	r3, r0
 8014648:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014654:	2b00      	cmp	r3, #0
 8014656:	f040 80fe 	bne.w	8014856 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	f107 030c 	add.w	r3, r7, #12
 8014660:	4611      	mov	r1, r2
 8014662:	4618      	mov	r0, r3
 8014664:	f7fe fb16 	bl	8012c94 <follow_path>
 8014668:	4603      	mov	r3, r0
 801466a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801466e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014672:	2b00      	cmp	r3, #0
 8014674:	d102      	bne.n	801467c <f_mkdir+0x4c>
 8014676:	2308      	movs	r3, #8
 8014678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801467c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014680:	2b04      	cmp	r3, #4
 8014682:	d108      	bne.n	8014696 <f_mkdir+0x66>
 8014684:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014688:	f003 0320 	and.w	r3, r3, #32
 801468c:	2b00      	cmp	r3, #0
 801468e:	d002      	beq.n	8014696 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014690:	2306      	movs	r3, #6
 8014692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014696:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801469a:	2b04      	cmp	r3, #4
 801469c:	f040 80db 	bne.w	8014856 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80146a0:	f107 030c 	add.w	r3, r7, #12
 80146a4:	2100      	movs	r1, #0
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7fd fe73 	bl	8012392 <create_chain>
 80146ac:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	895b      	ldrh	r3, [r3, #10]
 80146b2:	461a      	mov	r2, r3
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	899b      	ldrh	r3, [r3, #12]
 80146b8:	fb03 f302 	mul.w	r3, r3, r2
 80146bc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80146be:	2300      	movs	r3, #0
 80146c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80146c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d102      	bne.n	80146d0 <f_mkdir+0xa0>
 80146ca:	2307      	movs	r3, #7
 80146cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80146d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146d2:	2b01      	cmp	r3, #1
 80146d4:	d102      	bne.n	80146dc <f_mkdir+0xac>
 80146d6:	2302      	movs	r3, #2
 80146d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80146dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146e2:	d102      	bne.n	80146ea <f_mkdir+0xba>
 80146e4:	2301      	movs	r3, #1
 80146e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80146ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <f_mkdir+0xd0>
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fd faff 	bl	8011cf8 <sync_window>
 80146fa:	4603      	mov	r3, r0
 80146fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014700:	4b58      	ldr	r3, [pc, #352]	; (8014864 <f_mkdir+0x234>)
 8014702:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014708:	2b00      	cmp	r3, #0
 801470a:	d16c      	bne.n	80147e6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014710:	4618      	mov	r0, r3
 8014712:	f7fd fbd3 	bl	8011ebc <clust2sect>
 8014716:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	3338      	adds	r3, #56	; 0x38
 801471c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	899b      	ldrh	r3, [r3, #12]
 8014722:	461a      	mov	r2, r3
 8014724:	2100      	movs	r1, #0
 8014726:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014728:	f7fd f91d 	bl	8011966 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801472c:	220b      	movs	r2, #11
 801472e:	2120      	movs	r1, #32
 8014730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014732:	f7fd f918 	bl	8011966 <mem_set>
					dir[DIR_Name] = '.';
 8014736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014738:	222e      	movs	r2, #46	; 0x2e
 801473a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801473c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801473e:	330b      	adds	r3, #11
 8014740:	2210      	movs	r2, #16
 8014742:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014746:	3316      	adds	r3, #22
 8014748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801474a:	4618      	mov	r0, r3
 801474c:	f7fd f8be 	bl	80118cc <st_dword>
					st_clust(fs, dir, dcl);
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014756:	4618      	mov	r0, r3
 8014758:	f7fe f8b0 	bl	80128bc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801475c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801475e:	3320      	adds	r3, #32
 8014760:	2220      	movs	r2, #32
 8014762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014764:	4618      	mov	r0, r3
 8014766:	f7fd f8dd 	bl	8011924 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801476a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801476c:	3321      	adds	r3, #33	; 0x21
 801476e:	222e      	movs	r2, #46	; 0x2e
 8014770:	701a      	strb	r2, [r3, #0]
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	2b03      	cmp	r3, #3
 801477c:	d106      	bne.n	801478c <f_mkdir+0x15c>
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014784:	429a      	cmp	r2, r3
 8014786:	d101      	bne.n	801478c <f_mkdir+0x15c>
 8014788:	2300      	movs	r3, #0
 801478a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801478c:	68b8      	ldr	r0, [r7, #8]
 801478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014790:	3320      	adds	r3, #32
 8014792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014794:	4619      	mov	r1, r3
 8014796:	f7fe f891 	bl	80128bc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	895b      	ldrh	r3, [r3, #10]
 801479e:	653b      	str	r3, [r7, #80]	; 0x50
 80147a0:	e01c      	b.n	80147dc <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80147a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147a4:	1c5a      	adds	r2, r3, #1
 80147a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	2201      	movs	r2, #1
 80147b0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fd fa9f 	bl	8011cf8 <sync_window>
 80147ba:	4603      	mov	r3, r0
 80147bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80147c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d10d      	bne.n	80147e4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	899b      	ldrh	r3, [r3, #12]
 80147cc:	461a      	mov	r2, r3
 80147ce:	2100      	movs	r1, #0
 80147d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80147d2:	f7fd f8c8 	bl	8011966 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80147d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147d8:	3b01      	subs	r3, #1
 80147da:	653b      	str	r3, [r7, #80]	; 0x50
 80147dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d1df      	bne.n	80147a2 <f_mkdir+0x172>
 80147e2:	e000      	b.n	80147e6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80147e4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80147e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d107      	bne.n	80147fe <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80147ee:	f107 030c 	add.w	r3, r7, #12
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7fe f934 	bl	8012a60 <dir_register>
 80147f8:	4603      	mov	r3, r0
 80147fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80147fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014802:	2b00      	cmp	r3, #0
 8014804:	d120      	bne.n	8014848 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014808:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801480a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801480c:	3316      	adds	r3, #22
 801480e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014810:	4618      	mov	r0, r3
 8014812:	f7fd f85b 	bl	80118cc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801481a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801481c:	4618      	mov	r0, r3
 801481e:	f7fe f84d 	bl	80128bc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014824:	330b      	adds	r3, #11
 8014826:	2210      	movs	r2, #16
 8014828:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	2201      	movs	r2, #1
 801482e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014834:	2b00      	cmp	r3, #0
 8014836:	d10e      	bne.n	8014856 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	4618      	mov	r0, r3
 801483c:	f7fd face 	bl	8011ddc <sync_fs>
 8014840:	4603      	mov	r3, r0
 8014842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014846:	e006      	b.n	8014856 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014848:	f107 030c 	add.w	r3, r7, #12
 801484c:	2200      	movs	r2, #0
 801484e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014850:	4618      	mov	r0, r3
 8014852:	f7fd fd39 	bl	80122c8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014856:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801485a:	4618      	mov	r0, r3
 801485c:	3758      	adds	r7, #88	; 0x58
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	274a0000 	.word	0x274a0000

08014868 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b088      	sub	sp, #32
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014874:	2300      	movs	r3, #0
 8014876:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801487c:	e017      	b.n	80148ae <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801487e:	f107 0310 	add.w	r3, r7, #16
 8014882:	f107 0114 	add.w	r1, r7, #20
 8014886:	2201      	movs	r2, #1
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7ff f803 	bl	8013894 <f_read>
		if (rc != 1) break;
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d112      	bne.n	80148ba <f_gets+0x52>
		c = s[0];
 8014894:	7d3b      	ldrb	r3, [r7, #20]
 8014896:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	1c5a      	adds	r2, r3, #1
 801489c:	61ba      	str	r2, [r7, #24]
 801489e:	7dfa      	ldrb	r2, [r7, #23]
 80148a0:	701a      	strb	r2, [r3, #0]
		n++;
 80148a2:	69fb      	ldr	r3, [r7, #28]
 80148a4:	3301      	adds	r3, #1
 80148a6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80148a8:	7dfb      	ldrb	r3, [r7, #23]
 80148aa:	2b0a      	cmp	r3, #10
 80148ac:	d007      	beq.n	80148be <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	3b01      	subs	r3, #1
 80148b2:	69fa      	ldr	r2, [r7, #28]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	dbe2      	blt.n	801487e <f_gets+0x16>
 80148b8:	e002      	b.n	80148c0 <f_gets+0x58>
		if (rc != 1) break;
 80148ba:	bf00      	nop
 80148bc:	e000      	b.n	80148c0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80148be:	bf00      	nop
	}
	*p = 0;
 80148c0:	69bb      	ldr	r3, [r7, #24]
 80148c2:	2200      	movs	r2, #0
 80148c4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d001      	beq.n	80148d0 <f_gets+0x68>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	e000      	b.n	80148d2 <f_gets+0x6a>
 80148d0:	2300      	movs	r3, #0
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3720      	adds	r7, #32
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
	...

080148dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80148dc:	b480      	push	{r7}
 80148de:	b087      	sub	sp, #28
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	4613      	mov	r3, r2
 80148e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80148ea:	2301      	movs	r3, #1
 80148ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80148ee:	2300      	movs	r3, #0
 80148f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80148f2:	4b1f      	ldr	r3, [pc, #124]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 80148f4:	7a5b      	ldrb	r3, [r3, #9]
 80148f6:	b2db      	uxtb	r3, r3
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d131      	bne.n	8014960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80148fc:	4b1c      	ldr	r3, [pc, #112]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 80148fe:	7a5b      	ldrb	r3, [r3, #9]
 8014900:	b2db      	uxtb	r3, r3
 8014902:	461a      	mov	r2, r3
 8014904:	4b1a      	ldr	r3, [pc, #104]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 8014906:	2100      	movs	r1, #0
 8014908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801490a:	4b19      	ldr	r3, [pc, #100]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 801490c:	7a5b      	ldrb	r3, [r3, #9]
 801490e:	b2db      	uxtb	r3, r3
 8014910:	4a17      	ldr	r2, [pc, #92]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	4413      	add	r3, r2
 8014916:	68fa      	ldr	r2, [r7, #12]
 8014918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801491a:	4b15      	ldr	r3, [pc, #84]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 801491c:	7a5b      	ldrb	r3, [r3, #9]
 801491e:	b2db      	uxtb	r3, r3
 8014920:	461a      	mov	r2, r3
 8014922:	4b13      	ldr	r3, [pc, #76]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 8014924:	4413      	add	r3, r2
 8014926:	79fa      	ldrb	r2, [r7, #7]
 8014928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801492a:	4b11      	ldr	r3, [pc, #68]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 801492c:	7a5b      	ldrb	r3, [r3, #9]
 801492e:	b2db      	uxtb	r3, r3
 8014930:	1c5a      	adds	r2, r3, #1
 8014932:	b2d1      	uxtb	r1, r2
 8014934:	4a0e      	ldr	r2, [pc, #56]	; (8014970 <FATFS_LinkDriverEx+0x94>)
 8014936:	7251      	strb	r1, [r2, #9]
 8014938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801493a:	7dbb      	ldrb	r3, [r7, #22]
 801493c:	3330      	adds	r3, #48	; 0x30
 801493e:	b2da      	uxtb	r2, r3
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	3301      	adds	r3, #1
 8014948:	223a      	movs	r2, #58	; 0x3a
 801494a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	3302      	adds	r3, #2
 8014950:	222f      	movs	r2, #47	; 0x2f
 8014952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	3303      	adds	r3, #3
 8014958:	2200      	movs	r2, #0
 801495a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801495c:	2300      	movs	r3, #0
 801495e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014960:	7dfb      	ldrb	r3, [r7, #23]
}
 8014962:	4618      	mov	r0, r3
 8014964:	371c      	adds	r7, #28
 8014966:	46bd      	mov	sp, r7
 8014968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop
 8014970:	2004248c 	.word	0x2004248c

08014974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801497e:	2200      	movs	r2, #0
 8014980:	6839      	ldr	r1, [r7, #0]
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f7ff ffaa 	bl	80148dc <FATFS_LinkDriverEx>
 8014988:	4603      	mov	r3, r0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <__cxa_guard_acquire>:
 8014992:	6803      	ldr	r3, [r0, #0]
 8014994:	07db      	lsls	r3, r3, #31
 8014996:	d406      	bmi.n	80149a6 <__cxa_guard_acquire+0x14>
 8014998:	7843      	ldrb	r3, [r0, #1]
 801499a:	b103      	cbz	r3, 801499e <__cxa_guard_acquire+0xc>
 801499c:	deff      	udf	#255	; 0xff
 801499e:	2301      	movs	r3, #1
 80149a0:	7043      	strb	r3, [r0, #1]
 80149a2:	4618      	mov	r0, r3
 80149a4:	4770      	bx	lr
 80149a6:	2000      	movs	r0, #0
 80149a8:	4770      	bx	lr

080149aa <__cxa_guard_release>:
 80149aa:	2301      	movs	r3, #1
 80149ac:	6003      	str	r3, [r0, #0]
 80149ae:	4770      	bx	lr

080149b0 <cos>:
 80149b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149b2:	ec51 0b10 	vmov	r0, r1, d0
 80149b6:	4a1e      	ldr	r2, [pc, #120]	; (8014a30 <cos+0x80>)
 80149b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80149bc:	4293      	cmp	r3, r2
 80149be:	dc06      	bgt.n	80149ce <cos+0x1e>
 80149c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014a28 <cos+0x78>
 80149c4:	f000 fa74 	bl	8014eb0 <__kernel_cos>
 80149c8:	ec51 0b10 	vmov	r0, r1, d0
 80149cc:	e007      	b.n	80149de <cos+0x2e>
 80149ce:	4a19      	ldr	r2, [pc, #100]	; (8014a34 <cos+0x84>)
 80149d0:	4293      	cmp	r3, r2
 80149d2:	dd09      	ble.n	80149e8 <cos+0x38>
 80149d4:	ee10 2a10 	vmov	r2, s0
 80149d8:	460b      	mov	r3, r1
 80149da:	f7eb fc6d 	bl	80002b8 <__aeabi_dsub>
 80149de:	ec41 0b10 	vmov	d0, r0, r1
 80149e2:	b005      	add	sp, #20
 80149e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80149e8:	4668      	mov	r0, sp
 80149ea:	f000 f86d 	bl	8014ac8 <__ieee754_rem_pio2>
 80149ee:	f000 0003 	and.w	r0, r0, #3
 80149f2:	2801      	cmp	r0, #1
 80149f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149f8:	ed9d 0b00 	vldr	d0, [sp]
 80149fc:	d007      	beq.n	8014a0e <cos+0x5e>
 80149fe:	2802      	cmp	r0, #2
 8014a00:	d00e      	beq.n	8014a20 <cos+0x70>
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d0de      	beq.n	80149c4 <cos+0x14>
 8014a06:	2001      	movs	r0, #1
 8014a08:	f000 fe5a 	bl	80156c0 <__kernel_sin>
 8014a0c:	e7dc      	b.n	80149c8 <cos+0x18>
 8014a0e:	f000 fe57 	bl	80156c0 <__kernel_sin>
 8014a12:	ec53 2b10 	vmov	r2, r3, d0
 8014a16:	ee10 0a10 	vmov	r0, s0
 8014a1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014a1e:	e7de      	b.n	80149de <cos+0x2e>
 8014a20:	f000 fa46 	bl	8014eb0 <__kernel_cos>
 8014a24:	e7f5      	b.n	8014a12 <cos+0x62>
 8014a26:	bf00      	nop
	...
 8014a30:	3fe921fb 	.word	0x3fe921fb
 8014a34:	7fefffff 	.word	0x7fefffff

08014a38 <sin>:
 8014a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a3a:	ec51 0b10 	vmov	r0, r1, d0
 8014a3e:	4a20      	ldr	r2, [pc, #128]	; (8014ac0 <sin+0x88>)
 8014a40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a44:	4293      	cmp	r3, r2
 8014a46:	dc07      	bgt.n	8014a58 <sin+0x20>
 8014a48:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014ab8 <sin+0x80>
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	f000 fe37 	bl	80156c0 <__kernel_sin>
 8014a52:	ec51 0b10 	vmov	r0, r1, d0
 8014a56:	e007      	b.n	8014a68 <sin+0x30>
 8014a58:	4a1a      	ldr	r2, [pc, #104]	; (8014ac4 <sin+0x8c>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	dd09      	ble.n	8014a72 <sin+0x3a>
 8014a5e:	ee10 2a10 	vmov	r2, s0
 8014a62:	460b      	mov	r3, r1
 8014a64:	f7eb fc28 	bl	80002b8 <__aeabi_dsub>
 8014a68:	ec41 0b10 	vmov	d0, r0, r1
 8014a6c:	b005      	add	sp, #20
 8014a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a72:	4668      	mov	r0, sp
 8014a74:	f000 f828 	bl	8014ac8 <__ieee754_rem_pio2>
 8014a78:	f000 0003 	and.w	r0, r0, #3
 8014a7c:	2801      	cmp	r0, #1
 8014a7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014a82:	ed9d 0b00 	vldr	d0, [sp]
 8014a86:	d004      	beq.n	8014a92 <sin+0x5a>
 8014a88:	2802      	cmp	r0, #2
 8014a8a:	d005      	beq.n	8014a98 <sin+0x60>
 8014a8c:	b970      	cbnz	r0, 8014aac <sin+0x74>
 8014a8e:	2001      	movs	r0, #1
 8014a90:	e7dd      	b.n	8014a4e <sin+0x16>
 8014a92:	f000 fa0d 	bl	8014eb0 <__kernel_cos>
 8014a96:	e7dc      	b.n	8014a52 <sin+0x1a>
 8014a98:	2001      	movs	r0, #1
 8014a9a:	f000 fe11 	bl	80156c0 <__kernel_sin>
 8014a9e:	ec53 2b10 	vmov	r2, r3, d0
 8014aa2:	ee10 0a10 	vmov	r0, s0
 8014aa6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014aaa:	e7dd      	b.n	8014a68 <sin+0x30>
 8014aac:	f000 fa00 	bl	8014eb0 <__kernel_cos>
 8014ab0:	e7f5      	b.n	8014a9e <sin+0x66>
 8014ab2:	bf00      	nop
 8014ab4:	f3af 8000 	nop.w
	...
 8014ac0:	3fe921fb 	.word	0x3fe921fb
 8014ac4:	7fefffff 	.word	0x7fefffff

08014ac8 <__ieee754_rem_pio2>:
 8014ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014acc:	ec57 6b10 	vmov	r6, r7, d0
 8014ad0:	4bc3      	ldr	r3, [pc, #780]	; (8014de0 <__ieee754_rem_pio2+0x318>)
 8014ad2:	b08d      	sub	sp, #52	; 0x34
 8014ad4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014ad8:	4598      	cmp	r8, r3
 8014ada:	4604      	mov	r4, r0
 8014adc:	9704      	str	r7, [sp, #16]
 8014ade:	dc07      	bgt.n	8014af0 <__ieee754_rem_pio2+0x28>
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	ed84 0b00 	vstr	d0, [r4]
 8014ae8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014aec:	2500      	movs	r5, #0
 8014aee:	e027      	b.n	8014b40 <__ieee754_rem_pio2+0x78>
 8014af0:	4bbc      	ldr	r3, [pc, #752]	; (8014de4 <__ieee754_rem_pio2+0x31c>)
 8014af2:	4598      	cmp	r8, r3
 8014af4:	dc75      	bgt.n	8014be2 <__ieee754_rem_pio2+0x11a>
 8014af6:	9b04      	ldr	r3, [sp, #16]
 8014af8:	4dbb      	ldr	r5, [pc, #748]	; (8014de8 <__ieee754_rem_pio2+0x320>)
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	ee10 0a10 	vmov	r0, s0
 8014b00:	a3a9      	add	r3, pc, #676	; (adr r3, 8014da8 <__ieee754_rem_pio2+0x2e0>)
 8014b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b06:	4639      	mov	r1, r7
 8014b08:	dd36      	ble.n	8014b78 <__ieee754_rem_pio2+0xb0>
 8014b0a:	f7eb fbd5 	bl	80002b8 <__aeabi_dsub>
 8014b0e:	45a8      	cmp	r8, r5
 8014b10:	4606      	mov	r6, r0
 8014b12:	460f      	mov	r7, r1
 8014b14:	d018      	beq.n	8014b48 <__ieee754_rem_pio2+0x80>
 8014b16:	a3a6      	add	r3, pc, #664	; (adr r3, 8014db0 <__ieee754_rem_pio2+0x2e8>)
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	f7eb fbcc 	bl	80002b8 <__aeabi_dsub>
 8014b20:	4602      	mov	r2, r0
 8014b22:	460b      	mov	r3, r1
 8014b24:	e9c4 2300 	strd	r2, r3, [r4]
 8014b28:	4630      	mov	r0, r6
 8014b2a:	4639      	mov	r1, r7
 8014b2c:	f7eb fbc4 	bl	80002b8 <__aeabi_dsub>
 8014b30:	a39f      	add	r3, pc, #636	; (adr r3, 8014db0 <__ieee754_rem_pio2+0x2e8>)
 8014b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b36:	f7eb fbbf 	bl	80002b8 <__aeabi_dsub>
 8014b3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b3e:	2501      	movs	r5, #1
 8014b40:	4628      	mov	r0, r5
 8014b42:	b00d      	add	sp, #52	; 0x34
 8014b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b48:	a39b      	add	r3, pc, #620	; (adr r3, 8014db8 <__ieee754_rem_pio2+0x2f0>)
 8014b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4e:	f7eb fbb3 	bl	80002b8 <__aeabi_dsub>
 8014b52:	a39b      	add	r3, pc, #620	; (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2f8>)
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	4606      	mov	r6, r0
 8014b5a:	460f      	mov	r7, r1
 8014b5c:	f7eb fbac 	bl	80002b8 <__aeabi_dsub>
 8014b60:	4602      	mov	r2, r0
 8014b62:	460b      	mov	r3, r1
 8014b64:	e9c4 2300 	strd	r2, r3, [r4]
 8014b68:	4630      	mov	r0, r6
 8014b6a:	4639      	mov	r1, r7
 8014b6c:	f7eb fba4 	bl	80002b8 <__aeabi_dsub>
 8014b70:	a393      	add	r3, pc, #588	; (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2f8>)
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	e7de      	b.n	8014b36 <__ieee754_rem_pio2+0x6e>
 8014b78:	f7eb fba0 	bl	80002bc <__adddf3>
 8014b7c:	45a8      	cmp	r8, r5
 8014b7e:	4606      	mov	r6, r0
 8014b80:	460f      	mov	r7, r1
 8014b82:	d016      	beq.n	8014bb2 <__ieee754_rem_pio2+0xea>
 8014b84:	a38a      	add	r3, pc, #552	; (adr r3, 8014db0 <__ieee754_rem_pio2+0x2e8>)
 8014b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b8a:	f7eb fb97 	bl	80002bc <__adddf3>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	460b      	mov	r3, r1
 8014b92:	e9c4 2300 	strd	r2, r3, [r4]
 8014b96:	4630      	mov	r0, r6
 8014b98:	4639      	mov	r1, r7
 8014b9a:	f7eb fb8d 	bl	80002b8 <__aeabi_dsub>
 8014b9e:	a384      	add	r3, pc, #528	; (adr r3, 8014db0 <__ieee754_rem_pio2+0x2e8>)
 8014ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba4:	f7eb fb8a 	bl	80002bc <__adddf3>
 8014ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8014bac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014bb0:	e7c6      	b.n	8014b40 <__ieee754_rem_pio2+0x78>
 8014bb2:	a381      	add	r3, pc, #516	; (adr r3, 8014db8 <__ieee754_rem_pio2+0x2f0>)
 8014bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb8:	f7eb fb80 	bl	80002bc <__adddf3>
 8014bbc:	a380      	add	r3, pc, #512	; (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2f8>)
 8014bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc2:	4606      	mov	r6, r0
 8014bc4:	460f      	mov	r7, r1
 8014bc6:	f7eb fb79 	bl	80002bc <__adddf3>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	460b      	mov	r3, r1
 8014bce:	e9c4 2300 	strd	r2, r3, [r4]
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	f7eb fb6f 	bl	80002b8 <__aeabi_dsub>
 8014bda:	a379      	add	r3, pc, #484	; (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2f8>)
 8014bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be0:	e7e0      	b.n	8014ba4 <__ieee754_rem_pio2+0xdc>
 8014be2:	4b82      	ldr	r3, [pc, #520]	; (8014dec <__ieee754_rem_pio2+0x324>)
 8014be4:	4598      	cmp	r8, r3
 8014be6:	f300 80d0 	bgt.w	8014d8a <__ieee754_rem_pio2+0x2c2>
 8014bea:	f000 fe23 	bl	8015834 <fabs>
 8014bee:	ec57 6b10 	vmov	r6, r7, d0
 8014bf2:	ee10 0a10 	vmov	r0, s0
 8014bf6:	a374      	add	r3, pc, #464	; (adr r3, 8014dc8 <__ieee754_rem_pio2+0x300>)
 8014bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bfc:	4639      	mov	r1, r7
 8014bfe:	f7eb fd13 	bl	8000628 <__aeabi_dmul>
 8014c02:	2200      	movs	r2, #0
 8014c04:	4b7a      	ldr	r3, [pc, #488]	; (8014df0 <__ieee754_rem_pio2+0x328>)
 8014c06:	f7eb fb59 	bl	80002bc <__adddf3>
 8014c0a:	f7eb ffbd 	bl	8000b88 <__aeabi_d2iz>
 8014c0e:	4605      	mov	r5, r0
 8014c10:	f7eb fca0 	bl	8000554 <__aeabi_i2d>
 8014c14:	a364      	add	r3, pc, #400	; (adr r3, 8014da8 <__ieee754_rem_pio2+0x2e0>)
 8014c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c1e:	f7eb fd03 	bl	8000628 <__aeabi_dmul>
 8014c22:	4602      	mov	r2, r0
 8014c24:	460b      	mov	r3, r1
 8014c26:	4630      	mov	r0, r6
 8014c28:	4639      	mov	r1, r7
 8014c2a:	f7eb fb45 	bl	80002b8 <__aeabi_dsub>
 8014c2e:	a360      	add	r3, pc, #384	; (adr r3, 8014db0 <__ieee754_rem_pio2+0x2e8>)
 8014c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c34:	4682      	mov	sl, r0
 8014c36:	468b      	mov	fp, r1
 8014c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c3c:	f7eb fcf4 	bl	8000628 <__aeabi_dmul>
 8014c40:	2d1f      	cmp	r5, #31
 8014c42:	4606      	mov	r6, r0
 8014c44:	460f      	mov	r7, r1
 8014c46:	dc0c      	bgt.n	8014c62 <__ieee754_rem_pio2+0x19a>
 8014c48:	1e6a      	subs	r2, r5, #1
 8014c4a:	4b6a      	ldr	r3, [pc, #424]	; (8014df4 <__ieee754_rem_pio2+0x32c>)
 8014c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c50:	4543      	cmp	r3, r8
 8014c52:	d006      	beq.n	8014c62 <__ieee754_rem_pio2+0x19a>
 8014c54:	4632      	mov	r2, r6
 8014c56:	463b      	mov	r3, r7
 8014c58:	4650      	mov	r0, sl
 8014c5a:	4659      	mov	r1, fp
 8014c5c:	f7eb fb2c 	bl	80002b8 <__aeabi_dsub>
 8014c60:	e00e      	b.n	8014c80 <__ieee754_rem_pio2+0x1b8>
 8014c62:	4632      	mov	r2, r6
 8014c64:	463b      	mov	r3, r7
 8014c66:	4650      	mov	r0, sl
 8014c68:	4659      	mov	r1, fp
 8014c6a:	f7eb fb25 	bl	80002b8 <__aeabi_dsub>
 8014c6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014c72:	9305      	str	r3, [sp, #20]
 8014c74:	9a05      	ldr	r2, [sp, #20]
 8014c76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c7a:	1ad3      	subs	r3, r2, r3
 8014c7c:	2b10      	cmp	r3, #16
 8014c7e:	dc02      	bgt.n	8014c86 <__ieee754_rem_pio2+0x1be>
 8014c80:	e9c4 0100 	strd	r0, r1, [r4]
 8014c84:	e039      	b.n	8014cfa <__ieee754_rem_pio2+0x232>
 8014c86:	a34c      	add	r3, pc, #304	; (adr r3, 8014db8 <__ieee754_rem_pio2+0x2f0>)
 8014c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c90:	f7eb fcca 	bl	8000628 <__aeabi_dmul>
 8014c94:	4606      	mov	r6, r0
 8014c96:	460f      	mov	r7, r1
 8014c98:	4602      	mov	r2, r0
 8014c9a:	460b      	mov	r3, r1
 8014c9c:	4650      	mov	r0, sl
 8014c9e:	4659      	mov	r1, fp
 8014ca0:	f7eb fb0a 	bl	80002b8 <__aeabi_dsub>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	460b      	mov	r3, r1
 8014ca8:	4680      	mov	r8, r0
 8014caa:	4689      	mov	r9, r1
 8014cac:	4650      	mov	r0, sl
 8014cae:	4659      	mov	r1, fp
 8014cb0:	f7eb fb02 	bl	80002b8 <__aeabi_dsub>
 8014cb4:	4632      	mov	r2, r6
 8014cb6:	463b      	mov	r3, r7
 8014cb8:	f7eb fafe 	bl	80002b8 <__aeabi_dsub>
 8014cbc:	a340      	add	r3, pc, #256	; (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2f8>)
 8014cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc2:	4606      	mov	r6, r0
 8014cc4:	460f      	mov	r7, r1
 8014cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cca:	f7eb fcad 	bl	8000628 <__aeabi_dmul>
 8014cce:	4632      	mov	r2, r6
 8014cd0:	463b      	mov	r3, r7
 8014cd2:	f7eb faf1 	bl	80002b8 <__aeabi_dsub>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	4606      	mov	r6, r0
 8014cdc:	460f      	mov	r7, r1
 8014cde:	4640      	mov	r0, r8
 8014ce0:	4649      	mov	r1, r9
 8014ce2:	f7eb fae9 	bl	80002b8 <__aeabi_dsub>
 8014ce6:	9a05      	ldr	r2, [sp, #20]
 8014ce8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	2b31      	cmp	r3, #49	; 0x31
 8014cf0:	dc20      	bgt.n	8014d34 <__ieee754_rem_pio2+0x26c>
 8014cf2:	e9c4 0100 	strd	r0, r1, [r4]
 8014cf6:	46c2      	mov	sl, r8
 8014cf8:	46cb      	mov	fp, r9
 8014cfa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014cfe:	4650      	mov	r0, sl
 8014d00:	4642      	mov	r2, r8
 8014d02:	464b      	mov	r3, r9
 8014d04:	4659      	mov	r1, fp
 8014d06:	f7eb fad7 	bl	80002b8 <__aeabi_dsub>
 8014d0a:	463b      	mov	r3, r7
 8014d0c:	4632      	mov	r2, r6
 8014d0e:	f7eb fad3 	bl	80002b8 <__aeabi_dsub>
 8014d12:	9b04      	ldr	r3, [sp, #16]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014d1a:	f6bf af11 	bge.w	8014b40 <__ieee754_rem_pio2+0x78>
 8014d1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014d22:	6063      	str	r3, [r4, #4]
 8014d24:	f8c4 8000 	str.w	r8, [r4]
 8014d28:	60a0      	str	r0, [r4, #8]
 8014d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d2e:	60e3      	str	r3, [r4, #12]
 8014d30:	426d      	negs	r5, r5
 8014d32:	e705      	b.n	8014b40 <__ieee754_rem_pio2+0x78>
 8014d34:	a326      	add	r3, pc, #152	; (adr r3, 8014dd0 <__ieee754_rem_pio2+0x308>)
 8014d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d3e:	f7eb fc73 	bl	8000628 <__aeabi_dmul>
 8014d42:	4606      	mov	r6, r0
 8014d44:	460f      	mov	r7, r1
 8014d46:	4602      	mov	r2, r0
 8014d48:	460b      	mov	r3, r1
 8014d4a:	4640      	mov	r0, r8
 8014d4c:	4649      	mov	r1, r9
 8014d4e:	f7eb fab3 	bl	80002b8 <__aeabi_dsub>
 8014d52:	4602      	mov	r2, r0
 8014d54:	460b      	mov	r3, r1
 8014d56:	4682      	mov	sl, r0
 8014d58:	468b      	mov	fp, r1
 8014d5a:	4640      	mov	r0, r8
 8014d5c:	4649      	mov	r1, r9
 8014d5e:	f7eb faab 	bl	80002b8 <__aeabi_dsub>
 8014d62:	4632      	mov	r2, r6
 8014d64:	463b      	mov	r3, r7
 8014d66:	f7eb faa7 	bl	80002b8 <__aeabi_dsub>
 8014d6a:	a31b      	add	r3, pc, #108	; (adr r3, 8014dd8 <__ieee754_rem_pio2+0x310>)
 8014d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d70:	4606      	mov	r6, r0
 8014d72:	460f      	mov	r7, r1
 8014d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d78:	f7eb fc56 	bl	8000628 <__aeabi_dmul>
 8014d7c:	4632      	mov	r2, r6
 8014d7e:	463b      	mov	r3, r7
 8014d80:	f7eb fa9a 	bl	80002b8 <__aeabi_dsub>
 8014d84:	4606      	mov	r6, r0
 8014d86:	460f      	mov	r7, r1
 8014d88:	e764      	b.n	8014c54 <__ieee754_rem_pio2+0x18c>
 8014d8a:	4b1b      	ldr	r3, [pc, #108]	; (8014df8 <__ieee754_rem_pio2+0x330>)
 8014d8c:	4598      	cmp	r8, r3
 8014d8e:	dd35      	ble.n	8014dfc <__ieee754_rem_pio2+0x334>
 8014d90:	ee10 2a10 	vmov	r2, s0
 8014d94:	463b      	mov	r3, r7
 8014d96:	4630      	mov	r0, r6
 8014d98:	4639      	mov	r1, r7
 8014d9a:	f7eb fa8d 	bl	80002b8 <__aeabi_dsub>
 8014d9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014da2:	e9c4 0100 	strd	r0, r1, [r4]
 8014da6:	e6a1      	b.n	8014aec <__ieee754_rem_pio2+0x24>
 8014da8:	54400000 	.word	0x54400000
 8014dac:	3ff921fb 	.word	0x3ff921fb
 8014db0:	1a626331 	.word	0x1a626331
 8014db4:	3dd0b461 	.word	0x3dd0b461
 8014db8:	1a600000 	.word	0x1a600000
 8014dbc:	3dd0b461 	.word	0x3dd0b461
 8014dc0:	2e037073 	.word	0x2e037073
 8014dc4:	3ba3198a 	.word	0x3ba3198a
 8014dc8:	6dc9c883 	.word	0x6dc9c883
 8014dcc:	3fe45f30 	.word	0x3fe45f30
 8014dd0:	2e000000 	.word	0x2e000000
 8014dd4:	3ba3198a 	.word	0x3ba3198a
 8014dd8:	252049c1 	.word	0x252049c1
 8014ddc:	397b839a 	.word	0x397b839a
 8014de0:	3fe921fb 	.word	0x3fe921fb
 8014de4:	4002d97b 	.word	0x4002d97b
 8014de8:	3ff921fb 	.word	0x3ff921fb
 8014dec:	413921fb 	.word	0x413921fb
 8014df0:	3fe00000 	.word	0x3fe00000
 8014df4:	0801a36c 	.word	0x0801a36c
 8014df8:	7fefffff 	.word	0x7fefffff
 8014dfc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014e00:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014e04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014e08:	4630      	mov	r0, r6
 8014e0a:	460f      	mov	r7, r1
 8014e0c:	f7eb febc 	bl	8000b88 <__aeabi_d2iz>
 8014e10:	f7eb fba0 	bl	8000554 <__aeabi_i2d>
 8014e14:	4602      	mov	r2, r0
 8014e16:	460b      	mov	r3, r1
 8014e18:	4630      	mov	r0, r6
 8014e1a:	4639      	mov	r1, r7
 8014e1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014e20:	f7eb fa4a 	bl	80002b8 <__aeabi_dsub>
 8014e24:	2200      	movs	r2, #0
 8014e26:	4b1f      	ldr	r3, [pc, #124]	; (8014ea4 <__ieee754_rem_pio2+0x3dc>)
 8014e28:	f7eb fbfe 	bl	8000628 <__aeabi_dmul>
 8014e2c:	460f      	mov	r7, r1
 8014e2e:	4606      	mov	r6, r0
 8014e30:	f7eb feaa 	bl	8000b88 <__aeabi_d2iz>
 8014e34:	f7eb fb8e 	bl	8000554 <__aeabi_i2d>
 8014e38:	4602      	mov	r2, r0
 8014e3a:	460b      	mov	r3, r1
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	4639      	mov	r1, r7
 8014e40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e44:	f7eb fa38 	bl	80002b8 <__aeabi_dsub>
 8014e48:	2200      	movs	r2, #0
 8014e4a:	4b16      	ldr	r3, [pc, #88]	; (8014ea4 <__ieee754_rem_pio2+0x3dc>)
 8014e4c:	f7eb fbec 	bl	8000628 <__aeabi_dmul>
 8014e50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014e54:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014e58:	f04f 0803 	mov.w	r8, #3
 8014e5c:	2600      	movs	r6, #0
 8014e5e:	2700      	movs	r7, #0
 8014e60:	4632      	mov	r2, r6
 8014e62:	463b      	mov	r3, r7
 8014e64:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8014e6c:	f7eb fe44 	bl	8000af8 <__aeabi_dcmpeq>
 8014e70:	b9b0      	cbnz	r0, 8014ea0 <__ieee754_rem_pio2+0x3d8>
 8014e72:	4b0d      	ldr	r3, [pc, #52]	; (8014ea8 <__ieee754_rem_pio2+0x3e0>)
 8014e74:	9301      	str	r3, [sp, #4]
 8014e76:	2302      	movs	r3, #2
 8014e78:	9300      	str	r3, [sp, #0]
 8014e7a:	462a      	mov	r2, r5
 8014e7c:	4643      	mov	r3, r8
 8014e7e:	4621      	mov	r1, r4
 8014e80:	a806      	add	r0, sp, #24
 8014e82:	f000 f8dd 	bl	8015040 <__kernel_rem_pio2>
 8014e86:	9b04      	ldr	r3, [sp, #16]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	4605      	mov	r5, r0
 8014e8c:	f6bf ae58 	bge.w	8014b40 <__ieee754_rem_pio2+0x78>
 8014e90:	6863      	ldr	r3, [r4, #4]
 8014e92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014e96:	6063      	str	r3, [r4, #4]
 8014e98:	68e3      	ldr	r3, [r4, #12]
 8014e9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014e9e:	e746      	b.n	8014d2e <__ieee754_rem_pio2+0x266>
 8014ea0:	46d0      	mov	r8, sl
 8014ea2:	e7dd      	b.n	8014e60 <__ieee754_rem_pio2+0x398>
 8014ea4:	41700000 	.word	0x41700000
 8014ea8:	0801a3ec 	.word	0x0801a3ec
 8014eac:	00000000 	.word	0x00000000

08014eb0 <__kernel_cos>:
 8014eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb4:	ec59 8b10 	vmov	r8, r9, d0
 8014eb8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014ebc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014ec0:	ed2d 8b02 	vpush	{d8}
 8014ec4:	eeb0 8a41 	vmov.f32	s16, s2
 8014ec8:	eef0 8a61 	vmov.f32	s17, s3
 8014ecc:	da07      	bge.n	8014ede <__kernel_cos+0x2e>
 8014ece:	ee10 0a10 	vmov	r0, s0
 8014ed2:	4649      	mov	r1, r9
 8014ed4:	f7eb fe58 	bl	8000b88 <__aeabi_d2iz>
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	f000 8089 	beq.w	8014ff0 <__kernel_cos+0x140>
 8014ede:	4642      	mov	r2, r8
 8014ee0:	464b      	mov	r3, r9
 8014ee2:	4640      	mov	r0, r8
 8014ee4:	4649      	mov	r1, r9
 8014ee6:	f7eb fb9f 	bl	8000628 <__aeabi_dmul>
 8014eea:	2200      	movs	r2, #0
 8014eec:	4b4e      	ldr	r3, [pc, #312]	; (8015028 <__kernel_cos+0x178>)
 8014eee:	4604      	mov	r4, r0
 8014ef0:	460d      	mov	r5, r1
 8014ef2:	f7eb fb99 	bl	8000628 <__aeabi_dmul>
 8014ef6:	a340      	add	r3, pc, #256	; (adr r3, 8014ff8 <__kernel_cos+0x148>)
 8014ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efc:	4682      	mov	sl, r0
 8014efe:	468b      	mov	fp, r1
 8014f00:	4620      	mov	r0, r4
 8014f02:	4629      	mov	r1, r5
 8014f04:	f7eb fb90 	bl	8000628 <__aeabi_dmul>
 8014f08:	a33d      	add	r3, pc, #244	; (adr r3, 8015000 <__kernel_cos+0x150>)
 8014f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0e:	f7eb f9d5 	bl	80002bc <__adddf3>
 8014f12:	4622      	mov	r2, r4
 8014f14:	462b      	mov	r3, r5
 8014f16:	f7eb fb87 	bl	8000628 <__aeabi_dmul>
 8014f1a:	a33b      	add	r3, pc, #236	; (adr r3, 8015008 <__kernel_cos+0x158>)
 8014f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f20:	f7eb f9ca 	bl	80002b8 <__aeabi_dsub>
 8014f24:	4622      	mov	r2, r4
 8014f26:	462b      	mov	r3, r5
 8014f28:	f7eb fb7e 	bl	8000628 <__aeabi_dmul>
 8014f2c:	a338      	add	r3, pc, #224	; (adr r3, 8015010 <__kernel_cos+0x160>)
 8014f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f32:	f7eb f9c3 	bl	80002bc <__adddf3>
 8014f36:	4622      	mov	r2, r4
 8014f38:	462b      	mov	r3, r5
 8014f3a:	f7eb fb75 	bl	8000628 <__aeabi_dmul>
 8014f3e:	a336      	add	r3, pc, #216	; (adr r3, 8015018 <__kernel_cos+0x168>)
 8014f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f44:	f7eb f9b8 	bl	80002b8 <__aeabi_dsub>
 8014f48:	4622      	mov	r2, r4
 8014f4a:	462b      	mov	r3, r5
 8014f4c:	f7eb fb6c 	bl	8000628 <__aeabi_dmul>
 8014f50:	a333      	add	r3, pc, #204	; (adr r3, 8015020 <__kernel_cos+0x170>)
 8014f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f56:	f7eb f9b1 	bl	80002bc <__adddf3>
 8014f5a:	4622      	mov	r2, r4
 8014f5c:	462b      	mov	r3, r5
 8014f5e:	f7eb fb63 	bl	8000628 <__aeabi_dmul>
 8014f62:	4622      	mov	r2, r4
 8014f64:	462b      	mov	r3, r5
 8014f66:	f7eb fb5f 	bl	8000628 <__aeabi_dmul>
 8014f6a:	ec53 2b18 	vmov	r2, r3, d8
 8014f6e:	4604      	mov	r4, r0
 8014f70:	460d      	mov	r5, r1
 8014f72:	4640      	mov	r0, r8
 8014f74:	4649      	mov	r1, r9
 8014f76:	f7eb fb57 	bl	8000628 <__aeabi_dmul>
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	4629      	mov	r1, r5
 8014f80:	4620      	mov	r0, r4
 8014f82:	f7eb f999 	bl	80002b8 <__aeabi_dsub>
 8014f86:	4b29      	ldr	r3, [pc, #164]	; (801502c <__kernel_cos+0x17c>)
 8014f88:	429e      	cmp	r6, r3
 8014f8a:	4680      	mov	r8, r0
 8014f8c:	4689      	mov	r9, r1
 8014f8e:	dc11      	bgt.n	8014fb4 <__kernel_cos+0x104>
 8014f90:	4602      	mov	r2, r0
 8014f92:	460b      	mov	r3, r1
 8014f94:	4650      	mov	r0, sl
 8014f96:	4659      	mov	r1, fp
 8014f98:	f7eb f98e 	bl	80002b8 <__aeabi_dsub>
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	4924      	ldr	r1, [pc, #144]	; (8015030 <__kernel_cos+0x180>)
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	f7eb f988 	bl	80002b8 <__aeabi_dsub>
 8014fa8:	ecbd 8b02 	vpop	{d8}
 8014fac:	ec41 0b10 	vmov	d0, r0, r1
 8014fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb4:	4b1f      	ldr	r3, [pc, #124]	; (8015034 <__kernel_cos+0x184>)
 8014fb6:	491e      	ldr	r1, [pc, #120]	; (8015030 <__kernel_cos+0x180>)
 8014fb8:	429e      	cmp	r6, r3
 8014fba:	bfcc      	ite	gt
 8014fbc:	4d1e      	ldrgt	r5, [pc, #120]	; (8015038 <__kernel_cos+0x188>)
 8014fbe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014fc2:	2400      	movs	r4, #0
 8014fc4:	4622      	mov	r2, r4
 8014fc6:	462b      	mov	r3, r5
 8014fc8:	2000      	movs	r0, #0
 8014fca:	f7eb f975 	bl	80002b8 <__aeabi_dsub>
 8014fce:	4622      	mov	r2, r4
 8014fd0:	4606      	mov	r6, r0
 8014fd2:	460f      	mov	r7, r1
 8014fd4:	462b      	mov	r3, r5
 8014fd6:	4650      	mov	r0, sl
 8014fd8:	4659      	mov	r1, fp
 8014fda:	f7eb f96d 	bl	80002b8 <__aeabi_dsub>
 8014fde:	4642      	mov	r2, r8
 8014fe0:	464b      	mov	r3, r9
 8014fe2:	f7eb f969 	bl	80002b8 <__aeabi_dsub>
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	460b      	mov	r3, r1
 8014fea:	4630      	mov	r0, r6
 8014fec:	4639      	mov	r1, r7
 8014fee:	e7d9      	b.n	8014fa4 <__kernel_cos+0xf4>
 8014ff0:	2000      	movs	r0, #0
 8014ff2:	490f      	ldr	r1, [pc, #60]	; (8015030 <__kernel_cos+0x180>)
 8014ff4:	e7d8      	b.n	8014fa8 <__kernel_cos+0xf8>
 8014ff6:	bf00      	nop
 8014ff8:	be8838d4 	.word	0xbe8838d4
 8014ffc:	bda8fae9 	.word	0xbda8fae9
 8015000:	bdb4b1c4 	.word	0xbdb4b1c4
 8015004:	3e21ee9e 	.word	0x3e21ee9e
 8015008:	809c52ad 	.word	0x809c52ad
 801500c:	3e927e4f 	.word	0x3e927e4f
 8015010:	19cb1590 	.word	0x19cb1590
 8015014:	3efa01a0 	.word	0x3efa01a0
 8015018:	16c15177 	.word	0x16c15177
 801501c:	3f56c16c 	.word	0x3f56c16c
 8015020:	5555554c 	.word	0x5555554c
 8015024:	3fa55555 	.word	0x3fa55555
 8015028:	3fe00000 	.word	0x3fe00000
 801502c:	3fd33332 	.word	0x3fd33332
 8015030:	3ff00000 	.word	0x3ff00000
 8015034:	3fe90000 	.word	0x3fe90000
 8015038:	3fd20000 	.word	0x3fd20000
 801503c:	00000000 	.word	0x00000000

08015040 <__kernel_rem_pio2>:
 8015040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015044:	ed2d 8b02 	vpush	{d8}
 8015048:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801504c:	1ed4      	subs	r4, r2, #3
 801504e:	9308      	str	r3, [sp, #32]
 8015050:	9101      	str	r1, [sp, #4]
 8015052:	4bc5      	ldr	r3, [pc, #788]	; (8015368 <__kernel_rem_pio2+0x328>)
 8015054:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8015056:	9009      	str	r0, [sp, #36]	; 0x24
 8015058:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801505c:	9304      	str	r3, [sp, #16]
 801505e:	9b08      	ldr	r3, [sp, #32]
 8015060:	3b01      	subs	r3, #1
 8015062:	9307      	str	r3, [sp, #28]
 8015064:	2318      	movs	r3, #24
 8015066:	fb94 f4f3 	sdiv	r4, r4, r3
 801506a:	f06f 0317 	mvn.w	r3, #23
 801506e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8015072:	fb04 3303 	mla	r3, r4, r3, r3
 8015076:	eb03 0a02 	add.w	sl, r3, r2
 801507a:	9b04      	ldr	r3, [sp, #16]
 801507c:	9a07      	ldr	r2, [sp, #28]
 801507e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015358 <__kernel_rem_pio2+0x318>
 8015082:	eb03 0802 	add.w	r8, r3, r2
 8015086:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015088:	1aa7      	subs	r7, r4, r2
 801508a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801508e:	ae22      	add	r6, sp, #136	; 0x88
 8015090:	2500      	movs	r5, #0
 8015092:	4545      	cmp	r5, r8
 8015094:	dd13      	ble.n	80150be <__kernel_rem_pio2+0x7e>
 8015096:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015358 <__kernel_rem_pio2+0x318>
 801509a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801509e:	2600      	movs	r6, #0
 80150a0:	9b04      	ldr	r3, [sp, #16]
 80150a2:	429e      	cmp	r6, r3
 80150a4:	dc32      	bgt.n	801510c <__kernel_rem_pio2+0xcc>
 80150a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150a8:	9302      	str	r3, [sp, #8]
 80150aa:	9b08      	ldr	r3, [sp, #32]
 80150ac:	199d      	adds	r5, r3, r6
 80150ae:	ab22      	add	r3, sp, #136	; 0x88
 80150b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80150b4:	9306      	str	r3, [sp, #24]
 80150b6:	ec59 8b18 	vmov	r8, r9, d8
 80150ba:	2700      	movs	r7, #0
 80150bc:	e01f      	b.n	80150fe <__kernel_rem_pio2+0xbe>
 80150be:	42ef      	cmn	r7, r5
 80150c0:	d407      	bmi.n	80150d2 <__kernel_rem_pio2+0x92>
 80150c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80150c6:	f7eb fa45 	bl	8000554 <__aeabi_i2d>
 80150ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80150ce:	3501      	adds	r5, #1
 80150d0:	e7df      	b.n	8015092 <__kernel_rem_pio2+0x52>
 80150d2:	ec51 0b18 	vmov	r0, r1, d8
 80150d6:	e7f8      	b.n	80150ca <__kernel_rem_pio2+0x8a>
 80150d8:	9906      	ldr	r1, [sp, #24]
 80150da:	9d02      	ldr	r5, [sp, #8]
 80150dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80150e0:	9106      	str	r1, [sp, #24]
 80150e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80150e6:	9502      	str	r5, [sp, #8]
 80150e8:	f7eb fa9e 	bl	8000628 <__aeabi_dmul>
 80150ec:	4602      	mov	r2, r0
 80150ee:	460b      	mov	r3, r1
 80150f0:	4640      	mov	r0, r8
 80150f2:	4649      	mov	r1, r9
 80150f4:	f7eb f8e2 	bl	80002bc <__adddf3>
 80150f8:	3701      	adds	r7, #1
 80150fa:	4680      	mov	r8, r0
 80150fc:	4689      	mov	r9, r1
 80150fe:	9b07      	ldr	r3, [sp, #28]
 8015100:	429f      	cmp	r7, r3
 8015102:	dde9      	ble.n	80150d8 <__kernel_rem_pio2+0x98>
 8015104:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015108:	3601      	adds	r6, #1
 801510a:	e7c9      	b.n	80150a0 <__kernel_rem_pio2+0x60>
 801510c:	9b04      	ldr	r3, [sp, #16]
 801510e:	aa0e      	add	r2, sp, #56	; 0x38
 8015110:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015114:	930c      	str	r3, [sp, #48]	; 0x30
 8015116:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015118:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801511c:	9c04      	ldr	r4, [sp, #16]
 801511e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015120:	ab9a      	add	r3, sp, #616	; 0x268
 8015122:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8015126:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801512a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801512e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8015132:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015136:	ab9a      	add	r3, sp, #616	; 0x268
 8015138:	445b      	add	r3, fp
 801513a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801513e:	2500      	movs	r5, #0
 8015140:	1b63      	subs	r3, r4, r5
 8015142:	2b00      	cmp	r3, #0
 8015144:	dc78      	bgt.n	8015238 <__kernel_rem_pio2+0x1f8>
 8015146:	4650      	mov	r0, sl
 8015148:	ec49 8b10 	vmov	d0, r8, r9
 801514c:	f000 fc00 	bl	8015950 <scalbn>
 8015150:	ec57 6b10 	vmov	r6, r7, d0
 8015154:	2200      	movs	r2, #0
 8015156:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801515a:	ee10 0a10 	vmov	r0, s0
 801515e:	4639      	mov	r1, r7
 8015160:	f7eb fa62 	bl	8000628 <__aeabi_dmul>
 8015164:	ec41 0b10 	vmov	d0, r0, r1
 8015168:	f000 fb6e 	bl	8015848 <floor>
 801516c:	2200      	movs	r2, #0
 801516e:	ec51 0b10 	vmov	r0, r1, d0
 8015172:	4b7e      	ldr	r3, [pc, #504]	; (801536c <__kernel_rem_pio2+0x32c>)
 8015174:	f7eb fa58 	bl	8000628 <__aeabi_dmul>
 8015178:	4602      	mov	r2, r0
 801517a:	460b      	mov	r3, r1
 801517c:	4630      	mov	r0, r6
 801517e:	4639      	mov	r1, r7
 8015180:	f7eb f89a 	bl	80002b8 <__aeabi_dsub>
 8015184:	460f      	mov	r7, r1
 8015186:	4606      	mov	r6, r0
 8015188:	f7eb fcfe 	bl	8000b88 <__aeabi_d2iz>
 801518c:	9006      	str	r0, [sp, #24]
 801518e:	f7eb f9e1 	bl	8000554 <__aeabi_i2d>
 8015192:	4602      	mov	r2, r0
 8015194:	460b      	mov	r3, r1
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb f88d 	bl	80002b8 <__aeabi_dsub>
 801519e:	f1ba 0f00 	cmp.w	sl, #0
 80151a2:	4606      	mov	r6, r0
 80151a4:	460f      	mov	r7, r1
 80151a6:	dd6c      	ble.n	8015282 <__kernel_rem_pio2+0x242>
 80151a8:	1e62      	subs	r2, r4, #1
 80151aa:	ab0e      	add	r3, sp, #56	; 0x38
 80151ac:	f1ca 0118 	rsb	r1, sl, #24
 80151b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80151b4:	9d06      	ldr	r5, [sp, #24]
 80151b6:	fa40 f301 	asr.w	r3, r0, r1
 80151ba:	441d      	add	r5, r3
 80151bc:	408b      	lsls	r3, r1
 80151be:	1ac0      	subs	r0, r0, r3
 80151c0:	ab0e      	add	r3, sp, #56	; 0x38
 80151c2:	9506      	str	r5, [sp, #24]
 80151c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80151c8:	f1ca 0317 	rsb	r3, sl, #23
 80151cc:	fa40 f303 	asr.w	r3, r0, r3
 80151d0:	9302      	str	r3, [sp, #8]
 80151d2:	9b02      	ldr	r3, [sp, #8]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	dd62      	ble.n	801529e <__kernel_rem_pio2+0x25e>
 80151d8:	9b06      	ldr	r3, [sp, #24]
 80151da:	2200      	movs	r2, #0
 80151dc:	3301      	adds	r3, #1
 80151de:	9306      	str	r3, [sp, #24]
 80151e0:	4615      	mov	r5, r2
 80151e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80151e6:	4294      	cmp	r4, r2
 80151e8:	f300 8095 	bgt.w	8015316 <__kernel_rem_pio2+0x2d6>
 80151ec:	f1ba 0f00 	cmp.w	sl, #0
 80151f0:	dd07      	ble.n	8015202 <__kernel_rem_pio2+0x1c2>
 80151f2:	f1ba 0f01 	cmp.w	sl, #1
 80151f6:	f000 80a2 	beq.w	801533e <__kernel_rem_pio2+0x2fe>
 80151fa:	f1ba 0f02 	cmp.w	sl, #2
 80151fe:	f000 80c1 	beq.w	8015384 <__kernel_rem_pio2+0x344>
 8015202:	9b02      	ldr	r3, [sp, #8]
 8015204:	2b02      	cmp	r3, #2
 8015206:	d14a      	bne.n	801529e <__kernel_rem_pio2+0x25e>
 8015208:	4632      	mov	r2, r6
 801520a:	463b      	mov	r3, r7
 801520c:	2000      	movs	r0, #0
 801520e:	4958      	ldr	r1, [pc, #352]	; (8015370 <__kernel_rem_pio2+0x330>)
 8015210:	f7eb f852 	bl	80002b8 <__aeabi_dsub>
 8015214:	4606      	mov	r6, r0
 8015216:	460f      	mov	r7, r1
 8015218:	2d00      	cmp	r5, #0
 801521a:	d040      	beq.n	801529e <__kernel_rem_pio2+0x25e>
 801521c:	4650      	mov	r0, sl
 801521e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015360 <__kernel_rem_pio2+0x320>
 8015222:	f000 fb95 	bl	8015950 <scalbn>
 8015226:	4630      	mov	r0, r6
 8015228:	4639      	mov	r1, r7
 801522a:	ec53 2b10 	vmov	r2, r3, d0
 801522e:	f7eb f843 	bl	80002b8 <__aeabi_dsub>
 8015232:	4606      	mov	r6, r0
 8015234:	460f      	mov	r7, r1
 8015236:	e032      	b.n	801529e <__kernel_rem_pio2+0x25e>
 8015238:	2200      	movs	r2, #0
 801523a:	4b4e      	ldr	r3, [pc, #312]	; (8015374 <__kernel_rem_pio2+0x334>)
 801523c:	4640      	mov	r0, r8
 801523e:	4649      	mov	r1, r9
 8015240:	f7eb f9f2 	bl	8000628 <__aeabi_dmul>
 8015244:	f7eb fca0 	bl	8000b88 <__aeabi_d2iz>
 8015248:	f7eb f984 	bl	8000554 <__aeabi_i2d>
 801524c:	2200      	movs	r2, #0
 801524e:	4b4a      	ldr	r3, [pc, #296]	; (8015378 <__kernel_rem_pio2+0x338>)
 8015250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015254:	f7eb f9e8 	bl	8000628 <__aeabi_dmul>
 8015258:	4602      	mov	r2, r0
 801525a:	460b      	mov	r3, r1
 801525c:	4640      	mov	r0, r8
 801525e:	4649      	mov	r1, r9
 8015260:	f7eb f82a 	bl	80002b8 <__aeabi_dsub>
 8015264:	f7eb fc90 	bl	8000b88 <__aeabi_d2iz>
 8015268:	ab0e      	add	r3, sp, #56	; 0x38
 801526a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801526e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8015272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015276:	f7eb f821 	bl	80002bc <__adddf3>
 801527a:	3501      	adds	r5, #1
 801527c:	4680      	mov	r8, r0
 801527e:	4689      	mov	r9, r1
 8015280:	e75e      	b.n	8015140 <__kernel_rem_pio2+0x100>
 8015282:	d105      	bne.n	8015290 <__kernel_rem_pio2+0x250>
 8015284:	1e63      	subs	r3, r4, #1
 8015286:	aa0e      	add	r2, sp, #56	; 0x38
 8015288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801528c:	15c3      	asrs	r3, r0, #23
 801528e:	e79f      	b.n	80151d0 <__kernel_rem_pio2+0x190>
 8015290:	2200      	movs	r2, #0
 8015292:	4b3a      	ldr	r3, [pc, #232]	; (801537c <__kernel_rem_pio2+0x33c>)
 8015294:	f7eb fc4e 	bl	8000b34 <__aeabi_dcmpge>
 8015298:	2800      	cmp	r0, #0
 801529a:	d139      	bne.n	8015310 <__kernel_rem_pio2+0x2d0>
 801529c:	9002      	str	r0, [sp, #8]
 801529e:	2200      	movs	r2, #0
 80152a0:	2300      	movs	r3, #0
 80152a2:	4630      	mov	r0, r6
 80152a4:	4639      	mov	r1, r7
 80152a6:	f7eb fc27 	bl	8000af8 <__aeabi_dcmpeq>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	f000 80c7 	beq.w	801543e <__kernel_rem_pio2+0x3fe>
 80152b0:	1e65      	subs	r5, r4, #1
 80152b2:	462b      	mov	r3, r5
 80152b4:	2200      	movs	r2, #0
 80152b6:	9904      	ldr	r1, [sp, #16]
 80152b8:	428b      	cmp	r3, r1
 80152ba:	da6a      	bge.n	8015392 <__kernel_rem_pio2+0x352>
 80152bc:	2a00      	cmp	r2, #0
 80152be:	f000 8088 	beq.w	80153d2 <__kernel_rem_pio2+0x392>
 80152c2:	ab0e      	add	r3, sp, #56	; 0x38
 80152c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80152c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	f000 80b4 	beq.w	801543a <__kernel_rem_pio2+0x3fa>
 80152d2:	4650      	mov	r0, sl
 80152d4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015360 <__kernel_rem_pio2+0x320>
 80152d8:	f000 fb3a 	bl	8015950 <scalbn>
 80152dc:	00ec      	lsls	r4, r5, #3
 80152de:	ab72      	add	r3, sp, #456	; 0x1c8
 80152e0:	191e      	adds	r6, r3, r4
 80152e2:	ec59 8b10 	vmov	r8, r9, d0
 80152e6:	f106 0a08 	add.w	sl, r6, #8
 80152ea:	462f      	mov	r7, r5
 80152ec:	2f00      	cmp	r7, #0
 80152ee:	f280 80df 	bge.w	80154b0 <__kernel_rem_pio2+0x470>
 80152f2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015358 <__kernel_rem_pio2+0x318>
 80152f6:	f04f 0a00 	mov.w	sl, #0
 80152fa:	eba5 030a 	sub.w	r3, r5, sl
 80152fe:	2b00      	cmp	r3, #0
 8015300:	f2c0 810a 	blt.w	8015518 <__kernel_rem_pio2+0x4d8>
 8015304:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015380 <__kernel_rem_pio2+0x340>
 8015308:	ec59 8b18 	vmov	r8, r9, d8
 801530c:	2700      	movs	r7, #0
 801530e:	e0f5      	b.n	80154fc <__kernel_rem_pio2+0x4bc>
 8015310:	2302      	movs	r3, #2
 8015312:	9302      	str	r3, [sp, #8]
 8015314:	e760      	b.n	80151d8 <__kernel_rem_pio2+0x198>
 8015316:	ab0e      	add	r3, sp, #56	; 0x38
 8015318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801531c:	b94d      	cbnz	r5, 8015332 <__kernel_rem_pio2+0x2f2>
 801531e:	b12b      	cbz	r3, 801532c <__kernel_rem_pio2+0x2ec>
 8015320:	a80e      	add	r0, sp, #56	; 0x38
 8015322:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015326:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801532a:	2301      	movs	r3, #1
 801532c:	3201      	adds	r2, #1
 801532e:	461d      	mov	r5, r3
 8015330:	e759      	b.n	80151e6 <__kernel_rem_pio2+0x1a6>
 8015332:	a80e      	add	r0, sp, #56	; 0x38
 8015334:	1acb      	subs	r3, r1, r3
 8015336:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801533a:	462b      	mov	r3, r5
 801533c:	e7f6      	b.n	801532c <__kernel_rem_pio2+0x2ec>
 801533e:	1e62      	subs	r2, r4, #1
 8015340:	ab0e      	add	r3, sp, #56	; 0x38
 8015342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015346:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801534a:	a90e      	add	r1, sp, #56	; 0x38
 801534c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015350:	e757      	b.n	8015202 <__kernel_rem_pio2+0x1c2>
 8015352:	bf00      	nop
 8015354:	f3af 8000 	nop.w
	...
 8015364:	3ff00000 	.word	0x3ff00000
 8015368:	0801a538 	.word	0x0801a538
 801536c:	40200000 	.word	0x40200000
 8015370:	3ff00000 	.word	0x3ff00000
 8015374:	3e700000 	.word	0x3e700000
 8015378:	41700000 	.word	0x41700000
 801537c:	3fe00000 	.word	0x3fe00000
 8015380:	0801a4f8 	.word	0x0801a4f8
 8015384:	1e62      	subs	r2, r4, #1
 8015386:	ab0e      	add	r3, sp, #56	; 0x38
 8015388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801538c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015390:	e7db      	b.n	801534a <__kernel_rem_pio2+0x30a>
 8015392:	a90e      	add	r1, sp, #56	; 0x38
 8015394:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015398:	3b01      	subs	r3, #1
 801539a:	430a      	orrs	r2, r1
 801539c:	e78b      	b.n	80152b6 <__kernel_rem_pio2+0x276>
 801539e:	3301      	adds	r3, #1
 80153a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80153a4:	2900      	cmp	r1, #0
 80153a6:	d0fa      	beq.n	801539e <__kernel_rem_pio2+0x35e>
 80153a8:	9a08      	ldr	r2, [sp, #32]
 80153aa:	4422      	add	r2, r4
 80153ac:	00d2      	lsls	r2, r2, #3
 80153ae:	a922      	add	r1, sp, #136	; 0x88
 80153b0:	18e3      	adds	r3, r4, r3
 80153b2:	9206      	str	r2, [sp, #24]
 80153b4:	440a      	add	r2, r1
 80153b6:	9302      	str	r3, [sp, #8]
 80153b8:	f10b 0108 	add.w	r1, fp, #8
 80153bc:	f102 0308 	add.w	r3, r2, #8
 80153c0:	1c66      	adds	r6, r4, #1
 80153c2:	910a      	str	r1, [sp, #40]	; 0x28
 80153c4:	2500      	movs	r5, #0
 80153c6:	930d      	str	r3, [sp, #52]	; 0x34
 80153c8:	9b02      	ldr	r3, [sp, #8]
 80153ca:	42b3      	cmp	r3, r6
 80153cc:	da04      	bge.n	80153d8 <__kernel_rem_pio2+0x398>
 80153ce:	461c      	mov	r4, r3
 80153d0:	e6a6      	b.n	8015120 <__kernel_rem_pio2+0xe0>
 80153d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153d4:	2301      	movs	r3, #1
 80153d6:	e7e3      	b.n	80153a0 <__kernel_rem_pio2+0x360>
 80153d8:	9b06      	ldr	r3, [sp, #24]
 80153da:	18ef      	adds	r7, r5, r3
 80153dc:	ab22      	add	r3, sp, #136	; 0x88
 80153de:	441f      	add	r7, r3
 80153e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80153e6:	f7eb f8b5 	bl	8000554 <__aeabi_i2d>
 80153ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153ec:	461c      	mov	r4, r3
 80153ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153f0:	e9c7 0100 	strd	r0, r1, [r7]
 80153f4:	eb03 0b05 	add.w	fp, r3, r5
 80153f8:	2700      	movs	r7, #0
 80153fa:	f04f 0800 	mov.w	r8, #0
 80153fe:	f04f 0900 	mov.w	r9, #0
 8015402:	9b07      	ldr	r3, [sp, #28]
 8015404:	429f      	cmp	r7, r3
 8015406:	dd08      	ble.n	801541a <__kernel_rem_pio2+0x3da>
 8015408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801540a:	aa72      	add	r2, sp, #456	; 0x1c8
 801540c:	18eb      	adds	r3, r5, r3
 801540e:	4413      	add	r3, r2
 8015410:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8015414:	3601      	adds	r6, #1
 8015416:	3508      	adds	r5, #8
 8015418:	e7d6      	b.n	80153c8 <__kernel_rem_pio2+0x388>
 801541a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801541e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015422:	f7eb f901 	bl	8000628 <__aeabi_dmul>
 8015426:	4602      	mov	r2, r0
 8015428:	460b      	mov	r3, r1
 801542a:	4640      	mov	r0, r8
 801542c:	4649      	mov	r1, r9
 801542e:	f7ea ff45 	bl	80002bc <__adddf3>
 8015432:	3701      	adds	r7, #1
 8015434:	4680      	mov	r8, r0
 8015436:	4689      	mov	r9, r1
 8015438:	e7e3      	b.n	8015402 <__kernel_rem_pio2+0x3c2>
 801543a:	3d01      	subs	r5, #1
 801543c:	e741      	b.n	80152c2 <__kernel_rem_pio2+0x282>
 801543e:	f1ca 0000 	rsb	r0, sl, #0
 8015442:	ec47 6b10 	vmov	d0, r6, r7
 8015446:	f000 fa83 	bl	8015950 <scalbn>
 801544a:	ec57 6b10 	vmov	r6, r7, d0
 801544e:	2200      	movs	r2, #0
 8015450:	4b99      	ldr	r3, [pc, #612]	; (80156b8 <__kernel_rem_pio2+0x678>)
 8015452:	ee10 0a10 	vmov	r0, s0
 8015456:	4639      	mov	r1, r7
 8015458:	f7eb fb6c 	bl	8000b34 <__aeabi_dcmpge>
 801545c:	b1f8      	cbz	r0, 801549e <__kernel_rem_pio2+0x45e>
 801545e:	2200      	movs	r2, #0
 8015460:	4b96      	ldr	r3, [pc, #600]	; (80156bc <__kernel_rem_pio2+0x67c>)
 8015462:	4630      	mov	r0, r6
 8015464:	4639      	mov	r1, r7
 8015466:	f7eb f8df 	bl	8000628 <__aeabi_dmul>
 801546a:	f7eb fb8d 	bl	8000b88 <__aeabi_d2iz>
 801546e:	4680      	mov	r8, r0
 8015470:	f7eb f870 	bl	8000554 <__aeabi_i2d>
 8015474:	2200      	movs	r2, #0
 8015476:	4b90      	ldr	r3, [pc, #576]	; (80156b8 <__kernel_rem_pio2+0x678>)
 8015478:	f7eb f8d6 	bl	8000628 <__aeabi_dmul>
 801547c:	460b      	mov	r3, r1
 801547e:	4602      	mov	r2, r0
 8015480:	4639      	mov	r1, r7
 8015482:	4630      	mov	r0, r6
 8015484:	f7ea ff18 	bl	80002b8 <__aeabi_dsub>
 8015488:	f7eb fb7e 	bl	8000b88 <__aeabi_d2iz>
 801548c:	1c65      	adds	r5, r4, #1
 801548e:	ab0e      	add	r3, sp, #56	; 0x38
 8015490:	f10a 0a18 	add.w	sl, sl, #24
 8015494:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015498:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801549c:	e719      	b.n	80152d2 <__kernel_rem_pio2+0x292>
 801549e:	4630      	mov	r0, r6
 80154a0:	4639      	mov	r1, r7
 80154a2:	f7eb fb71 	bl	8000b88 <__aeabi_d2iz>
 80154a6:	ab0e      	add	r3, sp, #56	; 0x38
 80154a8:	4625      	mov	r5, r4
 80154aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80154ae:	e710      	b.n	80152d2 <__kernel_rem_pio2+0x292>
 80154b0:	ab0e      	add	r3, sp, #56	; 0x38
 80154b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80154b6:	f7eb f84d 	bl	8000554 <__aeabi_i2d>
 80154ba:	4642      	mov	r2, r8
 80154bc:	464b      	mov	r3, r9
 80154be:	f7eb f8b3 	bl	8000628 <__aeabi_dmul>
 80154c2:	2200      	movs	r2, #0
 80154c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80154c8:	4b7c      	ldr	r3, [pc, #496]	; (80156bc <__kernel_rem_pio2+0x67c>)
 80154ca:	4640      	mov	r0, r8
 80154cc:	4649      	mov	r1, r9
 80154ce:	f7eb f8ab 	bl	8000628 <__aeabi_dmul>
 80154d2:	3f01      	subs	r7, #1
 80154d4:	4680      	mov	r8, r0
 80154d6:	4689      	mov	r9, r1
 80154d8:	e708      	b.n	80152ec <__kernel_rem_pio2+0x2ac>
 80154da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80154de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80154e6:	f7eb f89f 	bl	8000628 <__aeabi_dmul>
 80154ea:	4602      	mov	r2, r0
 80154ec:	460b      	mov	r3, r1
 80154ee:	4640      	mov	r0, r8
 80154f0:	4649      	mov	r1, r9
 80154f2:	f7ea fee3 	bl	80002bc <__adddf3>
 80154f6:	3701      	adds	r7, #1
 80154f8:	4680      	mov	r8, r0
 80154fa:	4689      	mov	r9, r1
 80154fc:	9b04      	ldr	r3, [sp, #16]
 80154fe:	429f      	cmp	r7, r3
 8015500:	dc01      	bgt.n	8015506 <__kernel_rem_pio2+0x4c6>
 8015502:	45ba      	cmp	sl, r7
 8015504:	dae9      	bge.n	80154da <__kernel_rem_pio2+0x49a>
 8015506:	ab4a      	add	r3, sp, #296	; 0x128
 8015508:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801550c:	e9c3 8900 	strd	r8, r9, [r3]
 8015510:	f10a 0a01 	add.w	sl, sl, #1
 8015514:	3e08      	subs	r6, #8
 8015516:	e6f0      	b.n	80152fa <__kernel_rem_pio2+0x2ba>
 8015518:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801551a:	2b03      	cmp	r3, #3
 801551c:	d85b      	bhi.n	80155d6 <__kernel_rem_pio2+0x596>
 801551e:	e8df f003 	tbb	[pc, r3]
 8015522:	264a      	.short	0x264a
 8015524:	0226      	.short	0x0226
 8015526:	ab9a      	add	r3, sp, #616	; 0x268
 8015528:	441c      	add	r4, r3
 801552a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801552e:	46a2      	mov	sl, r4
 8015530:	46ab      	mov	fp, r5
 8015532:	f1bb 0f00 	cmp.w	fp, #0
 8015536:	dc6c      	bgt.n	8015612 <__kernel_rem_pio2+0x5d2>
 8015538:	46a2      	mov	sl, r4
 801553a:	46ab      	mov	fp, r5
 801553c:	f1bb 0f01 	cmp.w	fp, #1
 8015540:	f300 8086 	bgt.w	8015650 <__kernel_rem_pio2+0x610>
 8015544:	2000      	movs	r0, #0
 8015546:	2100      	movs	r1, #0
 8015548:	2d01      	cmp	r5, #1
 801554a:	f300 80a0 	bgt.w	801568e <__kernel_rem_pio2+0x64e>
 801554e:	9b02      	ldr	r3, [sp, #8]
 8015550:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015554:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015558:	2b00      	cmp	r3, #0
 801555a:	f040 809e 	bne.w	801569a <__kernel_rem_pio2+0x65a>
 801555e:	9b01      	ldr	r3, [sp, #4]
 8015560:	e9c3 7800 	strd	r7, r8, [r3]
 8015564:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015568:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801556c:	e033      	b.n	80155d6 <__kernel_rem_pio2+0x596>
 801556e:	3408      	adds	r4, #8
 8015570:	ab4a      	add	r3, sp, #296	; 0x128
 8015572:	441c      	add	r4, r3
 8015574:	462e      	mov	r6, r5
 8015576:	2000      	movs	r0, #0
 8015578:	2100      	movs	r1, #0
 801557a:	2e00      	cmp	r6, #0
 801557c:	da3a      	bge.n	80155f4 <__kernel_rem_pio2+0x5b4>
 801557e:	9b02      	ldr	r3, [sp, #8]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d03d      	beq.n	8015600 <__kernel_rem_pio2+0x5c0>
 8015584:	4602      	mov	r2, r0
 8015586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801558a:	9c01      	ldr	r4, [sp, #4]
 801558c:	e9c4 2300 	strd	r2, r3, [r4]
 8015590:	4602      	mov	r2, r0
 8015592:	460b      	mov	r3, r1
 8015594:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015598:	f7ea fe8e 	bl	80002b8 <__aeabi_dsub>
 801559c:	ae4c      	add	r6, sp, #304	; 0x130
 801559e:	2401      	movs	r4, #1
 80155a0:	42a5      	cmp	r5, r4
 80155a2:	da30      	bge.n	8015606 <__kernel_rem_pio2+0x5c6>
 80155a4:	9b02      	ldr	r3, [sp, #8]
 80155a6:	b113      	cbz	r3, 80155ae <__kernel_rem_pio2+0x56e>
 80155a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155ac:	4619      	mov	r1, r3
 80155ae:	9b01      	ldr	r3, [sp, #4]
 80155b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80155b4:	e00f      	b.n	80155d6 <__kernel_rem_pio2+0x596>
 80155b6:	ab9a      	add	r3, sp, #616	; 0x268
 80155b8:	441c      	add	r4, r3
 80155ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80155be:	2000      	movs	r0, #0
 80155c0:	2100      	movs	r1, #0
 80155c2:	2d00      	cmp	r5, #0
 80155c4:	da10      	bge.n	80155e8 <__kernel_rem_pio2+0x5a8>
 80155c6:	9b02      	ldr	r3, [sp, #8]
 80155c8:	b113      	cbz	r3, 80155d0 <__kernel_rem_pio2+0x590>
 80155ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155ce:	4619      	mov	r1, r3
 80155d0:	9b01      	ldr	r3, [sp, #4]
 80155d2:	e9c3 0100 	strd	r0, r1, [r3]
 80155d6:	9b06      	ldr	r3, [sp, #24]
 80155d8:	f003 0007 	and.w	r0, r3, #7
 80155dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80155e0:	ecbd 8b02 	vpop	{d8}
 80155e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155ec:	f7ea fe66 	bl	80002bc <__adddf3>
 80155f0:	3d01      	subs	r5, #1
 80155f2:	e7e6      	b.n	80155c2 <__kernel_rem_pio2+0x582>
 80155f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155f8:	f7ea fe60 	bl	80002bc <__adddf3>
 80155fc:	3e01      	subs	r6, #1
 80155fe:	e7bc      	b.n	801557a <__kernel_rem_pio2+0x53a>
 8015600:	4602      	mov	r2, r0
 8015602:	460b      	mov	r3, r1
 8015604:	e7c1      	b.n	801558a <__kernel_rem_pio2+0x54a>
 8015606:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801560a:	f7ea fe57 	bl	80002bc <__adddf3>
 801560e:	3401      	adds	r4, #1
 8015610:	e7c6      	b.n	80155a0 <__kernel_rem_pio2+0x560>
 8015612:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8015616:	ed3a 7b02 	vldmdb	sl!, {d7}
 801561a:	4640      	mov	r0, r8
 801561c:	ec53 2b17 	vmov	r2, r3, d7
 8015620:	4649      	mov	r1, r9
 8015622:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015626:	f7ea fe49 	bl	80002bc <__adddf3>
 801562a:	4602      	mov	r2, r0
 801562c:	460b      	mov	r3, r1
 801562e:	4606      	mov	r6, r0
 8015630:	460f      	mov	r7, r1
 8015632:	4640      	mov	r0, r8
 8015634:	4649      	mov	r1, r9
 8015636:	f7ea fe3f 	bl	80002b8 <__aeabi_dsub>
 801563a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801563e:	f7ea fe3d 	bl	80002bc <__adddf3>
 8015642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015646:	e9ca 0100 	strd	r0, r1, [sl]
 801564a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801564e:	e770      	b.n	8015532 <__kernel_rem_pio2+0x4f2>
 8015650:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015654:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015658:	4630      	mov	r0, r6
 801565a:	ec53 2b17 	vmov	r2, r3, d7
 801565e:	4639      	mov	r1, r7
 8015660:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015664:	f7ea fe2a 	bl	80002bc <__adddf3>
 8015668:	4602      	mov	r2, r0
 801566a:	460b      	mov	r3, r1
 801566c:	4680      	mov	r8, r0
 801566e:	4689      	mov	r9, r1
 8015670:	4630      	mov	r0, r6
 8015672:	4639      	mov	r1, r7
 8015674:	f7ea fe20 	bl	80002b8 <__aeabi_dsub>
 8015678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801567c:	f7ea fe1e 	bl	80002bc <__adddf3>
 8015680:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015684:	e9ca 0100 	strd	r0, r1, [sl]
 8015688:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801568c:	e756      	b.n	801553c <__kernel_rem_pio2+0x4fc>
 801568e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015692:	f7ea fe13 	bl	80002bc <__adddf3>
 8015696:	3d01      	subs	r5, #1
 8015698:	e756      	b.n	8015548 <__kernel_rem_pio2+0x508>
 801569a:	9b01      	ldr	r3, [sp, #4]
 801569c:	9a01      	ldr	r2, [sp, #4]
 801569e:	601f      	str	r7, [r3, #0]
 80156a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80156a4:	605c      	str	r4, [r3, #4]
 80156a6:	609d      	str	r5, [r3, #8]
 80156a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80156ac:	60d3      	str	r3, [r2, #12]
 80156ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156b2:	6110      	str	r0, [r2, #16]
 80156b4:	6153      	str	r3, [r2, #20]
 80156b6:	e78e      	b.n	80155d6 <__kernel_rem_pio2+0x596>
 80156b8:	41700000 	.word	0x41700000
 80156bc:	3e700000 	.word	0x3e700000

080156c0 <__kernel_sin>:
 80156c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c4:	ec55 4b10 	vmov	r4, r5, d0
 80156c8:	b085      	sub	sp, #20
 80156ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80156ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80156d2:	ed8d 1b00 	vstr	d1, [sp]
 80156d6:	9002      	str	r0, [sp, #8]
 80156d8:	da06      	bge.n	80156e8 <__kernel_sin+0x28>
 80156da:	ee10 0a10 	vmov	r0, s0
 80156de:	4629      	mov	r1, r5
 80156e0:	f7eb fa52 	bl	8000b88 <__aeabi_d2iz>
 80156e4:	2800      	cmp	r0, #0
 80156e6:	d051      	beq.n	801578c <__kernel_sin+0xcc>
 80156e8:	4622      	mov	r2, r4
 80156ea:	462b      	mov	r3, r5
 80156ec:	4620      	mov	r0, r4
 80156ee:	4629      	mov	r1, r5
 80156f0:	f7ea ff9a 	bl	8000628 <__aeabi_dmul>
 80156f4:	4682      	mov	sl, r0
 80156f6:	468b      	mov	fp, r1
 80156f8:	4602      	mov	r2, r0
 80156fa:	460b      	mov	r3, r1
 80156fc:	4620      	mov	r0, r4
 80156fe:	4629      	mov	r1, r5
 8015700:	f7ea ff92 	bl	8000628 <__aeabi_dmul>
 8015704:	a341      	add	r3, pc, #260	; (adr r3, 801580c <__kernel_sin+0x14c>)
 8015706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570a:	4680      	mov	r8, r0
 801570c:	4689      	mov	r9, r1
 801570e:	4650      	mov	r0, sl
 8015710:	4659      	mov	r1, fp
 8015712:	f7ea ff89 	bl	8000628 <__aeabi_dmul>
 8015716:	a33f      	add	r3, pc, #252	; (adr r3, 8015814 <__kernel_sin+0x154>)
 8015718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571c:	f7ea fdcc 	bl	80002b8 <__aeabi_dsub>
 8015720:	4652      	mov	r2, sl
 8015722:	465b      	mov	r3, fp
 8015724:	f7ea ff80 	bl	8000628 <__aeabi_dmul>
 8015728:	a33c      	add	r3, pc, #240	; (adr r3, 801581c <__kernel_sin+0x15c>)
 801572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572e:	f7ea fdc5 	bl	80002bc <__adddf3>
 8015732:	4652      	mov	r2, sl
 8015734:	465b      	mov	r3, fp
 8015736:	f7ea ff77 	bl	8000628 <__aeabi_dmul>
 801573a:	a33a      	add	r3, pc, #232	; (adr r3, 8015824 <__kernel_sin+0x164>)
 801573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015740:	f7ea fdba 	bl	80002b8 <__aeabi_dsub>
 8015744:	4652      	mov	r2, sl
 8015746:	465b      	mov	r3, fp
 8015748:	f7ea ff6e 	bl	8000628 <__aeabi_dmul>
 801574c:	a337      	add	r3, pc, #220	; (adr r3, 801582c <__kernel_sin+0x16c>)
 801574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015752:	f7ea fdb3 	bl	80002bc <__adddf3>
 8015756:	9b02      	ldr	r3, [sp, #8]
 8015758:	4606      	mov	r6, r0
 801575a:	460f      	mov	r7, r1
 801575c:	b9db      	cbnz	r3, 8015796 <__kernel_sin+0xd6>
 801575e:	4602      	mov	r2, r0
 8015760:	460b      	mov	r3, r1
 8015762:	4650      	mov	r0, sl
 8015764:	4659      	mov	r1, fp
 8015766:	f7ea ff5f 	bl	8000628 <__aeabi_dmul>
 801576a:	a325      	add	r3, pc, #148	; (adr r3, 8015800 <__kernel_sin+0x140>)
 801576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015770:	f7ea fda2 	bl	80002b8 <__aeabi_dsub>
 8015774:	4642      	mov	r2, r8
 8015776:	464b      	mov	r3, r9
 8015778:	f7ea ff56 	bl	8000628 <__aeabi_dmul>
 801577c:	4602      	mov	r2, r0
 801577e:	460b      	mov	r3, r1
 8015780:	4620      	mov	r0, r4
 8015782:	4629      	mov	r1, r5
 8015784:	f7ea fd9a 	bl	80002bc <__adddf3>
 8015788:	4604      	mov	r4, r0
 801578a:	460d      	mov	r5, r1
 801578c:	ec45 4b10 	vmov	d0, r4, r5
 8015790:	b005      	add	sp, #20
 8015792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015796:	2200      	movs	r2, #0
 8015798:	4b1b      	ldr	r3, [pc, #108]	; (8015808 <__kernel_sin+0x148>)
 801579a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801579e:	f7ea ff43 	bl	8000628 <__aeabi_dmul>
 80157a2:	4632      	mov	r2, r6
 80157a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157a8:	463b      	mov	r3, r7
 80157aa:	4640      	mov	r0, r8
 80157ac:	4649      	mov	r1, r9
 80157ae:	f7ea ff3b 	bl	8000628 <__aeabi_dmul>
 80157b2:	4602      	mov	r2, r0
 80157b4:	460b      	mov	r3, r1
 80157b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157ba:	f7ea fd7d 	bl	80002b8 <__aeabi_dsub>
 80157be:	4652      	mov	r2, sl
 80157c0:	465b      	mov	r3, fp
 80157c2:	f7ea ff31 	bl	8000628 <__aeabi_dmul>
 80157c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157ca:	f7ea fd75 	bl	80002b8 <__aeabi_dsub>
 80157ce:	a30c      	add	r3, pc, #48	; (adr r3, 8015800 <__kernel_sin+0x140>)
 80157d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d4:	4606      	mov	r6, r0
 80157d6:	460f      	mov	r7, r1
 80157d8:	4640      	mov	r0, r8
 80157da:	4649      	mov	r1, r9
 80157dc:	f7ea ff24 	bl	8000628 <__aeabi_dmul>
 80157e0:	4602      	mov	r2, r0
 80157e2:	460b      	mov	r3, r1
 80157e4:	4630      	mov	r0, r6
 80157e6:	4639      	mov	r1, r7
 80157e8:	f7ea fd68 	bl	80002bc <__adddf3>
 80157ec:	4602      	mov	r2, r0
 80157ee:	460b      	mov	r3, r1
 80157f0:	4620      	mov	r0, r4
 80157f2:	4629      	mov	r1, r5
 80157f4:	f7ea fd60 	bl	80002b8 <__aeabi_dsub>
 80157f8:	e7c6      	b.n	8015788 <__kernel_sin+0xc8>
 80157fa:	bf00      	nop
 80157fc:	f3af 8000 	nop.w
 8015800:	55555549 	.word	0x55555549
 8015804:	3fc55555 	.word	0x3fc55555
 8015808:	3fe00000 	.word	0x3fe00000
 801580c:	5acfd57c 	.word	0x5acfd57c
 8015810:	3de5d93a 	.word	0x3de5d93a
 8015814:	8a2b9ceb 	.word	0x8a2b9ceb
 8015818:	3e5ae5e6 	.word	0x3e5ae5e6
 801581c:	57b1fe7d 	.word	0x57b1fe7d
 8015820:	3ec71de3 	.word	0x3ec71de3
 8015824:	19c161d5 	.word	0x19c161d5
 8015828:	3f2a01a0 	.word	0x3f2a01a0
 801582c:	1110f8a6 	.word	0x1110f8a6
 8015830:	3f811111 	.word	0x3f811111

08015834 <fabs>:
 8015834:	ec51 0b10 	vmov	r0, r1, d0
 8015838:	ee10 2a10 	vmov	r2, s0
 801583c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015840:	ec43 2b10 	vmov	d0, r2, r3
 8015844:	4770      	bx	lr
	...

08015848 <floor>:
 8015848:	ec51 0b10 	vmov	r0, r1, d0
 801584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015850:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015854:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015858:	2e13      	cmp	r6, #19
 801585a:	460c      	mov	r4, r1
 801585c:	ee10 5a10 	vmov	r5, s0
 8015860:	4680      	mov	r8, r0
 8015862:	dc34      	bgt.n	80158ce <floor+0x86>
 8015864:	2e00      	cmp	r6, #0
 8015866:	da16      	bge.n	8015896 <floor+0x4e>
 8015868:	a335      	add	r3, pc, #212	; (adr r3, 8015940 <floor+0xf8>)
 801586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801586e:	f7ea fd25 	bl	80002bc <__adddf3>
 8015872:	2200      	movs	r2, #0
 8015874:	2300      	movs	r3, #0
 8015876:	f7eb f967 	bl	8000b48 <__aeabi_dcmpgt>
 801587a:	b148      	cbz	r0, 8015890 <floor+0x48>
 801587c:	2c00      	cmp	r4, #0
 801587e:	da59      	bge.n	8015934 <floor+0xec>
 8015880:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015884:	4a30      	ldr	r2, [pc, #192]	; (8015948 <floor+0x100>)
 8015886:	432b      	orrs	r3, r5
 8015888:	2500      	movs	r5, #0
 801588a:	42ab      	cmp	r3, r5
 801588c:	bf18      	it	ne
 801588e:	4614      	movne	r4, r2
 8015890:	4621      	mov	r1, r4
 8015892:	4628      	mov	r0, r5
 8015894:	e025      	b.n	80158e2 <floor+0x9a>
 8015896:	4f2d      	ldr	r7, [pc, #180]	; (801594c <floor+0x104>)
 8015898:	4137      	asrs	r7, r6
 801589a:	ea01 0307 	and.w	r3, r1, r7
 801589e:	4303      	orrs	r3, r0
 80158a0:	d01f      	beq.n	80158e2 <floor+0x9a>
 80158a2:	a327      	add	r3, pc, #156	; (adr r3, 8015940 <floor+0xf8>)
 80158a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a8:	f7ea fd08 	bl	80002bc <__adddf3>
 80158ac:	2200      	movs	r2, #0
 80158ae:	2300      	movs	r3, #0
 80158b0:	f7eb f94a 	bl	8000b48 <__aeabi_dcmpgt>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d0eb      	beq.n	8015890 <floor+0x48>
 80158b8:	2c00      	cmp	r4, #0
 80158ba:	bfbe      	ittt	lt
 80158bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80158c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80158c4:	19a4      	addlt	r4, r4, r6
 80158c6:	ea24 0407 	bic.w	r4, r4, r7
 80158ca:	2500      	movs	r5, #0
 80158cc:	e7e0      	b.n	8015890 <floor+0x48>
 80158ce:	2e33      	cmp	r6, #51	; 0x33
 80158d0:	dd0b      	ble.n	80158ea <floor+0xa2>
 80158d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80158d6:	d104      	bne.n	80158e2 <floor+0x9a>
 80158d8:	ee10 2a10 	vmov	r2, s0
 80158dc:	460b      	mov	r3, r1
 80158de:	f7ea fced 	bl	80002bc <__adddf3>
 80158e2:	ec41 0b10 	vmov	d0, r0, r1
 80158e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80158ee:	f04f 33ff 	mov.w	r3, #4294967295
 80158f2:	fa23 f707 	lsr.w	r7, r3, r7
 80158f6:	4207      	tst	r7, r0
 80158f8:	d0f3      	beq.n	80158e2 <floor+0x9a>
 80158fa:	a311      	add	r3, pc, #68	; (adr r3, 8015940 <floor+0xf8>)
 80158fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015900:	f7ea fcdc 	bl	80002bc <__adddf3>
 8015904:	2200      	movs	r2, #0
 8015906:	2300      	movs	r3, #0
 8015908:	f7eb f91e 	bl	8000b48 <__aeabi_dcmpgt>
 801590c:	2800      	cmp	r0, #0
 801590e:	d0bf      	beq.n	8015890 <floor+0x48>
 8015910:	2c00      	cmp	r4, #0
 8015912:	da02      	bge.n	801591a <floor+0xd2>
 8015914:	2e14      	cmp	r6, #20
 8015916:	d103      	bne.n	8015920 <floor+0xd8>
 8015918:	3401      	adds	r4, #1
 801591a:	ea25 0507 	bic.w	r5, r5, r7
 801591e:	e7b7      	b.n	8015890 <floor+0x48>
 8015920:	2301      	movs	r3, #1
 8015922:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015926:	fa03 f606 	lsl.w	r6, r3, r6
 801592a:	4435      	add	r5, r6
 801592c:	4545      	cmp	r5, r8
 801592e:	bf38      	it	cc
 8015930:	18e4      	addcc	r4, r4, r3
 8015932:	e7f2      	b.n	801591a <floor+0xd2>
 8015934:	2500      	movs	r5, #0
 8015936:	462c      	mov	r4, r5
 8015938:	e7aa      	b.n	8015890 <floor+0x48>
 801593a:	bf00      	nop
 801593c:	f3af 8000 	nop.w
 8015940:	8800759c 	.word	0x8800759c
 8015944:	7e37e43c 	.word	0x7e37e43c
 8015948:	bff00000 	.word	0xbff00000
 801594c:	000fffff 	.word	0x000fffff

08015950 <scalbn>:
 8015950:	b570      	push	{r4, r5, r6, lr}
 8015952:	ec55 4b10 	vmov	r4, r5, d0
 8015956:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801595a:	4606      	mov	r6, r0
 801595c:	462b      	mov	r3, r5
 801595e:	b9aa      	cbnz	r2, 801598c <scalbn+0x3c>
 8015960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015964:	4323      	orrs	r3, r4
 8015966:	d03b      	beq.n	80159e0 <scalbn+0x90>
 8015968:	4b31      	ldr	r3, [pc, #196]	; (8015a30 <scalbn+0xe0>)
 801596a:	4629      	mov	r1, r5
 801596c:	2200      	movs	r2, #0
 801596e:	ee10 0a10 	vmov	r0, s0
 8015972:	f7ea fe59 	bl	8000628 <__aeabi_dmul>
 8015976:	4b2f      	ldr	r3, [pc, #188]	; (8015a34 <scalbn+0xe4>)
 8015978:	429e      	cmp	r6, r3
 801597a:	4604      	mov	r4, r0
 801597c:	460d      	mov	r5, r1
 801597e:	da12      	bge.n	80159a6 <scalbn+0x56>
 8015980:	a327      	add	r3, pc, #156	; (adr r3, 8015a20 <scalbn+0xd0>)
 8015982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015986:	f7ea fe4f 	bl	8000628 <__aeabi_dmul>
 801598a:	e009      	b.n	80159a0 <scalbn+0x50>
 801598c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015990:	428a      	cmp	r2, r1
 8015992:	d10c      	bne.n	80159ae <scalbn+0x5e>
 8015994:	ee10 2a10 	vmov	r2, s0
 8015998:	4620      	mov	r0, r4
 801599a:	4629      	mov	r1, r5
 801599c:	f7ea fc8e 	bl	80002bc <__adddf3>
 80159a0:	4604      	mov	r4, r0
 80159a2:	460d      	mov	r5, r1
 80159a4:	e01c      	b.n	80159e0 <scalbn+0x90>
 80159a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80159aa:	460b      	mov	r3, r1
 80159ac:	3a36      	subs	r2, #54	; 0x36
 80159ae:	4432      	add	r2, r6
 80159b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80159b4:	428a      	cmp	r2, r1
 80159b6:	dd0b      	ble.n	80159d0 <scalbn+0x80>
 80159b8:	ec45 4b11 	vmov	d1, r4, r5
 80159bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015a28 <scalbn+0xd8>
 80159c0:	f000 f83c 	bl	8015a3c <copysign>
 80159c4:	a318      	add	r3, pc, #96	; (adr r3, 8015a28 <scalbn+0xd8>)
 80159c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ca:	ec51 0b10 	vmov	r0, r1, d0
 80159ce:	e7da      	b.n	8015986 <scalbn+0x36>
 80159d0:	2a00      	cmp	r2, #0
 80159d2:	dd08      	ble.n	80159e6 <scalbn+0x96>
 80159d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80159d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80159dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80159e0:	ec45 4b10 	vmov	d0, r4, r5
 80159e4:	bd70      	pop	{r4, r5, r6, pc}
 80159e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80159ea:	da0d      	bge.n	8015a08 <scalbn+0xb8>
 80159ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80159f0:	429e      	cmp	r6, r3
 80159f2:	ec45 4b11 	vmov	d1, r4, r5
 80159f6:	dce1      	bgt.n	80159bc <scalbn+0x6c>
 80159f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015a20 <scalbn+0xd0>
 80159fc:	f000 f81e 	bl	8015a3c <copysign>
 8015a00:	a307      	add	r3, pc, #28	; (adr r3, 8015a20 <scalbn+0xd0>)
 8015a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a06:	e7e0      	b.n	80159ca <scalbn+0x7a>
 8015a08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a0c:	3236      	adds	r2, #54	; 0x36
 8015a0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015a16:	4620      	mov	r0, r4
 8015a18:	4629      	mov	r1, r5
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	4b06      	ldr	r3, [pc, #24]	; (8015a38 <scalbn+0xe8>)
 8015a1e:	e7b2      	b.n	8015986 <scalbn+0x36>
 8015a20:	c2f8f359 	.word	0xc2f8f359
 8015a24:	01a56e1f 	.word	0x01a56e1f
 8015a28:	8800759c 	.word	0x8800759c
 8015a2c:	7e37e43c 	.word	0x7e37e43c
 8015a30:	43500000 	.word	0x43500000
 8015a34:	ffff3cb0 	.word	0xffff3cb0
 8015a38:	3c900000 	.word	0x3c900000

08015a3c <copysign>:
 8015a3c:	ec51 0b10 	vmov	r0, r1, d0
 8015a40:	ee11 0a90 	vmov	r0, s3
 8015a44:	ee10 2a10 	vmov	r2, s0
 8015a48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015a4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015a50:	ea41 0300 	orr.w	r3, r1, r0
 8015a54:	ec43 2b10 	vmov	d0, r2, r3
 8015a58:	4770      	bx	lr
	...

08015a5c <__errno>:
 8015a5c:	4b01      	ldr	r3, [pc, #4]	; (8015a64 <__errno+0x8>)
 8015a5e:	6818      	ldr	r0, [r3, #0]
 8015a60:	4770      	bx	lr
 8015a62:	bf00      	nop
 8015a64:	2000000c 	.word	0x2000000c

08015a68 <__libc_init_array>:
 8015a68:	b570      	push	{r4, r5, r6, lr}
 8015a6a:	4e0d      	ldr	r6, [pc, #52]	; (8015aa0 <__libc_init_array+0x38>)
 8015a6c:	4c0d      	ldr	r4, [pc, #52]	; (8015aa4 <__libc_init_array+0x3c>)
 8015a6e:	1ba4      	subs	r4, r4, r6
 8015a70:	10a4      	asrs	r4, r4, #2
 8015a72:	2500      	movs	r5, #0
 8015a74:	42a5      	cmp	r5, r4
 8015a76:	d109      	bne.n	8015a8c <__libc_init_array+0x24>
 8015a78:	4e0b      	ldr	r6, [pc, #44]	; (8015aa8 <__libc_init_array+0x40>)
 8015a7a:	4c0c      	ldr	r4, [pc, #48]	; (8015aac <__libc_init_array+0x44>)
 8015a7c:	f004 f9e6 	bl	8019e4c <_init>
 8015a80:	1ba4      	subs	r4, r4, r6
 8015a82:	10a4      	asrs	r4, r4, #2
 8015a84:	2500      	movs	r5, #0
 8015a86:	42a5      	cmp	r5, r4
 8015a88:	d105      	bne.n	8015a96 <__libc_init_array+0x2e>
 8015a8a:	bd70      	pop	{r4, r5, r6, pc}
 8015a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a90:	4798      	blx	r3
 8015a92:	3501      	adds	r5, #1
 8015a94:	e7ee      	b.n	8015a74 <__libc_init_array+0xc>
 8015a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a9a:	4798      	blx	r3
 8015a9c:	3501      	adds	r5, #1
 8015a9e:	e7f2      	b.n	8015a86 <__libc_init_array+0x1e>
 8015aa0:	0801a87c 	.word	0x0801a87c
 8015aa4:	0801a87c 	.word	0x0801a87c
 8015aa8:	0801a87c 	.word	0x0801a87c
 8015aac:	0801a884 	.word	0x0801a884

08015ab0 <memset>:
 8015ab0:	4402      	add	r2, r0
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	d100      	bne.n	8015aba <memset+0xa>
 8015ab8:	4770      	bx	lr
 8015aba:	f803 1b01 	strb.w	r1, [r3], #1
 8015abe:	e7f9      	b.n	8015ab4 <memset+0x4>

08015ac0 <__cvt>:
 8015ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac4:	ec55 4b10 	vmov	r4, r5, d0
 8015ac8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015aca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015ace:	2d00      	cmp	r5, #0
 8015ad0:	460e      	mov	r6, r1
 8015ad2:	4691      	mov	r9, r2
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	bfb8      	it	lt
 8015ad8:	4622      	movlt	r2, r4
 8015ada:	462b      	mov	r3, r5
 8015adc:	f027 0720 	bic.w	r7, r7, #32
 8015ae0:	bfbb      	ittet	lt
 8015ae2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015ae6:	461d      	movlt	r5, r3
 8015ae8:	2300      	movge	r3, #0
 8015aea:	232d      	movlt	r3, #45	; 0x2d
 8015aec:	bfb8      	it	lt
 8015aee:	4614      	movlt	r4, r2
 8015af0:	2f46      	cmp	r7, #70	; 0x46
 8015af2:	700b      	strb	r3, [r1, #0]
 8015af4:	d004      	beq.n	8015b00 <__cvt+0x40>
 8015af6:	2f45      	cmp	r7, #69	; 0x45
 8015af8:	d100      	bne.n	8015afc <__cvt+0x3c>
 8015afa:	3601      	adds	r6, #1
 8015afc:	2102      	movs	r1, #2
 8015afe:	e000      	b.n	8015b02 <__cvt+0x42>
 8015b00:	2103      	movs	r1, #3
 8015b02:	ab03      	add	r3, sp, #12
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	ab02      	add	r3, sp, #8
 8015b08:	9300      	str	r3, [sp, #0]
 8015b0a:	4632      	mov	r2, r6
 8015b0c:	4653      	mov	r3, sl
 8015b0e:	ec45 4b10 	vmov	d0, r4, r5
 8015b12:	f001 fdfd 	bl	8017710 <_dtoa_r>
 8015b16:	2f47      	cmp	r7, #71	; 0x47
 8015b18:	4680      	mov	r8, r0
 8015b1a:	d102      	bne.n	8015b22 <__cvt+0x62>
 8015b1c:	f019 0f01 	tst.w	r9, #1
 8015b20:	d026      	beq.n	8015b70 <__cvt+0xb0>
 8015b22:	2f46      	cmp	r7, #70	; 0x46
 8015b24:	eb08 0906 	add.w	r9, r8, r6
 8015b28:	d111      	bne.n	8015b4e <__cvt+0x8e>
 8015b2a:	f898 3000 	ldrb.w	r3, [r8]
 8015b2e:	2b30      	cmp	r3, #48	; 0x30
 8015b30:	d10a      	bne.n	8015b48 <__cvt+0x88>
 8015b32:	2200      	movs	r2, #0
 8015b34:	2300      	movs	r3, #0
 8015b36:	4620      	mov	r0, r4
 8015b38:	4629      	mov	r1, r5
 8015b3a:	f7ea ffdd 	bl	8000af8 <__aeabi_dcmpeq>
 8015b3e:	b918      	cbnz	r0, 8015b48 <__cvt+0x88>
 8015b40:	f1c6 0601 	rsb	r6, r6, #1
 8015b44:	f8ca 6000 	str.w	r6, [sl]
 8015b48:	f8da 3000 	ldr.w	r3, [sl]
 8015b4c:	4499      	add	r9, r3
 8015b4e:	2200      	movs	r2, #0
 8015b50:	2300      	movs	r3, #0
 8015b52:	4620      	mov	r0, r4
 8015b54:	4629      	mov	r1, r5
 8015b56:	f7ea ffcf 	bl	8000af8 <__aeabi_dcmpeq>
 8015b5a:	b938      	cbnz	r0, 8015b6c <__cvt+0xac>
 8015b5c:	2230      	movs	r2, #48	; 0x30
 8015b5e:	9b03      	ldr	r3, [sp, #12]
 8015b60:	454b      	cmp	r3, r9
 8015b62:	d205      	bcs.n	8015b70 <__cvt+0xb0>
 8015b64:	1c59      	adds	r1, r3, #1
 8015b66:	9103      	str	r1, [sp, #12]
 8015b68:	701a      	strb	r2, [r3, #0]
 8015b6a:	e7f8      	b.n	8015b5e <__cvt+0x9e>
 8015b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015b70:	9b03      	ldr	r3, [sp, #12]
 8015b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b74:	eba3 0308 	sub.w	r3, r3, r8
 8015b78:	4640      	mov	r0, r8
 8015b7a:	6013      	str	r3, [r2, #0]
 8015b7c:	b004      	add	sp, #16
 8015b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015b82 <__exponent>:
 8015b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b84:	2900      	cmp	r1, #0
 8015b86:	4604      	mov	r4, r0
 8015b88:	bfba      	itte	lt
 8015b8a:	4249      	neglt	r1, r1
 8015b8c:	232d      	movlt	r3, #45	; 0x2d
 8015b8e:	232b      	movge	r3, #43	; 0x2b
 8015b90:	2909      	cmp	r1, #9
 8015b92:	f804 2b02 	strb.w	r2, [r4], #2
 8015b96:	7043      	strb	r3, [r0, #1]
 8015b98:	dd20      	ble.n	8015bdc <__exponent+0x5a>
 8015b9a:	f10d 0307 	add.w	r3, sp, #7
 8015b9e:	461f      	mov	r7, r3
 8015ba0:	260a      	movs	r6, #10
 8015ba2:	fb91 f5f6 	sdiv	r5, r1, r6
 8015ba6:	fb06 1115 	mls	r1, r6, r5, r1
 8015baa:	3130      	adds	r1, #48	; 0x30
 8015bac:	2d09      	cmp	r5, #9
 8015bae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015bb2:	f103 32ff 	add.w	r2, r3, #4294967295
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	dc09      	bgt.n	8015bce <__exponent+0x4c>
 8015bba:	3130      	adds	r1, #48	; 0x30
 8015bbc:	3b02      	subs	r3, #2
 8015bbe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015bc2:	42bb      	cmp	r3, r7
 8015bc4:	4622      	mov	r2, r4
 8015bc6:	d304      	bcc.n	8015bd2 <__exponent+0x50>
 8015bc8:	1a10      	subs	r0, r2, r0
 8015bca:	b003      	add	sp, #12
 8015bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bce:	4613      	mov	r3, r2
 8015bd0:	e7e7      	b.n	8015ba2 <__exponent+0x20>
 8015bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bd6:	f804 2b01 	strb.w	r2, [r4], #1
 8015bda:	e7f2      	b.n	8015bc2 <__exponent+0x40>
 8015bdc:	2330      	movs	r3, #48	; 0x30
 8015bde:	4419      	add	r1, r3
 8015be0:	7083      	strb	r3, [r0, #2]
 8015be2:	1d02      	adds	r2, r0, #4
 8015be4:	70c1      	strb	r1, [r0, #3]
 8015be6:	e7ef      	b.n	8015bc8 <__exponent+0x46>

08015be8 <_printf_float>:
 8015be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bec:	b08d      	sub	sp, #52	; 0x34
 8015bee:	460c      	mov	r4, r1
 8015bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015bf4:	4616      	mov	r6, r2
 8015bf6:	461f      	mov	r7, r3
 8015bf8:	4605      	mov	r5, r0
 8015bfa:	f002 fe7b 	bl	80188f4 <_localeconv_r>
 8015bfe:	6803      	ldr	r3, [r0, #0]
 8015c00:	9304      	str	r3, [sp, #16]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ea fafc 	bl	8000200 <strlen>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8015c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c10:	9005      	str	r0, [sp, #20]
 8015c12:	3307      	adds	r3, #7
 8015c14:	f023 0307 	bic.w	r3, r3, #7
 8015c18:	f103 0208 	add.w	r2, r3, #8
 8015c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015c20:	f8d4 b000 	ldr.w	fp, [r4]
 8015c24:	f8c8 2000 	str.w	r2, [r8]
 8015c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015c30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015c34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015c38:	9307      	str	r3, [sp, #28]
 8015c3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8015c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015c42:	4ba7      	ldr	r3, [pc, #668]	; (8015ee0 <_printf_float+0x2f8>)
 8015c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c48:	f7ea ff88 	bl	8000b5c <__aeabi_dcmpun>
 8015c4c:	bb70      	cbnz	r0, 8015cac <_printf_float+0xc4>
 8015c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8015c52:	4ba3      	ldr	r3, [pc, #652]	; (8015ee0 <_printf_float+0x2f8>)
 8015c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c58:	f7ea ff62 	bl	8000b20 <__aeabi_dcmple>
 8015c5c:	bb30      	cbnz	r0, 8015cac <_printf_float+0xc4>
 8015c5e:	2200      	movs	r2, #0
 8015c60:	2300      	movs	r3, #0
 8015c62:	4640      	mov	r0, r8
 8015c64:	4649      	mov	r1, r9
 8015c66:	f7ea ff51 	bl	8000b0c <__aeabi_dcmplt>
 8015c6a:	b110      	cbz	r0, 8015c72 <_printf_float+0x8a>
 8015c6c:	232d      	movs	r3, #45	; 0x2d
 8015c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c72:	4a9c      	ldr	r2, [pc, #624]	; (8015ee4 <_printf_float+0x2fc>)
 8015c74:	4b9c      	ldr	r3, [pc, #624]	; (8015ee8 <_printf_float+0x300>)
 8015c76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015c7a:	bf8c      	ite	hi
 8015c7c:	4690      	movhi	r8, r2
 8015c7e:	4698      	movls	r8, r3
 8015c80:	2303      	movs	r3, #3
 8015c82:	f02b 0204 	bic.w	r2, fp, #4
 8015c86:	6123      	str	r3, [r4, #16]
 8015c88:	6022      	str	r2, [r4, #0]
 8015c8a:	f04f 0900 	mov.w	r9, #0
 8015c8e:	9700      	str	r7, [sp, #0]
 8015c90:	4633      	mov	r3, r6
 8015c92:	aa0b      	add	r2, sp, #44	; 0x2c
 8015c94:	4621      	mov	r1, r4
 8015c96:	4628      	mov	r0, r5
 8015c98:	f000 f9e6 	bl	8016068 <_printf_common>
 8015c9c:	3001      	adds	r0, #1
 8015c9e:	f040 808d 	bne.w	8015dbc <_printf_float+0x1d4>
 8015ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ca6:	b00d      	add	sp, #52	; 0x34
 8015ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cac:	4642      	mov	r2, r8
 8015cae:	464b      	mov	r3, r9
 8015cb0:	4640      	mov	r0, r8
 8015cb2:	4649      	mov	r1, r9
 8015cb4:	f7ea ff52 	bl	8000b5c <__aeabi_dcmpun>
 8015cb8:	b110      	cbz	r0, 8015cc0 <_printf_float+0xd8>
 8015cba:	4a8c      	ldr	r2, [pc, #560]	; (8015eec <_printf_float+0x304>)
 8015cbc:	4b8c      	ldr	r3, [pc, #560]	; (8015ef0 <_printf_float+0x308>)
 8015cbe:	e7da      	b.n	8015c76 <_printf_float+0x8e>
 8015cc0:	6861      	ldr	r1, [r4, #4]
 8015cc2:	1c4b      	adds	r3, r1, #1
 8015cc4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015cc8:	a80a      	add	r0, sp, #40	; 0x28
 8015cca:	d13e      	bne.n	8015d4a <_printf_float+0x162>
 8015ccc:	2306      	movs	r3, #6
 8015cce:	6063      	str	r3, [r4, #4]
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015cd6:	ab09      	add	r3, sp, #36	; 0x24
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	ec49 8b10 	vmov	d0, r8, r9
 8015cde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ce2:	6022      	str	r2, [r4, #0]
 8015ce4:	f8cd a004 	str.w	sl, [sp, #4]
 8015ce8:	6861      	ldr	r1, [r4, #4]
 8015cea:	4628      	mov	r0, r5
 8015cec:	f7ff fee8 	bl	8015ac0 <__cvt>
 8015cf0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015cf4:	2b47      	cmp	r3, #71	; 0x47
 8015cf6:	4680      	mov	r8, r0
 8015cf8:	d109      	bne.n	8015d0e <_printf_float+0x126>
 8015cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cfc:	1cd8      	adds	r0, r3, #3
 8015cfe:	db02      	blt.n	8015d06 <_printf_float+0x11e>
 8015d00:	6862      	ldr	r2, [r4, #4]
 8015d02:	4293      	cmp	r3, r2
 8015d04:	dd47      	ble.n	8015d96 <_printf_float+0x1ae>
 8015d06:	f1aa 0a02 	sub.w	sl, sl, #2
 8015d0a:	fa5f fa8a 	uxtb.w	sl, sl
 8015d0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d14:	d824      	bhi.n	8015d60 <_printf_float+0x178>
 8015d16:	3901      	subs	r1, #1
 8015d18:	4652      	mov	r2, sl
 8015d1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015d1e:	9109      	str	r1, [sp, #36]	; 0x24
 8015d20:	f7ff ff2f 	bl	8015b82 <__exponent>
 8015d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d26:	1813      	adds	r3, r2, r0
 8015d28:	2a01      	cmp	r2, #1
 8015d2a:	4681      	mov	r9, r0
 8015d2c:	6123      	str	r3, [r4, #16]
 8015d2e:	dc02      	bgt.n	8015d36 <_printf_float+0x14e>
 8015d30:	6822      	ldr	r2, [r4, #0]
 8015d32:	07d1      	lsls	r1, r2, #31
 8015d34:	d501      	bpl.n	8015d3a <_printf_float+0x152>
 8015d36:	3301      	adds	r3, #1
 8015d38:	6123      	str	r3, [r4, #16]
 8015d3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d0a5      	beq.n	8015c8e <_printf_float+0xa6>
 8015d42:	232d      	movs	r3, #45	; 0x2d
 8015d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d48:	e7a1      	b.n	8015c8e <_printf_float+0xa6>
 8015d4a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015d4e:	f000 8177 	beq.w	8016040 <_printf_float+0x458>
 8015d52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015d56:	d1bb      	bne.n	8015cd0 <_printf_float+0xe8>
 8015d58:	2900      	cmp	r1, #0
 8015d5a:	d1b9      	bne.n	8015cd0 <_printf_float+0xe8>
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	e7b6      	b.n	8015cce <_printf_float+0xe6>
 8015d60:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015d64:	d119      	bne.n	8015d9a <_printf_float+0x1b2>
 8015d66:	2900      	cmp	r1, #0
 8015d68:	6863      	ldr	r3, [r4, #4]
 8015d6a:	dd0c      	ble.n	8015d86 <_printf_float+0x19e>
 8015d6c:	6121      	str	r1, [r4, #16]
 8015d6e:	b913      	cbnz	r3, 8015d76 <_printf_float+0x18e>
 8015d70:	6822      	ldr	r2, [r4, #0]
 8015d72:	07d2      	lsls	r2, r2, #31
 8015d74:	d502      	bpl.n	8015d7c <_printf_float+0x194>
 8015d76:	3301      	adds	r3, #1
 8015d78:	440b      	add	r3, r1
 8015d7a:	6123      	str	r3, [r4, #16]
 8015d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015d80:	f04f 0900 	mov.w	r9, #0
 8015d84:	e7d9      	b.n	8015d3a <_printf_float+0x152>
 8015d86:	b913      	cbnz	r3, 8015d8e <_printf_float+0x1a6>
 8015d88:	6822      	ldr	r2, [r4, #0]
 8015d8a:	07d0      	lsls	r0, r2, #31
 8015d8c:	d501      	bpl.n	8015d92 <_printf_float+0x1aa>
 8015d8e:	3302      	adds	r3, #2
 8015d90:	e7f3      	b.n	8015d7a <_printf_float+0x192>
 8015d92:	2301      	movs	r3, #1
 8015d94:	e7f1      	b.n	8015d7a <_printf_float+0x192>
 8015d96:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015d9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015d9e:	4293      	cmp	r3, r2
 8015da0:	db05      	blt.n	8015dae <_printf_float+0x1c6>
 8015da2:	6822      	ldr	r2, [r4, #0]
 8015da4:	6123      	str	r3, [r4, #16]
 8015da6:	07d1      	lsls	r1, r2, #31
 8015da8:	d5e8      	bpl.n	8015d7c <_printf_float+0x194>
 8015daa:	3301      	adds	r3, #1
 8015dac:	e7e5      	b.n	8015d7a <_printf_float+0x192>
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	bfd4      	ite	le
 8015db2:	f1c3 0302 	rsble	r3, r3, #2
 8015db6:	2301      	movgt	r3, #1
 8015db8:	4413      	add	r3, r2
 8015dba:	e7de      	b.n	8015d7a <_printf_float+0x192>
 8015dbc:	6823      	ldr	r3, [r4, #0]
 8015dbe:	055a      	lsls	r2, r3, #21
 8015dc0:	d407      	bmi.n	8015dd2 <_printf_float+0x1ea>
 8015dc2:	6923      	ldr	r3, [r4, #16]
 8015dc4:	4642      	mov	r2, r8
 8015dc6:	4631      	mov	r1, r6
 8015dc8:	4628      	mov	r0, r5
 8015dca:	47b8      	blx	r7
 8015dcc:	3001      	adds	r0, #1
 8015dce:	d12b      	bne.n	8015e28 <_printf_float+0x240>
 8015dd0:	e767      	b.n	8015ca2 <_printf_float+0xba>
 8015dd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015dd6:	f240 80dc 	bls.w	8015f92 <_printf_float+0x3aa>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	2300      	movs	r3, #0
 8015dde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015de2:	f7ea fe89 	bl	8000af8 <__aeabi_dcmpeq>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d033      	beq.n	8015e52 <_printf_float+0x26a>
 8015dea:	2301      	movs	r3, #1
 8015dec:	4a41      	ldr	r2, [pc, #260]	; (8015ef4 <_printf_float+0x30c>)
 8015dee:	4631      	mov	r1, r6
 8015df0:	4628      	mov	r0, r5
 8015df2:	47b8      	blx	r7
 8015df4:	3001      	adds	r0, #1
 8015df6:	f43f af54 	beq.w	8015ca2 <_printf_float+0xba>
 8015dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	db02      	blt.n	8015e08 <_printf_float+0x220>
 8015e02:	6823      	ldr	r3, [r4, #0]
 8015e04:	07d8      	lsls	r0, r3, #31
 8015e06:	d50f      	bpl.n	8015e28 <_printf_float+0x240>
 8015e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e0c:	4631      	mov	r1, r6
 8015e0e:	4628      	mov	r0, r5
 8015e10:	47b8      	blx	r7
 8015e12:	3001      	adds	r0, #1
 8015e14:	f43f af45 	beq.w	8015ca2 <_printf_float+0xba>
 8015e18:	f04f 0800 	mov.w	r8, #0
 8015e1c:	f104 091a 	add.w	r9, r4, #26
 8015e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e22:	3b01      	subs	r3, #1
 8015e24:	4543      	cmp	r3, r8
 8015e26:	dc09      	bgt.n	8015e3c <_printf_float+0x254>
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	079b      	lsls	r3, r3, #30
 8015e2c:	f100 8103 	bmi.w	8016036 <_printf_float+0x44e>
 8015e30:	68e0      	ldr	r0, [r4, #12]
 8015e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e34:	4298      	cmp	r0, r3
 8015e36:	bfb8      	it	lt
 8015e38:	4618      	movlt	r0, r3
 8015e3a:	e734      	b.n	8015ca6 <_printf_float+0xbe>
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	464a      	mov	r2, r9
 8015e40:	4631      	mov	r1, r6
 8015e42:	4628      	mov	r0, r5
 8015e44:	47b8      	blx	r7
 8015e46:	3001      	adds	r0, #1
 8015e48:	f43f af2b 	beq.w	8015ca2 <_printf_float+0xba>
 8015e4c:	f108 0801 	add.w	r8, r8, #1
 8015e50:	e7e6      	b.n	8015e20 <_printf_float+0x238>
 8015e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	dc2b      	bgt.n	8015eb0 <_printf_float+0x2c8>
 8015e58:	2301      	movs	r3, #1
 8015e5a:	4a26      	ldr	r2, [pc, #152]	; (8015ef4 <_printf_float+0x30c>)
 8015e5c:	4631      	mov	r1, r6
 8015e5e:	4628      	mov	r0, r5
 8015e60:	47b8      	blx	r7
 8015e62:	3001      	adds	r0, #1
 8015e64:	f43f af1d 	beq.w	8015ca2 <_printf_float+0xba>
 8015e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e6a:	b923      	cbnz	r3, 8015e76 <_printf_float+0x28e>
 8015e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6e:	b913      	cbnz	r3, 8015e76 <_printf_float+0x28e>
 8015e70:	6823      	ldr	r3, [r4, #0]
 8015e72:	07d9      	lsls	r1, r3, #31
 8015e74:	d5d8      	bpl.n	8015e28 <_printf_float+0x240>
 8015e76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e7a:	4631      	mov	r1, r6
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	47b8      	blx	r7
 8015e80:	3001      	adds	r0, #1
 8015e82:	f43f af0e 	beq.w	8015ca2 <_printf_float+0xba>
 8015e86:	f04f 0900 	mov.w	r9, #0
 8015e8a:	f104 0a1a 	add.w	sl, r4, #26
 8015e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e90:	425b      	negs	r3, r3
 8015e92:	454b      	cmp	r3, r9
 8015e94:	dc01      	bgt.n	8015e9a <_printf_float+0x2b2>
 8015e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e98:	e794      	b.n	8015dc4 <_printf_float+0x1dc>
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	4652      	mov	r2, sl
 8015e9e:	4631      	mov	r1, r6
 8015ea0:	4628      	mov	r0, r5
 8015ea2:	47b8      	blx	r7
 8015ea4:	3001      	adds	r0, #1
 8015ea6:	f43f aefc 	beq.w	8015ca2 <_printf_float+0xba>
 8015eaa:	f109 0901 	add.w	r9, r9, #1
 8015eae:	e7ee      	b.n	8015e8e <_printf_float+0x2a6>
 8015eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	bfa8      	it	ge
 8015eb8:	461a      	movge	r2, r3
 8015eba:	2a00      	cmp	r2, #0
 8015ebc:	4691      	mov	r9, r2
 8015ebe:	dd07      	ble.n	8015ed0 <_printf_float+0x2e8>
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	4631      	mov	r1, r6
 8015ec4:	4642      	mov	r2, r8
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	47b8      	blx	r7
 8015eca:	3001      	adds	r0, #1
 8015ecc:	f43f aee9 	beq.w	8015ca2 <_printf_float+0xba>
 8015ed0:	f104 031a 	add.w	r3, r4, #26
 8015ed4:	f04f 0b00 	mov.w	fp, #0
 8015ed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015edc:	9306      	str	r3, [sp, #24]
 8015ede:	e015      	b.n	8015f0c <_printf_float+0x324>
 8015ee0:	7fefffff 	.word	0x7fefffff
 8015ee4:	0801a54c 	.word	0x0801a54c
 8015ee8:	0801a548 	.word	0x0801a548
 8015eec:	0801a554 	.word	0x0801a554
 8015ef0:	0801a550 	.word	0x0801a550
 8015ef4:	0801a70b 	.word	0x0801a70b
 8015ef8:	2301      	movs	r3, #1
 8015efa:	9a06      	ldr	r2, [sp, #24]
 8015efc:	4631      	mov	r1, r6
 8015efe:	4628      	mov	r0, r5
 8015f00:	47b8      	blx	r7
 8015f02:	3001      	adds	r0, #1
 8015f04:	f43f aecd 	beq.w	8015ca2 <_printf_float+0xba>
 8015f08:	f10b 0b01 	add.w	fp, fp, #1
 8015f0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015f10:	ebaa 0309 	sub.w	r3, sl, r9
 8015f14:	455b      	cmp	r3, fp
 8015f16:	dcef      	bgt.n	8015ef8 <_printf_float+0x310>
 8015f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	44d0      	add	r8, sl
 8015f20:	db15      	blt.n	8015f4e <_printf_float+0x366>
 8015f22:	6823      	ldr	r3, [r4, #0]
 8015f24:	07da      	lsls	r2, r3, #31
 8015f26:	d412      	bmi.n	8015f4e <_printf_float+0x366>
 8015f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f2c:	eba3 020a 	sub.w	r2, r3, sl
 8015f30:	eba3 0a01 	sub.w	sl, r3, r1
 8015f34:	4592      	cmp	sl, r2
 8015f36:	bfa8      	it	ge
 8015f38:	4692      	movge	sl, r2
 8015f3a:	f1ba 0f00 	cmp.w	sl, #0
 8015f3e:	dc0e      	bgt.n	8015f5e <_printf_float+0x376>
 8015f40:	f04f 0800 	mov.w	r8, #0
 8015f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f48:	f104 091a 	add.w	r9, r4, #26
 8015f4c:	e019      	b.n	8015f82 <_printf_float+0x39a>
 8015f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f52:	4631      	mov	r1, r6
 8015f54:	4628      	mov	r0, r5
 8015f56:	47b8      	blx	r7
 8015f58:	3001      	adds	r0, #1
 8015f5a:	d1e5      	bne.n	8015f28 <_printf_float+0x340>
 8015f5c:	e6a1      	b.n	8015ca2 <_printf_float+0xba>
 8015f5e:	4653      	mov	r3, sl
 8015f60:	4642      	mov	r2, r8
 8015f62:	4631      	mov	r1, r6
 8015f64:	4628      	mov	r0, r5
 8015f66:	47b8      	blx	r7
 8015f68:	3001      	adds	r0, #1
 8015f6a:	d1e9      	bne.n	8015f40 <_printf_float+0x358>
 8015f6c:	e699      	b.n	8015ca2 <_printf_float+0xba>
 8015f6e:	2301      	movs	r3, #1
 8015f70:	464a      	mov	r2, r9
 8015f72:	4631      	mov	r1, r6
 8015f74:	4628      	mov	r0, r5
 8015f76:	47b8      	blx	r7
 8015f78:	3001      	adds	r0, #1
 8015f7a:	f43f ae92 	beq.w	8015ca2 <_printf_float+0xba>
 8015f7e:	f108 0801 	add.w	r8, r8, #1
 8015f82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f86:	1a9b      	subs	r3, r3, r2
 8015f88:	eba3 030a 	sub.w	r3, r3, sl
 8015f8c:	4543      	cmp	r3, r8
 8015f8e:	dcee      	bgt.n	8015f6e <_printf_float+0x386>
 8015f90:	e74a      	b.n	8015e28 <_printf_float+0x240>
 8015f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f94:	2a01      	cmp	r2, #1
 8015f96:	dc01      	bgt.n	8015f9c <_printf_float+0x3b4>
 8015f98:	07db      	lsls	r3, r3, #31
 8015f9a:	d53a      	bpl.n	8016012 <_printf_float+0x42a>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	4642      	mov	r2, r8
 8015fa0:	4631      	mov	r1, r6
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	47b8      	blx	r7
 8015fa6:	3001      	adds	r0, #1
 8015fa8:	f43f ae7b 	beq.w	8015ca2 <_printf_float+0xba>
 8015fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fb0:	4631      	mov	r1, r6
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	47b8      	blx	r7
 8015fb6:	3001      	adds	r0, #1
 8015fb8:	f108 0801 	add.w	r8, r8, #1
 8015fbc:	f43f ae71 	beq.w	8015ca2 <_printf_float+0xba>
 8015fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	f103 3aff 	add.w	sl, r3, #4294967295
 8015fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015fcc:	2300      	movs	r3, #0
 8015fce:	f7ea fd93 	bl	8000af8 <__aeabi_dcmpeq>
 8015fd2:	b9c8      	cbnz	r0, 8016008 <_printf_float+0x420>
 8015fd4:	4653      	mov	r3, sl
 8015fd6:	4642      	mov	r2, r8
 8015fd8:	4631      	mov	r1, r6
 8015fda:	4628      	mov	r0, r5
 8015fdc:	47b8      	blx	r7
 8015fde:	3001      	adds	r0, #1
 8015fe0:	d10e      	bne.n	8016000 <_printf_float+0x418>
 8015fe2:	e65e      	b.n	8015ca2 <_printf_float+0xba>
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	4652      	mov	r2, sl
 8015fe8:	4631      	mov	r1, r6
 8015fea:	4628      	mov	r0, r5
 8015fec:	47b8      	blx	r7
 8015fee:	3001      	adds	r0, #1
 8015ff0:	f43f ae57 	beq.w	8015ca2 <_printf_float+0xba>
 8015ff4:	f108 0801 	add.w	r8, r8, #1
 8015ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ffa:	3b01      	subs	r3, #1
 8015ffc:	4543      	cmp	r3, r8
 8015ffe:	dcf1      	bgt.n	8015fe4 <_printf_float+0x3fc>
 8016000:	464b      	mov	r3, r9
 8016002:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016006:	e6de      	b.n	8015dc6 <_printf_float+0x1de>
 8016008:	f04f 0800 	mov.w	r8, #0
 801600c:	f104 0a1a 	add.w	sl, r4, #26
 8016010:	e7f2      	b.n	8015ff8 <_printf_float+0x410>
 8016012:	2301      	movs	r3, #1
 8016014:	e7df      	b.n	8015fd6 <_printf_float+0x3ee>
 8016016:	2301      	movs	r3, #1
 8016018:	464a      	mov	r2, r9
 801601a:	4631      	mov	r1, r6
 801601c:	4628      	mov	r0, r5
 801601e:	47b8      	blx	r7
 8016020:	3001      	adds	r0, #1
 8016022:	f43f ae3e 	beq.w	8015ca2 <_printf_float+0xba>
 8016026:	f108 0801 	add.w	r8, r8, #1
 801602a:	68e3      	ldr	r3, [r4, #12]
 801602c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801602e:	1a9b      	subs	r3, r3, r2
 8016030:	4543      	cmp	r3, r8
 8016032:	dcf0      	bgt.n	8016016 <_printf_float+0x42e>
 8016034:	e6fc      	b.n	8015e30 <_printf_float+0x248>
 8016036:	f04f 0800 	mov.w	r8, #0
 801603a:	f104 0919 	add.w	r9, r4, #25
 801603e:	e7f4      	b.n	801602a <_printf_float+0x442>
 8016040:	2900      	cmp	r1, #0
 8016042:	f43f ae8b 	beq.w	8015d5c <_printf_float+0x174>
 8016046:	2300      	movs	r3, #0
 8016048:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801604c:	ab09      	add	r3, sp, #36	; 0x24
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	ec49 8b10 	vmov	d0, r8, r9
 8016054:	6022      	str	r2, [r4, #0]
 8016056:	f8cd a004 	str.w	sl, [sp, #4]
 801605a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801605e:	4628      	mov	r0, r5
 8016060:	f7ff fd2e 	bl	8015ac0 <__cvt>
 8016064:	4680      	mov	r8, r0
 8016066:	e648      	b.n	8015cfa <_printf_float+0x112>

08016068 <_printf_common>:
 8016068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801606c:	4691      	mov	r9, r2
 801606e:	461f      	mov	r7, r3
 8016070:	688a      	ldr	r2, [r1, #8]
 8016072:	690b      	ldr	r3, [r1, #16]
 8016074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016078:	4293      	cmp	r3, r2
 801607a:	bfb8      	it	lt
 801607c:	4613      	movlt	r3, r2
 801607e:	f8c9 3000 	str.w	r3, [r9]
 8016082:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016086:	4606      	mov	r6, r0
 8016088:	460c      	mov	r4, r1
 801608a:	b112      	cbz	r2, 8016092 <_printf_common+0x2a>
 801608c:	3301      	adds	r3, #1
 801608e:	f8c9 3000 	str.w	r3, [r9]
 8016092:	6823      	ldr	r3, [r4, #0]
 8016094:	0699      	lsls	r1, r3, #26
 8016096:	bf42      	ittt	mi
 8016098:	f8d9 3000 	ldrmi.w	r3, [r9]
 801609c:	3302      	addmi	r3, #2
 801609e:	f8c9 3000 	strmi.w	r3, [r9]
 80160a2:	6825      	ldr	r5, [r4, #0]
 80160a4:	f015 0506 	ands.w	r5, r5, #6
 80160a8:	d107      	bne.n	80160ba <_printf_common+0x52>
 80160aa:	f104 0a19 	add.w	sl, r4, #25
 80160ae:	68e3      	ldr	r3, [r4, #12]
 80160b0:	f8d9 2000 	ldr.w	r2, [r9]
 80160b4:	1a9b      	subs	r3, r3, r2
 80160b6:	42ab      	cmp	r3, r5
 80160b8:	dc28      	bgt.n	801610c <_printf_common+0xa4>
 80160ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80160be:	6822      	ldr	r2, [r4, #0]
 80160c0:	3300      	adds	r3, #0
 80160c2:	bf18      	it	ne
 80160c4:	2301      	movne	r3, #1
 80160c6:	0692      	lsls	r2, r2, #26
 80160c8:	d42d      	bmi.n	8016126 <_printf_common+0xbe>
 80160ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160ce:	4639      	mov	r1, r7
 80160d0:	4630      	mov	r0, r6
 80160d2:	47c0      	blx	r8
 80160d4:	3001      	adds	r0, #1
 80160d6:	d020      	beq.n	801611a <_printf_common+0xb2>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	68e5      	ldr	r5, [r4, #12]
 80160dc:	f8d9 2000 	ldr.w	r2, [r9]
 80160e0:	f003 0306 	and.w	r3, r3, #6
 80160e4:	2b04      	cmp	r3, #4
 80160e6:	bf08      	it	eq
 80160e8:	1aad      	subeq	r5, r5, r2
 80160ea:	68a3      	ldr	r3, [r4, #8]
 80160ec:	6922      	ldr	r2, [r4, #16]
 80160ee:	bf0c      	ite	eq
 80160f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80160f4:	2500      	movne	r5, #0
 80160f6:	4293      	cmp	r3, r2
 80160f8:	bfc4      	itt	gt
 80160fa:	1a9b      	subgt	r3, r3, r2
 80160fc:	18ed      	addgt	r5, r5, r3
 80160fe:	f04f 0900 	mov.w	r9, #0
 8016102:	341a      	adds	r4, #26
 8016104:	454d      	cmp	r5, r9
 8016106:	d11a      	bne.n	801613e <_printf_common+0xd6>
 8016108:	2000      	movs	r0, #0
 801610a:	e008      	b.n	801611e <_printf_common+0xb6>
 801610c:	2301      	movs	r3, #1
 801610e:	4652      	mov	r2, sl
 8016110:	4639      	mov	r1, r7
 8016112:	4630      	mov	r0, r6
 8016114:	47c0      	blx	r8
 8016116:	3001      	adds	r0, #1
 8016118:	d103      	bne.n	8016122 <_printf_common+0xba>
 801611a:	f04f 30ff 	mov.w	r0, #4294967295
 801611e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016122:	3501      	adds	r5, #1
 8016124:	e7c3      	b.n	80160ae <_printf_common+0x46>
 8016126:	18e1      	adds	r1, r4, r3
 8016128:	1c5a      	adds	r2, r3, #1
 801612a:	2030      	movs	r0, #48	; 0x30
 801612c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016130:	4422      	add	r2, r4
 8016132:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801613a:	3302      	adds	r3, #2
 801613c:	e7c5      	b.n	80160ca <_printf_common+0x62>
 801613e:	2301      	movs	r3, #1
 8016140:	4622      	mov	r2, r4
 8016142:	4639      	mov	r1, r7
 8016144:	4630      	mov	r0, r6
 8016146:	47c0      	blx	r8
 8016148:	3001      	adds	r0, #1
 801614a:	d0e6      	beq.n	801611a <_printf_common+0xb2>
 801614c:	f109 0901 	add.w	r9, r9, #1
 8016150:	e7d8      	b.n	8016104 <_printf_common+0x9c>
	...

08016154 <_printf_i>:
 8016154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016158:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801615c:	460c      	mov	r4, r1
 801615e:	7e09      	ldrb	r1, [r1, #24]
 8016160:	b085      	sub	sp, #20
 8016162:	296e      	cmp	r1, #110	; 0x6e
 8016164:	4617      	mov	r7, r2
 8016166:	4606      	mov	r6, r0
 8016168:	4698      	mov	r8, r3
 801616a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801616c:	f000 80b3 	beq.w	80162d6 <_printf_i+0x182>
 8016170:	d822      	bhi.n	80161b8 <_printf_i+0x64>
 8016172:	2963      	cmp	r1, #99	; 0x63
 8016174:	d036      	beq.n	80161e4 <_printf_i+0x90>
 8016176:	d80a      	bhi.n	801618e <_printf_i+0x3a>
 8016178:	2900      	cmp	r1, #0
 801617a:	f000 80b9 	beq.w	80162f0 <_printf_i+0x19c>
 801617e:	2958      	cmp	r1, #88	; 0x58
 8016180:	f000 8083 	beq.w	801628a <_printf_i+0x136>
 8016184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016188:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801618c:	e032      	b.n	80161f4 <_printf_i+0xa0>
 801618e:	2964      	cmp	r1, #100	; 0x64
 8016190:	d001      	beq.n	8016196 <_printf_i+0x42>
 8016192:	2969      	cmp	r1, #105	; 0x69
 8016194:	d1f6      	bne.n	8016184 <_printf_i+0x30>
 8016196:	6820      	ldr	r0, [r4, #0]
 8016198:	6813      	ldr	r3, [r2, #0]
 801619a:	0605      	lsls	r5, r0, #24
 801619c:	f103 0104 	add.w	r1, r3, #4
 80161a0:	d52a      	bpl.n	80161f8 <_printf_i+0xa4>
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	6011      	str	r1, [r2, #0]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	da03      	bge.n	80161b2 <_printf_i+0x5e>
 80161aa:	222d      	movs	r2, #45	; 0x2d
 80161ac:	425b      	negs	r3, r3
 80161ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80161b2:	486f      	ldr	r0, [pc, #444]	; (8016370 <_printf_i+0x21c>)
 80161b4:	220a      	movs	r2, #10
 80161b6:	e039      	b.n	801622c <_printf_i+0xd8>
 80161b8:	2973      	cmp	r1, #115	; 0x73
 80161ba:	f000 809d 	beq.w	80162f8 <_printf_i+0x1a4>
 80161be:	d808      	bhi.n	80161d2 <_printf_i+0x7e>
 80161c0:	296f      	cmp	r1, #111	; 0x6f
 80161c2:	d020      	beq.n	8016206 <_printf_i+0xb2>
 80161c4:	2970      	cmp	r1, #112	; 0x70
 80161c6:	d1dd      	bne.n	8016184 <_printf_i+0x30>
 80161c8:	6823      	ldr	r3, [r4, #0]
 80161ca:	f043 0320 	orr.w	r3, r3, #32
 80161ce:	6023      	str	r3, [r4, #0]
 80161d0:	e003      	b.n	80161da <_printf_i+0x86>
 80161d2:	2975      	cmp	r1, #117	; 0x75
 80161d4:	d017      	beq.n	8016206 <_printf_i+0xb2>
 80161d6:	2978      	cmp	r1, #120	; 0x78
 80161d8:	d1d4      	bne.n	8016184 <_printf_i+0x30>
 80161da:	2378      	movs	r3, #120	; 0x78
 80161dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80161e0:	4864      	ldr	r0, [pc, #400]	; (8016374 <_printf_i+0x220>)
 80161e2:	e055      	b.n	8016290 <_printf_i+0x13c>
 80161e4:	6813      	ldr	r3, [r2, #0]
 80161e6:	1d19      	adds	r1, r3, #4
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	6011      	str	r1, [r2, #0]
 80161ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161f4:	2301      	movs	r3, #1
 80161f6:	e08c      	b.n	8016312 <_printf_i+0x1be>
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	6011      	str	r1, [r2, #0]
 80161fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016200:	bf18      	it	ne
 8016202:	b21b      	sxthne	r3, r3
 8016204:	e7cf      	b.n	80161a6 <_printf_i+0x52>
 8016206:	6813      	ldr	r3, [r2, #0]
 8016208:	6825      	ldr	r5, [r4, #0]
 801620a:	1d18      	adds	r0, r3, #4
 801620c:	6010      	str	r0, [r2, #0]
 801620e:	0628      	lsls	r0, r5, #24
 8016210:	d501      	bpl.n	8016216 <_printf_i+0xc2>
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	e002      	b.n	801621c <_printf_i+0xc8>
 8016216:	0668      	lsls	r0, r5, #25
 8016218:	d5fb      	bpl.n	8016212 <_printf_i+0xbe>
 801621a:	881b      	ldrh	r3, [r3, #0]
 801621c:	4854      	ldr	r0, [pc, #336]	; (8016370 <_printf_i+0x21c>)
 801621e:	296f      	cmp	r1, #111	; 0x6f
 8016220:	bf14      	ite	ne
 8016222:	220a      	movne	r2, #10
 8016224:	2208      	moveq	r2, #8
 8016226:	2100      	movs	r1, #0
 8016228:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801622c:	6865      	ldr	r5, [r4, #4]
 801622e:	60a5      	str	r5, [r4, #8]
 8016230:	2d00      	cmp	r5, #0
 8016232:	f2c0 8095 	blt.w	8016360 <_printf_i+0x20c>
 8016236:	6821      	ldr	r1, [r4, #0]
 8016238:	f021 0104 	bic.w	r1, r1, #4
 801623c:	6021      	str	r1, [r4, #0]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d13d      	bne.n	80162be <_printf_i+0x16a>
 8016242:	2d00      	cmp	r5, #0
 8016244:	f040 808e 	bne.w	8016364 <_printf_i+0x210>
 8016248:	4665      	mov	r5, ip
 801624a:	2a08      	cmp	r2, #8
 801624c:	d10b      	bne.n	8016266 <_printf_i+0x112>
 801624e:	6823      	ldr	r3, [r4, #0]
 8016250:	07db      	lsls	r3, r3, #31
 8016252:	d508      	bpl.n	8016266 <_printf_i+0x112>
 8016254:	6923      	ldr	r3, [r4, #16]
 8016256:	6862      	ldr	r2, [r4, #4]
 8016258:	429a      	cmp	r2, r3
 801625a:	bfde      	ittt	le
 801625c:	2330      	movle	r3, #48	; 0x30
 801625e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016262:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016266:	ebac 0305 	sub.w	r3, ip, r5
 801626a:	6123      	str	r3, [r4, #16]
 801626c:	f8cd 8000 	str.w	r8, [sp]
 8016270:	463b      	mov	r3, r7
 8016272:	aa03      	add	r2, sp, #12
 8016274:	4621      	mov	r1, r4
 8016276:	4630      	mov	r0, r6
 8016278:	f7ff fef6 	bl	8016068 <_printf_common>
 801627c:	3001      	adds	r0, #1
 801627e:	d14d      	bne.n	801631c <_printf_i+0x1c8>
 8016280:	f04f 30ff 	mov.w	r0, #4294967295
 8016284:	b005      	add	sp, #20
 8016286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801628a:	4839      	ldr	r0, [pc, #228]	; (8016370 <_printf_i+0x21c>)
 801628c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016290:	6813      	ldr	r3, [r2, #0]
 8016292:	6821      	ldr	r1, [r4, #0]
 8016294:	1d1d      	adds	r5, r3, #4
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	6015      	str	r5, [r2, #0]
 801629a:	060a      	lsls	r2, r1, #24
 801629c:	d50b      	bpl.n	80162b6 <_printf_i+0x162>
 801629e:	07ca      	lsls	r2, r1, #31
 80162a0:	bf44      	itt	mi
 80162a2:	f041 0120 	orrmi.w	r1, r1, #32
 80162a6:	6021      	strmi	r1, [r4, #0]
 80162a8:	b91b      	cbnz	r3, 80162b2 <_printf_i+0x15e>
 80162aa:	6822      	ldr	r2, [r4, #0]
 80162ac:	f022 0220 	bic.w	r2, r2, #32
 80162b0:	6022      	str	r2, [r4, #0]
 80162b2:	2210      	movs	r2, #16
 80162b4:	e7b7      	b.n	8016226 <_printf_i+0xd2>
 80162b6:	064d      	lsls	r5, r1, #25
 80162b8:	bf48      	it	mi
 80162ba:	b29b      	uxthmi	r3, r3
 80162bc:	e7ef      	b.n	801629e <_printf_i+0x14a>
 80162be:	4665      	mov	r5, ip
 80162c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80162c4:	fb02 3311 	mls	r3, r2, r1, r3
 80162c8:	5cc3      	ldrb	r3, [r0, r3]
 80162ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80162ce:	460b      	mov	r3, r1
 80162d0:	2900      	cmp	r1, #0
 80162d2:	d1f5      	bne.n	80162c0 <_printf_i+0x16c>
 80162d4:	e7b9      	b.n	801624a <_printf_i+0xf6>
 80162d6:	6813      	ldr	r3, [r2, #0]
 80162d8:	6825      	ldr	r5, [r4, #0]
 80162da:	6961      	ldr	r1, [r4, #20]
 80162dc:	1d18      	adds	r0, r3, #4
 80162de:	6010      	str	r0, [r2, #0]
 80162e0:	0628      	lsls	r0, r5, #24
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	d501      	bpl.n	80162ea <_printf_i+0x196>
 80162e6:	6019      	str	r1, [r3, #0]
 80162e8:	e002      	b.n	80162f0 <_printf_i+0x19c>
 80162ea:	066a      	lsls	r2, r5, #25
 80162ec:	d5fb      	bpl.n	80162e6 <_printf_i+0x192>
 80162ee:	8019      	strh	r1, [r3, #0]
 80162f0:	2300      	movs	r3, #0
 80162f2:	6123      	str	r3, [r4, #16]
 80162f4:	4665      	mov	r5, ip
 80162f6:	e7b9      	b.n	801626c <_printf_i+0x118>
 80162f8:	6813      	ldr	r3, [r2, #0]
 80162fa:	1d19      	adds	r1, r3, #4
 80162fc:	6011      	str	r1, [r2, #0]
 80162fe:	681d      	ldr	r5, [r3, #0]
 8016300:	6862      	ldr	r2, [r4, #4]
 8016302:	2100      	movs	r1, #0
 8016304:	4628      	mov	r0, r5
 8016306:	f7e9 ff83 	bl	8000210 <memchr>
 801630a:	b108      	cbz	r0, 8016310 <_printf_i+0x1bc>
 801630c:	1b40      	subs	r0, r0, r5
 801630e:	6060      	str	r0, [r4, #4]
 8016310:	6863      	ldr	r3, [r4, #4]
 8016312:	6123      	str	r3, [r4, #16]
 8016314:	2300      	movs	r3, #0
 8016316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801631a:	e7a7      	b.n	801626c <_printf_i+0x118>
 801631c:	6923      	ldr	r3, [r4, #16]
 801631e:	462a      	mov	r2, r5
 8016320:	4639      	mov	r1, r7
 8016322:	4630      	mov	r0, r6
 8016324:	47c0      	blx	r8
 8016326:	3001      	adds	r0, #1
 8016328:	d0aa      	beq.n	8016280 <_printf_i+0x12c>
 801632a:	6823      	ldr	r3, [r4, #0]
 801632c:	079b      	lsls	r3, r3, #30
 801632e:	d413      	bmi.n	8016358 <_printf_i+0x204>
 8016330:	68e0      	ldr	r0, [r4, #12]
 8016332:	9b03      	ldr	r3, [sp, #12]
 8016334:	4298      	cmp	r0, r3
 8016336:	bfb8      	it	lt
 8016338:	4618      	movlt	r0, r3
 801633a:	e7a3      	b.n	8016284 <_printf_i+0x130>
 801633c:	2301      	movs	r3, #1
 801633e:	464a      	mov	r2, r9
 8016340:	4639      	mov	r1, r7
 8016342:	4630      	mov	r0, r6
 8016344:	47c0      	blx	r8
 8016346:	3001      	adds	r0, #1
 8016348:	d09a      	beq.n	8016280 <_printf_i+0x12c>
 801634a:	3501      	adds	r5, #1
 801634c:	68e3      	ldr	r3, [r4, #12]
 801634e:	9a03      	ldr	r2, [sp, #12]
 8016350:	1a9b      	subs	r3, r3, r2
 8016352:	42ab      	cmp	r3, r5
 8016354:	dcf2      	bgt.n	801633c <_printf_i+0x1e8>
 8016356:	e7eb      	b.n	8016330 <_printf_i+0x1dc>
 8016358:	2500      	movs	r5, #0
 801635a:	f104 0919 	add.w	r9, r4, #25
 801635e:	e7f5      	b.n	801634c <_printf_i+0x1f8>
 8016360:	2b00      	cmp	r3, #0
 8016362:	d1ac      	bne.n	80162be <_printf_i+0x16a>
 8016364:	7803      	ldrb	r3, [r0, #0]
 8016366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801636a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801636e:	e76c      	b.n	801624a <_printf_i+0xf6>
 8016370:	0801a558 	.word	0x0801a558
 8016374:	0801a569 	.word	0x0801a569

08016378 <_scanf_float>:
 8016378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801637c:	469a      	mov	sl, r3
 801637e:	688b      	ldr	r3, [r1, #8]
 8016380:	4616      	mov	r6, r2
 8016382:	1e5a      	subs	r2, r3, #1
 8016384:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016388:	b087      	sub	sp, #28
 801638a:	bf83      	ittte	hi
 801638c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016390:	189b      	addhi	r3, r3, r2
 8016392:	9301      	strhi	r3, [sp, #4]
 8016394:	2300      	movls	r3, #0
 8016396:	bf86      	itte	hi
 8016398:	f240 135d 	movwhi	r3, #349	; 0x15d
 801639c:	608b      	strhi	r3, [r1, #8]
 801639e:	9301      	strls	r3, [sp, #4]
 80163a0:	680b      	ldr	r3, [r1, #0]
 80163a2:	4688      	mov	r8, r1
 80163a4:	f04f 0b00 	mov.w	fp, #0
 80163a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80163ac:	f848 3b1c 	str.w	r3, [r8], #28
 80163b0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80163b4:	4607      	mov	r7, r0
 80163b6:	460c      	mov	r4, r1
 80163b8:	4645      	mov	r5, r8
 80163ba:	465a      	mov	r2, fp
 80163bc:	46d9      	mov	r9, fp
 80163be:	f8cd b008 	str.w	fp, [sp, #8]
 80163c2:	68a1      	ldr	r1, [r4, #8]
 80163c4:	b181      	cbz	r1, 80163e8 <_scanf_float+0x70>
 80163c6:	6833      	ldr	r3, [r6, #0]
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	2b49      	cmp	r3, #73	; 0x49
 80163cc:	d071      	beq.n	80164b2 <_scanf_float+0x13a>
 80163ce:	d84d      	bhi.n	801646c <_scanf_float+0xf4>
 80163d0:	2b39      	cmp	r3, #57	; 0x39
 80163d2:	d840      	bhi.n	8016456 <_scanf_float+0xde>
 80163d4:	2b31      	cmp	r3, #49	; 0x31
 80163d6:	f080 8088 	bcs.w	80164ea <_scanf_float+0x172>
 80163da:	2b2d      	cmp	r3, #45	; 0x2d
 80163dc:	f000 8090 	beq.w	8016500 <_scanf_float+0x188>
 80163e0:	d815      	bhi.n	801640e <_scanf_float+0x96>
 80163e2:	2b2b      	cmp	r3, #43	; 0x2b
 80163e4:	f000 808c 	beq.w	8016500 <_scanf_float+0x188>
 80163e8:	f1b9 0f00 	cmp.w	r9, #0
 80163ec:	d003      	beq.n	80163f6 <_scanf_float+0x7e>
 80163ee:	6823      	ldr	r3, [r4, #0]
 80163f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80163f4:	6023      	str	r3, [r4, #0]
 80163f6:	3a01      	subs	r2, #1
 80163f8:	2a01      	cmp	r2, #1
 80163fa:	f200 80ea 	bhi.w	80165d2 <_scanf_float+0x25a>
 80163fe:	4545      	cmp	r5, r8
 8016400:	f200 80dc 	bhi.w	80165bc <_scanf_float+0x244>
 8016404:	2601      	movs	r6, #1
 8016406:	4630      	mov	r0, r6
 8016408:	b007      	add	sp, #28
 801640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801640e:	2b2e      	cmp	r3, #46	; 0x2e
 8016410:	f000 809f 	beq.w	8016552 <_scanf_float+0x1da>
 8016414:	2b30      	cmp	r3, #48	; 0x30
 8016416:	d1e7      	bne.n	80163e8 <_scanf_float+0x70>
 8016418:	6820      	ldr	r0, [r4, #0]
 801641a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801641e:	d064      	beq.n	80164ea <_scanf_float+0x172>
 8016420:	9b01      	ldr	r3, [sp, #4]
 8016422:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016426:	6020      	str	r0, [r4, #0]
 8016428:	f109 0901 	add.w	r9, r9, #1
 801642c:	b11b      	cbz	r3, 8016436 <_scanf_float+0xbe>
 801642e:	3b01      	subs	r3, #1
 8016430:	3101      	adds	r1, #1
 8016432:	9301      	str	r3, [sp, #4]
 8016434:	60a1      	str	r1, [r4, #8]
 8016436:	68a3      	ldr	r3, [r4, #8]
 8016438:	3b01      	subs	r3, #1
 801643a:	60a3      	str	r3, [r4, #8]
 801643c:	6923      	ldr	r3, [r4, #16]
 801643e:	3301      	adds	r3, #1
 8016440:	6123      	str	r3, [r4, #16]
 8016442:	6873      	ldr	r3, [r6, #4]
 8016444:	3b01      	subs	r3, #1
 8016446:	2b00      	cmp	r3, #0
 8016448:	6073      	str	r3, [r6, #4]
 801644a:	f340 80ac 	ble.w	80165a6 <_scanf_float+0x22e>
 801644e:	6833      	ldr	r3, [r6, #0]
 8016450:	3301      	adds	r3, #1
 8016452:	6033      	str	r3, [r6, #0]
 8016454:	e7b5      	b.n	80163c2 <_scanf_float+0x4a>
 8016456:	2b45      	cmp	r3, #69	; 0x45
 8016458:	f000 8085 	beq.w	8016566 <_scanf_float+0x1ee>
 801645c:	2b46      	cmp	r3, #70	; 0x46
 801645e:	d06a      	beq.n	8016536 <_scanf_float+0x1be>
 8016460:	2b41      	cmp	r3, #65	; 0x41
 8016462:	d1c1      	bne.n	80163e8 <_scanf_float+0x70>
 8016464:	2a01      	cmp	r2, #1
 8016466:	d1bf      	bne.n	80163e8 <_scanf_float+0x70>
 8016468:	2202      	movs	r2, #2
 801646a:	e046      	b.n	80164fa <_scanf_float+0x182>
 801646c:	2b65      	cmp	r3, #101	; 0x65
 801646e:	d07a      	beq.n	8016566 <_scanf_float+0x1ee>
 8016470:	d818      	bhi.n	80164a4 <_scanf_float+0x12c>
 8016472:	2b54      	cmp	r3, #84	; 0x54
 8016474:	d066      	beq.n	8016544 <_scanf_float+0x1cc>
 8016476:	d811      	bhi.n	801649c <_scanf_float+0x124>
 8016478:	2b4e      	cmp	r3, #78	; 0x4e
 801647a:	d1b5      	bne.n	80163e8 <_scanf_float+0x70>
 801647c:	2a00      	cmp	r2, #0
 801647e:	d146      	bne.n	801650e <_scanf_float+0x196>
 8016480:	f1b9 0f00 	cmp.w	r9, #0
 8016484:	d145      	bne.n	8016512 <_scanf_float+0x19a>
 8016486:	6821      	ldr	r1, [r4, #0]
 8016488:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801648c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016490:	d13f      	bne.n	8016512 <_scanf_float+0x19a>
 8016492:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016496:	6021      	str	r1, [r4, #0]
 8016498:	2201      	movs	r2, #1
 801649a:	e02e      	b.n	80164fa <_scanf_float+0x182>
 801649c:	2b59      	cmp	r3, #89	; 0x59
 801649e:	d01e      	beq.n	80164de <_scanf_float+0x166>
 80164a0:	2b61      	cmp	r3, #97	; 0x61
 80164a2:	e7de      	b.n	8016462 <_scanf_float+0xea>
 80164a4:	2b6e      	cmp	r3, #110	; 0x6e
 80164a6:	d0e9      	beq.n	801647c <_scanf_float+0x104>
 80164a8:	d815      	bhi.n	80164d6 <_scanf_float+0x15e>
 80164aa:	2b66      	cmp	r3, #102	; 0x66
 80164ac:	d043      	beq.n	8016536 <_scanf_float+0x1be>
 80164ae:	2b69      	cmp	r3, #105	; 0x69
 80164b0:	d19a      	bne.n	80163e8 <_scanf_float+0x70>
 80164b2:	f1bb 0f00 	cmp.w	fp, #0
 80164b6:	d138      	bne.n	801652a <_scanf_float+0x1b2>
 80164b8:	f1b9 0f00 	cmp.w	r9, #0
 80164bc:	d197      	bne.n	80163ee <_scanf_float+0x76>
 80164be:	6821      	ldr	r1, [r4, #0]
 80164c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80164c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80164c8:	d195      	bne.n	80163f6 <_scanf_float+0x7e>
 80164ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164ce:	6021      	str	r1, [r4, #0]
 80164d0:	f04f 0b01 	mov.w	fp, #1
 80164d4:	e011      	b.n	80164fa <_scanf_float+0x182>
 80164d6:	2b74      	cmp	r3, #116	; 0x74
 80164d8:	d034      	beq.n	8016544 <_scanf_float+0x1cc>
 80164da:	2b79      	cmp	r3, #121	; 0x79
 80164dc:	d184      	bne.n	80163e8 <_scanf_float+0x70>
 80164de:	f1bb 0f07 	cmp.w	fp, #7
 80164e2:	d181      	bne.n	80163e8 <_scanf_float+0x70>
 80164e4:	f04f 0b08 	mov.w	fp, #8
 80164e8:	e007      	b.n	80164fa <_scanf_float+0x182>
 80164ea:	eb12 0f0b 	cmn.w	r2, fp
 80164ee:	f47f af7b 	bne.w	80163e8 <_scanf_float+0x70>
 80164f2:	6821      	ldr	r1, [r4, #0]
 80164f4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80164f8:	6021      	str	r1, [r4, #0]
 80164fa:	702b      	strb	r3, [r5, #0]
 80164fc:	3501      	adds	r5, #1
 80164fe:	e79a      	b.n	8016436 <_scanf_float+0xbe>
 8016500:	6821      	ldr	r1, [r4, #0]
 8016502:	0608      	lsls	r0, r1, #24
 8016504:	f57f af70 	bpl.w	80163e8 <_scanf_float+0x70>
 8016508:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801650c:	e7f4      	b.n	80164f8 <_scanf_float+0x180>
 801650e:	2a02      	cmp	r2, #2
 8016510:	d047      	beq.n	80165a2 <_scanf_float+0x22a>
 8016512:	f1bb 0f01 	cmp.w	fp, #1
 8016516:	d003      	beq.n	8016520 <_scanf_float+0x1a8>
 8016518:	f1bb 0f04 	cmp.w	fp, #4
 801651c:	f47f af64 	bne.w	80163e8 <_scanf_float+0x70>
 8016520:	f10b 0b01 	add.w	fp, fp, #1
 8016524:	fa5f fb8b 	uxtb.w	fp, fp
 8016528:	e7e7      	b.n	80164fa <_scanf_float+0x182>
 801652a:	f1bb 0f03 	cmp.w	fp, #3
 801652e:	d0f7      	beq.n	8016520 <_scanf_float+0x1a8>
 8016530:	f1bb 0f05 	cmp.w	fp, #5
 8016534:	e7f2      	b.n	801651c <_scanf_float+0x1a4>
 8016536:	f1bb 0f02 	cmp.w	fp, #2
 801653a:	f47f af55 	bne.w	80163e8 <_scanf_float+0x70>
 801653e:	f04f 0b03 	mov.w	fp, #3
 8016542:	e7da      	b.n	80164fa <_scanf_float+0x182>
 8016544:	f1bb 0f06 	cmp.w	fp, #6
 8016548:	f47f af4e 	bne.w	80163e8 <_scanf_float+0x70>
 801654c:	f04f 0b07 	mov.w	fp, #7
 8016550:	e7d3      	b.n	80164fa <_scanf_float+0x182>
 8016552:	6821      	ldr	r1, [r4, #0]
 8016554:	0588      	lsls	r0, r1, #22
 8016556:	f57f af47 	bpl.w	80163e8 <_scanf_float+0x70>
 801655a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801655e:	6021      	str	r1, [r4, #0]
 8016560:	f8cd 9008 	str.w	r9, [sp, #8]
 8016564:	e7c9      	b.n	80164fa <_scanf_float+0x182>
 8016566:	6821      	ldr	r1, [r4, #0]
 8016568:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801656c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016570:	d006      	beq.n	8016580 <_scanf_float+0x208>
 8016572:	0548      	lsls	r0, r1, #21
 8016574:	f57f af38 	bpl.w	80163e8 <_scanf_float+0x70>
 8016578:	f1b9 0f00 	cmp.w	r9, #0
 801657c:	f43f af3b 	beq.w	80163f6 <_scanf_float+0x7e>
 8016580:	0588      	lsls	r0, r1, #22
 8016582:	bf58      	it	pl
 8016584:	9802      	ldrpl	r0, [sp, #8]
 8016586:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801658a:	bf58      	it	pl
 801658c:	eba9 0000 	subpl.w	r0, r9, r0
 8016590:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016594:	bf58      	it	pl
 8016596:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801659a:	6021      	str	r1, [r4, #0]
 801659c:	f04f 0900 	mov.w	r9, #0
 80165a0:	e7ab      	b.n	80164fa <_scanf_float+0x182>
 80165a2:	2203      	movs	r2, #3
 80165a4:	e7a9      	b.n	80164fa <_scanf_float+0x182>
 80165a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80165aa:	9205      	str	r2, [sp, #20]
 80165ac:	4631      	mov	r1, r6
 80165ae:	4638      	mov	r0, r7
 80165b0:	4798      	blx	r3
 80165b2:	9a05      	ldr	r2, [sp, #20]
 80165b4:	2800      	cmp	r0, #0
 80165b6:	f43f af04 	beq.w	80163c2 <_scanf_float+0x4a>
 80165ba:	e715      	b.n	80163e8 <_scanf_float+0x70>
 80165bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165c4:	4632      	mov	r2, r6
 80165c6:	4638      	mov	r0, r7
 80165c8:	4798      	blx	r3
 80165ca:	6923      	ldr	r3, [r4, #16]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	6123      	str	r3, [r4, #16]
 80165d0:	e715      	b.n	80163fe <_scanf_float+0x86>
 80165d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80165d6:	2b06      	cmp	r3, #6
 80165d8:	d80a      	bhi.n	80165f0 <_scanf_float+0x278>
 80165da:	f1bb 0f02 	cmp.w	fp, #2
 80165de:	d968      	bls.n	80166b2 <_scanf_float+0x33a>
 80165e0:	f1ab 0b03 	sub.w	fp, fp, #3
 80165e4:	fa5f fb8b 	uxtb.w	fp, fp
 80165e8:	eba5 0b0b 	sub.w	fp, r5, fp
 80165ec:	455d      	cmp	r5, fp
 80165ee:	d14b      	bne.n	8016688 <_scanf_float+0x310>
 80165f0:	6823      	ldr	r3, [r4, #0]
 80165f2:	05da      	lsls	r2, r3, #23
 80165f4:	d51f      	bpl.n	8016636 <_scanf_float+0x2be>
 80165f6:	055b      	lsls	r3, r3, #21
 80165f8:	d468      	bmi.n	80166cc <_scanf_float+0x354>
 80165fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80165fe:	6923      	ldr	r3, [r4, #16]
 8016600:	2965      	cmp	r1, #101	; 0x65
 8016602:	f103 33ff 	add.w	r3, r3, #4294967295
 8016606:	f105 3bff 	add.w	fp, r5, #4294967295
 801660a:	6123      	str	r3, [r4, #16]
 801660c:	d00d      	beq.n	801662a <_scanf_float+0x2b2>
 801660e:	2945      	cmp	r1, #69	; 0x45
 8016610:	d00b      	beq.n	801662a <_scanf_float+0x2b2>
 8016612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016616:	4632      	mov	r2, r6
 8016618:	4638      	mov	r0, r7
 801661a:	4798      	blx	r3
 801661c:	6923      	ldr	r3, [r4, #16]
 801661e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016622:	3b01      	subs	r3, #1
 8016624:	f1a5 0b02 	sub.w	fp, r5, #2
 8016628:	6123      	str	r3, [r4, #16]
 801662a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801662e:	4632      	mov	r2, r6
 8016630:	4638      	mov	r0, r7
 8016632:	4798      	blx	r3
 8016634:	465d      	mov	r5, fp
 8016636:	6826      	ldr	r6, [r4, #0]
 8016638:	f016 0610 	ands.w	r6, r6, #16
 801663c:	d17a      	bne.n	8016734 <_scanf_float+0x3bc>
 801663e:	702e      	strb	r6, [r5, #0]
 8016640:	6823      	ldr	r3, [r4, #0]
 8016642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801664a:	d142      	bne.n	80166d2 <_scanf_float+0x35a>
 801664c:	9b02      	ldr	r3, [sp, #8]
 801664e:	eba9 0303 	sub.w	r3, r9, r3
 8016652:	425a      	negs	r2, r3
 8016654:	2b00      	cmp	r3, #0
 8016656:	d149      	bne.n	80166ec <_scanf_float+0x374>
 8016658:	2200      	movs	r2, #0
 801665a:	4641      	mov	r1, r8
 801665c:	4638      	mov	r0, r7
 801665e:	f000 ff0b 	bl	8017478 <_strtod_r>
 8016662:	6825      	ldr	r5, [r4, #0]
 8016664:	f8da 3000 	ldr.w	r3, [sl]
 8016668:	f015 0f02 	tst.w	r5, #2
 801666c:	f103 0204 	add.w	r2, r3, #4
 8016670:	ec59 8b10 	vmov	r8, r9, d0
 8016674:	f8ca 2000 	str.w	r2, [sl]
 8016678:	d043      	beq.n	8016702 <_scanf_float+0x38a>
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	e9c3 8900 	strd	r8, r9, [r3]
 8016680:	68e3      	ldr	r3, [r4, #12]
 8016682:	3301      	adds	r3, #1
 8016684:	60e3      	str	r3, [r4, #12]
 8016686:	e6be      	b.n	8016406 <_scanf_float+0x8e>
 8016688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801668c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016690:	4632      	mov	r2, r6
 8016692:	4638      	mov	r0, r7
 8016694:	4798      	blx	r3
 8016696:	6923      	ldr	r3, [r4, #16]
 8016698:	3b01      	subs	r3, #1
 801669a:	6123      	str	r3, [r4, #16]
 801669c:	e7a6      	b.n	80165ec <_scanf_float+0x274>
 801669e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166a2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166a6:	4632      	mov	r2, r6
 80166a8:	4638      	mov	r0, r7
 80166aa:	4798      	blx	r3
 80166ac:	6923      	ldr	r3, [r4, #16]
 80166ae:	3b01      	subs	r3, #1
 80166b0:	6123      	str	r3, [r4, #16]
 80166b2:	4545      	cmp	r5, r8
 80166b4:	d8f3      	bhi.n	801669e <_scanf_float+0x326>
 80166b6:	e6a5      	b.n	8016404 <_scanf_float+0x8c>
 80166b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166c0:	4632      	mov	r2, r6
 80166c2:	4638      	mov	r0, r7
 80166c4:	4798      	blx	r3
 80166c6:	6923      	ldr	r3, [r4, #16]
 80166c8:	3b01      	subs	r3, #1
 80166ca:	6123      	str	r3, [r4, #16]
 80166cc:	4545      	cmp	r5, r8
 80166ce:	d8f3      	bhi.n	80166b8 <_scanf_float+0x340>
 80166d0:	e698      	b.n	8016404 <_scanf_float+0x8c>
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d0bf      	beq.n	8016658 <_scanf_float+0x2e0>
 80166d8:	9904      	ldr	r1, [sp, #16]
 80166da:	230a      	movs	r3, #10
 80166dc:	4632      	mov	r2, r6
 80166de:	3101      	adds	r1, #1
 80166e0:	4638      	mov	r0, r7
 80166e2:	f000 ff55 	bl	8017590 <_strtol_r>
 80166e6:	9b03      	ldr	r3, [sp, #12]
 80166e8:	9d04      	ldr	r5, [sp, #16]
 80166ea:	1ac2      	subs	r2, r0, r3
 80166ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80166f0:	429d      	cmp	r5, r3
 80166f2:	bf28      	it	cs
 80166f4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80166f8:	490f      	ldr	r1, [pc, #60]	; (8016738 <_scanf_float+0x3c0>)
 80166fa:	4628      	mov	r0, r5
 80166fc:	f000 f858 	bl	80167b0 <siprintf>
 8016700:	e7aa      	b.n	8016658 <_scanf_float+0x2e0>
 8016702:	f015 0504 	ands.w	r5, r5, #4
 8016706:	d1b8      	bne.n	801667a <_scanf_float+0x302>
 8016708:	681f      	ldr	r7, [r3, #0]
 801670a:	ee10 2a10 	vmov	r2, s0
 801670e:	464b      	mov	r3, r9
 8016710:	ee10 0a10 	vmov	r0, s0
 8016714:	4649      	mov	r1, r9
 8016716:	f7ea fa21 	bl	8000b5c <__aeabi_dcmpun>
 801671a:	b128      	cbz	r0, 8016728 <_scanf_float+0x3b0>
 801671c:	4628      	mov	r0, r5
 801671e:	f000 f80d 	bl	801673c <nanf>
 8016722:	ed87 0a00 	vstr	s0, [r7]
 8016726:	e7ab      	b.n	8016680 <_scanf_float+0x308>
 8016728:	4640      	mov	r0, r8
 801672a:	4649      	mov	r1, r9
 801672c:	f7ea fa74 	bl	8000c18 <__aeabi_d2f>
 8016730:	6038      	str	r0, [r7, #0]
 8016732:	e7a5      	b.n	8016680 <_scanf_float+0x308>
 8016734:	2600      	movs	r6, #0
 8016736:	e666      	b.n	8016406 <_scanf_float+0x8e>
 8016738:	0801a57a 	.word	0x0801a57a

0801673c <nanf>:
 801673c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016744 <nanf+0x8>
 8016740:	4770      	bx	lr
 8016742:	bf00      	nop
 8016744:	7fc00000 	.word	0x7fc00000

08016748 <sniprintf>:
 8016748:	b40c      	push	{r2, r3}
 801674a:	b530      	push	{r4, r5, lr}
 801674c:	4b17      	ldr	r3, [pc, #92]	; (80167ac <sniprintf+0x64>)
 801674e:	1e0c      	subs	r4, r1, #0
 8016750:	b09d      	sub	sp, #116	; 0x74
 8016752:	681d      	ldr	r5, [r3, #0]
 8016754:	da08      	bge.n	8016768 <sniprintf+0x20>
 8016756:	238b      	movs	r3, #139	; 0x8b
 8016758:	602b      	str	r3, [r5, #0]
 801675a:	f04f 30ff 	mov.w	r0, #4294967295
 801675e:	b01d      	add	sp, #116	; 0x74
 8016760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016764:	b002      	add	sp, #8
 8016766:	4770      	bx	lr
 8016768:	f44f 7302 	mov.w	r3, #520	; 0x208
 801676c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016770:	bf14      	ite	ne
 8016772:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016776:	4623      	moveq	r3, r4
 8016778:	9304      	str	r3, [sp, #16]
 801677a:	9307      	str	r3, [sp, #28]
 801677c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016780:	9002      	str	r0, [sp, #8]
 8016782:	9006      	str	r0, [sp, #24]
 8016784:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016788:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801678a:	ab21      	add	r3, sp, #132	; 0x84
 801678c:	a902      	add	r1, sp, #8
 801678e:	4628      	mov	r0, r5
 8016790:	9301      	str	r3, [sp, #4]
 8016792:	f002 fdf1 	bl	8019378 <_svfiprintf_r>
 8016796:	1c43      	adds	r3, r0, #1
 8016798:	bfbc      	itt	lt
 801679a:	238b      	movlt	r3, #139	; 0x8b
 801679c:	602b      	strlt	r3, [r5, #0]
 801679e:	2c00      	cmp	r4, #0
 80167a0:	d0dd      	beq.n	801675e <sniprintf+0x16>
 80167a2:	9b02      	ldr	r3, [sp, #8]
 80167a4:	2200      	movs	r2, #0
 80167a6:	701a      	strb	r2, [r3, #0]
 80167a8:	e7d9      	b.n	801675e <sniprintf+0x16>
 80167aa:	bf00      	nop
 80167ac:	2000000c 	.word	0x2000000c

080167b0 <siprintf>:
 80167b0:	b40e      	push	{r1, r2, r3}
 80167b2:	b500      	push	{lr}
 80167b4:	b09c      	sub	sp, #112	; 0x70
 80167b6:	ab1d      	add	r3, sp, #116	; 0x74
 80167b8:	9002      	str	r0, [sp, #8]
 80167ba:	9006      	str	r0, [sp, #24]
 80167bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80167c0:	4809      	ldr	r0, [pc, #36]	; (80167e8 <siprintf+0x38>)
 80167c2:	9107      	str	r1, [sp, #28]
 80167c4:	9104      	str	r1, [sp, #16]
 80167c6:	4909      	ldr	r1, [pc, #36]	; (80167ec <siprintf+0x3c>)
 80167c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80167cc:	9105      	str	r1, [sp, #20]
 80167ce:	6800      	ldr	r0, [r0, #0]
 80167d0:	9301      	str	r3, [sp, #4]
 80167d2:	a902      	add	r1, sp, #8
 80167d4:	f002 fdd0 	bl	8019378 <_svfiprintf_r>
 80167d8:	9b02      	ldr	r3, [sp, #8]
 80167da:	2200      	movs	r2, #0
 80167dc:	701a      	strb	r2, [r3, #0]
 80167de:	b01c      	add	sp, #112	; 0x70
 80167e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80167e4:	b003      	add	sp, #12
 80167e6:	4770      	bx	lr
 80167e8:	2000000c 	.word	0x2000000c
 80167ec:	ffff0208 	.word	0xffff0208

080167f0 <siscanf>:
 80167f0:	b40e      	push	{r1, r2, r3}
 80167f2:	b530      	push	{r4, r5, lr}
 80167f4:	b09c      	sub	sp, #112	; 0x70
 80167f6:	ac1f      	add	r4, sp, #124	; 0x7c
 80167f8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80167fc:	f854 5b04 	ldr.w	r5, [r4], #4
 8016800:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016804:	9002      	str	r0, [sp, #8]
 8016806:	9006      	str	r0, [sp, #24]
 8016808:	f7e9 fcfa 	bl	8000200 <strlen>
 801680c:	4b0b      	ldr	r3, [pc, #44]	; (801683c <siscanf+0x4c>)
 801680e:	9003      	str	r0, [sp, #12]
 8016810:	9007      	str	r0, [sp, #28]
 8016812:	930b      	str	r3, [sp, #44]	; 0x2c
 8016814:	480a      	ldr	r0, [pc, #40]	; (8016840 <siscanf+0x50>)
 8016816:	9401      	str	r4, [sp, #4]
 8016818:	2300      	movs	r3, #0
 801681a:	930f      	str	r3, [sp, #60]	; 0x3c
 801681c:	9314      	str	r3, [sp, #80]	; 0x50
 801681e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016822:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016826:	462a      	mov	r2, r5
 8016828:	4623      	mov	r3, r4
 801682a:	a902      	add	r1, sp, #8
 801682c:	6800      	ldr	r0, [r0, #0]
 801682e:	f002 fef5 	bl	801961c <__ssvfiscanf_r>
 8016832:	b01c      	add	sp, #112	; 0x70
 8016834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016838:	b003      	add	sp, #12
 801683a:	4770      	bx	lr
 801683c:	08016845 	.word	0x08016845
 8016840:	2000000c 	.word	0x2000000c

08016844 <__seofread>:
 8016844:	2000      	movs	r0, #0
 8016846:	4770      	bx	lr

08016848 <strcpy>:
 8016848:	4603      	mov	r3, r0
 801684a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801684e:	f803 2b01 	strb.w	r2, [r3], #1
 8016852:	2a00      	cmp	r2, #0
 8016854:	d1f9      	bne.n	801684a <strcpy+0x2>
 8016856:	4770      	bx	lr

08016858 <sulp>:
 8016858:	b570      	push	{r4, r5, r6, lr}
 801685a:	4604      	mov	r4, r0
 801685c:	460d      	mov	r5, r1
 801685e:	ec45 4b10 	vmov	d0, r4, r5
 8016862:	4616      	mov	r6, r2
 8016864:	f002 fb44 	bl	8018ef0 <__ulp>
 8016868:	ec51 0b10 	vmov	r0, r1, d0
 801686c:	b17e      	cbz	r6, 801688e <sulp+0x36>
 801686e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016876:	2b00      	cmp	r3, #0
 8016878:	dd09      	ble.n	801688e <sulp+0x36>
 801687a:	051b      	lsls	r3, r3, #20
 801687c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016880:	2400      	movs	r4, #0
 8016882:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016886:	4622      	mov	r2, r4
 8016888:	462b      	mov	r3, r5
 801688a:	f7e9 fecd 	bl	8000628 <__aeabi_dmul>
 801688e:	bd70      	pop	{r4, r5, r6, pc}

08016890 <_strtod_l>:
 8016890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016894:	461f      	mov	r7, r3
 8016896:	b0a1      	sub	sp, #132	; 0x84
 8016898:	2300      	movs	r3, #0
 801689a:	4681      	mov	r9, r0
 801689c:	4638      	mov	r0, r7
 801689e:	460e      	mov	r6, r1
 80168a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80168a2:	931c      	str	r3, [sp, #112]	; 0x70
 80168a4:	f002 f824 	bl	80188f0 <__localeconv_l>
 80168a8:	4680      	mov	r8, r0
 80168aa:	6800      	ldr	r0, [r0, #0]
 80168ac:	f7e9 fca8 	bl	8000200 <strlen>
 80168b0:	f04f 0a00 	mov.w	sl, #0
 80168b4:	4604      	mov	r4, r0
 80168b6:	f04f 0b00 	mov.w	fp, #0
 80168ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80168bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168be:	781a      	ldrb	r2, [r3, #0]
 80168c0:	2a0d      	cmp	r2, #13
 80168c2:	d832      	bhi.n	801692a <_strtod_l+0x9a>
 80168c4:	2a09      	cmp	r2, #9
 80168c6:	d236      	bcs.n	8016936 <_strtod_l+0xa6>
 80168c8:	2a00      	cmp	r2, #0
 80168ca:	d03e      	beq.n	801694a <_strtod_l+0xba>
 80168cc:	2300      	movs	r3, #0
 80168ce:	930d      	str	r3, [sp, #52]	; 0x34
 80168d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80168d2:	782b      	ldrb	r3, [r5, #0]
 80168d4:	2b30      	cmp	r3, #48	; 0x30
 80168d6:	f040 80ac 	bne.w	8016a32 <_strtod_l+0x1a2>
 80168da:	786b      	ldrb	r3, [r5, #1]
 80168dc:	2b58      	cmp	r3, #88	; 0x58
 80168de:	d001      	beq.n	80168e4 <_strtod_l+0x54>
 80168e0:	2b78      	cmp	r3, #120	; 0x78
 80168e2:	d167      	bne.n	80169b4 <_strtod_l+0x124>
 80168e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168e6:	9301      	str	r3, [sp, #4]
 80168e8:	ab1c      	add	r3, sp, #112	; 0x70
 80168ea:	9300      	str	r3, [sp, #0]
 80168ec:	9702      	str	r7, [sp, #8]
 80168ee:	ab1d      	add	r3, sp, #116	; 0x74
 80168f0:	4a88      	ldr	r2, [pc, #544]	; (8016b14 <_strtod_l+0x284>)
 80168f2:	a91b      	add	r1, sp, #108	; 0x6c
 80168f4:	4648      	mov	r0, r9
 80168f6:	f001 fd12 	bl	801831e <__gethex>
 80168fa:	f010 0407 	ands.w	r4, r0, #7
 80168fe:	4606      	mov	r6, r0
 8016900:	d005      	beq.n	801690e <_strtod_l+0x7e>
 8016902:	2c06      	cmp	r4, #6
 8016904:	d12b      	bne.n	801695e <_strtod_l+0xce>
 8016906:	3501      	adds	r5, #1
 8016908:	2300      	movs	r3, #0
 801690a:	951b      	str	r5, [sp, #108]	; 0x6c
 801690c:	930d      	str	r3, [sp, #52]	; 0x34
 801690e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016910:	2b00      	cmp	r3, #0
 8016912:	f040 859a 	bne.w	801744a <_strtod_l+0xbba>
 8016916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016918:	b1e3      	cbz	r3, 8016954 <_strtod_l+0xc4>
 801691a:	4652      	mov	r2, sl
 801691c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016920:	ec43 2b10 	vmov	d0, r2, r3
 8016924:	b021      	add	sp, #132	; 0x84
 8016926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801692a:	2a2b      	cmp	r2, #43	; 0x2b
 801692c:	d015      	beq.n	801695a <_strtod_l+0xca>
 801692e:	2a2d      	cmp	r2, #45	; 0x2d
 8016930:	d004      	beq.n	801693c <_strtod_l+0xac>
 8016932:	2a20      	cmp	r2, #32
 8016934:	d1ca      	bne.n	80168cc <_strtod_l+0x3c>
 8016936:	3301      	adds	r3, #1
 8016938:	931b      	str	r3, [sp, #108]	; 0x6c
 801693a:	e7bf      	b.n	80168bc <_strtod_l+0x2c>
 801693c:	2201      	movs	r2, #1
 801693e:	920d      	str	r2, [sp, #52]	; 0x34
 8016940:	1c5a      	adds	r2, r3, #1
 8016942:	921b      	str	r2, [sp, #108]	; 0x6c
 8016944:	785b      	ldrb	r3, [r3, #1]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d1c2      	bne.n	80168d0 <_strtod_l+0x40>
 801694a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801694c:	961b      	str	r6, [sp, #108]	; 0x6c
 801694e:	2b00      	cmp	r3, #0
 8016950:	f040 8579 	bne.w	8017446 <_strtod_l+0xbb6>
 8016954:	4652      	mov	r2, sl
 8016956:	465b      	mov	r3, fp
 8016958:	e7e2      	b.n	8016920 <_strtod_l+0x90>
 801695a:	2200      	movs	r2, #0
 801695c:	e7ef      	b.n	801693e <_strtod_l+0xae>
 801695e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016960:	b13a      	cbz	r2, 8016972 <_strtod_l+0xe2>
 8016962:	2135      	movs	r1, #53	; 0x35
 8016964:	a81e      	add	r0, sp, #120	; 0x78
 8016966:	f002 fbbb 	bl	80190e0 <__copybits>
 801696a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801696c:	4648      	mov	r0, r9
 801696e:	f002 f828 	bl	80189c2 <_Bfree>
 8016972:	3c01      	subs	r4, #1
 8016974:	2c04      	cmp	r4, #4
 8016976:	d806      	bhi.n	8016986 <_strtod_l+0xf6>
 8016978:	e8df f004 	tbb	[pc, r4]
 801697c:	1714030a 	.word	0x1714030a
 8016980:	0a          	.byte	0x0a
 8016981:	00          	.byte	0x00
 8016982:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016986:	0730      	lsls	r0, r6, #28
 8016988:	d5c1      	bpl.n	801690e <_strtod_l+0x7e>
 801698a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801698e:	e7be      	b.n	801690e <_strtod_l+0x7e>
 8016990:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016994:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016996:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801699a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801699e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80169a2:	e7f0      	b.n	8016986 <_strtod_l+0xf6>
 80169a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016b18 <_strtod_l+0x288>
 80169a8:	e7ed      	b.n	8016986 <_strtod_l+0xf6>
 80169aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80169ae:	f04f 3aff 	mov.w	sl, #4294967295
 80169b2:	e7e8      	b.n	8016986 <_strtod_l+0xf6>
 80169b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80169ba:	785b      	ldrb	r3, [r3, #1]
 80169bc:	2b30      	cmp	r3, #48	; 0x30
 80169be:	d0f9      	beq.n	80169b4 <_strtod_l+0x124>
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d0a4      	beq.n	801690e <_strtod_l+0x7e>
 80169c4:	2301      	movs	r3, #1
 80169c6:	2500      	movs	r5, #0
 80169c8:	9306      	str	r3, [sp, #24]
 80169ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169cc:	9308      	str	r3, [sp, #32]
 80169ce:	9507      	str	r5, [sp, #28]
 80169d0:	9505      	str	r5, [sp, #20]
 80169d2:	220a      	movs	r2, #10
 80169d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80169d6:	7807      	ldrb	r7, [r0, #0]
 80169d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80169dc:	b2d9      	uxtb	r1, r3
 80169de:	2909      	cmp	r1, #9
 80169e0:	d929      	bls.n	8016a36 <_strtod_l+0x1a6>
 80169e2:	4622      	mov	r2, r4
 80169e4:	f8d8 1000 	ldr.w	r1, [r8]
 80169e8:	f003 f902 	bl	8019bf0 <strncmp>
 80169ec:	2800      	cmp	r0, #0
 80169ee:	d031      	beq.n	8016a54 <_strtod_l+0x1c4>
 80169f0:	2000      	movs	r0, #0
 80169f2:	9c05      	ldr	r4, [sp, #20]
 80169f4:	9004      	str	r0, [sp, #16]
 80169f6:	463b      	mov	r3, r7
 80169f8:	4602      	mov	r2, r0
 80169fa:	2b65      	cmp	r3, #101	; 0x65
 80169fc:	d001      	beq.n	8016a02 <_strtod_l+0x172>
 80169fe:	2b45      	cmp	r3, #69	; 0x45
 8016a00:	d114      	bne.n	8016a2c <_strtod_l+0x19c>
 8016a02:	b924      	cbnz	r4, 8016a0e <_strtod_l+0x17e>
 8016a04:	b910      	cbnz	r0, 8016a0c <_strtod_l+0x17c>
 8016a06:	9b06      	ldr	r3, [sp, #24]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d09e      	beq.n	801694a <_strtod_l+0xba>
 8016a0c:	2400      	movs	r4, #0
 8016a0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016a10:	1c73      	adds	r3, r6, #1
 8016a12:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a14:	7873      	ldrb	r3, [r6, #1]
 8016a16:	2b2b      	cmp	r3, #43	; 0x2b
 8016a18:	d078      	beq.n	8016b0c <_strtod_l+0x27c>
 8016a1a:	2b2d      	cmp	r3, #45	; 0x2d
 8016a1c:	d070      	beq.n	8016b00 <_strtod_l+0x270>
 8016a1e:	f04f 0c00 	mov.w	ip, #0
 8016a22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016a26:	2f09      	cmp	r7, #9
 8016a28:	d97c      	bls.n	8016b24 <_strtod_l+0x294>
 8016a2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a2c:	f04f 0e00 	mov.w	lr, #0
 8016a30:	e09a      	b.n	8016b68 <_strtod_l+0x2d8>
 8016a32:	2300      	movs	r3, #0
 8016a34:	e7c7      	b.n	80169c6 <_strtod_l+0x136>
 8016a36:	9905      	ldr	r1, [sp, #20]
 8016a38:	2908      	cmp	r1, #8
 8016a3a:	bfdd      	ittte	le
 8016a3c:	9907      	ldrle	r1, [sp, #28]
 8016a3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016a42:	9307      	strle	r3, [sp, #28]
 8016a44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016a48:	9b05      	ldr	r3, [sp, #20]
 8016a4a:	3001      	adds	r0, #1
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	9305      	str	r3, [sp, #20]
 8016a50:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a52:	e7bf      	b.n	80169d4 <_strtod_l+0x144>
 8016a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a56:	191a      	adds	r2, r3, r4
 8016a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a5a:	9a05      	ldr	r2, [sp, #20]
 8016a5c:	5d1b      	ldrb	r3, [r3, r4]
 8016a5e:	2a00      	cmp	r2, #0
 8016a60:	d037      	beq.n	8016ad2 <_strtod_l+0x242>
 8016a62:	9c05      	ldr	r4, [sp, #20]
 8016a64:	4602      	mov	r2, r0
 8016a66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016a6a:	2909      	cmp	r1, #9
 8016a6c:	d913      	bls.n	8016a96 <_strtod_l+0x206>
 8016a6e:	2101      	movs	r1, #1
 8016a70:	9104      	str	r1, [sp, #16]
 8016a72:	e7c2      	b.n	80169fa <_strtod_l+0x16a>
 8016a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a76:	1c5a      	adds	r2, r3, #1
 8016a78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a7a:	785b      	ldrb	r3, [r3, #1]
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	2b30      	cmp	r3, #48	; 0x30
 8016a80:	d0f8      	beq.n	8016a74 <_strtod_l+0x1e4>
 8016a82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016a86:	2a08      	cmp	r2, #8
 8016a88:	f200 84e4 	bhi.w	8017454 <_strtod_l+0xbc4>
 8016a8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a8e:	9208      	str	r2, [sp, #32]
 8016a90:	4602      	mov	r2, r0
 8016a92:	2000      	movs	r0, #0
 8016a94:	4604      	mov	r4, r0
 8016a96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016a9a:	f100 0101 	add.w	r1, r0, #1
 8016a9e:	d012      	beq.n	8016ac6 <_strtod_l+0x236>
 8016aa0:	440a      	add	r2, r1
 8016aa2:	eb00 0c04 	add.w	ip, r0, r4
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	270a      	movs	r7, #10
 8016aaa:	458c      	cmp	ip, r1
 8016aac:	d113      	bne.n	8016ad6 <_strtod_l+0x246>
 8016aae:	1821      	adds	r1, r4, r0
 8016ab0:	2908      	cmp	r1, #8
 8016ab2:	f104 0401 	add.w	r4, r4, #1
 8016ab6:	4404      	add	r4, r0
 8016ab8:	dc19      	bgt.n	8016aee <_strtod_l+0x25e>
 8016aba:	9b07      	ldr	r3, [sp, #28]
 8016abc:	210a      	movs	r1, #10
 8016abe:	fb01 e303 	mla	r3, r1, r3, lr
 8016ac2:	9307      	str	r3, [sp, #28]
 8016ac4:	2100      	movs	r1, #0
 8016ac6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ac8:	1c58      	adds	r0, r3, #1
 8016aca:	901b      	str	r0, [sp, #108]	; 0x6c
 8016acc:	785b      	ldrb	r3, [r3, #1]
 8016ace:	4608      	mov	r0, r1
 8016ad0:	e7c9      	b.n	8016a66 <_strtod_l+0x1d6>
 8016ad2:	9805      	ldr	r0, [sp, #20]
 8016ad4:	e7d3      	b.n	8016a7e <_strtod_l+0x1ee>
 8016ad6:	2908      	cmp	r1, #8
 8016ad8:	f101 0101 	add.w	r1, r1, #1
 8016adc:	dc03      	bgt.n	8016ae6 <_strtod_l+0x256>
 8016ade:	9b07      	ldr	r3, [sp, #28]
 8016ae0:	437b      	muls	r3, r7
 8016ae2:	9307      	str	r3, [sp, #28]
 8016ae4:	e7e1      	b.n	8016aaa <_strtod_l+0x21a>
 8016ae6:	2910      	cmp	r1, #16
 8016ae8:	bfd8      	it	le
 8016aea:	437d      	mulle	r5, r7
 8016aec:	e7dd      	b.n	8016aaa <_strtod_l+0x21a>
 8016aee:	2c10      	cmp	r4, #16
 8016af0:	bfdc      	itt	le
 8016af2:	210a      	movle	r1, #10
 8016af4:	fb01 e505 	mlale	r5, r1, r5, lr
 8016af8:	e7e4      	b.n	8016ac4 <_strtod_l+0x234>
 8016afa:	2301      	movs	r3, #1
 8016afc:	9304      	str	r3, [sp, #16]
 8016afe:	e781      	b.n	8016a04 <_strtod_l+0x174>
 8016b00:	f04f 0c01 	mov.w	ip, #1
 8016b04:	1cb3      	adds	r3, r6, #2
 8016b06:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b08:	78b3      	ldrb	r3, [r6, #2]
 8016b0a:	e78a      	b.n	8016a22 <_strtod_l+0x192>
 8016b0c:	f04f 0c00 	mov.w	ip, #0
 8016b10:	e7f8      	b.n	8016b04 <_strtod_l+0x274>
 8016b12:	bf00      	nop
 8016b14:	0801a580 	.word	0x0801a580
 8016b18:	7ff00000 	.word	0x7ff00000
 8016b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b1e:	1c5f      	adds	r7, r3, #1
 8016b20:	971b      	str	r7, [sp, #108]	; 0x6c
 8016b22:	785b      	ldrb	r3, [r3, #1]
 8016b24:	2b30      	cmp	r3, #48	; 0x30
 8016b26:	d0f9      	beq.n	8016b1c <_strtod_l+0x28c>
 8016b28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016b2c:	2f08      	cmp	r7, #8
 8016b2e:	f63f af7d 	bhi.w	8016a2c <_strtod_l+0x19c>
 8016b32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016b36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b38:	930a      	str	r3, [sp, #40]	; 0x28
 8016b3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b3c:	1c5f      	adds	r7, r3, #1
 8016b3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016b40:	785b      	ldrb	r3, [r3, #1]
 8016b42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016b46:	f1b8 0f09 	cmp.w	r8, #9
 8016b4a:	d937      	bls.n	8016bbc <_strtod_l+0x32c>
 8016b4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016b4e:	1a7f      	subs	r7, r7, r1
 8016b50:	2f08      	cmp	r7, #8
 8016b52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016b56:	dc37      	bgt.n	8016bc8 <_strtod_l+0x338>
 8016b58:	45be      	cmp	lr, r7
 8016b5a:	bfa8      	it	ge
 8016b5c:	46be      	movge	lr, r7
 8016b5e:	f1bc 0f00 	cmp.w	ip, #0
 8016b62:	d001      	beq.n	8016b68 <_strtod_l+0x2d8>
 8016b64:	f1ce 0e00 	rsb	lr, lr, #0
 8016b68:	2c00      	cmp	r4, #0
 8016b6a:	d151      	bne.n	8016c10 <_strtod_l+0x380>
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	f47f aece 	bne.w	801690e <_strtod_l+0x7e>
 8016b72:	9a06      	ldr	r2, [sp, #24]
 8016b74:	2a00      	cmp	r2, #0
 8016b76:	f47f aeca 	bne.w	801690e <_strtod_l+0x7e>
 8016b7a:	9a04      	ldr	r2, [sp, #16]
 8016b7c:	2a00      	cmp	r2, #0
 8016b7e:	f47f aee4 	bne.w	801694a <_strtod_l+0xba>
 8016b82:	2b4e      	cmp	r3, #78	; 0x4e
 8016b84:	d027      	beq.n	8016bd6 <_strtod_l+0x346>
 8016b86:	dc21      	bgt.n	8016bcc <_strtod_l+0x33c>
 8016b88:	2b49      	cmp	r3, #73	; 0x49
 8016b8a:	f47f aede 	bne.w	801694a <_strtod_l+0xba>
 8016b8e:	49a0      	ldr	r1, [pc, #640]	; (8016e10 <_strtod_l+0x580>)
 8016b90:	a81b      	add	r0, sp, #108	; 0x6c
 8016b92:	f001 fdf7 	bl	8018784 <__match>
 8016b96:	2800      	cmp	r0, #0
 8016b98:	f43f aed7 	beq.w	801694a <_strtod_l+0xba>
 8016b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b9e:	499d      	ldr	r1, [pc, #628]	; (8016e14 <_strtod_l+0x584>)
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	a81b      	add	r0, sp, #108	; 0x6c
 8016ba4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ba6:	f001 fded 	bl	8018784 <__match>
 8016baa:	b910      	cbnz	r0, 8016bb2 <_strtod_l+0x322>
 8016bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bae:	3301      	adds	r3, #1
 8016bb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016e28 <_strtod_l+0x598>
 8016bb6:	f04f 0a00 	mov.w	sl, #0
 8016bba:	e6a8      	b.n	801690e <_strtod_l+0x7e>
 8016bbc:	210a      	movs	r1, #10
 8016bbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016bc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016bc6:	e7b8      	b.n	8016b3a <_strtod_l+0x2aa>
 8016bc8:	46be      	mov	lr, r7
 8016bca:	e7c8      	b.n	8016b5e <_strtod_l+0x2ce>
 8016bcc:	2b69      	cmp	r3, #105	; 0x69
 8016bce:	d0de      	beq.n	8016b8e <_strtod_l+0x2fe>
 8016bd0:	2b6e      	cmp	r3, #110	; 0x6e
 8016bd2:	f47f aeba 	bne.w	801694a <_strtod_l+0xba>
 8016bd6:	4990      	ldr	r1, [pc, #576]	; (8016e18 <_strtod_l+0x588>)
 8016bd8:	a81b      	add	r0, sp, #108	; 0x6c
 8016bda:	f001 fdd3 	bl	8018784 <__match>
 8016bde:	2800      	cmp	r0, #0
 8016be0:	f43f aeb3 	beq.w	801694a <_strtod_l+0xba>
 8016be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b28      	cmp	r3, #40	; 0x28
 8016bea:	d10e      	bne.n	8016c0a <_strtod_l+0x37a>
 8016bec:	aa1e      	add	r2, sp, #120	; 0x78
 8016bee:	498b      	ldr	r1, [pc, #556]	; (8016e1c <_strtod_l+0x58c>)
 8016bf0:	a81b      	add	r0, sp, #108	; 0x6c
 8016bf2:	f001 fddb 	bl	80187ac <__hexnan>
 8016bf6:	2805      	cmp	r0, #5
 8016bf8:	d107      	bne.n	8016c0a <_strtod_l+0x37a>
 8016bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016bfc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016c00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016c04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016c08:	e681      	b.n	801690e <_strtod_l+0x7e>
 8016c0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016e30 <_strtod_l+0x5a0>
 8016c0e:	e7d2      	b.n	8016bb6 <_strtod_l+0x326>
 8016c10:	ebae 0302 	sub.w	r3, lr, r2
 8016c14:	9306      	str	r3, [sp, #24]
 8016c16:	9b05      	ldr	r3, [sp, #20]
 8016c18:	9807      	ldr	r0, [sp, #28]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	bf08      	it	eq
 8016c1e:	4623      	moveq	r3, r4
 8016c20:	2c10      	cmp	r4, #16
 8016c22:	9305      	str	r3, [sp, #20]
 8016c24:	46a0      	mov	r8, r4
 8016c26:	bfa8      	it	ge
 8016c28:	f04f 0810 	movge.w	r8, #16
 8016c2c:	f7e9 fc82 	bl	8000534 <__aeabi_ui2d>
 8016c30:	2c09      	cmp	r4, #9
 8016c32:	4682      	mov	sl, r0
 8016c34:	468b      	mov	fp, r1
 8016c36:	dc13      	bgt.n	8016c60 <_strtod_l+0x3d0>
 8016c38:	9b06      	ldr	r3, [sp, #24]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	f43f ae67 	beq.w	801690e <_strtod_l+0x7e>
 8016c40:	9b06      	ldr	r3, [sp, #24]
 8016c42:	dd7a      	ble.n	8016d3a <_strtod_l+0x4aa>
 8016c44:	2b16      	cmp	r3, #22
 8016c46:	dc61      	bgt.n	8016d0c <_strtod_l+0x47c>
 8016c48:	4a75      	ldr	r2, [pc, #468]	; (8016e20 <_strtod_l+0x590>)
 8016c4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016c4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016c52:	4652      	mov	r2, sl
 8016c54:	465b      	mov	r3, fp
 8016c56:	f7e9 fce7 	bl	8000628 <__aeabi_dmul>
 8016c5a:	4682      	mov	sl, r0
 8016c5c:	468b      	mov	fp, r1
 8016c5e:	e656      	b.n	801690e <_strtod_l+0x7e>
 8016c60:	4b6f      	ldr	r3, [pc, #444]	; (8016e20 <_strtod_l+0x590>)
 8016c62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016c66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016c6a:	f7e9 fcdd 	bl	8000628 <__aeabi_dmul>
 8016c6e:	4606      	mov	r6, r0
 8016c70:	4628      	mov	r0, r5
 8016c72:	460f      	mov	r7, r1
 8016c74:	f7e9 fc5e 	bl	8000534 <__aeabi_ui2d>
 8016c78:	4602      	mov	r2, r0
 8016c7a:	460b      	mov	r3, r1
 8016c7c:	4630      	mov	r0, r6
 8016c7e:	4639      	mov	r1, r7
 8016c80:	f7e9 fb1c 	bl	80002bc <__adddf3>
 8016c84:	2c0f      	cmp	r4, #15
 8016c86:	4682      	mov	sl, r0
 8016c88:	468b      	mov	fp, r1
 8016c8a:	ddd5      	ble.n	8016c38 <_strtod_l+0x3a8>
 8016c8c:	9b06      	ldr	r3, [sp, #24]
 8016c8e:	eba4 0808 	sub.w	r8, r4, r8
 8016c92:	4498      	add	r8, r3
 8016c94:	f1b8 0f00 	cmp.w	r8, #0
 8016c98:	f340 8096 	ble.w	8016dc8 <_strtod_l+0x538>
 8016c9c:	f018 030f 	ands.w	r3, r8, #15
 8016ca0:	d00a      	beq.n	8016cb8 <_strtod_l+0x428>
 8016ca2:	495f      	ldr	r1, [pc, #380]	; (8016e20 <_strtod_l+0x590>)
 8016ca4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016ca8:	4652      	mov	r2, sl
 8016caa:	465b      	mov	r3, fp
 8016cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cb0:	f7e9 fcba 	bl	8000628 <__aeabi_dmul>
 8016cb4:	4682      	mov	sl, r0
 8016cb6:	468b      	mov	fp, r1
 8016cb8:	f038 080f 	bics.w	r8, r8, #15
 8016cbc:	d073      	beq.n	8016da6 <_strtod_l+0x516>
 8016cbe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016cc2:	dd47      	ble.n	8016d54 <_strtod_l+0x4c4>
 8016cc4:	2400      	movs	r4, #0
 8016cc6:	46a0      	mov	r8, r4
 8016cc8:	9407      	str	r4, [sp, #28]
 8016cca:	9405      	str	r4, [sp, #20]
 8016ccc:	2322      	movs	r3, #34	; 0x22
 8016cce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016e28 <_strtod_l+0x598>
 8016cd2:	f8c9 3000 	str.w	r3, [r9]
 8016cd6:	f04f 0a00 	mov.w	sl, #0
 8016cda:	9b07      	ldr	r3, [sp, #28]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f43f ae16 	beq.w	801690e <_strtod_l+0x7e>
 8016ce2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ce4:	4648      	mov	r0, r9
 8016ce6:	f001 fe6c 	bl	80189c2 <_Bfree>
 8016cea:	9905      	ldr	r1, [sp, #20]
 8016cec:	4648      	mov	r0, r9
 8016cee:	f001 fe68 	bl	80189c2 <_Bfree>
 8016cf2:	4641      	mov	r1, r8
 8016cf4:	4648      	mov	r0, r9
 8016cf6:	f001 fe64 	bl	80189c2 <_Bfree>
 8016cfa:	9907      	ldr	r1, [sp, #28]
 8016cfc:	4648      	mov	r0, r9
 8016cfe:	f001 fe60 	bl	80189c2 <_Bfree>
 8016d02:	4621      	mov	r1, r4
 8016d04:	4648      	mov	r0, r9
 8016d06:	f001 fe5c 	bl	80189c2 <_Bfree>
 8016d0a:	e600      	b.n	801690e <_strtod_l+0x7e>
 8016d0c:	9a06      	ldr	r2, [sp, #24]
 8016d0e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016d12:	4293      	cmp	r3, r2
 8016d14:	dbba      	blt.n	8016c8c <_strtod_l+0x3fc>
 8016d16:	4d42      	ldr	r5, [pc, #264]	; (8016e20 <_strtod_l+0x590>)
 8016d18:	f1c4 040f 	rsb	r4, r4, #15
 8016d1c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016d20:	4652      	mov	r2, sl
 8016d22:	465b      	mov	r3, fp
 8016d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d28:	f7e9 fc7e 	bl	8000628 <__aeabi_dmul>
 8016d2c:	9b06      	ldr	r3, [sp, #24]
 8016d2e:	1b1c      	subs	r4, r3, r4
 8016d30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016d34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d38:	e78d      	b.n	8016c56 <_strtod_l+0x3c6>
 8016d3a:	f113 0f16 	cmn.w	r3, #22
 8016d3e:	dba5      	blt.n	8016c8c <_strtod_l+0x3fc>
 8016d40:	4a37      	ldr	r2, [pc, #220]	; (8016e20 <_strtod_l+0x590>)
 8016d42:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016d46:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016d4a:	4650      	mov	r0, sl
 8016d4c:	4659      	mov	r1, fp
 8016d4e:	f7e9 fd95 	bl	800087c <__aeabi_ddiv>
 8016d52:	e782      	b.n	8016c5a <_strtod_l+0x3ca>
 8016d54:	2300      	movs	r3, #0
 8016d56:	4e33      	ldr	r6, [pc, #204]	; (8016e24 <_strtod_l+0x594>)
 8016d58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016d5c:	4650      	mov	r0, sl
 8016d5e:	4659      	mov	r1, fp
 8016d60:	461d      	mov	r5, r3
 8016d62:	f1b8 0f01 	cmp.w	r8, #1
 8016d66:	dc21      	bgt.n	8016dac <_strtod_l+0x51c>
 8016d68:	b10b      	cbz	r3, 8016d6e <_strtod_l+0x4de>
 8016d6a:	4682      	mov	sl, r0
 8016d6c:	468b      	mov	fp, r1
 8016d6e:	4b2d      	ldr	r3, [pc, #180]	; (8016e24 <_strtod_l+0x594>)
 8016d70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016d74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016d78:	4652      	mov	r2, sl
 8016d7a:	465b      	mov	r3, fp
 8016d7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016d80:	f7e9 fc52 	bl	8000628 <__aeabi_dmul>
 8016d84:	4b28      	ldr	r3, [pc, #160]	; (8016e28 <_strtod_l+0x598>)
 8016d86:	460a      	mov	r2, r1
 8016d88:	400b      	ands	r3, r1
 8016d8a:	4928      	ldr	r1, [pc, #160]	; (8016e2c <_strtod_l+0x59c>)
 8016d8c:	428b      	cmp	r3, r1
 8016d8e:	4682      	mov	sl, r0
 8016d90:	d898      	bhi.n	8016cc4 <_strtod_l+0x434>
 8016d92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016d96:	428b      	cmp	r3, r1
 8016d98:	bf86      	itte	hi
 8016d9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016e34 <_strtod_l+0x5a4>
 8016d9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016da2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016da6:	2300      	movs	r3, #0
 8016da8:	9304      	str	r3, [sp, #16]
 8016daa:	e077      	b.n	8016e9c <_strtod_l+0x60c>
 8016dac:	f018 0f01 	tst.w	r8, #1
 8016db0:	d006      	beq.n	8016dc0 <_strtod_l+0x530>
 8016db2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dba:	f7e9 fc35 	bl	8000628 <__aeabi_dmul>
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	3501      	adds	r5, #1
 8016dc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016dc6:	e7cc      	b.n	8016d62 <_strtod_l+0x4d2>
 8016dc8:	d0ed      	beq.n	8016da6 <_strtod_l+0x516>
 8016dca:	f1c8 0800 	rsb	r8, r8, #0
 8016dce:	f018 020f 	ands.w	r2, r8, #15
 8016dd2:	d00a      	beq.n	8016dea <_strtod_l+0x55a>
 8016dd4:	4b12      	ldr	r3, [pc, #72]	; (8016e20 <_strtod_l+0x590>)
 8016dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016dda:	4650      	mov	r0, sl
 8016ddc:	4659      	mov	r1, fp
 8016dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de2:	f7e9 fd4b 	bl	800087c <__aeabi_ddiv>
 8016de6:	4682      	mov	sl, r0
 8016de8:	468b      	mov	fp, r1
 8016dea:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016dee:	d0da      	beq.n	8016da6 <_strtod_l+0x516>
 8016df0:	f1b8 0f1f 	cmp.w	r8, #31
 8016df4:	dd20      	ble.n	8016e38 <_strtod_l+0x5a8>
 8016df6:	2400      	movs	r4, #0
 8016df8:	46a0      	mov	r8, r4
 8016dfa:	9407      	str	r4, [sp, #28]
 8016dfc:	9405      	str	r4, [sp, #20]
 8016dfe:	2322      	movs	r3, #34	; 0x22
 8016e00:	f04f 0a00 	mov.w	sl, #0
 8016e04:	f04f 0b00 	mov.w	fp, #0
 8016e08:	f8c9 3000 	str.w	r3, [r9]
 8016e0c:	e765      	b.n	8016cda <_strtod_l+0x44a>
 8016e0e:	bf00      	nop
 8016e10:	0801a54d 	.word	0x0801a54d
 8016e14:	0801a5d3 	.word	0x0801a5d3
 8016e18:	0801a555 	.word	0x0801a555
 8016e1c:	0801a594 	.word	0x0801a594
 8016e20:	0801a610 	.word	0x0801a610
 8016e24:	0801a5e8 	.word	0x0801a5e8
 8016e28:	7ff00000 	.word	0x7ff00000
 8016e2c:	7ca00000 	.word	0x7ca00000
 8016e30:	fff80000 	.word	0xfff80000
 8016e34:	7fefffff 	.word	0x7fefffff
 8016e38:	f018 0310 	ands.w	r3, r8, #16
 8016e3c:	bf18      	it	ne
 8016e3e:	236a      	movne	r3, #106	; 0x6a
 8016e40:	4da0      	ldr	r5, [pc, #640]	; (80170c4 <_strtod_l+0x834>)
 8016e42:	9304      	str	r3, [sp, #16]
 8016e44:	4650      	mov	r0, sl
 8016e46:	4659      	mov	r1, fp
 8016e48:	2300      	movs	r3, #0
 8016e4a:	f1b8 0f00 	cmp.w	r8, #0
 8016e4e:	f300 810a 	bgt.w	8017066 <_strtod_l+0x7d6>
 8016e52:	b10b      	cbz	r3, 8016e58 <_strtod_l+0x5c8>
 8016e54:	4682      	mov	sl, r0
 8016e56:	468b      	mov	fp, r1
 8016e58:	9b04      	ldr	r3, [sp, #16]
 8016e5a:	b1bb      	cbz	r3, 8016e8c <_strtod_l+0x5fc>
 8016e5c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016e60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	4659      	mov	r1, fp
 8016e68:	dd10      	ble.n	8016e8c <_strtod_l+0x5fc>
 8016e6a:	2b1f      	cmp	r3, #31
 8016e6c:	f340 8107 	ble.w	801707e <_strtod_l+0x7ee>
 8016e70:	2b34      	cmp	r3, #52	; 0x34
 8016e72:	bfde      	ittt	le
 8016e74:	3b20      	suble	r3, #32
 8016e76:	f04f 32ff 	movle.w	r2, #4294967295
 8016e7a:	fa02 f303 	lslle.w	r3, r2, r3
 8016e7e:	f04f 0a00 	mov.w	sl, #0
 8016e82:	bfcc      	ite	gt
 8016e84:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016e88:	ea03 0b01 	andle.w	fp, r3, r1
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	2300      	movs	r3, #0
 8016e90:	4650      	mov	r0, sl
 8016e92:	4659      	mov	r1, fp
 8016e94:	f7e9 fe30 	bl	8000af8 <__aeabi_dcmpeq>
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d1ac      	bne.n	8016df6 <_strtod_l+0x566>
 8016e9c:	9b07      	ldr	r3, [sp, #28]
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	9a05      	ldr	r2, [sp, #20]
 8016ea2:	9908      	ldr	r1, [sp, #32]
 8016ea4:	4623      	mov	r3, r4
 8016ea6:	4648      	mov	r0, r9
 8016ea8:	f001 fddd 	bl	8018a66 <__s2b>
 8016eac:	9007      	str	r0, [sp, #28]
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	f43f af08 	beq.w	8016cc4 <_strtod_l+0x434>
 8016eb4:	9a06      	ldr	r2, [sp, #24]
 8016eb6:	9b06      	ldr	r3, [sp, #24]
 8016eb8:	2a00      	cmp	r2, #0
 8016eba:	f1c3 0300 	rsb	r3, r3, #0
 8016ebe:	bfa8      	it	ge
 8016ec0:	2300      	movge	r3, #0
 8016ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8016ec4:	2400      	movs	r4, #0
 8016ec6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016eca:	9316      	str	r3, [sp, #88]	; 0x58
 8016ecc:	46a0      	mov	r8, r4
 8016ece:	9b07      	ldr	r3, [sp, #28]
 8016ed0:	4648      	mov	r0, r9
 8016ed2:	6859      	ldr	r1, [r3, #4]
 8016ed4:	f001 fd41 	bl	801895a <_Balloc>
 8016ed8:	9005      	str	r0, [sp, #20]
 8016eda:	2800      	cmp	r0, #0
 8016edc:	f43f aef6 	beq.w	8016ccc <_strtod_l+0x43c>
 8016ee0:	9b07      	ldr	r3, [sp, #28]
 8016ee2:	691a      	ldr	r2, [r3, #16]
 8016ee4:	3202      	adds	r2, #2
 8016ee6:	f103 010c 	add.w	r1, r3, #12
 8016eea:	0092      	lsls	r2, r2, #2
 8016eec:	300c      	adds	r0, #12
 8016eee:	f001 fd29 	bl	8018944 <memcpy>
 8016ef2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ef4:	a91d      	add	r1, sp, #116	; 0x74
 8016ef6:	ec4b ab10 	vmov	d0, sl, fp
 8016efa:	4648      	mov	r0, r9
 8016efc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016f00:	f002 f86c 	bl	8018fdc <__d2b>
 8016f04:	901c      	str	r0, [sp, #112]	; 0x70
 8016f06:	2800      	cmp	r0, #0
 8016f08:	f43f aee0 	beq.w	8016ccc <_strtod_l+0x43c>
 8016f0c:	2101      	movs	r1, #1
 8016f0e:	4648      	mov	r0, r9
 8016f10:	f001 fe35 	bl	8018b7e <__i2b>
 8016f14:	4680      	mov	r8, r0
 8016f16:	2800      	cmp	r0, #0
 8016f18:	f43f aed8 	beq.w	8016ccc <_strtod_l+0x43c>
 8016f1c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016f1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016f20:	2e00      	cmp	r6, #0
 8016f22:	bfab      	itete	ge
 8016f24:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016f26:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016f28:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016f2a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016f2c:	bfac      	ite	ge
 8016f2e:	18f7      	addge	r7, r6, r3
 8016f30:	1b9d      	sublt	r5, r3, r6
 8016f32:	9b04      	ldr	r3, [sp, #16]
 8016f34:	1af6      	subs	r6, r6, r3
 8016f36:	4416      	add	r6, r2
 8016f38:	4b63      	ldr	r3, [pc, #396]	; (80170c8 <_strtod_l+0x838>)
 8016f3a:	3e01      	subs	r6, #1
 8016f3c:	429e      	cmp	r6, r3
 8016f3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016f42:	f280 80af 	bge.w	80170a4 <_strtod_l+0x814>
 8016f46:	1b9b      	subs	r3, r3, r6
 8016f48:	2b1f      	cmp	r3, #31
 8016f4a:	eba2 0203 	sub.w	r2, r2, r3
 8016f4e:	f04f 0101 	mov.w	r1, #1
 8016f52:	f300 809b 	bgt.w	801708c <_strtod_l+0x7fc>
 8016f56:	fa01 f303 	lsl.w	r3, r1, r3
 8016f5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8016f60:	18be      	adds	r6, r7, r2
 8016f62:	9b04      	ldr	r3, [sp, #16]
 8016f64:	42b7      	cmp	r7, r6
 8016f66:	4415      	add	r5, r2
 8016f68:	441d      	add	r5, r3
 8016f6a:	463b      	mov	r3, r7
 8016f6c:	bfa8      	it	ge
 8016f6e:	4633      	movge	r3, r6
 8016f70:	42ab      	cmp	r3, r5
 8016f72:	bfa8      	it	ge
 8016f74:	462b      	movge	r3, r5
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	bfc2      	ittt	gt
 8016f7a:	1af6      	subgt	r6, r6, r3
 8016f7c:	1aed      	subgt	r5, r5, r3
 8016f7e:	1aff      	subgt	r7, r7, r3
 8016f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f82:	b1bb      	cbz	r3, 8016fb4 <_strtod_l+0x724>
 8016f84:	4641      	mov	r1, r8
 8016f86:	461a      	mov	r2, r3
 8016f88:	4648      	mov	r0, r9
 8016f8a:	f001 fe97 	bl	8018cbc <__pow5mult>
 8016f8e:	4680      	mov	r8, r0
 8016f90:	2800      	cmp	r0, #0
 8016f92:	f43f ae9b 	beq.w	8016ccc <_strtod_l+0x43c>
 8016f96:	4601      	mov	r1, r0
 8016f98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016f9a:	4648      	mov	r0, r9
 8016f9c:	f001 fdf8 	bl	8018b90 <__multiply>
 8016fa0:	900c      	str	r0, [sp, #48]	; 0x30
 8016fa2:	2800      	cmp	r0, #0
 8016fa4:	f43f ae92 	beq.w	8016ccc <_strtod_l+0x43c>
 8016fa8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016faa:	4648      	mov	r0, r9
 8016fac:	f001 fd09 	bl	80189c2 <_Bfree>
 8016fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fb2:	931c      	str	r3, [sp, #112]	; 0x70
 8016fb4:	2e00      	cmp	r6, #0
 8016fb6:	dc7a      	bgt.n	80170ae <_strtod_l+0x81e>
 8016fb8:	9b06      	ldr	r3, [sp, #24]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	dd08      	ble.n	8016fd0 <_strtod_l+0x740>
 8016fbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016fc0:	9905      	ldr	r1, [sp, #20]
 8016fc2:	4648      	mov	r0, r9
 8016fc4:	f001 fe7a 	bl	8018cbc <__pow5mult>
 8016fc8:	9005      	str	r0, [sp, #20]
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	f43f ae7e 	beq.w	8016ccc <_strtod_l+0x43c>
 8016fd0:	2d00      	cmp	r5, #0
 8016fd2:	dd08      	ble.n	8016fe6 <_strtod_l+0x756>
 8016fd4:	462a      	mov	r2, r5
 8016fd6:	9905      	ldr	r1, [sp, #20]
 8016fd8:	4648      	mov	r0, r9
 8016fda:	f001 febd 	bl	8018d58 <__lshift>
 8016fde:	9005      	str	r0, [sp, #20]
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	f43f ae73 	beq.w	8016ccc <_strtod_l+0x43c>
 8016fe6:	2f00      	cmp	r7, #0
 8016fe8:	dd08      	ble.n	8016ffc <_strtod_l+0x76c>
 8016fea:	4641      	mov	r1, r8
 8016fec:	463a      	mov	r2, r7
 8016fee:	4648      	mov	r0, r9
 8016ff0:	f001 feb2 	bl	8018d58 <__lshift>
 8016ff4:	4680      	mov	r8, r0
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	f43f ae68 	beq.w	8016ccc <_strtod_l+0x43c>
 8016ffc:	9a05      	ldr	r2, [sp, #20]
 8016ffe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017000:	4648      	mov	r0, r9
 8017002:	f001 ff17 	bl	8018e34 <__mdiff>
 8017006:	4604      	mov	r4, r0
 8017008:	2800      	cmp	r0, #0
 801700a:	f43f ae5f 	beq.w	8016ccc <_strtod_l+0x43c>
 801700e:	68c3      	ldr	r3, [r0, #12]
 8017010:	930c      	str	r3, [sp, #48]	; 0x30
 8017012:	2300      	movs	r3, #0
 8017014:	60c3      	str	r3, [r0, #12]
 8017016:	4641      	mov	r1, r8
 8017018:	f001 fef2 	bl	8018e00 <__mcmp>
 801701c:	2800      	cmp	r0, #0
 801701e:	da55      	bge.n	80170cc <_strtod_l+0x83c>
 8017020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017022:	b9e3      	cbnz	r3, 801705e <_strtod_l+0x7ce>
 8017024:	f1ba 0f00 	cmp.w	sl, #0
 8017028:	d119      	bne.n	801705e <_strtod_l+0x7ce>
 801702a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801702e:	b9b3      	cbnz	r3, 801705e <_strtod_l+0x7ce>
 8017030:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017034:	0d1b      	lsrs	r3, r3, #20
 8017036:	051b      	lsls	r3, r3, #20
 8017038:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801703c:	d90f      	bls.n	801705e <_strtod_l+0x7ce>
 801703e:	6963      	ldr	r3, [r4, #20]
 8017040:	b913      	cbnz	r3, 8017048 <_strtod_l+0x7b8>
 8017042:	6923      	ldr	r3, [r4, #16]
 8017044:	2b01      	cmp	r3, #1
 8017046:	dd0a      	ble.n	801705e <_strtod_l+0x7ce>
 8017048:	4621      	mov	r1, r4
 801704a:	2201      	movs	r2, #1
 801704c:	4648      	mov	r0, r9
 801704e:	f001 fe83 	bl	8018d58 <__lshift>
 8017052:	4641      	mov	r1, r8
 8017054:	4604      	mov	r4, r0
 8017056:	f001 fed3 	bl	8018e00 <__mcmp>
 801705a:	2800      	cmp	r0, #0
 801705c:	dc67      	bgt.n	801712e <_strtod_l+0x89e>
 801705e:	9b04      	ldr	r3, [sp, #16]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d171      	bne.n	8017148 <_strtod_l+0x8b8>
 8017064:	e63d      	b.n	8016ce2 <_strtod_l+0x452>
 8017066:	f018 0f01 	tst.w	r8, #1
 801706a:	d004      	beq.n	8017076 <_strtod_l+0x7e6>
 801706c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017070:	f7e9 fada 	bl	8000628 <__aeabi_dmul>
 8017074:	2301      	movs	r3, #1
 8017076:	ea4f 0868 	mov.w	r8, r8, asr #1
 801707a:	3508      	adds	r5, #8
 801707c:	e6e5      	b.n	8016e4a <_strtod_l+0x5ba>
 801707e:	f04f 32ff 	mov.w	r2, #4294967295
 8017082:	fa02 f303 	lsl.w	r3, r2, r3
 8017086:	ea03 0a0a 	and.w	sl, r3, sl
 801708a:	e6ff      	b.n	8016e8c <_strtod_l+0x5fc>
 801708c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017090:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017094:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017098:	36e2      	adds	r6, #226	; 0xe2
 801709a:	fa01 f306 	lsl.w	r3, r1, r6
 801709e:	930a      	str	r3, [sp, #40]	; 0x28
 80170a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80170a2:	e75d      	b.n	8016f60 <_strtod_l+0x6d0>
 80170a4:	2300      	movs	r3, #0
 80170a6:	930a      	str	r3, [sp, #40]	; 0x28
 80170a8:	2301      	movs	r3, #1
 80170aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80170ac:	e758      	b.n	8016f60 <_strtod_l+0x6d0>
 80170ae:	4632      	mov	r2, r6
 80170b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170b2:	4648      	mov	r0, r9
 80170b4:	f001 fe50 	bl	8018d58 <__lshift>
 80170b8:	901c      	str	r0, [sp, #112]	; 0x70
 80170ba:	2800      	cmp	r0, #0
 80170bc:	f47f af7c 	bne.w	8016fb8 <_strtod_l+0x728>
 80170c0:	e604      	b.n	8016ccc <_strtod_l+0x43c>
 80170c2:	bf00      	nop
 80170c4:	0801a5a8 	.word	0x0801a5a8
 80170c8:	fffffc02 	.word	0xfffffc02
 80170cc:	465d      	mov	r5, fp
 80170ce:	f040 8086 	bne.w	80171de <_strtod_l+0x94e>
 80170d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170d8:	b32a      	cbz	r2, 8017126 <_strtod_l+0x896>
 80170da:	4aaf      	ldr	r2, [pc, #700]	; (8017398 <_strtod_l+0xb08>)
 80170dc:	4293      	cmp	r3, r2
 80170de:	d153      	bne.n	8017188 <_strtod_l+0x8f8>
 80170e0:	9b04      	ldr	r3, [sp, #16]
 80170e2:	4650      	mov	r0, sl
 80170e4:	b1d3      	cbz	r3, 801711c <_strtod_l+0x88c>
 80170e6:	4aad      	ldr	r2, [pc, #692]	; (801739c <_strtod_l+0xb0c>)
 80170e8:	402a      	ands	r2, r5
 80170ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80170ee:	f04f 31ff 	mov.w	r1, #4294967295
 80170f2:	d816      	bhi.n	8017122 <_strtod_l+0x892>
 80170f4:	0d12      	lsrs	r2, r2, #20
 80170f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80170fa:	fa01 f303 	lsl.w	r3, r1, r3
 80170fe:	4298      	cmp	r0, r3
 8017100:	d142      	bne.n	8017188 <_strtod_l+0x8f8>
 8017102:	4ba7      	ldr	r3, [pc, #668]	; (80173a0 <_strtod_l+0xb10>)
 8017104:	429d      	cmp	r5, r3
 8017106:	d102      	bne.n	801710e <_strtod_l+0x87e>
 8017108:	3001      	adds	r0, #1
 801710a:	f43f addf 	beq.w	8016ccc <_strtod_l+0x43c>
 801710e:	4ba3      	ldr	r3, [pc, #652]	; (801739c <_strtod_l+0xb0c>)
 8017110:	402b      	ands	r3, r5
 8017112:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017116:	f04f 0a00 	mov.w	sl, #0
 801711a:	e7a0      	b.n	801705e <_strtod_l+0x7ce>
 801711c:	f04f 33ff 	mov.w	r3, #4294967295
 8017120:	e7ed      	b.n	80170fe <_strtod_l+0x86e>
 8017122:	460b      	mov	r3, r1
 8017124:	e7eb      	b.n	80170fe <_strtod_l+0x86e>
 8017126:	bb7b      	cbnz	r3, 8017188 <_strtod_l+0x8f8>
 8017128:	f1ba 0f00 	cmp.w	sl, #0
 801712c:	d12c      	bne.n	8017188 <_strtod_l+0x8f8>
 801712e:	9904      	ldr	r1, [sp, #16]
 8017130:	4a9a      	ldr	r2, [pc, #616]	; (801739c <_strtod_l+0xb0c>)
 8017132:	465b      	mov	r3, fp
 8017134:	b1f1      	cbz	r1, 8017174 <_strtod_l+0x8e4>
 8017136:	ea02 010b 	and.w	r1, r2, fp
 801713a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801713e:	dc19      	bgt.n	8017174 <_strtod_l+0x8e4>
 8017140:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017144:	f77f ae5b 	ble.w	8016dfe <_strtod_l+0x56e>
 8017148:	4a96      	ldr	r2, [pc, #600]	; (80173a4 <_strtod_l+0xb14>)
 801714a:	2300      	movs	r3, #0
 801714c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017150:	4650      	mov	r0, sl
 8017152:	4659      	mov	r1, fp
 8017154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017158:	f7e9 fa66 	bl	8000628 <__aeabi_dmul>
 801715c:	4682      	mov	sl, r0
 801715e:	468b      	mov	fp, r1
 8017160:	2900      	cmp	r1, #0
 8017162:	f47f adbe 	bne.w	8016ce2 <_strtod_l+0x452>
 8017166:	2800      	cmp	r0, #0
 8017168:	f47f adbb 	bne.w	8016ce2 <_strtod_l+0x452>
 801716c:	2322      	movs	r3, #34	; 0x22
 801716e:	f8c9 3000 	str.w	r3, [r9]
 8017172:	e5b6      	b.n	8016ce2 <_strtod_l+0x452>
 8017174:	4013      	ands	r3, r2
 8017176:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801717a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801717e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017182:	f04f 3aff 	mov.w	sl, #4294967295
 8017186:	e76a      	b.n	801705e <_strtod_l+0x7ce>
 8017188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801718a:	b193      	cbz	r3, 80171b2 <_strtod_l+0x922>
 801718c:	422b      	tst	r3, r5
 801718e:	f43f af66 	beq.w	801705e <_strtod_l+0x7ce>
 8017192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017194:	9a04      	ldr	r2, [sp, #16]
 8017196:	4650      	mov	r0, sl
 8017198:	4659      	mov	r1, fp
 801719a:	b173      	cbz	r3, 80171ba <_strtod_l+0x92a>
 801719c:	f7ff fb5c 	bl	8016858 <sulp>
 80171a0:	4602      	mov	r2, r0
 80171a2:	460b      	mov	r3, r1
 80171a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80171a8:	f7e9 f888 	bl	80002bc <__adddf3>
 80171ac:	4682      	mov	sl, r0
 80171ae:	468b      	mov	fp, r1
 80171b0:	e755      	b.n	801705e <_strtod_l+0x7ce>
 80171b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171b4:	ea13 0f0a 	tst.w	r3, sl
 80171b8:	e7e9      	b.n	801718e <_strtod_l+0x8fe>
 80171ba:	f7ff fb4d 	bl	8016858 <sulp>
 80171be:	4602      	mov	r2, r0
 80171c0:	460b      	mov	r3, r1
 80171c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80171c6:	f7e9 f877 	bl	80002b8 <__aeabi_dsub>
 80171ca:	2200      	movs	r2, #0
 80171cc:	2300      	movs	r3, #0
 80171ce:	4682      	mov	sl, r0
 80171d0:	468b      	mov	fp, r1
 80171d2:	f7e9 fc91 	bl	8000af8 <__aeabi_dcmpeq>
 80171d6:	2800      	cmp	r0, #0
 80171d8:	f47f ae11 	bne.w	8016dfe <_strtod_l+0x56e>
 80171dc:	e73f      	b.n	801705e <_strtod_l+0x7ce>
 80171de:	4641      	mov	r1, r8
 80171e0:	4620      	mov	r0, r4
 80171e2:	f001 ff4a 	bl	801907a <__ratio>
 80171e6:	ec57 6b10 	vmov	r6, r7, d0
 80171ea:	2200      	movs	r2, #0
 80171ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80171f0:	ee10 0a10 	vmov	r0, s0
 80171f4:	4639      	mov	r1, r7
 80171f6:	f7e9 fc93 	bl	8000b20 <__aeabi_dcmple>
 80171fa:	2800      	cmp	r0, #0
 80171fc:	d077      	beq.n	80172ee <_strtod_l+0xa5e>
 80171fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017200:	2b00      	cmp	r3, #0
 8017202:	d04a      	beq.n	801729a <_strtod_l+0xa0a>
 8017204:	4b68      	ldr	r3, [pc, #416]	; (80173a8 <_strtod_l+0xb18>)
 8017206:	2200      	movs	r2, #0
 8017208:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801720c:	4f66      	ldr	r7, [pc, #408]	; (80173a8 <_strtod_l+0xb18>)
 801720e:	2600      	movs	r6, #0
 8017210:	4b62      	ldr	r3, [pc, #392]	; (801739c <_strtod_l+0xb0c>)
 8017212:	402b      	ands	r3, r5
 8017214:	930f      	str	r3, [sp, #60]	; 0x3c
 8017216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017218:	4b64      	ldr	r3, [pc, #400]	; (80173ac <_strtod_l+0xb1c>)
 801721a:	429a      	cmp	r2, r3
 801721c:	f040 80ce 	bne.w	80173bc <_strtod_l+0xb2c>
 8017220:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017228:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801722c:	ec4b ab10 	vmov	d0, sl, fp
 8017230:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017234:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017238:	f001 fe5a 	bl	8018ef0 <__ulp>
 801723c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017240:	ec53 2b10 	vmov	r2, r3, d0
 8017244:	f7e9 f9f0 	bl	8000628 <__aeabi_dmul>
 8017248:	4652      	mov	r2, sl
 801724a:	465b      	mov	r3, fp
 801724c:	f7e9 f836 	bl	80002bc <__adddf3>
 8017250:	460b      	mov	r3, r1
 8017252:	4952      	ldr	r1, [pc, #328]	; (801739c <_strtod_l+0xb0c>)
 8017254:	4a56      	ldr	r2, [pc, #344]	; (80173b0 <_strtod_l+0xb20>)
 8017256:	4019      	ands	r1, r3
 8017258:	4291      	cmp	r1, r2
 801725a:	4682      	mov	sl, r0
 801725c:	d95b      	bls.n	8017316 <_strtod_l+0xa86>
 801725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017260:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017264:	4293      	cmp	r3, r2
 8017266:	d103      	bne.n	8017270 <_strtod_l+0x9e0>
 8017268:	9b08      	ldr	r3, [sp, #32]
 801726a:	3301      	adds	r3, #1
 801726c:	f43f ad2e 	beq.w	8016ccc <_strtod_l+0x43c>
 8017270:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80173a0 <_strtod_l+0xb10>
 8017274:	f04f 3aff 	mov.w	sl, #4294967295
 8017278:	991c      	ldr	r1, [sp, #112]	; 0x70
 801727a:	4648      	mov	r0, r9
 801727c:	f001 fba1 	bl	80189c2 <_Bfree>
 8017280:	9905      	ldr	r1, [sp, #20]
 8017282:	4648      	mov	r0, r9
 8017284:	f001 fb9d 	bl	80189c2 <_Bfree>
 8017288:	4641      	mov	r1, r8
 801728a:	4648      	mov	r0, r9
 801728c:	f001 fb99 	bl	80189c2 <_Bfree>
 8017290:	4621      	mov	r1, r4
 8017292:	4648      	mov	r0, r9
 8017294:	f001 fb95 	bl	80189c2 <_Bfree>
 8017298:	e619      	b.n	8016ece <_strtod_l+0x63e>
 801729a:	f1ba 0f00 	cmp.w	sl, #0
 801729e:	d11a      	bne.n	80172d6 <_strtod_l+0xa46>
 80172a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80172a4:	b9eb      	cbnz	r3, 80172e2 <_strtod_l+0xa52>
 80172a6:	2200      	movs	r2, #0
 80172a8:	4b3f      	ldr	r3, [pc, #252]	; (80173a8 <_strtod_l+0xb18>)
 80172aa:	4630      	mov	r0, r6
 80172ac:	4639      	mov	r1, r7
 80172ae:	f7e9 fc2d 	bl	8000b0c <__aeabi_dcmplt>
 80172b2:	b9c8      	cbnz	r0, 80172e8 <_strtod_l+0xa58>
 80172b4:	4630      	mov	r0, r6
 80172b6:	4639      	mov	r1, r7
 80172b8:	2200      	movs	r2, #0
 80172ba:	4b3e      	ldr	r3, [pc, #248]	; (80173b4 <_strtod_l+0xb24>)
 80172bc:	f7e9 f9b4 	bl	8000628 <__aeabi_dmul>
 80172c0:	4606      	mov	r6, r0
 80172c2:	460f      	mov	r7, r1
 80172c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80172c8:	9618      	str	r6, [sp, #96]	; 0x60
 80172ca:	9319      	str	r3, [sp, #100]	; 0x64
 80172cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80172d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80172d4:	e79c      	b.n	8017210 <_strtod_l+0x980>
 80172d6:	f1ba 0f01 	cmp.w	sl, #1
 80172da:	d102      	bne.n	80172e2 <_strtod_l+0xa52>
 80172dc:	2d00      	cmp	r5, #0
 80172de:	f43f ad8e 	beq.w	8016dfe <_strtod_l+0x56e>
 80172e2:	2200      	movs	r2, #0
 80172e4:	4b34      	ldr	r3, [pc, #208]	; (80173b8 <_strtod_l+0xb28>)
 80172e6:	e78f      	b.n	8017208 <_strtod_l+0x978>
 80172e8:	2600      	movs	r6, #0
 80172ea:	4f32      	ldr	r7, [pc, #200]	; (80173b4 <_strtod_l+0xb24>)
 80172ec:	e7ea      	b.n	80172c4 <_strtod_l+0xa34>
 80172ee:	4b31      	ldr	r3, [pc, #196]	; (80173b4 <_strtod_l+0xb24>)
 80172f0:	4630      	mov	r0, r6
 80172f2:	4639      	mov	r1, r7
 80172f4:	2200      	movs	r2, #0
 80172f6:	f7e9 f997 	bl	8000628 <__aeabi_dmul>
 80172fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172fc:	4606      	mov	r6, r0
 80172fe:	460f      	mov	r7, r1
 8017300:	b933      	cbnz	r3, 8017310 <_strtod_l+0xa80>
 8017302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017306:	9010      	str	r0, [sp, #64]	; 0x40
 8017308:	9311      	str	r3, [sp, #68]	; 0x44
 801730a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801730e:	e7df      	b.n	80172d0 <_strtod_l+0xa40>
 8017310:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017314:	e7f9      	b.n	801730a <_strtod_l+0xa7a>
 8017316:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801731a:	9b04      	ldr	r3, [sp, #16]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d1ab      	bne.n	8017278 <_strtod_l+0x9e8>
 8017320:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017324:	0d1b      	lsrs	r3, r3, #20
 8017326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017328:	051b      	lsls	r3, r3, #20
 801732a:	429a      	cmp	r2, r3
 801732c:	465d      	mov	r5, fp
 801732e:	d1a3      	bne.n	8017278 <_strtod_l+0x9e8>
 8017330:	4639      	mov	r1, r7
 8017332:	4630      	mov	r0, r6
 8017334:	f7e9 fc28 	bl	8000b88 <__aeabi_d2iz>
 8017338:	f7e9 f90c 	bl	8000554 <__aeabi_i2d>
 801733c:	460b      	mov	r3, r1
 801733e:	4602      	mov	r2, r0
 8017340:	4639      	mov	r1, r7
 8017342:	4630      	mov	r0, r6
 8017344:	f7e8 ffb8 	bl	80002b8 <__aeabi_dsub>
 8017348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801734a:	4606      	mov	r6, r0
 801734c:	460f      	mov	r7, r1
 801734e:	b933      	cbnz	r3, 801735e <_strtod_l+0xace>
 8017350:	f1ba 0f00 	cmp.w	sl, #0
 8017354:	d103      	bne.n	801735e <_strtod_l+0xace>
 8017356:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801735a:	2d00      	cmp	r5, #0
 801735c:	d06d      	beq.n	801743a <_strtod_l+0xbaa>
 801735e:	a30a      	add	r3, pc, #40	; (adr r3, 8017388 <_strtod_l+0xaf8>)
 8017360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017364:	4630      	mov	r0, r6
 8017366:	4639      	mov	r1, r7
 8017368:	f7e9 fbd0 	bl	8000b0c <__aeabi_dcmplt>
 801736c:	2800      	cmp	r0, #0
 801736e:	f47f acb8 	bne.w	8016ce2 <_strtod_l+0x452>
 8017372:	a307      	add	r3, pc, #28	; (adr r3, 8017390 <_strtod_l+0xb00>)
 8017374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017378:	4630      	mov	r0, r6
 801737a:	4639      	mov	r1, r7
 801737c:	f7e9 fbe4 	bl	8000b48 <__aeabi_dcmpgt>
 8017380:	2800      	cmp	r0, #0
 8017382:	f43f af79 	beq.w	8017278 <_strtod_l+0x9e8>
 8017386:	e4ac      	b.n	8016ce2 <_strtod_l+0x452>
 8017388:	94a03595 	.word	0x94a03595
 801738c:	3fdfffff 	.word	0x3fdfffff
 8017390:	35afe535 	.word	0x35afe535
 8017394:	3fe00000 	.word	0x3fe00000
 8017398:	000fffff 	.word	0x000fffff
 801739c:	7ff00000 	.word	0x7ff00000
 80173a0:	7fefffff 	.word	0x7fefffff
 80173a4:	39500000 	.word	0x39500000
 80173a8:	3ff00000 	.word	0x3ff00000
 80173ac:	7fe00000 	.word	0x7fe00000
 80173b0:	7c9fffff 	.word	0x7c9fffff
 80173b4:	3fe00000 	.word	0x3fe00000
 80173b8:	bff00000 	.word	0xbff00000
 80173bc:	9b04      	ldr	r3, [sp, #16]
 80173be:	b333      	cbz	r3, 801740e <_strtod_l+0xb7e>
 80173c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80173c6:	d822      	bhi.n	801740e <_strtod_l+0xb7e>
 80173c8:	a327      	add	r3, pc, #156	; (adr r3, 8017468 <_strtod_l+0xbd8>)
 80173ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ce:	4630      	mov	r0, r6
 80173d0:	4639      	mov	r1, r7
 80173d2:	f7e9 fba5 	bl	8000b20 <__aeabi_dcmple>
 80173d6:	b1a0      	cbz	r0, 8017402 <_strtod_l+0xb72>
 80173d8:	4639      	mov	r1, r7
 80173da:	4630      	mov	r0, r6
 80173dc:	f7e9 fbfc 	bl	8000bd8 <__aeabi_d2uiz>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	bf08      	it	eq
 80173e4:	2001      	moveq	r0, #1
 80173e6:	f7e9 f8a5 	bl	8000534 <__aeabi_ui2d>
 80173ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173ec:	4606      	mov	r6, r0
 80173ee:	460f      	mov	r7, r1
 80173f0:	bb03      	cbnz	r3, 8017434 <_strtod_l+0xba4>
 80173f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80173f6:	9012      	str	r0, [sp, #72]	; 0x48
 80173f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80173fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80173fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017406:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801740a:	1a9b      	subs	r3, r3, r2
 801740c:	930b      	str	r3, [sp, #44]	; 0x2c
 801740e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017412:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017416:	f001 fd6b 	bl	8018ef0 <__ulp>
 801741a:	4650      	mov	r0, sl
 801741c:	ec53 2b10 	vmov	r2, r3, d0
 8017420:	4659      	mov	r1, fp
 8017422:	f7e9 f901 	bl	8000628 <__aeabi_dmul>
 8017426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801742a:	f7e8 ff47 	bl	80002bc <__adddf3>
 801742e:	4682      	mov	sl, r0
 8017430:	468b      	mov	fp, r1
 8017432:	e772      	b.n	801731a <_strtod_l+0xa8a>
 8017434:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017438:	e7df      	b.n	80173fa <_strtod_l+0xb6a>
 801743a:	a30d      	add	r3, pc, #52	; (adr r3, 8017470 <_strtod_l+0xbe0>)
 801743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017440:	f7e9 fb64 	bl	8000b0c <__aeabi_dcmplt>
 8017444:	e79c      	b.n	8017380 <_strtod_l+0xaf0>
 8017446:	2300      	movs	r3, #0
 8017448:	930d      	str	r3, [sp, #52]	; 0x34
 801744a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801744c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801744e:	6013      	str	r3, [r2, #0]
 8017450:	f7ff ba61 	b.w	8016916 <_strtod_l+0x86>
 8017454:	2b65      	cmp	r3, #101	; 0x65
 8017456:	f04f 0200 	mov.w	r2, #0
 801745a:	f43f ab4e 	beq.w	8016afa <_strtod_l+0x26a>
 801745e:	2101      	movs	r1, #1
 8017460:	4614      	mov	r4, r2
 8017462:	9104      	str	r1, [sp, #16]
 8017464:	f7ff bacb 	b.w	80169fe <_strtod_l+0x16e>
 8017468:	ffc00000 	.word	0xffc00000
 801746c:	41dfffff 	.word	0x41dfffff
 8017470:	94a03595 	.word	0x94a03595
 8017474:	3fcfffff 	.word	0x3fcfffff

08017478 <_strtod_r>:
 8017478:	4b05      	ldr	r3, [pc, #20]	; (8017490 <_strtod_r+0x18>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	b410      	push	{r4}
 801747e:	6a1b      	ldr	r3, [r3, #32]
 8017480:	4c04      	ldr	r4, [pc, #16]	; (8017494 <_strtod_r+0x1c>)
 8017482:	2b00      	cmp	r3, #0
 8017484:	bf08      	it	eq
 8017486:	4623      	moveq	r3, r4
 8017488:	f85d 4b04 	ldr.w	r4, [sp], #4
 801748c:	f7ff ba00 	b.w	8016890 <_strtod_l>
 8017490:	2000000c 	.word	0x2000000c
 8017494:	20000070 	.word	0x20000070

08017498 <_strtol_l.isra.0>:
 8017498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801749c:	4680      	mov	r8, r0
 801749e:	4689      	mov	r9, r1
 80174a0:	4692      	mov	sl, r2
 80174a2:	461e      	mov	r6, r3
 80174a4:	460f      	mov	r7, r1
 80174a6:	463d      	mov	r5, r7
 80174a8:	9808      	ldr	r0, [sp, #32]
 80174aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174ae:	f001 fa0d 	bl	80188cc <__locale_ctype_ptr_l>
 80174b2:	4420      	add	r0, r4
 80174b4:	7843      	ldrb	r3, [r0, #1]
 80174b6:	f013 0308 	ands.w	r3, r3, #8
 80174ba:	d132      	bne.n	8017522 <_strtol_l.isra.0+0x8a>
 80174bc:	2c2d      	cmp	r4, #45	; 0x2d
 80174be:	d132      	bne.n	8017526 <_strtol_l.isra.0+0x8e>
 80174c0:	787c      	ldrb	r4, [r7, #1]
 80174c2:	1cbd      	adds	r5, r7, #2
 80174c4:	2201      	movs	r2, #1
 80174c6:	2e00      	cmp	r6, #0
 80174c8:	d05d      	beq.n	8017586 <_strtol_l.isra.0+0xee>
 80174ca:	2e10      	cmp	r6, #16
 80174cc:	d109      	bne.n	80174e2 <_strtol_l.isra.0+0x4a>
 80174ce:	2c30      	cmp	r4, #48	; 0x30
 80174d0:	d107      	bne.n	80174e2 <_strtol_l.isra.0+0x4a>
 80174d2:	782b      	ldrb	r3, [r5, #0]
 80174d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80174d8:	2b58      	cmp	r3, #88	; 0x58
 80174da:	d14f      	bne.n	801757c <_strtol_l.isra.0+0xe4>
 80174dc:	786c      	ldrb	r4, [r5, #1]
 80174de:	2610      	movs	r6, #16
 80174e0:	3502      	adds	r5, #2
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	bf14      	ite	ne
 80174e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80174ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80174ee:	2700      	movs	r7, #0
 80174f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80174f4:	4638      	mov	r0, r7
 80174f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80174fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80174fe:	2b09      	cmp	r3, #9
 8017500:	d817      	bhi.n	8017532 <_strtol_l.isra.0+0x9a>
 8017502:	461c      	mov	r4, r3
 8017504:	42a6      	cmp	r6, r4
 8017506:	dd23      	ble.n	8017550 <_strtol_l.isra.0+0xb8>
 8017508:	1c7b      	adds	r3, r7, #1
 801750a:	d007      	beq.n	801751c <_strtol_l.isra.0+0x84>
 801750c:	4584      	cmp	ip, r0
 801750e:	d31c      	bcc.n	801754a <_strtol_l.isra.0+0xb2>
 8017510:	d101      	bne.n	8017516 <_strtol_l.isra.0+0x7e>
 8017512:	45a6      	cmp	lr, r4
 8017514:	db19      	blt.n	801754a <_strtol_l.isra.0+0xb2>
 8017516:	fb00 4006 	mla	r0, r0, r6, r4
 801751a:	2701      	movs	r7, #1
 801751c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017520:	e7eb      	b.n	80174fa <_strtol_l.isra.0+0x62>
 8017522:	462f      	mov	r7, r5
 8017524:	e7bf      	b.n	80174a6 <_strtol_l.isra.0+0xe>
 8017526:	2c2b      	cmp	r4, #43	; 0x2b
 8017528:	bf04      	itt	eq
 801752a:	1cbd      	addeq	r5, r7, #2
 801752c:	787c      	ldrbeq	r4, [r7, #1]
 801752e:	461a      	mov	r2, r3
 8017530:	e7c9      	b.n	80174c6 <_strtol_l.isra.0+0x2e>
 8017532:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017536:	2b19      	cmp	r3, #25
 8017538:	d801      	bhi.n	801753e <_strtol_l.isra.0+0xa6>
 801753a:	3c37      	subs	r4, #55	; 0x37
 801753c:	e7e2      	b.n	8017504 <_strtol_l.isra.0+0x6c>
 801753e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017542:	2b19      	cmp	r3, #25
 8017544:	d804      	bhi.n	8017550 <_strtol_l.isra.0+0xb8>
 8017546:	3c57      	subs	r4, #87	; 0x57
 8017548:	e7dc      	b.n	8017504 <_strtol_l.isra.0+0x6c>
 801754a:	f04f 37ff 	mov.w	r7, #4294967295
 801754e:	e7e5      	b.n	801751c <_strtol_l.isra.0+0x84>
 8017550:	1c7b      	adds	r3, r7, #1
 8017552:	d108      	bne.n	8017566 <_strtol_l.isra.0+0xce>
 8017554:	2322      	movs	r3, #34	; 0x22
 8017556:	f8c8 3000 	str.w	r3, [r8]
 801755a:	4608      	mov	r0, r1
 801755c:	f1ba 0f00 	cmp.w	sl, #0
 8017560:	d107      	bne.n	8017572 <_strtol_l.isra.0+0xda>
 8017562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017566:	b102      	cbz	r2, 801756a <_strtol_l.isra.0+0xd2>
 8017568:	4240      	negs	r0, r0
 801756a:	f1ba 0f00 	cmp.w	sl, #0
 801756e:	d0f8      	beq.n	8017562 <_strtol_l.isra.0+0xca>
 8017570:	b10f      	cbz	r7, 8017576 <_strtol_l.isra.0+0xde>
 8017572:	f105 39ff 	add.w	r9, r5, #4294967295
 8017576:	f8ca 9000 	str.w	r9, [sl]
 801757a:	e7f2      	b.n	8017562 <_strtol_l.isra.0+0xca>
 801757c:	2430      	movs	r4, #48	; 0x30
 801757e:	2e00      	cmp	r6, #0
 8017580:	d1af      	bne.n	80174e2 <_strtol_l.isra.0+0x4a>
 8017582:	2608      	movs	r6, #8
 8017584:	e7ad      	b.n	80174e2 <_strtol_l.isra.0+0x4a>
 8017586:	2c30      	cmp	r4, #48	; 0x30
 8017588:	d0a3      	beq.n	80174d2 <_strtol_l.isra.0+0x3a>
 801758a:	260a      	movs	r6, #10
 801758c:	e7a9      	b.n	80174e2 <_strtol_l.isra.0+0x4a>
	...

08017590 <_strtol_r>:
 8017590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017592:	4c06      	ldr	r4, [pc, #24]	; (80175ac <_strtol_r+0x1c>)
 8017594:	4d06      	ldr	r5, [pc, #24]	; (80175b0 <_strtol_r+0x20>)
 8017596:	6824      	ldr	r4, [r4, #0]
 8017598:	6a24      	ldr	r4, [r4, #32]
 801759a:	2c00      	cmp	r4, #0
 801759c:	bf08      	it	eq
 801759e:	462c      	moveq	r4, r5
 80175a0:	9400      	str	r4, [sp, #0]
 80175a2:	f7ff ff79 	bl	8017498 <_strtol_l.isra.0>
 80175a6:	b003      	add	sp, #12
 80175a8:	bd30      	pop	{r4, r5, pc}
 80175aa:	bf00      	nop
 80175ac:	2000000c 	.word	0x2000000c
 80175b0:	20000070 	.word	0x20000070

080175b4 <_vsiprintf_r>:
 80175b4:	b500      	push	{lr}
 80175b6:	b09b      	sub	sp, #108	; 0x6c
 80175b8:	9100      	str	r1, [sp, #0]
 80175ba:	9104      	str	r1, [sp, #16]
 80175bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80175c0:	9105      	str	r1, [sp, #20]
 80175c2:	9102      	str	r1, [sp, #8]
 80175c4:	4905      	ldr	r1, [pc, #20]	; (80175dc <_vsiprintf_r+0x28>)
 80175c6:	9103      	str	r1, [sp, #12]
 80175c8:	4669      	mov	r1, sp
 80175ca:	f001 fed5 	bl	8019378 <_svfiprintf_r>
 80175ce:	9b00      	ldr	r3, [sp, #0]
 80175d0:	2200      	movs	r2, #0
 80175d2:	701a      	strb	r2, [r3, #0]
 80175d4:	b01b      	add	sp, #108	; 0x6c
 80175d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80175da:	bf00      	nop
 80175dc:	ffff0208 	.word	0xffff0208

080175e0 <vsiprintf>:
 80175e0:	4613      	mov	r3, r2
 80175e2:	460a      	mov	r2, r1
 80175e4:	4601      	mov	r1, r0
 80175e6:	4802      	ldr	r0, [pc, #8]	; (80175f0 <vsiprintf+0x10>)
 80175e8:	6800      	ldr	r0, [r0, #0]
 80175ea:	f7ff bfe3 	b.w	80175b4 <_vsiprintf_r>
 80175ee:	bf00      	nop
 80175f0:	2000000c 	.word	0x2000000c

080175f4 <quorem>:
 80175f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f8:	6903      	ldr	r3, [r0, #16]
 80175fa:	690c      	ldr	r4, [r1, #16]
 80175fc:	42a3      	cmp	r3, r4
 80175fe:	4680      	mov	r8, r0
 8017600:	f2c0 8082 	blt.w	8017708 <quorem+0x114>
 8017604:	3c01      	subs	r4, #1
 8017606:	f101 0714 	add.w	r7, r1, #20
 801760a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801760e:	f100 0614 	add.w	r6, r0, #20
 8017612:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017616:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801761a:	eb06 030c 	add.w	r3, r6, ip
 801761e:	3501      	adds	r5, #1
 8017620:	eb07 090c 	add.w	r9, r7, ip
 8017624:	9301      	str	r3, [sp, #4]
 8017626:	fbb0 f5f5 	udiv	r5, r0, r5
 801762a:	b395      	cbz	r5, 8017692 <quorem+0x9e>
 801762c:	f04f 0a00 	mov.w	sl, #0
 8017630:	4638      	mov	r0, r7
 8017632:	46b6      	mov	lr, r6
 8017634:	46d3      	mov	fp, sl
 8017636:	f850 2b04 	ldr.w	r2, [r0], #4
 801763a:	b293      	uxth	r3, r2
 801763c:	fb05 a303 	mla	r3, r5, r3, sl
 8017640:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017644:	b29b      	uxth	r3, r3
 8017646:	ebab 0303 	sub.w	r3, fp, r3
 801764a:	0c12      	lsrs	r2, r2, #16
 801764c:	f8de b000 	ldr.w	fp, [lr]
 8017650:	fb05 a202 	mla	r2, r5, r2, sl
 8017654:	fa13 f38b 	uxtah	r3, r3, fp
 8017658:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801765c:	fa1f fb82 	uxth.w	fp, r2
 8017660:	f8de 2000 	ldr.w	r2, [lr]
 8017664:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801766c:	b29b      	uxth	r3, r3
 801766e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017672:	4581      	cmp	r9, r0
 8017674:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017678:	f84e 3b04 	str.w	r3, [lr], #4
 801767c:	d2db      	bcs.n	8017636 <quorem+0x42>
 801767e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017682:	b933      	cbnz	r3, 8017692 <quorem+0x9e>
 8017684:	9b01      	ldr	r3, [sp, #4]
 8017686:	3b04      	subs	r3, #4
 8017688:	429e      	cmp	r6, r3
 801768a:	461a      	mov	r2, r3
 801768c:	d330      	bcc.n	80176f0 <quorem+0xfc>
 801768e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017692:	4640      	mov	r0, r8
 8017694:	f001 fbb4 	bl	8018e00 <__mcmp>
 8017698:	2800      	cmp	r0, #0
 801769a:	db25      	blt.n	80176e8 <quorem+0xf4>
 801769c:	3501      	adds	r5, #1
 801769e:	4630      	mov	r0, r6
 80176a0:	f04f 0c00 	mov.w	ip, #0
 80176a4:	f857 2b04 	ldr.w	r2, [r7], #4
 80176a8:	f8d0 e000 	ldr.w	lr, [r0]
 80176ac:	b293      	uxth	r3, r2
 80176ae:	ebac 0303 	sub.w	r3, ip, r3
 80176b2:	0c12      	lsrs	r2, r2, #16
 80176b4:	fa13 f38e 	uxtah	r3, r3, lr
 80176b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80176bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80176c6:	45b9      	cmp	r9, r7
 80176c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80176cc:	f840 3b04 	str.w	r3, [r0], #4
 80176d0:	d2e8      	bcs.n	80176a4 <quorem+0xb0>
 80176d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80176d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80176da:	b92a      	cbnz	r2, 80176e8 <quorem+0xf4>
 80176dc:	3b04      	subs	r3, #4
 80176de:	429e      	cmp	r6, r3
 80176e0:	461a      	mov	r2, r3
 80176e2:	d30b      	bcc.n	80176fc <quorem+0x108>
 80176e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80176e8:	4628      	mov	r0, r5
 80176ea:	b003      	add	sp, #12
 80176ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f0:	6812      	ldr	r2, [r2, #0]
 80176f2:	3b04      	subs	r3, #4
 80176f4:	2a00      	cmp	r2, #0
 80176f6:	d1ca      	bne.n	801768e <quorem+0x9a>
 80176f8:	3c01      	subs	r4, #1
 80176fa:	e7c5      	b.n	8017688 <quorem+0x94>
 80176fc:	6812      	ldr	r2, [r2, #0]
 80176fe:	3b04      	subs	r3, #4
 8017700:	2a00      	cmp	r2, #0
 8017702:	d1ef      	bne.n	80176e4 <quorem+0xf0>
 8017704:	3c01      	subs	r4, #1
 8017706:	e7ea      	b.n	80176de <quorem+0xea>
 8017708:	2000      	movs	r0, #0
 801770a:	e7ee      	b.n	80176ea <quorem+0xf6>
 801770c:	0000      	movs	r0, r0
	...

08017710 <_dtoa_r>:
 8017710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017714:	ec57 6b10 	vmov	r6, r7, d0
 8017718:	b097      	sub	sp, #92	; 0x5c
 801771a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801771c:	9106      	str	r1, [sp, #24]
 801771e:	4604      	mov	r4, r0
 8017720:	920b      	str	r2, [sp, #44]	; 0x2c
 8017722:	9312      	str	r3, [sp, #72]	; 0x48
 8017724:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017728:	e9cd 6700 	strd	r6, r7, [sp]
 801772c:	b93d      	cbnz	r5, 801773e <_dtoa_r+0x2e>
 801772e:	2010      	movs	r0, #16
 8017730:	f001 f8ee 	bl	8018910 <malloc>
 8017734:	6260      	str	r0, [r4, #36]	; 0x24
 8017736:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801773a:	6005      	str	r5, [r0, #0]
 801773c:	60c5      	str	r5, [r0, #12]
 801773e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017740:	6819      	ldr	r1, [r3, #0]
 8017742:	b151      	cbz	r1, 801775a <_dtoa_r+0x4a>
 8017744:	685a      	ldr	r2, [r3, #4]
 8017746:	604a      	str	r2, [r1, #4]
 8017748:	2301      	movs	r3, #1
 801774a:	4093      	lsls	r3, r2
 801774c:	608b      	str	r3, [r1, #8]
 801774e:	4620      	mov	r0, r4
 8017750:	f001 f937 	bl	80189c2 <_Bfree>
 8017754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017756:	2200      	movs	r2, #0
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	1e3b      	subs	r3, r7, #0
 801775c:	bfbb      	ittet	lt
 801775e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017762:	9301      	strlt	r3, [sp, #4]
 8017764:	2300      	movge	r3, #0
 8017766:	2201      	movlt	r2, #1
 8017768:	bfac      	ite	ge
 801776a:	f8c8 3000 	strge.w	r3, [r8]
 801776e:	f8c8 2000 	strlt.w	r2, [r8]
 8017772:	4baf      	ldr	r3, [pc, #700]	; (8017a30 <_dtoa_r+0x320>)
 8017774:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017778:	ea33 0308 	bics.w	r3, r3, r8
 801777c:	d114      	bne.n	80177a8 <_dtoa_r+0x98>
 801777e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017780:	f242 730f 	movw	r3, #9999	; 0x270f
 8017784:	6013      	str	r3, [r2, #0]
 8017786:	9b00      	ldr	r3, [sp, #0]
 8017788:	b923      	cbnz	r3, 8017794 <_dtoa_r+0x84>
 801778a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801778e:	2800      	cmp	r0, #0
 8017790:	f000 8542 	beq.w	8018218 <_dtoa_r+0xb08>
 8017794:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017796:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017a44 <_dtoa_r+0x334>
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 8544 	beq.w	8018228 <_dtoa_r+0xb18>
 80177a0:	f10b 0303 	add.w	r3, fp, #3
 80177a4:	f000 bd3e 	b.w	8018224 <_dtoa_r+0xb14>
 80177a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80177ac:	2200      	movs	r2, #0
 80177ae:	2300      	movs	r3, #0
 80177b0:	4630      	mov	r0, r6
 80177b2:	4639      	mov	r1, r7
 80177b4:	f7e9 f9a0 	bl	8000af8 <__aeabi_dcmpeq>
 80177b8:	4681      	mov	r9, r0
 80177ba:	b168      	cbz	r0, 80177d8 <_dtoa_r+0xc8>
 80177bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80177be:	2301      	movs	r3, #1
 80177c0:	6013      	str	r3, [r2, #0]
 80177c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	f000 8524 	beq.w	8018212 <_dtoa_r+0xb02>
 80177ca:	4b9a      	ldr	r3, [pc, #616]	; (8017a34 <_dtoa_r+0x324>)
 80177cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80177ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80177d2:	6013      	str	r3, [r2, #0]
 80177d4:	f000 bd28 	b.w	8018228 <_dtoa_r+0xb18>
 80177d8:	aa14      	add	r2, sp, #80	; 0x50
 80177da:	a915      	add	r1, sp, #84	; 0x54
 80177dc:	ec47 6b10 	vmov	d0, r6, r7
 80177e0:	4620      	mov	r0, r4
 80177e2:	f001 fbfb 	bl	8018fdc <__d2b>
 80177e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80177ea:	9004      	str	r0, [sp, #16]
 80177ec:	2d00      	cmp	r5, #0
 80177ee:	d07c      	beq.n	80178ea <_dtoa_r+0x1da>
 80177f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80177f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80177f8:	46b2      	mov	sl, r6
 80177fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80177fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017802:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017806:	2200      	movs	r2, #0
 8017808:	4b8b      	ldr	r3, [pc, #556]	; (8017a38 <_dtoa_r+0x328>)
 801780a:	4650      	mov	r0, sl
 801780c:	4659      	mov	r1, fp
 801780e:	f7e8 fd53 	bl	80002b8 <__aeabi_dsub>
 8017812:	a381      	add	r3, pc, #516	; (adr r3, 8017a18 <_dtoa_r+0x308>)
 8017814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017818:	f7e8 ff06 	bl	8000628 <__aeabi_dmul>
 801781c:	a380      	add	r3, pc, #512	; (adr r3, 8017a20 <_dtoa_r+0x310>)
 801781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017822:	f7e8 fd4b 	bl	80002bc <__adddf3>
 8017826:	4606      	mov	r6, r0
 8017828:	4628      	mov	r0, r5
 801782a:	460f      	mov	r7, r1
 801782c:	f7e8 fe92 	bl	8000554 <__aeabi_i2d>
 8017830:	a37d      	add	r3, pc, #500	; (adr r3, 8017a28 <_dtoa_r+0x318>)
 8017832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017836:	f7e8 fef7 	bl	8000628 <__aeabi_dmul>
 801783a:	4602      	mov	r2, r0
 801783c:	460b      	mov	r3, r1
 801783e:	4630      	mov	r0, r6
 8017840:	4639      	mov	r1, r7
 8017842:	f7e8 fd3b 	bl	80002bc <__adddf3>
 8017846:	4606      	mov	r6, r0
 8017848:	460f      	mov	r7, r1
 801784a:	f7e9 f99d 	bl	8000b88 <__aeabi_d2iz>
 801784e:	2200      	movs	r2, #0
 8017850:	4682      	mov	sl, r0
 8017852:	2300      	movs	r3, #0
 8017854:	4630      	mov	r0, r6
 8017856:	4639      	mov	r1, r7
 8017858:	f7e9 f958 	bl	8000b0c <__aeabi_dcmplt>
 801785c:	b148      	cbz	r0, 8017872 <_dtoa_r+0x162>
 801785e:	4650      	mov	r0, sl
 8017860:	f7e8 fe78 	bl	8000554 <__aeabi_i2d>
 8017864:	4632      	mov	r2, r6
 8017866:	463b      	mov	r3, r7
 8017868:	f7e9 f946 	bl	8000af8 <__aeabi_dcmpeq>
 801786c:	b908      	cbnz	r0, 8017872 <_dtoa_r+0x162>
 801786e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017872:	f1ba 0f16 	cmp.w	sl, #22
 8017876:	d859      	bhi.n	801792c <_dtoa_r+0x21c>
 8017878:	4970      	ldr	r1, [pc, #448]	; (8017a3c <_dtoa_r+0x32c>)
 801787a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801787e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017886:	f7e9 f95f 	bl	8000b48 <__aeabi_dcmpgt>
 801788a:	2800      	cmp	r0, #0
 801788c:	d050      	beq.n	8017930 <_dtoa_r+0x220>
 801788e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017892:	2300      	movs	r3, #0
 8017894:	930f      	str	r3, [sp, #60]	; 0x3c
 8017896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017898:	1b5d      	subs	r5, r3, r5
 801789a:	f1b5 0801 	subs.w	r8, r5, #1
 801789e:	bf49      	itett	mi
 80178a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80178a4:	2300      	movpl	r3, #0
 80178a6:	9305      	strmi	r3, [sp, #20]
 80178a8:	f04f 0800 	movmi.w	r8, #0
 80178ac:	bf58      	it	pl
 80178ae:	9305      	strpl	r3, [sp, #20]
 80178b0:	f1ba 0f00 	cmp.w	sl, #0
 80178b4:	db3e      	blt.n	8017934 <_dtoa_r+0x224>
 80178b6:	2300      	movs	r3, #0
 80178b8:	44d0      	add	r8, sl
 80178ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80178be:	9307      	str	r3, [sp, #28]
 80178c0:	9b06      	ldr	r3, [sp, #24]
 80178c2:	2b09      	cmp	r3, #9
 80178c4:	f200 8090 	bhi.w	80179e8 <_dtoa_r+0x2d8>
 80178c8:	2b05      	cmp	r3, #5
 80178ca:	bfc4      	itt	gt
 80178cc:	3b04      	subgt	r3, #4
 80178ce:	9306      	strgt	r3, [sp, #24]
 80178d0:	9b06      	ldr	r3, [sp, #24]
 80178d2:	f1a3 0302 	sub.w	r3, r3, #2
 80178d6:	bfcc      	ite	gt
 80178d8:	2500      	movgt	r5, #0
 80178da:	2501      	movle	r5, #1
 80178dc:	2b03      	cmp	r3, #3
 80178de:	f200 808f 	bhi.w	8017a00 <_dtoa_r+0x2f0>
 80178e2:	e8df f003 	tbb	[pc, r3]
 80178e6:	7f7d      	.short	0x7f7d
 80178e8:	7131      	.short	0x7131
 80178ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80178ee:	441d      	add	r5, r3
 80178f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80178f4:	2820      	cmp	r0, #32
 80178f6:	dd13      	ble.n	8017920 <_dtoa_r+0x210>
 80178f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80178fc:	9b00      	ldr	r3, [sp, #0]
 80178fe:	fa08 f800 	lsl.w	r8, r8, r0
 8017902:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017906:	fa23 f000 	lsr.w	r0, r3, r0
 801790a:	ea48 0000 	orr.w	r0, r8, r0
 801790e:	f7e8 fe11 	bl	8000534 <__aeabi_ui2d>
 8017912:	2301      	movs	r3, #1
 8017914:	4682      	mov	sl, r0
 8017916:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801791a:	3d01      	subs	r5, #1
 801791c:	9313      	str	r3, [sp, #76]	; 0x4c
 801791e:	e772      	b.n	8017806 <_dtoa_r+0xf6>
 8017920:	9b00      	ldr	r3, [sp, #0]
 8017922:	f1c0 0020 	rsb	r0, r0, #32
 8017926:	fa03 f000 	lsl.w	r0, r3, r0
 801792a:	e7f0      	b.n	801790e <_dtoa_r+0x1fe>
 801792c:	2301      	movs	r3, #1
 801792e:	e7b1      	b.n	8017894 <_dtoa_r+0x184>
 8017930:	900f      	str	r0, [sp, #60]	; 0x3c
 8017932:	e7b0      	b.n	8017896 <_dtoa_r+0x186>
 8017934:	9b05      	ldr	r3, [sp, #20]
 8017936:	eba3 030a 	sub.w	r3, r3, sl
 801793a:	9305      	str	r3, [sp, #20]
 801793c:	f1ca 0300 	rsb	r3, sl, #0
 8017940:	9307      	str	r3, [sp, #28]
 8017942:	2300      	movs	r3, #0
 8017944:	930e      	str	r3, [sp, #56]	; 0x38
 8017946:	e7bb      	b.n	80178c0 <_dtoa_r+0x1b0>
 8017948:	2301      	movs	r3, #1
 801794a:	930a      	str	r3, [sp, #40]	; 0x28
 801794c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801794e:	2b00      	cmp	r3, #0
 8017950:	dd59      	ble.n	8017a06 <_dtoa_r+0x2f6>
 8017952:	9302      	str	r3, [sp, #8]
 8017954:	4699      	mov	r9, r3
 8017956:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017958:	2200      	movs	r2, #0
 801795a:	6072      	str	r2, [r6, #4]
 801795c:	2204      	movs	r2, #4
 801795e:	f102 0014 	add.w	r0, r2, #20
 8017962:	4298      	cmp	r0, r3
 8017964:	6871      	ldr	r1, [r6, #4]
 8017966:	d953      	bls.n	8017a10 <_dtoa_r+0x300>
 8017968:	4620      	mov	r0, r4
 801796a:	f000 fff6 	bl	801895a <_Balloc>
 801796e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017970:	6030      	str	r0, [r6, #0]
 8017972:	f1b9 0f0e 	cmp.w	r9, #14
 8017976:	f8d3 b000 	ldr.w	fp, [r3]
 801797a:	f200 80e6 	bhi.w	8017b4a <_dtoa_r+0x43a>
 801797e:	2d00      	cmp	r5, #0
 8017980:	f000 80e3 	beq.w	8017b4a <_dtoa_r+0x43a>
 8017984:	ed9d 7b00 	vldr	d7, [sp]
 8017988:	f1ba 0f00 	cmp.w	sl, #0
 801798c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017990:	dd74      	ble.n	8017a7c <_dtoa_r+0x36c>
 8017992:	4a2a      	ldr	r2, [pc, #168]	; (8017a3c <_dtoa_r+0x32c>)
 8017994:	f00a 030f 	and.w	r3, sl, #15
 8017998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801799c:	ed93 7b00 	vldr	d7, [r3]
 80179a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80179a4:	06f0      	lsls	r0, r6, #27
 80179a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80179aa:	d565      	bpl.n	8017a78 <_dtoa_r+0x368>
 80179ac:	4b24      	ldr	r3, [pc, #144]	; (8017a40 <_dtoa_r+0x330>)
 80179ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80179b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80179b6:	f7e8 ff61 	bl	800087c <__aeabi_ddiv>
 80179ba:	e9cd 0100 	strd	r0, r1, [sp]
 80179be:	f006 060f 	and.w	r6, r6, #15
 80179c2:	2503      	movs	r5, #3
 80179c4:	4f1e      	ldr	r7, [pc, #120]	; (8017a40 <_dtoa_r+0x330>)
 80179c6:	e04c      	b.n	8017a62 <_dtoa_r+0x352>
 80179c8:	2301      	movs	r3, #1
 80179ca:	930a      	str	r3, [sp, #40]	; 0x28
 80179cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179ce:	4453      	add	r3, sl
 80179d0:	f103 0901 	add.w	r9, r3, #1
 80179d4:	9302      	str	r3, [sp, #8]
 80179d6:	464b      	mov	r3, r9
 80179d8:	2b01      	cmp	r3, #1
 80179da:	bfb8      	it	lt
 80179dc:	2301      	movlt	r3, #1
 80179de:	e7ba      	b.n	8017956 <_dtoa_r+0x246>
 80179e0:	2300      	movs	r3, #0
 80179e2:	e7b2      	b.n	801794a <_dtoa_r+0x23a>
 80179e4:	2300      	movs	r3, #0
 80179e6:	e7f0      	b.n	80179ca <_dtoa_r+0x2ba>
 80179e8:	2501      	movs	r5, #1
 80179ea:	2300      	movs	r3, #0
 80179ec:	9306      	str	r3, [sp, #24]
 80179ee:	950a      	str	r5, [sp, #40]	; 0x28
 80179f0:	f04f 33ff 	mov.w	r3, #4294967295
 80179f4:	9302      	str	r3, [sp, #8]
 80179f6:	4699      	mov	r9, r3
 80179f8:	2200      	movs	r2, #0
 80179fa:	2312      	movs	r3, #18
 80179fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80179fe:	e7aa      	b.n	8017956 <_dtoa_r+0x246>
 8017a00:	2301      	movs	r3, #1
 8017a02:	930a      	str	r3, [sp, #40]	; 0x28
 8017a04:	e7f4      	b.n	80179f0 <_dtoa_r+0x2e0>
 8017a06:	2301      	movs	r3, #1
 8017a08:	9302      	str	r3, [sp, #8]
 8017a0a:	4699      	mov	r9, r3
 8017a0c:	461a      	mov	r2, r3
 8017a0e:	e7f5      	b.n	80179fc <_dtoa_r+0x2ec>
 8017a10:	3101      	adds	r1, #1
 8017a12:	6071      	str	r1, [r6, #4]
 8017a14:	0052      	lsls	r2, r2, #1
 8017a16:	e7a2      	b.n	801795e <_dtoa_r+0x24e>
 8017a18:	636f4361 	.word	0x636f4361
 8017a1c:	3fd287a7 	.word	0x3fd287a7
 8017a20:	8b60c8b3 	.word	0x8b60c8b3
 8017a24:	3fc68a28 	.word	0x3fc68a28
 8017a28:	509f79fb 	.word	0x509f79fb
 8017a2c:	3fd34413 	.word	0x3fd34413
 8017a30:	7ff00000 	.word	0x7ff00000
 8017a34:	0801a70c 	.word	0x0801a70c
 8017a38:	3ff80000 	.word	0x3ff80000
 8017a3c:	0801a610 	.word	0x0801a610
 8017a40:	0801a5e8 	.word	0x0801a5e8
 8017a44:	0801a5d9 	.word	0x0801a5d9
 8017a48:	07f1      	lsls	r1, r6, #31
 8017a4a:	d508      	bpl.n	8017a5e <_dtoa_r+0x34e>
 8017a4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a54:	f7e8 fde8 	bl	8000628 <__aeabi_dmul>
 8017a58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017a5c:	3501      	adds	r5, #1
 8017a5e:	1076      	asrs	r6, r6, #1
 8017a60:	3708      	adds	r7, #8
 8017a62:	2e00      	cmp	r6, #0
 8017a64:	d1f0      	bne.n	8017a48 <_dtoa_r+0x338>
 8017a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a6e:	f7e8 ff05 	bl	800087c <__aeabi_ddiv>
 8017a72:	e9cd 0100 	strd	r0, r1, [sp]
 8017a76:	e01a      	b.n	8017aae <_dtoa_r+0x39e>
 8017a78:	2502      	movs	r5, #2
 8017a7a:	e7a3      	b.n	80179c4 <_dtoa_r+0x2b4>
 8017a7c:	f000 80a0 	beq.w	8017bc0 <_dtoa_r+0x4b0>
 8017a80:	f1ca 0600 	rsb	r6, sl, #0
 8017a84:	4b9f      	ldr	r3, [pc, #636]	; (8017d04 <_dtoa_r+0x5f4>)
 8017a86:	4fa0      	ldr	r7, [pc, #640]	; (8017d08 <_dtoa_r+0x5f8>)
 8017a88:	f006 020f 	and.w	r2, r6, #15
 8017a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017a98:	f7e8 fdc6 	bl	8000628 <__aeabi_dmul>
 8017a9c:	e9cd 0100 	strd	r0, r1, [sp]
 8017aa0:	1136      	asrs	r6, r6, #4
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	2502      	movs	r5, #2
 8017aa6:	2e00      	cmp	r6, #0
 8017aa8:	d17f      	bne.n	8017baa <_dtoa_r+0x49a>
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d1e1      	bne.n	8017a72 <_dtoa_r+0x362>
 8017aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	f000 8087 	beq.w	8017bc4 <_dtoa_r+0x4b4>
 8017ab6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017aba:	2200      	movs	r2, #0
 8017abc:	4b93      	ldr	r3, [pc, #588]	; (8017d0c <_dtoa_r+0x5fc>)
 8017abe:	4630      	mov	r0, r6
 8017ac0:	4639      	mov	r1, r7
 8017ac2:	f7e9 f823 	bl	8000b0c <__aeabi_dcmplt>
 8017ac6:	2800      	cmp	r0, #0
 8017ac8:	d07c      	beq.n	8017bc4 <_dtoa_r+0x4b4>
 8017aca:	f1b9 0f00 	cmp.w	r9, #0
 8017ace:	d079      	beq.n	8017bc4 <_dtoa_r+0x4b4>
 8017ad0:	9b02      	ldr	r3, [sp, #8]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	dd35      	ble.n	8017b42 <_dtoa_r+0x432>
 8017ad6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017ada:	9308      	str	r3, [sp, #32]
 8017adc:	4639      	mov	r1, r7
 8017ade:	2200      	movs	r2, #0
 8017ae0:	4b8b      	ldr	r3, [pc, #556]	; (8017d10 <_dtoa_r+0x600>)
 8017ae2:	4630      	mov	r0, r6
 8017ae4:	f7e8 fda0 	bl	8000628 <__aeabi_dmul>
 8017ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8017aec:	9f02      	ldr	r7, [sp, #8]
 8017aee:	3501      	adds	r5, #1
 8017af0:	4628      	mov	r0, r5
 8017af2:	f7e8 fd2f 	bl	8000554 <__aeabi_i2d>
 8017af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017afa:	f7e8 fd95 	bl	8000628 <__aeabi_dmul>
 8017afe:	2200      	movs	r2, #0
 8017b00:	4b84      	ldr	r3, [pc, #528]	; (8017d14 <_dtoa_r+0x604>)
 8017b02:	f7e8 fbdb 	bl	80002bc <__adddf3>
 8017b06:	4605      	mov	r5, r0
 8017b08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017b0c:	2f00      	cmp	r7, #0
 8017b0e:	d15d      	bne.n	8017bcc <_dtoa_r+0x4bc>
 8017b10:	2200      	movs	r2, #0
 8017b12:	4b81      	ldr	r3, [pc, #516]	; (8017d18 <_dtoa_r+0x608>)
 8017b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b18:	f7e8 fbce 	bl	80002b8 <__aeabi_dsub>
 8017b1c:	462a      	mov	r2, r5
 8017b1e:	4633      	mov	r3, r6
 8017b20:	e9cd 0100 	strd	r0, r1, [sp]
 8017b24:	f7e9 f810 	bl	8000b48 <__aeabi_dcmpgt>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	f040 8288 	bne.w	801803e <_dtoa_r+0x92e>
 8017b2e:	462a      	mov	r2, r5
 8017b30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b38:	f7e8 ffe8 	bl	8000b0c <__aeabi_dcmplt>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	f040 827c 	bne.w	801803a <_dtoa_r+0x92a>
 8017b42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017b46:	e9cd 2300 	strd	r2, r3, [sp]
 8017b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	f2c0 8150 	blt.w	8017df2 <_dtoa_r+0x6e2>
 8017b52:	f1ba 0f0e 	cmp.w	sl, #14
 8017b56:	f300 814c 	bgt.w	8017df2 <_dtoa_r+0x6e2>
 8017b5a:	4b6a      	ldr	r3, [pc, #424]	; (8017d04 <_dtoa_r+0x5f4>)
 8017b5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017b60:	ed93 7b00 	vldr	d7, [r3]
 8017b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017b6c:	f280 80d8 	bge.w	8017d20 <_dtoa_r+0x610>
 8017b70:	f1b9 0f00 	cmp.w	r9, #0
 8017b74:	f300 80d4 	bgt.w	8017d20 <_dtoa_r+0x610>
 8017b78:	f040 825e 	bne.w	8018038 <_dtoa_r+0x928>
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	4b66      	ldr	r3, [pc, #408]	; (8017d18 <_dtoa_r+0x608>)
 8017b80:	ec51 0b17 	vmov	r0, r1, d7
 8017b84:	f7e8 fd50 	bl	8000628 <__aeabi_dmul>
 8017b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b8c:	f7e8 ffd2 	bl	8000b34 <__aeabi_dcmpge>
 8017b90:	464f      	mov	r7, r9
 8017b92:	464e      	mov	r6, r9
 8017b94:	2800      	cmp	r0, #0
 8017b96:	f040 8234 	bne.w	8018002 <_dtoa_r+0x8f2>
 8017b9a:	2331      	movs	r3, #49	; 0x31
 8017b9c:	f10b 0501 	add.w	r5, fp, #1
 8017ba0:	f88b 3000 	strb.w	r3, [fp]
 8017ba4:	f10a 0a01 	add.w	sl, sl, #1
 8017ba8:	e22f      	b.n	801800a <_dtoa_r+0x8fa>
 8017baa:	07f2      	lsls	r2, r6, #31
 8017bac:	d505      	bpl.n	8017bba <_dtoa_r+0x4aa>
 8017bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017bb2:	f7e8 fd39 	bl	8000628 <__aeabi_dmul>
 8017bb6:	3501      	adds	r5, #1
 8017bb8:	2301      	movs	r3, #1
 8017bba:	1076      	asrs	r6, r6, #1
 8017bbc:	3708      	adds	r7, #8
 8017bbe:	e772      	b.n	8017aa6 <_dtoa_r+0x396>
 8017bc0:	2502      	movs	r5, #2
 8017bc2:	e774      	b.n	8017aae <_dtoa_r+0x39e>
 8017bc4:	f8cd a020 	str.w	sl, [sp, #32]
 8017bc8:	464f      	mov	r7, r9
 8017bca:	e791      	b.n	8017af0 <_dtoa_r+0x3e0>
 8017bcc:	4b4d      	ldr	r3, [pc, #308]	; (8017d04 <_dtoa_r+0x5f4>)
 8017bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017bd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d047      	beq.n	8017c6c <_dtoa_r+0x55c>
 8017bdc:	4602      	mov	r2, r0
 8017bde:	460b      	mov	r3, r1
 8017be0:	2000      	movs	r0, #0
 8017be2:	494e      	ldr	r1, [pc, #312]	; (8017d1c <_dtoa_r+0x60c>)
 8017be4:	f7e8 fe4a 	bl	800087c <__aeabi_ddiv>
 8017be8:	462a      	mov	r2, r5
 8017bea:	4633      	mov	r3, r6
 8017bec:	f7e8 fb64 	bl	80002b8 <__aeabi_dsub>
 8017bf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bf4:	465d      	mov	r5, fp
 8017bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bfa:	f7e8 ffc5 	bl	8000b88 <__aeabi_d2iz>
 8017bfe:	4606      	mov	r6, r0
 8017c00:	f7e8 fca8 	bl	8000554 <__aeabi_i2d>
 8017c04:	4602      	mov	r2, r0
 8017c06:	460b      	mov	r3, r1
 8017c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c0c:	f7e8 fb54 	bl	80002b8 <__aeabi_dsub>
 8017c10:	3630      	adds	r6, #48	; 0x30
 8017c12:	f805 6b01 	strb.w	r6, [r5], #1
 8017c16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8017c1e:	f7e8 ff75 	bl	8000b0c <__aeabi_dcmplt>
 8017c22:	2800      	cmp	r0, #0
 8017c24:	d163      	bne.n	8017cee <_dtoa_r+0x5de>
 8017c26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	4937      	ldr	r1, [pc, #220]	; (8017d0c <_dtoa_r+0x5fc>)
 8017c2e:	f7e8 fb43 	bl	80002b8 <__aeabi_dsub>
 8017c32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c36:	f7e8 ff69 	bl	8000b0c <__aeabi_dcmplt>
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	f040 80b7 	bne.w	8017dae <_dtoa_r+0x69e>
 8017c40:	eba5 030b 	sub.w	r3, r5, fp
 8017c44:	429f      	cmp	r7, r3
 8017c46:	f77f af7c 	ble.w	8017b42 <_dtoa_r+0x432>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	4b30      	ldr	r3, [pc, #192]	; (8017d10 <_dtoa_r+0x600>)
 8017c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c52:	f7e8 fce9 	bl	8000628 <__aeabi_dmul>
 8017c56:	2200      	movs	r2, #0
 8017c58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017c5c:	4b2c      	ldr	r3, [pc, #176]	; (8017d10 <_dtoa_r+0x600>)
 8017c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c62:	f7e8 fce1 	bl	8000628 <__aeabi_dmul>
 8017c66:	e9cd 0100 	strd	r0, r1, [sp]
 8017c6a:	e7c4      	b.n	8017bf6 <_dtoa_r+0x4e6>
 8017c6c:	462a      	mov	r2, r5
 8017c6e:	4633      	mov	r3, r6
 8017c70:	f7e8 fcda 	bl	8000628 <__aeabi_dmul>
 8017c74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017c78:	eb0b 0507 	add.w	r5, fp, r7
 8017c7c:	465e      	mov	r6, fp
 8017c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c82:	f7e8 ff81 	bl	8000b88 <__aeabi_d2iz>
 8017c86:	4607      	mov	r7, r0
 8017c88:	f7e8 fc64 	bl	8000554 <__aeabi_i2d>
 8017c8c:	3730      	adds	r7, #48	; 0x30
 8017c8e:	4602      	mov	r2, r0
 8017c90:	460b      	mov	r3, r1
 8017c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c96:	f7e8 fb0f 	bl	80002b8 <__aeabi_dsub>
 8017c9a:	f806 7b01 	strb.w	r7, [r6], #1
 8017c9e:	42ae      	cmp	r6, r5
 8017ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8017ca4:	f04f 0200 	mov.w	r2, #0
 8017ca8:	d126      	bne.n	8017cf8 <_dtoa_r+0x5e8>
 8017caa:	4b1c      	ldr	r3, [pc, #112]	; (8017d1c <_dtoa_r+0x60c>)
 8017cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017cb0:	f7e8 fb04 	bl	80002bc <__adddf3>
 8017cb4:	4602      	mov	r2, r0
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017cbc:	f7e8 ff44 	bl	8000b48 <__aeabi_dcmpgt>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d174      	bne.n	8017dae <_dtoa_r+0x69e>
 8017cc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017cc8:	2000      	movs	r0, #0
 8017cca:	4914      	ldr	r1, [pc, #80]	; (8017d1c <_dtoa_r+0x60c>)
 8017ccc:	f7e8 faf4 	bl	80002b8 <__aeabi_dsub>
 8017cd0:	4602      	mov	r2, r0
 8017cd2:	460b      	mov	r3, r1
 8017cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017cd8:	f7e8 ff18 	bl	8000b0c <__aeabi_dcmplt>
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	f43f af30 	beq.w	8017b42 <_dtoa_r+0x432>
 8017ce2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ce6:	2b30      	cmp	r3, #48	; 0x30
 8017ce8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017cec:	d002      	beq.n	8017cf4 <_dtoa_r+0x5e4>
 8017cee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017cf2:	e04a      	b.n	8017d8a <_dtoa_r+0x67a>
 8017cf4:	4615      	mov	r5, r2
 8017cf6:	e7f4      	b.n	8017ce2 <_dtoa_r+0x5d2>
 8017cf8:	4b05      	ldr	r3, [pc, #20]	; (8017d10 <_dtoa_r+0x600>)
 8017cfa:	f7e8 fc95 	bl	8000628 <__aeabi_dmul>
 8017cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8017d02:	e7bc      	b.n	8017c7e <_dtoa_r+0x56e>
 8017d04:	0801a610 	.word	0x0801a610
 8017d08:	0801a5e8 	.word	0x0801a5e8
 8017d0c:	3ff00000 	.word	0x3ff00000
 8017d10:	40240000 	.word	0x40240000
 8017d14:	401c0000 	.word	0x401c0000
 8017d18:	40140000 	.word	0x40140000
 8017d1c:	3fe00000 	.word	0x3fe00000
 8017d20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017d24:	465d      	mov	r5, fp
 8017d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d2a:	4630      	mov	r0, r6
 8017d2c:	4639      	mov	r1, r7
 8017d2e:	f7e8 fda5 	bl	800087c <__aeabi_ddiv>
 8017d32:	f7e8 ff29 	bl	8000b88 <__aeabi_d2iz>
 8017d36:	4680      	mov	r8, r0
 8017d38:	f7e8 fc0c 	bl	8000554 <__aeabi_i2d>
 8017d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d40:	f7e8 fc72 	bl	8000628 <__aeabi_dmul>
 8017d44:	4602      	mov	r2, r0
 8017d46:	460b      	mov	r3, r1
 8017d48:	4630      	mov	r0, r6
 8017d4a:	4639      	mov	r1, r7
 8017d4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017d50:	f7e8 fab2 	bl	80002b8 <__aeabi_dsub>
 8017d54:	f805 6b01 	strb.w	r6, [r5], #1
 8017d58:	eba5 060b 	sub.w	r6, r5, fp
 8017d5c:	45b1      	cmp	r9, r6
 8017d5e:	4602      	mov	r2, r0
 8017d60:	460b      	mov	r3, r1
 8017d62:	d139      	bne.n	8017dd8 <_dtoa_r+0x6c8>
 8017d64:	f7e8 faaa 	bl	80002bc <__adddf3>
 8017d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d6c:	4606      	mov	r6, r0
 8017d6e:	460f      	mov	r7, r1
 8017d70:	f7e8 feea 	bl	8000b48 <__aeabi_dcmpgt>
 8017d74:	b9c8      	cbnz	r0, 8017daa <_dtoa_r+0x69a>
 8017d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d7a:	4630      	mov	r0, r6
 8017d7c:	4639      	mov	r1, r7
 8017d7e:	f7e8 febb 	bl	8000af8 <__aeabi_dcmpeq>
 8017d82:	b110      	cbz	r0, 8017d8a <_dtoa_r+0x67a>
 8017d84:	f018 0f01 	tst.w	r8, #1
 8017d88:	d10f      	bne.n	8017daa <_dtoa_r+0x69a>
 8017d8a:	9904      	ldr	r1, [sp, #16]
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	f000 fe18 	bl	80189c2 <_Bfree>
 8017d92:	2300      	movs	r3, #0
 8017d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d96:	702b      	strb	r3, [r5, #0]
 8017d98:	f10a 0301 	add.w	r3, sl, #1
 8017d9c:	6013      	str	r3, [r2, #0]
 8017d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	f000 8241 	beq.w	8018228 <_dtoa_r+0xb18>
 8017da6:	601d      	str	r5, [r3, #0]
 8017da8:	e23e      	b.n	8018228 <_dtoa_r+0xb18>
 8017daa:	f8cd a020 	str.w	sl, [sp, #32]
 8017dae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017db2:	2a39      	cmp	r2, #57	; 0x39
 8017db4:	f105 33ff 	add.w	r3, r5, #4294967295
 8017db8:	d108      	bne.n	8017dcc <_dtoa_r+0x6bc>
 8017dba:	459b      	cmp	fp, r3
 8017dbc:	d10a      	bne.n	8017dd4 <_dtoa_r+0x6c4>
 8017dbe:	9b08      	ldr	r3, [sp, #32]
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	9308      	str	r3, [sp, #32]
 8017dc4:	2330      	movs	r3, #48	; 0x30
 8017dc6:	f88b 3000 	strb.w	r3, [fp]
 8017dca:	465b      	mov	r3, fp
 8017dcc:	781a      	ldrb	r2, [r3, #0]
 8017dce:	3201      	adds	r2, #1
 8017dd0:	701a      	strb	r2, [r3, #0]
 8017dd2:	e78c      	b.n	8017cee <_dtoa_r+0x5de>
 8017dd4:	461d      	mov	r5, r3
 8017dd6:	e7ea      	b.n	8017dae <_dtoa_r+0x69e>
 8017dd8:	2200      	movs	r2, #0
 8017dda:	4b9b      	ldr	r3, [pc, #620]	; (8018048 <_dtoa_r+0x938>)
 8017ddc:	f7e8 fc24 	bl	8000628 <__aeabi_dmul>
 8017de0:	2200      	movs	r2, #0
 8017de2:	2300      	movs	r3, #0
 8017de4:	4606      	mov	r6, r0
 8017de6:	460f      	mov	r7, r1
 8017de8:	f7e8 fe86 	bl	8000af8 <__aeabi_dcmpeq>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d09a      	beq.n	8017d26 <_dtoa_r+0x616>
 8017df0:	e7cb      	b.n	8017d8a <_dtoa_r+0x67a>
 8017df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017df4:	2a00      	cmp	r2, #0
 8017df6:	f000 808b 	beq.w	8017f10 <_dtoa_r+0x800>
 8017dfa:	9a06      	ldr	r2, [sp, #24]
 8017dfc:	2a01      	cmp	r2, #1
 8017dfe:	dc6e      	bgt.n	8017ede <_dtoa_r+0x7ce>
 8017e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e02:	2a00      	cmp	r2, #0
 8017e04:	d067      	beq.n	8017ed6 <_dtoa_r+0x7c6>
 8017e06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017e0a:	9f07      	ldr	r7, [sp, #28]
 8017e0c:	9d05      	ldr	r5, [sp, #20]
 8017e0e:	9a05      	ldr	r2, [sp, #20]
 8017e10:	2101      	movs	r1, #1
 8017e12:	441a      	add	r2, r3
 8017e14:	4620      	mov	r0, r4
 8017e16:	9205      	str	r2, [sp, #20]
 8017e18:	4498      	add	r8, r3
 8017e1a:	f000 feb0 	bl	8018b7e <__i2b>
 8017e1e:	4606      	mov	r6, r0
 8017e20:	2d00      	cmp	r5, #0
 8017e22:	dd0c      	ble.n	8017e3e <_dtoa_r+0x72e>
 8017e24:	f1b8 0f00 	cmp.w	r8, #0
 8017e28:	dd09      	ble.n	8017e3e <_dtoa_r+0x72e>
 8017e2a:	4545      	cmp	r5, r8
 8017e2c:	9a05      	ldr	r2, [sp, #20]
 8017e2e:	462b      	mov	r3, r5
 8017e30:	bfa8      	it	ge
 8017e32:	4643      	movge	r3, r8
 8017e34:	1ad2      	subs	r2, r2, r3
 8017e36:	9205      	str	r2, [sp, #20]
 8017e38:	1aed      	subs	r5, r5, r3
 8017e3a:	eba8 0803 	sub.w	r8, r8, r3
 8017e3e:	9b07      	ldr	r3, [sp, #28]
 8017e40:	b1eb      	cbz	r3, 8017e7e <_dtoa_r+0x76e>
 8017e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d067      	beq.n	8017f18 <_dtoa_r+0x808>
 8017e48:	b18f      	cbz	r7, 8017e6e <_dtoa_r+0x75e>
 8017e4a:	4631      	mov	r1, r6
 8017e4c:	463a      	mov	r2, r7
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f000 ff34 	bl	8018cbc <__pow5mult>
 8017e54:	9a04      	ldr	r2, [sp, #16]
 8017e56:	4601      	mov	r1, r0
 8017e58:	4606      	mov	r6, r0
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f000 fe98 	bl	8018b90 <__multiply>
 8017e60:	9904      	ldr	r1, [sp, #16]
 8017e62:	9008      	str	r0, [sp, #32]
 8017e64:	4620      	mov	r0, r4
 8017e66:	f000 fdac 	bl	80189c2 <_Bfree>
 8017e6a:	9b08      	ldr	r3, [sp, #32]
 8017e6c:	9304      	str	r3, [sp, #16]
 8017e6e:	9b07      	ldr	r3, [sp, #28]
 8017e70:	1bda      	subs	r2, r3, r7
 8017e72:	d004      	beq.n	8017e7e <_dtoa_r+0x76e>
 8017e74:	9904      	ldr	r1, [sp, #16]
 8017e76:	4620      	mov	r0, r4
 8017e78:	f000 ff20 	bl	8018cbc <__pow5mult>
 8017e7c:	9004      	str	r0, [sp, #16]
 8017e7e:	2101      	movs	r1, #1
 8017e80:	4620      	mov	r0, r4
 8017e82:	f000 fe7c 	bl	8018b7e <__i2b>
 8017e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e88:	4607      	mov	r7, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	f000 81d0 	beq.w	8018230 <_dtoa_r+0xb20>
 8017e90:	461a      	mov	r2, r3
 8017e92:	4601      	mov	r1, r0
 8017e94:	4620      	mov	r0, r4
 8017e96:	f000 ff11 	bl	8018cbc <__pow5mult>
 8017e9a:	9b06      	ldr	r3, [sp, #24]
 8017e9c:	2b01      	cmp	r3, #1
 8017e9e:	4607      	mov	r7, r0
 8017ea0:	dc40      	bgt.n	8017f24 <_dtoa_r+0x814>
 8017ea2:	9b00      	ldr	r3, [sp, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d139      	bne.n	8017f1c <_dtoa_r+0x80c>
 8017ea8:	9b01      	ldr	r3, [sp, #4]
 8017eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d136      	bne.n	8017f20 <_dtoa_r+0x810>
 8017eb2:	9b01      	ldr	r3, [sp, #4]
 8017eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017eb8:	0d1b      	lsrs	r3, r3, #20
 8017eba:	051b      	lsls	r3, r3, #20
 8017ebc:	b12b      	cbz	r3, 8017eca <_dtoa_r+0x7ba>
 8017ebe:	9b05      	ldr	r3, [sp, #20]
 8017ec0:	3301      	adds	r3, #1
 8017ec2:	9305      	str	r3, [sp, #20]
 8017ec4:	f108 0801 	add.w	r8, r8, #1
 8017ec8:	2301      	movs	r3, #1
 8017eca:	9307      	str	r3, [sp, #28]
 8017ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d12a      	bne.n	8017f28 <_dtoa_r+0x818>
 8017ed2:	2001      	movs	r0, #1
 8017ed4:	e030      	b.n	8017f38 <_dtoa_r+0x828>
 8017ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ed8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017edc:	e795      	b.n	8017e0a <_dtoa_r+0x6fa>
 8017ede:	9b07      	ldr	r3, [sp, #28]
 8017ee0:	f109 37ff 	add.w	r7, r9, #4294967295
 8017ee4:	42bb      	cmp	r3, r7
 8017ee6:	bfbf      	itttt	lt
 8017ee8:	9b07      	ldrlt	r3, [sp, #28]
 8017eea:	9707      	strlt	r7, [sp, #28]
 8017eec:	1afa      	sublt	r2, r7, r3
 8017eee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017ef0:	bfbb      	ittet	lt
 8017ef2:	189b      	addlt	r3, r3, r2
 8017ef4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017ef6:	1bdf      	subge	r7, r3, r7
 8017ef8:	2700      	movlt	r7, #0
 8017efa:	f1b9 0f00 	cmp.w	r9, #0
 8017efe:	bfb5      	itete	lt
 8017f00:	9b05      	ldrlt	r3, [sp, #20]
 8017f02:	9d05      	ldrge	r5, [sp, #20]
 8017f04:	eba3 0509 	sublt.w	r5, r3, r9
 8017f08:	464b      	movge	r3, r9
 8017f0a:	bfb8      	it	lt
 8017f0c:	2300      	movlt	r3, #0
 8017f0e:	e77e      	b.n	8017e0e <_dtoa_r+0x6fe>
 8017f10:	9f07      	ldr	r7, [sp, #28]
 8017f12:	9d05      	ldr	r5, [sp, #20]
 8017f14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017f16:	e783      	b.n	8017e20 <_dtoa_r+0x710>
 8017f18:	9a07      	ldr	r2, [sp, #28]
 8017f1a:	e7ab      	b.n	8017e74 <_dtoa_r+0x764>
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	e7d4      	b.n	8017eca <_dtoa_r+0x7ba>
 8017f20:	9b00      	ldr	r3, [sp, #0]
 8017f22:	e7d2      	b.n	8017eca <_dtoa_r+0x7ba>
 8017f24:	2300      	movs	r3, #0
 8017f26:	9307      	str	r3, [sp, #28]
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017f2e:	6918      	ldr	r0, [r3, #16]
 8017f30:	f000 fdd7 	bl	8018ae2 <__hi0bits>
 8017f34:	f1c0 0020 	rsb	r0, r0, #32
 8017f38:	4440      	add	r0, r8
 8017f3a:	f010 001f 	ands.w	r0, r0, #31
 8017f3e:	d047      	beq.n	8017fd0 <_dtoa_r+0x8c0>
 8017f40:	f1c0 0320 	rsb	r3, r0, #32
 8017f44:	2b04      	cmp	r3, #4
 8017f46:	dd3b      	ble.n	8017fc0 <_dtoa_r+0x8b0>
 8017f48:	9b05      	ldr	r3, [sp, #20]
 8017f4a:	f1c0 001c 	rsb	r0, r0, #28
 8017f4e:	4403      	add	r3, r0
 8017f50:	9305      	str	r3, [sp, #20]
 8017f52:	4405      	add	r5, r0
 8017f54:	4480      	add	r8, r0
 8017f56:	9b05      	ldr	r3, [sp, #20]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	dd05      	ble.n	8017f68 <_dtoa_r+0x858>
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	9904      	ldr	r1, [sp, #16]
 8017f60:	4620      	mov	r0, r4
 8017f62:	f000 fef9 	bl	8018d58 <__lshift>
 8017f66:	9004      	str	r0, [sp, #16]
 8017f68:	f1b8 0f00 	cmp.w	r8, #0
 8017f6c:	dd05      	ble.n	8017f7a <_dtoa_r+0x86a>
 8017f6e:	4639      	mov	r1, r7
 8017f70:	4642      	mov	r2, r8
 8017f72:	4620      	mov	r0, r4
 8017f74:	f000 fef0 	bl	8018d58 <__lshift>
 8017f78:	4607      	mov	r7, r0
 8017f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f7c:	b353      	cbz	r3, 8017fd4 <_dtoa_r+0x8c4>
 8017f7e:	4639      	mov	r1, r7
 8017f80:	9804      	ldr	r0, [sp, #16]
 8017f82:	f000 ff3d 	bl	8018e00 <__mcmp>
 8017f86:	2800      	cmp	r0, #0
 8017f88:	da24      	bge.n	8017fd4 <_dtoa_r+0x8c4>
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	220a      	movs	r2, #10
 8017f8e:	9904      	ldr	r1, [sp, #16]
 8017f90:	4620      	mov	r0, r4
 8017f92:	f000 fd2d 	bl	80189f0 <__multadd>
 8017f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f98:	9004      	str	r0, [sp, #16]
 8017f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	f000 814d 	beq.w	801823e <_dtoa_r+0xb2e>
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	4631      	mov	r1, r6
 8017fa8:	220a      	movs	r2, #10
 8017faa:	4620      	mov	r0, r4
 8017fac:	f000 fd20 	bl	80189f0 <__multadd>
 8017fb0:	9b02      	ldr	r3, [sp, #8]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	4606      	mov	r6, r0
 8017fb6:	dc4f      	bgt.n	8018058 <_dtoa_r+0x948>
 8017fb8:	9b06      	ldr	r3, [sp, #24]
 8017fba:	2b02      	cmp	r3, #2
 8017fbc:	dd4c      	ble.n	8018058 <_dtoa_r+0x948>
 8017fbe:	e011      	b.n	8017fe4 <_dtoa_r+0x8d4>
 8017fc0:	d0c9      	beq.n	8017f56 <_dtoa_r+0x846>
 8017fc2:	9a05      	ldr	r2, [sp, #20]
 8017fc4:	331c      	adds	r3, #28
 8017fc6:	441a      	add	r2, r3
 8017fc8:	9205      	str	r2, [sp, #20]
 8017fca:	441d      	add	r5, r3
 8017fcc:	4498      	add	r8, r3
 8017fce:	e7c2      	b.n	8017f56 <_dtoa_r+0x846>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	e7f6      	b.n	8017fc2 <_dtoa_r+0x8b2>
 8017fd4:	f1b9 0f00 	cmp.w	r9, #0
 8017fd8:	dc38      	bgt.n	801804c <_dtoa_r+0x93c>
 8017fda:	9b06      	ldr	r3, [sp, #24]
 8017fdc:	2b02      	cmp	r3, #2
 8017fde:	dd35      	ble.n	801804c <_dtoa_r+0x93c>
 8017fe0:	f8cd 9008 	str.w	r9, [sp, #8]
 8017fe4:	9b02      	ldr	r3, [sp, #8]
 8017fe6:	b963      	cbnz	r3, 8018002 <_dtoa_r+0x8f2>
 8017fe8:	4639      	mov	r1, r7
 8017fea:	2205      	movs	r2, #5
 8017fec:	4620      	mov	r0, r4
 8017fee:	f000 fcff 	bl	80189f0 <__multadd>
 8017ff2:	4601      	mov	r1, r0
 8017ff4:	4607      	mov	r7, r0
 8017ff6:	9804      	ldr	r0, [sp, #16]
 8017ff8:	f000 ff02 	bl	8018e00 <__mcmp>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	f73f adcc 	bgt.w	8017b9a <_dtoa_r+0x48a>
 8018002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018004:	465d      	mov	r5, fp
 8018006:	ea6f 0a03 	mvn.w	sl, r3
 801800a:	f04f 0900 	mov.w	r9, #0
 801800e:	4639      	mov	r1, r7
 8018010:	4620      	mov	r0, r4
 8018012:	f000 fcd6 	bl	80189c2 <_Bfree>
 8018016:	2e00      	cmp	r6, #0
 8018018:	f43f aeb7 	beq.w	8017d8a <_dtoa_r+0x67a>
 801801c:	f1b9 0f00 	cmp.w	r9, #0
 8018020:	d005      	beq.n	801802e <_dtoa_r+0x91e>
 8018022:	45b1      	cmp	r9, r6
 8018024:	d003      	beq.n	801802e <_dtoa_r+0x91e>
 8018026:	4649      	mov	r1, r9
 8018028:	4620      	mov	r0, r4
 801802a:	f000 fcca 	bl	80189c2 <_Bfree>
 801802e:	4631      	mov	r1, r6
 8018030:	4620      	mov	r0, r4
 8018032:	f000 fcc6 	bl	80189c2 <_Bfree>
 8018036:	e6a8      	b.n	8017d8a <_dtoa_r+0x67a>
 8018038:	2700      	movs	r7, #0
 801803a:	463e      	mov	r6, r7
 801803c:	e7e1      	b.n	8018002 <_dtoa_r+0x8f2>
 801803e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018042:	463e      	mov	r6, r7
 8018044:	e5a9      	b.n	8017b9a <_dtoa_r+0x48a>
 8018046:	bf00      	nop
 8018048:	40240000 	.word	0x40240000
 801804c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801804e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018052:	2b00      	cmp	r3, #0
 8018054:	f000 80fa 	beq.w	801824c <_dtoa_r+0xb3c>
 8018058:	2d00      	cmp	r5, #0
 801805a:	dd05      	ble.n	8018068 <_dtoa_r+0x958>
 801805c:	4631      	mov	r1, r6
 801805e:	462a      	mov	r2, r5
 8018060:	4620      	mov	r0, r4
 8018062:	f000 fe79 	bl	8018d58 <__lshift>
 8018066:	4606      	mov	r6, r0
 8018068:	9b07      	ldr	r3, [sp, #28]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d04c      	beq.n	8018108 <_dtoa_r+0x9f8>
 801806e:	6871      	ldr	r1, [r6, #4]
 8018070:	4620      	mov	r0, r4
 8018072:	f000 fc72 	bl	801895a <_Balloc>
 8018076:	6932      	ldr	r2, [r6, #16]
 8018078:	3202      	adds	r2, #2
 801807a:	4605      	mov	r5, r0
 801807c:	0092      	lsls	r2, r2, #2
 801807e:	f106 010c 	add.w	r1, r6, #12
 8018082:	300c      	adds	r0, #12
 8018084:	f000 fc5e 	bl	8018944 <memcpy>
 8018088:	2201      	movs	r2, #1
 801808a:	4629      	mov	r1, r5
 801808c:	4620      	mov	r0, r4
 801808e:	f000 fe63 	bl	8018d58 <__lshift>
 8018092:	9b00      	ldr	r3, [sp, #0]
 8018094:	f8cd b014 	str.w	fp, [sp, #20]
 8018098:	f003 0301 	and.w	r3, r3, #1
 801809c:	46b1      	mov	r9, r6
 801809e:	9307      	str	r3, [sp, #28]
 80180a0:	4606      	mov	r6, r0
 80180a2:	4639      	mov	r1, r7
 80180a4:	9804      	ldr	r0, [sp, #16]
 80180a6:	f7ff faa5 	bl	80175f4 <quorem>
 80180aa:	4649      	mov	r1, r9
 80180ac:	4605      	mov	r5, r0
 80180ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80180b2:	9804      	ldr	r0, [sp, #16]
 80180b4:	f000 fea4 	bl	8018e00 <__mcmp>
 80180b8:	4632      	mov	r2, r6
 80180ba:	9000      	str	r0, [sp, #0]
 80180bc:	4639      	mov	r1, r7
 80180be:	4620      	mov	r0, r4
 80180c0:	f000 feb8 	bl	8018e34 <__mdiff>
 80180c4:	68c3      	ldr	r3, [r0, #12]
 80180c6:	4602      	mov	r2, r0
 80180c8:	bb03      	cbnz	r3, 801810c <_dtoa_r+0x9fc>
 80180ca:	4601      	mov	r1, r0
 80180cc:	9008      	str	r0, [sp, #32]
 80180ce:	9804      	ldr	r0, [sp, #16]
 80180d0:	f000 fe96 	bl	8018e00 <__mcmp>
 80180d4:	9a08      	ldr	r2, [sp, #32]
 80180d6:	4603      	mov	r3, r0
 80180d8:	4611      	mov	r1, r2
 80180da:	4620      	mov	r0, r4
 80180dc:	9308      	str	r3, [sp, #32]
 80180de:	f000 fc70 	bl	80189c2 <_Bfree>
 80180e2:	9b08      	ldr	r3, [sp, #32]
 80180e4:	b9a3      	cbnz	r3, 8018110 <_dtoa_r+0xa00>
 80180e6:	9a06      	ldr	r2, [sp, #24]
 80180e8:	b992      	cbnz	r2, 8018110 <_dtoa_r+0xa00>
 80180ea:	9a07      	ldr	r2, [sp, #28]
 80180ec:	b982      	cbnz	r2, 8018110 <_dtoa_r+0xa00>
 80180ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180f2:	d029      	beq.n	8018148 <_dtoa_r+0xa38>
 80180f4:	9b00      	ldr	r3, [sp, #0]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	dd01      	ble.n	80180fe <_dtoa_r+0x9ee>
 80180fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80180fe:	9b05      	ldr	r3, [sp, #20]
 8018100:	1c5d      	adds	r5, r3, #1
 8018102:	f883 8000 	strb.w	r8, [r3]
 8018106:	e782      	b.n	801800e <_dtoa_r+0x8fe>
 8018108:	4630      	mov	r0, r6
 801810a:	e7c2      	b.n	8018092 <_dtoa_r+0x982>
 801810c:	2301      	movs	r3, #1
 801810e:	e7e3      	b.n	80180d8 <_dtoa_r+0x9c8>
 8018110:	9a00      	ldr	r2, [sp, #0]
 8018112:	2a00      	cmp	r2, #0
 8018114:	db04      	blt.n	8018120 <_dtoa_r+0xa10>
 8018116:	d125      	bne.n	8018164 <_dtoa_r+0xa54>
 8018118:	9a06      	ldr	r2, [sp, #24]
 801811a:	bb1a      	cbnz	r2, 8018164 <_dtoa_r+0xa54>
 801811c:	9a07      	ldr	r2, [sp, #28]
 801811e:	bb0a      	cbnz	r2, 8018164 <_dtoa_r+0xa54>
 8018120:	2b00      	cmp	r3, #0
 8018122:	ddec      	ble.n	80180fe <_dtoa_r+0x9ee>
 8018124:	2201      	movs	r2, #1
 8018126:	9904      	ldr	r1, [sp, #16]
 8018128:	4620      	mov	r0, r4
 801812a:	f000 fe15 	bl	8018d58 <__lshift>
 801812e:	4639      	mov	r1, r7
 8018130:	9004      	str	r0, [sp, #16]
 8018132:	f000 fe65 	bl	8018e00 <__mcmp>
 8018136:	2800      	cmp	r0, #0
 8018138:	dc03      	bgt.n	8018142 <_dtoa_r+0xa32>
 801813a:	d1e0      	bne.n	80180fe <_dtoa_r+0x9ee>
 801813c:	f018 0f01 	tst.w	r8, #1
 8018140:	d0dd      	beq.n	80180fe <_dtoa_r+0x9ee>
 8018142:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018146:	d1d8      	bne.n	80180fa <_dtoa_r+0x9ea>
 8018148:	9b05      	ldr	r3, [sp, #20]
 801814a:	9a05      	ldr	r2, [sp, #20]
 801814c:	1c5d      	adds	r5, r3, #1
 801814e:	2339      	movs	r3, #57	; 0x39
 8018150:	7013      	strb	r3, [r2, #0]
 8018152:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018156:	2b39      	cmp	r3, #57	; 0x39
 8018158:	f105 32ff 	add.w	r2, r5, #4294967295
 801815c:	d04f      	beq.n	80181fe <_dtoa_r+0xaee>
 801815e:	3301      	adds	r3, #1
 8018160:	7013      	strb	r3, [r2, #0]
 8018162:	e754      	b.n	801800e <_dtoa_r+0x8fe>
 8018164:	9a05      	ldr	r2, [sp, #20]
 8018166:	2b00      	cmp	r3, #0
 8018168:	f102 0501 	add.w	r5, r2, #1
 801816c:	dd06      	ble.n	801817c <_dtoa_r+0xa6c>
 801816e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018172:	d0e9      	beq.n	8018148 <_dtoa_r+0xa38>
 8018174:	f108 0801 	add.w	r8, r8, #1
 8018178:	9b05      	ldr	r3, [sp, #20]
 801817a:	e7c2      	b.n	8018102 <_dtoa_r+0x9f2>
 801817c:	9a02      	ldr	r2, [sp, #8]
 801817e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018182:	eba5 030b 	sub.w	r3, r5, fp
 8018186:	4293      	cmp	r3, r2
 8018188:	d021      	beq.n	80181ce <_dtoa_r+0xabe>
 801818a:	2300      	movs	r3, #0
 801818c:	220a      	movs	r2, #10
 801818e:	9904      	ldr	r1, [sp, #16]
 8018190:	4620      	mov	r0, r4
 8018192:	f000 fc2d 	bl	80189f0 <__multadd>
 8018196:	45b1      	cmp	r9, r6
 8018198:	9004      	str	r0, [sp, #16]
 801819a:	f04f 0300 	mov.w	r3, #0
 801819e:	f04f 020a 	mov.w	r2, #10
 80181a2:	4649      	mov	r1, r9
 80181a4:	4620      	mov	r0, r4
 80181a6:	d105      	bne.n	80181b4 <_dtoa_r+0xaa4>
 80181a8:	f000 fc22 	bl	80189f0 <__multadd>
 80181ac:	4681      	mov	r9, r0
 80181ae:	4606      	mov	r6, r0
 80181b0:	9505      	str	r5, [sp, #20]
 80181b2:	e776      	b.n	80180a2 <_dtoa_r+0x992>
 80181b4:	f000 fc1c 	bl	80189f0 <__multadd>
 80181b8:	4631      	mov	r1, r6
 80181ba:	4681      	mov	r9, r0
 80181bc:	2300      	movs	r3, #0
 80181be:	220a      	movs	r2, #10
 80181c0:	4620      	mov	r0, r4
 80181c2:	f000 fc15 	bl	80189f0 <__multadd>
 80181c6:	4606      	mov	r6, r0
 80181c8:	e7f2      	b.n	80181b0 <_dtoa_r+0xaa0>
 80181ca:	f04f 0900 	mov.w	r9, #0
 80181ce:	2201      	movs	r2, #1
 80181d0:	9904      	ldr	r1, [sp, #16]
 80181d2:	4620      	mov	r0, r4
 80181d4:	f000 fdc0 	bl	8018d58 <__lshift>
 80181d8:	4639      	mov	r1, r7
 80181da:	9004      	str	r0, [sp, #16]
 80181dc:	f000 fe10 	bl	8018e00 <__mcmp>
 80181e0:	2800      	cmp	r0, #0
 80181e2:	dcb6      	bgt.n	8018152 <_dtoa_r+0xa42>
 80181e4:	d102      	bne.n	80181ec <_dtoa_r+0xadc>
 80181e6:	f018 0f01 	tst.w	r8, #1
 80181ea:	d1b2      	bne.n	8018152 <_dtoa_r+0xa42>
 80181ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80181f0:	2b30      	cmp	r3, #48	; 0x30
 80181f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80181f6:	f47f af0a 	bne.w	801800e <_dtoa_r+0x8fe>
 80181fa:	4615      	mov	r5, r2
 80181fc:	e7f6      	b.n	80181ec <_dtoa_r+0xadc>
 80181fe:	4593      	cmp	fp, r2
 8018200:	d105      	bne.n	801820e <_dtoa_r+0xafe>
 8018202:	2331      	movs	r3, #49	; 0x31
 8018204:	f10a 0a01 	add.w	sl, sl, #1
 8018208:	f88b 3000 	strb.w	r3, [fp]
 801820c:	e6ff      	b.n	801800e <_dtoa_r+0x8fe>
 801820e:	4615      	mov	r5, r2
 8018210:	e79f      	b.n	8018152 <_dtoa_r+0xa42>
 8018212:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018278 <_dtoa_r+0xb68>
 8018216:	e007      	b.n	8018228 <_dtoa_r+0xb18>
 8018218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801821a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801827c <_dtoa_r+0xb6c>
 801821e:	b11b      	cbz	r3, 8018228 <_dtoa_r+0xb18>
 8018220:	f10b 0308 	add.w	r3, fp, #8
 8018224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018226:	6013      	str	r3, [r2, #0]
 8018228:	4658      	mov	r0, fp
 801822a:	b017      	add	sp, #92	; 0x5c
 801822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018230:	9b06      	ldr	r3, [sp, #24]
 8018232:	2b01      	cmp	r3, #1
 8018234:	f77f ae35 	ble.w	8017ea2 <_dtoa_r+0x792>
 8018238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801823a:	9307      	str	r3, [sp, #28]
 801823c:	e649      	b.n	8017ed2 <_dtoa_r+0x7c2>
 801823e:	9b02      	ldr	r3, [sp, #8]
 8018240:	2b00      	cmp	r3, #0
 8018242:	dc03      	bgt.n	801824c <_dtoa_r+0xb3c>
 8018244:	9b06      	ldr	r3, [sp, #24]
 8018246:	2b02      	cmp	r3, #2
 8018248:	f73f aecc 	bgt.w	8017fe4 <_dtoa_r+0x8d4>
 801824c:	465d      	mov	r5, fp
 801824e:	4639      	mov	r1, r7
 8018250:	9804      	ldr	r0, [sp, #16]
 8018252:	f7ff f9cf 	bl	80175f4 <quorem>
 8018256:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801825a:	f805 8b01 	strb.w	r8, [r5], #1
 801825e:	9a02      	ldr	r2, [sp, #8]
 8018260:	eba5 030b 	sub.w	r3, r5, fp
 8018264:	429a      	cmp	r2, r3
 8018266:	ddb0      	ble.n	80181ca <_dtoa_r+0xaba>
 8018268:	2300      	movs	r3, #0
 801826a:	220a      	movs	r2, #10
 801826c:	9904      	ldr	r1, [sp, #16]
 801826e:	4620      	mov	r0, r4
 8018270:	f000 fbbe 	bl	80189f0 <__multadd>
 8018274:	9004      	str	r0, [sp, #16]
 8018276:	e7ea      	b.n	801824e <_dtoa_r+0xb3e>
 8018278:	0801a70b 	.word	0x0801a70b
 801827c:	0801a5d0 	.word	0x0801a5d0

08018280 <rshift>:
 8018280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018282:	6906      	ldr	r6, [r0, #16]
 8018284:	114b      	asrs	r3, r1, #5
 8018286:	429e      	cmp	r6, r3
 8018288:	f100 0414 	add.w	r4, r0, #20
 801828c:	dd30      	ble.n	80182f0 <rshift+0x70>
 801828e:	f011 011f 	ands.w	r1, r1, #31
 8018292:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018296:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801829a:	d108      	bne.n	80182ae <rshift+0x2e>
 801829c:	4621      	mov	r1, r4
 801829e:	42b2      	cmp	r2, r6
 80182a0:	460b      	mov	r3, r1
 80182a2:	d211      	bcs.n	80182c8 <rshift+0x48>
 80182a4:	f852 3b04 	ldr.w	r3, [r2], #4
 80182a8:	f841 3b04 	str.w	r3, [r1], #4
 80182ac:	e7f7      	b.n	801829e <rshift+0x1e>
 80182ae:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80182b2:	f1c1 0c20 	rsb	ip, r1, #32
 80182b6:	40cd      	lsrs	r5, r1
 80182b8:	3204      	adds	r2, #4
 80182ba:	4623      	mov	r3, r4
 80182bc:	42b2      	cmp	r2, r6
 80182be:	4617      	mov	r7, r2
 80182c0:	d30c      	bcc.n	80182dc <rshift+0x5c>
 80182c2:	601d      	str	r5, [r3, #0]
 80182c4:	b105      	cbz	r5, 80182c8 <rshift+0x48>
 80182c6:	3304      	adds	r3, #4
 80182c8:	1b1a      	subs	r2, r3, r4
 80182ca:	42a3      	cmp	r3, r4
 80182cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80182d0:	bf08      	it	eq
 80182d2:	2300      	moveq	r3, #0
 80182d4:	6102      	str	r2, [r0, #16]
 80182d6:	bf08      	it	eq
 80182d8:	6143      	streq	r3, [r0, #20]
 80182da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182dc:	683f      	ldr	r7, [r7, #0]
 80182de:	fa07 f70c 	lsl.w	r7, r7, ip
 80182e2:	433d      	orrs	r5, r7
 80182e4:	f843 5b04 	str.w	r5, [r3], #4
 80182e8:	f852 5b04 	ldr.w	r5, [r2], #4
 80182ec:	40cd      	lsrs	r5, r1
 80182ee:	e7e5      	b.n	80182bc <rshift+0x3c>
 80182f0:	4623      	mov	r3, r4
 80182f2:	e7e9      	b.n	80182c8 <rshift+0x48>

080182f4 <__hexdig_fun>:
 80182f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80182f8:	2b09      	cmp	r3, #9
 80182fa:	d802      	bhi.n	8018302 <__hexdig_fun+0xe>
 80182fc:	3820      	subs	r0, #32
 80182fe:	b2c0      	uxtb	r0, r0
 8018300:	4770      	bx	lr
 8018302:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018306:	2b05      	cmp	r3, #5
 8018308:	d801      	bhi.n	801830e <__hexdig_fun+0x1a>
 801830a:	3847      	subs	r0, #71	; 0x47
 801830c:	e7f7      	b.n	80182fe <__hexdig_fun+0xa>
 801830e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018312:	2b05      	cmp	r3, #5
 8018314:	d801      	bhi.n	801831a <__hexdig_fun+0x26>
 8018316:	3827      	subs	r0, #39	; 0x27
 8018318:	e7f1      	b.n	80182fe <__hexdig_fun+0xa>
 801831a:	2000      	movs	r0, #0
 801831c:	4770      	bx	lr

0801831e <__gethex>:
 801831e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018322:	b08b      	sub	sp, #44	; 0x2c
 8018324:	468a      	mov	sl, r1
 8018326:	9002      	str	r0, [sp, #8]
 8018328:	9816      	ldr	r0, [sp, #88]	; 0x58
 801832a:	9306      	str	r3, [sp, #24]
 801832c:	4690      	mov	r8, r2
 801832e:	f000 fadf 	bl	80188f0 <__localeconv_l>
 8018332:	6803      	ldr	r3, [r0, #0]
 8018334:	9303      	str	r3, [sp, #12]
 8018336:	4618      	mov	r0, r3
 8018338:	f7e7 ff62 	bl	8000200 <strlen>
 801833c:	9b03      	ldr	r3, [sp, #12]
 801833e:	9001      	str	r0, [sp, #4]
 8018340:	4403      	add	r3, r0
 8018342:	f04f 0b00 	mov.w	fp, #0
 8018346:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801834a:	9307      	str	r3, [sp, #28]
 801834c:	f8da 3000 	ldr.w	r3, [sl]
 8018350:	3302      	adds	r3, #2
 8018352:	461f      	mov	r7, r3
 8018354:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018358:	2830      	cmp	r0, #48	; 0x30
 801835a:	d06c      	beq.n	8018436 <__gethex+0x118>
 801835c:	f7ff ffca 	bl	80182f4 <__hexdig_fun>
 8018360:	4604      	mov	r4, r0
 8018362:	2800      	cmp	r0, #0
 8018364:	d16a      	bne.n	801843c <__gethex+0x11e>
 8018366:	9a01      	ldr	r2, [sp, #4]
 8018368:	9903      	ldr	r1, [sp, #12]
 801836a:	4638      	mov	r0, r7
 801836c:	f001 fc40 	bl	8019bf0 <strncmp>
 8018370:	2800      	cmp	r0, #0
 8018372:	d166      	bne.n	8018442 <__gethex+0x124>
 8018374:	9b01      	ldr	r3, [sp, #4]
 8018376:	5cf8      	ldrb	r0, [r7, r3]
 8018378:	18fe      	adds	r6, r7, r3
 801837a:	f7ff ffbb 	bl	80182f4 <__hexdig_fun>
 801837e:	2800      	cmp	r0, #0
 8018380:	d062      	beq.n	8018448 <__gethex+0x12a>
 8018382:	4633      	mov	r3, r6
 8018384:	7818      	ldrb	r0, [r3, #0]
 8018386:	2830      	cmp	r0, #48	; 0x30
 8018388:	461f      	mov	r7, r3
 801838a:	f103 0301 	add.w	r3, r3, #1
 801838e:	d0f9      	beq.n	8018384 <__gethex+0x66>
 8018390:	f7ff ffb0 	bl	80182f4 <__hexdig_fun>
 8018394:	fab0 f580 	clz	r5, r0
 8018398:	096d      	lsrs	r5, r5, #5
 801839a:	4634      	mov	r4, r6
 801839c:	f04f 0b01 	mov.w	fp, #1
 80183a0:	463a      	mov	r2, r7
 80183a2:	4616      	mov	r6, r2
 80183a4:	3201      	adds	r2, #1
 80183a6:	7830      	ldrb	r0, [r6, #0]
 80183a8:	f7ff ffa4 	bl	80182f4 <__hexdig_fun>
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d1f8      	bne.n	80183a2 <__gethex+0x84>
 80183b0:	9a01      	ldr	r2, [sp, #4]
 80183b2:	9903      	ldr	r1, [sp, #12]
 80183b4:	4630      	mov	r0, r6
 80183b6:	f001 fc1b 	bl	8019bf0 <strncmp>
 80183ba:	b950      	cbnz	r0, 80183d2 <__gethex+0xb4>
 80183bc:	b954      	cbnz	r4, 80183d4 <__gethex+0xb6>
 80183be:	9b01      	ldr	r3, [sp, #4]
 80183c0:	18f4      	adds	r4, r6, r3
 80183c2:	4622      	mov	r2, r4
 80183c4:	4616      	mov	r6, r2
 80183c6:	3201      	adds	r2, #1
 80183c8:	7830      	ldrb	r0, [r6, #0]
 80183ca:	f7ff ff93 	bl	80182f4 <__hexdig_fun>
 80183ce:	2800      	cmp	r0, #0
 80183d0:	d1f8      	bne.n	80183c4 <__gethex+0xa6>
 80183d2:	b10c      	cbz	r4, 80183d8 <__gethex+0xba>
 80183d4:	1ba4      	subs	r4, r4, r6
 80183d6:	00a4      	lsls	r4, r4, #2
 80183d8:	7833      	ldrb	r3, [r6, #0]
 80183da:	2b50      	cmp	r3, #80	; 0x50
 80183dc:	d001      	beq.n	80183e2 <__gethex+0xc4>
 80183de:	2b70      	cmp	r3, #112	; 0x70
 80183e0:	d140      	bne.n	8018464 <__gethex+0x146>
 80183e2:	7873      	ldrb	r3, [r6, #1]
 80183e4:	2b2b      	cmp	r3, #43	; 0x2b
 80183e6:	d031      	beq.n	801844c <__gethex+0x12e>
 80183e8:	2b2d      	cmp	r3, #45	; 0x2d
 80183ea:	d033      	beq.n	8018454 <__gethex+0x136>
 80183ec:	1c71      	adds	r1, r6, #1
 80183ee:	f04f 0900 	mov.w	r9, #0
 80183f2:	7808      	ldrb	r0, [r1, #0]
 80183f4:	f7ff ff7e 	bl	80182f4 <__hexdig_fun>
 80183f8:	1e43      	subs	r3, r0, #1
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	2b18      	cmp	r3, #24
 80183fe:	d831      	bhi.n	8018464 <__gethex+0x146>
 8018400:	f1a0 0210 	sub.w	r2, r0, #16
 8018404:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018408:	f7ff ff74 	bl	80182f4 <__hexdig_fun>
 801840c:	1e43      	subs	r3, r0, #1
 801840e:	b2db      	uxtb	r3, r3
 8018410:	2b18      	cmp	r3, #24
 8018412:	d922      	bls.n	801845a <__gethex+0x13c>
 8018414:	f1b9 0f00 	cmp.w	r9, #0
 8018418:	d000      	beq.n	801841c <__gethex+0xfe>
 801841a:	4252      	negs	r2, r2
 801841c:	4414      	add	r4, r2
 801841e:	f8ca 1000 	str.w	r1, [sl]
 8018422:	b30d      	cbz	r5, 8018468 <__gethex+0x14a>
 8018424:	f1bb 0f00 	cmp.w	fp, #0
 8018428:	bf0c      	ite	eq
 801842a:	2706      	moveq	r7, #6
 801842c:	2700      	movne	r7, #0
 801842e:	4638      	mov	r0, r7
 8018430:	b00b      	add	sp, #44	; 0x2c
 8018432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018436:	f10b 0b01 	add.w	fp, fp, #1
 801843a:	e78a      	b.n	8018352 <__gethex+0x34>
 801843c:	2500      	movs	r5, #0
 801843e:	462c      	mov	r4, r5
 8018440:	e7ae      	b.n	80183a0 <__gethex+0x82>
 8018442:	463e      	mov	r6, r7
 8018444:	2501      	movs	r5, #1
 8018446:	e7c7      	b.n	80183d8 <__gethex+0xba>
 8018448:	4604      	mov	r4, r0
 801844a:	e7fb      	b.n	8018444 <__gethex+0x126>
 801844c:	f04f 0900 	mov.w	r9, #0
 8018450:	1cb1      	adds	r1, r6, #2
 8018452:	e7ce      	b.n	80183f2 <__gethex+0xd4>
 8018454:	f04f 0901 	mov.w	r9, #1
 8018458:	e7fa      	b.n	8018450 <__gethex+0x132>
 801845a:	230a      	movs	r3, #10
 801845c:	fb03 0202 	mla	r2, r3, r2, r0
 8018460:	3a10      	subs	r2, #16
 8018462:	e7cf      	b.n	8018404 <__gethex+0xe6>
 8018464:	4631      	mov	r1, r6
 8018466:	e7da      	b.n	801841e <__gethex+0x100>
 8018468:	1bf3      	subs	r3, r6, r7
 801846a:	3b01      	subs	r3, #1
 801846c:	4629      	mov	r1, r5
 801846e:	2b07      	cmp	r3, #7
 8018470:	dc49      	bgt.n	8018506 <__gethex+0x1e8>
 8018472:	9802      	ldr	r0, [sp, #8]
 8018474:	f000 fa71 	bl	801895a <_Balloc>
 8018478:	9b01      	ldr	r3, [sp, #4]
 801847a:	f100 0914 	add.w	r9, r0, #20
 801847e:	f04f 0b00 	mov.w	fp, #0
 8018482:	f1c3 0301 	rsb	r3, r3, #1
 8018486:	4605      	mov	r5, r0
 8018488:	f8cd 9010 	str.w	r9, [sp, #16]
 801848c:	46da      	mov	sl, fp
 801848e:	9308      	str	r3, [sp, #32]
 8018490:	42b7      	cmp	r7, r6
 8018492:	d33b      	bcc.n	801850c <__gethex+0x1ee>
 8018494:	9804      	ldr	r0, [sp, #16]
 8018496:	f840 ab04 	str.w	sl, [r0], #4
 801849a:	eba0 0009 	sub.w	r0, r0, r9
 801849e:	1080      	asrs	r0, r0, #2
 80184a0:	6128      	str	r0, [r5, #16]
 80184a2:	0147      	lsls	r7, r0, #5
 80184a4:	4650      	mov	r0, sl
 80184a6:	f000 fb1c 	bl	8018ae2 <__hi0bits>
 80184aa:	f8d8 6000 	ldr.w	r6, [r8]
 80184ae:	1a3f      	subs	r7, r7, r0
 80184b0:	42b7      	cmp	r7, r6
 80184b2:	dd64      	ble.n	801857e <__gethex+0x260>
 80184b4:	1bbf      	subs	r7, r7, r6
 80184b6:	4639      	mov	r1, r7
 80184b8:	4628      	mov	r0, r5
 80184ba:	f000 fe2b 	bl	8019114 <__any_on>
 80184be:	4682      	mov	sl, r0
 80184c0:	b178      	cbz	r0, 80184e2 <__gethex+0x1c4>
 80184c2:	1e7b      	subs	r3, r7, #1
 80184c4:	1159      	asrs	r1, r3, #5
 80184c6:	f003 021f 	and.w	r2, r3, #31
 80184ca:	f04f 0a01 	mov.w	sl, #1
 80184ce:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80184d2:	fa0a f202 	lsl.w	r2, sl, r2
 80184d6:	420a      	tst	r2, r1
 80184d8:	d003      	beq.n	80184e2 <__gethex+0x1c4>
 80184da:	4553      	cmp	r3, sl
 80184dc:	dc46      	bgt.n	801856c <__gethex+0x24e>
 80184de:	f04f 0a02 	mov.w	sl, #2
 80184e2:	4639      	mov	r1, r7
 80184e4:	4628      	mov	r0, r5
 80184e6:	f7ff fecb 	bl	8018280 <rshift>
 80184ea:	443c      	add	r4, r7
 80184ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184f0:	42a3      	cmp	r3, r4
 80184f2:	da52      	bge.n	801859a <__gethex+0x27c>
 80184f4:	4629      	mov	r1, r5
 80184f6:	9802      	ldr	r0, [sp, #8]
 80184f8:	f000 fa63 	bl	80189c2 <_Bfree>
 80184fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80184fe:	2300      	movs	r3, #0
 8018500:	6013      	str	r3, [r2, #0]
 8018502:	27a3      	movs	r7, #163	; 0xa3
 8018504:	e793      	b.n	801842e <__gethex+0x110>
 8018506:	3101      	adds	r1, #1
 8018508:	105b      	asrs	r3, r3, #1
 801850a:	e7b0      	b.n	801846e <__gethex+0x150>
 801850c:	1e73      	subs	r3, r6, #1
 801850e:	9305      	str	r3, [sp, #20]
 8018510:	9a07      	ldr	r2, [sp, #28]
 8018512:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018516:	4293      	cmp	r3, r2
 8018518:	d018      	beq.n	801854c <__gethex+0x22e>
 801851a:	f1bb 0f20 	cmp.w	fp, #32
 801851e:	d107      	bne.n	8018530 <__gethex+0x212>
 8018520:	9b04      	ldr	r3, [sp, #16]
 8018522:	f8c3 a000 	str.w	sl, [r3]
 8018526:	3304      	adds	r3, #4
 8018528:	f04f 0a00 	mov.w	sl, #0
 801852c:	9304      	str	r3, [sp, #16]
 801852e:	46d3      	mov	fp, sl
 8018530:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018534:	f7ff fede 	bl	80182f4 <__hexdig_fun>
 8018538:	f000 000f 	and.w	r0, r0, #15
 801853c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018540:	ea4a 0a00 	orr.w	sl, sl, r0
 8018544:	f10b 0b04 	add.w	fp, fp, #4
 8018548:	9b05      	ldr	r3, [sp, #20]
 801854a:	e00d      	b.n	8018568 <__gethex+0x24a>
 801854c:	9b05      	ldr	r3, [sp, #20]
 801854e:	9a08      	ldr	r2, [sp, #32]
 8018550:	4413      	add	r3, r2
 8018552:	42bb      	cmp	r3, r7
 8018554:	d3e1      	bcc.n	801851a <__gethex+0x1fc>
 8018556:	4618      	mov	r0, r3
 8018558:	9a01      	ldr	r2, [sp, #4]
 801855a:	9903      	ldr	r1, [sp, #12]
 801855c:	9309      	str	r3, [sp, #36]	; 0x24
 801855e:	f001 fb47 	bl	8019bf0 <strncmp>
 8018562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018564:	2800      	cmp	r0, #0
 8018566:	d1d8      	bne.n	801851a <__gethex+0x1fc>
 8018568:	461e      	mov	r6, r3
 801856a:	e791      	b.n	8018490 <__gethex+0x172>
 801856c:	1eb9      	subs	r1, r7, #2
 801856e:	4628      	mov	r0, r5
 8018570:	f000 fdd0 	bl	8019114 <__any_on>
 8018574:	2800      	cmp	r0, #0
 8018576:	d0b2      	beq.n	80184de <__gethex+0x1c0>
 8018578:	f04f 0a03 	mov.w	sl, #3
 801857c:	e7b1      	b.n	80184e2 <__gethex+0x1c4>
 801857e:	da09      	bge.n	8018594 <__gethex+0x276>
 8018580:	1bf7      	subs	r7, r6, r7
 8018582:	4629      	mov	r1, r5
 8018584:	463a      	mov	r2, r7
 8018586:	9802      	ldr	r0, [sp, #8]
 8018588:	f000 fbe6 	bl	8018d58 <__lshift>
 801858c:	1be4      	subs	r4, r4, r7
 801858e:	4605      	mov	r5, r0
 8018590:	f100 0914 	add.w	r9, r0, #20
 8018594:	f04f 0a00 	mov.w	sl, #0
 8018598:	e7a8      	b.n	80184ec <__gethex+0x1ce>
 801859a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801859e:	42a0      	cmp	r0, r4
 80185a0:	dd6a      	ble.n	8018678 <__gethex+0x35a>
 80185a2:	1b04      	subs	r4, r0, r4
 80185a4:	42a6      	cmp	r6, r4
 80185a6:	dc2e      	bgt.n	8018606 <__gethex+0x2e8>
 80185a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185ac:	2b02      	cmp	r3, #2
 80185ae:	d022      	beq.n	80185f6 <__gethex+0x2d8>
 80185b0:	2b03      	cmp	r3, #3
 80185b2:	d024      	beq.n	80185fe <__gethex+0x2e0>
 80185b4:	2b01      	cmp	r3, #1
 80185b6:	d115      	bne.n	80185e4 <__gethex+0x2c6>
 80185b8:	42a6      	cmp	r6, r4
 80185ba:	d113      	bne.n	80185e4 <__gethex+0x2c6>
 80185bc:	2e01      	cmp	r6, #1
 80185be:	dc0b      	bgt.n	80185d8 <__gethex+0x2ba>
 80185c0:	9a06      	ldr	r2, [sp, #24]
 80185c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80185c6:	6013      	str	r3, [r2, #0]
 80185c8:	2301      	movs	r3, #1
 80185ca:	612b      	str	r3, [r5, #16]
 80185cc:	f8c9 3000 	str.w	r3, [r9]
 80185d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80185d2:	2762      	movs	r7, #98	; 0x62
 80185d4:	601d      	str	r5, [r3, #0]
 80185d6:	e72a      	b.n	801842e <__gethex+0x110>
 80185d8:	1e71      	subs	r1, r6, #1
 80185da:	4628      	mov	r0, r5
 80185dc:	f000 fd9a 	bl	8019114 <__any_on>
 80185e0:	2800      	cmp	r0, #0
 80185e2:	d1ed      	bne.n	80185c0 <__gethex+0x2a2>
 80185e4:	4629      	mov	r1, r5
 80185e6:	9802      	ldr	r0, [sp, #8]
 80185e8:	f000 f9eb 	bl	80189c2 <_Bfree>
 80185ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80185ee:	2300      	movs	r3, #0
 80185f0:	6013      	str	r3, [r2, #0]
 80185f2:	2750      	movs	r7, #80	; 0x50
 80185f4:	e71b      	b.n	801842e <__gethex+0x110>
 80185f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d0e1      	beq.n	80185c0 <__gethex+0x2a2>
 80185fc:	e7f2      	b.n	80185e4 <__gethex+0x2c6>
 80185fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018600:	2b00      	cmp	r3, #0
 8018602:	d1dd      	bne.n	80185c0 <__gethex+0x2a2>
 8018604:	e7ee      	b.n	80185e4 <__gethex+0x2c6>
 8018606:	1e67      	subs	r7, r4, #1
 8018608:	f1ba 0f00 	cmp.w	sl, #0
 801860c:	d131      	bne.n	8018672 <__gethex+0x354>
 801860e:	b127      	cbz	r7, 801861a <__gethex+0x2fc>
 8018610:	4639      	mov	r1, r7
 8018612:	4628      	mov	r0, r5
 8018614:	f000 fd7e 	bl	8019114 <__any_on>
 8018618:	4682      	mov	sl, r0
 801861a:	117a      	asrs	r2, r7, #5
 801861c:	2301      	movs	r3, #1
 801861e:	f007 071f 	and.w	r7, r7, #31
 8018622:	fa03 f707 	lsl.w	r7, r3, r7
 8018626:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801862a:	4621      	mov	r1, r4
 801862c:	421f      	tst	r7, r3
 801862e:	4628      	mov	r0, r5
 8018630:	bf18      	it	ne
 8018632:	f04a 0a02 	orrne.w	sl, sl, #2
 8018636:	1b36      	subs	r6, r6, r4
 8018638:	f7ff fe22 	bl	8018280 <rshift>
 801863c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018640:	2702      	movs	r7, #2
 8018642:	f1ba 0f00 	cmp.w	sl, #0
 8018646:	d048      	beq.n	80186da <__gethex+0x3bc>
 8018648:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801864c:	2b02      	cmp	r3, #2
 801864e:	d015      	beq.n	801867c <__gethex+0x35e>
 8018650:	2b03      	cmp	r3, #3
 8018652:	d017      	beq.n	8018684 <__gethex+0x366>
 8018654:	2b01      	cmp	r3, #1
 8018656:	d109      	bne.n	801866c <__gethex+0x34e>
 8018658:	f01a 0f02 	tst.w	sl, #2
 801865c:	d006      	beq.n	801866c <__gethex+0x34e>
 801865e:	f8d9 3000 	ldr.w	r3, [r9]
 8018662:	ea4a 0a03 	orr.w	sl, sl, r3
 8018666:	f01a 0f01 	tst.w	sl, #1
 801866a:	d10e      	bne.n	801868a <__gethex+0x36c>
 801866c:	f047 0710 	orr.w	r7, r7, #16
 8018670:	e033      	b.n	80186da <__gethex+0x3bc>
 8018672:	f04f 0a01 	mov.w	sl, #1
 8018676:	e7d0      	b.n	801861a <__gethex+0x2fc>
 8018678:	2701      	movs	r7, #1
 801867a:	e7e2      	b.n	8018642 <__gethex+0x324>
 801867c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801867e:	f1c3 0301 	rsb	r3, r3, #1
 8018682:	9315      	str	r3, [sp, #84]	; 0x54
 8018684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018686:	2b00      	cmp	r3, #0
 8018688:	d0f0      	beq.n	801866c <__gethex+0x34e>
 801868a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801868e:	f105 0314 	add.w	r3, r5, #20
 8018692:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018696:	eb03 010a 	add.w	r1, r3, sl
 801869a:	f04f 0c00 	mov.w	ip, #0
 801869e:	4618      	mov	r0, r3
 80186a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80186a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80186a8:	d01c      	beq.n	80186e4 <__gethex+0x3c6>
 80186aa:	3201      	adds	r2, #1
 80186ac:	6002      	str	r2, [r0, #0]
 80186ae:	2f02      	cmp	r7, #2
 80186b0:	f105 0314 	add.w	r3, r5, #20
 80186b4:	d138      	bne.n	8018728 <__gethex+0x40a>
 80186b6:	f8d8 2000 	ldr.w	r2, [r8]
 80186ba:	3a01      	subs	r2, #1
 80186bc:	42b2      	cmp	r2, r6
 80186be:	d10a      	bne.n	80186d6 <__gethex+0x3b8>
 80186c0:	1171      	asrs	r1, r6, #5
 80186c2:	2201      	movs	r2, #1
 80186c4:	f006 061f 	and.w	r6, r6, #31
 80186c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80186cc:	fa02 f606 	lsl.w	r6, r2, r6
 80186d0:	421e      	tst	r6, r3
 80186d2:	bf18      	it	ne
 80186d4:	4617      	movne	r7, r2
 80186d6:	f047 0720 	orr.w	r7, r7, #32
 80186da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186dc:	601d      	str	r5, [r3, #0]
 80186de:	9b06      	ldr	r3, [sp, #24]
 80186e0:	601c      	str	r4, [r3, #0]
 80186e2:	e6a4      	b.n	801842e <__gethex+0x110>
 80186e4:	4299      	cmp	r1, r3
 80186e6:	f843 cc04 	str.w	ip, [r3, #-4]
 80186ea:	d8d8      	bhi.n	801869e <__gethex+0x380>
 80186ec:	68ab      	ldr	r3, [r5, #8]
 80186ee:	4599      	cmp	r9, r3
 80186f0:	db12      	blt.n	8018718 <__gethex+0x3fa>
 80186f2:	6869      	ldr	r1, [r5, #4]
 80186f4:	9802      	ldr	r0, [sp, #8]
 80186f6:	3101      	adds	r1, #1
 80186f8:	f000 f92f 	bl	801895a <_Balloc>
 80186fc:	692a      	ldr	r2, [r5, #16]
 80186fe:	3202      	adds	r2, #2
 8018700:	f105 010c 	add.w	r1, r5, #12
 8018704:	4683      	mov	fp, r0
 8018706:	0092      	lsls	r2, r2, #2
 8018708:	300c      	adds	r0, #12
 801870a:	f000 f91b 	bl	8018944 <memcpy>
 801870e:	4629      	mov	r1, r5
 8018710:	9802      	ldr	r0, [sp, #8]
 8018712:	f000 f956 	bl	80189c2 <_Bfree>
 8018716:	465d      	mov	r5, fp
 8018718:	692b      	ldr	r3, [r5, #16]
 801871a:	1c5a      	adds	r2, r3, #1
 801871c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018720:	612a      	str	r2, [r5, #16]
 8018722:	2201      	movs	r2, #1
 8018724:	615a      	str	r2, [r3, #20]
 8018726:	e7c2      	b.n	80186ae <__gethex+0x390>
 8018728:	692a      	ldr	r2, [r5, #16]
 801872a:	454a      	cmp	r2, r9
 801872c:	dd0b      	ble.n	8018746 <__gethex+0x428>
 801872e:	2101      	movs	r1, #1
 8018730:	4628      	mov	r0, r5
 8018732:	f7ff fda5 	bl	8018280 <rshift>
 8018736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801873a:	3401      	adds	r4, #1
 801873c:	42a3      	cmp	r3, r4
 801873e:	f6ff aed9 	blt.w	80184f4 <__gethex+0x1d6>
 8018742:	2701      	movs	r7, #1
 8018744:	e7c7      	b.n	80186d6 <__gethex+0x3b8>
 8018746:	f016 061f 	ands.w	r6, r6, #31
 801874a:	d0fa      	beq.n	8018742 <__gethex+0x424>
 801874c:	449a      	add	sl, r3
 801874e:	f1c6 0620 	rsb	r6, r6, #32
 8018752:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018756:	f000 f9c4 	bl	8018ae2 <__hi0bits>
 801875a:	42b0      	cmp	r0, r6
 801875c:	dbe7      	blt.n	801872e <__gethex+0x410>
 801875e:	e7f0      	b.n	8018742 <__gethex+0x424>

08018760 <L_shift>:
 8018760:	f1c2 0208 	rsb	r2, r2, #8
 8018764:	0092      	lsls	r2, r2, #2
 8018766:	b570      	push	{r4, r5, r6, lr}
 8018768:	f1c2 0620 	rsb	r6, r2, #32
 801876c:	6843      	ldr	r3, [r0, #4]
 801876e:	6804      	ldr	r4, [r0, #0]
 8018770:	fa03 f506 	lsl.w	r5, r3, r6
 8018774:	432c      	orrs	r4, r5
 8018776:	40d3      	lsrs	r3, r2
 8018778:	6004      	str	r4, [r0, #0]
 801877a:	f840 3f04 	str.w	r3, [r0, #4]!
 801877e:	4288      	cmp	r0, r1
 8018780:	d3f4      	bcc.n	801876c <L_shift+0xc>
 8018782:	bd70      	pop	{r4, r5, r6, pc}

08018784 <__match>:
 8018784:	b530      	push	{r4, r5, lr}
 8018786:	6803      	ldr	r3, [r0, #0]
 8018788:	3301      	adds	r3, #1
 801878a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801878e:	b914      	cbnz	r4, 8018796 <__match+0x12>
 8018790:	6003      	str	r3, [r0, #0]
 8018792:	2001      	movs	r0, #1
 8018794:	bd30      	pop	{r4, r5, pc}
 8018796:	f813 2b01 	ldrb.w	r2, [r3], #1
 801879a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801879e:	2d19      	cmp	r5, #25
 80187a0:	bf98      	it	ls
 80187a2:	3220      	addls	r2, #32
 80187a4:	42a2      	cmp	r2, r4
 80187a6:	d0f0      	beq.n	801878a <__match+0x6>
 80187a8:	2000      	movs	r0, #0
 80187aa:	e7f3      	b.n	8018794 <__match+0x10>

080187ac <__hexnan>:
 80187ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b0:	680b      	ldr	r3, [r1, #0]
 80187b2:	6801      	ldr	r1, [r0, #0]
 80187b4:	115f      	asrs	r7, r3, #5
 80187b6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80187ba:	f013 031f 	ands.w	r3, r3, #31
 80187be:	b087      	sub	sp, #28
 80187c0:	bf18      	it	ne
 80187c2:	3704      	addne	r7, #4
 80187c4:	2500      	movs	r5, #0
 80187c6:	1f3e      	subs	r6, r7, #4
 80187c8:	4682      	mov	sl, r0
 80187ca:	4690      	mov	r8, r2
 80187cc:	9301      	str	r3, [sp, #4]
 80187ce:	f847 5c04 	str.w	r5, [r7, #-4]
 80187d2:	46b1      	mov	r9, r6
 80187d4:	4634      	mov	r4, r6
 80187d6:	9502      	str	r5, [sp, #8]
 80187d8:	46ab      	mov	fp, r5
 80187da:	784a      	ldrb	r2, [r1, #1]
 80187dc:	1c4b      	adds	r3, r1, #1
 80187de:	9303      	str	r3, [sp, #12]
 80187e0:	b342      	cbz	r2, 8018834 <__hexnan+0x88>
 80187e2:	4610      	mov	r0, r2
 80187e4:	9105      	str	r1, [sp, #20]
 80187e6:	9204      	str	r2, [sp, #16]
 80187e8:	f7ff fd84 	bl	80182f4 <__hexdig_fun>
 80187ec:	2800      	cmp	r0, #0
 80187ee:	d143      	bne.n	8018878 <__hexnan+0xcc>
 80187f0:	9a04      	ldr	r2, [sp, #16]
 80187f2:	9905      	ldr	r1, [sp, #20]
 80187f4:	2a20      	cmp	r2, #32
 80187f6:	d818      	bhi.n	801882a <__hexnan+0x7e>
 80187f8:	9b02      	ldr	r3, [sp, #8]
 80187fa:	459b      	cmp	fp, r3
 80187fc:	dd13      	ble.n	8018826 <__hexnan+0x7a>
 80187fe:	454c      	cmp	r4, r9
 8018800:	d206      	bcs.n	8018810 <__hexnan+0x64>
 8018802:	2d07      	cmp	r5, #7
 8018804:	dc04      	bgt.n	8018810 <__hexnan+0x64>
 8018806:	462a      	mov	r2, r5
 8018808:	4649      	mov	r1, r9
 801880a:	4620      	mov	r0, r4
 801880c:	f7ff ffa8 	bl	8018760 <L_shift>
 8018810:	4544      	cmp	r4, r8
 8018812:	d944      	bls.n	801889e <__hexnan+0xf2>
 8018814:	2300      	movs	r3, #0
 8018816:	f1a4 0904 	sub.w	r9, r4, #4
 801881a:	f844 3c04 	str.w	r3, [r4, #-4]
 801881e:	f8cd b008 	str.w	fp, [sp, #8]
 8018822:	464c      	mov	r4, r9
 8018824:	461d      	mov	r5, r3
 8018826:	9903      	ldr	r1, [sp, #12]
 8018828:	e7d7      	b.n	80187da <__hexnan+0x2e>
 801882a:	2a29      	cmp	r2, #41	; 0x29
 801882c:	d14a      	bne.n	80188c4 <__hexnan+0x118>
 801882e:	3102      	adds	r1, #2
 8018830:	f8ca 1000 	str.w	r1, [sl]
 8018834:	f1bb 0f00 	cmp.w	fp, #0
 8018838:	d044      	beq.n	80188c4 <__hexnan+0x118>
 801883a:	454c      	cmp	r4, r9
 801883c:	d206      	bcs.n	801884c <__hexnan+0xa0>
 801883e:	2d07      	cmp	r5, #7
 8018840:	dc04      	bgt.n	801884c <__hexnan+0xa0>
 8018842:	462a      	mov	r2, r5
 8018844:	4649      	mov	r1, r9
 8018846:	4620      	mov	r0, r4
 8018848:	f7ff ff8a 	bl	8018760 <L_shift>
 801884c:	4544      	cmp	r4, r8
 801884e:	d928      	bls.n	80188a2 <__hexnan+0xf6>
 8018850:	4643      	mov	r3, r8
 8018852:	f854 2b04 	ldr.w	r2, [r4], #4
 8018856:	f843 2b04 	str.w	r2, [r3], #4
 801885a:	42a6      	cmp	r6, r4
 801885c:	d2f9      	bcs.n	8018852 <__hexnan+0xa6>
 801885e:	2200      	movs	r2, #0
 8018860:	f843 2b04 	str.w	r2, [r3], #4
 8018864:	429e      	cmp	r6, r3
 8018866:	d2fb      	bcs.n	8018860 <__hexnan+0xb4>
 8018868:	6833      	ldr	r3, [r6, #0]
 801886a:	b91b      	cbnz	r3, 8018874 <__hexnan+0xc8>
 801886c:	4546      	cmp	r6, r8
 801886e:	d127      	bne.n	80188c0 <__hexnan+0x114>
 8018870:	2301      	movs	r3, #1
 8018872:	6033      	str	r3, [r6, #0]
 8018874:	2005      	movs	r0, #5
 8018876:	e026      	b.n	80188c6 <__hexnan+0x11a>
 8018878:	3501      	adds	r5, #1
 801887a:	2d08      	cmp	r5, #8
 801887c:	f10b 0b01 	add.w	fp, fp, #1
 8018880:	dd06      	ble.n	8018890 <__hexnan+0xe4>
 8018882:	4544      	cmp	r4, r8
 8018884:	d9cf      	bls.n	8018826 <__hexnan+0x7a>
 8018886:	2300      	movs	r3, #0
 8018888:	f844 3c04 	str.w	r3, [r4, #-4]
 801888c:	2501      	movs	r5, #1
 801888e:	3c04      	subs	r4, #4
 8018890:	6822      	ldr	r2, [r4, #0]
 8018892:	f000 000f 	and.w	r0, r0, #15
 8018896:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801889a:	6020      	str	r0, [r4, #0]
 801889c:	e7c3      	b.n	8018826 <__hexnan+0x7a>
 801889e:	2508      	movs	r5, #8
 80188a0:	e7c1      	b.n	8018826 <__hexnan+0x7a>
 80188a2:	9b01      	ldr	r3, [sp, #4]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d0df      	beq.n	8018868 <__hexnan+0xbc>
 80188a8:	f04f 32ff 	mov.w	r2, #4294967295
 80188ac:	f1c3 0320 	rsb	r3, r3, #32
 80188b0:	fa22 f303 	lsr.w	r3, r2, r3
 80188b4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80188b8:	401a      	ands	r2, r3
 80188ba:	f847 2c04 	str.w	r2, [r7, #-4]
 80188be:	e7d3      	b.n	8018868 <__hexnan+0xbc>
 80188c0:	3e04      	subs	r6, #4
 80188c2:	e7d1      	b.n	8018868 <__hexnan+0xbc>
 80188c4:	2004      	movs	r0, #4
 80188c6:	b007      	add	sp, #28
 80188c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188cc <__locale_ctype_ptr_l>:
 80188cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80188d0:	4770      	bx	lr
	...

080188d4 <__locale_ctype_ptr>:
 80188d4:	4b04      	ldr	r3, [pc, #16]	; (80188e8 <__locale_ctype_ptr+0x14>)
 80188d6:	4a05      	ldr	r2, [pc, #20]	; (80188ec <__locale_ctype_ptr+0x18>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	6a1b      	ldr	r3, [r3, #32]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	bf08      	it	eq
 80188e0:	4613      	moveq	r3, r2
 80188e2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80188e6:	4770      	bx	lr
 80188e8:	2000000c 	.word	0x2000000c
 80188ec:	20000070 	.word	0x20000070

080188f0 <__localeconv_l>:
 80188f0:	30f0      	adds	r0, #240	; 0xf0
 80188f2:	4770      	bx	lr

080188f4 <_localeconv_r>:
 80188f4:	4b04      	ldr	r3, [pc, #16]	; (8018908 <_localeconv_r+0x14>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	6a18      	ldr	r0, [r3, #32]
 80188fa:	4b04      	ldr	r3, [pc, #16]	; (801890c <_localeconv_r+0x18>)
 80188fc:	2800      	cmp	r0, #0
 80188fe:	bf08      	it	eq
 8018900:	4618      	moveq	r0, r3
 8018902:	30f0      	adds	r0, #240	; 0xf0
 8018904:	4770      	bx	lr
 8018906:	bf00      	nop
 8018908:	2000000c 	.word	0x2000000c
 801890c:	20000070 	.word	0x20000070

08018910 <malloc>:
 8018910:	4b02      	ldr	r3, [pc, #8]	; (801891c <malloc+0xc>)
 8018912:	4601      	mov	r1, r0
 8018914:	6818      	ldr	r0, [r3, #0]
 8018916:	f000 bc7b 	b.w	8019210 <_malloc_r>
 801891a:	bf00      	nop
 801891c:	2000000c 	.word	0x2000000c

08018920 <__ascii_mbtowc>:
 8018920:	b082      	sub	sp, #8
 8018922:	b901      	cbnz	r1, 8018926 <__ascii_mbtowc+0x6>
 8018924:	a901      	add	r1, sp, #4
 8018926:	b142      	cbz	r2, 801893a <__ascii_mbtowc+0x1a>
 8018928:	b14b      	cbz	r3, 801893e <__ascii_mbtowc+0x1e>
 801892a:	7813      	ldrb	r3, [r2, #0]
 801892c:	600b      	str	r3, [r1, #0]
 801892e:	7812      	ldrb	r2, [r2, #0]
 8018930:	1c10      	adds	r0, r2, #0
 8018932:	bf18      	it	ne
 8018934:	2001      	movne	r0, #1
 8018936:	b002      	add	sp, #8
 8018938:	4770      	bx	lr
 801893a:	4610      	mov	r0, r2
 801893c:	e7fb      	b.n	8018936 <__ascii_mbtowc+0x16>
 801893e:	f06f 0001 	mvn.w	r0, #1
 8018942:	e7f8      	b.n	8018936 <__ascii_mbtowc+0x16>

08018944 <memcpy>:
 8018944:	b510      	push	{r4, lr}
 8018946:	1e43      	subs	r3, r0, #1
 8018948:	440a      	add	r2, r1
 801894a:	4291      	cmp	r1, r2
 801894c:	d100      	bne.n	8018950 <memcpy+0xc>
 801894e:	bd10      	pop	{r4, pc}
 8018950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018958:	e7f7      	b.n	801894a <memcpy+0x6>

0801895a <_Balloc>:
 801895a:	b570      	push	{r4, r5, r6, lr}
 801895c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801895e:	4604      	mov	r4, r0
 8018960:	460e      	mov	r6, r1
 8018962:	b93d      	cbnz	r5, 8018974 <_Balloc+0x1a>
 8018964:	2010      	movs	r0, #16
 8018966:	f7ff ffd3 	bl	8018910 <malloc>
 801896a:	6260      	str	r0, [r4, #36]	; 0x24
 801896c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018970:	6005      	str	r5, [r0, #0]
 8018972:	60c5      	str	r5, [r0, #12]
 8018974:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018976:	68eb      	ldr	r3, [r5, #12]
 8018978:	b183      	cbz	r3, 801899c <_Balloc+0x42>
 801897a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801897c:	68db      	ldr	r3, [r3, #12]
 801897e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018982:	b9b8      	cbnz	r0, 80189b4 <_Balloc+0x5a>
 8018984:	2101      	movs	r1, #1
 8018986:	fa01 f506 	lsl.w	r5, r1, r6
 801898a:	1d6a      	adds	r2, r5, #5
 801898c:	0092      	lsls	r2, r2, #2
 801898e:	4620      	mov	r0, r4
 8018990:	f000 fbe1 	bl	8019156 <_calloc_r>
 8018994:	b160      	cbz	r0, 80189b0 <_Balloc+0x56>
 8018996:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801899a:	e00e      	b.n	80189ba <_Balloc+0x60>
 801899c:	2221      	movs	r2, #33	; 0x21
 801899e:	2104      	movs	r1, #4
 80189a0:	4620      	mov	r0, r4
 80189a2:	f000 fbd8 	bl	8019156 <_calloc_r>
 80189a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80189a8:	60e8      	str	r0, [r5, #12]
 80189aa:	68db      	ldr	r3, [r3, #12]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d1e4      	bne.n	801897a <_Balloc+0x20>
 80189b0:	2000      	movs	r0, #0
 80189b2:	bd70      	pop	{r4, r5, r6, pc}
 80189b4:	6802      	ldr	r2, [r0, #0]
 80189b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80189ba:	2300      	movs	r3, #0
 80189bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80189c0:	e7f7      	b.n	80189b2 <_Balloc+0x58>

080189c2 <_Bfree>:
 80189c2:	b570      	push	{r4, r5, r6, lr}
 80189c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80189c6:	4606      	mov	r6, r0
 80189c8:	460d      	mov	r5, r1
 80189ca:	b93c      	cbnz	r4, 80189dc <_Bfree+0x1a>
 80189cc:	2010      	movs	r0, #16
 80189ce:	f7ff ff9f 	bl	8018910 <malloc>
 80189d2:	6270      	str	r0, [r6, #36]	; 0x24
 80189d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189d8:	6004      	str	r4, [r0, #0]
 80189da:	60c4      	str	r4, [r0, #12]
 80189dc:	b13d      	cbz	r5, 80189ee <_Bfree+0x2c>
 80189de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80189e0:	686a      	ldr	r2, [r5, #4]
 80189e2:	68db      	ldr	r3, [r3, #12]
 80189e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80189e8:	6029      	str	r1, [r5, #0]
 80189ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80189ee:	bd70      	pop	{r4, r5, r6, pc}

080189f0 <__multadd>:
 80189f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189f4:	690d      	ldr	r5, [r1, #16]
 80189f6:	461f      	mov	r7, r3
 80189f8:	4606      	mov	r6, r0
 80189fa:	460c      	mov	r4, r1
 80189fc:	f101 0c14 	add.w	ip, r1, #20
 8018a00:	2300      	movs	r3, #0
 8018a02:	f8dc 0000 	ldr.w	r0, [ip]
 8018a06:	b281      	uxth	r1, r0
 8018a08:	fb02 7101 	mla	r1, r2, r1, r7
 8018a0c:	0c0f      	lsrs	r7, r1, #16
 8018a0e:	0c00      	lsrs	r0, r0, #16
 8018a10:	fb02 7000 	mla	r0, r2, r0, r7
 8018a14:	b289      	uxth	r1, r1
 8018a16:	3301      	adds	r3, #1
 8018a18:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018a1c:	429d      	cmp	r5, r3
 8018a1e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018a22:	f84c 1b04 	str.w	r1, [ip], #4
 8018a26:	dcec      	bgt.n	8018a02 <__multadd+0x12>
 8018a28:	b1d7      	cbz	r7, 8018a60 <__multadd+0x70>
 8018a2a:	68a3      	ldr	r3, [r4, #8]
 8018a2c:	42ab      	cmp	r3, r5
 8018a2e:	dc12      	bgt.n	8018a56 <__multadd+0x66>
 8018a30:	6861      	ldr	r1, [r4, #4]
 8018a32:	4630      	mov	r0, r6
 8018a34:	3101      	adds	r1, #1
 8018a36:	f7ff ff90 	bl	801895a <_Balloc>
 8018a3a:	6922      	ldr	r2, [r4, #16]
 8018a3c:	3202      	adds	r2, #2
 8018a3e:	f104 010c 	add.w	r1, r4, #12
 8018a42:	4680      	mov	r8, r0
 8018a44:	0092      	lsls	r2, r2, #2
 8018a46:	300c      	adds	r0, #12
 8018a48:	f7ff ff7c 	bl	8018944 <memcpy>
 8018a4c:	4621      	mov	r1, r4
 8018a4e:	4630      	mov	r0, r6
 8018a50:	f7ff ffb7 	bl	80189c2 <_Bfree>
 8018a54:	4644      	mov	r4, r8
 8018a56:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a5a:	3501      	adds	r5, #1
 8018a5c:	615f      	str	r7, [r3, #20]
 8018a5e:	6125      	str	r5, [r4, #16]
 8018a60:	4620      	mov	r0, r4
 8018a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a66 <__s2b>:
 8018a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a6a:	460c      	mov	r4, r1
 8018a6c:	4615      	mov	r5, r2
 8018a6e:	461f      	mov	r7, r3
 8018a70:	2209      	movs	r2, #9
 8018a72:	3308      	adds	r3, #8
 8018a74:	4606      	mov	r6, r0
 8018a76:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a7a:	2100      	movs	r1, #0
 8018a7c:	2201      	movs	r2, #1
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	db20      	blt.n	8018ac4 <__s2b+0x5e>
 8018a82:	4630      	mov	r0, r6
 8018a84:	f7ff ff69 	bl	801895a <_Balloc>
 8018a88:	9b08      	ldr	r3, [sp, #32]
 8018a8a:	6143      	str	r3, [r0, #20]
 8018a8c:	2d09      	cmp	r5, #9
 8018a8e:	f04f 0301 	mov.w	r3, #1
 8018a92:	6103      	str	r3, [r0, #16]
 8018a94:	dd19      	ble.n	8018aca <__s2b+0x64>
 8018a96:	f104 0809 	add.w	r8, r4, #9
 8018a9a:	46c1      	mov	r9, r8
 8018a9c:	442c      	add	r4, r5
 8018a9e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018aa2:	4601      	mov	r1, r0
 8018aa4:	3b30      	subs	r3, #48	; 0x30
 8018aa6:	220a      	movs	r2, #10
 8018aa8:	4630      	mov	r0, r6
 8018aaa:	f7ff ffa1 	bl	80189f0 <__multadd>
 8018aae:	45a1      	cmp	r9, r4
 8018ab0:	d1f5      	bne.n	8018a9e <__s2b+0x38>
 8018ab2:	eb08 0405 	add.w	r4, r8, r5
 8018ab6:	3c08      	subs	r4, #8
 8018ab8:	1b2d      	subs	r5, r5, r4
 8018aba:	1963      	adds	r3, r4, r5
 8018abc:	42bb      	cmp	r3, r7
 8018abe:	db07      	blt.n	8018ad0 <__s2b+0x6a>
 8018ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ac4:	0052      	lsls	r2, r2, #1
 8018ac6:	3101      	adds	r1, #1
 8018ac8:	e7d9      	b.n	8018a7e <__s2b+0x18>
 8018aca:	340a      	adds	r4, #10
 8018acc:	2509      	movs	r5, #9
 8018ace:	e7f3      	b.n	8018ab8 <__s2b+0x52>
 8018ad0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018ad4:	4601      	mov	r1, r0
 8018ad6:	3b30      	subs	r3, #48	; 0x30
 8018ad8:	220a      	movs	r2, #10
 8018ada:	4630      	mov	r0, r6
 8018adc:	f7ff ff88 	bl	80189f0 <__multadd>
 8018ae0:	e7eb      	b.n	8018aba <__s2b+0x54>

08018ae2 <__hi0bits>:
 8018ae2:	0c02      	lsrs	r2, r0, #16
 8018ae4:	0412      	lsls	r2, r2, #16
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	b9b2      	cbnz	r2, 8018b18 <__hi0bits+0x36>
 8018aea:	0403      	lsls	r3, r0, #16
 8018aec:	2010      	movs	r0, #16
 8018aee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018af2:	bf04      	itt	eq
 8018af4:	021b      	lsleq	r3, r3, #8
 8018af6:	3008      	addeq	r0, #8
 8018af8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018afc:	bf04      	itt	eq
 8018afe:	011b      	lsleq	r3, r3, #4
 8018b00:	3004      	addeq	r0, #4
 8018b02:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018b06:	bf04      	itt	eq
 8018b08:	009b      	lsleq	r3, r3, #2
 8018b0a:	3002      	addeq	r0, #2
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	db06      	blt.n	8018b1e <__hi0bits+0x3c>
 8018b10:	005b      	lsls	r3, r3, #1
 8018b12:	d503      	bpl.n	8018b1c <__hi0bits+0x3a>
 8018b14:	3001      	adds	r0, #1
 8018b16:	4770      	bx	lr
 8018b18:	2000      	movs	r0, #0
 8018b1a:	e7e8      	b.n	8018aee <__hi0bits+0xc>
 8018b1c:	2020      	movs	r0, #32
 8018b1e:	4770      	bx	lr

08018b20 <__lo0bits>:
 8018b20:	6803      	ldr	r3, [r0, #0]
 8018b22:	f013 0207 	ands.w	r2, r3, #7
 8018b26:	4601      	mov	r1, r0
 8018b28:	d00b      	beq.n	8018b42 <__lo0bits+0x22>
 8018b2a:	07da      	lsls	r2, r3, #31
 8018b2c:	d423      	bmi.n	8018b76 <__lo0bits+0x56>
 8018b2e:	0798      	lsls	r0, r3, #30
 8018b30:	bf49      	itett	mi
 8018b32:	085b      	lsrmi	r3, r3, #1
 8018b34:	089b      	lsrpl	r3, r3, #2
 8018b36:	2001      	movmi	r0, #1
 8018b38:	600b      	strmi	r3, [r1, #0]
 8018b3a:	bf5c      	itt	pl
 8018b3c:	600b      	strpl	r3, [r1, #0]
 8018b3e:	2002      	movpl	r0, #2
 8018b40:	4770      	bx	lr
 8018b42:	b298      	uxth	r0, r3
 8018b44:	b9a8      	cbnz	r0, 8018b72 <__lo0bits+0x52>
 8018b46:	0c1b      	lsrs	r3, r3, #16
 8018b48:	2010      	movs	r0, #16
 8018b4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018b4e:	bf04      	itt	eq
 8018b50:	0a1b      	lsreq	r3, r3, #8
 8018b52:	3008      	addeq	r0, #8
 8018b54:	071a      	lsls	r2, r3, #28
 8018b56:	bf04      	itt	eq
 8018b58:	091b      	lsreq	r3, r3, #4
 8018b5a:	3004      	addeq	r0, #4
 8018b5c:	079a      	lsls	r2, r3, #30
 8018b5e:	bf04      	itt	eq
 8018b60:	089b      	lsreq	r3, r3, #2
 8018b62:	3002      	addeq	r0, #2
 8018b64:	07da      	lsls	r2, r3, #31
 8018b66:	d402      	bmi.n	8018b6e <__lo0bits+0x4e>
 8018b68:	085b      	lsrs	r3, r3, #1
 8018b6a:	d006      	beq.n	8018b7a <__lo0bits+0x5a>
 8018b6c:	3001      	adds	r0, #1
 8018b6e:	600b      	str	r3, [r1, #0]
 8018b70:	4770      	bx	lr
 8018b72:	4610      	mov	r0, r2
 8018b74:	e7e9      	b.n	8018b4a <__lo0bits+0x2a>
 8018b76:	2000      	movs	r0, #0
 8018b78:	4770      	bx	lr
 8018b7a:	2020      	movs	r0, #32
 8018b7c:	4770      	bx	lr

08018b7e <__i2b>:
 8018b7e:	b510      	push	{r4, lr}
 8018b80:	460c      	mov	r4, r1
 8018b82:	2101      	movs	r1, #1
 8018b84:	f7ff fee9 	bl	801895a <_Balloc>
 8018b88:	2201      	movs	r2, #1
 8018b8a:	6144      	str	r4, [r0, #20]
 8018b8c:	6102      	str	r2, [r0, #16]
 8018b8e:	bd10      	pop	{r4, pc}

08018b90 <__multiply>:
 8018b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b94:	4614      	mov	r4, r2
 8018b96:	690a      	ldr	r2, [r1, #16]
 8018b98:	6923      	ldr	r3, [r4, #16]
 8018b9a:	429a      	cmp	r2, r3
 8018b9c:	bfb8      	it	lt
 8018b9e:	460b      	movlt	r3, r1
 8018ba0:	4688      	mov	r8, r1
 8018ba2:	bfbc      	itt	lt
 8018ba4:	46a0      	movlt	r8, r4
 8018ba6:	461c      	movlt	r4, r3
 8018ba8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018bac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018bb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018bb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018bb8:	eb07 0609 	add.w	r6, r7, r9
 8018bbc:	42b3      	cmp	r3, r6
 8018bbe:	bfb8      	it	lt
 8018bc0:	3101      	addlt	r1, #1
 8018bc2:	f7ff feca 	bl	801895a <_Balloc>
 8018bc6:	f100 0514 	add.w	r5, r0, #20
 8018bca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018bce:	462b      	mov	r3, r5
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	4573      	cmp	r3, lr
 8018bd4:	d316      	bcc.n	8018c04 <__multiply+0x74>
 8018bd6:	f104 0214 	add.w	r2, r4, #20
 8018bda:	f108 0114 	add.w	r1, r8, #20
 8018bde:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018be2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018be6:	9300      	str	r3, [sp, #0]
 8018be8:	9b00      	ldr	r3, [sp, #0]
 8018bea:	9201      	str	r2, [sp, #4]
 8018bec:	4293      	cmp	r3, r2
 8018bee:	d80c      	bhi.n	8018c0a <__multiply+0x7a>
 8018bf0:	2e00      	cmp	r6, #0
 8018bf2:	dd03      	ble.n	8018bfc <__multiply+0x6c>
 8018bf4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d05d      	beq.n	8018cb8 <__multiply+0x128>
 8018bfc:	6106      	str	r6, [r0, #16]
 8018bfe:	b003      	add	sp, #12
 8018c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c04:	f843 2b04 	str.w	r2, [r3], #4
 8018c08:	e7e3      	b.n	8018bd2 <__multiply+0x42>
 8018c0a:	f8b2 b000 	ldrh.w	fp, [r2]
 8018c0e:	f1bb 0f00 	cmp.w	fp, #0
 8018c12:	d023      	beq.n	8018c5c <__multiply+0xcc>
 8018c14:	4689      	mov	r9, r1
 8018c16:	46ac      	mov	ip, r5
 8018c18:	f04f 0800 	mov.w	r8, #0
 8018c1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c20:	f8dc a000 	ldr.w	sl, [ip]
 8018c24:	b2a3      	uxth	r3, r4
 8018c26:	fa1f fa8a 	uxth.w	sl, sl
 8018c2a:	fb0b a303 	mla	r3, fp, r3, sl
 8018c2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018c32:	f8dc 4000 	ldr.w	r4, [ip]
 8018c36:	4443      	add	r3, r8
 8018c38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018c3c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018c40:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018c44:	46e2      	mov	sl, ip
 8018c46:	b29b      	uxth	r3, r3
 8018c48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018c4c:	454f      	cmp	r7, r9
 8018c4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018c52:	f84a 3b04 	str.w	r3, [sl], #4
 8018c56:	d82b      	bhi.n	8018cb0 <__multiply+0x120>
 8018c58:	f8cc 8004 	str.w	r8, [ip, #4]
 8018c5c:	9b01      	ldr	r3, [sp, #4]
 8018c5e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018c62:	3204      	adds	r2, #4
 8018c64:	f1ba 0f00 	cmp.w	sl, #0
 8018c68:	d020      	beq.n	8018cac <__multiply+0x11c>
 8018c6a:	682b      	ldr	r3, [r5, #0]
 8018c6c:	4689      	mov	r9, r1
 8018c6e:	46a8      	mov	r8, r5
 8018c70:	f04f 0b00 	mov.w	fp, #0
 8018c74:	f8b9 c000 	ldrh.w	ip, [r9]
 8018c78:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018c7c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018c80:	445c      	add	r4, fp
 8018c82:	46c4      	mov	ip, r8
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018c8a:	f84c 3b04 	str.w	r3, [ip], #4
 8018c8e:	f859 3b04 	ldr.w	r3, [r9], #4
 8018c92:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018c96:	0c1b      	lsrs	r3, r3, #16
 8018c98:	fb0a b303 	mla	r3, sl, r3, fp
 8018c9c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018ca0:	454f      	cmp	r7, r9
 8018ca2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018ca6:	d805      	bhi.n	8018cb4 <__multiply+0x124>
 8018ca8:	f8c8 3004 	str.w	r3, [r8, #4]
 8018cac:	3504      	adds	r5, #4
 8018cae:	e79b      	b.n	8018be8 <__multiply+0x58>
 8018cb0:	46d4      	mov	ip, sl
 8018cb2:	e7b3      	b.n	8018c1c <__multiply+0x8c>
 8018cb4:	46e0      	mov	r8, ip
 8018cb6:	e7dd      	b.n	8018c74 <__multiply+0xe4>
 8018cb8:	3e01      	subs	r6, #1
 8018cba:	e799      	b.n	8018bf0 <__multiply+0x60>

08018cbc <__pow5mult>:
 8018cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cc0:	4615      	mov	r5, r2
 8018cc2:	f012 0203 	ands.w	r2, r2, #3
 8018cc6:	4606      	mov	r6, r0
 8018cc8:	460f      	mov	r7, r1
 8018cca:	d007      	beq.n	8018cdc <__pow5mult+0x20>
 8018ccc:	3a01      	subs	r2, #1
 8018cce:	4c21      	ldr	r4, [pc, #132]	; (8018d54 <__pow5mult+0x98>)
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018cd6:	f7ff fe8b 	bl	80189f0 <__multadd>
 8018cda:	4607      	mov	r7, r0
 8018cdc:	10ad      	asrs	r5, r5, #2
 8018cde:	d035      	beq.n	8018d4c <__pow5mult+0x90>
 8018ce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018ce2:	b93c      	cbnz	r4, 8018cf4 <__pow5mult+0x38>
 8018ce4:	2010      	movs	r0, #16
 8018ce6:	f7ff fe13 	bl	8018910 <malloc>
 8018cea:	6270      	str	r0, [r6, #36]	; 0x24
 8018cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018cf0:	6004      	str	r4, [r0, #0]
 8018cf2:	60c4      	str	r4, [r0, #12]
 8018cf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018cfc:	b94c      	cbnz	r4, 8018d12 <__pow5mult+0x56>
 8018cfe:	f240 2171 	movw	r1, #625	; 0x271
 8018d02:	4630      	mov	r0, r6
 8018d04:	f7ff ff3b 	bl	8018b7e <__i2b>
 8018d08:	2300      	movs	r3, #0
 8018d0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018d0e:	4604      	mov	r4, r0
 8018d10:	6003      	str	r3, [r0, #0]
 8018d12:	f04f 0800 	mov.w	r8, #0
 8018d16:	07eb      	lsls	r3, r5, #31
 8018d18:	d50a      	bpl.n	8018d30 <__pow5mult+0x74>
 8018d1a:	4639      	mov	r1, r7
 8018d1c:	4622      	mov	r2, r4
 8018d1e:	4630      	mov	r0, r6
 8018d20:	f7ff ff36 	bl	8018b90 <__multiply>
 8018d24:	4639      	mov	r1, r7
 8018d26:	4681      	mov	r9, r0
 8018d28:	4630      	mov	r0, r6
 8018d2a:	f7ff fe4a 	bl	80189c2 <_Bfree>
 8018d2e:	464f      	mov	r7, r9
 8018d30:	106d      	asrs	r5, r5, #1
 8018d32:	d00b      	beq.n	8018d4c <__pow5mult+0x90>
 8018d34:	6820      	ldr	r0, [r4, #0]
 8018d36:	b938      	cbnz	r0, 8018d48 <__pow5mult+0x8c>
 8018d38:	4622      	mov	r2, r4
 8018d3a:	4621      	mov	r1, r4
 8018d3c:	4630      	mov	r0, r6
 8018d3e:	f7ff ff27 	bl	8018b90 <__multiply>
 8018d42:	6020      	str	r0, [r4, #0]
 8018d44:	f8c0 8000 	str.w	r8, [r0]
 8018d48:	4604      	mov	r4, r0
 8018d4a:	e7e4      	b.n	8018d16 <__pow5mult+0x5a>
 8018d4c:	4638      	mov	r0, r7
 8018d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d52:	bf00      	nop
 8018d54:	0801a6d8 	.word	0x0801a6d8

08018d58 <__lshift>:
 8018d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d5c:	460c      	mov	r4, r1
 8018d5e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d62:	6923      	ldr	r3, [r4, #16]
 8018d64:	6849      	ldr	r1, [r1, #4]
 8018d66:	eb0a 0903 	add.w	r9, sl, r3
 8018d6a:	68a3      	ldr	r3, [r4, #8]
 8018d6c:	4607      	mov	r7, r0
 8018d6e:	4616      	mov	r6, r2
 8018d70:	f109 0501 	add.w	r5, r9, #1
 8018d74:	42ab      	cmp	r3, r5
 8018d76:	db32      	blt.n	8018dde <__lshift+0x86>
 8018d78:	4638      	mov	r0, r7
 8018d7a:	f7ff fdee 	bl	801895a <_Balloc>
 8018d7e:	2300      	movs	r3, #0
 8018d80:	4680      	mov	r8, r0
 8018d82:	f100 0114 	add.w	r1, r0, #20
 8018d86:	461a      	mov	r2, r3
 8018d88:	4553      	cmp	r3, sl
 8018d8a:	db2b      	blt.n	8018de4 <__lshift+0x8c>
 8018d8c:	6920      	ldr	r0, [r4, #16]
 8018d8e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d92:	f104 0314 	add.w	r3, r4, #20
 8018d96:	f016 021f 	ands.w	r2, r6, #31
 8018d9a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d9e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018da2:	d025      	beq.n	8018df0 <__lshift+0x98>
 8018da4:	f1c2 0e20 	rsb	lr, r2, #32
 8018da8:	2000      	movs	r0, #0
 8018daa:	681e      	ldr	r6, [r3, #0]
 8018dac:	468a      	mov	sl, r1
 8018dae:	4096      	lsls	r6, r2
 8018db0:	4330      	orrs	r0, r6
 8018db2:	f84a 0b04 	str.w	r0, [sl], #4
 8018db6:	f853 0b04 	ldr.w	r0, [r3], #4
 8018dba:	459c      	cmp	ip, r3
 8018dbc:	fa20 f00e 	lsr.w	r0, r0, lr
 8018dc0:	d814      	bhi.n	8018dec <__lshift+0x94>
 8018dc2:	6048      	str	r0, [r1, #4]
 8018dc4:	b108      	cbz	r0, 8018dca <__lshift+0x72>
 8018dc6:	f109 0502 	add.w	r5, r9, #2
 8018dca:	3d01      	subs	r5, #1
 8018dcc:	4638      	mov	r0, r7
 8018dce:	f8c8 5010 	str.w	r5, [r8, #16]
 8018dd2:	4621      	mov	r1, r4
 8018dd4:	f7ff fdf5 	bl	80189c2 <_Bfree>
 8018dd8:	4640      	mov	r0, r8
 8018dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dde:	3101      	adds	r1, #1
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	e7c7      	b.n	8018d74 <__lshift+0x1c>
 8018de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018de8:	3301      	adds	r3, #1
 8018dea:	e7cd      	b.n	8018d88 <__lshift+0x30>
 8018dec:	4651      	mov	r1, sl
 8018dee:	e7dc      	b.n	8018daa <__lshift+0x52>
 8018df0:	3904      	subs	r1, #4
 8018df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018df6:	f841 2f04 	str.w	r2, [r1, #4]!
 8018dfa:	459c      	cmp	ip, r3
 8018dfc:	d8f9      	bhi.n	8018df2 <__lshift+0x9a>
 8018dfe:	e7e4      	b.n	8018dca <__lshift+0x72>

08018e00 <__mcmp>:
 8018e00:	6903      	ldr	r3, [r0, #16]
 8018e02:	690a      	ldr	r2, [r1, #16]
 8018e04:	1a9b      	subs	r3, r3, r2
 8018e06:	b530      	push	{r4, r5, lr}
 8018e08:	d10c      	bne.n	8018e24 <__mcmp+0x24>
 8018e0a:	0092      	lsls	r2, r2, #2
 8018e0c:	3014      	adds	r0, #20
 8018e0e:	3114      	adds	r1, #20
 8018e10:	1884      	adds	r4, r0, r2
 8018e12:	4411      	add	r1, r2
 8018e14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018e18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018e1c:	4295      	cmp	r5, r2
 8018e1e:	d003      	beq.n	8018e28 <__mcmp+0x28>
 8018e20:	d305      	bcc.n	8018e2e <__mcmp+0x2e>
 8018e22:	2301      	movs	r3, #1
 8018e24:	4618      	mov	r0, r3
 8018e26:	bd30      	pop	{r4, r5, pc}
 8018e28:	42a0      	cmp	r0, r4
 8018e2a:	d3f3      	bcc.n	8018e14 <__mcmp+0x14>
 8018e2c:	e7fa      	b.n	8018e24 <__mcmp+0x24>
 8018e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e32:	e7f7      	b.n	8018e24 <__mcmp+0x24>

08018e34 <__mdiff>:
 8018e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e38:	460d      	mov	r5, r1
 8018e3a:	4607      	mov	r7, r0
 8018e3c:	4611      	mov	r1, r2
 8018e3e:	4628      	mov	r0, r5
 8018e40:	4614      	mov	r4, r2
 8018e42:	f7ff ffdd 	bl	8018e00 <__mcmp>
 8018e46:	1e06      	subs	r6, r0, #0
 8018e48:	d108      	bne.n	8018e5c <__mdiff+0x28>
 8018e4a:	4631      	mov	r1, r6
 8018e4c:	4638      	mov	r0, r7
 8018e4e:	f7ff fd84 	bl	801895a <_Balloc>
 8018e52:	2301      	movs	r3, #1
 8018e54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e5c:	bfa4      	itt	ge
 8018e5e:	4623      	movge	r3, r4
 8018e60:	462c      	movge	r4, r5
 8018e62:	4638      	mov	r0, r7
 8018e64:	6861      	ldr	r1, [r4, #4]
 8018e66:	bfa6      	itte	ge
 8018e68:	461d      	movge	r5, r3
 8018e6a:	2600      	movge	r6, #0
 8018e6c:	2601      	movlt	r6, #1
 8018e6e:	f7ff fd74 	bl	801895a <_Balloc>
 8018e72:	692b      	ldr	r3, [r5, #16]
 8018e74:	60c6      	str	r6, [r0, #12]
 8018e76:	6926      	ldr	r6, [r4, #16]
 8018e78:	f105 0914 	add.w	r9, r5, #20
 8018e7c:	f104 0214 	add.w	r2, r4, #20
 8018e80:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018e84:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018e88:	f100 0514 	add.w	r5, r0, #20
 8018e8c:	f04f 0e00 	mov.w	lr, #0
 8018e90:	f852 ab04 	ldr.w	sl, [r2], #4
 8018e94:	f859 4b04 	ldr.w	r4, [r9], #4
 8018e98:	fa1e f18a 	uxtah	r1, lr, sl
 8018e9c:	b2a3      	uxth	r3, r4
 8018e9e:	1ac9      	subs	r1, r1, r3
 8018ea0:	0c23      	lsrs	r3, r4, #16
 8018ea2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018ea6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018eaa:	b289      	uxth	r1, r1
 8018eac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018eb0:	45c8      	cmp	r8, r9
 8018eb2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018eb6:	4694      	mov	ip, r2
 8018eb8:	f845 3b04 	str.w	r3, [r5], #4
 8018ebc:	d8e8      	bhi.n	8018e90 <__mdiff+0x5c>
 8018ebe:	45bc      	cmp	ip, r7
 8018ec0:	d304      	bcc.n	8018ecc <__mdiff+0x98>
 8018ec2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018ec6:	b183      	cbz	r3, 8018eea <__mdiff+0xb6>
 8018ec8:	6106      	str	r6, [r0, #16]
 8018eca:	e7c5      	b.n	8018e58 <__mdiff+0x24>
 8018ecc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018ed0:	fa1e f381 	uxtah	r3, lr, r1
 8018ed4:	141a      	asrs	r2, r3, #16
 8018ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ee0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018ee4:	f845 3b04 	str.w	r3, [r5], #4
 8018ee8:	e7e9      	b.n	8018ebe <__mdiff+0x8a>
 8018eea:	3e01      	subs	r6, #1
 8018eec:	e7e9      	b.n	8018ec2 <__mdiff+0x8e>
	...

08018ef0 <__ulp>:
 8018ef0:	4b12      	ldr	r3, [pc, #72]	; (8018f3c <__ulp+0x4c>)
 8018ef2:	ee10 2a90 	vmov	r2, s1
 8018ef6:	401a      	ands	r2, r3
 8018ef8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	dd04      	ble.n	8018f0a <__ulp+0x1a>
 8018f00:	2000      	movs	r0, #0
 8018f02:	4619      	mov	r1, r3
 8018f04:	ec41 0b10 	vmov	d0, r0, r1
 8018f08:	4770      	bx	lr
 8018f0a:	425b      	negs	r3, r3
 8018f0c:	151b      	asrs	r3, r3, #20
 8018f0e:	2b13      	cmp	r3, #19
 8018f10:	f04f 0000 	mov.w	r0, #0
 8018f14:	f04f 0100 	mov.w	r1, #0
 8018f18:	dc04      	bgt.n	8018f24 <__ulp+0x34>
 8018f1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018f1e:	fa42 f103 	asr.w	r1, r2, r3
 8018f22:	e7ef      	b.n	8018f04 <__ulp+0x14>
 8018f24:	3b14      	subs	r3, #20
 8018f26:	2b1e      	cmp	r3, #30
 8018f28:	f04f 0201 	mov.w	r2, #1
 8018f2c:	bfda      	itte	le
 8018f2e:	f1c3 031f 	rsble	r3, r3, #31
 8018f32:	fa02 f303 	lslle.w	r3, r2, r3
 8018f36:	4613      	movgt	r3, r2
 8018f38:	4618      	mov	r0, r3
 8018f3a:	e7e3      	b.n	8018f04 <__ulp+0x14>
 8018f3c:	7ff00000 	.word	0x7ff00000

08018f40 <__b2d>:
 8018f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f42:	6905      	ldr	r5, [r0, #16]
 8018f44:	f100 0714 	add.w	r7, r0, #20
 8018f48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018f4c:	1f2e      	subs	r6, r5, #4
 8018f4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018f52:	4620      	mov	r0, r4
 8018f54:	f7ff fdc5 	bl	8018ae2 <__hi0bits>
 8018f58:	f1c0 0320 	rsb	r3, r0, #32
 8018f5c:	280a      	cmp	r0, #10
 8018f5e:	600b      	str	r3, [r1, #0]
 8018f60:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018fd8 <__b2d+0x98>
 8018f64:	dc14      	bgt.n	8018f90 <__b2d+0x50>
 8018f66:	f1c0 0e0b 	rsb	lr, r0, #11
 8018f6a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018f6e:	42b7      	cmp	r7, r6
 8018f70:	ea41 030c 	orr.w	r3, r1, ip
 8018f74:	bf34      	ite	cc
 8018f76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f7a:	2100      	movcs	r1, #0
 8018f7c:	3015      	adds	r0, #21
 8018f7e:	fa04 f000 	lsl.w	r0, r4, r0
 8018f82:	fa21 f10e 	lsr.w	r1, r1, lr
 8018f86:	ea40 0201 	orr.w	r2, r0, r1
 8018f8a:	ec43 2b10 	vmov	d0, r2, r3
 8018f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f90:	42b7      	cmp	r7, r6
 8018f92:	bf3a      	itte	cc
 8018f94:	f1a5 0608 	subcc.w	r6, r5, #8
 8018f98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f9c:	2100      	movcs	r1, #0
 8018f9e:	380b      	subs	r0, #11
 8018fa0:	d015      	beq.n	8018fce <__b2d+0x8e>
 8018fa2:	4084      	lsls	r4, r0
 8018fa4:	f1c0 0520 	rsb	r5, r0, #32
 8018fa8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018fac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018fb0:	42be      	cmp	r6, r7
 8018fb2:	fa21 fc05 	lsr.w	ip, r1, r5
 8018fb6:	ea44 030c 	orr.w	r3, r4, ip
 8018fba:	bf8c      	ite	hi
 8018fbc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018fc0:	2400      	movls	r4, #0
 8018fc2:	fa01 f000 	lsl.w	r0, r1, r0
 8018fc6:	40ec      	lsrs	r4, r5
 8018fc8:	ea40 0204 	orr.w	r2, r0, r4
 8018fcc:	e7dd      	b.n	8018f8a <__b2d+0x4a>
 8018fce:	ea44 030c 	orr.w	r3, r4, ip
 8018fd2:	460a      	mov	r2, r1
 8018fd4:	e7d9      	b.n	8018f8a <__b2d+0x4a>
 8018fd6:	bf00      	nop
 8018fd8:	3ff00000 	.word	0x3ff00000

08018fdc <__d2b>:
 8018fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018fe0:	460e      	mov	r6, r1
 8018fe2:	2101      	movs	r1, #1
 8018fe4:	ec59 8b10 	vmov	r8, r9, d0
 8018fe8:	4615      	mov	r5, r2
 8018fea:	f7ff fcb6 	bl	801895a <_Balloc>
 8018fee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018ff2:	4607      	mov	r7, r0
 8018ff4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ff8:	bb34      	cbnz	r4, 8019048 <__d2b+0x6c>
 8018ffa:	9301      	str	r3, [sp, #4]
 8018ffc:	f1b8 0300 	subs.w	r3, r8, #0
 8019000:	d027      	beq.n	8019052 <__d2b+0x76>
 8019002:	a802      	add	r0, sp, #8
 8019004:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019008:	f7ff fd8a 	bl	8018b20 <__lo0bits>
 801900c:	9900      	ldr	r1, [sp, #0]
 801900e:	b1f0      	cbz	r0, 801904e <__d2b+0x72>
 8019010:	9a01      	ldr	r2, [sp, #4]
 8019012:	f1c0 0320 	rsb	r3, r0, #32
 8019016:	fa02 f303 	lsl.w	r3, r2, r3
 801901a:	430b      	orrs	r3, r1
 801901c:	40c2      	lsrs	r2, r0
 801901e:	617b      	str	r3, [r7, #20]
 8019020:	9201      	str	r2, [sp, #4]
 8019022:	9b01      	ldr	r3, [sp, #4]
 8019024:	61bb      	str	r3, [r7, #24]
 8019026:	2b00      	cmp	r3, #0
 8019028:	bf14      	ite	ne
 801902a:	2102      	movne	r1, #2
 801902c:	2101      	moveq	r1, #1
 801902e:	6139      	str	r1, [r7, #16]
 8019030:	b1c4      	cbz	r4, 8019064 <__d2b+0x88>
 8019032:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019036:	4404      	add	r4, r0
 8019038:	6034      	str	r4, [r6, #0]
 801903a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801903e:	6028      	str	r0, [r5, #0]
 8019040:	4638      	mov	r0, r7
 8019042:	b003      	add	sp, #12
 8019044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801904c:	e7d5      	b.n	8018ffa <__d2b+0x1e>
 801904e:	6179      	str	r1, [r7, #20]
 8019050:	e7e7      	b.n	8019022 <__d2b+0x46>
 8019052:	a801      	add	r0, sp, #4
 8019054:	f7ff fd64 	bl	8018b20 <__lo0bits>
 8019058:	9b01      	ldr	r3, [sp, #4]
 801905a:	617b      	str	r3, [r7, #20]
 801905c:	2101      	movs	r1, #1
 801905e:	6139      	str	r1, [r7, #16]
 8019060:	3020      	adds	r0, #32
 8019062:	e7e5      	b.n	8019030 <__d2b+0x54>
 8019064:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019068:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801906c:	6030      	str	r0, [r6, #0]
 801906e:	6918      	ldr	r0, [r3, #16]
 8019070:	f7ff fd37 	bl	8018ae2 <__hi0bits>
 8019074:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019078:	e7e1      	b.n	801903e <__d2b+0x62>

0801907a <__ratio>:
 801907a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801907e:	4688      	mov	r8, r1
 8019080:	4669      	mov	r1, sp
 8019082:	4681      	mov	r9, r0
 8019084:	f7ff ff5c 	bl	8018f40 <__b2d>
 8019088:	a901      	add	r1, sp, #4
 801908a:	4640      	mov	r0, r8
 801908c:	ec57 6b10 	vmov	r6, r7, d0
 8019090:	f7ff ff56 	bl	8018f40 <__b2d>
 8019094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019098:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801909c:	eba3 0c02 	sub.w	ip, r3, r2
 80190a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80190a4:	1a9b      	subs	r3, r3, r2
 80190a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80190aa:	ec5b ab10 	vmov	sl, fp, d0
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	bfce      	itee	gt
 80190b2:	463a      	movgt	r2, r7
 80190b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80190b8:	465a      	movle	r2, fp
 80190ba:	4659      	mov	r1, fp
 80190bc:	463d      	mov	r5, r7
 80190be:	bfd4      	ite	le
 80190c0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80190c4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80190c8:	4630      	mov	r0, r6
 80190ca:	ee10 2a10 	vmov	r2, s0
 80190ce:	460b      	mov	r3, r1
 80190d0:	4629      	mov	r1, r5
 80190d2:	f7e7 fbd3 	bl	800087c <__aeabi_ddiv>
 80190d6:	ec41 0b10 	vmov	d0, r0, r1
 80190da:	b003      	add	sp, #12
 80190dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190e0 <__copybits>:
 80190e0:	3901      	subs	r1, #1
 80190e2:	b510      	push	{r4, lr}
 80190e4:	1149      	asrs	r1, r1, #5
 80190e6:	6914      	ldr	r4, [r2, #16]
 80190e8:	3101      	adds	r1, #1
 80190ea:	f102 0314 	add.w	r3, r2, #20
 80190ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80190f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80190f6:	42a3      	cmp	r3, r4
 80190f8:	4602      	mov	r2, r0
 80190fa:	d303      	bcc.n	8019104 <__copybits+0x24>
 80190fc:	2300      	movs	r3, #0
 80190fe:	428a      	cmp	r2, r1
 8019100:	d305      	bcc.n	801910e <__copybits+0x2e>
 8019102:	bd10      	pop	{r4, pc}
 8019104:	f853 2b04 	ldr.w	r2, [r3], #4
 8019108:	f840 2b04 	str.w	r2, [r0], #4
 801910c:	e7f3      	b.n	80190f6 <__copybits+0x16>
 801910e:	f842 3b04 	str.w	r3, [r2], #4
 8019112:	e7f4      	b.n	80190fe <__copybits+0x1e>

08019114 <__any_on>:
 8019114:	f100 0214 	add.w	r2, r0, #20
 8019118:	6900      	ldr	r0, [r0, #16]
 801911a:	114b      	asrs	r3, r1, #5
 801911c:	4298      	cmp	r0, r3
 801911e:	b510      	push	{r4, lr}
 8019120:	db11      	blt.n	8019146 <__any_on+0x32>
 8019122:	dd0a      	ble.n	801913a <__any_on+0x26>
 8019124:	f011 011f 	ands.w	r1, r1, #31
 8019128:	d007      	beq.n	801913a <__any_on+0x26>
 801912a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801912e:	fa24 f001 	lsr.w	r0, r4, r1
 8019132:	fa00 f101 	lsl.w	r1, r0, r1
 8019136:	428c      	cmp	r4, r1
 8019138:	d10b      	bne.n	8019152 <__any_on+0x3e>
 801913a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801913e:	4293      	cmp	r3, r2
 8019140:	d803      	bhi.n	801914a <__any_on+0x36>
 8019142:	2000      	movs	r0, #0
 8019144:	bd10      	pop	{r4, pc}
 8019146:	4603      	mov	r3, r0
 8019148:	e7f7      	b.n	801913a <__any_on+0x26>
 801914a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801914e:	2900      	cmp	r1, #0
 8019150:	d0f5      	beq.n	801913e <__any_on+0x2a>
 8019152:	2001      	movs	r0, #1
 8019154:	e7f6      	b.n	8019144 <__any_on+0x30>

08019156 <_calloc_r>:
 8019156:	b538      	push	{r3, r4, r5, lr}
 8019158:	fb02 f401 	mul.w	r4, r2, r1
 801915c:	4621      	mov	r1, r4
 801915e:	f000 f857 	bl	8019210 <_malloc_r>
 8019162:	4605      	mov	r5, r0
 8019164:	b118      	cbz	r0, 801916e <_calloc_r+0x18>
 8019166:	4622      	mov	r2, r4
 8019168:	2100      	movs	r1, #0
 801916a:	f7fc fca1 	bl	8015ab0 <memset>
 801916e:	4628      	mov	r0, r5
 8019170:	bd38      	pop	{r3, r4, r5, pc}
	...

08019174 <_free_r>:
 8019174:	b538      	push	{r3, r4, r5, lr}
 8019176:	4605      	mov	r5, r0
 8019178:	2900      	cmp	r1, #0
 801917a:	d045      	beq.n	8019208 <_free_r+0x94>
 801917c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019180:	1f0c      	subs	r4, r1, #4
 8019182:	2b00      	cmp	r3, #0
 8019184:	bfb8      	it	lt
 8019186:	18e4      	addlt	r4, r4, r3
 8019188:	f000 fe30 	bl	8019dec <__malloc_lock>
 801918c:	4a1f      	ldr	r2, [pc, #124]	; (801920c <_free_r+0x98>)
 801918e:	6813      	ldr	r3, [r2, #0]
 8019190:	4610      	mov	r0, r2
 8019192:	b933      	cbnz	r3, 80191a2 <_free_r+0x2e>
 8019194:	6063      	str	r3, [r4, #4]
 8019196:	6014      	str	r4, [r2, #0]
 8019198:	4628      	mov	r0, r5
 801919a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801919e:	f000 be26 	b.w	8019dee <__malloc_unlock>
 80191a2:	42a3      	cmp	r3, r4
 80191a4:	d90c      	bls.n	80191c0 <_free_r+0x4c>
 80191a6:	6821      	ldr	r1, [r4, #0]
 80191a8:	1862      	adds	r2, r4, r1
 80191aa:	4293      	cmp	r3, r2
 80191ac:	bf04      	itt	eq
 80191ae:	681a      	ldreq	r2, [r3, #0]
 80191b0:	685b      	ldreq	r3, [r3, #4]
 80191b2:	6063      	str	r3, [r4, #4]
 80191b4:	bf04      	itt	eq
 80191b6:	1852      	addeq	r2, r2, r1
 80191b8:	6022      	streq	r2, [r4, #0]
 80191ba:	6004      	str	r4, [r0, #0]
 80191bc:	e7ec      	b.n	8019198 <_free_r+0x24>
 80191be:	4613      	mov	r3, r2
 80191c0:	685a      	ldr	r2, [r3, #4]
 80191c2:	b10a      	cbz	r2, 80191c8 <_free_r+0x54>
 80191c4:	42a2      	cmp	r2, r4
 80191c6:	d9fa      	bls.n	80191be <_free_r+0x4a>
 80191c8:	6819      	ldr	r1, [r3, #0]
 80191ca:	1858      	adds	r0, r3, r1
 80191cc:	42a0      	cmp	r0, r4
 80191ce:	d10b      	bne.n	80191e8 <_free_r+0x74>
 80191d0:	6820      	ldr	r0, [r4, #0]
 80191d2:	4401      	add	r1, r0
 80191d4:	1858      	adds	r0, r3, r1
 80191d6:	4282      	cmp	r2, r0
 80191d8:	6019      	str	r1, [r3, #0]
 80191da:	d1dd      	bne.n	8019198 <_free_r+0x24>
 80191dc:	6810      	ldr	r0, [r2, #0]
 80191de:	6852      	ldr	r2, [r2, #4]
 80191e0:	605a      	str	r2, [r3, #4]
 80191e2:	4401      	add	r1, r0
 80191e4:	6019      	str	r1, [r3, #0]
 80191e6:	e7d7      	b.n	8019198 <_free_r+0x24>
 80191e8:	d902      	bls.n	80191f0 <_free_r+0x7c>
 80191ea:	230c      	movs	r3, #12
 80191ec:	602b      	str	r3, [r5, #0]
 80191ee:	e7d3      	b.n	8019198 <_free_r+0x24>
 80191f0:	6820      	ldr	r0, [r4, #0]
 80191f2:	1821      	adds	r1, r4, r0
 80191f4:	428a      	cmp	r2, r1
 80191f6:	bf04      	itt	eq
 80191f8:	6811      	ldreq	r1, [r2, #0]
 80191fa:	6852      	ldreq	r2, [r2, #4]
 80191fc:	6062      	str	r2, [r4, #4]
 80191fe:	bf04      	itt	eq
 8019200:	1809      	addeq	r1, r1, r0
 8019202:	6021      	streq	r1, [r4, #0]
 8019204:	605c      	str	r4, [r3, #4]
 8019206:	e7c7      	b.n	8019198 <_free_r+0x24>
 8019208:	bd38      	pop	{r3, r4, r5, pc}
 801920a:	bf00      	nop
 801920c:	20042498 	.word	0x20042498

08019210 <_malloc_r>:
 8019210:	b570      	push	{r4, r5, r6, lr}
 8019212:	1ccd      	adds	r5, r1, #3
 8019214:	f025 0503 	bic.w	r5, r5, #3
 8019218:	3508      	adds	r5, #8
 801921a:	2d0c      	cmp	r5, #12
 801921c:	bf38      	it	cc
 801921e:	250c      	movcc	r5, #12
 8019220:	2d00      	cmp	r5, #0
 8019222:	4606      	mov	r6, r0
 8019224:	db01      	blt.n	801922a <_malloc_r+0x1a>
 8019226:	42a9      	cmp	r1, r5
 8019228:	d903      	bls.n	8019232 <_malloc_r+0x22>
 801922a:	230c      	movs	r3, #12
 801922c:	6033      	str	r3, [r6, #0]
 801922e:	2000      	movs	r0, #0
 8019230:	bd70      	pop	{r4, r5, r6, pc}
 8019232:	f000 fddb 	bl	8019dec <__malloc_lock>
 8019236:	4a21      	ldr	r2, [pc, #132]	; (80192bc <_malloc_r+0xac>)
 8019238:	6814      	ldr	r4, [r2, #0]
 801923a:	4621      	mov	r1, r4
 801923c:	b991      	cbnz	r1, 8019264 <_malloc_r+0x54>
 801923e:	4c20      	ldr	r4, [pc, #128]	; (80192c0 <_malloc_r+0xb0>)
 8019240:	6823      	ldr	r3, [r4, #0]
 8019242:	b91b      	cbnz	r3, 801924c <_malloc_r+0x3c>
 8019244:	4630      	mov	r0, r6
 8019246:	f000 fc91 	bl	8019b6c <_sbrk_r>
 801924a:	6020      	str	r0, [r4, #0]
 801924c:	4629      	mov	r1, r5
 801924e:	4630      	mov	r0, r6
 8019250:	f000 fc8c 	bl	8019b6c <_sbrk_r>
 8019254:	1c43      	adds	r3, r0, #1
 8019256:	d124      	bne.n	80192a2 <_malloc_r+0x92>
 8019258:	230c      	movs	r3, #12
 801925a:	6033      	str	r3, [r6, #0]
 801925c:	4630      	mov	r0, r6
 801925e:	f000 fdc6 	bl	8019dee <__malloc_unlock>
 8019262:	e7e4      	b.n	801922e <_malloc_r+0x1e>
 8019264:	680b      	ldr	r3, [r1, #0]
 8019266:	1b5b      	subs	r3, r3, r5
 8019268:	d418      	bmi.n	801929c <_malloc_r+0x8c>
 801926a:	2b0b      	cmp	r3, #11
 801926c:	d90f      	bls.n	801928e <_malloc_r+0x7e>
 801926e:	600b      	str	r3, [r1, #0]
 8019270:	50cd      	str	r5, [r1, r3]
 8019272:	18cc      	adds	r4, r1, r3
 8019274:	4630      	mov	r0, r6
 8019276:	f000 fdba 	bl	8019dee <__malloc_unlock>
 801927a:	f104 000b 	add.w	r0, r4, #11
 801927e:	1d23      	adds	r3, r4, #4
 8019280:	f020 0007 	bic.w	r0, r0, #7
 8019284:	1ac3      	subs	r3, r0, r3
 8019286:	d0d3      	beq.n	8019230 <_malloc_r+0x20>
 8019288:	425a      	negs	r2, r3
 801928a:	50e2      	str	r2, [r4, r3]
 801928c:	e7d0      	b.n	8019230 <_malloc_r+0x20>
 801928e:	428c      	cmp	r4, r1
 8019290:	684b      	ldr	r3, [r1, #4]
 8019292:	bf16      	itet	ne
 8019294:	6063      	strne	r3, [r4, #4]
 8019296:	6013      	streq	r3, [r2, #0]
 8019298:	460c      	movne	r4, r1
 801929a:	e7eb      	b.n	8019274 <_malloc_r+0x64>
 801929c:	460c      	mov	r4, r1
 801929e:	6849      	ldr	r1, [r1, #4]
 80192a0:	e7cc      	b.n	801923c <_malloc_r+0x2c>
 80192a2:	1cc4      	adds	r4, r0, #3
 80192a4:	f024 0403 	bic.w	r4, r4, #3
 80192a8:	42a0      	cmp	r0, r4
 80192aa:	d005      	beq.n	80192b8 <_malloc_r+0xa8>
 80192ac:	1a21      	subs	r1, r4, r0
 80192ae:	4630      	mov	r0, r6
 80192b0:	f000 fc5c 	bl	8019b6c <_sbrk_r>
 80192b4:	3001      	adds	r0, #1
 80192b6:	d0cf      	beq.n	8019258 <_malloc_r+0x48>
 80192b8:	6025      	str	r5, [r4, #0]
 80192ba:	e7db      	b.n	8019274 <_malloc_r+0x64>
 80192bc:	20042498 	.word	0x20042498
 80192c0:	2004249c 	.word	0x2004249c

080192c4 <__ssputs_r>:
 80192c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192c8:	688e      	ldr	r6, [r1, #8]
 80192ca:	429e      	cmp	r6, r3
 80192cc:	4682      	mov	sl, r0
 80192ce:	460c      	mov	r4, r1
 80192d0:	4690      	mov	r8, r2
 80192d2:	4699      	mov	r9, r3
 80192d4:	d837      	bhi.n	8019346 <__ssputs_r+0x82>
 80192d6:	898a      	ldrh	r2, [r1, #12]
 80192d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80192dc:	d031      	beq.n	8019342 <__ssputs_r+0x7e>
 80192de:	6825      	ldr	r5, [r4, #0]
 80192e0:	6909      	ldr	r1, [r1, #16]
 80192e2:	1a6f      	subs	r7, r5, r1
 80192e4:	6965      	ldr	r5, [r4, #20]
 80192e6:	2302      	movs	r3, #2
 80192e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80192f0:	f109 0301 	add.w	r3, r9, #1
 80192f4:	443b      	add	r3, r7
 80192f6:	429d      	cmp	r5, r3
 80192f8:	bf38      	it	cc
 80192fa:	461d      	movcc	r5, r3
 80192fc:	0553      	lsls	r3, r2, #21
 80192fe:	d530      	bpl.n	8019362 <__ssputs_r+0x9e>
 8019300:	4629      	mov	r1, r5
 8019302:	f7ff ff85 	bl	8019210 <_malloc_r>
 8019306:	4606      	mov	r6, r0
 8019308:	b950      	cbnz	r0, 8019320 <__ssputs_r+0x5c>
 801930a:	230c      	movs	r3, #12
 801930c:	f8ca 3000 	str.w	r3, [sl]
 8019310:	89a3      	ldrh	r3, [r4, #12]
 8019312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019316:	81a3      	strh	r3, [r4, #12]
 8019318:	f04f 30ff 	mov.w	r0, #4294967295
 801931c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019320:	463a      	mov	r2, r7
 8019322:	6921      	ldr	r1, [r4, #16]
 8019324:	f7ff fb0e 	bl	8018944 <memcpy>
 8019328:	89a3      	ldrh	r3, [r4, #12]
 801932a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801932e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019332:	81a3      	strh	r3, [r4, #12]
 8019334:	6126      	str	r6, [r4, #16]
 8019336:	6165      	str	r5, [r4, #20]
 8019338:	443e      	add	r6, r7
 801933a:	1bed      	subs	r5, r5, r7
 801933c:	6026      	str	r6, [r4, #0]
 801933e:	60a5      	str	r5, [r4, #8]
 8019340:	464e      	mov	r6, r9
 8019342:	454e      	cmp	r6, r9
 8019344:	d900      	bls.n	8019348 <__ssputs_r+0x84>
 8019346:	464e      	mov	r6, r9
 8019348:	4632      	mov	r2, r6
 801934a:	4641      	mov	r1, r8
 801934c:	6820      	ldr	r0, [r4, #0]
 801934e:	f000 fd34 	bl	8019dba <memmove>
 8019352:	68a3      	ldr	r3, [r4, #8]
 8019354:	1b9b      	subs	r3, r3, r6
 8019356:	60a3      	str	r3, [r4, #8]
 8019358:	6823      	ldr	r3, [r4, #0]
 801935a:	441e      	add	r6, r3
 801935c:	6026      	str	r6, [r4, #0]
 801935e:	2000      	movs	r0, #0
 8019360:	e7dc      	b.n	801931c <__ssputs_r+0x58>
 8019362:	462a      	mov	r2, r5
 8019364:	f000 fd44 	bl	8019df0 <_realloc_r>
 8019368:	4606      	mov	r6, r0
 801936a:	2800      	cmp	r0, #0
 801936c:	d1e2      	bne.n	8019334 <__ssputs_r+0x70>
 801936e:	6921      	ldr	r1, [r4, #16]
 8019370:	4650      	mov	r0, sl
 8019372:	f7ff feff 	bl	8019174 <_free_r>
 8019376:	e7c8      	b.n	801930a <__ssputs_r+0x46>

08019378 <_svfiprintf_r>:
 8019378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801937c:	461d      	mov	r5, r3
 801937e:	898b      	ldrh	r3, [r1, #12]
 8019380:	061f      	lsls	r7, r3, #24
 8019382:	b09d      	sub	sp, #116	; 0x74
 8019384:	4680      	mov	r8, r0
 8019386:	460c      	mov	r4, r1
 8019388:	4616      	mov	r6, r2
 801938a:	d50f      	bpl.n	80193ac <_svfiprintf_r+0x34>
 801938c:	690b      	ldr	r3, [r1, #16]
 801938e:	b96b      	cbnz	r3, 80193ac <_svfiprintf_r+0x34>
 8019390:	2140      	movs	r1, #64	; 0x40
 8019392:	f7ff ff3d 	bl	8019210 <_malloc_r>
 8019396:	6020      	str	r0, [r4, #0]
 8019398:	6120      	str	r0, [r4, #16]
 801939a:	b928      	cbnz	r0, 80193a8 <_svfiprintf_r+0x30>
 801939c:	230c      	movs	r3, #12
 801939e:	f8c8 3000 	str.w	r3, [r8]
 80193a2:	f04f 30ff 	mov.w	r0, #4294967295
 80193a6:	e0c8      	b.n	801953a <_svfiprintf_r+0x1c2>
 80193a8:	2340      	movs	r3, #64	; 0x40
 80193aa:	6163      	str	r3, [r4, #20]
 80193ac:	2300      	movs	r3, #0
 80193ae:	9309      	str	r3, [sp, #36]	; 0x24
 80193b0:	2320      	movs	r3, #32
 80193b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193b6:	2330      	movs	r3, #48	; 0x30
 80193b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80193bc:	9503      	str	r5, [sp, #12]
 80193be:	f04f 0b01 	mov.w	fp, #1
 80193c2:	4637      	mov	r7, r6
 80193c4:	463d      	mov	r5, r7
 80193c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80193ca:	b10b      	cbz	r3, 80193d0 <_svfiprintf_r+0x58>
 80193cc:	2b25      	cmp	r3, #37	; 0x25
 80193ce:	d13e      	bne.n	801944e <_svfiprintf_r+0xd6>
 80193d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80193d4:	d00b      	beq.n	80193ee <_svfiprintf_r+0x76>
 80193d6:	4653      	mov	r3, sl
 80193d8:	4632      	mov	r2, r6
 80193da:	4621      	mov	r1, r4
 80193dc:	4640      	mov	r0, r8
 80193de:	f7ff ff71 	bl	80192c4 <__ssputs_r>
 80193e2:	3001      	adds	r0, #1
 80193e4:	f000 80a4 	beq.w	8019530 <_svfiprintf_r+0x1b8>
 80193e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193ea:	4453      	add	r3, sl
 80193ec:	9309      	str	r3, [sp, #36]	; 0x24
 80193ee:	783b      	ldrb	r3, [r7, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	f000 809d 	beq.w	8019530 <_svfiprintf_r+0x1b8>
 80193f6:	2300      	movs	r3, #0
 80193f8:	f04f 32ff 	mov.w	r2, #4294967295
 80193fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019400:	9304      	str	r3, [sp, #16]
 8019402:	9307      	str	r3, [sp, #28]
 8019404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019408:	931a      	str	r3, [sp, #104]	; 0x68
 801940a:	462f      	mov	r7, r5
 801940c:	2205      	movs	r2, #5
 801940e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019412:	4850      	ldr	r0, [pc, #320]	; (8019554 <_svfiprintf_r+0x1dc>)
 8019414:	f7e6 fefc 	bl	8000210 <memchr>
 8019418:	9b04      	ldr	r3, [sp, #16]
 801941a:	b9d0      	cbnz	r0, 8019452 <_svfiprintf_r+0xda>
 801941c:	06d9      	lsls	r1, r3, #27
 801941e:	bf44      	itt	mi
 8019420:	2220      	movmi	r2, #32
 8019422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019426:	071a      	lsls	r2, r3, #28
 8019428:	bf44      	itt	mi
 801942a:	222b      	movmi	r2, #43	; 0x2b
 801942c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019430:	782a      	ldrb	r2, [r5, #0]
 8019432:	2a2a      	cmp	r2, #42	; 0x2a
 8019434:	d015      	beq.n	8019462 <_svfiprintf_r+0xea>
 8019436:	9a07      	ldr	r2, [sp, #28]
 8019438:	462f      	mov	r7, r5
 801943a:	2000      	movs	r0, #0
 801943c:	250a      	movs	r5, #10
 801943e:	4639      	mov	r1, r7
 8019440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019444:	3b30      	subs	r3, #48	; 0x30
 8019446:	2b09      	cmp	r3, #9
 8019448:	d94d      	bls.n	80194e6 <_svfiprintf_r+0x16e>
 801944a:	b1b8      	cbz	r0, 801947c <_svfiprintf_r+0x104>
 801944c:	e00f      	b.n	801946e <_svfiprintf_r+0xf6>
 801944e:	462f      	mov	r7, r5
 8019450:	e7b8      	b.n	80193c4 <_svfiprintf_r+0x4c>
 8019452:	4a40      	ldr	r2, [pc, #256]	; (8019554 <_svfiprintf_r+0x1dc>)
 8019454:	1a80      	subs	r0, r0, r2
 8019456:	fa0b f000 	lsl.w	r0, fp, r0
 801945a:	4318      	orrs	r0, r3
 801945c:	9004      	str	r0, [sp, #16]
 801945e:	463d      	mov	r5, r7
 8019460:	e7d3      	b.n	801940a <_svfiprintf_r+0x92>
 8019462:	9a03      	ldr	r2, [sp, #12]
 8019464:	1d11      	adds	r1, r2, #4
 8019466:	6812      	ldr	r2, [r2, #0]
 8019468:	9103      	str	r1, [sp, #12]
 801946a:	2a00      	cmp	r2, #0
 801946c:	db01      	blt.n	8019472 <_svfiprintf_r+0xfa>
 801946e:	9207      	str	r2, [sp, #28]
 8019470:	e004      	b.n	801947c <_svfiprintf_r+0x104>
 8019472:	4252      	negs	r2, r2
 8019474:	f043 0302 	orr.w	r3, r3, #2
 8019478:	9207      	str	r2, [sp, #28]
 801947a:	9304      	str	r3, [sp, #16]
 801947c:	783b      	ldrb	r3, [r7, #0]
 801947e:	2b2e      	cmp	r3, #46	; 0x2e
 8019480:	d10c      	bne.n	801949c <_svfiprintf_r+0x124>
 8019482:	787b      	ldrb	r3, [r7, #1]
 8019484:	2b2a      	cmp	r3, #42	; 0x2a
 8019486:	d133      	bne.n	80194f0 <_svfiprintf_r+0x178>
 8019488:	9b03      	ldr	r3, [sp, #12]
 801948a:	1d1a      	adds	r2, r3, #4
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	9203      	str	r2, [sp, #12]
 8019490:	2b00      	cmp	r3, #0
 8019492:	bfb8      	it	lt
 8019494:	f04f 33ff 	movlt.w	r3, #4294967295
 8019498:	3702      	adds	r7, #2
 801949a:	9305      	str	r3, [sp, #20]
 801949c:	4d2e      	ldr	r5, [pc, #184]	; (8019558 <_svfiprintf_r+0x1e0>)
 801949e:	7839      	ldrb	r1, [r7, #0]
 80194a0:	2203      	movs	r2, #3
 80194a2:	4628      	mov	r0, r5
 80194a4:	f7e6 feb4 	bl	8000210 <memchr>
 80194a8:	b138      	cbz	r0, 80194ba <_svfiprintf_r+0x142>
 80194aa:	2340      	movs	r3, #64	; 0x40
 80194ac:	1b40      	subs	r0, r0, r5
 80194ae:	fa03 f000 	lsl.w	r0, r3, r0
 80194b2:	9b04      	ldr	r3, [sp, #16]
 80194b4:	4303      	orrs	r3, r0
 80194b6:	3701      	adds	r7, #1
 80194b8:	9304      	str	r3, [sp, #16]
 80194ba:	7839      	ldrb	r1, [r7, #0]
 80194bc:	4827      	ldr	r0, [pc, #156]	; (801955c <_svfiprintf_r+0x1e4>)
 80194be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80194c2:	2206      	movs	r2, #6
 80194c4:	1c7e      	adds	r6, r7, #1
 80194c6:	f7e6 fea3 	bl	8000210 <memchr>
 80194ca:	2800      	cmp	r0, #0
 80194cc:	d038      	beq.n	8019540 <_svfiprintf_r+0x1c8>
 80194ce:	4b24      	ldr	r3, [pc, #144]	; (8019560 <_svfiprintf_r+0x1e8>)
 80194d0:	bb13      	cbnz	r3, 8019518 <_svfiprintf_r+0x1a0>
 80194d2:	9b03      	ldr	r3, [sp, #12]
 80194d4:	3307      	adds	r3, #7
 80194d6:	f023 0307 	bic.w	r3, r3, #7
 80194da:	3308      	adds	r3, #8
 80194dc:	9303      	str	r3, [sp, #12]
 80194de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194e0:	444b      	add	r3, r9
 80194e2:	9309      	str	r3, [sp, #36]	; 0x24
 80194e4:	e76d      	b.n	80193c2 <_svfiprintf_r+0x4a>
 80194e6:	fb05 3202 	mla	r2, r5, r2, r3
 80194ea:	2001      	movs	r0, #1
 80194ec:	460f      	mov	r7, r1
 80194ee:	e7a6      	b.n	801943e <_svfiprintf_r+0xc6>
 80194f0:	2300      	movs	r3, #0
 80194f2:	3701      	adds	r7, #1
 80194f4:	9305      	str	r3, [sp, #20]
 80194f6:	4619      	mov	r1, r3
 80194f8:	250a      	movs	r5, #10
 80194fa:	4638      	mov	r0, r7
 80194fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019500:	3a30      	subs	r2, #48	; 0x30
 8019502:	2a09      	cmp	r2, #9
 8019504:	d903      	bls.n	801950e <_svfiprintf_r+0x196>
 8019506:	2b00      	cmp	r3, #0
 8019508:	d0c8      	beq.n	801949c <_svfiprintf_r+0x124>
 801950a:	9105      	str	r1, [sp, #20]
 801950c:	e7c6      	b.n	801949c <_svfiprintf_r+0x124>
 801950e:	fb05 2101 	mla	r1, r5, r1, r2
 8019512:	2301      	movs	r3, #1
 8019514:	4607      	mov	r7, r0
 8019516:	e7f0      	b.n	80194fa <_svfiprintf_r+0x182>
 8019518:	ab03      	add	r3, sp, #12
 801951a:	9300      	str	r3, [sp, #0]
 801951c:	4622      	mov	r2, r4
 801951e:	4b11      	ldr	r3, [pc, #68]	; (8019564 <_svfiprintf_r+0x1ec>)
 8019520:	a904      	add	r1, sp, #16
 8019522:	4640      	mov	r0, r8
 8019524:	f7fc fb60 	bl	8015be8 <_printf_float>
 8019528:	f1b0 3fff 	cmp.w	r0, #4294967295
 801952c:	4681      	mov	r9, r0
 801952e:	d1d6      	bne.n	80194de <_svfiprintf_r+0x166>
 8019530:	89a3      	ldrh	r3, [r4, #12]
 8019532:	065b      	lsls	r3, r3, #25
 8019534:	f53f af35 	bmi.w	80193a2 <_svfiprintf_r+0x2a>
 8019538:	9809      	ldr	r0, [sp, #36]	; 0x24
 801953a:	b01d      	add	sp, #116	; 0x74
 801953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019540:	ab03      	add	r3, sp, #12
 8019542:	9300      	str	r3, [sp, #0]
 8019544:	4622      	mov	r2, r4
 8019546:	4b07      	ldr	r3, [pc, #28]	; (8019564 <_svfiprintf_r+0x1ec>)
 8019548:	a904      	add	r1, sp, #16
 801954a:	4640      	mov	r0, r8
 801954c:	f7fc fe02 	bl	8016154 <_printf_i>
 8019550:	e7ea      	b.n	8019528 <_svfiprintf_r+0x1b0>
 8019552:	bf00      	nop
 8019554:	0801a6e4 	.word	0x0801a6e4
 8019558:	0801a6ea 	.word	0x0801a6ea
 801955c:	0801a6ee 	.word	0x0801a6ee
 8019560:	08015be9 	.word	0x08015be9
 8019564:	080192c5 	.word	0x080192c5

08019568 <_sungetc_r>:
 8019568:	b538      	push	{r3, r4, r5, lr}
 801956a:	1c4b      	adds	r3, r1, #1
 801956c:	4614      	mov	r4, r2
 801956e:	d103      	bne.n	8019578 <_sungetc_r+0x10>
 8019570:	f04f 35ff 	mov.w	r5, #4294967295
 8019574:	4628      	mov	r0, r5
 8019576:	bd38      	pop	{r3, r4, r5, pc}
 8019578:	8993      	ldrh	r3, [r2, #12]
 801957a:	f023 0320 	bic.w	r3, r3, #32
 801957e:	8193      	strh	r3, [r2, #12]
 8019580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019582:	6852      	ldr	r2, [r2, #4]
 8019584:	b2cd      	uxtb	r5, r1
 8019586:	b18b      	cbz	r3, 80195ac <_sungetc_r+0x44>
 8019588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801958a:	4293      	cmp	r3, r2
 801958c:	dd08      	ble.n	80195a0 <_sungetc_r+0x38>
 801958e:	6823      	ldr	r3, [r4, #0]
 8019590:	1e5a      	subs	r2, r3, #1
 8019592:	6022      	str	r2, [r4, #0]
 8019594:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019598:	6863      	ldr	r3, [r4, #4]
 801959a:	3301      	adds	r3, #1
 801959c:	6063      	str	r3, [r4, #4]
 801959e:	e7e9      	b.n	8019574 <_sungetc_r+0xc>
 80195a0:	4621      	mov	r1, r4
 80195a2:	f000 fbc3 	bl	8019d2c <__submore>
 80195a6:	2800      	cmp	r0, #0
 80195a8:	d0f1      	beq.n	801958e <_sungetc_r+0x26>
 80195aa:	e7e1      	b.n	8019570 <_sungetc_r+0x8>
 80195ac:	6921      	ldr	r1, [r4, #16]
 80195ae:	6823      	ldr	r3, [r4, #0]
 80195b0:	b151      	cbz	r1, 80195c8 <_sungetc_r+0x60>
 80195b2:	4299      	cmp	r1, r3
 80195b4:	d208      	bcs.n	80195c8 <_sungetc_r+0x60>
 80195b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80195ba:	42a9      	cmp	r1, r5
 80195bc:	d104      	bne.n	80195c8 <_sungetc_r+0x60>
 80195be:	3b01      	subs	r3, #1
 80195c0:	3201      	adds	r2, #1
 80195c2:	6023      	str	r3, [r4, #0]
 80195c4:	6062      	str	r2, [r4, #4]
 80195c6:	e7d5      	b.n	8019574 <_sungetc_r+0xc>
 80195c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80195cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195d0:	6363      	str	r3, [r4, #52]	; 0x34
 80195d2:	2303      	movs	r3, #3
 80195d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80195d6:	4623      	mov	r3, r4
 80195d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80195dc:	6023      	str	r3, [r4, #0]
 80195de:	2301      	movs	r3, #1
 80195e0:	e7dc      	b.n	801959c <_sungetc_r+0x34>

080195e2 <__ssrefill_r>:
 80195e2:	b510      	push	{r4, lr}
 80195e4:	460c      	mov	r4, r1
 80195e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80195e8:	b169      	cbz	r1, 8019606 <__ssrefill_r+0x24>
 80195ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195ee:	4299      	cmp	r1, r3
 80195f0:	d001      	beq.n	80195f6 <__ssrefill_r+0x14>
 80195f2:	f7ff fdbf 	bl	8019174 <_free_r>
 80195f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80195f8:	6063      	str	r3, [r4, #4]
 80195fa:	2000      	movs	r0, #0
 80195fc:	6360      	str	r0, [r4, #52]	; 0x34
 80195fe:	b113      	cbz	r3, 8019606 <__ssrefill_r+0x24>
 8019600:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019602:	6023      	str	r3, [r4, #0]
 8019604:	bd10      	pop	{r4, pc}
 8019606:	6923      	ldr	r3, [r4, #16]
 8019608:	6023      	str	r3, [r4, #0]
 801960a:	2300      	movs	r3, #0
 801960c:	6063      	str	r3, [r4, #4]
 801960e:	89a3      	ldrh	r3, [r4, #12]
 8019610:	f043 0320 	orr.w	r3, r3, #32
 8019614:	81a3      	strh	r3, [r4, #12]
 8019616:	f04f 30ff 	mov.w	r0, #4294967295
 801961a:	e7f3      	b.n	8019604 <__ssrefill_r+0x22>

0801961c <__ssvfiscanf_r>:
 801961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019620:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019624:	460c      	mov	r4, r1
 8019626:	2100      	movs	r1, #0
 8019628:	9144      	str	r1, [sp, #272]	; 0x110
 801962a:	9145      	str	r1, [sp, #276]	; 0x114
 801962c:	499f      	ldr	r1, [pc, #636]	; (80198ac <__ssvfiscanf_r+0x290>)
 801962e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019630:	f10d 0804 	add.w	r8, sp, #4
 8019634:	499e      	ldr	r1, [pc, #632]	; (80198b0 <__ssvfiscanf_r+0x294>)
 8019636:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80198b4 <__ssvfiscanf_r+0x298>
 801963a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801963e:	4606      	mov	r6, r0
 8019640:	4692      	mov	sl, r2
 8019642:	91a1      	str	r1, [sp, #644]	; 0x284
 8019644:	9300      	str	r3, [sp, #0]
 8019646:	270a      	movs	r7, #10
 8019648:	f89a 3000 	ldrb.w	r3, [sl]
 801964c:	2b00      	cmp	r3, #0
 801964e:	f000 812a 	beq.w	80198a6 <__ssvfiscanf_r+0x28a>
 8019652:	4655      	mov	r5, sl
 8019654:	f7ff f93e 	bl	80188d4 <__locale_ctype_ptr>
 8019658:	f815 bb01 	ldrb.w	fp, [r5], #1
 801965c:	4458      	add	r0, fp
 801965e:	7843      	ldrb	r3, [r0, #1]
 8019660:	f013 0308 	ands.w	r3, r3, #8
 8019664:	d01c      	beq.n	80196a0 <__ssvfiscanf_r+0x84>
 8019666:	6863      	ldr	r3, [r4, #4]
 8019668:	2b00      	cmp	r3, #0
 801966a:	dd12      	ble.n	8019692 <__ssvfiscanf_r+0x76>
 801966c:	f7ff f932 	bl	80188d4 <__locale_ctype_ptr>
 8019670:	6823      	ldr	r3, [r4, #0]
 8019672:	781a      	ldrb	r2, [r3, #0]
 8019674:	4410      	add	r0, r2
 8019676:	7842      	ldrb	r2, [r0, #1]
 8019678:	0712      	lsls	r2, r2, #28
 801967a:	d401      	bmi.n	8019680 <__ssvfiscanf_r+0x64>
 801967c:	46aa      	mov	sl, r5
 801967e:	e7e3      	b.n	8019648 <__ssvfiscanf_r+0x2c>
 8019680:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019682:	3201      	adds	r2, #1
 8019684:	9245      	str	r2, [sp, #276]	; 0x114
 8019686:	6862      	ldr	r2, [r4, #4]
 8019688:	3301      	adds	r3, #1
 801968a:	3a01      	subs	r2, #1
 801968c:	6062      	str	r2, [r4, #4]
 801968e:	6023      	str	r3, [r4, #0]
 8019690:	e7e9      	b.n	8019666 <__ssvfiscanf_r+0x4a>
 8019692:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019694:	4621      	mov	r1, r4
 8019696:	4630      	mov	r0, r6
 8019698:	4798      	blx	r3
 801969a:	2800      	cmp	r0, #0
 801969c:	d0e6      	beq.n	801966c <__ssvfiscanf_r+0x50>
 801969e:	e7ed      	b.n	801967c <__ssvfiscanf_r+0x60>
 80196a0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80196a4:	f040 8082 	bne.w	80197ac <__ssvfiscanf_r+0x190>
 80196a8:	9343      	str	r3, [sp, #268]	; 0x10c
 80196aa:	9341      	str	r3, [sp, #260]	; 0x104
 80196ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80196b0:	2b2a      	cmp	r3, #42	; 0x2a
 80196b2:	d103      	bne.n	80196bc <__ssvfiscanf_r+0xa0>
 80196b4:	2310      	movs	r3, #16
 80196b6:	9341      	str	r3, [sp, #260]	; 0x104
 80196b8:	f10a 0502 	add.w	r5, sl, #2
 80196bc:	46aa      	mov	sl, r5
 80196be:	f815 1b01 	ldrb.w	r1, [r5], #1
 80196c2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80196c6:	2a09      	cmp	r2, #9
 80196c8:	d922      	bls.n	8019710 <__ssvfiscanf_r+0xf4>
 80196ca:	2203      	movs	r2, #3
 80196cc:	4879      	ldr	r0, [pc, #484]	; (80198b4 <__ssvfiscanf_r+0x298>)
 80196ce:	f7e6 fd9f 	bl	8000210 <memchr>
 80196d2:	b138      	cbz	r0, 80196e4 <__ssvfiscanf_r+0xc8>
 80196d4:	eba0 0309 	sub.w	r3, r0, r9
 80196d8:	2001      	movs	r0, #1
 80196da:	4098      	lsls	r0, r3
 80196dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80196de:	4318      	orrs	r0, r3
 80196e0:	9041      	str	r0, [sp, #260]	; 0x104
 80196e2:	46aa      	mov	sl, r5
 80196e4:	f89a 3000 	ldrb.w	r3, [sl]
 80196e8:	2b67      	cmp	r3, #103	; 0x67
 80196ea:	f10a 0501 	add.w	r5, sl, #1
 80196ee:	d82b      	bhi.n	8019748 <__ssvfiscanf_r+0x12c>
 80196f0:	2b65      	cmp	r3, #101	; 0x65
 80196f2:	f080 809f 	bcs.w	8019834 <__ssvfiscanf_r+0x218>
 80196f6:	2b47      	cmp	r3, #71	; 0x47
 80196f8:	d810      	bhi.n	801971c <__ssvfiscanf_r+0x100>
 80196fa:	2b45      	cmp	r3, #69	; 0x45
 80196fc:	f080 809a 	bcs.w	8019834 <__ssvfiscanf_r+0x218>
 8019700:	2b00      	cmp	r3, #0
 8019702:	d06c      	beq.n	80197de <__ssvfiscanf_r+0x1c2>
 8019704:	2b25      	cmp	r3, #37	; 0x25
 8019706:	d051      	beq.n	80197ac <__ssvfiscanf_r+0x190>
 8019708:	2303      	movs	r3, #3
 801970a:	9347      	str	r3, [sp, #284]	; 0x11c
 801970c:	9742      	str	r7, [sp, #264]	; 0x108
 801970e:	e027      	b.n	8019760 <__ssvfiscanf_r+0x144>
 8019710:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019712:	fb07 1303 	mla	r3, r7, r3, r1
 8019716:	3b30      	subs	r3, #48	; 0x30
 8019718:	9343      	str	r3, [sp, #268]	; 0x10c
 801971a:	e7cf      	b.n	80196bc <__ssvfiscanf_r+0xa0>
 801971c:	2b5b      	cmp	r3, #91	; 0x5b
 801971e:	d06a      	beq.n	80197f6 <__ssvfiscanf_r+0x1da>
 8019720:	d80c      	bhi.n	801973c <__ssvfiscanf_r+0x120>
 8019722:	2b58      	cmp	r3, #88	; 0x58
 8019724:	d1f0      	bne.n	8019708 <__ssvfiscanf_r+0xec>
 8019726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801972c:	9241      	str	r2, [sp, #260]	; 0x104
 801972e:	2210      	movs	r2, #16
 8019730:	9242      	str	r2, [sp, #264]	; 0x108
 8019732:	2b6e      	cmp	r3, #110	; 0x6e
 8019734:	bf8c      	ite	hi
 8019736:	2304      	movhi	r3, #4
 8019738:	2303      	movls	r3, #3
 801973a:	e010      	b.n	801975e <__ssvfiscanf_r+0x142>
 801973c:	2b63      	cmp	r3, #99	; 0x63
 801973e:	d065      	beq.n	801980c <__ssvfiscanf_r+0x1f0>
 8019740:	2b64      	cmp	r3, #100	; 0x64
 8019742:	d1e1      	bne.n	8019708 <__ssvfiscanf_r+0xec>
 8019744:	9742      	str	r7, [sp, #264]	; 0x108
 8019746:	e7f4      	b.n	8019732 <__ssvfiscanf_r+0x116>
 8019748:	2b70      	cmp	r3, #112	; 0x70
 801974a:	d04b      	beq.n	80197e4 <__ssvfiscanf_r+0x1c8>
 801974c:	d826      	bhi.n	801979c <__ssvfiscanf_r+0x180>
 801974e:	2b6e      	cmp	r3, #110	; 0x6e
 8019750:	d062      	beq.n	8019818 <__ssvfiscanf_r+0x1fc>
 8019752:	d84c      	bhi.n	80197ee <__ssvfiscanf_r+0x1d2>
 8019754:	2b69      	cmp	r3, #105	; 0x69
 8019756:	d1d7      	bne.n	8019708 <__ssvfiscanf_r+0xec>
 8019758:	2300      	movs	r3, #0
 801975a:	9342      	str	r3, [sp, #264]	; 0x108
 801975c:	2303      	movs	r3, #3
 801975e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019760:	6863      	ldr	r3, [r4, #4]
 8019762:	2b00      	cmp	r3, #0
 8019764:	dd68      	ble.n	8019838 <__ssvfiscanf_r+0x21c>
 8019766:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019768:	0659      	lsls	r1, r3, #25
 801976a:	d407      	bmi.n	801977c <__ssvfiscanf_r+0x160>
 801976c:	f7ff f8b2 	bl	80188d4 <__locale_ctype_ptr>
 8019770:	6823      	ldr	r3, [r4, #0]
 8019772:	781a      	ldrb	r2, [r3, #0]
 8019774:	4410      	add	r0, r2
 8019776:	7842      	ldrb	r2, [r0, #1]
 8019778:	0712      	lsls	r2, r2, #28
 801977a:	d464      	bmi.n	8019846 <__ssvfiscanf_r+0x22a>
 801977c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801977e:	2b02      	cmp	r3, #2
 8019780:	dc73      	bgt.n	801986a <__ssvfiscanf_r+0x24e>
 8019782:	466b      	mov	r3, sp
 8019784:	4622      	mov	r2, r4
 8019786:	a941      	add	r1, sp, #260	; 0x104
 8019788:	4630      	mov	r0, r6
 801978a:	f000 f897 	bl	80198bc <_scanf_chars>
 801978e:	2801      	cmp	r0, #1
 8019790:	f000 8089 	beq.w	80198a6 <__ssvfiscanf_r+0x28a>
 8019794:	2802      	cmp	r0, #2
 8019796:	f47f af71 	bne.w	801967c <__ssvfiscanf_r+0x60>
 801979a:	e01d      	b.n	80197d8 <__ssvfiscanf_r+0x1bc>
 801979c:	2b75      	cmp	r3, #117	; 0x75
 801979e:	d0d1      	beq.n	8019744 <__ssvfiscanf_r+0x128>
 80197a0:	2b78      	cmp	r3, #120	; 0x78
 80197a2:	d0c0      	beq.n	8019726 <__ssvfiscanf_r+0x10a>
 80197a4:	2b73      	cmp	r3, #115	; 0x73
 80197a6:	d1af      	bne.n	8019708 <__ssvfiscanf_r+0xec>
 80197a8:	2302      	movs	r3, #2
 80197aa:	e7d8      	b.n	801975e <__ssvfiscanf_r+0x142>
 80197ac:	6863      	ldr	r3, [r4, #4]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	dd0c      	ble.n	80197cc <__ssvfiscanf_r+0x1b0>
 80197b2:	6823      	ldr	r3, [r4, #0]
 80197b4:	781a      	ldrb	r2, [r3, #0]
 80197b6:	455a      	cmp	r2, fp
 80197b8:	d175      	bne.n	80198a6 <__ssvfiscanf_r+0x28a>
 80197ba:	3301      	adds	r3, #1
 80197bc:	6862      	ldr	r2, [r4, #4]
 80197be:	6023      	str	r3, [r4, #0]
 80197c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80197c2:	3a01      	subs	r2, #1
 80197c4:	3301      	adds	r3, #1
 80197c6:	6062      	str	r2, [r4, #4]
 80197c8:	9345      	str	r3, [sp, #276]	; 0x114
 80197ca:	e757      	b.n	801967c <__ssvfiscanf_r+0x60>
 80197cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80197ce:	4621      	mov	r1, r4
 80197d0:	4630      	mov	r0, r6
 80197d2:	4798      	blx	r3
 80197d4:	2800      	cmp	r0, #0
 80197d6:	d0ec      	beq.n	80197b2 <__ssvfiscanf_r+0x196>
 80197d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80197da:	2800      	cmp	r0, #0
 80197dc:	d159      	bne.n	8019892 <__ssvfiscanf_r+0x276>
 80197de:	f04f 30ff 	mov.w	r0, #4294967295
 80197e2:	e05c      	b.n	801989e <__ssvfiscanf_r+0x282>
 80197e4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80197e6:	f042 0220 	orr.w	r2, r2, #32
 80197ea:	9241      	str	r2, [sp, #260]	; 0x104
 80197ec:	e79b      	b.n	8019726 <__ssvfiscanf_r+0x10a>
 80197ee:	2308      	movs	r3, #8
 80197f0:	9342      	str	r3, [sp, #264]	; 0x108
 80197f2:	2304      	movs	r3, #4
 80197f4:	e7b3      	b.n	801975e <__ssvfiscanf_r+0x142>
 80197f6:	4629      	mov	r1, r5
 80197f8:	4640      	mov	r0, r8
 80197fa:	f000 f9c7 	bl	8019b8c <__sccl>
 80197fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019804:	9341      	str	r3, [sp, #260]	; 0x104
 8019806:	4605      	mov	r5, r0
 8019808:	2301      	movs	r3, #1
 801980a:	e7a8      	b.n	801975e <__ssvfiscanf_r+0x142>
 801980c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801980e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019812:	9341      	str	r3, [sp, #260]	; 0x104
 8019814:	2300      	movs	r3, #0
 8019816:	e7a2      	b.n	801975e <__ssvfiscanf_r+0x142>
 8019818:	9841      	ldr	r0, [sp, #260]	; 0x104
 801981a:	06c3      	lsls	r3, r0, #27
 801981c:	f53f af2e 	bmi.w	801967c <__ssvfiscanf_r+0x60>
 8019820:	9b00      	ldr	r3, [sp, #0]
 8019822:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019824:	1d19      	adds	r1, r3, #4
 8019826:	9100      	str	r1, [sp, #0]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	07c0      	lsls	r0, r0, #31
 801982c:	bf4c      	ite	mi
 801982e:	801a      	strhmi	r2, [r3, #0]
 8019830:	601a      	strpl	r2, [r3, #0]
 8019832:	e723      	b.n	801967c <__ssvfiscanf_r+0x60>
 8019834:	2305      	movs	r3, #5
 8019836:	e792      	b.n	801975e <__ssvfiscanf_r+0x142>
 8019838:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801983a:	4621      	mov	r1, r4
 801983c:	4630      	mov	r0, r6
 801983e:	4798      	blx	r3
 8019840:	2800      	cmp	r0, #0
 8019842:	d090      	beq.n	8019766 <__ssvfiscanf_r+0x14a>
 8019844:	e7c8      	b.n	80197d8 <__ssvfiscanf_r+0x1bc>
 8019846:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019848:	3201      	adds	r2, #1
 801984a:	9245      	str	r2, [sp, #276]	; 0x114
 801984c:	6862      	ldr	r2, [r4, #4]
 801984e:	3a01      	subs	r2, #1
 8019850:	2a00      	cmp	r2, #0
 8019852:	6062      	str	r2, [r4, #4]
 8019854:	dd02      	ble.n	801985c <__ssvfiscanf_r+0x240>
 8019856:	3301      	adds	r3, #1
 8019858:	6023      	str	r3, [r4, #0]
 801985a:	e787      	b.n	801976c <__ssvfiscanf_r+0x150>
 801985c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801985e:	4621      	mov	r1, r4
 8019860:	4630      	mov	r0, r6
 8019862:	4798      	blx	r3
 8019864:	2800      	cmp	r0, #0
 8019866:	d081      	beq.n	801976c <__ssvfiscanf_r+0x150>
 8019868:	e7b6      	b.n	80197d8 <__ssvfiscanf_r+0x1bc>
 801986a:	2b04      	cmp	r3, #4
 801986c:	dc06      	bgt.n	801987c <__ssvfiscanf_r+0x260>
 801986e:	466b      	mov	r3, sp
 8019870:	4622      	mov	r2, r4
 8019872:	a941      	add	r1, sp, #260	; 0x104
 8019874:	4630      	mov	r0, r6
 8019876:	f000 f885 	bl	8019984 <_scanf_i>
 801987a:	e788      	b.n	801978e <__ssvfiscanf_r+0x172>
 801987c:	4b0e      	ldr	r3, [pc, #56]	; (80198b8 <__ssvfiscanf_r+0x29c>)
 801987e:	2b00      	cmp	r3, #0
 8019880:	f43f aefc 	beq.w	801967c <__ssvfiscanf_r+0x60>
 8019884:	466b      	mov	r3, sp
 8019886:	4622      	mov	r2, r4
 8019888:	a941      	add	r1, sp, #260	; 0x104
 801988a:	4630      	mov	r0, r6
 801988c:	f7fc fd74 	bl	8016378 <_scanf_float>
 8019890:	e77d      	b.n	801978e <__ssvfiscanf_r+0x172>
 8019892:	89a3      	ldrh	r3, [r4, #12]
 8019894:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019898:	bf18      	it	ne
 801989a:	f04f 30ff 	movne.w	r0, #4294967295
 801989e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80198a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80198a8:	e7f9      	b.n	801989e <__ssvfiscanf_r+0x282>
 80198aa:	bf00      	nop
 80198ac:	08019569 	.word	0x08019569
 80198b0:	080195e3 	.word	0x080195e3
 80198b4:	0801a6ea 	.word	0x0801a6ea
 80198b8:	08016379 	.word	0x08016379

080198bc <_scanf_chars>:
 80198bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198c0:	4615      	mov	r5, r2
 80198c2:	688a      	ldr	r2, [r1, #8]
 80198c4:	4680      	mov	r8, r0
 80198c6:	460c      	mov	r4, r1
 80198c8:	b932      	cbnz	r2, 80198d8 <_scanf_chars+0x1c>
 80198ca:	698a      	ldr	r2, [r1, #24]
 80198cc:	2a00      	cmp	r2, #0
 80198ce:	bf14      	ite	ne
 80198d0:	f04f 32ff 	movne.w	r2, #4294967295
 80198d4:	2201      	moveq	r2, #1
 80198d6:	608a      	str	r2, [r1, #8]
 80198d8:	6822      	ldr	r2, [r4, #0]
 80198da:	06d1      	lsls	r1, r2, #27
 80198dc:	bf5f      	itttt	pl
 80198de:	681a      	ldrpl	r2, [r3, #0]
 80198e0:	1d11      	addpl	r1, r2, #4
 80198e2:	6019      	strpl	r1, [r3, #0]
 80198e4:	6817      	ldrpl	r7, [r2, #0]
 80198e6:	2600      	movs	r6, #0
 80198e8:	69a3      	ldr	r3, [r4, #24]
 80198ea:	b1db      	cbz	r3, 8019924 <_scanf_chars+0x68>
 80198ec:	2b01      	cmp	r3, #1
 80198ee:	d107      	bne.n	8019900 <_scanf_chars+0x44>
 80198f0:	682b      	ldr	r3, [r5, #0]
 80198f2:	6962      	ldr	r2, [r4, #20]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	5cd3      	ldrb	r3, [r2, r3]
 80198f8:	b9a3      	cbnz	r3, 8019924 <_scanf_chars+0x68>
 80198fa:	2e00      	cmp	r6, #0
 80198fc:	d132      	bne.n	8019964 <_scanf_chars+0xa8>
 80198fe:	e006      	b.n	801990e <_scanf_chars+0x52>
 8019900:	2b02      	cmp	r3, #2
 8019902:	d007      	beq.n	8019914 <_scanf_chars+0x58>
 8019904:	2e00      	cmp	r6, #0
 8019906:	d12d      	bne.n	8019964 <_scanf_chars+0xa8>
 8019908:	69a3      	ldr	r3, [r4, #24]
 801990a:	2b01      	cmp	r3, #1
 801990c:	d12a      	bne.n	8019964 <_scanf_chars+0xa8>
 801990e:	2001      	movs	r0, #1
 8019910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019914:	f7fe ffde 	bl	80188d4 <__locale_ctype_ptr>
 8019918:	682b      	ldr	r3, [r5, #0]
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	4418      	add	r0, r3
 801991e:	7843      	ldrb	r3, [r0, #1]
 8019920:	071b      	lsls	r3, r3, #28
 8019922:	d4ef      	bmi.n	8019904 <_scanf_chars+0x48>
 8019924:	6823      	ldr	r3, [r4, #0]
 8019926:	06da      	lsls	r2, r3, #27
 8019928:	bf5e      	ittt	pl
 801992a:	682b      	ldrpl	r3, [r5, #0]
 801992c:	781b      	ldrbpl	r3, [r3, #0]
 801992e:	703b      	strbpl	r3, [r7, #0]
 8019930:	682a      	ldr	r2, [r5, #0]
 8019932:	686b      	ldr	r3, [r5, #4]
 8019934:	f102 0201 	add.w	r2, r2, #1
 8019938:	602a      	str	r2, [r5, #0]
 801993a:	68a2      	ldr	r2, [r4, #8]
 801993c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019940:	f102 32ff 	add.w	r2, r2, #4294967295
 8019944:	606b      	str	r3, [r5, #4]
 8019946:	f106 0601 	add.w	r6, r6, #1
 801994a:	bf58      	it	pl
 801994c:	3701      	addpl	r7, #1
 801994e:	60a2      	str	r2, [r4, #8]
 8019950:	b142      	cbz	r2, 8019964 <_scanf_chars+0xa8>
 8019952:	2b00      	cmp	r3, #0
 8019954:	dcc8      	bgt.n	80198e8 <_scanf_chars+0x2c>
 8019956:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801995a:	4629      	mov	r1, r5
 801995c:	4640      	mov	r0, r8
 801995e:	4798      	blx	r3
 8019960:	2800      	cmp	r0, #0
 8019962:	d0c1      	beq.n	80198e8 <_scanf_chars+0x2c>
 8019964:	6823      	ldr	r3, [r4, #0]
 8019966:	f013 0310 	ands.w	r3, r3, #16
 801996a:	d105      	bne.n	8019978 <_scanf_chars+0xbc>
 801996c:	68e2      	ldr	r2, [r4, #12]
 801996e:	3201      	adds	r2, #1
 8019970:	60e2      	str	r2, [r4, #12]
 8019972:	69a2      	ldr	r2, [r4, #24]
 8019974:	b102      	cbz	r2, 8019978 <_scanf_chars+0xbc>
 8019976:	703b      	strb	r3, [r7, #0]
 8019978:	6923      	ldr	r3, [r4, #16]
 801997a:	441e      	add	r6, r3
 801997c:	6126      	str	r6, [r4, #16]
 801997e:	2000      	movs	r0, #0
 8019980:	e7c6      	b.n	8019910 <_scanf_chars+0x54>
	...

08019984 <_scanf_i>:
 8019984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019988:	469a      	mov	sl, r3
 801998a:	4b74      	ldr	r3, [pc, #464]	; (8019b5c <_scanf_i+0x1d8>)
 801998c:	460c      	mov	r4, r1
 801998e:	4683      	mov	fp, r0
 8019990:	4616      	mov	r6, r2
 8019992:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019996:	b087      	sub	sp, #28
 8019998:	ab03      	add	r3, sp, #12
 801999a:	68a7      	ldr	r7, [r4, #8]
 801999c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80199a0:	4b6f      	ldr	r3, [pc, #444]	; (8019b60 <_scanf_i+0x1dc>)
 80199a2:	69a1      	ldr	r1, [r4, #24]
 80199a4:	4a6f      	ldr	r2, [pc, #444]	; (8019b64 <_scanf_i+0x1e0>)
 80199a6:	2903      	cmp	r1, #3
 80199a8:	bf08      	it	eq
 80199aa:	461a      	moveq	r2, r3
 80199ac:	1e7b      	subs	r3, r7, #1
 80199ae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80199b2:	bf84      	itt	hi
 80199b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80199b8:	60a3      	strhi	r3, [r4, #8]
 80199ba:	6823      	ldr	r3, [r4, #0]
 80199bc:	9200      	str	r2, [sp, #0]
 80199be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80199c2:	bf88      	it	hi
 80199c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80199c8:	f104 091c 	add.w	r9, r4, #28
 80199cc:	6023      	str	r3, [r4, #0]
 80199ce:	bf8c      	ite	hi
 80199d0:	197f      	addhi	r7, r7, r5
 80199d2:	2700      	movls	r7, #0
 80199d4:	464b      	mov	r3, r9
 80199d6:	f04f 0800 	mov.w	r8, #0
 80199da:	9301      	str	r3, [sp, #4]
 80199dc:	6831      	ldr	r1, [r6, #0]
 80199de:	ab03      	add	r3, sp, #12
 80199e0:	2202      	movs	r2, #2
 80199e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80199e6:	7809      	ldrb	r1, [r1, #0]
 80199e8:	f7e6 fc12 	bl	8000210 <memchr>
 80199ec:	9b01      	ldr	r3, [sp, #4]
 80199ee:	b330      	cbz	r0, 8019a3e <_scanf_i+0xba>
 80199f0:	f1b8 0f01 	cmp.w	r8, #1
 80199f4:	d15a      	bne.n	8019aac <_scanf_i+0x128>
 80199f6:	6862      	ldr	r2, [r4, #4]
 80199f8:	b92a      	cbnz	r2, 8019a06 <_scanf_i+0x82>
 80199fa:	6822      	ldr	r2, [r4, #0]
 80199fc:	2108      	movs	r1, #8
 80199fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a02:	6061      	str	r1, [r4, #4]
 8019a04:	6022      	str	r2, [r4, #0]
 8019a06:	6822      	ldr	r2, [r4, #0]
 8019a08:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019a0c:	6022      	str	r2, [r4, #0]
 8019a0e:	68a2      	ldr	r2, [r4, #8]
 8019a10:	1e51      	subs	r1, r2, #1
 8019a12:	60a1      	str	r1, [r4, #8]
 8019a14:	b19a      	cbz	r2, 8019a3e <_scanf_i+0xba>
 8019a16:	6832      	ldr	r2, [r6, #0]
 8019a18:	1c51      	adds	r1, r2, #1
 8019a1a:	6031      	str	r1, [r6, #0]
 8019a1c:	7812      	ldrb	r2, [r2, #0]
 8019a1e:	701a      	strb	r2, [r3, #0]
 8019a20:	1c5d      	adds	r5, r3, #1
 8019a22:	6873      	ldr	r3, [r6, #4]
 8019a24:	3b01      	subs	r3, #1
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	6073      	str	r3, [r6, #4]
 8019a2a:	dc07      	bgt.n	8019a3c <_scanf_i+0xb8>
 8019a2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a30:	4631      	mov	r1, r6
 8019a32:	4658      	mov	r0, fp
 8019a34:	4798      	blx	r3
 8019a36:	2800      	cmp	r0, #0
 8019a38:	f040 8086 	bne.w	8019b48 <_scanf_i+0x1c4>
 8019a3c:	462b      	mov	r3, r5
 8019a3e:	f108 0801 	add.w	r8, r8, #1
 8019a42:	f1b8 0f03 	cmp.w	r8, #3
 8019a46:	d1c8      	bne.n	80199da <_scanf_i+0x56>
 8019a48:	6862      	ldr	r2, [r4, #4]
 8019a4a:	b90a      	cbnz	r2, 8019a50 <_scanf_i+0xcc>
 8019a4c:	220a      	movs	r2, #10
 8019a4e:	6062      	str	r2, [r4, #4]
 8019a50:	6862      	ldr	r2, [r4, #4]
 8019a52:	4945      	ldr	r1, [pc, #276]	; (8019b68 <_scanf_i+0x1e4>)
 8019a54:	6960      	ldr	r0, [r4, #20]
 8019a56:	9301      	str	r3, [sp, #4]
 8019a58:	1a89      	subs	r1, r1, r2
 8019a5a:	f000 f897 	bl	8019b8c <__sccl>
 8019a5e:	9b01      	ldr	r3, [sp, #4]
 8019a60:	f04f 0800 	mov.w	r8, #0
 8019a64:	461d      	mov	r5, r3
 8019a66:	68a3      	ldr	r3, [r4, #8]
 8019a68:	6822      	ldr	r2, [r4, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d03a      	beq.n	8019ae4 <_scanf_i+0x160>
 8019a6e:	6831      	ldr	r1, [r6, #0]
 8019a70:	6960      	ldr	r0, [r4, #20]
 8019a72:	f891 c000 	ldrb.w	ip, [r1]
 8019a76:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019a7a:	2800      	cmp	r0, #0
 8019a7c:	d032      	beq.n	8019ae4 <_scanf_i+0x160>
 8019a7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019a82:	d121      	bne.n	8019ac8 <_scanf_i+0x144>
 8019a84:	0510      	lsls	r0, r2, #20
 8019a86:	d51f      	bpl.n	8019ac8 <_scanf_i+0x144>
 8019a88:	f108 0801 	add.w	r8, r8, #1
 8019a8c:	b117      	cbz	r7, 8019a94 <_scanf_i+0x110>
 8019a8e:	3301      	adds	r3, #1
 8019a90:	3f01      	subs	r7, #1
 8019a92:	60a3      	str	r3, [r4, #8]
 8019a94:	6873      	ldr	r3, [r6, #4]
 8019a96:	3b01      	subs	r3, #1
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	6073      	str	r3, [r6, #4]
 8019a9c:	dd1b      	ble.n	8019ad6 <_scanf_i+0x152>
 8019a9e:	6833      	ldr	r3, [r6, #0]
 8019aa0:	3301      	adds	r3, #1
 8019aa2:	6033      	str	r3, [r6, #0]
 8019aa4:	68a3      	ldr	r3, [r4, #8]
 8019aa6:	3b01      	subs	r3, #1
 8019aa8:	60a3      	str	r3, [r4, #8]
 8019aaa:	e7dc      	b.n	8019a66 <_scanf_i+0xe2>
 8019aac:	f1b8 0f02 	cmp.w	r8, #2
 8019ab0:	d1ad      	bne.n	8019a0e <_scanf_i+0x8a>
 8019ab2:	6822      	ldr	r2, [r4, #0]
 8019ab4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019ab8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019abc:	d1bf      	bne.n	8019a3e <_scanf_i+0xba>
 8019abe:	2110      	movs	r1, #16
 8019ac0:	6061      	str	r1, [r4, #4]
 8019ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019ac6:	e7a1      	b.n	8019a0c <_scanf_i+0x88>
 8019ac8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019acc:	6022      	str	r2, [r4, #0]
 8019ace:	780b      	ldrb	r3, [r1, #0]
 8019ad0:	702b      	strb	r3, [r5, #0]
 8019ad2:	3501      	adds	r5, #1
 8019ad4:	e7de      	b.n	8019a94 <_scanf_i+0x110>
 8019ad6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019ada:	4631      	mov	r1, r6
 8019adc:	4658      	mov	r0, fp
 8019ade:	4798      	blx	r3
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d0df      	beq.n	8019aa4 <_scanf_i+0x120>
 8019ae4:	6823      	ldr	r3, [r4, #0]
 8019ae6:	05d9      	lsls	r1, r3, #23
 8019ae8:	d50c      	bpl.n	8019b04 <_scanf_i+0x180>
 8019aea:	454d      	cmp	r5, r9
 8019aec:	d908      	bls.n	8019b00 <_scanf_i+0x17c>
 8019aee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019af2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019af6:	4632      	mov	r2, r6
 8019af8:	4658      	mov	r0, fp
 8019afa:	4798      	blx	r3
 8019afc:	1e6f      	subs	r7, r5, #1
 8019afe:	463d      	mov	r5, r7
 8019b00:	454d      	cmp	r5, r9
 8019b02:	d029      	beq.n	8019b58 <_scanf_i+0x1d4>
 8019b04:	6822      	ldr	r2, [r4, #0]
 8019b06:	f012 0210 	ands.w	r2, r2, #16
 8019b0a:	d113      	bne.n	8019b34 <_scanf_i+0x1b0>
 8019b0c:	702a      	strb	r2, [r5, #0]
 8019b0e:	6863      	ldr	r3, [r4, #4]
 8019b10:	9e00      	ldr	r6, [sp, #0]
 8019b12:	4649      	mov	r1, r9
 8019b14:	4658      	mov	r0, fp
 8019b16:	47b0      	blx	r6
 8019b18:	f8da 3000 	ldr.w	r3, [sl]
 8019b1c:	6821      	ldr	r1, [r4, #0]
 8019b1e:	1d1a      	adds	r2, r3, #4
 8019b20:	f8ca 2000 	str.w	r2, [sl]
 8019b24:	f011 0f20 	tst.w	r1, #32
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	d010      	beq.n	8019b4e <_scanf_i+0x1ca>
 8019b2c:	6018      	str	r0, [r3, #0]
 8019b2e:	68e3      	ldr	r3, [r4, #12]
 8019b30:	3301      	adds	r3, #1
 8019b32:	60e3      	str	r3, [r4, #12]
 8019b34:	eba5 0509 	sub.w	r5, r5, r9
 8019b38:	44a8      	add	r8, r5
 8019b3a:	6925      	ldr	r5, [r4, #16]
 8019b3c:	4445      	add	r5, r8
 8019b3e:	6125      	str	r5, [r4, #16]
 8019b40:	2000      	movs	r0, #0
 8019b42:	b007      	add	sp, #28
 8019b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b48:	f04f 0800 	mov.w	r8, #0
 8019b4c:	e7ca      	b.n	8019ae4 <_scanf_i+0x160>
 8019b4e:	07ca      	lsls	r2, r1, #31
 8019b50:	bf4c      	ite	mi
 8019b52:	8018      	strhmi	r0, [r3, #0]
 8019b54:	6018      	strpl	r0, [r3, #0]
 8019b56:	e7ea      	b.n	8019b2e <_scanf_i+0x1aa>
 8019b58:	2001      	movs	r0, #1
 8019b5a:	e7f2      	b.n	8019b42 <_scanf_i+0x1be>
 8019b5c:	0801a2ac 	.word	0x0801a2ac
 8019b60:	08017591 	.word	0x08017591
 8019b64:	08019d09 	.word	0x08019d09
 8019b68:	0801a705 	.word	0x0801a705

08019b6c <_sbrk_r>:
 8019b6c:	b538      	push	{r3, r4, r5, lr}
 8019b6e:	4c06      	ldr	r4, [pc, #24]	; (8019b88 <_sbrk_r+0x1c>)
 8019b70:	2300      	movs	r3, #0
 8019b72:	4605      	mov	r5, r0
 8019b74:	4608      	mov	r0, r1
 8019b76:	6023      	str	r3, [r4, #0]
 8019b78:	f7ed ffee 	bl	8007b58 <_sbrk>
 8019b7c:	1c43      	adds	r3, r0, #1
 8019b7e:	d102      	bne.n	8019b86 <_sbrk_r+0x1a>
 8019b80:	6823      	ldr	r3, [r4, #0]
 8019b82:	b103      	cbz	r3, 8019b86 <_sbrk_r+0x1a>
 8019b84:	602b      	str	r3, [r5, #0]
 8019b86:	bd38      	pop	{r3, r4, r5, pc}
 8019b88:	20046e34 	.word	0x20046e34

08019b8c <__sccl>:
 8019b8c:	b570      	push	{r4, r5, r6, lr}
 8019b8e:	780b      	ldrb	r3, [r1, #0]
 8019b90:	2b5e      	cmp	r3, #94	; 0x5e
 8019b92:	bf13      	iteet	ne
 8019b94:	1c4a      	addne	r2, r1, #1
 8019b96:	1c8a      	addeq	r2, r1, #2
 8019b98:	784b      	ldrbeq	r3, [r1, #1]
 8019b9a:	2100      	movne	r1, #0
 8019b9c:	bf08      	it	eq
 8019b9e:	2101      	moveq	r1, #1
 8019ba0:	1e44      	subs	r4, r0, #1
 8019ba2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019ba6:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019baa:	42ac      	cmp	r4, r5
 8019bac:	d1fb      	bne.n	8019ba6 <__sccl+0x1a>
 8019bae:	b913      	cbnz	r3, 8019bb6 <__sccl+0x2a>
 8019bb0:	3a01      	subs	r2, #1
 8019bb2:	4610      	mov	r0, r2
 8019bb4:	bd70      	pop	{r4, r5, r6, pc}
 8019bb6:	f081 0401 	eor.w	r4, r1, #1
 8019bba:	54c4      	strb	r4, [r0, r3]
 8019bbc:	1c51      	adds	r1, r2, #1
 8019bbe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019bc2:	2d2d      	cmp	r5, #45	; 0x2d
 8019bc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8019bc8:	460a      	mov	r2, r1
 8019bca:	d006      	beq.n	8019bda <__sccl+0x4e>
 8019bcc:	2d5d      	cmp	r5, #93	; 0x5d
 8019bce:	d0f0      	beq.n	8019bb2 <__sccl+0x26>
 8019bd0:	b90d      	cbnz	r5, 8019bd6 <__sccl+0x4a>
 8019bd2:	4632      	mov	r2, r6
 8019bd4:	e7ed      	b.n	8019bb2 <__sccl+0x26>
 8019bd6:	462b      	mov	r3, r5
 8019bd8:	e7ef      	b.n	8019bba <__sccl+0x2e>
 8019bda:	780e      	ldrb	r6, [r1, #0]
 8019bdc:	2e5d      	cmp	r6, #93	; 0x5d
 8019bde:	d0fa      	beq.n	8019bd6 <__sccl+0x4a>
 8019be0:	42b3      	cmp	r3, r6
 8019be2:	dcf8      	bgt.n	8019bd6 <__sccl+0x4a>
 8019be4:	3301      	adds	r3, #1
 8019be6:	429e      	cmp	r6, r3
 8019be8:	54c4      	strb	r4, [r0, r3]
 8019bea:	dcfb      	bgt.n	8019be4 <__sccl+0x58>
 8019bec:	3102      	adds	r1, #2
 8019bee:	e7e6      	b.n	8019bbe <__sccl+0x32>

08019bf0 <strncmp>:
 8019bf0:	b510      	push	{r4, lr}
 8019bf2:	b16a      	cbz	r2, 8019c10 <strncmp+0x20>
 8019bf4:	3901      	subs	r1, #1
 8019bf6:	1884      	adds	r4, r0, r2
 8019bf8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019bfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019c00:	4293      	cmp	r3, r2
 8019c02:	d103      	bne.n	8019c0c <strncmp+0x1c>
 8019c04:	42a0      	cmp	r0, r4
 8019c06:	d001      	beq.n	8019c0c <strncmp+0x1c>
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d1f5      	bne.n	8019bf8 <strncmp+0x8>
 8019c0c:	1a98      	subs	r0, r3, r2
 8019c0e:	bd10      	pop	{r4, pc}
 8019c10:	4610      	mov	r0, r2
 8019c12:	e7fc      	b.n	8019c0e <strncmp+0x1e>

08019c14 <_strtoul_l.isra.0>:
 8019c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c18:	4680      	mov	r8, r0
 8019c1a:	4689      	mov	r9, r1
 8019c1c:	4692      	mov	sl, r2
 8019c1e:	461e      	mov	r6, r3
 8019c20:	460f      	mov	r7, r1
 8019c22:	463d      	mov	r5, r7
 8019c24:	9808      	ldr	r0, [sp, #32]
 8019c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c2a:	f7fe fe4f 	bl	80188cc <__locale_ctype_ptr_l>
 8019c2e:	4420      	add	r0, r4
 8019c30:	7843      	ldrb	r3, [r0, #1]
 8019c32:	f013 0308 	ands.w	r3, r3, #8
 8019c36:	d130      	bne.n	8019c9a <_strtoul_l.isra.0+0x86>
 8019c38:	2c2d      	cmp	r4, #45	; 0x2d
 8019c3a:	d130      	bne.n	8019c9e <_strtoul_l.isra.0+0x8a>
 8019c3c:	787c      	ldrb	r4, [r7, #1]
 8019c3e:	1cbd      	adds	r5, r7, #2
 8019c40:	2101      	movs	r1, #1
 8019c42:	2e00      	cmp	r6, #0
 8019c44:	d05c      	beq.n	8019d00 <_strtoul_l.isra.0+0xec>
 8019c46:	2e10      	cmp	r6, #16
 8019c48:	d109      	bne.n	8019c5e <_strtoul_l.isra.0+0x4a>
 8019c4a:	2c30      	cmp	r4, #48	; 0x30
 8019c4c:	d107      	bne.n	8019c5e <_strtoul_l.isra.0+0x4a>
 8019c4e:	782b      	ldrb	r3, [r5, #0]
 8019c50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019c54:	2b58      	cmp	r3, #88	; 0x58
 8019c56:	d14e      	bne.n	8019cf6 <_strtoul_l.isra.0+0xe2>
 8019c58:	786c      	ldrb	r4, [r5, #1]
 8019c5a:	2610      	movs	r6, #16
 8019c5c:	3502      	adds	r5, #2
 8019c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8019c62:	2300      	movs	r3, #0
 8019c64:	fbb2 f2f6 	udiv	r2, r2, r6
 8019c68:	fb06 fc02 	mul.w	ip, r6, r2
 8019c6c:	ea6f 0c0c 	mvn.w	ip, ip
 8019c70:	4618      	mov	r0, r3
 8019c72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019c76:	2f09      	cmp	r7, #9
 8019c78:	d817      	bhi.n	8019caa <_strtoul_l.isra.0+0x96>
 8019c7a:	463c      	mov	r4, r7
 8019c7c:	42a6      	cmp	r6, r4
 8019c7e:	dd23      	ble.n	8019cc8 <_strtoul_l.isra.0+0xb4>
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	db1e      	blt.n	8019cc2 <_strtoul_l.isra.0+0xae>
 8019c84:	4282      	cmp	r2, r0
 8019c86:	d31c      	bcc.n	8019cc2 <_strtoul_l.isra.0+0xae>
 8019c88:	d101      	bne.n	8019c8e <_strtoul_l.isra.0+0x7a>
 8019c8a:	45a4      	cmp	ip, r4
 8019c8c:	db19      	blt.n	8019cc2 <_strtoul_l.isra.0+0xae>
 8019c8e:	fb00 4006 	mla	r0, r0, r6, r4
 8019c92:	2301      	movs	r3, #1
 8019c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c98:	e7eb      	b.n	8019c72 <_strtoul_l.isra.0+0x5e>
 8019c9a:	462f      	mov	r7, r5
 8019c9c:	e7c1      	b.n	8019c22 <_strtoul_l.isra.0+0xe>
 8019c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8019ca0:	bf04      	itt	eq
 8019ca2:	1cbd      	addeq	r5, r7, #2
 8019ca4:	787c      	ldrbeq	r4, [r7, #1]
 8019ca6:	4619      	mov	r1, r3
 8019ca8:	e7cb      	b.n	8019c42 <_strtoul_l.isra.0+0x2e>
 8019caa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019cae:	2f19      	cmp	r7, #25
 8019cb0:	d801      	bhi.n	8019cb6 <_strtoul_l.isra.0+0xa2>
 8019cb2:	3c37      	subs	r4, #55	; 0x37
 8019cb4:	e7e2      	b.n	8019c7c <_strtoul_l.isra.0+0x68>
 8019cb6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019cba:	2f19      	cmp	r7, #25
 8019cbc:	d804      	bhi.n	8019cc8 <_strtoul_l.isra.0+0xb4>
 8019cbe:	3c57      	subs	r4, #87	; 0x57
 8019cc0:	e7dc      	b.n	8019c7c <_strtoul_l.isra.0+0x68>
 8019cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8019cc6:	e7e5      	b.n	8019c94 <_strtoul_l.isra.0+0x80>
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	da09      	bge.n	8019ce0 <_strtoul_l.isra.0+0xcc>
 8019ccc:	2322      	movs	r3, #34	; 0x22
 8019cce:	f8c8 3000 	str.w	r3, [r8]
 8019cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8019cd6:	f1ba 0f00 	cmp.w	sl, #0
 8019cda:	d107      	bne.n	8019cec <_strtoul_l.isra.0+0xd8>
 8019cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ce0:	b101      	cbz	r1, 8019ce4 <_strtoul_l.isra.0+0xd0>
 8019ce2:	4240      	negs	r0, r0
 8019ce4:	f1ba 0f00 	cmp.w	sl, #0
 8019ce8:	d0f8      	beq.n	8019cdc <_strtoul_l.isra.0+0xc8>
 8019cea:	b10b      	cbz	r3, 8019cf0 <_strtoul_l.isra.0+0xdc>
 8019cec:	f105 39ff 	add.w	r9, r5, #4294967295
 8019cf0:	f8ca 9000 	str.w	r9, [sl]
 8019cf4:	e7f2      	b.n	8019cdc <_strtoul_l.isra.0+0xc8>
 8019cf6:	2430      	movs	r4, #48	; 0x30
 8019cf8:	2e00      	cmp	r6, #0
 8019cfa:	d1b0      	bne.n	8019c5e <_strtoul_l.isra.0+0x4a>
 8019cfc:	2608      	movs	r6, #8
 8019cfe:	e7ae      	b.n	8019c5e <_strtoul_l.isra.0+0x4a>
 8019d00:	2c30      	cmp	r4, #48	; 0x30
 8019d02:	d0a4      	beq.n	8019c4e <_strtoul_l.isra.0+0x3a>
 8019d04:	260a      	movs	r6, #10
 8019d06:	e7aa      	b.n	8019c5e <_strtoul_l.isra.0+0x4a>

08019d08 <_strtoul_r>:
 8019d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d0a:	4c06      	ldr	r4, [pc, #24]	; (8019d24 <_strtoul_r+0x1c>)
 8019d0c:	4d06      	ldr	r5, [pc, #24]	; (8019d28 <_strtoul_r+0x20>)
 8019d0e:	6824      	ldr	r4, [r4, #0]
 8019d10:	6a24      	ldr	r4, [r4, #32]
 8019d12:	2c00      	cmp	r4, #0
 8019d14:	bf08      	it	eq
 8019d16:	462c      	moveq	r4, r5
 8019d18:	9400      	str	r4, [sp, #0]
 8019d1a:	f7ff ff7b 	bl	8019c14 <_strtoul_l.isra.0>
 8019d1e:	b003      	add	sp, #12
 8019d20:	bd30      	pop	{r4, r5, pc}
 8019d22:	bf00      	nop
 8019d24:	2000000c 	.word	0x2000000c
 8019d28:	20000070 	.word	0x20000070

08019d2c <__submore>:
 8019d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d30:	460c      	mov	r4, r1
 8019d32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d38:	4299      	cmp	r1, r3
 8019d3a:	d11d      	bne.n	8019d78 <__submore+0x4c>
 8019d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019d40:	f7ff fa66 	bl	8019210 <_malloc_r>
 8019d44:	b918      	cbnz	r0, 8019d4e <__submore+0x22>
 8019d46:	f04f 30ff 	mov.w	r0, #4294967295
 8019d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d52:	63a3      	str	r3, [r4, #56]	; 0x38
 8019d54:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019d58:	6360      	str	r0, [r4, #52]	; 0x34
 8019d5a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019d5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019d62:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019d66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019d6a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019d6e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019d72:	6020      	str	r0, [r4, #0]
 8019d74:	2000      	movs	r0, #0
 8019d76:	e7e8      	b.n	8019d4a <__submore+0x1e>
 8019d78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019d7a:	0077      	lsls	r7, r6, #1
 8019d7c:	463a      	mov	r2, r7
 8019d7e:	f000 f837 	bl	8019df0 <_realloc_r>
 8019d82:	4605      	mov	r5, r0
 8019d84:	2800      	cmp	r0, #0
 8019d86:	d0de      	beq.n	8019d46 <__submore+0x1a>
 8019d88:	eb00 0806 	add.w	r8, r0, r6
 8019d8c:	4601      	mov	r1, r0
 8019d8e:	4632      	mov	r2, r6
 8019d90:	4640      	mov	r0, r8
 8019d92:	f7fe fdd7 	bl	8018944 <memcpy>
 8019d96:	f8c4 8000 	str.w	r8, [r4]
 8019d9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019d9e:	e7e9      	b.n	8019d74 <__submore+0x48>

08019da0 <__ascii_wctomb>:
 8019da0:	b149      	cbz	r1, 8019db6 <__ascii_wctomb+0x16>
 8019da2:	2aff      	cmp	r2, #255	; 0xff
 8019da4:	bf85      	ittet	hi
 8019da6:	238a      	movhi	r3, #138	; 0x8a
 8019da8:	6003      	strhi	r3, [r0, #0]
 8019daa:	700a      	strbls	r2, [r1, #0]
 8019dac:	f04f 30ff 	movhi.w	r0, #4294967295
 8019db0:	bf98      	it	ls
 8019db2:	2001      	movls	r0, #1
 8019db4:	4770      	bx	lr
 8019db6:	4608      	mov	r0, r1
 8019db8:	4770      	bx	lr

08019dba <memmove>:
 8019dba:	4288      	cmp	r0, r1
 8019dbc:	b510      	push	{r4, lr}
 8019dbe:	eb01 0302 	add.w	r3, r1, r2
 8019dc2:	d807      	bhi.n	8019dd4 <memmove+0x1a>
 8019dc4:	1e42      	subs	r2, r0, #1
 8019dc6:	4299      	cmp	r1, r3
 8019dc8:	d00a      	beq.n	8019de0 <memmove+0x26>
 8019dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019dce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019dd2:	e7f8      	b.n	8019dc6 <memmove+0xc>
 8019dd4:	4283      	cmp	r3, r0
 8019dd6:	d9f5      	bls.n	8019dc4 <memmove+0xa>
 8019dd8:	1881      	adds	r1, r0, r2
 8019dda:	1ad2      	subs	r2, r2, r3
 8019ddc:	42d3      	cmn	r3, r2
 8019dde:	d100      	bne.n	8019de2 <memmove+0x28>
 8019de0:	bd10      	pop	{r4, pc}
 8019de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019de6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019dea:	e7f7      	b.n	8019ddc <memmove+0x22>

08019dec <__malloc_lock>:
 8019dec:	4770      	bx	lr

08019dee <__malloc_unlock>:
 8019dee:	4770      	bx	lr

08019df0 <_realloc_r>:
 8019df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019df2:	4607      	mov	r7, r0
 8019df4:	4614      	mov	r4, r2
 8019df6:	460e      	mov	r6, r1
 8019df8:	b921      	cbnz	r1, 8019e04 <_realloc_r+0x14>
 8019dfa:	4611      	mov	r1, r2
 8019dfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019e00:	f7ff ba06 	b.w	8019210 <_malloc_r>
 8019e04:	b922      	cbnz	r2, 8019e10 <_realloc_r+0x20>
 8019e06:	f7ff f9b5 	bl	8019174 <_free_r>
 8019e0a:	4625      	mov	r5, r4
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e10:	f000 f814 	bl	8019e3c <_malloc_usable_size_r>
 8019e14:	42a0      	cmp	r0, r4
 8019e16:	d20f      	bcs.n	8019e38 <_realloc_r+0x48>
 8019e18:	4621      	mov	r1, r4
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	f7ff f9f8 	bl	8019210 <_malloc_r>
 8019e20:	4605      	mov	r5, r0
 8019e22:	2800      	cmp	r0, #0
 8019e24:	d0f2      	beq.n	8019e0c <_realloc_r+0x1c>
 8019e26:	4631      	mov	r1, r6
 8019e28:	4622      	mov	r2, r4
 8019e2a:	f7fe fd8b 	bl	8018944 <memcpy>
 8019e2e:	4631      	mov	r1, r6
 8019e30:	4638      	mov	r0, r7
 8019e32:	f7ff f99f 	bl	8019174 <_free_r>
 8019e36:	e7e9      	b.n	8019e0c <_realloc_r+0x1c>
 8019e38:	4635      	mov	r5, r6
 8019e3a:	e7e7      	b.n	8019e0c <_realloc_r+0x1c>

08019e3c <_malloc_usable_size_r>:
 8019e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e40:	1f18      	subs	r0, r3, #4
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	bfbc      	itt	lt
 8019e46:	580b      	ldrlt	r3, [r1, r0]
 8019e48:	18c0      	addlt	r0, r0, r3
 8019e4a:	4770      	bx	lr

08019e4c <_init>:
 8019e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e4e:	bf00      	nop
 8019e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e52:	bc08      	pop	{r3}
 8019e54:	469e      	mov	lr, r3
 8019e56:	4770      	bx	lr

08019e58 <_fini>:
 8019e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e5a:	bf00      	nop
 8019e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e5e:	bc08      	pop	{r3}
 8019e60:	469e      	mov	lr, r3
 8019e62:	4770      	bx	lr
